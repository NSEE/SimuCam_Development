
USB3_Tests.elf:     file format elf32-littlenios2
USB3_Tests.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80200244

Program Header:
    LOAD off    0x00001020 vaddr 0x80200020 paddr 0x80200020 align 2**12
         filesz 0x0001eb78 memsz 0x0001f1f8 flags rwx
    LOAD off    0x00020000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00020000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  80200020  80200020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b804  80200244  80200244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001498  8021ba48  8021ba48  0001ca48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cb8  8021cee0  8021cee0  0001dee0  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000680  8021eb98  8021eb98  0001fb98  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  8021f218  8021f218  00020000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00020000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011b0  00000000  00000000  00020028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002ea81  00000000  00000000  000211d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b7b7  00000000  00000000  0004fc59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fbca  00000000  00000000  0005b410  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003208  00000000  00000000  0006afdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005334  00000000  00000000  0006e1e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d75d  00000000  00000000  00073518  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00090c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001bf0  00000000  00000000  00090cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00096de5  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00096de8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00096df4  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00096df5  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00096df6  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00096dfa  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00096dfe  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00096e02  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00096e0d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00096e18  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  00096e23  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000042  00000000  00000000  00096e34  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001f4e08  00000000  00000000  00096e76  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
80200020 l    d  .exceptions	00000000 .exceptions
80200244 l    d  .text	00000000 .text
8021ba48 l    d  .rodata	00000000 .rodata
8021cee0 l    d  .rwdata	00000000 .rwdata
8021eb98 l    d  .bss	00000000 .bss
8021f218 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../USB3_Tests_bsp//obj/HAL/src/crt0.o
80200278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 simucam_dma.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
80203c74 l     F .text	00000134 msgdma_write_extended_descriptor
80203da8 l     F .text	0000015c msgdma_construct_extended_descriptor
80203f04 l     F .text	00000288 msgdma_descriptor_async_transfer
8020418c l     F .text	00000348 msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
8021cee0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
8021ca7e l     O .rodata	00000010 zeroes.4389
8021ca8e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
8021ca9e l     O .rodata	00000010 zeroes.4404
8020ae90 l     F .text	000000bc __sbprintf
8021caae l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
8020b0a0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
8020cbd0 l     F .text	00000008 __fp_unlock
8020cbe4 l     F .text	0000019c __sinit.part.1
8020cd80 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
8021d324 l     O .rwdata	00000020 lc_ctype_charset
8021d304 l     O .rwdata	00000020 lc_message_charset
8021d344 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
8021cadc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
8021cc10 l     O .rodata	00000010 blanks.4332
8021cc00 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
80211440 l     F .text	000000fc __sprint_r.part.0
8021cc30 l     O .rodata	00000010 blanks.4348
8021cc20 l     O .rodata	00000010 zeroes.4349
802129cc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
8021674c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
80216878 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
802168a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
80216990 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
80216a70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
80216c44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8021eb80 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
80217064 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
80217198 l     F .text	00000034 alt_dev_reg
8021d930 l     O .rwdata	00001060 jtag_uart_0
8021e990 l     O .rwdata	000000c4 rs232_uart
8021ea60 l     O .rwdata	00000060 dma_DDR_M1
8021eac0 l     O .rwdata	00000060 dma_DDR_M2
8021eb20 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
80217510 l     F .text	0000020c altera_avalon_jtag_uart_irq
8021771c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
80217d54 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
80218004 l     F .text	0000009c altera_avalon_uart_irq
802180a0 l     F .text	000000e4 altera_avalon_uart_rxirq
80218184 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
80218320 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
80218538 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
80218720 l     F .text	0000003c alt_get_errno
8021875c l     F .text	00000094 alt_msgdma_write_standard_descriptor
802187f0 l     F .text	0000012c alt_msgdma_write_extended_descriptor
8021891c l     F .text	00000184 alt_msgdma_irq
80218aa0 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
80218b2c l     F .text	00000154 alt_msgdma_construct_extended_descriptor
80218c80 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
80218f50 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
80219598 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
8021963c l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8021a814 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
8021ace4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
8021ae24 l     F .text	0000003c alt_get_errno
8021ae60 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
8021ebec g     O .bss	00000004 alt_instruction_exception_handler
8021a5d0 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
8020f678 g     F .text	00000074 _mprec_log10
802035a8 g     F .text	00000100 I2C_Read
8020f764 g     F .text	0000008c __any_on
80212f68 g     F .text	00000054 _isatty_r
8021cae8 g     O .rodata	00000028 __mprec_tinytens
80216b80 g     F .text	0000007c alt_main
80206874 g     F .text	000000c0 _puts_r
8021f118 g     O .bss	00000100 alt_irq
80212fbc g     F .text	00000060 _lseek_r
802151b4 g     F .text	00000088 .hidden __eqdf2
80219378 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
8021f218 g       *ABS*	00000000 __alt_heap_start
8021ebb1 g     O .bss	00000001 SspdConfigControl
80206838 g     F .text	0000003c printf
802131d4 g     F .text	0000009c _wcrtomb_r
8020fef4 g     F .text	0000005c __sseek
8020cf20 g     F .text	00000010 __sinit
8020458c g     F .text	0000003c iMsgdmaExtendedDescriptorAsyncTransfer
8021307c g     F .text	00000140 __swbuf_r
8020d9e8 g     F .text	0000007c _setlocale_r
8021eb4c g     O .rwdata	00000004 LedsPainelControl
8021ec18 g     O .bss	00000100 cDebugBuffer
8020cd88 g     F .text	00000068 __sfmoreglue
80216c20 g     F .text	00000024 __malloc_unlock
80202598 g     F .text	00000078 uliXorshift32
80205df8 g     F .text	00000440 .hidden __divsf3
80205240 g     F .text	000005d0 vLoopbackTest
8021ebb4 g     O .bss	00000004 fp
8020e570 g     F .text	0000015c memmove
8020cf08 g     F .text	00000018 _cleanup
8020e7f4 g     F .text	000000a8 _Balloc
802192c8 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
8021eb9c g     O .bss	00000004 pxDmaM1Dev
8021523c g     F .text	000000dc .hidden __gtdf2
8021b2e0 g     F .text	00000024 altera_nios2_gen2_irq_init
80203904 g     F .text	00000130 i2c_write
86020000 g     F .entry	00000000 __reset
80212f0c g     F .text	0000005c _fstat_r
8021ebd0 g     O .bss	00000004 errno
8020fe70 g     F .text	00000008 __seofread
80210204 g     F .text	0000123c ___svfiprintf_internal_r
8021ebd8 g     O .bss	00000004 alt_argv
80226b4c g       *ABS*	00000000 _gp
80217034 g     F .text	00000030 usleep
80203b8c g     F .text	00000078 bSetBoardLeds
80219e5c g     F .text	00000144 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
8021d7ac g     O .rwdata	00000180 alt_fd_list
8021a9b4 g     F .text	00000090 alt_find_dev
802066c0 g     F .text	00000148 memcpy
8020cbd8 g     F .text	0000000c _cleanup_r
802164a0 g     F .text	000000dc .hidden __floatsidf
8021ada8 g     F .text	0000007c alt_io_redirect
80215318 g     F .text	000000f4 .hidden __ltdf2
802026c4 g     F .text	000000bc bSdmaInitM2Dma
8021ba48 g       *ABS*	00000000 __DTOR_END__
8021a30c g     F .text	000000ac alt_msgdma_start_prefetcher_with_extd_desc_list
8021a60c g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
8021a57c g     F .text	00000054 alt_msgdma_register_callback
80206934 g     F .text	00000014 puts
8021b4b0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
8020fd54 g     F .text	00000074 __fpclassifyd
8020f5d4 g     F .text	000000a4 __ratio
802129b0 g     F .text	0000001c __vfiprintf_internal
8020324c g     F .text	00000204 bSdmaDmaM2FtdiTransfer
80217914 g     F .text	0000021c altera_avalon_jtag_uart_read
80219ac8 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
80206808 g     F .text	00000030 _printf_r
80213f64 g     F .text	00000064 .hidden __udivsi3
802169cc g     F .text	000000a4 isatty
8021ebb0 g     O .bss	00000001 LedsBoardControl
8021cb38 g     O .rodata	000000c8 __mprec_tens
8020da64 g     F .text	0000000c __locale_charset
802036a8 g     F .text	00000158 I2C_MultipleRead
8021ebcc g     O .bss	00000004 __malloc_top_pad
8021eb58 g     O .rwdata	00000004 __mb_cur_max
8020da94 g     F .text	0000000c _localeconv_r
8020ec00 g     F .text	0000003c __i2b
8020d3a4 g     F .text	000004bc __sfvwrite_r
80205810 g     F .text	000005e8 vLoopbackRandomTest
8020fdc8 g     F .text	00000054 _sbrk_r
8021301c g     F .text	00000060 _read_r
8021a7ec g     F .text	00000028 alt_dcache_flush
8020215c g     F .text	0000043c bDdr2MemoryRandomReadTest
8021eb78 g     O .rwdata	00000004 alt_max_fd
80212c00 g     F .text	000000f0 _fclose_r
8020cba0 g     F .text	00000030 fflush
8021ebc8 g     O .bss	00000004 __malloc_max_sbrked_mem
8020644c g     F .text	00000110 .hidden __extendsfdf2
80203450 g     F .text	00000080 I2C_TestAdress
80214020 g     F .text	000008ac .hidden __adddf3
8020f37c g     F .text	0000010c __b2d
80219828 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
8021eba4 g     O .bss	00000004 ESdmaFtdiOperation
80213934 g     F .text	00000538 .hidden __umoddi3
80216aac g     F .text	000000d4 lseek
8021eb50 g     O .rwdata	00000004 _global_impure_ptr
80204bac g     F .text	00000044 bSSDisplayUpdate
8020f7f0 g     F .text	00000564 _realloc_r
8021f218 g       *ABS*	00000000 __bss_end
8021abf4 g     F .text	000000f0 alt_iic_isr_register
80216f2c g     F .text	00000108 alt_tick
8021a410 g     F .text	0000016c alt_msgdma_init
802133bc g     F .text	00000578 .hidden __udivdi3
80212e68 g     F .text	00000024 _fputwc_r
8021cb10 g     O .rodata	00000028 __mprec_bigtens
8020e9e4 g     F .text	00000104 __s2b
8021657c g     F .text	000000a8 .hidden __floatunsidf
8020f0bc g     F .text	00000060 __mcmp
80217f58 g     F .text	000000ac altera_avalon_uart_init
8021a684 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
80202be8 g     F .text	00000470 bSdmaDmaM2Transfer
8020cf40 g     F .text	00000018 __fp_lock_all
8021aba8 g     F .text	0000004c alt_ic_irq_enabled
802034d0 g     F .text	000000d8 I2C_Write
80216e90 g     F .text	0000009c alt_alarm_stop
8021ebe8 g     O .bss	00000004 alt_irq_active
802000fc g     F .exceptions	000000d4 alt_irq_handler
8021d784 g     O .rwdata	00000028 alt_dev_null
80219460 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
80203800 g     F .text	0000008c i2c_start
8021a260 g     F .text	000000ac alt_msgdma_start_prefetcher_with_std_desc_list
80216858 g     F .text	00000020 alt_dcache_flush_all
8020eae8 g     F .text	00000068 __hi0bits
80216420 g     F .text	00000080 .hidden __fixdfsi
80200000 g       *ABS*	00000000 __alt_mem_onchip_memory
8021eb70 g     O .rwdata	00000008 alt_dev_list
802170a0 g     F .text	000000f8 write
8021b614 g     F .text	000000a0 _putc_r
802168e0 g     F .text	000000b0 fstat
80215318 g     F .text	000000f4 .hidden __ledf2
8020ee34 g     F .text	00000140 __pow5mult
80211554 g     F .text	0000145c ___vfiprintf_internal_r
8021ebc0 g     O .bss	00000004 __nlocale_changed
80213fc8 g     F .text	00000058 .hidden __umodsi3
80219880 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
8021f218 g       *ABS*	00000000 end
80218574 g     F .text	000001ac altera_avalon_uart_write
80217450 g     F .text	000000c0 altera_avalon_jtag_uart_init
802001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
8021ba48 g       *ABS*	00000000 __CTOR_LIST__
80240000 g       *ABS*	00000000 __alt_stack_pointer
80201d44 g     F .text	00000418 bDdr2MemoryRandomWriteTest
80217dcc g     F .text	0000007c alt_avalon_timer_sc_init
80217ea8 g     F .text	00000060 altera_avalon_uart_write_fd
8020655c g     F .text	00000064 .hidden __clzsi2
80217f08 g     F .text	00000050 altera_avalon_uart_close_fd
80217b30 g     F .text	00000224 altera_avalon_jtag_uart_write
8020cf30 g     F .text	00000004 __sfp_lock_acquire
8020e48c g     F .text	000000e4 memchr
80208c7c g     F .text	000021f8 ___vfprintf_internal_r
80206948 g     F .text	00000058 _sprintf_r
8020d094 g     F .text	00000310 _free_r
8021b078 g     F .text	0000022c alt_printf
8020da70 g     F .text	00000010 __locale_mb_cur_max
8021b894 g     F .text	00000180 __call_exitprocs
8021ebbc g     O .bss	00000004 __mlocale_changed
8021eb5c g     O .rwdata	00000004 __malloc_sbrk_base
80200244 g     F .text	00000038 _start
8021ebe0 g     O .bss	00000004 _alt_tick_rate
8020ef74 g     F .text	00000148 __lshift
80203058 g     F .text	000001f4 bSdmaDmaM1FtdiTransfer
80219320 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
8021ebe4 g     O .bss	00000004 _alt_nticks
80216c80 g     F .text	000000fc read
80217204 g     F .text	000000e8 alt_sys_init
80206238 g     F .text	00000124 .hidden __floatsisf
80210034 g     F .text	000001d0 __ssprint_r
80200720 g     F .text	00000b74 bDdr2EepromDump
8021b77c g     F .text	00000118 __register_exitproc
8020ec3c g     F .text	000001f8 __multiply
802177bc g     F .text	00000068 altera_avalon_jtag_uart_close
8021ebf0 g     O .bss	00000028 __malloc_current_mallinfo
8020f488 g     F .text	0000014c __d2b
802172ec g     F .text	00000060 altera_avalon_jtag_uart_read_fd
8021b40c g     F .text	000000a4 alt_get_fd
80216624 g     F .text	00000128 alt_busy_sleep
80212ae8 g     F .text	00000054 _close_r
802197d0 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
8021b598 g     F .text	0000007c memcmp
802173ac g     F .text	00000050 altera_avalon_jtag_uart_close_fd
8021f218 g       *ABS*	00000000 __alt_stack_base
802173fc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
802065c0 g     F .text	000000cc _fwrite_r
802198d8 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
8020af4c g     F .text	00000154 __swsetup_r
802148cc g     F .text	000008e8 .hidden __divdf3
8020cdf0 g     F .text	00000118 __sfp
8020f6ec g     F .text	00000078 __copybits
8021d37c g     O .rwdata	00000408 __malloc_av_
8020cf3c g     F .text	00000004 __sinit_lock_release
8021eb98 g     O .bss	00000004 uliInitialState
8020388c g     F .text	00000078 i2c_stop
8021540c g     F .text	00000718 .hidden __muldf3
8020fe1c g     F .text	00000054 __sread
8021b304 g     F .text	00000108 alt_find_file
8021a850 g     F .text	000000a4 alt_dev_llist_insert
80216bfc g     F .text	00000024 __malloc_lock
80216de0 g     F .text	000000b0 sbrk
80206aa4 g     F .text	000021d8 ___svfprintf_internal_r
8020cb44 g     F .text	0000005c _fflush_r
80212b3c g     F .text	000000c4 _calloc_r
8021eb98 g       *ABS*	00000000 __bss_start
8020e6cc g     F .text	00000128 memset
8021a3b8 g     F .text	00000058 alt_msgdma_open
80204bf0 g     F .text	0000009c main
8021ebdc g     O .bss	00000004 alt_envp
8021ebc4 g     O .bss	00000004 __malloc_max_total_mem
80219bb8 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
8021734c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
80203a34 g     F .text	00000158 i2c_read
802131bc g     F .text	00000018 __swbuf
8020ff50 g     F .text	00000008 __sclose
80240000 g       *ABS*	00000000 __alt_heap_limit
80204f90 g     F .text	000002b0 vReadTest
80212cf0 g     F .text	00000014 fclose
8020b2a0 g     F .text	00001688 _dtoa_r
80219fa0 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
8020dc80 g     F .text	0000080c _malloc_r
80213330 g     F .text	00000030 __ascii_wctomb
8021eb7c g     O .rwdata	00000004 alt_errno
80219a10 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
80204604 g     F .text	000004e0 POWER_SPI_RW
8020d860 g     F .text	000000c4 _fwalk
8021b6b4 g     F .text	000000c8 putc
80213e6c g     F .text	00000084 .hidden __divsi3
8020cf70 g     F .text	00000124 _malloc_trim_r
8021ba48 g       *ABS*	00000000 __CTOR_END__
8020027c g     F .text	000004a4 bDdr2EepromTest
8020ff58 g     F .text	000000dc strcmp
8021ba48 g       *ABS*	00000000 __DTOR_LIST__
802151b4 g     F .text	00000088 .hidden __nedf2
802171cc g     F .text	00000038 alt_irq_init
80216d7c g     F .text	00000064 alt_release_fd
8021a648 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
802069a0 g     F .text	0000006c sprintf
8021c931 g     O .rodata	00000100 .hidden __clz_tab
8020134c g     F .text	00000538 bDdr2MemoryWriteTest
8021ebb8 g     O .bss	00000004 _PathLocale
802044d4 g     F .text	000000b8 iMsgdmaConstructExtendedMmToMmDescriptor
8021b54c g     F .text	00000014 atexit
80212a88 g     F .text	00000060 _write_r
8020daa0 g     F .text	00000018 setlocale
80219978 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8021eb54 g     O .rwdata	00000004 _impure_ptr
8021ebd4 g     O .bss	00000004 alt_argc
8020c928 g     F .text	0000021c __sflush_r
8021a954 g     F .text	00000060 _do_dtors
8020da8c g     F .text	00000008 __locale_cjk_lang
8021eba8 g     O .bss	00000004 ESdmaBufferSide
80200020 g       .exceptions	00000000 alt_irq_entry
8020f318 g     F .text	00000064 __ulp
8020cf58 g     F .text	00000018 __fp_unlock_all
8021eb68 g     O .rwdata	00000008 alt_fs_list
8021ed18 g     O .bss	00000400 xSZData
80202610 g     F .text	000000b4 bSdmaInitM1Dma
8020dab8 g     F .text	0000000c localeconv
8021aa44 g     F .text	00000050 alt_ic_isr_register
8020668c g     F .text	00000034 fwrite
8021eb98 g       *ABS*	00000000 _edata
80217e48 g     F .text	00000060 altera_avalon_uart_read_fd
8021f218 g       *ABS*	00000000 _end
80201294 g     F .text	000000b8 bDdr2SwitchMemory
80212d04 g     F .text	00000164 __fputwc
80217824 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
80204c8c g     F .text	00000304 vWriteTest
8021ab1c g     F .text	0000008c alt_ic_irq_disable
80202780 g     F .text	00000468 bSdmaDmaM1Transfer
8020fe78 g     F .text	0000007c __swrite
8021eb60 g     O .rwdata	00000004 __malloc_trim_threshold
8020da80 g     F .text	0000000c __locale_msgcharset
802045c8 g     F .text	0000003c iMsgdmaExtendedDescriptorSyncTransfer
8021b560 g     F .text	00000038 exit
8020d924 g     F .text	000000c4 _fwalk_reent
80219d50 g     F .text	0000010c alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8020635c g     F .text	000000f0 .hidden __floatunsisf
8020f11c g     F .text	000001fc __mdiff
80213ef0 g     F .text	00000074 .hidden __modsi3
80240000 g       *ABS*	00000000 __alt_data_end
80200020 g     F .exceptions	00000000 alt_exception
8020cf34 g     F .text	00000004 __sfp_lock_release
80203c04 g     F .text	00000070 bSetPainelLeds
802194f0 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
80201884 g     F .text	000004c0 bDdr2MemoryReadTest
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
802193d0 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
802182cc g     F .text	00000054 altera_avalon_uart_close
8021ba14 g     F .text	00000034 _exit
8021a6c0 g     F .text	0000012c alt_alarm_start
8021ebac g     O .bss	00000004 ESdmaChBufferId
8020dac4 g     F .text	000001bc __smakebuf_r
8021eb8c g     O .rwdata	00000008 alt_msgdma_list
80206a0c g     F .text	00000098 strlen
8021af24 g     F .text	00000154 open
8021523c g     F .text	000000dc .hidden __gedf2
8021b2a4 g     F .text	0000003c alt_putchar
8021eb64 g     O .rwdata	00000004 __wctomb
8021153c g     F .text	00000018 __sprint_r
8021eba0 g     O .bss	00000004 pxDmaM2Dev
8021eb94 g     O .rwdata	00000004 alt_priority_mask
80204ae4 g     F .text	000000c8 bSSDisplayConfig
8021aa94 g     F .text	00000088 alt_ic_irq_enable
8020ae74 g     F .text	0000001c __vfprintf_internal
8021835c g     F .text	000001dc altera_avalon_uart_read
80213360 g     F .text	0000005c _wctomb_r
80215b24 g     F .text	000008fc .hidden __subdf3
8020eb50 g     F .text	000000b0 __lo0bits
8021eb84 g     O .rwdata	00000008 alt_alarm_list
8021a8f4 g     F .text	00000060 _do_ctors
80213270 g     F .text	000000c0 wcrtomb
80216788 g     F .text	000000d0 close
80212e8c g     F .text	00000080 fputwc
8020cf38 g     F .text	00000004 __sinit_lock_acquire
8020e8c4 g     F .text	00000120 __multadd
8020e89c g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

80200020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
80200020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
80200024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
80200028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8020002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
80200030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
80200034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
80200038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8020003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
80200040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
80200044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
80200048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8020004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
80200050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
80200054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
80200058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8020005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
80200060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
80200064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
80200068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8020006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
80200070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
80200074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
80200078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8020007c:	10000326 	beq	r2,zero,8020008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
80200080:	20000226 	beq	r4,zero,8020008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
80200084:	02000fc0 	call	802000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
80200088:	00000706 	br	802000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8020008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
80200090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
80200094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
80200098:	02001d00 	call	802001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8020009c:	1000021e 	bne	r2,zero,802000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
802000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
802000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
802000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
802000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
802000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
802000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
802000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
802000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
802000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
802000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
802000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
802000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
802000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
802000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
802000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
802000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
802000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
802000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
802000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
802000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
802000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
802000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
802000f8:	ef80083a 	eret

802000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
802000fc:	defff904 	addi	sp,sp,-28
80200100:	dfc00615 	stw	ra,24(sp)
80200104:	df000515 	stw	fp,20(sp)
80200108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8020010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
80200110:	0005313a 	rdctl	r2,ipending
80200114:	e0bffe15 	stw	r2,-8(fp)

  return active;
80200118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8020011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
80200120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
80200124:	00800044 	movi	r2,1
80200128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8020012c:	e0fffb17 	ldw	r3,-20(fp)
80200130:	e0bffc17 	ldw	r2,-16(fp)
80200134:	1884703a 	and	r2,r3,r2
80200138:	10001426 	beq	r2,zero,8020018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8020013c:	00a008b4 	movhi	r2,32802
80200140:	10bc4604 	addi	r2,r2,-3816
80200144:	e0fffd17 	ldw	r3,-12(fp)
80200148:	180690fa 	slli	r3,r3,3
8020014c:	10c5883a 	add	r2,r2,r3
80200150:	10c00017 	ldw	r3,0(r2)
80200154:	00a008b4 	movhi	r2,32802
80200158:	10bc4604 	addi	r2,r2,-3816
8020015c:	e13ffd17 	ldw	r4,-12(fp)
80200160:	200890fa 	slli	r4,r4,3
80200164:	1105883a 	add	r2,r2,r4
80200168:	10800104 	addi	r2,r2,4
8020016c:	10800017 	ldw	r2,0(r2)
80200170:	1009883a 	mov	r4,r2
80200174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
80200178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8020017c:	0005313a 	rdctl	r2,ipending
80200180:	e0bfff15 	stw	r2,-4(fp)

  return active;
80200184:	e0bfff17 	ldw	r2,-4(fp)
80200188:	00000706 	br	802001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8020018c:	e0bffc17 	ldw	r2,-16(fp)
80200190:	1085883a 	add	r2,r2,r2
80200194:	e0bffc15 	stw	r2,-16(fp)
      i++;
80200198:	e0bffd17 	ldw	r2,-12(fp)
8020019c:	10800044 	addi	r2,r2,1
802001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
802001a4:	003fe106 	br	8020012c <__reset+0xfa1e012c>

    active = alt_irq_pending ();
802001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
802001ac:	e0bffb17 	ldw	r2,-20(fp)
802001b0:	103fdb1e 	bne	r2,zero,80200120 <__reset+0xfa1e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
802001b4:	0001883a 	nop
}
802001b8:	0001883a 	nop
802001bc:	e037883a 	mov	sp,fp
802001c0:	dfc00117 	ldw	ra,4(sp)
802001c4:	df000017 	ldw	fp,0(sp)
802001c8:	dec00204 	addi	sp,sp,8
802001cc:	f800283a 	ret

802001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
802001d0:	defffb04 	addi	sp,sp,-20
802001d4:	dfc00415 	stw	ra,16(sp)
802001d8:	df000315 	stw	fp,12(sp)
802001dc:	df000304 	addi	fp,sp,12
802001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
802001e4:	000531fa 	rdctl	r2,exception
802001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
802001ec:	e0bffd17 	ldw	r2,-12(fp)
802001f0:	10801f0c 	andi	r2,r2,124
802001f4:	1004d0ba 	srli	r2,r2,2
802001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
802001fc:	0005333a 	rdctl	r2,badaddr
80200200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
80200204:	d0a02817 	ldw	r2,-32608(gp)
80200208:	10000726 	beq	r2,zero,80200228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8020020c:	d0a02817 	ldw	r2,-32608(gp)
80200210:	e0fffd17 	ldw	r3,-12(fp)
80200214:	e1bffe17 	ldw	r6,-8(fp)
80200218:	e17fff17 	ldw	r5,-4(fp)
8020021c:	1809883a 	mov	r4,r3
80200220:	103ee83a 	callr	r2
80200224:	00000206 	br	80200230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
80200228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8020022c:	0005883a 	mov	r2,zero
}
80200230:	e037883a 	mov	sp,fp
80200234:	dfc00117 	ldw	ra,4(sp)
80200238:	df000017 	ldw	fp,0(sp)
8020023c:	dec00204 	addi	sp,sp,8
80200240:	f800283a 	ret

Disassembly of section .text:

80200244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
80200244:	06e00934 	movhi	sp,32804
    ori sp, sp, %lo(__alt_stack_pointer)
80200248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
8020024c:	06a008b4 	movhi	gp,32802
    ori gp, gp, %lo(_gp)
80200250:	d69ad314 	ori	gp,gp,27468
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
80200254:	00a00874 	movhi	r2,32801
    ori r2, r2, %lo(__bss_start)
80200258:	10bae614 	ori	r2,r2,60312

    movhi r3, %hi(__bss_end)
8020025c:	00e00874 	movhi	r3,32801
    ori r3, r3, %lo(__bss_end)
80200260:	18fc8614 	ori	r3,r3,61976

    beq r2, r3, 1f
80200264:	10c00326 	beq	r2,r3,80200274 <_start+0x30>

0:
    stw zero, (r2)
80200268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8020026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
80200270:	10fffd36 	bltu	r2,r3,80200268 <__reset+0xfa1e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
80200274:	0216b800 	call	80216b80 <alt_main>

80200278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
80200278:	003fff06 	br	80200278 <__reset+0xfa1e0278>

8020027c <bDdr2EepromTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromTest(alt_u8 ucMemoryId) {
8020027c:	defff604 	addi	sp,sp,-40
80200280:	dfc00915 	stw	ra,36(sp)
80200284:	df000815 	stw	fp,32(sp)
80200288:	df000804 	addi	fp,sp,32
8020028c:	2005883a 	mov	r2,r4
80200290:	e0bfff05 	stb	r2,-4(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Test =====\n");
80200294:	00e008b4 	movhi	r3,32802
80200298:	18fb0604 	addi	r3,r3,-5096
8020029c:	00a008b4 	movhi	r2,32802
802002a0:	10ae9204 	addi	r2,r2,-17848
802002a4:	1009883a 	mov	r4,r2
802002a8:	00800884 	movi	r2,34
802002ac:	100d883a 	mov	r6,r2
802002b0:	200b883a 	mov	r5,r4
802002b4:	1809883a 	mov	r4,r3
802002b8:	02066c00 	call	802066c0 <memcpy>
	debug(fp, cDebugBuffer);
802002bc:	012008b4 	movhi	r4,32802
802002c0:	213b0604 	addi	r4,r4,-5096
802002c4:	02068380 	call	80206838 <printf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
802002c8:	00bfe804 	movi	r2,-96
802002cc:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess = FALSE;
802002d0:	e03ff915 	stw	zero,-28(fp)
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	switch (ucMemoryId) {
802002d4:	e0bfff03 	ldbu	r2,-4(fp)
802002d8:	10000326 	beq	r2,zero,802002e8 <bDdr2EepromTest+0x6c>
802002dc:	10800060 	cmpeqi	r2,r2,1
802002e0:	10000a1e 	bne	r2,zero,8020030c <bDdr2EepromTest+0x90>
802002e4:	00001206 	br	80200330 <bDdr2EepromTest+0xb4>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
802002e8:	00a04034 	movhi	r2,33024
802002ec:	10816c04 	addi	r2,r2,1456
802002f0:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
802002f4:	00a04034 	movhi	r2,33024
802002f8:	10817004 	addi	r2,r2,1472
802002fc:	e0bffb15 	stw	r2,-20(fp)
		bSuccess = TRUE;
80200300:	00800044 	movi	r2,1
80200304:	e0bff915 	stw	r2,-28(fp)
		break;
80200308:	00001906 	br	80200370 <bDdr2EepromTest+0xf4>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
8020030c:	00a04034 	movhi	r2,33024
80200310:	10814804 	addi	r2,r2,1312
80200314:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
80200318:	00a04034 	movhi	r2,33024
8020031c:	10814c04 	addi	r2,r2,1328
80200320:	e0bffb15 	stw	r2,-20(fp)
		bSuccess = TRUE;
80200324:	00800044 	movi	r2,1
80200328:	e0bff915 	stw	r2,-28(fp)
		break;
8020032c:	00001006 	br	80200370 <bDdr2EepromTest+0xf4>
	default:
		bSuccess = FALSE;
80200330:	e03ff915 	stw	zero,-28(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80200334:	00e008b4 	movhi	r3,32802
80200338:	18fb0604 	addi	r3,r3,-5096
8020033c:	00a008b4 	movhi	r2,32802
80200340:	10ae9b04 	addi	r2,r2,-17812
80200344:	1009883a 	mov	r4,r2
80200348:	00800bc4 	movi	r2,47
8020034c:	100d883a 	mov	r6,r2
80200350:	200b883a 	mov	r5,r4
80200354:	1809883a 	mov	r4,r3
80200358:	02066c00 	call	802066c0 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
8020035c:	012008b4 	movhi	r4,32802
80200360:	213b0604 	addi	r4,r4,-5096
80200364:	02068380 	call	80206838 <printf>
		;
#endif
		return bSuccess;
80200368:	e0bff917 	ldw	r2,-28(fp)
8020036c:	0000e706 	br	8020070c <bDdr2EepromTest+0x490>
	}

	alt_u8 ucControlAddr, ucValue;
#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
80200370:	00e008b4 	movhi	r3,32802
80200374:	18fb0604 	addi	r3,r3,-5096
80200378:	00a008b4 	movhi	r2,32802
8020037c:	10aea704 	addi	r2,r2,-17764
80200380:	1009883a 	mov	r4,r2
80200384:	008005c4 	movi	r2,23
80200388:	100d883a 	mov	r6,r2
8020038c:	200b883a 	mov	r5,r4
80200390:	1809883a 	mov	r4,r3
80200394:	02066c00 	call	802066c0 <memcpy>
	debug(fp, cDebugBuffer);
80200398:	012008b4 	movhi	r4,32802
8020039c:	213b0604 	addi	r4,r4,-5096
802003a0:	02068380 	call	80206838 <printf>
#endif
	usleep(20 * 1000);
802003a4:	01138804 	movi	r4,20000
802003a8:	02170340 	call	80217034 <usleep>
	for (iI = 0; iI < 256 && bSuccess; iI++) {
802003ac:	e03ffc15 	stw	zero,-16(fp)
802003b0:	00002f06 	br	80200470 <bDdr2EepromTest+0x1f4>
		ucControlAddr = iI;
802003b4:	e0bffc17 	ldw	r2,-16(fp)
802003b8:	e0bffd45 	stb	r2,-11(fp)
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
802003bc:	e0bffd03 	ldbu	r2,-12(fp)
802003c0:	10c03fcc 	andi	r3,r2,255
802003c4:	18c0201c 	xori	r3,r3,128
802003c8:	18ffe004 	addi	r3,r3,-128
802003cc:	e13ffd43 	ldbu	r4,-11(fp)
802003d0:	e0bffe04 	addi	r2,fp,-8
802003d4:	d8800015 	stw	r2,0(sp)
802003d8:	200f883a 	mov	r7,r4
802003dc:	180d883a 	mov	r6,r3
802003e0:	e17ffb17 	ldw	r5,-20(fp)
802003e4:	e13ffa17 	ldw	r4,-24(fp)
802003e8:	02035a80 	call	802035a8 <I2C_Read>
802003ec:	e0bff915 	stw	r2,-28(fp)
				ucControlAddr, &ucValue);
		if (bSuccess) {
802003f0:	e0bff917 	ldw	r2,-28(fp)
802003f4:	10000e26 	beq	r2,zero,80200430 <bDdr2EepromTest+0x1b4>
#if DEBUG_ON
			sprintf(cDebugBuffer, "EEPROM[%03d]=%02Xh\n", ucControlAddr,
802003f8:	e0bffd43 	ldbu	r2,-11(fp)
802003fc:	e0fffe03 	ldbu	r3,-8(fp)
80200400:	18c03fcc 	andi	r3,r3,255
80200404:	180f883a 	mov	r7,r3
80200408:	100d883a 	mov	r6,r2
8020040c:	016008b4 	movhi	r5,32802
80200410:	296ead04 	addi	r5,r5,-17740
80200414:	012008b4 	movhi	r4,32802
80200418:	213b0604 	addi	r4,r4,-5096
8020041c:	02069a00 	call	802069a0 <sprintf>
					ucValue);
			debug(fp, cDebugBuffer);
80200420:	012008b4 	movhi	r4,32802
80200424:	213b0604 	addi	r4,r4,-5096
80200428:	02068380 	call	80206838 <printf>
8020042c:	00000d06 	br	80200464 <bDdr2EepromTest+0x1e8>
#endif
		} else {
#if DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
80200430:	00e008b4 	movhi	r3,32802
80200434:	18fb0604 	addi	r3,r3,-5096
80200438:	00a008b4 	movhi	r2,32802
8020043c:	10aeb204 	addi	r2,r2,-17720
80200440:	1009883a 	mov	r4,r2
80200444:	008005c4 	movi	r2,23
80200448:	100d883a 	mov	r6,r2
8020044c:	200b883a 	mov	r5,r4
80200450:	1809883a 	mov	r4,r3
80200454:	02066c00 	call	802066c0 <memcpy>
			debug(fp, cDebugBuffer);
80200458:	012008b4 	movhi	r4,32802
8020045c:	213b0604 	addi	r4,r4,-5096
80200460:	02068380 	call	80206838 <printf>
#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
	debug(fp, cDebugBuffer);
#endif
	usleep(20 * 1000);
	for (iI = 0; iI < 256 && bSuccess; iI++) {
80200464:	e0bffc17 	ldw	r2,-16(fp)
80200468:	10800044 	addi	r2,r2,1
8020046c:	e0bffc15 	stw	r2,-16(fp)
80200470:	e0bffc17 	ldw	r2,-16(fp)
80200474:	10804008 	cmpgei	r2,r2,256
80200478:	1000021e 	bne	r2,zero,80200484 <bDdr2EepromTest+0x208>
8020047c:	e0bff917 	ldw	r2,-28(fp)
80200480:	103fcc1e 	bne	r2,zero,802003b4 <__reset+0xfa1e03b4>
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
			debug(fp, cDebugBuffer);
#endif
		}
	}
	if (bSuccess) {
80200484:	e0bff917 	ldw	r2,-28(fp)
80200488:	10000e26 	beq	r2,zero,802004c4 <bDdr2EepromTest+0x248>
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Completed\n\n");
8020048c:	00e008b4 	movhi	r3,32802
80200490:	18fb0604 	addi	r3,r3,-5096
80200494:	00a008b4 	movhi	r2,32802
80200498:	10aeb804 	addi	r2,r2,-17696
8020049c:	1009883a 	mov	r4,r2
802004a0:	00800884 	movi	r2,34
802004a4:	100d883a 	mov	r6,r2
802004a8:	200b883a 	mov	r5,r4
802004ac:	1809883a 	mov	r4,r3
802004b0:	02066c00 	call	802066c0 <memcpy>
		debug(fp, cDebugBuffer);
802004b4:	012008b4 	movhi	r4,32802
802004b8:	213b0604 	addi	r4,r4,-5096
802004bc:	02068380 	call	80206838 <printf>
802004c0:	00000d06 	br	802004f8 <bDdr2EepromTest+0x27c>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Failed\n\n");
802004c4:	00e008b4 	movhi	r3,32802
802004c8:	18fb0604 	addi	r3,r3,-5096
802004cc:	00a008b4 	movhi	r2,32802
802004d0:	10aec104 	addi	r2,r2,-17660
802004d4:	1009883a 	mov	r4,r2
802004d8:	008007c4 	movi	r2,31
802004dc:	100d883a 	mov	r6,r2
802004e0:	200b883a 	mov	r5,r4
802004e4:	1809883a 	mov	r4,r3
802004e8:	02066c00 	call	802066c0 <memcpy>
		debug(fp, cDebugBuffer);
802004ec:	012008b4 	movhi	r4,32802
802004f0:	213b0604 	addi	r4,r4,-5096
802004f4:	02068380 	call	80206838 <printf>
#endif
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Write Test\n");
802004f8:	00e008b4 	movhi	r3,32802
802004fc:	18fb0604 	addi	r3,r3,-5096
80200500:	00a008b4 	movhi	r2,32802
80200504:	10aec904 	addi	r2,r2,-17628
80200508:	1009883a 	mov	r4,r2
8020050c:	00800604 	movi	r2,24
80200510:	100d883a 	mov	r6,r2
80200514:	200b883a 	mov	r5,r4
80200518:	1809883a 	mov	r4,r3
8020051c:	02066c00 	call	802066c0 <memcpy>
	debug(fp, cDebugBuffer);
80200520:	012008b4 	movhi	r4,32802
80200524:	213b0604 	addi	r4,r4,-5096
80200528:	02068380 	call	80206838 <printf>
#endif
	alt_u8 ucWriteData = 0x12, ucTestAddr = 128;
8020052c:	00800484 	movi	r2,18
80200530:	e0bffd85 	stb	r2,-10(fp)
80200534:	00bfe004 	movi	r2,-128
80200538:	e0bffdc5 	stb	r2,-9(fp)
	alt_u8 ucReadData;
	usleep(20 * 1000);
8020053c:	01138804 	movi	r4,20000
80200540:	02170340 	call	80217034 <usleep>
	bSuccess = I2C_Write(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
80200544:	e0bffd03 	ldbu	r2,-12(fp)
80200548:	10c03fcc 	andi	r3,r2,255
8020054c:	18c0201c 	xori	r3,r3,128
80200550:	18ffe004 	addi	r3,r3,-128
80200554:	e13ffdc3 	ldbu	r4,-9(fp)
80200558:	e0bffd83 	ldbu	r2,-10(fp)
8020055c:	d8800015 	stw	r2,0(sp)
80200560:	200f883a 	mov	r7,r4
80200564:	180d883a 	mov	r6,r3
80200568:	e17ffb17 	ldw	r5,-20(fp)
8020056c:	e13ffa17 	ldw	r4,-24(fp)
80200570:	02034d00 	call	802034d0 <I2C_Write>
80200574:	e0bff915 	stw	r2,-28(fp)
			ucTestAddr, ucWriteData);
	if (!bSuccess) {
80200578:	e0bff917 	ldw	r2,-28(fp)
8020057c:	10000e1e 	bne	r2,zero,802005b8 <bDdr2EepromTest+0x33c>
#if DEBUG_ON
		sprintf(cDebugBuffer, "Failed to write EEPROM\n");
80200580:	00e008b4 	movhi	r3,32802
80200584:	18fb0604 	addi	r3,r3,-5096
80200588:	00a008b4 	movhi	r2,32802
8020058c:	10aecf04 	addi	r2,r2,-17604
80200590:	1009883a 	mov	r4,r2
80200594:	00800604 	movi	r2,24
80200598:	100d883a 	mov	r6,r2
8020059c:	200b883a 	mov	r5,r4
802005a0:	1809883a 	mov	r4,r3
802005a4:	02066c00 	call	802066c0 <memcpy>
		debug(fp, cDebugBuffer);
802005a8:	012008b4 	movhi	r4,32802
802005ac:	213b0604 	addi	r4,r4,-5096
802005b0:	02068380 	call	80206838 <printf>
802005b4:	00002f06 	br	80200674 <bDdr2EepromTest+0x3f8>
#endif
	} else {
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
802005b8:	e0bffd03 	ldbu	r2,-12(fp)
802005bc:	10c03fcc 	andi	r3,r2,255
802005c0:	18c0201c 	xori	r3,r3,128
802005c4:	18ffe004 	addi	r3,r3,-128
802005c8:	e13ffdc3 	ldbu	r4,-9(fp)
802005cc:	e0bffe44 	addi	r2,fp,-7
802005d0:	d8800015 	stw	r2,0(sp)
802005d4:	200f883a 	mov	r7,r4
802005d8:	180d883a 	mov	r6,r3
802005dc:	e17ffb17 	ldw	r5,-20(fp)
802005e0:	e13ffa17 	ldw	r4,-24(fp)
802005e4:	02035a80 	call	802035a8 <I2C_Read>
802005e8:	e0bff915 	stw	r2,-28(fp)
				ucTestAddr, &ucReadData);
		if (!bSuccess) {
802005ec:	e0bff917 	ldw	r2,-28(fp)
802005f0:	10000e1e 	bne	r2,zero,8020062c <bDdr2EepromTest+0x3b0>
#if DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM for verify\n");
802005f4:	00e008b4 	movhi	r3,32802
802005f8:	18fb0604 	addi	r3,r3,-5096
802005fc:	00a008b4 	movhi	r2,32802
80200600:	10aed504 	addi	r2,r2,-17580
80200604:	1009883a 	mov	r4,r2
80200608:	00800884 	movi	r2,34
8020060c:	100d883a 	mov	r6,r2
80200610:	200b883a 	mov	r5,r4
80200614:	1809883a 	mov	r4,r3
80200618:	02066c00 	call	802066c0 <memcpy>
			debug(fp, cDebugBuffer);
8020061c:	012008b4 	movhi	r4,32802
80200620:	213b0604 	addi	r4,r4,-5096
80200624:	02068380 	call	80206838 <printf>
80200628:	00001206 	br	80200674 <bDdr2EepromTest+0x3f8>
#endif
		} else {
			if (ucReadData != ucWriteData) {
8020062c:	e0bffe43 	ldbu	r2,-7(fp)
80200630:	10c03fcc 	andi	r3,r2,255
80200634:	e0bffd83 	ldbu	r2,-10(fp)
80200638:	18800e26 	beq	r3,r2,80200674 <bDdr2EepromTest+0x3f8>
				bSuccess = FALSE;
8020063c:	e03ff915 	stw	zero,-28(fp)
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200640:	e0bffe43 	ldbu	r2,-7(fp)
80200644:	10803fcc 	andi	r2,r2,255
80200648:	e0fffd83 	ldbu	r3,-10(fp)
8020064c:	180f883a 	mov	r7,r3
80200650:	100d883a 	mov	r6,r2
80200654:	016008b4 	movhi	r5,32802
80200658:	296ede04 	addi	r5,r5,-17544
8020065c:	012008b4 	movhi	r4,32802
80200660:	213b0604 	addi	r4,r4,-5096
80200664:	02069a00 	call	802069a0 <sprintf>
						"Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n",
						ucReadData, ucWriteData);
				debug(fp, cDebugBuffer);
80200668:	012008b4 	movhi	r4,32802
8020066c:	213b0604 	addi	r4,r4,-5096
80200670:	02068380 	call	80206838 <printf>
#endif
			}
		}
	}
	if (bSuccess) {
80200674:	e0bff917 	ldw	r2,-28(fp)
80200678:	10000e26 	beq	r2,zero,802006b4 <bDdr2EepromTest+0x438>
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Completed\n\n");
8020067c:	00e008b4 	movhi	r3,32802
80200680:	18fb0604 	addi	r3,r3,-5096
80200684:	00a008b4 	movhi	r2,32802
80200688:	10aeed04 	addi	r2,r2,-17484
8020068c:	1009883a 	mov	r4,r2
80200690:	008008c4 	movi	r2,35
80200694:	100d883a 	mov	r6,r2
80200698:	200b883a 	mov	r5,r4
8020069c:	1809883a 	mov	r4,r3
802006a0:	02066c00 	call	802066c0 <memcpy>
		debug(fp, cDebugBuffer);
802006a4:	012008b4 	movhi	r4,32802
802006a8:	213b0604 	addi	r4,r4,-5096
802006ac:	02068380 	call	80206838 <printf>
802006b0:	00000d06 	br	802006e8 <bDdr2EepromTest+0x46c>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Failed\n\n");
802006b4:	00e008b4 	movhi	r3,32802
802006b8:	18fb0604 	addi	r3,r3,-5096
802006bc:	00a008b4 	movhi	r2,32802
802006c0:	10aef604 	addi	r2,r2,-17448
802006c4:	1009883a 	mov	r4,r2
802006c8:	00800804 	movi	r2,32
802006cc:	100d883a 	mov	r6,r2
802006d0:	200b883a 	mov	r5,r4
802006d4:	1809883a 	mov	r4,r3
802006d8:	02066c00 	call	802066c0 <memcpy>
		debug(fp, cDebugBuffer);
802006dc:	012008b4 	movhi	r4,32802
802006e0:	213b0604 	addi	r4,r4,-5096
802006e4:	02068380 	call	80206838 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
802006e8:	00a008b4 	movhi	r2,32802
802006ec:	10bb0604 	addi	r2,r2,-5096
802006f0:	00c00284 	movi	r3,10
802006f4:	10c00005 	stb	r3,0(r2)
802006f8:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
802006fc:	012008b4 	movhi	r4,32802
80200700:	213b0604 	addi	r4,r4,-5096
80200704:	02068380 	call	80206838 <printf>
#endif

	return bSuccess;
80200708:	e0bff917 	ldw	r2,-28(fp)
}
8020070c:	e037883a 	mov	sp,fp
80200710:	dfc00117 	ldw	ra,4(sp)
80200714:	df000017 	ldw	fp,0(sp)
80200718:	dec00204 	addi	sp,sp,8
8020071c:	f800283a 	ret

80200720 <bDdr2EepromDump>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromDump(alt_u8 ucMemoryId) {
80200720:	deffb704 	addi	sp,sp,-292
80200724:	dfc04815 	stw	ra,288(sp)
80200728:	df004715 	stw	fp,284(sp)
8020072c:	df004704 	addi	fp,sp,284
80200730:	2005883a 	mov	r2,r4
80200734:	e0bfff05 	stb	r2,-4(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Dump =====\n");
80200738:	00e008b4 	movhi	r3,32802
8020073c:	18fb0604 	addi	r3,r3,-5096
80200740:	00a008b4 	movhi	r2,32802
80200744:	10aefe04 	addi	r2,r2,-17416
80200748:	1009883a 	mov	r4,r2
8020074c:	00800884 	movi	r2,34
80200750:	100d883a 	mov	r6,r2
80200754:	200b883a 	mov	r5,r4
80200758:	1809883a 	mov	r4,r3
8020075c:	02066c00 	call	802066c0 <memcpy>
	debug(fp, cDebugBuffer);
80200760:	012008b4 	movhi	r4,32802
80200764:	213b0604 	addi	r4,r4,-5096
80200768:	02068380 	call	80206838 <printf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
8020076c:	00bfe804 	movi	r2,-96
80200770:	e0bfbd05 	stb	r2,-268(fp)
	bool bSuccess = FALSE;
80200774:	e03fbe15 	stw	zero,-264(fp)
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	switch (ucMemoryId) {
80200778:	e0bfff03 	ldbu	r2,-4(fp)
8020077c:	10000326 	beq	r2,zero,8020078c <bDdr2EepromDump+0x6c>
80200780:	10800060 	cmpeqi	r2,r2,1
80200784:	10000a1e 	bne	r2,zero,802007b0 <bDdr2EepromDump+0x90>
80200788:	00001206 	br	802007d4 <bDdr2EepromDump+0xb4>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
8020078c:	00a04034 	movhi	r2,33024
80200790:	10816c04 	addi	r2,r2,1456
80200794:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
80200798:	00a04034 	movhi	r2,33024
8020079c:	10817004 	addi	r2,r2,1472
802007a0:	e0bfbb15 	stw	r2,-276(fp)
		bSuccess = TRUE;
802007a4:	00800044 	movi	r2,1
802007a8:	e0bfbe15 	stw	r2,-264(fp)
		break;
802007ac:	00001906 	br	80200814 <bDdr2EepromDump+0xf4>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
802007b0:	00a04034 	movhi	r2,33024
802007b4:	10814804 	addi	r2,r2,1312
802007b8:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
802007bc:	00a04034 	movhi	r2,33024
802007c0:	10814c04 	addi	r2,r2,1328
802007c4:	e0bfbb15 	stw	r2,-276(fp)
		bSuccess = TRUE;
802007c8:	00800044 	movi	r2,1
802007cc:	e0bfbe15 	stw	r2,-264(fp)
		break;
802007d0:	00001006 	br	80200814 <bDdr2EepromDump+0xf4>
	default:
		bSuccess = FALSE;
802007d4:	e03fbe15 	stw	zero,-264(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
802007d8:	00e008b4 	movhi	r3,32802
802007dc:	18fb0604 	addi	r3,r3,-5096
802007e0:	00a008b4 	movhi	r2,32802
802007e4:	10af0704 	addi	r2,r2,-17380
802007e8:	1009883a 	mov	r4,r2
802007ec:	00800bc4 	movi	r2,47
802007f0:	100d883a 	mov	r6,r2
802007f4:	200b883a 	mov	r5,r4
802007f8:	1809883a 	mov	r4,r3
802007fc:	02066c00 	call	802066c0 <memcpy>
				"DR2 Memory ID not identified!! Aborting Dump \n");
		debug(fp, cDebugBuffer)
80200800:	012008b4 	movhi	r4,32802
80200804:	213b0604 	addi	r4,r4,-5096
80200808:	02068380 	call	80206838 <printf>
		;
#endif
		return bSuccess;
8020080c:	e0bfbe17 	ldw	r2,-264(fp)
80200810:	00029b06 	br	80201280 <bDdr2EepromDump+0xb60>
	}

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
80200814:	e0bfbd03 	ldbu	r2,-268(fp)
80200818:	10c03fcc 	andi	r3,r2,255
8020081c:	18c0201c 	xori	r3,r3,128
80200820:	18ffe004 	addi	r3,r3,-128
80200824:	e13fbf04 	addi	r4,fp,-260
80200828:	00804004 	movi	r2,256
8020082c:	d8800015 	stw	r2,0(sp)
80200830:	200f883a 	mov	r7,r4
80200834:	180d883a 	mov	r6,r3
80200838:	e17fbb17 	ldw	r5,-276(fp)
8020083c:	e13fba17 	ldw	r4,-280(fp)
80200840:	02036a80 	call	802036a8 <I2C_MultipleRead>
80200844:	e0bfbe15 	stw	r2,-264(fp)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
80200848:	e0bfbe17 	ldw	r2,-264(fp)
8020084c:	10027626 	beq	r2,zero,80201228 <bDdr2EepromDump+0xb08>
		for (iI = 0; iI < 256 && bSuccess; iI++) {
80200850:	e03fbc15 	stw	zero,-272(fp)
80200854:	00026e06 	br	80201210 <bDdr2EepromDump+0xaf0>
			if (iI == 0) {
80200858:	e0bfbc17 	ldw	r2,-272(fp)
8020085c:	1000101e 	bne	r2,zero,802008a0 <bDdr2EepromDump+0x180>
#if DEBUG_ON
				sprintf(cDebugBuffer,
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
80200860:	e0ffbf04 	addi	r3,fp,-260
80200864:	e0bfbc17 	ldw	r2,-272(fp)
80200868:	1885883a 	add	r2,r3,r2
8020086c:	10800003 	ldbu	r2,0(r2)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
			if (iI == 0) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200870:	10803fcc 	andi	r2,r2,255
80200874:	100f883a 	mov	r7,r2
80200878:	e1bfbc17 	ldw	r6,-272(fp)
8020087c:	016008b4 	movhi	r5,32802
80200880:	296f1304 	addi	r5,r5,-17332
80200884:	012008b4 	movhi	r4,32802
80200888:	213b0604 	addi	r4,r4,-5096
8020088c:	02069a00 	call	802069a0 <sprintf>
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
				debug(fp, cDebugBuffer);
80200890:	012008b4 	movhi	r4,32802
80200894:	213b0604 	addi	r4,r4,-5096
80200898:	02068380 	call	80206838 <printf>
8020089c:	00025906 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 1) {
802008a0:	e0bfbc17 	ldw	r2,-272(fp)
802008a4:	10800058 	cmpnei	r2,r2,1
802008a8:	10000e1e 	bne	r2,zero,802008e4 <bDdr2EepromDump+0x1c4>
#if DEBUG_ON
				sprintf(cDebugBuffer,
802008ac:	00e008b4 	movhi	r3,32802
802008b0:	18fb0604 	addi	r3,r3,-5096
802008b4:	00a008b4 	movhi	r2,32802
802008b8:	10af1f04 	addi	r2,r2,-17284
802008bc:	1009883a 	mov	r4,r2
802008c0:	00800c04 	movi	r2,48
802008c4:	100d883a 	mov	r6,r2
802008c8:	200b883a 	mov	r5,r4
802008cc:	1809883a 	mov	r4,r3
802008d0:	02066c00 	call	802066c0 <memcpy>
						"(Total Number of Bytes in SPD Device, Log2(N))\n");
				debug(fp, cDebugBuffer);
802008d4:	012008b4 	movhi	r4,32802
802008d8:	213b0604 	addi	r4,r4,-5096
802008dc:	02068380 	call	80206838 <printf>
802008e0:	00024806 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 2) {
802008e4:	e0bfbc17 	ldw	r2,-272(fp)
802008e8:	10800098 	cmpnei	r2,r2,2
802008ec:	10000e1e 	bne	r2,zero,80200928 <bDdr2EepromDump+0x208>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Basic Memory Type[08h:DDR2])\n");
802008f0:	00e008b4 	movhi	r3,32802
802008f4:	18fb0604 	addi	r3,r3,-5096
802008f8:	00a008b4 	movhi	r2,32802
802008fc:	10af2b04 	addi	r2,r2,-17236
80200900:	1009883a 	mov	r4,r2
80200904:	008007c4 	movi	r2,31
80200908:	100d883a 	mov	r6,r2
8020090c:	200b883a 	mov	r5,r4
80200910:	1809883a 	mov	r4,r3
80200914:	02066c00 	call	802066c0 <memcpy>
				debug(fp, cDebugBuffer);
80200918:	012008b4 	movhi	r4,32802
8020091c:	213b0604 	addi	r4,r4,-5096
80200920:	02068380 	call	80206838 <printf>
80200924:	00023706 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 3) {
80200928:	e0bfbc17 	ldw	r2,-272(fp)
8020092c:	108000d8 	cmpnei	r2,r2,3
80200930:	10000e1e 	bne	r2,zero,8020096c <bDdr2EepromDump+0x24c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200934:	00e008b4 	movhi	r3,32802
80200938:	18fb0604 	addi	r3,r3,-5096
8020093c:	00a008b4 	movhi	r2,32802
80200940:	10af3304 	addi	r2,r2,-17204
80200944:	1009883a 	mov	r4,r2
80200948:	008009c4 	movi	r2,39
8020094c:	100d883a 	mov	r6,r2
80200950:	200b883a 	mov	r5,r4
80200954:	1809883a 	mov	r4,r3
80200958:	02066c00 	call	802066c0 <memcpy>
						"(Number of Row Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
8020095c:	012008b4 	movhi	r4,32802
80200960:	213b0604 	addi	r4,r4,-5096
80200964:	02068380 	call	80206838 <printf>
80200968:	00022606 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 4) {
8020096c:	e0bfbc17 	ldw	r2,-272(fp)
80200970:	10800118 	cmpnei	r2,r2,4
80200974:	10000e1e 	bne	r2,zero,802009b0 <bDdr2EepromDump+0x290>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200978:	00e008b4 	movhi	r3,32802
8020097c:	18fb0604 	addi	r3,r3,-5096
80200980:	00a008b4 	movhi	r2,32802
80200984:	10af3d04 	addi	r2,r2,-17164
80200988:	1009883a 	mov	r4,r2
8020098c:	00800a84 	movi	r2,42
80200990:	100d883a 	mov	r6,r2
80200994:	200b883a 	mov	r5,r4
80200998:	1809883a 	mov	r4,r3
8020099c:	02066c00 	call	802066c0 <memcpy>
						"(Number of Column Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
802009a0:	012008b4 	movhi	r4,32802
802009a4:	213b0604 	addi	r4,r4,-5096
802009a8:	02068380 	call	80206838 <printf>
802009ac:	00021506 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 5) {
802009b0:	e0bfbc17 	ldw	r2,-272(fp)
802009b4:	10800158 	cmpnei	r2,r2,5
802009b8:	10000e1e 	bne	r2,zero,802009f4 <bDdr2EepromDump+0x2d4>
#if DEBUG_ON
				sprintf(cDebugBuffer,
802009bc:	00e008b4 	movhi	r3,32802
802009c0:	18fb0604 	addi	r3,r3,-5096
802009c4:	00a008b4 	movhi	r2,32802
802009c8:	10af4804 	addi	r2,r2,-17120
802009cc:	1009883a 	mov	r4,r2
802009d0:	00800c04 	movi	r2,48
802009d4:	100d883a 	mov	r6,r2
802009d8:	200b883a 	mov	r5,r4
802009dc:	1809883a 	mov	r4,r3
802009e0:	02066c00 	call	802066c0 <memcpy>
						"(DIMM Height and Module Rank Number[b2b1b0+1])\n");
				debug(fp, cDebugBuffer);
802009e4:	012008b4 	movhi	r4,32802
802009e8:	213b0604 	addi	r4,r4,-5096
802009ec:	02068380 	call	80206838 <printf>
802009f0:	00020406 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 6) {
802009f4:	e0bfbc17 	ldw	r2,-272(fp)
802009f8:	10800198 	cmpnei	r2,r2,6
802009fc:	10000e1e 	bne	r2,zero,80200a38 <bDdr2EepromDump+0x318>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width)\n");
80200a00:	00e008b4 	movhi	r3,32802
80200a04:	18fb0604 	addi	r3,r3,-5096
80200a08:	00a008b4 	movhi	r2,32802
80200a0c:	10af5404 	addi	r2,r2,-17072
80200a10:	1009883a 	mov	r4,r2
80200a14:	00800544 	movi	r2,21
80200a18:	100d883a 	mov	r6,r2
80200a1c:	200b883a 	mov	r5,r4
80200a20:	1809883a 	mov	r4,r3
80200a24:	02066c00 	call	802066c0 <memcpy>
				debug(fp, cDebugBuffer);
80200a28:	012008b4 	movhi	r4,32802
80200a2c:	213b0604 	addi	r4,r4,-5096
80200a30:	02068380 	call	80206838 <printf>
80200a34:	0001f306 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 7) {
80200a38:	e0bfbc17 	ldw	r2,-272(fp)
80200a3c:	108001d8 	cmpnei	r2,r2,7
80200a40:	10000e1e 	bne	r2,zero,80200a7c <bDdr2EepromDump+0x35c>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width, Continued)\n");
80200a44:	00e008b4 	movhi	r3,32802
80200a48:	18fb0604 	addi	r3,r3,-5096
80200a4c:	00a008b4 	movhi	r2,32802
80200a50:	10af5a04 	addi	r2,r2,-17048
80200a54:	1009883a 	mov	r4,r2
80200a58:	00800804 	movi	r2,32
80200a5c:	100d883a 	mov	r6,r2
80200a60:	200b883a 	mov	r5,r4
80200a64:	1809883a 	mov	r4,r3
80200a68:	02066c00 	call	802066c0 <memcpy>
				debug(fp, cDebugBuffer);
80200a6c:	012008b4 	movhi	r4,32802
80200a70:	213b0604 	addi	r4,r4,-5096
80200a74:	02068380 	call	80206838 <printf>
80200a78:	0001e206 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 16) {
80200a7c:	e0bfbc17 	ldw	r2,-272(fp)
80200a80:	10800418 	cmpnei	r2,r2,16
80200a84:	10000e1e 	bne	r2,zero,80200ac0 <bDdr2EepromDump+0x3a0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200a88:	00e008b4 	movhi	r3,32802
80200a8c:	18fb0604 	addi	r3,r3,-5096
80200a90:	00a008b4 	movhi	r2,32802
80200a94:	10af6204 	addi	r2,r2,-17016
80200a98:	1009883a 	mov	r4,r2
80200a9c:	00800d04 	movi	r2,52
80200aa0:	100d883a 	mov	r6,r2
80200aa4:	200b883a 	mov	r5,r4
80200aa8:	1809883a 	mov	r4,r3
80200aac:	02066c00 	call	802066c0 <memcpy>
						"(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
				debug(fp, cDebugBuffer);
80200ab0:	012008b4 	movhi	r4,32802
80200ab4:	213b0604 	addi	r4,r4,-5096
80200ab8:	02068380 	call	80206838 <printf>
80200abc:	0001d106 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 13) {
80200ac0:	e0bfbc17 	ldw	r2,-272(fp)
80200ac4:	10800358 	cmpnei	r2,r2,13
80200ac8:	10000e1e 	bne	r2,zero,80200b04 <bDdr2EepromDump+0x3e4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Primary SDRAM width)\n");
80200acc:	00e008b4 	movhi	r3,32802
80200ad0:	18fb0604 	addi	r3,r3,-5096
80200ad4:	00a008b4 	movhi	r2,32802
80200ad8:	10af6f04 	addi	r2,r2,-16964
80200adc:	1009883a 	mov	r4,r2
80200ae0:	008005c4 	movi	r2,23
80200ae4:	100d883a 	mov	r6,r2
80200ae8:	200b883a 	mov	r5,r4
80200aec:	1809883a 	mov	r4,r3
80200af0:	02066c00 	call	802066c0 <memcpy>
				debug(fp, cDebugBuffer);
80200af4:	012008b4 	movhi	r4,32802
80200af8:	213b0604 	addi	r4,r4,-5096
80200afc:	02068380 	call	80206838 <printf>
80200b00:	0001c006 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 14) {
80200b04:	e0bfbc17 	ldw	r2,-272(fp)
80200b08:	10800398 	cmpnei	r2,r2,14
80200b0c:	10000e1e 	bne	r2,zero,80200b48 <bDdr2EepromDump+0x428>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(ECC SDRAM width)\n");
80200b10:	00e008b4 	movhi	r3,32802
80200b14:	18fb0604 	addi	r3,r3,-5096
80200b18:	00a008b4 	movhi	r2,32802
80200b1c:	10af7504 	addi	r2,r2,-16940
80200b20:	1009883a 	mov	r4,r2
80200b24:	008004c4 	movi	r2,19
80200b28:	100d883a 	mov	r6,r2
80200b2c:	200b883a 	mov	r5,r4
80200b30:	1809883a 	mov	r4,r3
80200b34:	02066c00 	call	802066c0 <memcpy>
				debug(fp, cDebugBuffer);
80200b38:	012008b4 	movhi	r4,32802
80200b3c:	213b0604 	addi	r4,r4,-5096
80200b40:	02068380 	call	80206838 <printf>
80200b44:	0001af06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 17) {
80200b48:	e0bfbc17 	ldw	r2,-272(fp)
80200b4c:	10800458 	cmpnei	r2,r2,17
80200b50:	10000e1e 	bne	r2,zero,80200b8c <bDdr2EepromDump+0x46c>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Banks per SDRAM device)\n");
80200b54:	00e008b4 	movhi	r3,32802
80200b58:	18fb0604 	addi	r3,r3,-5096
80200b5c:	00a008b4 	movhi	r2,32802
80200b60:	10af7a04 	addi	r2,r2,-16920
80200b64:	1009883a 	mov	r4,r2
80200b68:	00800684 	movi	r2,26
80200b6c:	100d883a 	mov	r6,r2
80200b70:	200b883a 	mov	r5,r4
80200b74:	1809883a 	mov	r4,r3
80200b78:	02066c00 	call	802066c0 <memcpy>
				debug(fp, cDebugBuffer);
80200b7c:	012008b4 	movhi	r4,32802
80200b80:	213b0604 	addi	r4,r4,-5096
80200b84:	02068380 	call	80206838 <printf>
80200b88:	00019e06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 18) {
80200b8c:	e0bfbc17 	ldw	r2,-272(fp)
80200b90:	10800498 	cmpnei	r2,r2,18
80200b94:	10000e1e 	bne	r2,zero,80200bd0 <bDdr2EepromDump+0x4b0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200b98:	00e008b4 	movhi	r3,32802
80200b9c:	18fb0604 	addi	r3,r3,-5096
80200ba0:	00a008b4 	movhi	r2,32802
80200ba4:	10af8104 	addi	r2,r2,-16892
80200ba8:	1009883a 	mov	r4,r2
80200bac:	00800d44 	movi	r2,53
80200bb0:	100d883a 	mov	r6,r2
80200bb4:	200b883a 	mov	r5,r4
80200bb8:	1809883a 	mov	r4,r3
80200bbc:	02066c00 	call	802066c0 <memcpy>
						"(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
				debug(fp, cDebugBuffer);
80200bc0:	012008b4 	movhi	r4,32802
80200bc4:	213b0604 	addi	r4,r4,-5096
80200bc8:	02068380 	call	80206838 <printf>
80200bcc:	00018d06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 20) {
80200bd0:	e0bfbc17 	ldw	r2,-272(fp)
80200bd4:	10800518 	cmpnei	r2,r2,20
80200bd8:	10000e1e 	bne	r2,zero,80200c14 <bDdr2EepromDump+0x4f4>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200bdc:	00e008b4 	movhi	r3,32802
80200be0:	18fb0604 	addi	r3,r3,-5096
80200be4:	00a008b4 	movhi	r2,32802
80200be8:	10af8f04 	addi	r2,r2,-16836
80200bec:	1009883a 	mov	r4,r2
80200bf0:	00801204 	movi	r2,72
80200bf4:	100d883a 	mov	r6,r2
80200bf8:	200b883a 	mov	r5,r4
80200bfc:	1809883a 	mov	r4,r3
80200c00:	02066c00 	call	802066c0 <memcpy>
						"(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
				debug(fp, cDebugBuffer);
80200c04:	012008b4 	movhi	r4,32802
80200c08:	213b0604 	addi	r4,r4,-5096
80200c0c:	02068380 	call	80206838 <printf>
80200c10:	00017c06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 22) {
80200c14:	e0bfbc17 	ldw	r2,-272(fp)
80200c18:	10800598 	cmpnei	r2,r2,22
80200c1c:	10000e1e 	bne	r2,zero,80200c58 <bDdr2EepromDump+0x538>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Memory Chip feature bitmap)\n");
80200c20:	00e008b4 	movhi	r3,32802
80200c24:	18fb0604 	addi	r3,r3,-5096
80200c28:	00a008b4 	movhi	r2,32802
80200c2c:	10afa104 	addi	r2,r2,-16764
80200c30:	1009883a 	mov	r4,r2
80200c34:	00800784 	movi	r2,30
80200c38:	100d883a 	mov	r6,r2
80200c3c:	200b883a 	mov	r5,r4
80200c40:	1809883a 	mov	r4,r3
80200c44:	02066c00 	call	802066c0 <memcpy>
				debug(fp, cDebugBuffer);
80200c48:	012008b4 	movhi	r4,32802
80200c4c:	213b0604 	addi	r4,r4,-5096
80200c50:	02068380 	call	80206838 <printf>
80200c54:	00016b06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 27) {
80200c58:	e0bfbc17 	ldw	r2,-272(fp)
80200c5c:	108006d8 	cmpnei	r2,r2,27
80200c60:	10000e1e 	bne	r2,zero,80200c9c <bDdr2EepromDump+0x57c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200c64:	00e008b4 	movhi	r3,32802
80200c68:	18fb0604 	addi	r3,r3,-5096
80200c6c:	00a008b4 	movhi	r2,32802
80200c70:	10afa904 	addi	r2,r2,-16732
80200c74:	1009883a 	mov	r4,r2
80200c78:	00800a04 	movi	r2,40
80200c7c:	100d883a 	mov	r6,r2
80200c80:	200b883a 	mov	r5,r4
80200c84:	1809883a 	mov	r4,r3
80200c88:	02066c00 	call	802066c0 <memcpy>
						"(Minimun row precharge time[tRP;nsx4])\n");
				debug(fp, cDebugBuffer);
80200c8c:	012008b4 	movhi	r4,32802
80200c90:	213b0604 	addi	r4,r4,-5096
80200c94:	02068380 	call	80206838 <printf>
80200c98:	00015a06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 28) {
80200c9c:	e0bfbc17 	ldw	r2,-272(fp)
80200ca0:	10800718 	cmpnei	r2,r2,28
80200ca4:	10000e1e 	bne	r2,zero,80200ce0 <bDdr2EepromDump+0x5c0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200ca8:	00e008b4 	movhi	r3,32802
80200cac:	18fb0604 	addi	r3,r3,-5096
80200cb0:	00a008b4 	movhi	r2,32802
80200cb4:	10afb304 	addi	r2,r2,-16692
80200cb8:	1009883a 	mov	r4,r2
80200cbc:	00800cc4 	movi	r2,51
80200cc0:	100d883a 	mov	r6,r2
80200cc4:	200b883a 	mov	r5,r4
80200cc8:	1809883a 	mov	r4,r3
80200ccc:	02066c00 	call	802066c0 <memcpy>
						"(Minimun row active-row activce delay[tRRD;nsx4])\n");
				debug(fp, cDebugBuffer);
80200cd0:	012008b4 	movhi	r4,32802
80200cd4:	213b0604 	addi	r4,r4,-5096
80200cd8:	02068380 	call	80206838 <printf>
80200cdc:	00014906 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 29) {
80200ce0:	e0bfbc17 	ldw	r2,-272(fp)
80200ce4:	10800758 	cmpnei	r2,r2,29
80200ce8:	10000e1e 	bne	r2,zero,80200d24 <bDdr2EepromDump+0x604>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200cec:	00e008b4 	movhi	r3,32802
80200cf0:	18fb0604 	addi	r3,r3,-5096
80200cf4:	00a008b4 	movhi	r2,32802
80200cf8:	10afc004 	addi	r2,r2,-16640
80200cfc:	1009883a 	mov	r4,r2
80200d00:	008009c4 	movi	r2,39
80200d04:	100d883a 	mov	r6,r2
80200d08:	200b883a 	mov	r5,r4
80200d0c:	1809883a 	mov	r4,r3
80200d10:	02066c00 	call	802066c0 <memcpy>
						"(Minimun RAS to CAS delay[tRCD;nsx4])\n");
				debug(fp, cDebugBuffer);
80200d14:	012008b4 	movhi	r4,32802
80200d18:	213b0604 	addi	r4,r4,-5096
80200d1c:	02068380 	call	80206838 <printf>
80200d20:	00013806 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 30) {
80200d24:	e0bfbc17 	ldw	r2,-272(fp)
80200d28:	10800798 	cmpnei	r2,r2,30
80200d2c:	10000e1e 	bne	r2,zero,80200d68 <bDdr2EepromDump+0x648>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200d30:	00e008b4 	movhi	r3,32802
80200d34:	18fb0604 	addi	r3,r3,-5096
80200d38:	00a008b4 	movhi	r2,32802
80200d3c:	10afca04 	addi	r2,r2,-16600
80200d40:	1009883a 	mov	r4,r2
80200d44:	00800b04 	movi	r2,44
80200d48:	100d883a 	mov	r6,r2
80200d4c:	200b883a 	mov	r5,r4
80200d50:	1809883a 	mov	r4,r3
80200d54:	02066c00 	call	802066c0 <memcpy>
						"(Minimun acive to precharge time[tRAS;ns])\n");
				debug(fp, cDebugBuffer);
80200d58:	012008b4 	movhi	r4,32802
80200d5c:	213b0604 	addi	r4,r4,-5096
80200d60:	02068380 	call	80206838 <printf>
80200d64:	00012706 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 31) {
80200d68:	e0bfbc17 	ldw	r2,-272(fp)
80200d6c:	108007d8 	cmpnei	r2,r2,31
80200d70:	10000e1e 	bne	r2,zero,80200dac <bDdr2EepromDump+0x68c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200d74:	00e008b4 	movhi	r3,32802
80200d78:	18fb0604 	addi	r3,r3,-5096
80200d7c:	00a008b4 	movhi	r2,32802
80200d80:	10afd504 	addi	r2,r2,-16556
80200d84:	1009883a 	mov	r4,r2
80200d88:	008010c4 	movi	r2,67
80200d8c:	100d883a 	mov	r6,r2
80200d90:	200b883a 	mov	r5,r4
80200d94:	1809883a 	mov	r4,r3
80200d98:	02066c00 	call	802066c0 <memcpy>
						"(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
				debug(fp, cDebugBuffer);
80200d9c:	012008b4 	movhi	r4,32802
80200da0:	213b0604 	addi	r4,r4,-5096
80200da4:	02068380 	call	80206838 <printf>
80200da8:	00011606 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 36) {
80200dac:	e0bfbc17 	ldw	r2,-272(fp)
80200db0:	10800918 	cmpnei	r2,r2,36
80200db4:	10000e1e 	bne	r2,zero,80200df0 <bDdr2EepromDump+0x6d0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200db8:	00e008b4 	movhi	r3,32802
80200dbc:	18fb0604 	addi	r3,r3,-5096
80200dc0:	00a008b4 	movhi	r2,32802
80200dc4:	10afe604 	addi	r2,r2,-16488
80200dc8:	1009883a 	mov	r4,r2
80200dcc:	00800a84 	movi	r2,42
80200dd0:	100d883a 	mov	r6,r2
80200dd4:	200b883a 	mov	r5,r4
80200dd8:	1809883a 	mov	r4,r3
80200ddc:	02066c00 	call	802066c0 <memcpy>
						"(Minimun write receovery time[tWR;nsx4])\n");
				debug(fp, cDebugBuffer);
80200de0:	012008b4 	movhi	r4,32802
80200de4:	213b0604 	addi	r4,r4,-5096
80200de8:	02068380 	call	80206838 <printf>
80200dec:	00010506 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 37) {
80200df0:	e0bfbc17 	ldw	r2,-272(fp)
80200df4:	10800958 	cmpnei	r2,r2,37
80200df8:	10000e1e 	bne	r2,zero,80200e34 <bDdr2EepromDump+0x714>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200dfc:	00e008b4 	movhi	r3,32802
80200e00:	18fb0604 	addi	r3,r3,-5096
80200e04:	00a008b4 	movhi	r2,32802
80200e08:	10aff104 	addi	r2,r2,-16444
80200e0c:	1009883a 	mov	r4,r2
80200e10:	00800cc4 	movi	r2,51
80200e14:	100d883a 	mov	r6,r2
80200e18:	200b883a 	mov	r5,r4
80200e1c:	1809883a 	mov	r4,r3
80200e20:	02066c00 	call	802066c0 <memcpy>
						"(Internal write to read command delay[tWTR;nsx4])\n");
				debug(fp, cDebugBuffer);
80200e24:	012008b4 	movhi	r4,32802
80200e28:	213b0604 	addi	r4,r4,-5096
80200e2c:	02068380 	call	80206838 <printf>
80200e30:	0000f406 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 38) {
80200e34:	e0bfbc17 	ldw	r2,-272(fp)
80200e38:	10800998 	cmpnei	r2,r2,38
80200e3c:	10000e1e 	bne	r2,zero,80200e78 <bDdr2EepromDump+0x758>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200e40:	00e008b4 	movhi	r3,32802
80200e44:	18fb0604 	addi	r3,r3,-5096
80200e48:	00a008b4 	movhi	r2,32802
80200e4c:	10affe04 	addi	r2,r2,-16392
80200e50:	1009883a 	mov	r4,r2
80200e54:	00800dc4 	movi	r2,55
80200e58:	100d883a 	mov	r6,r2
80200e5c:	200b883a 	mov	r5,r4
80200e60:	1809883a 	mov	r4,r3
80200e64:	02066c00 	call	802066c0 <memcpy>
						"(Internal read to precharge command delay[tRTP;nsx4])\n");
				debug(fp, cDebugBuffer);
80200e68:	012008b4 	movhi	r4,32802
80200e6c:	213b0604 	addi	r4,r4,-5096
80200e70:	02068380 	call	80206838 <printf>
80200e74:	0000e306 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 41) {
80200e78:	e0bfbc17 	ldw	r2,-272(fp)
80200e7c:	10800a58 	cmpnei	r2,r2,41
80200e80:	10000e1e 	bne	r2,zero,80200ebc <bDdr2EepromDump+0x79c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200e84:	00e008b4 	movhi	r3,32802
80200e88:	18fb0604 	addi	r3,r3,-5096
80200e8c:	00a008b4 	movhi	r2,32802
80200e90:	10b00c04 	addi	r2,r2,-16336
80200e94:	1009883a 	mov	r4,r2
80200e98:	00800c84 	movi	r2,50
80200e9c:	100d883a 	mov	r6,r2
80200ea0:	200b883a 	mov	r5,r4
80200ea4:	1809883a 	mov	r4,r3
80200ea8:	02066c00 	call	802066c0 <memcpy>
						"(Minimun activce to active/refresh time[tRC;ns])\n");
				debug(fp, cDebugBuffer);
80200eac:	012008b4 	movhi	r4,32802
80200eb0:	213b0604 	addi	r4,r4,-5096
80200eb4:	02068380 	call	80206838 <printf>
80200eb8:	0000d206 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 42) {
80200ebc:	e0bfbc17 	ldw	r2,-272(fp)
80200ec0:	10800a98 	cmpnei	r2,r2,42
80200ec4:	10000e1e 	bne	r2,zero,80200f00 <bDdr2EepromDump+0x7e0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200ec8:	00e008b4 	movhi	r3,32802
80200ecc:	18fb0604 	addi	r3,r3,-5096
80200ed0:	00a008b4 	movhi	r2,32802
80200ed4:	10b01904 	addi	r2,r2,-16284
80200ed8:	1009883a 	mov	r4,r2
80200edc:	00800cc4 	movi	r2,51
80200ee0:	100d883a 	mov	r6,r2
80200ee4:	200b883a 	mov	r5,r4
80200ee8:	1809883a 	mov	r4,r3
80200eec:	02066c00 	call	802066c0 <memcpy>
						"(Minimun refresh to active/refresh time[tRFC;ns])\n");
				debug(fp, cDebugBuffer);
80200ef0:	012008b4 	movhi	r4,32802
80200ef4:	213b0604 	addi	r4,r4,-5096
80200ef8:	02068380 	call	80206838 <printf>
80200efc:	0000c106 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 62) {
80200f00:	e0bfbc17 	ldw	r2,-272(fp)
80200f04:	10800f98 	cmpnei	r2,r2,62
80200f08:	10000e1e 	bne	r2,zero,80200f44 <bDdr2EepromDump+0x824>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(SPD Revision)\n");
80200f0c:	00e008b4 	movhi	r3,32802
80200f10:	18fb0604 	addi	r3,r3,-5096
80200f14:	00a008b4 	movhi	r2,32802
80200f18:	10b02604 	addi	r2,r2,-16232
80200f1c:	1009883a 	mov	r4,r2
80200f20:	00800404 	movi	r2,16
80200f24:	100d883a 	mov	r6,r2
80200f28:	200b883a 	mov	r5,r4
80200f2c:	1809883a 	mov	r4,r3
80200f30:	02066c00 	call	802066c0 <memcpy>
				debug(fp, cDebugBuffer);
80200f34:	012008b4 	movhi	r4,32802
80200f38:	213b0604 	addi	r4,r4,-5096
80200f3c:	02068380 	call	80206838 <printf>
80200f40:	0000b006 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 63) {
80200f44:	e0bfbc17 	ldw	r2,-272(fp)
80200f48:	10800fd8 	cmpnei	r2,r2,63
80200f4c:	10001d1e 	bne	r2,zero,80200fc4 <bDdr2EepromDump+0x8a4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Checksum)\n");
80200f50:	00a008b4 	movhi	r2,32802
80200f54:	10bb0604 	addi	r2,r2,-5096
80200f58:	00c00a04 	movi	r3,40
80200f5c:	10c00005 	stb	r3,0(r2)
80200f60:	00c010c4 	movi	r3,67
80200f64:	10c00045 	stb	r3,1(r2)
80200f68:	00c01a04 	movi	r3,104
80200f6c:	10c00085 	stb	r3,2(r2)
80200f70:	00c01944 	movi	r3,101
80200f74:	10c000c5 	stb	r3,3(r2)
80200f78:	00c018c4 	movi	r3,99
80200f7c:	10c00105 	stb	r3,4(r2)
80200f80:	00c01ac4 	movi	r3,107
80200f84:	10c00145 	stb	r3,5(r2)
80200f88:	00c01cc4 	movi	r3,115
80200f8c:	10c00185 	stb	r3,6(r2)
80200f90:	00c01d44 	movi	r3,117
80200f94:	10c001c5 	stb	r3,7(r2)
80200f98:	00c01b44 	movi	r3,109
80200f9c:	10c00205 	stb	r3,8(r2)
80200fa0:	00c00a44 	movi	r3,41
80200fa4:	10c00245 	stb	r3,9(r2)
80200fa8:	00c00284 	movi	r3,10
80200fac:	10c00285 	stb	r3,10(r2)
80200fb0:	100002c5 	stb	zero,11(r2)
				debug(fp, cDebugBuffer);
80200fb4:	012008b4 	movhi	r4,32802
80200fb8:	213b0604 	addi	r4,r4,-5096
80200fbc:	02068380 	call	80206838 <printf>
80200fc0:	00009006 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 64) {
80200fc4:	e0bfbc17 	ldw	r2,-272(fp)
80200fc8:	10801018 	cmpnei	r2,r2,64
80200fcc:	10000e1e 	bne	r2,zero,80201008 <bDdr2EepromDump+0x8e8>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(64~71: Manufacturer JEDEC ID)\n");
80200fd0:	00e008b4 	movhi	r3,32802
80200fd4:	18fb0604 	addi	r3,r3,-5096
80200fd8:	00a008b4 	movhi	r2,32802
80200fdc:	10b02a04 	addi	r2,r2,-16216
80200fe0:	1009883a 	mov	r4,r2
80200fe4:	00800804 	movi	r2,32
80200fe8:	100d883a 	mov	r6,r2
80200fec:	200b883a 	mov	r5,r4
80200ff0:	1809883a 	mov	r4,r3
80200ff4:	02066c00 	call	802066c0 <memcpy>
				debug(fp, cDebugBuffer);
80200ff8:	012008b4 	movhi	r4,32802
80200ffc:	213b0604 	addi	r4,r4,-5096
80201000:	02068380 	call	80206838 <printf>
80201004:	00007f06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 72) {
80201008:	e0bfbc17 	ldw	r2,-272(fp)
8020100c:	10801218 	cmpnei	r2,r2,72
80201010:	10000e1e 	bne	r2,zero,8020104c <bDdr2EepromDump+0x92c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201014:	00e008b4 	movhi	r3,32802
80201018:	18fb0604 	addi	r3,r3,-5096
8020101c:	00a008b4 	movhi	r2,32802
80201020:	10b03204 	addi	r2,r2,-16184
80201024:	1009883a 	mov	r4,r2
80201028:	00800dc4 	movi	r2,55
8020102c:	100d883a 	mov	r6,r2
80201030:	200b883a 	mov	r5,r4
80201034:	1809883a 	mov	r4,r3
80201038:	02066c00 	call	802066c0 <memcpy>
						"(Module manufacturing location[Vendor-specific code])\n");
				debug(fp, cDebugBuffer);
8020103c:	012008b4 	movhi	r4,32802
80201040:	213b0604 	addi	r4,r4,-5096
80201044:	02068380 	call	80206838 <printf>
80201048:	00006e06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 73) {
8020104c:	e0bfbc17 	ldw	r2,-272(fp)
80201050:	10801258 	cmpnei	r2,r2,73
80201054:	10000e1e 	bne	r2,zero,80201090 <bDdr2EepromDump+0x970>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(73~90: Moduloe part number)\n");
80201058:	00e008b4 	movhi	r3,32802
8020105c:	18fb0604 	addi	r3,r3,-5096
80201060:	00a008b4 	movhi	r2,32802
80201064:	10b04004 	addi	r2,r2,-16128
80201068:	1009883a 	mov	r4,r2
8020106c:	00800784 	movi	r2,30
80201070:	100d883a 	mov	r6,r2
80201074:	200b883a 	mov	r5,r4
80201078:	1809883a 	mov	r4,r3
8020107c:	02066c00 	call	802066c0 <memcpy>
				debug(fp, cDebugBuffer);
80201080:	012008b4 	movhi	r4,32802
80201084:	213b0604 	addi	r4,r4,-5096
80201088:	02068380 	call	80206838 <printf>
8020108c:	00005d06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 91) {
80201090:	e0bfbc17 	ldw	r2,-272(fp)
80201094:	108016d8 	cmpnei	r2,r2,91
80201098:	10000e1e 	bne	r2,zero,802010d4 <bDdr2EepromDump+0x9b4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(91~92: Moduloe revision code)\n");
8020109c:	00e008b4 	movhi	r3,32802
802010a0:	18fb0604 	addi	r3,r3,-5096
802010a4:	00a008b4 	movhi	r2,32802
802010a8:	10b04804 	addi	r2,r2,-16096
802010ac:	1009883a 	mov	r4,r2
802010b0:	00800804 	movi	r2,32
802010b4:	100d883a 	mov	r6,r2
802010b8:	200b883a 	mov	r5,r4
802010bc:	1809883a 	mov	r4,r3
802010c0:	02066c00 	call	802066c0 <memcpy>
				debug(fp, cDebugBuffer);
802010c4:	012008b4 	movhi	r4,32802
802010c8:	213b0604 	addi	r4,r4,-5096
802010cc:	02068380 	call	80206838 <printf>
802010d0:	00004c06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 93) {
802010d4:	e0bfbc17 	ldw	r2,-272(fp)
802010d8:	10801758 	cmpnei	r2,r2,93
802010dc:	10000e1e 	bne	r2,zero,80201118 <bDdr2EepromDump+0x9f8>
#if DEBUG_ON
				sprintf(cDebugBuffer,
802010e0:	00e008b4 	movhi	r3,32802
802010e4:	18fb0604 	addi	r3,r3,-5096
802010e8:	00a008b4 	movhi	r2,32802
802010ec:	10b05004 	addi	r2,r2,-16064
802010f0:	1009883a 	mov	r4,r2
802010f4:	008009c4 	movi	r2,39
802010f8:	100d883a 	mov	r6,r2
802010fc:	200b883a 	mov	r5,r4
80201100:	1809883a 	mov	r4,r3
80201104:	02066c00 	call	802066c0 <memcpy>
						"(Manufacture Years since 2000[0-255])\n");
				debug(fp, cDebugBuffer);
80201108:	012008b4 	movhi	r4,32802
8020110c:	213b0604 	addi	r4,r4,-5096
80201110:	02068380 	call	80206838 <printf>
80201114:	00003b06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 94) {
80201118:	e0bfbc17 	ldw	r2,-272(fp)
8020111c:	10801798 	cmpnei	r2,r2,94
80201120:	10000e1e 	bne	r2,zero,8020115c <bDdr2EepromDump+0xa3c>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Manufacture Weeks[1-52])\n");
80201124:	00e008b4 	movhi	r3,32802
80201128:	18fb0604 	addi	r3,r3,-5096
8020112c:	00a008b4 	movhi	r2,32802
80201130:	10b05a04 	addi	r2,r2,-16024
80201134:	1009883a 	mov	r4,r2
80201138:	008006c4 	movi	r2,27
8020113c:	100d883a 	mov	r6,r2
80201140:	200b883a 	mov	r5,r4
80201144:	1809883a 	mov	r4,r3
80201148:	02066c00 	call	802066c0 <memcpy>
				debug(fp, cDebugBuffer);
8020114c:	012008b4 	movhi	r4,32802
80201150:	213b0604 	addi	r4,r4,-5096
80201154:	02068380 	call	80206838 <printf>
80201158:	00002a06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 95) {
8020115c:	e0bfbc17 	ldw	r2,-272(fp)
80201160:	108017d8 	cmpnei	r2,r2,95
80201164:	10000e1e 	bne	r2,zero,802011a0 <bDdr2EepromDump+0xa80>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201168:	00e008b4 	movhi	r3,32802
8020116c:	18fb0604 	addi	r3,r3,-5096
80201170:	00a008b4 	movhi	r2,32802
80201174:	10b06104 	addi	r2,r2,-15996
80201178:	1009883a 	mov	r4,r2
8020117c:	00800a04 	movi	r2,40
80201180:	100d883a 	mov	r6,r2
80201184:	200b883a 	mov	r5,r4
80201188:	1809883a 	mov	r4,r3
8020118c:	02066c00 	call	802066c0 <memcpy>
						"(95~98[4-bytes]: Module serial number)\n");
				debug(fp, cDebugBuffer);
80201190:	012008b4 	movhi	r4,32802
80201194:	213b0604 	addi	r4,r4,-5096
80201198:	02068380 	call	80206838 <printf>
8020119c:	00001906 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 99) {
802011a0:	e0bfbc17 	ldw	r2,-272(fp)
802011a4:	108018d8 	cmpnei	r2,r2,99
802011a8:	10000e1e 	bne	r2,zero,802011e4 <bDdr2EepromDump+0xac4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(99~128: Manufacturer-specific data)\n");
802011ac:	00e008b4 	movhi	r3,32802
802011b0:	18fb0604 	addi	r3,r3,-5096
802011b4:	00a008b4 	movhi	r2,32802
802011b8:	10b06b04 	addi	r2,r2,-15956
802011bc:	1009883a 	mov	r4,r2
802011c0:	00800984 	movi	r2,38
802011c4:	100d883a 	mov	r6,r2
802011c8:	200b883a 	mov	r5,r4
802011cc:	1809883a 	mov	r4,r3
802011d0:	02066c00 	call	802066c0 <memcpy>
				debug(fp, cDebugBuffer);
802011d4:	012008b4 	movhi	r4,32802
802011d8:	213b0604 	addi	r4,r4,-5096
802011dc:	02068380 	call	80206838 <printf>
802011e0:	00000806 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else {
#if DEBUG_ON
				sprintf(cDebugBuffer, "\n");
802011e4:	00a008b4 	movhi	r2,32802
802011e8:	10bb0604 	addi	r2,r2,-5096
802011ec:	00c00284 	movi	r3,10
802011f0:	10c00005 	stb	r3,0(r2)
802011f4:	10000045 	stb	zero,1(r2)
				debug(fp, cDebugBuffer);
802011f8:	012008b4 	movhi	r4,32802
802011fc:	213b0604 	addi	r4,r4,-5096
80201200:	02068380 	call	80206838 <printf>

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
80201204:	e0bfbc17 	ldw	r2,-272(fp)
80201208:	10800044 	addi	r2,r2,1
8020120c:	e0bfbc15 	stw	r2,-272(fp)
80201210:	e0bfbc17 	ldw	r2,-272(fp)
80201214:	10804008 	cmpgei	r2,r2,256
80201218:	1000101e 	bne	r2,zero,8020125c <bDdr2EepromDump+0xb3c>
8020121c:	e0bfbe17 	ldw	r2,-264(fp)
80201220:	103d8d1e 	bne	r2,zero,80200858 <__reset+0xfa1e0858>
80201224:	00000d06 	br	8020125c <bDdr2EepromDump+0xb3c>
#endif
			}
		}
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "Failed to dump EEPROM\n");
80201228:	00e008b4 	movhi	r3,32802
8020122c:	18fb0604 	addi	r3,r3,-5096
80201230:	00a008b4 	movhi	r2,32802
80201234:	10b07504 	addi	r2,r2,-15916
80201238:	1009883a 	mov	r4,r2
8020123c:	008005c4 	movi	r2,23
80201240:	100d883a 	mov	r6,r2
80201244:	200b883a 	mov	r5,r4
80201248:	1809883a 	mov	r4,r3
8020124c:	02066c00 	call	802066c0 <memcpy>
		debug(fp, cDebugBuffer);
80201250:	012008b4 	movhi	r4,32802
80201254:	213b0604 	addi	r4,r4,-5096
80201258:	02068380 	call	80206838 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
8020125c:	00a008b4 	movhi	r2,32802
80201260:	10bb0604 	addi	r2,r2,-5096
80201264:	00c00284 	movi	r3,10
80201268:	10c00005 	stb	r3,0(r2)
8020126c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201270:	012008b4 	movhi	r4,32802
80201274:	213b0604 	addi	r4,r4,-5096
80201278:	02068380 	call	80206838 <printf>
#endif

	return bSuccess;
8020127c:	e0bfbe17 	ldw	r2,-264(fp)
}
80201280:	e037883a 	mov	sp,fp
80201284:	dfc00117 	ldw	ra,4(sp)
80201288:	df000017 	ldw	fp,0(sp)
8020128c:	dec00204 	addi	sp,sp,8
80201290:	f800283a 	ret

80201294 <bDdr2SwitchMemory>:

bool bDdr2SwitchMemory(alt_u8 ucMemoryId) {
80201294:	defffb04 	addi	sp,sp,-20
80201298:	dfc00415 	stw	ra,16(sp)
8020129c:	df000315 	stw	fp,12(sp)
802012a0:	df000304 	addi	fp,sp,12
802012a4:	2005883a 	mov	r2,r4
802012a8:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess = FALSE;
802012ac:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 *puliDdr2MemAddr = (alt_u32 *) DDR2_EXT_ADDR_CONTROL_BASE;
802012b0:	00a00034 	movhi	r2,32768
802012b4:	10812204 	addi	r2,r2,1160
802012b8:	e0bffe15 	stw	r2,-8(fp)

	switch (ucMemoryId) {
802012bc:	e0bfff03 	ldbu	r2,-4(fp)
802012c0:	10000326 	beq	r2,zero,802012d0 <bDdr2SwitchMemory+0x3c>
802012c4:	10800060 	cmpeqi	r2,r2,1
802012c8:	1000061e 	bne	r2,zero,802012e4 <bDdr2SwitchMemory+0x50>
802012cc:	00000b06 	br	802012fc <bDdr2SwitchMemory+0x68>
	case DDR2_M1_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
802012d0:	e0bffe17 	ldw	r2,-8(fp)
802012d4:	10000015 	stw	zero,0(r2)
		bSuccess = TRUE;
802012d8:	00800044 	movi	r2,1
802012dc:	e0bffd15 	stw	r2,-12(fp)
		break;
802012e0:	00001406 	br	80201334 <bDdr2SwitchMemory+0xa0>
	case DDR2_M2_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
802012e4:	e0bffe17 	ldw	r2,-8(fp)
802012e8:	00e00034 	movhi	r3,32768
802012ec:	10c00015 	stw	r3,0(r2)
		bSuccess = TRUE;
802012f0:	00800044 	movi	r2,1
802012f4:	e0bffd15 	stw	r2,-12(fp)
		break;
802012f8:	00000e06 	br	80201334 <bDdr2SwitchMemory+0xa0>
	default:
		bSuccess = FALSE;
802012fc:	e03ffd15 	stw	zero,-12(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80201300:	00e008b4 	movhi	r3,32802
80201304:	18fb0604 	addi	r3,r3,-5096
80201308:	00a008b4 	movhi	r2,32802
8020130c:	10b07b04 	addi	r2,r2,-15892
80201310:	1009883a 	mov	r4,r2
80201314:	00800f04 	movi	r2,60
80201318:	100d883a 	mov	r6,r2
8020131c:	200b883a 	mov	r5,r4
80201320:	1809883a 	mov	r4,r3
80201324:	02066c00 	call	802066c0 <memcpy>
				"DR2 Memory ID not identified!! Error switching memories!! \n");
		debug(fp, cDebugBuffer)
80201328:	012008b4 	movhi	r4,32802
8020132c:	213b0604 	addi	r4,r4,-5096
80201330:	02068380 	call	80206838 <printf>
		;
#endif
	}

	return bSuccess;
80201334:	e0bffd17 	ldw	r2,-12(fp)
}
80201338:	e037883a 	mov	sp,fp
8020133c:	dfc00117 	ldw	ra,4(sp)
80201340:	df000017 	ldw	fp,0(sp)
80201344:	dec00204 	addi	sp,sp,8
80201348:	f800283a 	ret

8020134c <bDdr2MemoryWriteTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryWriteTest(alt_u8 ucMemoryId) {
8020134c:	deffe204 	addi	sp,sp,-120
80201350:	dfc01d15 	stw	ra,116(sp)
80201354:	df001c15 	stw	fp,112(sp)
80201358:	dc401b15 	stw	r17,108(sp)
8020135c:	dc001a15 	stw	r16,104(sp)
80201360:	df001c04 	addi	fp,sp,112
80201364:	2005883a 	mov	r2,r4
80201368:	e0bffd05 	stb	r2,-12(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Write Test =====\n");
8020136c:	00e008b4 	movhi	r3,32802
80201370:	18fb0604 	addi	r3,r3,-5096
80201374:	00a008b4 	movhi	r2,32802
80201378:	10b08a04 	addi	r2,r2,-15832
8020137c:	1009883a 	mov	r4,r2
80201380:	00800a04 	movi	r2,40
80201384:	100d883a 	mov	r6,r2
80201388:	200b883a 	mov	r5,r4
8020138c:	1809883a 	mov	r4,r3
80201390:	02066c00 	call	802066c0 <memcpy>
	debug(fp, cDebugBuffer);
80201394:	012008b4 	movhi	r4,32802
80201398:	213b0604 	addi	r4,r4,-5096
8020139c:	02068380 	call	80206838 <printf>
#endif
	bool bSuccess = FALSE;
802013a0:	e03fe515 	stw	zero,-108(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
802013a4:	e0bffd03 	ldbu	r2,-12(fp)
802013a8:	10000326 	beq	r2,zero,802013b8 <bDdr2MemoryWriteTest+0x6c>
802013ac:	10800060 	cmpeqi	r2,r2,1
802013b0:	10000a1e 	bne	r2,zero,802013dc <bDdr2MemoryWriteTest+0x90>
802013b4:	00001206 	br	80201400 <bDdr2MemoryWriteTest+0xb4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
802013b8:	e0bffd03 	ldbu	r2,-12(fp)
802013bc:	1009883a 	mov	r4,r2
802013c0:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802013c4:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
802013c8:	00a00034 	movhi	r2,32768
802013cc:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
802013d0:	00800044 	movi	r2,1
802013d4:	e0bfe515 	stw	r2,-108(fp)
		break;
802013d8:	00001906 	br	80201440 <bDdr2MemoryWriteTest+0xf4>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
802013dc:	e0bffd03 	ldbu	r2,-12(fp)
802013e0:	1009883a 	mov	r4,r2
802013e4:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802013e8:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
802013ec:	00a00034 	movhi	r2,32768
802013f0:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
802013f4:	00800044 	movi	r2,1
802013f8:	e0bfe515 	stw	r2,-108(fp)
		break;
802013fc:	00001006 	br	80201440 <bDdr2MemoryWriteTest+0xf4>
	default:
		bSuccess = FALSE;
80201400:	e03fe515 	stw	zero,-108(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80201404:	00e008b4 	movhi	r3,32802
80201408:	18fb0604 	addi	r3,r3,-5096
8020140c:	00a008b4 	movhi	r2,32802
80201410:	10ae9b04 	addi	r2,r2,-17812
80201414:	1009883a 	mov	r4,r2
80201418:	00800bc4 	movi	r2,47
8020141c:	100d883a 	mov	r6,r2
80201420:	200b883a 	mov	r5,r4
80201424:	1809883a 	mov	r4,r3
80201428:	02066c00 	call	802066c0 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
8020142c:	012008b4 	movhi	r4,32802
80201430:	213b0604 	addi	r4,r4,-5096
80201434:	02068380 	call	80206838 <printf>
		;
#endif
		return bSuccess;
80201438:	e0bfe517 	ldw	r2,-108(fp)
8020143c:	00010a06 	br	80201868 <bDdr2MemoryWriteTest+0x51c>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
80201440:	e0bfe717 	ldw	r2,-100(fp)
80201444:	1004d53a 	srli	r2,r2,20
80201448:	100d883a 	mov	r6,r2
8020144c:	016008b4 	movhi	r5,32802
80201450:	29709404 	addi	r5,r5,-15792
80201454:	012008b4 	movhi	r4,32802
80201458:	213b0604 	addi	r4,r4,-5096
8020145c:	02069a00 	call	802069a0 <sprintf>
	debug(fp, cDebugBuffer);
80201460:	012008b4 	movhi	r4,32802
80201464:	213b0604 	addi	r4,r4,-5096
80201468:	02068380 	call	80206838 <printf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes;

	int iNItemNum, iNPos;
	const int ciMyDataSize = sizeof(TMyData);
8020146c:	00800104 	movi	r2,4
80201470:	e0bfee15 	stw	r2,-72(fp)
	int iNProgressIndex = 0;
80201474:	e03fed15 	stw	zero,-76(fp)
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
80201478:	e03fef15 	stw	zero,-68(fp)

	for (iI = 0; iI < 10; iI++) {
8020147c:	e03fe815 	stw	zero,-96(fp)
80201480:	00001506 	br	802014d8 <bDdr2MemoryWriteTest+0x18c>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
80201484:	e0ffe717 	ldw	r3,-100(fp)
80201488:	00b33374 	movhi	r2,52429
8020148c:	10b33344 	addi	r2,r2,-13107
80201490:	1888383a 	mulxuu	r4,r3,r2
80201494:	1885383a 	mul	r2,r3,r2
80201498:	1021883a 	mov	r16,r2
8020149c:	2023883a 	mov	r17,r4
802014a0:	8804d0fa 	srli	r2,r17,3
802014a4:	e0ffe817 	ldw	r3,-96(fp)
802014a8:	18c00044 	addi	r3,r3,1
802014ac:	10c7383a 	mul	r3,r2,r3
802014b0:	e0bfe817 	ldw	r2,-96(fp)
802014b4:	1085883a 	add	r2,r2,r2
802014b8:	1085883a 	add	r2,r2,r2
802014bc:	e13fe504 	addi	r4,fp,-108
802014c0:	2085883a 	add	r2,r4,r2
802014c4:	10800e04 	addi	r2,r2,56
802014c8:	10c00015 	stw	r3,0(r2)
	int iNProgressIndex = 0;
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
802014cc:	e0bfe817 	ldw	r2,-96(fp)
802014d0:	10800044 	addi	r2,r2,1
802014d4:	e0bfe815 	stw	r2,-96(fp)
802014d8:	e0bfe817 	ldw	r2,-96(fp)
802014dc:	10800290 	cmplti	r2,r2,10
802014e0:	103fe81e 	bne	r2,zero,80201484 <__reset+0xfa1e1484>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
802014e4:	d0a02617 	ldw	r2,-32616(gp)
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
802014e8:	e0bff015 	stw	r2,-64(fp)
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
802014ec:	00804004 	movi	r2,256
802014f0:	e0bfeb15 	stw	r2,-84(fp)
	for (iI = 0; iI < iNItemNum; iI++) {
802014f4:	e03fe815 	stw	zero,-96(fp)
802014f8:	00001e06 	br	80201574 <bDdr2MemoryWriteTest+0x228>
		if (iI == 0) {
802014fc:	e0bfe817 	ldw	r2,-96(fp)
80201500:	1000091e 	bne	r2,zero,80201528 <bDdr2MemoryWriteTest+0x1dc>
			xSZData[iI] = uliInitValue;
80201504:	00a008b4 	movhi	r2,32802
80201508:	10bb4604 	addi	r2,r2,-4840
8020150c:	e0ffe817 	ldw	r3,-96(fp)
80201510:	18c7883a 	add	r3,r3,r3
80201514:	18c7883a 	add	r3,r3,r3
80201518:	10c5883a 	add	r2,r2,r3
8020151c:	e0fff017 	ldw	r3,-64(fp)
80201520:	10c00015 	stw	r3,0(r2)
80201524:	00001006 	br	80201568 <bDdr2MemoryWriteTest+0x21c>
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
80201528:	e0bfe817 	ldw	r2,-96(fp)
8020152c:	10ffffc4 	addi	r3,r2,-1
80201530:	00a008b4 	movhi	r2,32802
80201534:	10bb4604 	addi	r2,r2,-4840
80201538:	18c7883a 	add	r3,r3,r3
8020153c:	18c7883a 	add	r3,r3,r3
80201540:	10c5883a 	add	r2,r2,r3
80201544:	10800017 	ldw	r2,0(r2)
80201548:	11000364 	muli	r4,r2,13
8020154c:	00a008b4 	movhi	r2,32802
80201550:	10bb4604 	addi	r2,r2,-4840
80201554:	e0ffe817 	ldw	r3,-96(fp)
80201558:	18c7883a 	add	r3,r3,r3
8020155c:	18c7883a 	add	r3,r3,r3
80201560:	10c5883a 	add	r2,r2,r3
80201564:	11000015 	stw	r4,0(r2)
	for (iI = 0; iI < 10; iI++) {
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
	for (iI = 0; iI < iNItemNum; iI++) {
80201568:	e0bfe817 	ldw	r2,-96(fp)
8020156c:	10800044 	addi	r2,r2,1
80201570:	e0bfe815 	stw	r2,-96(fp)
80201574:	e0ffe817 	ldw	r3,-96(fp)
80201578:	e0bfeb17 	ldw	r2,-84(fp)
8020157c:	18bfdf16 	blt	r3,r2,802014fc <__reset+0xfa1e14fc>
			xSZData[iI] = uliInitValue;
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
		}
	}
	xSZData[iNItemNum - 1] = 0xAAAAAAAA;
80201580:	e0bfeb17 	ldw	r2,-84(fp)
80201584:	10ffffc4 	addi	r3,r2,-1
80201588:	00a008b4 	movhi	r2,32802
8020158c:	10bb4604 	addi	r2,r2,-4840
80201590:	18c7883a 	add	r3,r3,r3
80201594:	18c7883a 	add	r3,r3,r3
80201598:	10c7883a 	add	r3,r2,r3
8020159c:	00aaaaf4 	movhi	r2,43691
802015a0:	10aaaa84 	addi	r2,r2,-21846
802015a4:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 2] = 0x55555555;
802015a8:	e0bfeb17 	ldw	r2,-84(fp)
802015ac:	10ffff84 	addi	r3,r2,-2
802015b0:	00a008b4 	movhi	r2,32802
802015b4:	10bb4604 	addi	r2,r2,-4840
802015b8:	18c7883a 	add	r3,r3,r3
802015bc:	18c7883a 	add	r3,r3,r3
802015c0:	10c7883a 	add	r3,r2,r3
802015c4:	00955574 	movhi	r2,21845
802015c8:	10955544 	addi	r2,r2,21845
802015cc:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 3] = 0x00000000;
802015d0:	e0bfeb17 	ldw	r2,-84(fp)
802015d4:	10ffff44 	addi	r3,r2,-3
802015d8:	00a008b4 	movhi	r2,32802
802015dc:	10bb4604 	addi	r2,r2,-4840
802015e0:	18c7883a 	add	r3,r3,r3
802015e4:	18c7883a 	add	r3,r3,r3
802015e8:	10c5883a 	add	r2,r2,r3
802015ec:	10000015 	stw	zero,0(r2)
	xSZData[iNItemNum - 4] = 0xFFFFFFFF;
802015f0:	e0bfeb17 	ldw	r2,-84(fp)
802015f4:	10ffff04 	addi	r3,r2,-4
802015f8:	00a008b4 	movhi	r2,32802
802015fc:	10bb4604 	addi	r2,r2,-4840
80201600:	18c7883a 	add	r3,r3,r3
80201604:	18c7883a 	add	r3,r3,r3
80201608:	10c5883a 	add	r2,r2,r3
8020160c:	00ffffc4 	movi	r3,-1
80201610:	10c00015 	stw	r3,0(r2)

#if DEBUG_ON
	sprintf(cDebugBuffer, "Writing data...\n");
80201614:	00e008b4 	movhi	r3,32802
80201618:	18fb0604 	addi	r3,r3,-5096
8020161c:	00a008b4 	movhi	r2,32802
80201620:	10b09a04 	addi	r2,r2,-15768
80201624:	1009883a 	mov	r4,r2
80201628:	00800444 	movi	r2,17
8020162c:	100d883a 	mov	r6,r2
80201630:	200b883a 	mov	r5,r4
80201634:	1809883a 	mov	r4,r3
80201638:	02066c00 	call	802066c0 <memcpy>
	debug(fp, cDebugBuffer);
8020163c:	012008b4 	movhi	r4,32802
80201640:	213b0604 	addi	r4,r4,-5096
80201644:	02068380 	call	80206838 <printf>
80201648:	d0a02617 	ldw	r2,-32616(gp)
#endif
	iTimeStart = alt_nticks();
8020164c:	e0bff115 	stw	r2,-60(fp)
	pxDes = (TMyData *) uliDdr2Base;
80201650:	e0bfe617 	ldw	r2,-104(fp)
80201654:	e0bfea15 	stw	r2,-88(fp)
	iNAccessLen = sizeof(xSZData);
80201658:	00810004 	movi	r2,1024
8020165c:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
80201660:	e0ffe917 	ldw	r3,-92(fp)
80201664:	e0bfee17 	ldw	r2,-72(fp)
80201668:	1885283a 	div	r2,r3,r2
8020166c:	e0bfeb15 	stw	r2,-84(fp)
	iNPos = 0;
80201670:	e03fec15 	stw	zero,-80(fp)
	while (iNPos < uliByteLen) {
80201674:	00003806 	br	80201758 <bDdr2MemoryWriteTest+0x40c>
		iNRemainedLen = uliByteLen - iNPos;
80201678:	e0bfec17 	ldw	r2,-80(fp)
8020167c:	e0ffe717 	ldw	r3,-100(fp)
80201680:	1885c83a 	sub	r2,r3,r2
80201684:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
80201688:	e0bfe917 	ldw	r2,-92(fp)
8020168c:	e0fff217 	ldw	r3,-56(fp)
80201690:	1880060e 	bge	r3,r2,802016ac <bDdr2MemoryWriteTest+0x360>
			iNAccessLen = iNRemainedLen;
80201694:	e0bff217 	ldw	r2,-56(fp)
80201698:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
8020169c:	e0ffe917 	ldw	r3,-92(fp)
802016a0:	e0bfee17 	ldw	r2,-72(fp)
802016a4:	1885283a 	div	r2,r3,r2
802016a8:	e0bfeb15 	stw	r2,-84(fp)
		}
		memcpy(pxDes, xSZData, iNAccessLen);
802016ac:	e0bfe917 	ldw	r2,-92(fp)
802016b0:	100d883a 	mov	r6,r2
802016b4:	016008b4 	movhi	r5,32802
802016b8:	297b4604 	addi	r5,r5,-4840
802016bc:	e13fea17 	ldw	r4,-88(fp)
802016c0:	02066c00 	call	802066c0 <memcpy>
		pxDes += iNItemNum;
802016c4:	e0bfeb17 	ldw	r2,-84(fp)
802016c8:	1085883a 	add	r2,r2,r2
802016cc:	1085883a 	add	r2,r2,r2
802016d0:	1007883a 	mov	r3,r2
802016d4:	e0bfea17 	ldw	r2,-88(fp)
802016d8:	10c5883a 	add	r2,r2,r3
802016dc:	e0bfea15 	stw	r2,-88(fp)
		iNPos += iNAccessLen;
802016e0:	e0ffec17 	ldw	r3,-80(fp)
802016e4:	e0bfe917 	ldw	r2,-92(fp)
802016e8:	1885883a 	add	r2,r3,r2
802016ec:	e0bfec15 	stw	r2,-80(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
802016f0:	e0bfed17 	ldw	r2,-76(fp)
802016f4:	10800288 	cmpgei	r2,r2,10
802016f8:	1000171e 	bne	r2,zero,80201758 <bDdr2MemoryWriteTest+0x40c>
802016fc:	e0bfed17 	ldw	r2,-76(fp)
80201700:	1085883a 	add	r2,r2,r2
80201704:	1085883a 	add	r2,r2,r2
80201708:	e0ffe504 	addi	r3,fp,-108
8020170c:	1885883a 	add	r2,r3,r2
80201710:	10800e04 	addi	r2,r2,56
80201714:	10800017 	ldw	r2,0(r2)
80201718:	e0ffec17 	ldw	r3,-80(fp)
8020171c:	18800e36 	bltu	r3,r2,80201758 <bDdr2MemoryWriteTest+0x40c>
			iNProgressIndex++;
80201720:	e0bfed17 	ldw	r2,-76(fp)
80201724:	10800044 	addi	r2,r2,1
80201728:	e0bfed15 	stw	r2,-76(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
8020172c:	e0bfed17 	ldw	r2,-76(fp)
80201730:	108002a4 	muli	r2,r2,10
80201734:	100d883a 	mov	r6,r2
80201738:	016008b4 	movhi	r5,32802
8020173c:	29709f04 	addi	r5,r5,-15748
80201740:	012008b4 	movhi	r4,32802
80201744:	213b0604 	addi	r4,r4,-5096
80201748:	02069a00 	call	802069a0 <sprintf>
			debug(fp, cDebugBuffer);
8020174c:	012008b4 	movhi	r4,32802
80201750:	213b0604 	addi	r4,r4,-5096
80201754:	02068380 	call	80206838 <printf>
	iTimeStart = alt_nticks();
	pxDes = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (iNPos < uliByteLen) {
80201758:	e0ffec17 	ldw	r3,-80(fp)
8020175c:	e0bfe717 	ldw	r2,-100(fp)
80201760:	18bfc536 	bltu	r3,r2,80201678 <__reset+0xfa1e1678>
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
			debug(fp, cDebugBuffer);
#endif
		}
	}
	alt_dcache_flush_all();
80201764:	02168580 	call	80216858 <alt_dcache_flush_all>
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201768:	00a008b4 	movhi	r2,32802
8020176c:	10bb0604 	addi	r2,r2,-5096
80201770:	00c00284 	movi	r3,10
80201774:	10c00005 	stb	r3,0(r2)
80201778:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
8020177c:	012008b4 	movhi	r4,32802
80201780:	213b0604 	addi	r4,r4,-5096
80201784:	02068380 	call	80206838 <printf>
80201788:	d0e02617 	ldw	r3,-32616(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
8020178c:	e0bff117 	ldw	r2,-60(fp)
80201790:	1885c83a 	sub	r2,r3,r2
80201794:	e0bfef15 	stw	r2,-68(fp)
	if (bSuccess) {
80201798:	e0bfe517 	ldw	r2,-108(fp)
8020179c:	10001c26 	beq	r2,zero,80201810 <bDdr2MemoryWriteTest+0x4c4>
#if DEBUG_ON
		sprintf(cDebugBuffer,
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
802017a0:	e13fef17 	ldw	r4,-68(fp)
802017a4:	02062380 	call	80206238 <__floatsisf>
802017a8:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
802017ac:	d0a02517 	ldw	r2,-32620(gp)
802017b0:	1009883a 	mov	r4,r2
802017b4:	020635c0 	call	8020635c <__floatunsisf>
802017b8:	1007883a 	mov	r3,r2
802017bc:	180b883a 	mov	r5,r3
802017c0:	8009883a 	mov	r4,r16
802017c4:	0205df80 	call	80205df8 <__divsf3>
802017c8:	1007883a 	mov	r3,r2
802017cc:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#if DEBUG_ON
		sprintf(cDebugBuffer,
802017d0:	1009883a 	mov	r4,r2
802017d4:	020644c0 	call	8020644c <__extendsfdf2>
802017d8:	1009883a 	mov	r4,r2
802017dc:	180b883a 	mov	r5,r3
802017e0:	d9400015 	stw	r5,0(sp)
802017e4:	200f883a 	mov	r7,r4
802017e8:	e1bfe717 	ldw	r6,-100(fp)
802017ec:	016008b4 	movhi	r5,32802
802017f0:	2970a104 	addi	r5,r5,-15740
802017f4:	012008b4 	movhi	r4,32802
802017f8:	213b0604 	addi	r4,r4,-5096
802017fc:	02069a00 	call	802069a0 <sprintf>
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
80201800:	012008b4 	movhi	r4,32802
80201804:	213b0604 	addi	r4,r4,-5096
80201808:	02068380 	call	80206838 <printf>
8020180c:	00000d06 	br	80201844 <bDdr2MemoryWriteTest+0x4f8>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
80201810:	00e008b4 	movhi	r3,32802
80201814:	18fb0604 	addi	r3,r3,-5096
80201818:	00a008b4 	movhi	r2,32802
8020181c:	10b0ad04 	addi	r2,r2,-15692
80201820:	1009883a 	mov	r4,r2
80201824:	00800584 	movi	r2,22
80201828:	100d883a 	mov	r6,r2
8020182c:	200b883a 	mov	r5,r4
80201830:	1809883a 	mov	r4,r3
80201834:	02066c00 	call	802066c0 <memcpy>
		debug(fp, cDebugBuffer);
80201838:	012008b4 	movhi	r4,32802
8020183c:	213b0604 	addi	r4,r4,-5096
80201840:	02068380 	call	80206838 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201844:	00a008b4 	movhi	r2,32802
80201848:	10bb0604 	addi	r2,r2,-5096
8020184c:	00c00284 	movi	r3,10
80201850:	10c00005 	stb	r3,0(r2)
80201854:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201858:	012008b4 	movhi	r4,32802
8020185c:	213b0604 	addi	r4,r4,-5096
80201860:	02068380 	call	80206838 <printf>
#endif

	return bSuccess;
80201864:	e0bfe517 	ldw	r2,-108(fp)
}
80201868:	e6fffe04 	addi	sp,fp,-8
8020186c:	dfc00317 	ldw	ra,12(sp)
80201870:	df000217 	ldw	fp,8(sp)
80201874:	dc400117 	ldw	r17,4(sp)
80201878:	dc000017 	ldw	r16,0(sp)
8020187c:	dec00404 	addi	sp,sp,16
80201880:	f800283a 	ret

80201884 <bDdr2MemoryReadTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryReadTest(alt_u8 ucMemoryId) {
80201884:	deffe204 	addi	sp,sp,-120
80201888:	dfc01d15 	stw	ra,116(sp)
8020188c:	df001c15 	stw	fp,112(sp)
80201890:	dc401b15 	stw	r17,108(sp)
80201894:	dc001a15 	stw	r16,104(sp)
80201898:	df001c04 	addi	fp,sp,112
8020189c:	2005883a 	mov	r2,r4
802018a0:	e0bffd05 	stb	r2,-12(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Read Test =====\n");
802018a4:	00e008b4 	movhi	r3,32802
802018a8:	18fb0604 	addi	r3,r3,-5096
802018ac:	00a008b4 	movhi	r2,32802
802018b0:	10b0b304 	addi	r2,r2,-15668
802018b4:	1009883a 	mov	r4,r2
802018b8:	008009c4 	movi	r2,39
802018bc:	100d883a 	mov	r6,r2
802018c0:	200b883a 	mov	r5,r4
802018c4:	1809883a 	mov	r4,r3
802018c8:	02066c00 	call	802066c0 <memcpy>
	debug(fp, cDebugBuffer);
802018cc:	012008b4 	movhi	r4,32802
802018d0:	213b0604 	addi	r4,r4,-5096
802018d4:	02068380 	call	80206838 <printf>
#endif
	bool bSuccess = FALSE;
802018d8:	e03fe515 	stw	zero,-108(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
802018dc:	e0bffd03 	ldbu	r2,-12(fp)
802018e0:	10000326 	beq	r2,zero,802018f0 <bDdr2MemoryReadTest+0x6c>
802018e4:	10800060 	cmpeqi	r2,r2,1
802018e8:	10000a1e 	bne	r2,zero,80201914 <bDdr2MemoryReadTest+0x90>
802018ec:	00001206 	br	80201938 <bDdr2MemoryReadTest+0xb4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
802018f0:	e0bffd03 	ldbu	r2,-12(fp)
802018f4:	1009883a 	mov	r4,r2
802018f8:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802018fc:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
80201900:	00a00034 	movhi	r2,32768
80201904:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
80201908:	00800044 	movi	r2,1
8020190c:	e0bfe515 	stw	r2,-108(fp)
		break;
80201910:	00001906 	br	80201978 <bDdr2MemoryReadTest+0xf4>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
80201914:	e0bffd03 	ldbu	r2,-12(fp)
80201918:	1009883a 	mov	r4,r2
8020191c:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80201920:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
80201924:	00a00034 	movhi	r2,32768
80201928:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
8020192c:	00800044 	movi	r2,1
80201930:	e0bfe515 	stw	r2,-108(fp)
		break;
80201934:	00001006 	br	80201978 <bDdr2MemoryReadTest+0xf4>
	default:
		bSuccess = FALSE;
80201938:	e03fe515 	stw	zero,-108(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
8020193c:	00e008b4 	movhi	r3,32802
80201940:	18fb0604 	addi	r3,r3,-5096
80201944:	00a008b4 	movhi	r2,32802
80201948:	10ae9b04 	addi	r2,r2,-17812
8020194c:	1009883a 	mov	r4,r2
80201950:	00800bc4 	movi	r2,47
80201954:	100d883a 	mov	r6,r2
80201958:	200b883a 	mov	r5,r4
8020195c:	1809883a 	mov	r4,r3
80201960:	02066c00 	call	802066c0 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
80201964:	012008b4 	movhi	r4,32802
80201968:	213b0604 	addi	r4,r4,-5096
8020196c:	02068380 	call	80206838 <printf>
		;
#endif
		return bSuccess;
80201970:	e0bfe517 	ldw	r2,-108(fp)
80201974:	0000ec06 	br	80201d28 <bDdr2MemoryReadTest+0x4a4>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %lu MBytes\n", uliByteLen / 1024 / 1024);
80201978:	e0bfe717 	ldw	r2,-100(fp)
8020197c:	1004d53a 	srli	r2,r2,20
80201980:	100d883a 	mov	r6,r2
80201984:	016008b4 	movhi	r5,32802
80201988:	2970bd04 	addi	r5,r5,-15628
8020198c:	012008b4 	movhi	r4,32802
80201990:	213b0604 	addi	r4,r4,-5096
80201994:	02069a00 	call	802069a0 <sprintf>
	debug(fp, cDebugBuffer);
80201998:	012008b4 	movhi	r4,32802
8020199c:	213b0604 	addi	r4,r4,-5096
802019a0:	02068380 	call	80206838 <printf>
#endif

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes, *pxSrc;
	int iNItemNum, iNPos;
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
802019a4:	00804004 	movi	r2,256
802019a8:	e0bfec15 	stw	r2,-80(fp)
	const int ciMyDataSize = sizeof(TMyData);
802019ac:	00800104 	movi	r2,4
802019b0:	e0bfef15 	stw	r2,-68(fp)
	iNAccessLen = iNItemNum * ciMyDataSize;
802019b4:	e0ffec17 	ldw	r3,-80(fp)
802019b8:	e0bfef17 	ldw	r2,-68(fp)
802019bc:	1885383a 	mul	r2,r3,r2
802019c0:	e0bfe915 	stw	r2,-92(fp)
	int iNProgressIndex = 0;
802019c4:	e03fee15 	stw	zero,-72(fp)
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
802019c8:	e03ff015 	stw	zero,-64(fp)

	for (iI = 0; iI < 10; iI++) {
802019cc:	e03fe815 	stw	zero,-96(fp)
802019d0:	00001506 	br	80201a28 <bDdr2MemoryReadTest+0x1a4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
802019d4:	e0ffe717 	ldw	r3,-100(fp)
802019d8:	00b33374 	movhi	r2,52429
802019dc:	10b33344 	addi	r2,r2,-13107
802019e0:	1888383a 	mulxuu	r4,r3,r2
802019e4:	1885383a 	mul	r2,r3,r2
802019e8:	1021883a 	mov	r16,r2
802019ec:	2023883a 	mov	r17,r4
802019f0:	8804d0fa 	srli	r2,r17,3
802019f4:	e0ffe817 	ldw	r3,-96(fp)
802019f8:	18c00044 	addi	r3,r3,1
802019fc:	10c7383a 	mul	r3,r2,r3
80201a00:	e0bfe817 	ldw	r2,-96(fp)
80201a04:	1085883a 	add	r2,r2,r2
80201a08:	1085883a 	add	r2,r2,r2
80201a0c:	e13fe504 	addi	r4,fp,-108
80201a10:	2085883a 	add	r2,r4,r2
80201a14:	10800e04 	addi	r2,r2,56
80201a18:	10c00015 	stw	r3,0(r2)
	iNAccessLen = iNItemNum * ciMyDataSize;
	int iNProgressIndex = 0;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
80201a1c:	e0bfe817 	ldw	r2,-96(fp)
80201a20:	10800044 	addi	r2,r2,1
80201a24:	e0bfe815 	stw	r2,-96(fp)
80201a28:	e0bfe817 	ldw	r2,-96(fp)
80201a2c:	10800290 	cmplti	r2,r2,10
80201a30:	103fe81e 	bne	r2,zero,802019d4 <__reset+0xfa1e19d4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}

	iNProgressIndex = 0;
80201a34:	e03fee15 	stw	zero,-72(fp)
#if DEBUG_ON
	sprintf(cDebugBuffer, "Reading/Verifying Data...\n");
80201a38:	00e008b4 	movhi	r3,32802
80201a3c:	18fb0604 	addi	r3,r3,-5096
80201a40:	00a008b4 	movhi	r2,32802
80201a44:	10b0c304 	addi	r2,r2,-15604
80201a48:	1009883a 	mov	r4,r2
80201a4c:	008006c4 	movi	r2,27
80201a50:	100d883a 	mov	r6,r2
80201a54:	200b883a 	mov	r5,r4
80201a58:	1809883a 	mov	r4,r3
80201a5c:	02066c00 	call	802066c0 <memcpy>
	debug(fp, cDebugBuffer);
80201a60:	012008b4 	movhi	r4,32802
80201a64:	213b0604 	addi	r4,r4,-5096
80201a68:	02068380 	call	80206838 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80201a6c:	d0a02617 	ldw	r2,-32616(gp)
#endif
	iTimeStart = alt_nticks();
80201a70:	e0bff115 	stw	r2,-60(fp)

	pxSrc = (TMyData *) uliDdr2Base;
80201a74:	e0bfe617 	ldw	r2,-104(fp)
80201a78:	e0bfeb15 	stw	r2,-84(fp)
	iNAccessLen = sizeof(xSZData);
80201a7c:	00810004 	movi	r2,1024
80201a80:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
80201a84:	e0ffe917 	ldw	r3,-92(fp)
80201a88:	e0bfef17 	ldw	r2,-68(fp)
80201a8c:	1885283a 	div	r2,r3,r2
80201a90:	e0bfec15 	stw	r2,-80(fp)
	iNPos = 0;
80201a94:	e03fed15 	stw	zero,-76(fp)
	while (bSuccess && iNPos < uliByteLen) {
80201a98:	00005e06 	br	80201c14 <bDdr2MemoryReadTest+0x390>
		iNRemainedLen = uliByteLen - iNPos;
80201a9c:	e0bfed17 	ldw	r2,-76(fp)
80201aa0:	e0ffe717 	ldw	r3,-100(fp)
80201aa4:	1885c83a 	sub	r2,r3,r2
80201aa8:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
80201aac:	e0bfe917 	ldw	r2,-92(fp)
80201ab0:	e0fff217 	ldw	r3,-56(fp)
80201ab4:	1880060e 	bge	r3,r2,80201ad0 <bDdr2MemoryReadTest+0x24c>
			iNAccessLen = iNRemainedLen;
80201ab8:	e0bff217 	ldw	r2,-56(fp)
80201abc:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
80201ac0:	e0ffe917 	ldw	r3,-92(fp)
80201ac4:	e0bfef17 	ldw	r2,-68(fp)
80201ac8:	1885283a 	div	r2,r3,r2
80201acc:	e0bfec15 	stw	r2,-80(fp)
		}
		pxDes = xSZData;
80201ad0:	00a008b4 	movhi	r2,32802
80201ad4:	10bb4604 	addi	r2,r2,-4840
80201ad8:	e0bfea15 	stw	r2,-88(fp)
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
80201adc:	e03fe815 	stw	zero,-96(fp)
80201ae0:	00002906 	br	80201b88 <bDdr2MemoryReadTest+0x304>
			if (*pxSrc++ != *pxDes++) {
80201ae4:	e0bfeb17 	ldw	r2,-84(fp)
80201ae8:	10c00104 	addi	r3,r2,4
80201aec:	e0ffeb15 	stw	r3,-84(fp)
80201af0:	10c00017 	ldw	r3,0(r2)
80201af4:	e0bfea17 	ldw	r2,-88(fp)
80201af8:	11000104 	addi	r4,r2,4
80201afc:	e13fea15 	stw	r4,-88(fp)
80201b00:	10800017 	ldw	r2,0(r2)
80201b04:	18801d26 	beq	r3,r2,80201b7c <bDdr2MemoryReadTest+0x2f8>
#if DEBUG_ON
				sprintf(cDebugBuffer,
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
80201b08:	e0bfeb17 	ldw	r2,-84(fp)
80201b0c:	10bfff04 	addi	r2,r2,-4
80201b10:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201b14:	1009883a 	mov	r4,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
80201b18:	00a008b4 	movhi	r2,32802
80201b1c:	10bb4604 	addi	r2,r2,-4840
80201b20:	e0ffe817 	ldw	r3,-96(fp)
80201b24:	18c7883a 	add	r3,r3,r3
80201b28:	18c7883a 	add	r3,r3,r3
80201b2c:	10c5883a 	add	r2,r2,r3
80201b30:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201b34:	100b883a 	mov	r5,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
80201b38:	e0ffed17 	ldw	r3,-76(fp)
80201b3c:	e0bfef17 	ldw	r2,-68(fp)
80201b40:	1887283a 	div	r3,r3,r2
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201b44:	e0bfe817 	ldw	r2,-96(fp)
80201b48:	1885883a 	add	r2,r3,r2
80201b4c:	d8800015 	stw	r2,0(sp)
80201b50:	280f883a 	mov	r7,r5
80201b54:	200d883a 	mov	r6,r4
80201b58:	016008b4 	movhi	r5,32802
80201b5c:	2970ca04 	addi	r5,r5,-15576
80201b60:	012008b4 	movhi	r4,32802
80201b64:	213b0604 	addi	r4,r4,-5096
80201b68:	02069a00 	call	802069a0 <sprintf>
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
				debug(fp, cDebugBuffer);
80201b6c:	012008b4 	movhi	r4,32802
80201b70:	213b0604 	addi	r4,r4,-5096
80201b74:	02068380 	call	80206838 <printf>
#endif
				bSuccess = FALSE;
80201b78:	e03fe515 	stw	zero,-108(fp)
		if (iNAccessLen > iNRemainedLen) {
			iNAccessLen = iNRemainedLen;
			iNItemNum = iNAccessLen / ciMyDataSize;
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
80201b7c:	e0bfe817 	ldw	r2,-96(fp)
80201b80:	10800044 	addi	r2,r2,1
80201b84:	e0bfe815 	stw	r2,-96(fp)
80201b88:	e0ffe817 	ldw	r3,-96(fp)
80201b8c:	e0bfec17 	ldw	r2,-80(fp)
80201b90:	1880020e 	bge	r3,r2,80201b9c <bDdr2MemoryReadTest+0x318>
80201b94:	e0bfe517 	ldw	r2,-108(fp)
80201b98:	103fd21e 	bne	r2,zero,80201ae4 <__reset+0xfa1e1ae4>
				debug(fp, cDebugBuffer);
#endif
				bSuccess = FALSE;
			}
		}
		iNPos += iNAccessLen;
80201b9c:	e0ffed17 	ldw	r3,-76(fp)
80201ba0:	e0bfe917 	ldw	r2,-92(fp)
80201ba4:	1885883a 	add	r2,r3,r2
80201ba8:	e0bfed15 	stw	r2,-76(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
80201bac:	e0bfee17 	ldw	r2,-72(fp)
80201bb0:	10800288 	cmpgei	r2,r2,10
80201bb4:	1000171e 	bne	r2,zero,80201c14 <bDdr2MemoryReadTest+0x390>
80201bb8:	e0bfee17 	ldw	r2,-72(fp)
80201bbc:	1085883a 	add	r2,r2,r2
80201bc0:	1085883a 	add	r2,r2,r2
80201bc4:	e0ffe504 	addi	r3,fp,-108
80201bc8:	1885883a 	add	r2,r3,r2
80201bcc:	10800e04 	addi	r2,r2,56
80201bd0:	10800017 	ldw	r2,0(r2)
80201bd4:	e0ffed17 	ldw	r3,-76(fp)
80201bd8:	18800e36 	bltu	r3,r2,80201c14 <bDdr2MemoryReadTest+0x390>
			iNProgressIndex++;
80201bdc:	e0bfee17 	ldw	r2,-72(fp)
80201be0:	10800044 	addi	r2,r2,1
80201be4:	e0bfee15 	stw	r2,-72(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
80201be8:	e0bfee17 	ldw	r2,-72(fp)
80201bec:	108002a4 	muli	r2,r2,10
80201bf0:	100d883a 	mov	r6,r2
80201bf4:	016008b4 	movhi	r5,32802
80201bf8:	29709f04 	addi	r5,r5,-15748
80201bfc:	012008b4 	movhi	r4,32802
80201c00:	213b0604 	addi	r4,r4,-5096
80201c04:	02069a00 	call	802069a0 <sprintf>
			debug(fp, cDebugBuffer);
80201c08:	012008b4 	movhi	r4,32802
80201c0c:	213b0604 	addi	r4,r4,-5096
80201c10:	02068380 	call	80206838 <printf>

	pxSrc = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (bSuccess && iNPos < uliByteLen) {
80201c14:	e0bfe517 	ldw	r2,-108(fp)
80201c18:	10000326 	beq	r2,zero,80201c28 <bDdr2MemoryReadTest+0x3a4>
80201c1c:	e0ffed17 	ldw	r3,-76(fp)
80201c20:	e0bfe717 	ldw	r2,-100(fp)
80201c24:	18bf9d36 	bltu	r3,r2,80201a9c <__reset+0xfa1e1a9c>
			debug(fp, cDebugBuffer);
#endif
		}
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201c28:	00a008b4 	movhi	r2,32802
80201c2c:	10bb0604 	addi	r2,r2,-5096
80201c30:	00c00284 	movi	r3,10
80201c34:	10c00005 	stb	r3,0(r2)
80201c38:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201c3c:	012008b4 	movhi	r4,32802
80201c40:	213b0604 	addi	r4,r4,-5096
80201c44:	02068380 	call	80206838 <printf>
80201c48:	d0e02617 	ldw	r3,-32616(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
80201c4c:	e0bff117 	ldw	r2,-60(fp)
80201c50:	1885c83a 	sub	r2,r3,r2
80201c54:	e0bff015 	stw	r2,-64(fp)
	if (bSuccess) {
80201c58:	e0bfe517 	ldw	r2,-108(fp)
80201c5c:	10001c26 	beq	r2,zero,80201cd0 <bDdr2MemoryReadTest+0x44c>
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
80201c60:	e13ff017 	ldw	r4,-64(fp)
80201c64:	02062380 	call	80206238 <__floatsisf>
80201c68:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80201c6c:	d0a02517 	ldw	r2,-32620(gp)
80201c70:	1009883a 	mov	r4,r2
80201c74:	020635c0 	call	8020635c <__floatunsisf>
80201c78:	1007883a 	mov	r3,r2
80201c7c:	180b883a 	mov	r5,r3
80201c80:	8009883a 	mov	r4,r16
80201c84:	0205df80 	call	80205df8 <__divsf3>
80201c88:	1007883a 	mov	r3,r2
80201c8c:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
80201c90:	1009883a 	mov	r4,r2
80201c94:	020644c0 	call	8020644c <__extendsfdf2>
80201c98:	1009883a 	mov	r4,r2
80201c9c:	180b883a 	mov	r5,r3
80201ca0:	d9400015 	stw	r5,0(sp)
80201ca4:	200f883a 	mov	r7,r4
80201ca8:	e1bfe717 	ldw	r6,-100(fp)
80201cac:	016008b4 	movhi	r5,32802
80201cb0:	2970d804 	addi	r5,r5,-15520
80201cb4:	012008b4 	movhi	r4,32802
80201cb8:	213b0604 	addi	r4,r4,-5096
80201cbc:	02069a00 	call	802069a0 <sprintf>
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
80201cc0:	012008b4 	movhi	r4,32802
80201cc4:	213b0604 	addi	r4,r4,-5096
80201cc8:	02068380 	call	80206838 <printf>
80201ccc:	00000d06 	br	80201d04 <bDdr2MemoryReadTest+0x480>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
80201cd0:	00e008b4 	movhi	r3,32802
80201cd4:	18fb0604 	addi	r3,r3,-5096
80201cd8:	00a008b4 	movhi	r2,32802
80201cdc:	10b0e404 	addi	r2,r2,-15472
80201ce0:	1009883a 	mov	r4,r2
80201ce4:	00800544 	movi	r2,21
80201ce8:	100d883a 	mov	r6,r2
80201cec:	200b883a 	mov	r5,r4
80201cf0:	1809883a 	mov	r4,r3
80201cf4:	02066c00 	call	802066c0 <memcpy>
		debug(fp, cDebugBuffer);
80201cf8:	012008b4 	movhi	r4,32802
80201cfc:	213b0604 	addi	r4,r4,-5096
80201d00:	02068380 	call	80206838 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201d04:	00a008b4 	movhi	r2,32802
80201d08:	10bb0604 	addi	r2,r2,-5096
80201d0c:	00c00284 	movi	r3,10
80201d10:	10c00005 	stb	r3,0(r2)
80201d14:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201d18:	012008b4 	movhi	r4,32802
80201d1c:	213b0604 	addi	r4,r4,-5096
80201d20:	02068380 	call	80206838 <printf>
#endif

	return bSuccess;
80201d24:	e0bfe517 	ldw	r2,-108(fp)
}
80201d28:	e6fffe04 	addi	sp,fp,-8
80201d2c:	dfc00317 	ldw	ra,12(sp)
80201d30:	df000217 	ldw	fp,8(sp)
80201d34:	dc400117 	ldw	r17,4(sp)
80201d38:	dc000017 	ldw	r16,0(sp)
80201d3c:	dec00404 	addi	sp,sp,16
80201d40:	f800283a 	ret

80201d44 <bDdr2MemoryRandomWriteTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomWriteTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
80201d44:	deffec04 	addi	sp,sp,-80
80201d48:	dfc01315 	stw	ra,76(sp)
80201d4c:	df001215 	stw	fp,72(sp)
80201d50:	dcc01115 	stw	r19,68(sp)
80201d54:	dc801015 	stw	r18,64(sp)
80201d58:	dc400f15 	stw	r17,60(sp)
80201d5c:	dc000e15 	stw	r16,56(sp)
80201d60:	df001204 	addi	fp,sp,72
80201d64:	2005883a 	mov	r2,r4
80201d68:	e17ffa15 	stw	r5,-24(fp)
80201d6c:	e1bffb15 	stw	r6,-20(fp)
80201d70:	e0bff905 	stb	r2,-28(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Write Test =====\n");
80201d74:	00e008b4 	movhi	r3,32802
80201d78:	18fb0604 	addi	r3,r3,-5096
80201d7c:	00a008b4 	movhi	r2,32802
80201d80:	10b0ea04 	addi	r2,r2,-15448
80201d84:	1009883a 	mov	r4,r2
80201d88:	00800bc4 	movi	r2,47
80201d8c:	100d883a 	mov	r6,r2
80201d90:	200b883a 	mov	r5,r4
80201d94:	1809883a 	mov	r4,r3
80201d98:	02066c00 	call	802066c0 <memcpy>
	debug(fp, cDebugBuffer);
80201d9c:	012008b4 	movhi	r4,32802
80201da0:	213b0604 	addi	r4,r4,-5096
80201da4:	02068380 	call	80206838 <printf>
#endif
	bool bSuccess = FALSE;
80201da8:	e03fef15 	stw	zero,-68(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
80201dac:	e0bff903 	ldbu	r2,-28(fp)
80201db0:	10000326 	beq	r2,zero,80201dc0 <bDdr2MemoryRandomWriteTest+0x7c>
80201db4:	10800060 	cmpeqi	r2,r2,1
80201db8:	10000a1e 	bne	r2,zero,80201de4 <bDdr2MemoryRandomWriteTest+0xa0>
80201dbc:	00001206 	br	80201e08 <bDdr2MemoryRandomWriteTest+0xc4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
80201dc0:	e0bff903 	ldbu	r2,-28(fp)
80201dc4:	1009883a 	mov	r4,r2
80201dc8:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80201dcc:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
80201dd0:	00a00034 	movhi	r2,32768
80201dd4:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
80201dd8:	00800044 	movi	r2,1
80201ddc:	e0bfef15 	stw	r2,-68(fp)
		break;
80201de0:	00001906 	br	80201e48 <bDdr2MemoryRandomWriteTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
80201de4:	e0bff903 	ldbu	r2,-28(fp)
80201de8:	1009883a 	mov	r4,r2
80201dec:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80201df0:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
80201df4:	00a00034 	movhi	r2,32768
80201df8:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
80201dfc:	00800044 	movi	r2,1
80201e00:	e0bfef15 	stw	r2,-68(fp)
		break;
80201e04:	00001006 	br	80201e48 <bDdr2MemoryRandomWriteTest+0x104>
	default:
		bSuccess = FALSE;
80201e08:	e03fef15 	stw	zero,-68(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80201e0c:	00e008b4 	movhi	r3,32802
80201e10:	18fb0604 	addi	r3,r3,-5096
80201e14:	00a008b4 	movhi	r2,32802
80201e18:	10ae9b04 	addi	r2,r2,-17812
80201e1c:	1009883a 	mov	r4,r2
80201e20:	00800bc4 	movi	r2,47
80201e24:	100d883a 	mov	r6,r2
80201e28:	200b883a 	mov	r5,r4
80201e2c:	1809883a 	mov	r4,r3
80201e30:	02066c00 	call	802066c0 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
80201e34:	012008b4 	movhi	r4,32802
80201e38:	213b0604 	addi	r4,r4,-5096
80201e3c:	02068380 	call	80206838 <printf>
		;
#endif
		return bSuccess;
80201e40:	e0bfef17 	ldw	r2,-68(fp)
80201e44:	0000bc06 	br	80202138 <bDdr2MemoryRandomWriteTest+0x3f4>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
80201e48:	e0bff117 	ldw	r2,-60(fp)
80201e4c:	1004d53a 	srli	r2,r2,20
80201e50:	100d883a 	mov	r6,r2
80201e54:	016008b4 	movhi	r5,32802
80201e58:	29709404 	addi	r5,r5,-15792
80201e5c:	012008b4 	movhi	r4,32802
80201e60:	213b0604 	addi	r4,r4,-5096
80201e64:	02069a00 	call	802069a0 <sprintf>
	debug(fp, cDebugBuffer);
80201e68:	012008b4 	movhi	r4,32802
80201e6c:	213b0604 	addi	r4,r4,-5096
80201e70:	02068380 	call	80206838 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80201e74:	d0a02617 	ldw	r2,-32616(gp)
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliInitialState = alt_nticks();
80201e78:	d0a01315 	stw	r2,-32692(gp)
	uliCurrentState = uliInitialState;
80201e7c:	d0a01317 	ldw	r2,-32692(gp)
80201e80:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
80201e84:	e0fff017 	ldw	r3,-64(fp)
80201e88:	e0bff117 	ldw	r2,-60(fp)
80201e8c:	1885883a 	add	r2,r3,r2
80201e90:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
80201e94:	e0fff117 	ldw	r3,-60(fp)
80201e98:	00b33374 	movhi	r2,52429
80201e9c:	10b33344 	addi	r2,r2,-13107
80201ea0:	1888383a 	mulxuu	r4,r3,r2
80201ea4:	1885383a 	mul	r2,r3,r2
80201ea8:	1025883a 	mov	r18,r2
80201eac:	2027883a 	mov	r19,r4
80201eb0:	9806d13a 	srli	r3,r19,4
80201eb4:	e0bff017 	ldw	r2,-64(fp)
80201eb8:	1885883a 	add	r2,r3,r2
80201ebc:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
80201ec0:	00800144 	movi	r2,5
80201ec4:	e0bff405 	stb	r2,-48(fp)
#if DEBUG_ON
	sprintf(cDebugBuffer, "Writing to memory...\n");
80201ec8:	00e008b4 	movhi	r3,32802
80201ecc:	18fb0604 	addi	r3,r3,-5096
80201ed0:	00a008b4 	movhi	r2,32802
80201ed4:	10b0f604 	addi	r2,r2,-15400
80201ed8:	1009883a 	mov	r4,r2
80201edc:	00800584 	movi	r2,22
80201ee0:	100d883a 	mov	r6,r2
80201ee4:	200b883a 	mov	r5,r4
80201ee8:	1809883a 	mov	r4,r3
80201eec:	02066c00 	call	802066c0 <memcpy>
	debug(fp, cDebugBuffer);
80201ef0:	012008b4 	movhi	r4,32802
80201ef4:	213b0604 	addi	r4,r4,-5096
80201ef8:	02068380 	call	80206838 <printf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
80201efc:	e0bffa17 	ldw	r2,-24(fp)
80201f00:	10800058 	cmpnei	r2,r2,1
80201f04:	1000081e 	bne	r2,zero,80201f28 <bDdr2MemoryRandomWriteTest+0x1e4>
#if DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
80201f08:	016008b4 	movhi	r5,32802
80201f0c:	2970fc04 	addi	r5,r5,-15376
80201f10:	012008b4 	movhi	r4,32802
80201f14:	213b0604 	addi	r4,r4,-5096
80201f18:	02069a00 	call	802069a0 <sprintf>
		debug(fp, cDebugBuffer);
80201f1c:	012008b4 	movhi	r4,32802
80201f20:	213b0604 	addi	r4,r4,-5096
80201f24:	02068380 	call	80206838 <printf>
#endif
	}
	int TimeStart, TimeElapsed = 0;
80201f28:	e03ff615 	stw	zero,-40(fp)
80201f2c:	d0a02617 	ldw	r2,-32616(gp)

	TimeStart = alt_nticks();
80201f30:	e0bff715 	stw	r2,-36(fp)
	for (puliDestination = (alt_u32*) uliDdr2Base;
80201f34:	e0bff017 	ldw	r2,-64(fp)
80201f38:	e0bff215 	stw	r2,-56(fp)
80201f3c:	00002a06 	br	80201fe8 <bDdr2MemoryRandomWriteTest+0x2a4>
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
80201f40:	e0bff804 	addi	r2,fp,-32
80201f44:	1009883a 	mov	r4,r2
80201f48:	02025980 	call	80202598 <uliXorshift32>
80201f4c:	1007883a 	mov	r3,r2
80201f50:	e0bff217 	ldw	r2,-56(fp)
80201f54:	10c00015 	stw	r3,0(r2)
		if ((bVerbose == DDR2_VERBOSE)
				& ((alt_u32) puliDestination > uliNextMilestone)) {
80201f58:	e0bffa17 	ldw	r2,-24(fp)
80201f5c:	10800060 	cmpeqi	r2,r2,1
80201f60:	1009883a 	mov	r4,r2
80201f64:	e0bff217 	ldw	r2,-56(fp)
80201f68:	e0fff317 	ldw	r3,-52(fp)
80201f6c:	1885803a 	cmpltu	r2,r3,r2
80201f70:	2084703a 	and	r2,r4,r2
	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
		if ((bVerbose == DDR2_VERBOSE)
80201f74:	10803fcc 	andi	r2,r2,255
80201f78:	10001826 	beq	r2,zero,80201fdc <bDdr2MemoryRandomWriteTest+0x298>
				& ((alt_u32) puliDestination > uliNextMilestone)) {
#if DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
80201f7c:	e0bff403 	ldbu	r2,-48(fp)
80201f80:	100d883a 	mov	r6,r2
80201f84:	016008b4 	movhi	r5,32802
80201f88:	2970fe04 	addi	r5,r5,-15368
80201f8c:	012008b4 	movhi	r4,32802
80201f90:	213b0604 	addi	r4,r4,-5096
80201f94:	02069a00 	call	802069a0 <sprintf>
			debug(fp, cDebugBuffer);
80201f98:	012008b4 	movhi	r4,32802
80201f9c:	213b0604 	addi	r4,r4,-5096
80201fa0:	02068380 	call	80206838 <printf>
#endif
			uliNextMilestone += uliByteLen / 20;
80201fa4:	e0fff117 	ldw	r3,-60(fp)
80201fa8:	00b33374 	movhi	r2,52429
80201fac:	10b33344 	addi	r2,r2,-13107
80201fb0:	1888383a 	mulxuu	r4,r3,r2
80201fb4:	1885383a 	mul	r2,r3,r2
80201fb8:	1021883a 	mov	r16,r2
80201fbc:	2023883a 	mov	r17,r4
80201fc0:	8804d13a 	srli	r2,r17,4
80201fc4:	e0fff317 	ldw	r3,-52(fp)
80201fc8:	1885883a 	add	r2,r3,r2
80201fcc:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
80201fd0:	e0bff403 	ldbu	r2,-48(fp)
80201fd4:	10800144 	addi	r2,r2,5
80201fd8:	e0bff405 	stb	r2,-48(fp)
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
80201fdc:	e0bff217 	ldw	r2,-56(fp)
80201fe0:	10800104 	addi	r2,r2,4
80201fe4:	e0bff215 	stw	r2,-56(fp)
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
80201fe8:	e0fff217 	ldw	r3,-56(fp)
#endif
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
80201fec:	e0bff517 	ldw	r2,-44(fp)
80201ff0:	18bfd336 	bltu	r3,r2,80201f40 <__reset+0xfa1e1f40>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	alt_dcache_flush_all();
80201ff4:	02168580 	call	80216858 <alt_dcache_flush_all>
	if (bVerbose == DDR2_VERBOSE) {
80201ff8:	e0bffa17 	ldw	r2,-24(fp)
80201ffc:	10800058 	cmpnei	r2,r2,1
80202000:	1000081e 	bne	r2,zero,80202024 <bDdr2MemoryRandomWriteTest+0x2e0>
#if DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
80202004:	016008b4 	movhi	r5,32802
80202008:	29710104 	addi	r5,r5,-15356
8020200c:	012008b4 	movhi	r4,32802
80202010:	213b0604 	addi	r4,r4,-5096
80202014:	02069a00 	call	802069a0 <sprintf>
		debug(fp, cDebugBuffer);
80202018:	012008b4 	movhi	r4,32802
8020201c:	213b0604 	addi	r4,r4,-5096
80202020:	02068380 	call	80206838 <printf>
#endif
	}

	if (bSuccess) {
80202024:	e0bfef17 	ldw	r2,-68(fp)
80202028:	10002d26 	beq	r2,zero,802020e0 <bDdr2MemoryRandomWriteTest+0x39c>
		if (bTime == TRUE) {
8020202c:	e0bffb17 	ldw	r2,-20(fp)
80202030:	10800058 	cmpnei	r2,r2,1
80202034:	1000201e 	bne	r2,zero,802020b8 <bDdr2MemoryRandomWriteTest+0x374>
80202038:	d0e02617 	ldw	r3,-32616(gp)
			TimeElapsed = alt_nticks() - TimeStart;
8020203c:	e0bff717 	ldw	r2,-36(fp)
80202040:	1885c83a 	sub	r2,r3,r2
80202044:	e0bff615 	stw	r2,-40(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
80202048:	e13ff617 	ldw	r4,-40(fp)
8020204c:	02062380 	call	80206238 <__floatsisf>
80202050:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80202054:	d0a02517 	ldw	r2,-32620(gp)
80202058:	1009883a 	mov	r4,r2
8020205c:	020635c0 	call	8020635c <__floatunsisf>
80202060:	1007883a 	mov	r3,r2
80202064:	180b883a 	mov	r5,r3
80202068:	8009883a 	mov	r4,r16
8020206c:	0205df80 	call	80205df8 <__divsf3>
80202070:	1007883a 	mov	r3,r2
80202074:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#if DEBUG_ON
			sprintf(cDebugBuffer,
80202078:	1009883a 	mov	r4,r2
8020207c:	020644c0 	call	8020644c <__extendsfdf2>
80202080:	1009883a 	mov	r4,r2
80202084:	180b883a 	mov	r5,r3
80202088:	d9400015 	stw	r5,0(sp)
8020208c:	200f883a 	mov	r7,r4
80202090:	e1bff117 	ldw	r6,-60(fp)
80202094:	016008b4 	movhi	r5,32802
80202098:	29710404 	addi	r5,r5,-15344
8020209c:	012008b4 	movhi	r4,32802
802020a0:	213b0604 	addi	r4,r4,-5096
802020a4:	02069a00 	call	802069a0 <sprintf>
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
802020a8:	012008b4 	movhi	r4,32802
802020ac:	213b0604 	addi	r4,r4,-5096
802020b0:	02068380 	call	80206838 <printf>
802020b4:	00001706 	br	80202114 <bDdr2MemoryRandomWriteTest+0x3d0>
#endif
		} else {
#if DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 write test pass, size=%ld bytes\n",
802020b8:	e1bff117 	ldw	r6,-60(fp)
802020bc:	016008b4 	movhi	r5,32802
802020c0:	29711004 	addi	r5,r5,-15296
802020c4:	012008b4 	movhi	r4,32802
802020c8:	213b0604 	addi	r4,r4,-5096
802020cc:	02069a00 	call	802069a0 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
802020d0:	012008b4 	movhi	r4,32802
802020d4:	213b0604 	addi	r4,r4,-5096
802020d8:	02068380 	call	80206838 <printf>
802020dc:	00000d06 	br	80202114 <bDdr2MemoryRandomWriteTest+0x3d0>
#endif
		}
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
802020e0:	00e008b4 	movhi	r3,32802
802020e4:	18fb0604 	addi	r3,r3,-5096
802020e8:	00a008b4 	movhi	r2,32802
802020ec:	10b0ad04 	addi	r2,r2,-15692
802020f0:	1009883a 	mov	r4,r2
802020f4:	00800584 	movi	r2,22
802020f8:	100d883a 	mov	r6,r2
802020fc:	200b883a 	mov	r5,r4
80202100:	1809883a 	mov	r4,r3
80202104:	02066c00 	call	802066c0 <memcpy>
		debug(fp, cDebugBuffer);
80202108:	012008b4 	movhi	r4,32802
8020210c:	213b0604 	addi	r4,r4,-5096
80202110:	02068380 	call	80206838 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80202114:	00a008b4 	movhi	r2,32802
80202118:	10bb0604 	addi	r2,r2,-5096
8020211c:	00c00284 	movi	r3,10
80202120:	10c00005 	stb	r3,0(r2)
80202124:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80202128:	012008b4 	movhi	r4,32802
8020212c:	213b0604 	addi	r4,r4,-5096
80202130:	02068380 	call	80206838 <printf>
#endif

	return bSuccess;
80202134:	e0bfef17 	ldw	r2,-68(fp)
}
80202138:	e6fffc04 	addi	sp,fp,-16
8020213c:	dfc00517 	ldw	ra,20(sp)
80202140:	df000417 	ldw	fp,16(sp)
80202144:	dcc00317 	ldw	r19,12(sp)
80202148:	dc800217 	ldw	r18,8(sp)
8020214c:	dc400117 	ldw	r17,4(sp)
80202150:	dc000017 	ldw	r16,0(sp)
80202154:	dec00604 	addi	sp,sp,24
80202158:	f800283a 	ret

8020215c <bDdr2MemoryRandomReadTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomReadTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
8020215c:	deffec04 	addi	sp,sp,-80
80202160:	dfc01315 	stw	ra,76(sp)
80202164:	df001215 	stw	fp,72(sp)
80202168:	dcc01115 	stw	r19,68(sp)
8020216c:	dc801015 	stw	r18,64(sp)
80202170:	dc400f15 	stw	r17,60(sp)
80202174:	dc000e15 	stw	r16,56(sp)
80202178:	df001204 	addi	fp,sp,72
8020217c:	2005883a 	mov	r2,r4
80202180:	e17ffa15 	stw	r5,-24(fp)
80202184:	e1bffb15 	stw	r6,-20(fp)
80202188:	e0bff905 	stb	r2,-28(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Read Test =====\n");
8020218c:	00e008b4 	movhi	r3,32802
80202190:	18fb0604 	addi	r3,r3,-5096
80202194:	00a008b4 	movhi	r2,32802
80202198:	10b11a04 	addi	r2,r2,-15256
8020219c:	1009883a 	mov	r4,r2
802021a0:	00800b84 	movi	r2,46
802021a4:	100d883a 	mov	r6,r2
802021a8:	200b883a 	mov	r5,r4
802021ac:	1809883a 	mov	r4,r3
802021b0:	02066c00 	call	802066c0 <memcpy>
	debug(fp, cDebugBuffer);
802021b4:	012008b4 	movhi	r4,32802
802021b8:	213b0604 	addi	r4,r4,-5096
802021bc:	02068380 	call	80206838 <printf>
#endif
	bool bSuccess = FALSE;
802021c0:	e03fef15 	stw	zero,-68(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
802021c4:	e0bff903 	ldbu	r2,-28(fp)
802021c8:	10000326 	beq	r2,zero,802021d8 <bDdr2MemoryRandomReadTest+0x7c>
802021cc:	10800060 	cmpeqi	r2,r2,1
802021d0:	10000a1e 	bne	r2,zero,802021fc <bDdr2MemoryRandomReadTest+0xa0>
802021d4:	00001206 	br	80202220 <bDdr2MemoryRandomReadTest+0xc4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
802021d8:	e0bff903 	ldbu	r2,-28(fp)
802021dc:	1009883a 	mov	r4,r2
802021e0:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802021e4:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
802021e8:	00a00034 	movhi	r2,32768
802021ec:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
802021f0:	00800044 	movi	r2,1
802021f4:	e0bfef15 	stw	r2,-68(fp)
		break;
802021f8:	00001906 	br	80202260 <bDdr2MemoryRandomReadTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
802021fc:	e0bff903 	ldbu	r2,-28(fp)
80202200:	1009883a 	mov	r4,r2
80202204:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80202208:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
8020220c:	00a00034 	movhi	r2,32768
80202210:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
80202214:	00800044 	movi	r2,1
80202218:	e0bfef15 	stw	r2,-68(fp)
		break;
8020221c:	00001006 	br	80202260 <bDdr2MemoryRandomReadTest+0x104>
	default:
		bSuccess = FALSE;
80202220:	e03fef15 	stw	zero,-68(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80202224:	00e008b4 	movhi	r3,32802
80202228:	18fb0604 	addi	r3,r3,-5096
8020222c:	00a008b4 	movhi	r2,32802
80202230:	10ae9b04 	addi	r2,r2,-17812
80202234:	1009883a 	mov	r4,r2
80202238:	00800bc4 	movi	r2,47
8020223c:	100d883a 	mov	r6,r2
80202240:	200b883a 	mov	r5,r4
80202244:	1809883a 	mov	r4,r3
80202248:	02066c00 	call	802066c0 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
8020224c:	012008b4 	movhi	r4,32802
80202250:	213b0604 	addi	r4,r4,-5096
80202254:	02068380 	call	80206838 <printf>
		;
#endif
		return bSuccess;
80202258:	e0bfef17 	ldw	r2,-68(fp)
8020225c:	0000c506 	br	80202574 <bDdr2MemoryRandomReadTest+0x418>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
80202260:	e0bff117 	ldw	r2,-60(fp)
80202264:	1004d53a 	srli	r2,r2,20
80202268:	100d883a 	mov	r6,r2
8020226c:	016008b4 	movhi	r5,32802
80202270:	29709404 	addi	r5,r5,-15792
80202274:	012008b4 	movhi	r4,32802
80202278:	213b0604 	addi	r4,r4,-5096
8020227c:	02069a00 	call	802069a0 <sprintf>
	debug(fp, cDebugBuffer);
80202280:	012008b4 	movhi	r4,32802
80202284:	213b0604 	addi	r4,r4,-5096
80202288:	02068380 	call	80206838 <printf>
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliCurrentState = uliInitialState;
8020228c:	d0a01317 	ldw	r2,-32692(gp)
80202290:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
80202294:	e0fff017 	ldw	r3,-64(fp)
80202298:	e0bff117 	ldw	r2,-60(fp)
8020229c:	1885883a 	add	r2,r3,r2
802022a0:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
802022a4:	e0fff117 	ldw	r3,-60(fp)
802022a8:	00b33374 	movhi	r2,52429
802022ac:	10b33344 	addi	r2,r2,-13107
802022b0:	1888383a 	mulxuu	r4,r3,r2
802022b4:	1885383a 	mul	r2,r3,r2
802022b8:	1025883a 	mov	r18,r2
802022bc:	2027883a 	mov	r19,r4
802022c0:	9806d13a 	srli	r3,r19,4
802022c4:	e0bff017 	ldw	r2,-64(fp)
802022c8:	1885883a 	add	r2,r3,r2
802022cc:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
802022d0:	00800144 	movi	r2,5
802022d4:	e0bff405 	stb	r2,-48(fp)
#if DEBUG_ON
	sprintf(cDebugBuffer, "Reading from memory...\n");
802022d8:	00e008b4 	movhi	r3,32802
802022dc:	18fb0604 	addi	r3,r3,-5096
802022e0:	00a008b4 	movhi	r2,32802
802022e4:	10b12604 	addi	r2,r2,-15208
802022e8:	1009883a 	mov	r4,r2
802022ec:	00800604 	movi	r2,24
802022f0:	100d883a 	mov	r6,r2
802022f4:	200b883a 	mov	r5,r4
802022f8:	1809883a 	mov	r4,r3
802022fc:	02066c00 	call	802066c0 <memcpy>
	debug(fp, cDebugBuffer);
80202300:	012008b4 	movhi	r4,32802
80202304:	213b0604 	addi	r4,r4,-5096
80202308:	02068380 	call	80206838 <printf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
8020230c:	e0bffa17 	ldw	r2,-24(fp)
80202310:	10800058 	cmpnei	r2,r2,1
80202314:	1000081e 	bne	r2,zero,80202338 <bDdr2MemoryRandomReadTest+0x1dc>
#if DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
80202318:	016008b4 	movhi	r5,32802
8020231c:	2970fc04 	addi	r5,r5,-15376
80202320:	012008b4 	movhi	r4,32802
80202324:	213b0604 	addi	r4,r4,-5096
80202328:	02069a00 	call	802069a0 <sprintf>
		debug(fp, cDebugBuffer);
8020232c:	012008b4 	movhi	r4,32802
80202330:	213b0604 	addi	r4,r4,-5096
80202334:	02068380 	call	80206838 <printf>
#endif
	}

	int TimeStart, TimeElapsed = 0;
80202338:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8020233c:	d0a02617 	ldw	r2,-32616(gp)

	TimeStart = alt_nticks();
80202340:	e0bff715 	stw	r2,-36(fp)
	for (puliSource = (alt_u32*) uliDdr2Base;
80202344:	e0bff017 	ldw	r2,-64(fp)
80202348:	e0bff215 	stw	r2,-56(fp)
8020234c:	00003606 	br	80202428 <bDdr2MemoryRandomReadTest+0x2cc>
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
		if (uliXorshift32(&uliCurrentState) != *puliSource) {
80202350:	e0bff804 	addi	r2,fp,-32
80202354:	1009883a 	mov	r4,r2
80202358:	02025980 	call	80202598 <uliXorshift32>
8020235c:	1007883a 	mov	r3,r2
80202360:	e0bff217 	ldw	r2,-56(fp)
80202364:	10800017 	ldw	r2,0(r2)
80202368:	18800e26 	beq	r3,r2,802023a4 <bDdr2MemoryRandomReadTest+0x248>
			bSuccess = FALSE;
8020236c:	e03fef15 	stw	zero,-68(fp)
			if (bVerbose == DDR2_VERBOSE) {
80202370:	e0bffa17 	ldw	r2,-24(fp)
80202374:	10800058 	cmpnei	r2,r2,1
80202378:	10000a1e 	bne	r2,zero,802023a4 <bDdr2MemoryRandomReadTest+0x248>
#if DEBUG_ON
				sprintf(cDebugBuffer, "Failed to read adress 0x%08lX\n",
8020237c:	e0bff217 	ldw	r2,-56(fp)
80202380:	100d883a 	mov	r6,r2
80202384:	016008b4 	movhi	r5,32802
80202388:	29712c04 	addi	r5,r5,-15184
8020238c:	012008b4 	movhi	r4,32802
80202390:	213b0604 	addi	r4,r4,-5096
80202394:	02069a00 	call	802069a0 <sprintf>
						(alt_u32)puliSource);
				debug(fp, cDebugBuffer);
80202398:	012008b4 	movhi	r4,32802
8020239c:	213b0604 	addi	r4,r4,-5096
802023a0:	02068380 	call	80206838 <printf>
#endif
			}
		}
		if ((bVerbose == DDR2_VERBOSE)
802023a4:	e0bffa17 	ldw	r2,-24(fp)
802023a8:	10800058 	cmpnei	r2,r2,1
802023ac:	10001b1e 	bne	r2,zero,8020241c <bDdr2MemoryRandomReadTest+0x2c0>
				&& ((alt_u32) puliSource > uliNextMilestone)) {
802023b0:	e0bff217 	ldw	r2,-56(fp)
802023b4:	e0fff317 	ldw	r3,-52(fp)
802023b8:	1880182e 	bgeu	r3,r2,8020241c <bDdr2MemoryRandomReadTest+0x2c0>
#if DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
802023bc:	e0bff403 	ldbu	r2,-48(fp)
802023c0:	100d883a 	mov	r6,r2
802023c4:	016008b4 	movhi	r5,32802
802023c8:	2970fe04 	addi	r5,r5,-15368
802023cc:	012008b4 	movhi	r4,32802
802023d0:	213b0604 	addi	r4,r4,-5096
802023d4:	02069a00 	call	802069a0 <sprintf>
			debug(fp, cDebugBuffer);
802023d8:	012008b4 	movhi	r4,32802
802023dc:	213b0604 	addi	r4,r4,-5096
802023e0:	02068380 	call	80206838 <printf>
#endif
			uliNextMilestone += uliByteLen / 20;
802023e4:	e0fff117 	ldw	r3,-60(fp)
802023e8:	00b33374 	movhi	r2,52429
802023ec:	10b33344 	addi	r2,r2,-13107
802023f0:	1888383a 	mulxuu	r4,r3,r2
802023f4:	1885383a 	mul	r2,r3,r2
802023f8:	1021883a 	mov	r16,r2
802023fc:	2023883a 	mov	r17,r4
80202400:	8804d13a 	srli	r2,r17,4
80202404:	e0fff317 	ldw	r3,-52(fp)
80202408:	1885883a 	add	r2,r3,r2
8020240c:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
80202410:	e0bff403 	ldbu	r2,-48(fp)
80202414:	10800144 	addi	r2,r2,5
80202418:	e0bff405 	stb	r2,-48(fp)

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
8020241c:	e0bff217 	ldw	r2,-56(fp)
80202420:	10800104 	addi	r2,r2,4
80202424:	e0bff215 	stw	r2,-56(fp)
80202428:	e0fff217 	ldw	r3,-56(fp)
	}

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
8020242c:	e0bff517 	ldw	r2,-44(fp)
80202430:	18bfc736 	bltu	r3,r2,80202350 <__reset+0xfa1e2350>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	if (bVerbose == DDR2_VERBOSE) {
80202434:	e0bffa17 	ldw	r2,-24(fp)
80202438:	10800058 	cmpnei	r2,r2,1
8020243c:	1000081e 	bne	r2,zero,80202460 <bDdr2MemoryRandomReadTest+0x304>
#if DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
80202440:	016008b4 	movhi	r5,32802
80202444:	29710104 	addi	r5,r5,-15356
80202448:	012008b4 	movhi	r4,32802
8020244c:	213b0604 	addi	r4,r4,-5096
80202450:	02069a00 	call	802069a0 <sprintf>
		debug(fp, cDebugBuffer);
80202454:	012008b4 	movhi	r4,32802
80202458:	213b0604 	addi	r4,r4,-5096
8020245c:	02068380 	call	80206838 <printf>
#endif
	}

	if (bSuccess) {
80202460:	e0bfef17 	ldw	r2,-68(fp)
80202464:	10002d26 	beq	r2,zero,8020251c <bDdr2MemoryRandomReadTest+0x3c0>
		if (bTime == TRUE) {
80202468:	e0bffb17 	ldw	r2,-20(fp)
8020246c:	10800058 	cmpnei	r2,r2,1
80202470:	1000201e 	bne	r2,zero,802024f4 <bDdr2MemoryRandomReadTest+0x398>
80202474:	d0e02617 	ldw	r3,-32616(gp)
			TimeElapsed = alt_nticks() - TimeStart;
80202478:	e0bff717 	ldw	r2,-36(fp)
8020247c:	1885c83a 	sub	r2,r3,r2
80202480:	e0bff615 	stw	r2,-40(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
80202484:	e13ff617 	ldw	r4,-40(fp)
80202488:	02062380 	call	80206238 <__floatsisf>
8020248c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80202490:	d0a02517 	ldw	r2,-32620(gp)
80202494:	1009883a 	mov	r4,r2
80202498:	020635c0 	call	8020635c <__floatunsisf>
8020249c:	1007883a 	mov	r3,r2
802024a0:	180b883a 	mov	r5,r3
802024a4:	8009883a 	mov	r4,r16
802024a8:	0205df80 	call	80205df8 <__divsf3>
802024ac:	1007883a 	mov	r3,r2
802024b0:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#if DEBUG_ON
			sprintf(cDebugBuffer,
802024b4:	1009883a 	mov	r4,r2
802024b8:	020644c0 	call	8020644c <__extendsfdf2>
802024bc:	1009883a 	mov	r4,r2
802024c0:	180b883a 	mov	r5,r3
802024c4:	d9400015 	stw	r5,0(sp)
802024c8:	200f883a 	mov	r7,r4
802024cc:	e1bff117 	ldw	r6,-60(fp)
802024d0:	016008b4 	movhi	r5,32802
802024d4:	29713404 	addi	r5,r5,-15152
802024d8:	012008b4 	movhi	r4,32802
802024dc:	213b0604 	addi	r4,r4,-5096
802024e0:	02069a00 	call	802069a0 <sprintf>
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
802024e4:	012008b4 	movhi	r4,32802
802024e8:	213b0604 	addi	r4,r4,-5096
802024ec:	02068380 	call	80206838 <printf>
802024f0:	00001706 	br	80202550 <bDdr2MemoryRandomReadTest+0x3f4>
#endif
		} else {
#if DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 read test pass, size=%lu bytes\n",
802024f4:	e1bff117 	ldw	r6,-60(fp)
802024f8:	016008b4 	movhi	r5,32802
802024fc:	29714004 	addi	r5,r5,-15104
80202500:	012008b4 	movhi	r4,32802
80202504:	213b0604 	addi	r4,r4,-5096
80202508:	02069a00 	call	802069a0 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
8020250c:	012008b4 	movhi	r4,32802
80202510:	213b0604 	addi	r4,r4,-5096
80202514:	02068380 	call	80206838 <printf>
80202518:	00000d06 	br	80202550 <bDdr2MemoryRandomReadTest+0x3f4>
#endif
		}
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
8020251c:	00e008b4 	movhi	r3,32802
80202520:	18fb0604 	addi	r3,r3,-5096
80202524:	00a008b4 	movhi	r2,32802
80202528:	10b0e404 	addi	r2,r2,-15472
8020252c:	1009883a 	mov	r4,r2
80202530:	00800544 	movi	r2,21
80202534:	100d883a 	mov	r6,r2
80202538:	200b883a 	mov	r5,r4
8020253c:	1809883a 	mov	r4,r3
80202540:	02066c00 	call	802066c0 <memcpy>
		debug(fp, cDebugBuffer);
80202544:	012008b4 	movhi	r4,32802
80202548:	213b0604 	addi	r4,r4,-5096
8020254c:	02068380 	call	80206838 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80202550:	00a008b4 	movhi	r2,32802
80202554:	10bb0604 	addi	r2,r2,-5096
80202558:	00c00284 	movi	r3,10
8020255c:	10c00005 	stb	r3,0(r2)
80202560:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80202564:	012008b4 	movhi	r4,32802
80202568:	213b0604 	addi	r4,r4,-5096
8020256c:	02068380 	call	80206838 <printf>
#endif

	return bSuccess;
80202570:	e0bfef17 	ldw	r2,-68(fp)
}
80202574:	e6fffc04 	addi	sp,fp,-16
80202578:	dfc00517 	ldw	ra,20(sp)
8020257c:	df000417 	ldw	fp,16(sp)
80202580:	dcc00317 	ldw	r19,12(sp)
80202584:	dc800217 	ldw	r18,8(sp)
80202588:	dc400117 	ldw	r17,4(sp)
8020258c:	dc000017 	ldw	r16,0(sp)
80202590:	dec00604 	addi	sp,sp,24
80202594:	f800283a 	ret

80202598 <uliXorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
 *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 uliXorshift32(alt_u32 *puliState) {
80202598:	defffd04 	addi	sp,sp,-12
8020259c:	df000215 	stw	fp,8(sp)
802025a0:	df000204 	addi	fp,sp,8
802025a4:	e13fff15 	stw	r4,-4(fp)

	alt_u32 uliX = *puliState;
802025a8:	e0bfff17 	ldw	r2,-4(fp)
802025ac:	10800017 	ldw	r2,0(r2)
802025b0:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 13;
802025b4:	e0bffe17 	ldw	r2,-8(fp)
802025b8:	1004937a 	slli	r2,r2,13
802025bc:	e0fffe17 	ldw	r3,-8(fp)
802025c0:	1884f03a 	xor	r2,r3,r2
802025c4:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX >> 17;
802025c8:	e0bffe17 	ldw	r2,-8(fp)
802025cc:	1004d47a 	srli	r2,r2,17
802025d0:	e0fffe17 	ldw	r3,-8(fp)
802025d4:	1884f03a 	xor	r2,r3,r2
802025d8:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 5;
802025dc:	e0bffe17 	ldw	r2,-8(fp)
802025e0:	1004917a 	slli	r2,r2,5
802025e4:	e0fffe17 	ldw	r3,-8(fp)
802025e8:	1884f03a 	xor	r2,r3,r2
802025ec:	e0bffe15 	stw	r2,-8(fp)
	*puliState = uliX;
802025f0:	e0bfff17 	ldw	r2,-4(fp)
802025f4:	e0fffe17 	ldw	r3,-8(fp)
802025f8:	10c00015 	stw	r3,0(r2)

	return uliX;
802025fc:	e0bffe17 	ldw	r2,-8(fp)
}
80202600:	e037883a 	mov	sp,fp
80202604:	df000017 	ldw	fp,0(sp)
80202608:	dec00104 	addi	sp,sp,4
8020260c:	f800283a 	ret

80202610 <bSdmaInitM1Dma>:
alt_msgdma_dev *pxDmaM1Dev = NULL;
alt_msgdma_dev *pxDmaM2Dev = NULL;
//! [data memory public global variables]

//! [public functions]
bool bSdmaInitM1Dma(void) {
80202610:	defffb04 	addi	sp,sp,-20
80202614:	dfc00415 	stw	ra,16(sp)
80202618:	df000315 	stw	fp,12(sp)
8020261c:	df000304 	addi	fp,sp,12
	bool bStatus = FALSE;
80202620:	e03ffd15 	stw	zero,-12(fp)
	bool bFailDispatcher = FALSE;
80202624:	e03ffe15 	stw	zero,-8(fp)
	alt_u16 usiCounter = 0;
80202628:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM1Dev = alt_msgdma_open((char *) SDMA_DMA_M1_NAME);
8020262c:	012008b4 	movhi	r4,32802
80202630:	21314a04 	addi	r4,r4,-15064
80202634:	021a3b80 	call	8021a3b8 <alt_msgdma_open>
80202638:	d0a01415 	stw	r2,-32688(gp)

	// check if the device was opened
	if (pxDmaM1Dev != NULL) {
8020263c:	d0a01417 	ldw	r2,-32688(gp)
80202640:	10001a26 	beq	r2,zero,802026ac <bSdmaInitM1Dma+0x9c>
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
80202644:	d0a01417 	ldw	r2,-32688(gp)
80202648:	10800317 	ldw	r2,12(r2)
8020264c:	10800104 	addi	r2,r2,4
80202650:	00c00084 	movi	r3,2
80202654:	10c00035 	stwio	r3,0(r2)
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202658:	00000b06 	br	80202688 <bSdmaInitM1Dma+0x78>
			usleep(1);
8020265c:	01000044 	movi	r4,1
80202660:	02170340 	call	80217034 <usleep>
			usiCounter++;
80202664:	e0bfff0b 	ldhu	r2,-4(fp)
80202668:	10800044 	addi	r2,r2,1
8020266c:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
80202670:	e0bfff0b 	ldhu	r2,-4(fp)
80202674:	1084e230 	cmpltui	r2,r2,5000
80202678:	1000031e 	bne	r2,zero,80202688 <bSdmaInitM1Dma+0x78>
				bFailDispatcher = TRUE;
8020267c:	00800044 	movi	r2,1
80202680:	e0bffe15 	stw	r2,-8(fp)
				break;
80202684:	00000506 	br	8020269c <bSdmaInitM1Dma+0x8c>
	// check if the device was opened
	if (pxDmaM1Dev != NULL) {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202688:	d0a01417 	ldw	r2,-32688(gp)
8020268c:	10800317 	ldw	r2,12(r2)
80202690:	10800037 	ldwio	r2,0(r2)
80202694:	1080100c 	andi	r2,r2,64
80202698:	103ff01e 	bne	r2,zero,8020265c <__reset+0xfa1e265c>
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
				bFailDispatcher = TRUE;
				break;
			}
		}
		if (bFailDispatcher == FALSE)
8020269c:	e0bffe17 	ldw	r2,-8(fp)
802026a0:	1000021e 	bne	r2,zero,802026ac <bSdmaInitM1Dma+0x9c>
			bStatus = TRUE;
802026a4:	00800044 	movi	r2,1
802026a8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
802026ac:	e0bffd17 	ldw	r2,-12(fp)
}
802026b0:	e037883a 	mov	sp,fp
802026b4:	dfc00117 	ldw	ra,4(sp)
802026b8:	df000017 	ldw	fp,0(sp)
802026bc:	dec00204 	addi	sp,sp,8
802026c0:	f800283a 	ret

802026c4 <bSdmaInitM2Dma>:

bool bSdmaInitM2Dma(void) {
802026c4:	defffb04 	addi	sp,sp,-20
802026c8:	dfc00415 	stw	ra,16(sp)
802026cc:	df000315 	stw	fp,12(sp)
802026d0:	df000304 	addi	fp,sp,12
	bool bStatus = FALSE;
802026d4:	e03ffd15 	stw	zero,-12(fp)
	bool bFailDispatcher = FALSE;
802026d8:	e03ffe15 	stw	zero,-8(fp)
	alt_u16 usiCounter = 0;
802026dc:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM2Dev = alt_msgdma_open((char *) SDMA_DMA_M2_NAME);
802026e0:	012008b4 	movhi	r4,32802
802026e4:	21314f04 	addi	r4,r4,-15044
802026e8:	021a3b80 	call	8021a3b8 <alt_msgdma_open>
802026ec:	d0a01515 	stw	r2,-32684(gp)

	// check if the device was opened
	if (pxDmaM2Dev == NULL) {
802026f0:	d0a01517 	ldw	r2,-32684(gp)
802026f4:	1000021e 	bne	r2,zero,80202700 <bSdmaInitM2Dma+0x3c>
		// device not opened
		bStatus = FALSE;
802026f8:	e03ffd15 	stw	zero,-12(fp)
802026fc:	00001a06 	br	80202768 <bSdmaInitM2Dma+0xa4>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
80202700:	d0a01517 	ldw	r2,-32684(gp)
80202704:	10800317 	ldw	r2,12(r2)
80202708:	10800104 	addi	r2,r2,4
8020270c:	00c00084 	movi	r3,2
80202710:	10c00035 	stwio	r3,0(r2)
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202714:	00000b06 	br	80202744 <bSdmaInitM2Dma+0x80>
			usleep(1);
80202718:	01000044 	movi	r4,1
8020271c:	02170340 	call	80217034 <usleep>
			usiCounter++;
80202720:	e0bfff0b 	ldhu	r2,-4(fp)
80202724:	10800044 	addi	r2,r2,1
80202728:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
8020272c:	e0bfff0b 	ldhu	r2,-4(fp)
80202730:	1084e230 	cmpltui	r2,r2,5000
80202734:	1000031e 	bne	r2,zero,80202744 <bSdmaInitM2Dma+0x80>
				bFailDispatcher = TRUE;
80202738:	00800044 	movi	r2,1
8020273c:	e0bffe15 	stw	r2,-8(fp)
				break;
80202740:	00000506 	br	80202758 <bSdmaInitM2Dma+0x94>
		bStatus = FALSE;
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202744:	d0a01517 	ldw	r2,-32684(gp)
80202748:	10800317 	ldw	r2,12(r2)
8020274c:	10800037 	ldwio	r2,0(r2)
80202750:	1080100c 	andi	r2,r2,64
80202754:	103ff01e 	bne	r2,zero,80202718 <__reset+0xfa1e2718>
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
				bFailDispatcher = TRUE;
				break;
			}
		}
		if (bFailDispatcher == FALSE)
80202758:	e0bffe17 	ldw	r2,-8(fp)
8020275c:	1000021e 	bne	r2,zero,80202768 <bSdmaInitM2Dma+0xa4>
			bStatus = TRUE;
80202760:	00800044 	movi	r2,1
80202764:	e0bffd15 	stw	r2,-12(fp)
	}
	return bStatus;
80202768:	e0bffd17 	ldw	r2,-12(fp)
}
8020276c:	e037883a 	mov	sp,fp
80202770:	dfc00117 	ldw	ra,4(sp)
80202774:	df000017 	ldw	fp,0(sp)
80202778:	dec00204 	addi	sp,sp,8
8020277c:	f800283a 	ret

80202780 <bSdmaDmaM1Transfer>:

bool bSdmaDmaM1Transfer(alt_u32 *uliDdrInitialAddr, alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide, alt_u8 ucChBufferId) {
80202780:	deffe604 	addi	sp,sp,-104
80202784:	dfc01915 	stw	ra,100(sp)
80202788:	df001815 	stw	fp,96(sp)
8020278c:	dc001715 	stw	r16,92(sp)
80202790:	df001804 	addi	fp,sp,96
80202794:	e13ffb15 	stw	r4,-20(fp)
80202798:	2809883a 	mov	r4,r5
8020279c:	3007883a 	mov	r3,r6
802027a0:	3805883a 	mov	r2,r7
802027a4:	e13ffc0d 	sth	r4,-16(fp)
802027a8:	e0fffd05 	stb	r3,-12(fp)
802027ac:	e0bffe05 	stb	r2,-8(fp)
802027b0:	defff004 	addi	sp,sp,-64
802027b4:	d8800904 	addi	r2,sp,36
802027b8:	108007c4 	addi	r2,r2,31
802027bc:	1004d17a 	srli	r2,r2,5
802027c0:	1020917a 	slli	r16,r2,5
	bool bStatus;

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
802027c4:	e03ff215 	stw	zero,-56(fp)
	alt_u32 uliDestAddrHigh = 0;
802027c8:	e03ff315 	stw	zero,-52(fp)

	alt_u32 uliSrcAddrLow = 0;
802027cc:	e03ff715 	stw	zero,-36(fp)
	alt_u32 uliSrcAddrHigh = 0;
802027d0:	e03ff815 	stw	zero,-32(fp)

	alt_u32 uliControlBits = 0x00000000;
802027d4:	e03ff915 	stw	zero,-28(fp)
	bool bBufferEmptyFlag;
	bool bChannelFlag;
	bool bAddressFlag = FALSE;
802027d8:	e03ff515 	stw	zero,-44(fp)

	alt_u16 usiRoundedTransferSizeInBytes = 0;
802027dc:	e03ff60d 	sth	zero,-40(fp)

	/* Assuming that the channel selected exist, change to FALSE if doesn't */
	bChannelFlag = TRUE;
802027e0:	00800044 	movi	r2,1
802027e4:	e0bff415 	stw	r2,-48(fp)
	bStatus = FALSE;
802027e8:	e03ff115 	stw	zero,-60(fp)
	bBufferEmptyFlag = FALSE;
802027ec:	e03ffa15 	stw	zero,-24(fp)
	switch (ucChBufferId) {
802027f0:	e0bffe03 	ldbu	r2,-8(fp)
802027f4:	10c00228 	cmpgeui	r3,r2,8
802027f8:	1800a41e 	bne	r3,zero,80202a8c <bSdmaDmaM1Transfer+0x30c>
802027fc:	100690ba 	slli	r3,r2,2
80202800:	00a00834 	movhi	r2,32800
80202804:	108a0504 	addi	r2,r2,10260
80202808:	1885883a 	add	r2,r3,r2
8020280c:	10800017 	ldw	r2,0(r2)
80202810:	1000683a 	jmp	r2
80202814:	80202834 	orhi	zero,r16,32928
80202818:	80202878 	rdprs	zero,r16,-32607
8020281c:	802028c4 	addi	zero,r16,-32605
80202820:	80202910 	cmplti	zero,r16,-32604
80202824:	8020295c 	xori	zero,r16,32933
80202828:	802029a8 	cmpgeui	zero,r16,32934
8020282c:	802029f4 	orhi	zero,r16,32935
80202830:	80202a40 	call	880202a4 <__reset+0x20002a4>
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
80202834:	e0bffd03 	ldbu	r2,-12(fp)
80202838:	10000726 	beq	r2,zero,80202858 <bSdmaDmaM1Transfer+0xd8>
8020283c:	10800060 	cmpeqi	r2,r2,1
80202840:	10000926 	beq	r2,zero,80202868 <bSdmaDmaM1Transfer+0xe8>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
80202844:	00a00014 	movui	r2,32768
80202848:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
8020284c:	00800044 	movi	r2,1
80202850:	e0bff315 	stw	r2,-52(fp)
			break;
80202854:	00000706 	br	80202874 <bSdmaDmaM1Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
80202858:	e03ff215 	stw	zero,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
8020285c:	00800044 	movi	r2,1
80202860:	e0bff315 	stw	r2,-52(fp)
			break;
80202864:	00000306 	br	80202874 <bSdmaDmaM1Transfer+0xf4>
		default:
			bChannelFlag = FALSE;
80202868:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
8020286c:	e03ffa15 	stw	zero,-24(fp)
			break;
80202870:	0001883a 	nop
		}
		break;
80202874:	00008706 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
80202878:	e0bffd03 	ldbu	r2,-12(fp)
8020287c:	10000826 	beq	r2,zero,802028a0 <bSdmaDmaM1Transfer+0x120>
80202880:	10800060 	cmpeqi	r2,r2,1
80202884:	10000b26 	beq	r2,zero,802028b4 <bSdmaDmaM1Transfer+0x134>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
80202888:	008000b4 	movhi	r2,2
8020288c:	10a00004 	addi	r2,r2,-32768
80202890:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
80202894:	00800044 	movi	r2,1
80202898:	e0bff315 	stw	r2,-52(fp)
			break;
8020289c:	00000806 	br	802028c0 <bSdmaDmaM1Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
802028a0:	00800074 	movhi	r2,1
802028a4:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
802028a8:	00800044 	movi	r2,1
802028ac:	e0bff315 	stw	r2,-52(fp)
			break;
802028b0:	00000306 	br	802028c0 <bSdmaDmaM1Transfer+0x140>
		default:
			bChannelFlag = FALSE;
802028b4:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
802028b8:	e03ffa15 	stw	zero,-24(fp)
			break;
802028bc:	0001883a 	nop
		}
		break;
802028c0:	00007406 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
802028c4:	e0bffd03 	ldbu	r2,-12(fp)
802028c8:	10000826 	beq	r2,zero,802028ec <bSdmaDmaM1Transfer+0x16c>
802028cc:	10800060 	cmpeqi	r2,r2,1
802028d0:	10000b26 	beq	r2,zero,80202900 <bSdmaDmaM1Transfer+0x180>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
802028d4:	008000f4 	movhi	r2,3
802028d8:	10a00004 	addi	r2,r2,-32768
802028dc:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
802028e0:	00800044 	movi	r2,1
802028e4:	e0bff315 	stw	r2,-52(fp)
			break;
802028e8:	00000806 	br	8020290c <bSdmaDmaM1Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
802028ec:	008000b4 	movhi	r2,2
802028f0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
802028f4:	00800044 	movi	r2,1
802028f8:	e0bff315 	stw	r2,-52(fp)
			break;
802028fc:	00000306 	br	8020290c <bSdmaDmaM1Transfer+0x18c>
		default:
			bChannelFlag = FALSE;
80202900:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202904:	e03ffa15 	stw	zero,-24(fp)
			break;
80202908:	0001883a 	nop
		}
		break;
8020290c:	00006106 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
80202910:	e0bffd03 	ldbu	r2,-12(fp)
80202914:	10000826 	beq	r2,zero,80202938 <bSdmaDmaM1Transfer+0x1b8>
80202918:	10800060 	cmpeqi	r2,r2,1
8020291c:	10000b26 	beq	r2,zero,8020294c <bSdmaDmaM1Transfer+0x1cc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
80202920:	00800134 	movhi	r2,4
80202924:	10a00004 	addi	r2,r2,-32768
80202928:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
8020292c:	00800044 	movi	r2,1
80202930:	e0bff315 	stw	r2,-52(fp)
			break;
80202934:	00000806 	br	80202958 <bSdmaDmaM1Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
80202938:	008000f4 	movhi	r2,3
8020293c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
80202940:	00800044 	movi	r2,1
80202944:	e0bff315 	stw	r2,-52(fp)
			break;
80202948:	00000306 	br	80202958 <bSdmaDmaM1Transfer+0x1d8>
		default:
			bChannelFlag = FALSE;
8020294c:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202950:	e03ffa15 	stw	zero,-24(fp)
			break;
80202954:	0001883a 	nop
		}
		break;
80202958:	00004e06 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
8020295c:	e0bffd03 	ldbu	r2,-12(fp)
80202960:	10000826 	beq	r2,zero,80202984 <bSdmaDmaM1Transfer+0x204>
80202964:	10800060 	cmpeqi	r2,r2,1
80202968:	10000b26 	beq	r2,zero,80202998 <bSdmaDmaM1Transfer+0x218>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
8020296c:	00800174 	movhi	r2,5
80202970:	10a00004 	addi	r2,r2,-32768
80202974:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
80202978:	00800044 	movi	r2,1
8020297c:	e0bff315 	stw	r2,-52(fp)
			break;
80202980:	00000806 	br	802029a4 <bSdmaDmaM1Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
80202984:	00800134 	movhi	r2,4
80202988:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
8020298c:	00800044 	movi	r2,1
80202990:	e0bff315 	stw	r2,-52(fp)
			break;
80202994:	00000306 	br	802029a4 <bSdmaDmaM1Transfer+0x224>
		default:
			bChannelFlag = FALSE;
80202998:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
8020299c:	e03ffa15 	stw	zero,-24(fp)
			break;
802029a0:	0001883a 	nop
		}
		break;
802029a4:	00003b06 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
802029a8:	e0bffd03 	ldbu	r2,-12(fp)
802029ac:	10000826 	beq	r2,zero,802029d0 <bSdmaDmaM1Transfer+0x250>
802029b0:	10800060 	cmpeqi	r2,r2,1
802029b4:	10000b26 	beq	r2,zero,802029e4 <bSdmaDmaM1Transfer+0x264>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
802029b8:	008001b4 	movhi	r2,6
802029bc:	10a00004 	addi	r2,r2,-32768
802029c0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
802029c4:	00800044 	movi	r2,1
802029c8:	e0bff315 	stw	r2,-52(fp)
			break;
802029cc:	00000806 	br	802029f0 <bSdmaDmaM1Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
802029d0:	00800174 	movhi	r2,5
802029d4:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
802029d8:	00800044 	movi	r2,1
802029dc:	e0bff315 	stw	r2,-52(fp)
			break;
802029e0:	00000306 	br	802029f0 <bSdmaDmaM1Transfer+0x270>
		default:
			bChannelFlag = FALSE;
802029e4:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
802029e8:	e03ffa15 	stw	zero,-24(fp)
			break;
802029ec:	0001883a 	nop
		}
		break;
802029f0:	00002806 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
802029f4:	e0bffd03 	ldbu	r2,-12(fp)
802029f8:	10000826 	beq	r2,zero,80202a1c <bSdmaDmaM1Transfer+0x29c>
802029fc:	10800060 	cmpeqi	r2,r2,1
80202a00:	10000b26 	beq	r2,zero,80202a30 <bSdmaDmaM1Transfer+0x2b0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
80202a04:	008001f4 	movhi	r2,7
80202a08:	10a00004 	addi	r2,r2,-32768
80202a0c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
80202a10:	00800044 	movi	r2,1
80202a14:	e0bff315 	stw	r2,-52(fp)
			break;
80202a18:	00000806 	br	80202a3c <bSdmaDmaM1Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
80202a1c:	008001b4 	movhi	r2,6
80202a20:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
80202a24:	00800044 	movi	r2,1
80202a28:	e0bff315 	stw	r2,-52(fp)
			break;
80202a2c:	00000306 	br	80202a3c <bSdmaDmaM1Transfer+0x2bc>
		default:
			bChannelFlag = FALSE;
80202a30:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202a34:	e03ffa15 	stw	zero,-24(fp)
			break;
80202a38:	0001883a 	nop
		}
		break;
80202a3c:	00001506 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
80202a40:	e0bffd03 	ldbu	r2,-12(fp)
80202a44:	10000826 	beq	r2,zero,80202a68 <bSdmaDmaM1Transfer+0x2e8>
80202a48:	10800060 	cmpeqi	r2,r2,1
80202a4c:	10000b26 	beq	r2,zero,80202a7c <bSdmaDmaM1Transfer+0x2fc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
80202a50:	00800234 	movhi	r2,8
80202a54:	10a00004 	addi	r2,r2,-32768
80202a58:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
80202a5c:	00800044 	movi	r2,1
80202a60:	e0bff315 	stw	r2,-52(fp)
			break;
80202a64:	00000806 	br	80202a88 <bSdmaDmaM1Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
80202a68:	008001f4 	movhi	r2,7
80202a6c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
80202a70:	00800044 	movi	r2,1
80202a74:	e0bff315 	stw	r2,-52(fp)
			break;
80202a78:	00000306 	br	80202a88 <bSdmaDmaM1Transfer+0x308>
		default:
			bChannelFlag = FALSE;
80202a7c:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202a80:	e03ffa15 	stw	zero,-24(fp)
			break;
80202a84:	0001883a 	nop
		}
		break;
80202a88:	00000206 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	default:
		bChannelFlag = FALSE;
80202a8c:	e03ff415 	stw	zero,-48(fp)
		break;
80202a90:	0001883a 	nop
	}

	bBufferEmptyFlag = TRUE;
80202a94:	00800044 	movi	r2,1
80202a98:	e0bffa15 	stw	r2,-24(fp)
	uliSrcAddrLow = (alt_u32) SDMA_M1_BASE_ADDR_LOW	+ (alt_u32) uliDdrInitialAddr;
80202a9c:	e0bffb17 	ldw	r2,-20(fp)
80202aa0:	e0bff715 	stw	r2,-36(fp)
	uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
80202aa4:	e03ff815 	stw	zero,-32(fp)

	// Rounding up the size to the nearest multiple of 32 (32 bytes = 256b = size of memory access)
	if ((SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks) % 32) {
80202aa8:	e0bffc0b 	ldhu	r2,-16(fp)
80202aac:	10802224 	muli	r2,r2,136
80202ab0:	1080060c 	andi	r2,r2,24
80202ab4:	10000826 	beq	r2,zero,80202ad8 <bSdmaDmaM1Transfer+0x358>
		// Transfer size is not a multiple of 32
		usiRoundedTransferSizeInBytes = ((alt_u16) ((SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks) / 32) + 1) * 32;
80202ab8:	e0bffc0b 	ldhu	r2,-16(fp)
80202abc:	10802224 	muli	r2,r2,136
80202ac0:	1004d17a 	srli	r2,r2,5
80202ac4:	10bfffcc 	andi	r2,r2,65535
80202ac8:	10800044 	addi	r2,r2,1
80202acc:	1004917a 	slli	r2,r2,5
80202ad0:	e0bff60d 	sth	r2,-40(fp)
80202ad4:	00000306 	br	80202ae4 <bSdmaDmaM1Transfer+0x364>
	} else {
		usiRoundedTransferSizeInBytes = (SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks);
80202ad8:	e0bffc0b 	ldhu	r2,-16(fp)
80202adc:	10802224 	muli	r2,r2,136
80202ae0:	e0bff60d 	sth	r2,-40(fp)
	}

	// Verify if the base address is a multiple o 32 (32 bytes = 256b = size of memory access)
	if (uliSrcAddrLow % 32) {
80202ae4:	e0bff717 	ldw	r2,-36(fp)
80202ae8:	108007cc 	andi	r2,r2,31
80202aec:	10000226 	beq	r2,zero,80202af8 <bSdmaDmaM1Transfer+0x378>
		// Address is not a multiple of 32
		bAddressFlag = FALSE;
80202af0:	e03ff515 	stw	zero,-44(fp)
80202af4:	00000206 	br	80202b00 <bSdmaDmaM1Transfer+0x380>
	} else {
		bAddressFlag = TRUE;
80202af8:	00800044 	movi	r2,1
80202afc:	e0bff515 	stw	r2,-44(fp)
	}

	if ((bChannelFlag) && (bBufferEmptyFlag) && (bAddressFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {
80202b00:	e0bff417 	ldw	r2,-48(fp)
80202b04:	10003126 	beq	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
80202b08:	e0bffa17 	ldw	r2,-24(fp)
80202b0c:	10002f26 	beq	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
80202b10:	e0bff517 	ldw	r2,-44(fp)
80202b14:	10002d26 	beq	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
80202b18:	e0bffc0b 	ldhu	r2,-16(fp)
80202b1c:	10800468 	cmpgeui	r2,r2,17
80202b20:	10002a1e 	bne	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>

		if (pxDmaM1Dev != NULL) {
80202b24:	d0a01417 	ldw	r2,-32688(gp)
80202b28:	10002826 	beq	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202b2c:	00000206 	br	80202b38 <bSdmaDmaM1Transfer+0x3b8>
				alt_busy_sleep(1); /* delay 1us */
80202b30:	01000044 	movi	r4,1
80202b34:	02166240 	call	80216624 <alt_busy_sleep>

	if ((bChannelFlag) && (bBufferEmptyFlag) && (bAddressFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {

		if (pxDmaM1Dev != NULL) {
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202b38:	d0a01417 	ldw	r2,-32688(gp)
80202b3c:	10800317 	ldw	r2,12(r2)
80202b40:	10800037 	ldwio	r2,0(r2)
80202b44:	1080010c 	andi	r2,r2,4
80202b48:	103ff91e 	bne	r2,zero,80202b30 <__reset+0xfa1e2b30>
				alt_busy_sleep(1); /* delay 1us */
			}
			/* Success = 0 */
			if (0 == iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
80202b4c:	d2201417 	ldw	r8,-32688(gp)
80202b50:	e1bff717 	ldw	r6,-36(fp)
80202b54:	e1fff217 	ldw	r7,-56(fp)
80202b58:	e0bff60b 	ldhu	r2,-40(fp)
80202b5c:	e0fff817 	ldw	r3,-32(fp)
80202b60:	e13ff317 	ldw	r4,-52(fp)
80202b64:	01400044 	movi	r5,1
80202b68:	d9400815 	stw	r5,32(sp)
80202b6c:	01400044 	movi	r5,1
80202b70:	d9400715 	stw	r5,28(sp)
80202b74:	01400044 	movi	r5,1
80202b78:	d9400615 	stw	r5,24(sp)
80202b7c:	01400044 	movi	r5,1
80202b80:	d9400515 	stw	r5,20(sp)
80202b84:	01400044 	movi	r5,1
80202b88:	d9400415 	stw	r5,16(sp)
80202b8c:	d9000315 	stw	r4,12(sp)
80202b90:	d8c00215 	stw	r3,8(sp)
80202b94:	e0fff917 	ldw	r3,-28(fp)
80202b98:	d8c00115 	stw	r3,4(sp)
80202b9c:	d8800015 	stw	r2,0(sp)
80202ba0:	800b883a 	mov	r5,r16
80202ba4:	4009883a 	mov	r4,r8
80202ba8:	02044d40 	call	802044d4 <iMsgdmaConstructExtendedMmToMmDescriptor>
80202bac:	1000071e 	bne	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
					(alt_u32 *) uliDestAddrLow,
					usiRoundedTransferSizeInBytes, uliControlBits,
					(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
					1, 1, 1, 1, 1)	) {
				/* Success = 0 */
				if (0 == iMsgdmaExtendedDescriptorAsyncTransfer(pxDmaM1Dev,	&xDmaExtendedDescriptor)) {
80202bb0:	d0a01417 	ldw	r2,-32688(gp)
80202bb4:	800b883a 	mov	r5,r16
80202bb8:	1009883a 	mov	r4,r2
80202bbc:	020458c0 	call	8020458c <iMsgdmaExtendedDescriptorAsyncTransfer>
80202bc0:	1000021e 	bne	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
					bStatus = TRUE;
80202bc4:	00800044 	movi	r2,1
80202bc8:	e0bff115 	stw	r2,-60(fp)
				}
			}
		}
	}
	return bStatus;
80202bcc:	e0bff117 	ldw	r2,-60(fp)
}
80202bd0:	e6ffff04 	addi	sp,fp,-4
80202bd4:	dfc00217 	ldw	ra,8(sp)
80202bd8:	df000117 	ldw	fp,4(sp)
80202bdc:	dc000017 	ldw	r16,0(sp)
80202be0:	dec00304 	addi	sp,sp,12
80202be4:	f800283a 	ret

80202be8 <bSdmaDmaM2Transfer>:

bool bSdmaDmaM2Transfer(alt_u32 *uliDdrInitialAddr, alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide, alt_u8 ucChBufferId) {
80202be8:	deffe604 	addi	sp,sp,-104
80202bec:	dfc01915 	stw	ra,100(sp)
80202bf0:	df001815 	stw	fp,96(sp)
80202bf4:	dc001715 	stw	r16,92(sp)
80202bf8:	df001804 	addi	fp,sp,96
80202bfc:	e13ffb15 	stw	r4,-20(fp)
80202c00:	2809883a 	mov	r4,r5
80202c04:	3007883a 	mov	r3,r6
80202c08:	3805883a 	mov	r2,r7
80202c0c:	e13ffc0d 	sth	r4,-16(fp)
80202c10:	e0fffd05 	stb	r3,-12(fp)
80202c14:	e0bffe05 	stb	r2,-8(fp)
80202c18:	defff004 	addi	sp,sp,-64
80202c1c:	d8800904 	addi	r2,sp,36
80202c20:	108007c4 	addi	r2,r2,31
80202c24:	1004d17a 	srli	r2,r2,5
80202c28:	1020917a 	slli	r16,r2,5
	bool bStatus;

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
80202c2c:	e03ff215 	stw	zero,-56(fp)
	alt_u32 uliDestAddrHigh = 0;
80202c30:	e03ff315 	stw	zero,-52(fp)

	alt_u32 uliSrcAddrLow = 0;
80202c34:	e03ff715 	stw	zero,-36(fp)
	alt_u32 uliSrcAddrHigh = 0;
80202c38:	e03ff815 	stw	zero,-32(fp)

	alt_u32 uliControlBits = 0x00000000;
80202c3c:	e03ff915 	stw	zero,-28(fp)
	bool bBufferEmptyFlag;
	bool bChannelFlag;
	bool bAddressFlag = FALSE;
80202c40:	e03ff515 	stw	zero,-44(fp)

	alt_u16 usiRoundedTransferSizeInBytes = 0;
80202c44:	e03ff60d 	sth	zero,-40(fp)

	/* Assuming that the channel selected exist, change to FALSE if doesn't */
	bChannelFlag = TRUE;
80202c48:	00800044 	movi	r2,1
80202c4c:	e0bff415 	stw	r2,-48(fp)
	bStatus = FALSE;
80202c50:	e03ff115 	stw	zero,-60(fp)
	bBufferEmptyFlag = FALSE;
80202c54:	e03ffa15 	stw	zero,-24(fp)
	switch (ucChBufferId) {
80202c58:	e0bffe03 	ldbu	r2,-8(fp)
80202c5c:	10c00228 	cmpgeui	r3,r2,8
80202c60:	1800a41e 	bne	r3,zero,80202ef4 <bSdmaDmaM2Transfer+0x30c>
80202c64:	100690ba 	slli	r3,r2,2
80202c68:	00a00834 	movhi	r2,32800
80202c6c:	108b1f04 	addi	r2,r2,11388
80202c70:	1885883a 	add	r2,r3,r2
80202c74:	10800017 	ldw	r2,0(r2)
80202c78:	1000683a 	jmp	r2
80202c7c:	80202c9c 	xori	zero,r16,32946
80202c80:	80202ce0 	cmpeqi	zero,r16,-32589
80202c84:	80202d2c 	andhi	zero,r16,32948
80202c88:	80202d78 	rdprs	zero,r16,-32587
80202c8c:	80202dc4 	addi	zero,r16,-32585
80202c90:	80202e10 	cmplti	zero,r16,-32584
80202c94:	80202e5c 	xori	zero,r16,32953
80202c98:	80202ea8 	cmpgeui	zero,r16,32954
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
80202c9c:	e0bffd03 	ldbu	r2,-12(fp)
80202ca0:	10000726 	beq	r2,zero,80202cc0 <bSdmaDmaM2Transfer+0xd8>
80202ca4:	10800060 	cmpeqi	r2,r2,1
80202ca8:	10000926 	beq	r2,zero,80202cd0 <bSdmaDmaM2Transfer+0xe8>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
80202cac:	00a00014 	movui	r2,32768
80202cb0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
80202cb4:	00800044 	movi	r2,1
80202cb8:	e0bff315 	stw	r2,-52(fp)
			break;
80202cbc:	00000706 	br	80202cdc <bSdmaDmaM2Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
80202cc0:	e03ff215 	stw	zero,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
80202cc4:	00800044 	movi	r2,1
80202cc8:	e0bff315 	stw	r2,-52(fp)
			break;
80202ccc:	00000306 	br	80202cdc <bSdmaDmaM2Transfer+0xf4>
		default:
			bChannelFlag = FALSE;
80202cd0:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202cd4:	e03ffa15 	stw	zero,-24(fp)
			break;
80202cd8:	0001883a 	nop
		}
		break;
80202cdc:	00008706 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
80202ce0:	e0bffd03 	ldbu	r2,-12(fp)
80202ce4:	10000826 	beq	r2,zero,80202d08 <bSdmaDmaM2Transfer+0x120>
80202ce8:	10800060 	cmpeqi	r2,r2,1
80202cec:	10000b26 	beq	r2,zero,80202d1c <bSdmaDmaM2Transfer+0x134>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
80202cf0:	008000b4 	movhi	r2,2
80202cf4:	10a00004 	addi	r2,r2,-32768
80202cf8:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
80202cfc:	00800044 	movi	r2,1
80202d00:	e0bff315 	stw	r2,-52(fp)
			break;
80202d04:	00000806 	br	80202d28 <bSdmaDmaM2Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
80202d08:	00800074 	movhi	r2,1
80202d0c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
80202d10:	00800044 	movi	r2,1
80202d14:	e0bff315 	stw	r2,-52(fp)
			break;
80202d18:	00000306 	br	80202d28 <bSdmaDmaM2Transfer+0x140>
		default:
			bChannelFlag = FALSE;
80202d1c:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202d20:	e03ffa15 	stw	zero,-24(fp)
			break;
80202d24:	0001883a 	nop
		}
		break;
80202d28:	00007406 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
80202d2c:	e0bffd03 	ldbu	r2,-12(fp)
80202d30:	10000826 	beq	r2,zero,80202d54 <bSdmaDmaM2Transfer+0x16c>
80202d34:	10800060 	cmpeqi	r2,r2,1
80202d38:	10000b26 	beq	r2,zero,80202d68 <bSdmaDmaM2Transfer+0x180>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
80202d3c:	008000f4 	movhi	r2,3
80202d40:	10a00004 	addi	r2,r2,-32768
80202d44:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
80202d48:	00800044 	movi	r2,1
80202d4c:	e0bff315 	stw	r2,-52(fp)
			break;
80202d50:	00000806 	br	80202d74 <bSdmaDmaM2Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
80202d54:	008000b4 	movhi	r2,2
80202d58:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
80202d5c:	00800044 	movi	r2,1
80202d60:	e0bff315 	stw	r2,-52(fp)
			break;
80202d64:	00000306 	br	80202d74 <bSdmaDmaM2Transfer+0x18c>
		default:
			bChannelFlag = FALSE;
80202d68:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202d6c:	e03ffa15 	stw	zero,-24(fp)
			break;
80202d70:	0001883a 	nop
		}
		break;
80202d74:	00006106 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
80202d78:	e0bffd03 	ldbu	r2,-12(fp)
80202d7c:	10000826 	beq	r2,zero,80202da0 <bSdmaDmaM2Transfer+0x1b8>
80202d80:	10800060 	cmpeqi	r2,r2,1
80202d84:	10000b26 	beq	r2,zero,80202db4 <bSdmaDmaM2Transfer+0x1cc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
80202d88:	00800134 	movhi	r2,4
80202d8c:	10a00004 	addi	r2,r2,-32768
80202d90:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
80202d94:	00800044 	movi	r2,1
80202d98:	e0bff315 	stw	r2,-52(fp)
			break;
80202d9c:	00000806 	br	80202dc0 <bSdmaDmaM2Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
80202da0:	008000f4 	movhi	r2,3
80202da4:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
80202da8:	00800044 	movi	r2,1
80202dac:	e0bff315 	stw	r2,-52(fp)
			break;
80202db0:	00000306 	br	80202dc0 <bSdmaDmaM2Transfer+0x1d8>
		default:
			bChannelFlag = FALSE;
80202db4:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202db8:	e03ffa15 	stw	zero,-24(fp)
			break;
80202dbc:	0001883a 	nop
		}
		break;
80202dc0:	00004e06 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
80202dc4:	e0bffd03 	ldbu	r2,-12(fp)
80202dc8:	10000826 	beq	r2,zero,80202dec <bSdmaDmaM2Transfer+0x204>
80202dcc:	10800060 	cmpeqi	r2,r2,1
80202dd0:	10000b26 	beq	r2,zero,80202e00 <bSdmaDmaM2Transfer+0x218>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
80202dd4:	00800174 	movhi	r2,5
80202dd8:	10a00004 	addi	r2,r2,-32768
80202ddc:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
80202de0:	00800044 	movi	r2,1
80202de4:	e0bff315 	stw	r2,-52(fp)
			break;
80202de8:	00000806 	br	80202e0c <bSdmaDmaM2Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
80202dec:	00800134 	movhi	r2,4
80202df0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
80202df4:	00800044 	movi	r2,1
80202df8:	e0bff315 	stw	r2,-52(fp)
			break;
80202dfc:	00000306 	br	80202e0c <bSdmaDmaM2Transfer+0x224>
		default:
			bChannelFlag = FALSE;
80202e00:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202e04:	e03ffa15 	stw	zero,-24(fp)
			break;
80202e08:	0001883a 	nop
		}
		break;
80202e0c:	00003b06 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
80202e10:	e0bffd03 	ldbu	r2,-12(fp)
80202e14:	10000826 	beq	r2,zero,80202e38 <bSdmaDmaM2Transfer+0x250>
80202e18:	10800060 	cmpeqi	r2,r2,1
80202e1c:	10000b26 	beq	r2,zero,80202e4c <bSdmaDmaM2Transfer+0x264>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
80202e20:	008001b4 	movhi	r2,6
80202e24:	10a00004 	addi	r2,r2,-32768
80202e28:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
80202e2c:	00800044 	movi	r2,1
80202e30:	e0bff315 	stw	r2,-52(fp)
			break;
80202e34:	00000806 	br	80202e58 <bSdmaDmaM2Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
80202e38:	00800174 	movhi	r2,5
80202e3c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
80202e40:	00800044 	movi	r2,1
80202e44:	e0bff315 	stw	r2,-52(fp)
			break;
80202e48:	00000306 	br	80202e58 <bSdmaDmaM2Transfer+0x270>
		default:
			bChannelFlag = FALSE;
80202e4c:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202e50:	e03ffa15 	stw	zero,-24(fp)
			break;
80202e54:	0001883a 	nop
		}
		break;
80202e58:	00002806 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
80202e5c:	e0bffd03 	ldbu	r2,-12(fp)
80202e60:	10000826 	beq	r2,zero,80202e84 <bSdmaDmaM2Transfer+0x29c>
80202e64:	10800060 	cmpeqi	r2,r2,1
80202e68:	10000b26 	beq	r2,zero,80202e98 <bSdmaDmaM2Transfer+0x2b0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
80202e6c:	008001f4 	movhi	r2,7
80202e70:	10a00004 	addi	r2,r2,-32768
80202e74:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
80202e78:	00800044 	movi	r2,1
80202e7c:	e0bff315 	stw	r2,-52(fp)
			break;
80202e80:	00000806 	br	80202ea4 <bSdmaDmaM2Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
80202e84:	008001b4 	movhi	r2,6
80202e88:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
80202e8c:	00800044 	movi	r2,1
80202e90:	e0bff315 	stw	r2,-52(fp)
			break;
80202e94:	00000306 	br	80202ea4 <bSdmaDmaM2Transfer+0x2bc>
		default:
			bChannelFlag = FALSE;
80202e98:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202e9c:	e03ffa15 	stw	zero,-24(fp)
			break;
80202ea0:	0001883a 	nop
		}
		break;
80202ea4:	00001506 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
80202ea8:	e0bffd03 	ldbu	r2,-12(fp)
80202eac:	10000826 	beq	r2,zero,80202ed0 <bSdmaDmaM2Transfer+0x2e8>
80202eb0:	10800060 	cmpeqi	r2,r2,1
80202eb4:	10000b26 	beq	r2,zero,80202ee4 <bSdmaDmaM2Transfer+0x2fc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
80202eb8:	00800234 	movhi	r2,8
80202ebc:	10a00004 	addi	r2,r2,-32768
80202ec0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
80202ec4:	00800044 	movi	r2,1
80202ec8:	e0bff315 	stw	r2,-52(fp)
			break;
80202ecc:	00000806 	br	80202ef0 <bSdmaDmaM2Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
80202ed0:	008001f4 	movhi	r2,7
80202ed4:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
80202ed8:	00800044 	movi	r2,1
80202edc:	e0bff315 	stw	r2,-52(fp)
			break;
80202ee0:	00000306 	br	80202ef0 <bSdmaDmaM2Transfer+0x308>
		default:
			bChannelFlag = FALSE;
80202ee4:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202ee8:	e03ffa15 	stw	zero,-24(fp)
			break;
80202eec:	0001883a 	nop
		}
		break;
80202ef0:	00000206 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	default:
		bChannelFlag = FALSE;
80202ef4:	e03ff415 	stw	zero,-48(fp)
		break;
80202ef8:	0001883a 	nop
	}

	bBufferEmptyFlag = TRUE;
80202efc:	00800044 	movi	r2,1
80202f00:	e0bffa15 	stw	r2,-24(fp)
	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
			+ (alt_u32) uliDdrInitialAddr;
80202f04:	e0fffb17 	ldw	r3,-20(fp)
		bChannelFlag = FALSE;
		break;
	}

	bBufferEmptyFlag = TRUE;
	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
80202f08:	00a00034 	movhi	r2,32768
80202f0c:	1885883a 	add	r2,r3,r2
80202f10:	e0bff715 	stw	r2,-36(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
80202f14:	e03ff815 	stw	zero,-32(fp)

	// Rounding up the size to the nearest multiple of 32 (32 bytes = 256b = size of memory access)
	if ((SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks) % 32) {
80202f18:	e0bffc0b 	ldhu	r2,-16(fp)
80202f1c:	10802224 	muli	r2,r2,136
80202f20:	1080060c 	andi	r2,r2,24
80202f24:	10000826 	beq	r2,zero,80202f48 <bSdmaDmaM2Transfer+0x360>
		// Transfer size is not a multiple of 32
		usiRoundedTransferSizeInBytes = ((alt_u16) ((SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks) / 32) + 1) * 32;
80202f28:	e0bffc0b 	ldhu	r2,-16(fp)
80202f2c:	10802224 	muli	r2,r2,136
80202f30:	1004d17a 	srli	r2,r2,5
80202f34:	10bfffcc 	andi	r2,r2,65535
80202f38:	10800044 	addi	r2,r2,1
80202f3c:	1004917a 	slli	r2,r2,5
80202f40:	e0bff60d 	sth	r2,-40(fp)
80202f44:	00000306 	br	80202f54 <bSdmaDmaM2Transfer+0x36c>
	} else {
		usiRoundedTransferSizeInBytes = (SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks);
80202f48:	e0bffc0b 	ldhu	r2,-16(fp)
80202f4c:	10802224 	muli	r2,r2,136
80202f50:	e0bff60d 	sth	r2,-40(fp)
	}

	// Verify if the base address is a multiple o 32 (32 bytes = 256b = size of memory access)
	if (uliSrcAddrLow % 32) {
80202f54:	e0bff717 	ldw	r2,-36(fp)
80202f58:	108007cc 	andi	r2,r2,31
80202f5c:	10000226 	beq	r2,zero,80202f68 <bSdmaDmaM2Transfer+0x380>
		// Address is not a multiple of 32
		bAddressFlag = FALSE;
80202f60:	e03ff515 	stw	zero,-44(fp)
80202f64:	00000206 	br	80202f70 <bSdmaDmaM2Transfer+0x388>
	} else {
		bAddressFlag = TRUE;
80202f68:	00800044 	movi	r2,1
80202f6c:	e0bff515 	stw	r2,-44(fp)
	}

	if ((bChannelFlag) && (bBufferEmptyFlag) && (bAddressFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {
80202f70:	e0bff417 	ldw	r2,-48(fp)
80202f74:	10003126 	beq	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
80202f78:	e0bffa17 	ldw	r2,-24(fp)
80202f7c:	10002f26 	beq	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
80202f80:	e0bff517 	ldw	r2,-44(fp)
80202f84:	10002d26 	beq	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
80202f88:	e0bffc0b 	ldhu	r2,-16(fp)
80202f8c:	10800468 	cmpgeui	r2,r2,17
80202f90:	10002a1e 	bne	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
		if (pxDmaM2Dev != NULL) {
80202f94:	d0a01517 	ldw	r2,-32684(gp)
80202f98:	10002826 	beq	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>

			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202f9c:	00000206 	br	80202fa8 <bSdmaDmaM2Transfer+0x3c0>
				alt_busy_sleep(1); /* delay 1us */
80202fa0:	01000044 	movi	r4,1
80202fa4:	02166240 	call	80216624 <alt_busy_sleep>
	}

	if ((bChannelFlag) && (bBufferEmptyFlag) && (bAddressFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {
		if (pxDmaM2Dev != NULL) {

			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202fa8:	d0a01517 	ldw	r2,-32684(gp)
80202fac:	10800317 	ldw	r2,12(r2)
80202fb0:	10800037 	ldwio	r2,0(r2)
80202fb4:	1080010c 	andi	r2,r2,4
80202fb8:	103ff91e 	bne	r2,zero,80202fa0 <__reset+0xfa1e2fa0>
				alt_busy_sleep(1); /* delay 1us */
			}
			/* Success = 0 */
			if ( 0 == iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
80202fbc:	d2201517 	ldw	r8,-32684(gp)
80202fc0:	e1bff717 	ldw	r6,-36(fp)
80202fc4:	e1fff217 	ldw	r7,-56(fp)
80202fc8:	e0bff60b 	ldhu	r2,-40(fp)
80202fcc:	e0fff817 	ldw	r3,-32(fp)
80202fd0:	e13ff317 	ldw	r4,-52(fp)
80202fd4:	01400044 	movi	r5,1
80202fd8:	d9400815 	stw	r5,32(sp)
80202fdc:	01400044 	movi	r5,1
80202fe0:	d9400715 	stw	r5,28(sp)
80202fe4:	01400044 	movi	r5,1
80202fe8:	d9400615 	stw	r5,24(sp)
80202fec:	01400044 	movi	r5,1
80202ff0:	d9400515 	stw	r5,20(sp)
80202ff4:	01400044 	movi	r5,1
80202ff8:	d9400415 	stw	r5,16(sp)
80202ffc:	d9000315 	stw	r4,12(sp)
80203000:	d8c00215 	stw	r3,8(sp)
80203004:	e0fff917 	ldw	r3,-28(fp)
80203008:	d8c00115 	stw	r3,4(sp)
8020300c:	d8800015 	stw	r2,0(sp)
80203010:	800b883a 	mov	r5,r16
80203014:	4009883a 	mov	r4,r8
80203018:	02044d40 	call	802044d4 <iMsgdmaConstructExtendedMmToMmDescriptor>
8020301c:	1000071e 	bne	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
					(alt_u32 *) uliDestAddrLow,
					usiRoundedTransferSizeInBytes, uliControlBits,
					(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
					1, 1, 1, 1, 1)) {
				/* Success = 0 */
				if ( 0 == iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
80203020:	d0a01517 	ldw	r2,-32684(gp)
80203024:	800b883a 	mov	r5,r16
80203028:	1009883a 	mov	r4,r2
8020302c:	02045c80 	call	802045c8 <iMsgdmaExtendedDescriptorSyncTransfer>
80203030:	1000021e 	bne	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
						&xDmaExtendedDescriptor)) {
					bStatus = TRUE;
80203034:	00800044 	movi	r2,1
80203038:	e0bff115 	stw	r2,-60(fp)
				}
			}
		}
	}
	return bStatus;
8020303c:	e0bff117 	ldw	r2,-60(fp)
}
80203040:	e6ffff04 	addi	sp,fp,-4
80203044:	dfc00217 	ldw	ra,8(sp)
80203048:	df000117 	ldw	fp,4(sp)
8020304c:	dc000017 	ldw	r16,0(sp)
80203050:	dec00304 	addi	sp,sp,12
80203054:	f800283a 	ret

80203058 <bSdmaDmaM1FtdiTransfer>:

bool bSdmaDmaM1FtdiTransfer(alt_u32 *uliDdrInitialAddr, alt_u16 usiTransferSizeInBytes, alt_u8 ucFtdiOperation) {
80203058:	deffe804 	addi	sp,sp,-96
8020305c:	dfc01715 	stw	ra,92(sp)
80203060:	df001615 	stw	fp,88(sp)
80203064:	dc001515 	stw	r16,84(sp)
80203068:	df001604 	addi	fp,sp,88
8020306c:	e13ffc15 	stw	r4,-16(fp)
80203070:	2807883a 	mov	r3,r5
80203074:	3005883a 	mov	r2,r6
80203078:	e0fffd0d 	sth	r3,-12(fp)
8020307c:	e0bffe05 	stb	r2,-8(fp)
80203080:	defff004 	addi	sp,sp,-64
80203084:	d8800904 	addi	r2,sp,36
80203088:	108007c4 	addi	r2,r2,31
8020308c:	1004d17a 	srli	r2,r2,5
80203090:	1020917a 	slli	r16,r2,5
	bool bStatus;

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
80203094:	e03ff415 	stw	zero,-48(fp)
	alt_u32 uliDestAddrHigh = 0;
80203098:	e03ff515 	stw	zero,-44(fp)

	alt_u32 uliSrcAddrLow = 0;
8020309c:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliSrcAddrHigh = 0;
802030a0:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliControlBits = 0x00000000;
802030a4:	e03ffb15 	stw	zero,-20(fp)
	bool bAddressFlag = FALSE;
802030a8:	e03ff815 	stw	zero,-32(fp)
	bool bOperationFlag = FALSE;
802030ac:	e03ff915 	stw	zero,-28(fp)

	alt_u16 usiRoundedTransferSizeInBytes = 0;
802030b0:	e03ffa0d 	sth	zero,-24(fp)

	bStatus = FALSE;
802030b4:	e03ff315 	stw	zero,-52(fp)

	switch (ucFtdiOperation) {
802030b8:	e0bffe03 	ldbu	r2,-8(fp)
802030bc:	10000326 	beq	r2,zero,802030cc <bSdmaDmaM1FtdiTransfer+0x74>
802030c0:	10800060 	cmpeqi	r2,r2,1
802030c4:	10000a1e 	bne	r2,zero,802030f0 <bSdmaDmaM1FtdiTransfer+0x98>
802030c8:	00001206 	br	80203114 <bSdmaDmaM1FtdiTransfer+0xbc>

		case eSdmaTxFtdi:
				uliSrcAddrLow   = (alt_u32) SDMA_M1_BASE_ADDR_LOW	+ (alt_u32) uliDdrInitialAddr;
802030cc:	e0bffc17 	ldw	r2,-16(fp)
802030d0:	e0bff615 	stw	r2,-40(fp)
				uliSrcAddrHigh  = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
802030d4:	e03ff715 	stw	zero,-36(fp)
				uliDestAddrLow  = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_LOW;
802030d8:	e03ff415 	stw	zero,-48(fp)
				uliDestAddrHigh = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_HIGH;
802030dc:	00800804 	movi	r2,32
802030e0:	e0bff515 	stw	r2,-44(fp)
				bOperationFlag = TRUE;
802030e4:	00800044 	movi	r2,1
802030e8:	e0bff915 	stw	r2,-28(fp)
			break;
802030ec:	00000b06 	br	8020311c <bSdmaDmaM1FtdiTransfer+0xc4>

		case eSdmaRxFtdi:
				uliSrcAddrLow   = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_LOW;
802030f0:	e03ff615 	stw	zero,-40(fp)
				uliSrcAddrHigh  = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_HIGH;
802030f4:	00800804 	movi	r2,32
802030f8:	e0bff715 	stw	r2,-36(fp)
				uliDestAddrLow  = (alt_u32) SDMA_M1_BASE_ADDR_LOW	+ (alt_u32) uliDdrInitialAddr;
802030fc:	e0bffc17 	ldw	r2,-16(fp)
80203100:	e0bff415 	stw	r2,-48(fp)
				uliDestAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
80203104:	e03ff515 	stw	zero,-44(fp)
				bOperationFlag = TRUE;
80203108:	00800044 	movi	r2,1
8020310c:	e0bff915 	stw	r2,-28(fp)
			break;
80203110:	00000206 	br	8020311c <bSdmaDmaM1FtdiTransfer+0xc4>

		default:
			bOperationFlag = FALSE;
80203114:	e03ff915 	stw	zero,-28(fp)
			break;
80203118:	0001883a 	nop

	}

	// Rounding up the size to the nearest multiple of 8 (8 bytes = 64b = size of memory access)
	if (usiRoundedTransferSizeInBytes % 8) {
8020311c:	e0bffa0b 	ldhu	r2,-24(fp)
80203120:	108001cc 	andi	r2,r2,7
80203124:	10bfffcc 	andi	r2,r2,65535
80203128:	10000726 	beq	r2,zero,80203148 <bSdmaDmaM1FtdiTransfer+0xf0>
		// Transfer size is not a multiple of 8
		usiRoundedTransferSizeInBytes = ((alt_u16) (usiTransferSizeInBytes / 8) + 1) * 8;
8020312c:	e0bffd0b 	ldhu	r2,-12(fp)
80203130:	1004d0fa 	srli	r2,r2,3
80203134:	10bfffcc 	andi	r2,r2,65535
80203138:	10800044 	addi	r2,r2,1
8020313c:	100490fa 	slli	r2,r2,3
80203140:	e0bffa0d 	sth	r2,-24(fp)
80203144:	00000206 	br	80203150 <bSdmaDmaM1FtdiTransfer+0xf8>
	} else {
		usiRoundedTransferSizeInBytes = usiTransferSizeInBytes;
80203148:	e0bffd0b 	ldhu	r2,-12(fp)
8020314c:	e0bffa0d 	sth	r2,-24(fp)
	}

	// Verify if the base address is a multiple o 8 (8 bytes = 64b = size of memory access)
	if (uliSrcAddrLow % 8) {
80203150:	e0bff617 	ldw	r2,-40(fp)
80203154:	108001cc 	andi	r2,r2,7
80203158:	10000226 	beq	r2,zero,80203164 <bSdmaDmaM1FtdiTransfer+0x10c>
		// Address is not a multiple of 8
		bAddressFlag = FALSE;
8020315c:	e03ff815 	stw	zero,-32(fp)
80203160:	00000206 	br	8020316c <bSdmaDmaM1FtdiTransfer+0x114>
	} else {
		bAddressFlag = TRUE;
80203164:	00800044 	movi	r2,1
80203168:	e0bff815 	stw	r2,-32(fp)
	}

	if ((bOperationFlag) && (bAddressFlag) && (usiRoundedTransferSizeInBytes <= 8192)) {
8020316c:	e0bff917 	ldw	r2,-28(fp)
80203170:	10002f26 	beq	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>
80203174:	e0bff817 	ldw	r2,-32(fp)
80203178:	10002d26 	beq	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>
8020317c:	e0bffa0b 	ldhu	r2,-24(fp)
80203180:	10880068 	cmpgeui	r2,r2,8193
80203184:	10002a1e 	bne	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>

		if (pxDmaM1Dev != NULL) {
80203188:	d0a01417 	ldw	r2,-32688(gp)
8020318c:	10002826 	beq	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80203190:	00000206 	br	8020319c <bSdmaDmaM1FtdiTransfer+0x144>
				alt_busy_sleep(1); /* delay 1us */
80203194:	01000044 	movi	r4,1
80203198:	02166240 	call	80216624 <alt_busy_sleep>

	if ((bOperationFlag) && (bAddressFlag) && (usiRoundedTransferSizeInBytes <= 8192)) {

		if (pxDmaM1Dev != NULL) {
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
8020319c:	d0a01417 	ldw	r2,-32688(gp)
802031a0:	10800317 	ldw	r2,12(r2)
802031a4:	10800037 	ldwio	r2,0(r2)
802031a8:	1080010c 	andi	r2,r2,4
802031ac:	103ff91e 	bne	r2,zero,80203194 <__reset+0xfa1e3194>
				alt_busy_sleep(1); /* delay 1us */
			}
			/* Success = 0 */
			if (0 == iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
802031b0:	d2201417 	ldw	r8,-32688(gp)
802031b4:	e1bff617 	ldw	r6,-40(fp)
802031b8:	e1fff417 	ldw	r7,-48(fp)
802031bc:	e0bffa0b 	ldhu	r2,-24(fp)
802031c0:	e0fff717 	ldw	r3,-36(fp)
802031c4:	e13ff517 	ldw	r4,-44(fp)
802031c8:	01400044 	movi	r5,1
802031cc:	d9400815 	stw	r5,32(sp)
802031d0:	01400044 	movi	r5,1
802031d4:	d9400715 	stw	r5,28(sp)
802031d8:	01400044 	movi	r5,1
802031dc:	d9400615 	stw	r5,24(sp)
802031e0:	01400044 	movi	r5,1
802031e4:	d9400515 	stw	r5,20(sp)
802031e8:	01400044 	movi	r5,1
802031ec:	d9400415 	stw	r5,16(sp)
802031f0:	d9000315 	stw	r4,12(sp)
802031f4:	d8c00215 	stw	r3,8(sp)
802031f8:	e0fffb17 	ldw	r3,-20(fp)
802031fc:	d8c00115 	stw	r3,4(sp)
80203200:	d8800015 	stw	r2,0(sp)
80203204:	800b883a 	mov	r5,r16
80203208:	4009883a 	mov	r4,r8
8020320c:	02044d40 	call	802044d4 <iMsgdmaConstructExtendedMmToMmDescriptor>
80203210:	1000071e 	bne	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>
					(alt_u32 *) uliDestAddrLow,
					usiRoundedTransferSizeInBytes, uliControlBits,
					(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
					1, 1, 1, 1, 1)	) {
				/* Success = 0 */
				if (0 == iMsgdmaExtendedDescriptorAsyncTransfer(pxDmaM1Dev,	&xDmaExtendedDescriptor)) {
80203214:	d0a01417 	ldw	r2,-32688(gp)
80203218:	800b883a 	mov	r5,r16
8020321c:	1009883a 	mov	r4,r2
80203220:	020458c0 	call	8020458c <iMsgdmaExtendedDescriptorAsyncTransfer>
80203224:	1000021e 	bne	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>
					bStatus = TRUE;
80203228:	00800044 	movi	r2,1
8020322c:	e0bff315 	stw	r2,-52(fp)
				}
			}
		}
	}
	return bStatus;
80203230:	e0bff317 	ldw	r2,-52(fp)
}
80203234:	e6ffff04 	addi	sp,fp,-4
80203238:	dfc00217 	ldw	ra,8(sp)
8020323c:	df000117 	ldw	fp,4(sp)
80203240:	dc000017 	ldw	r16,0(sp)
80203244:	dec00304 	addi	sp,sp,12
80203248:	f800283a 	ret

8020324c <bSdmaDmaM2FtdiTransfer>:

bool bSdmaDmaM2FtdiTransfer(alt_u32 *uliDdrInitialAddr, alt_u16 usiTransferSizeInBytes, alt_u8 ucFtdiOperation) {
8020324c:	deffe804 	addi	sp,sp,-96
80203250:	dfc01715 	stw	ra,92(sp)
80203254:	df001615 	stw	fp,88(sp)
80203258:	dc001515 	stw	r16,84(sp)
8020325c:	df001604 	addi	fp,sp,88
80203260:	e13ffc15 	stw	r4,-16(fp)
80203264:	2807883a 	mov	r3,r5
80203268:	3005883a 	mov	r2,r6
8020326c:	e0fffd0d 	sth	r3,-12(fp)
80203270:	e0bffe05 	stb	r2,-8(fp)
80203274:	defff004 	addi	sp,sp,-64
80203278:	d8800904 	addi	r2,sp,36
8020327c:	108007c4 	addi	r2,r2,31
80203280:	1004d17a 	srli	r2,r2,5
80203284:	1020917a 	slli	r16,r2,5
	bool bStatus;

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
80203288:	e03ff415 	stw	zero,-48(fp)
	alt_u32 uliDestAddrHigh = 0;
8020328c:	e03ff515 	stw	zero,-44(fp)

	alt_u32 uliSrcAddrLow = 0;
80203290:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliSrcAddrHigh = 0;
80203294:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliControlBits = 0x00000000;
80203298:	e03ffb15 	stw	zero,-20(fp)
	bool bAddressFlag = FALSE;
8020329c:	e03ff815 	stw	zero,-32(fp)
	bool bOperationFlag = FALSE;
802032a0:	e03ff915 	stw	zero,-28(fp)

	alt_u16 usiRoundedTransferSizeInBytes = 0;
802032a4:	e03ffa0d 	sth	zero,-24(fp)

	bStatus = FALSE;
802032a8:	e03ff315 	stw	zero,-52(fp)

	switch (ucFtdiOperation) {
802032ac:	e0bffe03 	ldbu	r2,-8(fp)
802032b0:	10000326 	beq	r2,zero,802032c0 <bSdmaDmaM2FtdiTransfer+0x74>
802032b4:	10800060 	cmpeqi	r2,r2,1
802032b8:	10000c1e 	bne	r2,zero,802032ec <bSdmaDmaM2FtdiTransfer+0xa0>
802032bc:	00001606 	br	80203318 <bSdmaDmaM2FtdiTransfer+0xcc>

		case eSdmaTxFtdi:
				uliSrcAddrLow   = (alt_u32) SDMA_M2_BASE_ADDR_LOW	+ (alt_u32) uliDdrInitialAddr;
802032c0:	e0fffc17 	ldw	r3,-16(fp)
802032c4:	00a00034 	movhi	r2,32768
802032c8:	1885883a 	add	r2,r3,r2
802032cc:	e0bff615 	stw	r2,-40(fp)
				uliSrcAddrHigh  = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
802032d0:	e03ff715 	stw	zero,-36(fp)
				uliDestAddrLow  = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_LOW;
802032d4:	e03ff415 	stw	zero,-48(fp)
				uliDestAddrHigh = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_HIGH;
802032d8:	00800804 	movi	r2,32
802032dc:	e0bff515 	stw	r2,-44(fp)
				bOperationFlag = TRUE;
802032e0:	00800044 	movi	r2,1
802032e4:	e0bff915 	stw	r2,-28(fp)
			break;
802032e8:	00000d06 	br	80203320 <bSdmaDmaM2FtdiTransfer+0xd4>

		case eSdmaRxFtdi:
				uliSrcAddrLow   = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_LOW;
802032ec:	e03ff615 	stw	zero,-40(fp)
				uliSrcAddrHigh  = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_HIGH;
802032f0:	00800804 	movi	r2,32
802032f4:	e0bff715 	stw	r2,-36(fp)
				uliDestAddrLow  = (alt_u32) SDMA_M2_BASE_ADDR_LOW	+ (alt_u32) uliDdrInitialAddr;
802032f8:	e0fffc17 	ldw	r3,-16(fp)
802032fc:	00a00034 	movhi	r2,32768
80203300:	1885883a 	add	r2,r3,r2
80203304:	e0bff415 	stw	r2,-48(fp)
				uliDestAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
80203308:	e03ff515 	stw	zero,-44(fp)
				bOperationFlag = TRUE;
8020330c:	00800044 	movi	r2,1
80203310:	e0bff915 	stw	r2,-28(fp)
			break;
80203314:	00000206 	br	80203320 <bSdmaDmaM2FtdiTransfer+0xd4>

		default:
			bOperationFlag = FALSE;
80203318:	e03ff915 	stw	zero,-28(fp)
			break;
8020331c:	0001883a 	nop

	}

	// Rounding up the size to the nearest multiple of 8 (8 bytes = 64b = size of memory access)
	if (usiRoundedTransferSizeInBytes % 8) {
80203320:	e0bffa0b 	ldhu	r2,-24(fp)
80203324:	108001cc 	andi	r2,r2,7
80203328:	10bfffcc 	andi	r2,r2,65535
8020332c:	10000726 	beq	r2,zero,8020334c <bSdmaDmaM2FtdiTransfer+0x100>
		// Transfer size is not a multiple of 8
		usiRoundedTransferSizeInBytes = ((alt_u16) (usiTransferSizeInBytes / 8) + 1) * 8;
80203330:	e0bffd0b 	ldhu	r2,-12(fp)
80203334:	1004d0fa 	srli	r2,r2,3
80203338:	10bfffcc 	andi	r2,r2,65535
8020333c:	10800044 	addi	r2,r2,1
80203340:	100490fa 	slli	r2,r2,3
80203344:	e0bffa0d 	sth	r2,-24(fp)
80203348:	00000206 	br	80203354 <bSdmaDmaM2FtdiTransfer+0x108>
	} else {
		usiRoundedTransferSizeInBytes = usiTransferSizeInBytes;
8020334c:	e0bffd0b 	ldhu	r2,-12(fp)
80203350:	e0bffa0d 	sth	r2,-24(fp)
	}

	// Verify if the base address is a multiple o 8 (8 bytes = 64b = size of memory access)
	if (uliSrcAddrLow % 8) {
80203354:	e0bff617 	ldw	r2,-40(fp)
80203358:	108001cc 	andi	r2,r2,7
8020335c:	10000226 	beq	r2,zero,80203368 <bSdmaDmaM2FtdiTransfer+0x11c>
		// Address is not a multiple of 8
		bAddressFlag = FALSE;
80203360:	e03ff815 	stw	zero,-32(fp)
80203364:	00000206 	br	80203370 <bSdmaDmaM2FtdiTransfer+0x124>
	} else {
		bAddressFlag = TRUE;
80203368:	00800044 	movi	r2,1
8020336c:	e0bff815 	stw	r2,-32(fp)
	}

	if ((bOperationFlag) && (bAddressFlag) && (usiRoundedTransferSizeInBytes <= 8192)) {
80203370:	e0bff917 	ldw	r2,-28(fp)
80203374:	10002f26 	beq	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>
80203378:	e0bff817 	ldw	r2,-32(fp)
8020337c:	10002d26 	beq	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>
80203380:	e0bffa0b 	ldhu	r2,-24(fp)
80203384:	10880068 	cmpgeui	r2,r2,8193
80203388:	10002a1e 	bne	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>
		if (pxDmaM2Dev != NULL) {
8020338c:	d0a01517 	ldw	r2,-32684(gp)
80203390:	10002826 	beq	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>

			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80203394:	00000206 	br	802033a0 <bSdmaDmaM2FtdiTransfer+0x154>
				alt_busy_sleep(1); /* delay 1us */
80203398:	01000044 	movi	r4,1
8020339c:	02166240 	call	80216624 <alt_busy_sleep>
	}

	if ((bOperationFlag) && (bAddressFlag) && (usiRoundedTransferSizeInBytes <= 8192)) {
		if (pxDmaM2Dev != NULL) {

			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
802033a0:	d0a01517 	ldw	r2,-32684(gp)
802033a4:	10800317 	ldw	r2,12(r2)
802033a8:	10800037 	ldwio	r2,0(r2)
802033ac:	1080010c 	andi	r2,r2,4
802033b0:	103ff91e 	bne	r2,zero,80203398 <__reset+0xfa1e3398>
				alt_busy_sleep(1); /* delay 1us */
			}
			/* Success = 0 */
			if ( 0 == iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
802033b4:	d2201517 	ldw	r8,-32684(gp)
802033b8:	e1bff617 	ldw	r6,-40(fp)
802033bc:	e1fff417 	ldw	r7,-48(fp)
802033c0:	e0bffa0b 	ldhu	r2,-24(fp)
802033c4:	e0fff717 	ldw	r3,-36(fp)
802033c8:	e13ff517 	ldw	r4,-44(fp)
802033cc:	01400044 	movi	r5,1
802033d0:	d9400815 	stw	r5,32(sp)
802033d4:	01400044 	movi	r5,1
802033d8:	d9400715 	stw	r5,28(sp)
802033dc:	01400044 	movi	r5,1
802033e0:	d9400615 	stw	r5,24(sp)
802033e4:	01400044 	movi	r5,1
802033e8:	d9400515 	stw	r5,20(sp)
802033ec:	01400044 	movi	r5,1
802033f0:	d9400415 	stw	r5,16(sp)
802033f4:	d9000315 	stw	r4,12(sp)
802033f8:	d8c00215 	stw	r3,8(sp)
802033fc:	e0fffb17 	ldw	r3,-20(fp)
80203400:	d8c00115 	stw	r3,4(sp)
80203404:	d8800015 	stw	r2,0(sp)
80203408:	800b883a 	mov	r5,r16
8020340c:	4009883a 	mov	r4,r8
80203410:	02044d40 	call	802044d4 <iMsgdmaConstructExtendedMmToMmDescriptor>
80203414:	1000071e 	bne	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>
					(alt_u32 *) uliDestAddrLow,
					usiRoundedTransferSizeInBytes, uliControlBits,
					(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
					1, 1, 1, 1, 1)) {
				/* Success = 0 */
				if ( 0 == iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
80203418:	d0a01517 	ldw	r2,-32684(gp)
8020341c:	800b883a 	mov	r5,r16
80203420:	1009883a 	mov	r4,r2
80203424:	02045c80 	call	802045c8 <iMsgdmaExtendedDescriptorSyncTransfer>
80203428:	1000021e 	bne	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>
						&xDmaExtendedDescriptor)) {
					bStatus = TRUE;
8020342c:	00800044 	movi	r2,1
80203430:	e0bff315 	stw	r2,-52(fp)
				}
			}
		}
	}
	return bStatus;
80203434:	e0bff317 	ldw	r2,-52(fp)
}
80203438:	e6ffff04 	addi	sp,fp,-4
8020343c:	dfc00217 	ldw	ra,8(sp)
80203440:	df000117 	ldw	fp,4(sp)
80203444:	dc000017 	ldw	r16,0(sp)
80203448:	dec00304 	addi	sp,sp,12
8020344c:	f800283a 	ret

80203450 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
80203450:	defffa04 	addi	sp,sp,-24
80203454:	dfc00515 	stw	ra,20(sp)
80203458:	df000415 	stw	fp,16(sp)
8020345c:	df000404 	addi	fp,sp,16
80203460:	e13ffd15 	stw	r4,-12(fp)
80203464:	e17ffe15 	stw	r5,-8(fp)
80203468:	3005883a 	mov	r2,r6
8020346c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
80203470:	00800044 	movi	r2,1
80203474:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
80203478:	e17ffe17 	ldw	r5,-8(fp)
8020347c:	e13ffd17 	ldw	r4,-12(fp)
80203480:	02038000 	call	80203800 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
80203484:	e0bfff03 	ldbu	r2,-4(fp)
80203488:	10803fcc 	andi	r2,r2,255
8020348c:	100d883a 	mov	r6,r2
80203490:	e17ffe17 	ldw	r5,-8(fp)
80203494:	e13ffd17 	ldw	r4,-12(fp)
80203498:	02039040 	call	80203904 <i2c_write>
8020349c:	1000011e 	bne	r2,zero,802034a4 <I2C_TestAdress+0x54>
        bSuccess = FALSE;
802034a0:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
802034a4:	e17ffe17 	ldw	r5,-8(fp)
802034a8:	e13ffd17 	ldw	r4,-12(fp)
802034ac:	020388c0 	call	8020388c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
802034b0:	0106d604 	movi	r4,7000
802034b4:	02170340 	call	80217034 <usleep>
    
    return bSuccess;
802034b8:	e0bffc17 	ldw	r2,-16(fp)

}
802034bc:	e037883a 	mov	sp,fp
802034c0:	dfc00117 	ldw	ra,4(sp)
802034c4:	df000017 	ldw	fp,0(sp)
802034c8:	dec00204 	addi	sp,sp,8
802034cc:	f800283a 	ret

802034d0 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
802034d0:	defff804 	addi	sp,sp,-32
802034d4:	dfc00715 	stw	ra,28(sp)
802034d8:	df000615 	stw	fp,24(sp)
802034dc:	df000604 	addi	fp,sp,24
802034e0:	e13ffb15 	stw	r4,-20(fp)
802034e4:	e17ffc15 	stw	r5,-16(fp)
802034e8:	3009883a 	mov	r4,r6
802034ec:	3807883a 	mov	r3,r7
802034f0:	e0800217 	ldw	r2,8(fp)
802034f4:	e13ffd05 	stb	r4,-12(fp)
802034f8:	e0fffe05 	stb	r3,-8(fp)
802034fc:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
80203500:	00800044 	movi	r2,1
80203504:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
80203508:	e17ffc17 	ldw	r5,-16(fp)
8020350c:	e13ffb17 	ldw	r4,-20(fp)
80203510:	02038000 	call	80203800 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
80203514:	e0bffd03 	ldbu	r2,-12(fp)
80203518:	10803fcc 	andi	r2,r2,255
8020351c:	100d883a 	mov	r6,r2
80203520:	e17ffc17 	ldw	r5,-16(fp)
80203524:	e13ffb17 	ldw	r4,-20(fp)
80203528:	02039040 	call	80203904 <i2c_write>
8020352c:	1000011e 	bne	r2,zero,80203534 <I2C_Write+0x64>
        bSuccess = FALSE;
80203530:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
80203534:	e0bffa17 	ldw	r2,-24(fp)
80203538:	10000726 	beq	r2,zero,80203558 <I2C_Write+0x88>
8020353c:	e0bffe03 	ldbu	r2,-8(fp)
80203540:	100d883a 	mov	r6,r2
80203544:	e17ffc17 	ldw	r5,-16(fp)
80203548:	e13ffb17 	ldw	r4,-20(fp)
8020354c:	02039040 	call	80203904 <i2c_write>
80203550:	1000011e 	bne	r2,zero,80203558 <I2C_Write+0x88>
        bSuccess = FALSE;
80203554:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
80203558:	e0bffa17 	ldw	r2,-24(fp)
8020355c:	10000726 	beq	r2,zero,8020357c <I2C_Write+0xac>
80203560:	e0bfff03 	ldbu	r2,-4(fp)
80203564:	100d883a 	mov	r6,r2
80203568:	e17ffc17 	ldw	r5,-16(fp)
8020356c:	e13ffb17 	ldw	r4,-20(fp)
80203570:	02039040 	call	80203904 <i2c_write>
80203574:	1000011e 	bne	r2,zero,8020357c <I2C_Write+0xac>
        bSuccess = FALSE;
80203578:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
8020357c:	e17ffc17 	ldw	r5,-16(fp)
80203580:	e13ffb17 	ldw	r4,-20(fp)
80203584:	020388c0 	call	8020388c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
80203588:	0106d604 	movi	r4,7000
8020358c:	02170340 	call	80217034 <usleep>
    
    return bSuccess;
80203590:	e0bffa17 	ldw	r2,-24(fp)

}
80203594:	e037883a 	mov	sp,fp
80203598:	dfc00117 	ldw	ra,4(sp)
8020359c:	df000017 	ldw	fp,0(sp)
802035a0:	dec00204 	addi	sp,sp,8
802035a4:	f800283a 	ret

802035a8 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
802035a8:	defff904 	addi	sp,sp,-28
802035ac:	dfc00615 	stw	ra,24(sp)
802035b0:	df000515 	stw	fp,20(sp)
802035b4:	df000504 	addi	fp,sp,20
802035b8:	e13ffc15 	stw	r4,-16(fp)
802035bc:	e17ffd15 	stw	r5,-12(fp)
802035c0:	3007883a 	mov	r3,r6
802035c4:	3805883a 	mov	r2,r7
802035c8:	e0fffe05 	stb	r3,-8(fp)
802035cc:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
802035d0:	00800044 	movi	r2,1
802035d4:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
802035d8:	e17ffd17 	ldw	r5,-12(fp)
802035dc:	e13ffc17 	ldw	r4,-16(fp)
802035e0:	02038000 	call	80203800 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
802035e4:	e0bffe03 	ldbu	r2,-8(fp)
802035e8:	10803fcc 	andi	r2,r2,255
802035ec:	100d883a 	mov	r6,r2
802035f0:	e17ffd17 	ldw	r5,-12(fp)
802035f4:	e13ffc17 	ldw	r4,-16(fp)
802035f8:	02039040 	call	80203904 <i2c_write>
802035fc:	1000011e 	bne	r2,zero,80203604 <I2C_Read+0x5c>
        bSuccess = FALSE;
80203600:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
80203604:	e0bffb17 	ldw	r2,-20(fp)
80203608:	10000726 	beq	r2,zero,80203628 <I2C_Read+0x80>
8020360c:	e0bfff03 	ldbu	r2,-4(fp)
80203610:	100d883a 	mov	r6,r2
80203614:	e17ffd17 	ldw	r5,-12(fp)
80203618:	e13ffc17 	ldw	r4,-16(fp)
8020361c:	02039040 	call	80203904 <i2c_write>
80203620:	1000011e 	bne	r2,zero,80203628 <I2C_Read+0x80>
        bSuccess = FALSE;
80203624:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
80203628:	e17ffd17 	ldw	r5,-12(fp)
8020362c:	e13ffc17 	ldw	r4,-16(fp)
80203630:	02038000 	call	80203800 <i2c_start>
    DeviceAddr |= 1; // Read
80203634:	e0bffe03 	ldbu	r2,-8(fp)
80203638:	10800054 	ori	r2,r2,1
8020363c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
80203640:	e0bffb17 	ldw	r2,-20(fp)
80203644:	10000826 	beq	r2,zero,80203668 <I2C_Read+0xc0>
80203648:	e0bffe03 	ldbu	r2,-8(fp)
8020364c:	10803fcc 	andi	r2,r2,255
80203650:	100d883a 	mov	r6,r2
80203654:	e17ffd17 	ldw	r5,-12(fp)
80203658:	e13ffc17 	ldw	r4,-16(fp)
8020365c:	02039040 	call	80203904 <i2c_write>
80203660:	1000011e 	bne	r2,zero,80203668 <I2C_Read+0xc0>
        bSuccess = FALSE;
80203664:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
80203668:	e0bffb17 	ldw	r2,-20(fp)
8020366c:	10000526 	beq	r2,zero,80203684 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
80203670:	000f883a 	mov	r7,zero
80203674:	e1800217 	ldw	r6,8(fp)
80203678:	e17ffd17 	ldw	r5,-12(fp)
8020367c:	e13ffc17 	ldw	r4,-16(fp)
80203680:	0203a340 	call	80203a34 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
80203684:	e17ffd17 	ldw	r5,-12(fp)
80203688:	e13ffc17 	ldw	r4,-16(fp)
8020368c:	020388c0 	call	8020388c <i2c_stop>
    
    return bSuccess;
80203690:	e0bffb17 	ldw	r2,-20(fp)
}
80203694:	e037883a 	mov	sp,fp
80203698:	dfc00117 	ldw	ra,4(sp)
8020369c:	df000017 	ldw	fp,0(sp)
802036a0:	dec00204 	addi	sp,sp,8
802036a4:	f800283a 	ret

802036a8 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
802036a8:	defff604 	addi	sp,sp,-40
802036ac:	dfc00915 	stw	ra,36(sp)
802036b0:	df000815 	stw	fp,32(sp)
802036b4:	df000804 	addi	fp,sp,32
802036b8:	e13ffb15 	stw	r4,-20(fp)
802036bc:	e17ffc15 	stw	r5,-16(fp)
802036c0:	3007883a 	mov	r3,r6
802036c4:	e1fffe15 	stw	r7,-8(fp)
802036c8:	e0800217 	ldw	r2,8(fp)
802036cc:	e0fffd05 	stb	r3,-12(fp)
802036d0:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
802036d4:	00800044 	movi	r2,1
802036d8:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
802036dc:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
802036e0:	e17ffc17 	ldw	r5,-16(fp)
802036e4:	e13ffb17 	ldw	r4,-20(fp)
802036e8:	02038000 	call	80203800 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
802036ec:	e0bffd03 	ldbu	r2,-12(fp)
802036f0:	10803fcc 	andi	r2,r2,255
802036f4:	100d883a 	mov	r6,r2
802036f8:	e17ffc17 	ldw	r5,-16(fp)
802036fc:	e13ffb17 	ldw	r4,-20(fp)
80203700:	02039040 	call	80203904 <i2c_write>
80203704:	1000011e 	bne	r2,zero,8020370c <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
80203708:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
8020370c:	e0bff917 	ldw	r2,-28(fp)
80203710:	10000726 	beq	r2,zero,80203730 <I2C_MultipleRead+0x88>
80203714:	e0bffa03 	ldbu	r2,-24(fp)
80203718:	100d883a 	mov	r6,r2
8020371c:	e17ffc17 	ldw	r5,-16(fp)
80203720:	e13ffb17 	ldw	r4,-20(fp)
80203724:	02039040 	call	80203904 <i2c_write>
80203728:	1000011e 	bne	r2,zero,80203730 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
8020372c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
80203730:	e0bff917 	ldw	r2,-28(fp)
80203734:	10000326 	beq	r2,zero,80203744 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
80203738:	e17ffc17 	ldw	r5,-16(fp)
8020373c:	e13ffb17 	ldw	r4,-20(fp)
80203740:	02038000 	call	80203800 <i2c_start>
    DeviceAddr |= 1; // Read
80203744:	e0bffd03 	ldbu	r2,-12(fp)
80203748:	10800054 	ori	r2,r2,1
8020374c:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
80203750:	e0bff917 	ldw	r2,-28(fp)
80203754:	10000826 	beq	r2,zero,80203778 <I2C_MultipleRead+0xd0>
80203758:	e0bffd03 	ldbu	r2,-12(fp)
8020375c:	10803fcc 	andi	r2,r2,255
80203760:	100d883a 	mov	r6,r2
80203764:	e17ffc17 	ldw	r5,-16(fp)
80203768:	e13ffb17 	ldw	r4,-20(fp)
8020376c:	02039040 	call	80203904 <i2c_write>
80203770:	1000011e 	bne	r2,zero,80203778 <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
80203774:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
80203778:	e0bff917 	ldw	r2,-28(fp)
8020377c:	10001726 	beq	r2,zero,802037dc <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
80203780:	e03ff815 	stw	zero,-32(fp)
80203784:	00001006 	br	802037c8 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
80203788:	e0bff817 	ldw	r2,-32(fp)
8020378c:	e0fffe17 	ldw	r3,-8(fp)
80203790:	1889883a 	add	r4,r3,r2
80203794:	e0bfff0b 	ldhu	r2,-4(fp)
80203798:	10ffffc4 	addi	r3,r2,-1
8020379c:	e0bff817 	ldw	r2,-32(fp)
802037a0:	1884c03a 	cmpne	r2,r3,r2
802037a4:	10803fcc 	andi	r2,r2,255
802037a8:	100f883a 	mov	r7,r2
802037ac:	200d883a 	mov	r6,r4
802037b0:	e17ffc17 	ldw	r5,-16(fp)
802037b4:	e13ffb17 	ldw	r4,-20(fp)
802037b8:	0203a340 	call	80203a34 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
802037bc:	e0bff817 	ldw	r2,-32(fp)
802037c0:	10800044 	addi	r2,r2,1
802037c4:	e0bff815 	stw	r2,-32(fp)
802037c8:	e0bfff0b 	ldhu	r2,-4(fp)
802037cc:	e0fff817 	ldw	r3,-32(fp)
802037d0:	1880020e 	bge	r3,r2,802037dc <I2C_MultipleRead+0x134>
802037d4:	e0bff917 	ldw	r2,-28(fp)
802037d8:	103feb1e 	bne	r2,zero,80203788 <__reset+0xfa1e3788>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
802037dc:	e17ffc17 	ldw	r5,-16(fp)
802037e0:	e13ffb17 	ldw	r4,-20(fp)
802037e4:	020388c0 	call	8020388c <i2c_stop>
    
    return bSuccess;    
802037e8:	e0bff917 	ldw	r2,-28(fp)
    
}
802037ec:	e037883a 	mov	sp,fp
802037f0:	dfc00117 	ldw	ra,4(sp)
802037f4:	df000017 	ldw	fp,0(sp)
802037f8:	dec00204 	addi	sp,sp,8
802037fc:	f800283a 	ret

80203800 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
80203800:	defffc04 	addi	sp,sp,-16
80203804:	dfc00315 	stw	ra,12(sp)
80203808:	df000215 	stw	fp,8(sp)
8020380c:	df000204 	addi	fp,sp,8
80203810:	e13ffe15 	stw	r4,-8(fp)
80203814:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
80203818:	e0bfff17 	ldw	r2,-4(fp)
8020381c:	10800104 	addi	r2,r2,4
80203820:	1007883a 	mov	r3,r2
80203824:	00800044 	movi	r2,1
80203828:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
8020382c:	e0bfff17 	ldw	r2,-4(fp)
80203830:	00c00044 	movi	r3,1
80203834:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
80203838:	e0bffe17 	ldw	r2,-8(fp)
8020383c:	00c00044 	movi	r3,1
80203840:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
80203844:	01000044 	movi	r4,1
80203848:	02170340 	call	80217034 <usleep>
     
    SDA_LOW(data_base); // data low
8020384c:	e0bfff17 	ldw	r2,-4(fp)
80203850:	0007883a 	mov	r3,zero
80203854:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
80203858:	01000044 	movi	r4,1
8020385c:	02170340 	call	80217034 <usleep>
    SCL_LOW(clk_base); // clock low
80203860:	e0bffe17 	ldw	r2,-8(fp)
80203864:	0007883a 	mov	r3,zero
80203868:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
8020386c:	01000044 	movi	r4,1
80203870:	02170340 	call	80217034 <usleep>
}
80203874:	0001883a 	nop
80203878:	e037883a 	mov	sp,fp
8020387c:	dfc00117 	ldw	ra,4(sp)
80203880:	df000017 	ldw	fp,0(sp)
80203884:	dec00204 	addi	sp,sp,8
80203888:	f800283a 	ret

8020388c <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
8020388c:	defffc04 	addi	sp,sp,-16
80203890:	dfc00315 	stw	ra,12(sp)
80203894:	df000215 	stw	fp,8(sp)
80203898:	df000204 	addi	fp,sp,8
8020389c:	e13ffe15 	stw	r4,-8(fp)
802038a0:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
802038a4:	e0bfff17 	ldw	r2,-4(fp)
802038a8:	10800104 	addi	r2,r2,4
802038ac:	1007883a 	mov	r3,r2
802038b0:	00800044 	movi	r2,1
802038b4:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
802038b8:	e0bfff17 	ldw	r2,-4(fp)
802038bc:	0007883a 	mov	r3,zero
802038c0:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
802038c4:	e0bffe17 	ldw	r2,-8(fp)
802038c8:	00c00044 	movi	r3,1
802038cc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
802038d0:	01000044 	movi	r4,1
802038d4:	02170340 	call	80217034 <usleep>
    SDA_HIGH(data_base); // data high
802038d8:	e0bfff17 	ldw	r2,-4(fp)
802038dc:	00c00044 	movi	r3,1
802038e0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
802038e4:	01000044 	movi	r4,1
802038e8:	02170340 	call	80217034 <usleep>
    

    
}
802038ec:	0001883a 	nop
802038f0:	e037883a 	mov	sp,fp
802038f4:	dfc00117 	ldw	ra,4(sp)
802038f8:	df000017 	ldw	fp,0(sp)
802038fc:	dec00204 	addi	sp,sp,8
80203900:	f800283a 	ret

80203904 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
80203904:	defff804 	addi	sp,sp,-32
80203908:	dfc00715 	stw	ra,28(sp)
8020390c:	df000615 	stw	fp,24(sp)
80203910:	df000604 	addi	fp,sp,24
80203914:	e13ffd15 	stw	r4,-12(fp)
80203918:	e17ffe15 	stw	r5,-8(fp)
8020391c:	3005883a 	mov	r2,r6
80203920:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
80203924:	00bfe004 	movi	r2,-128
80203928:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
8020392c:	e0bffe17 	ldw	r2,-8(fp)
80203930:	10800104 	addi	r2,r2,4
80203934:	1007883a 	mov	r3,r2
80203938:	00800044 	movi	r2,1
8020393c:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
80203940:	e03ffb15 	stw	zero,-20(fp)
80203944:	00001f06 	br	802039c4 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
80203948:	e0bffd17 	ldw	r2,-12(fp)
8020394c:	0007883a 	mov	r3,zero
80203950:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
80203954:	e0ffff03 	ldbu	r3,-4(fp)
80203958:	e0bffa03 	ldbu	r2,-24(fp)
8020395c:	1884703a 	and	r2,r3,r2
80203960:	10803fcc 	andi	r2,r2,255
80203964:	10000426 	beq	r2,zero,80203978 <i2c_write+0x74>
            SDA_HIGH(data_base);
80203968:	e0bffe17 	ldw	r2,-8(fp)
8020396c:	00c00044 	movi	r3,1
80203970:	10c00035 	stwio	r3,0(r2)
80203974:	00000306 	br	80203984 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
80203978:	e0bffe17 	ldw	r2,-8(fp)
8020397c:	0007883a 	mov	r3,zero
80203980:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
80203984:	e0bffa03 	ldbu	r2,-24(fp)
80203988:	1004d07a 	srli	r2,r2,1
8020398c:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
80203990:	e0bffd17 	ldw	r2,-12(fp)
80203994:	00c00044 	movi	r3,1
80203998:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
8020399c:	01000044 	movi	r4,1
802039a0:	02170340 	call	80217034 <usleep>
        SCL_LOW(clk_base);
802039a4:	e0bffd17 	ldw	r2,-12(fp)
802039a8:	0007883a 	mov	r3,zero
802039ac:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
802039b0:	01000044 	movi	r4,1
802039b4:	02170340 	call	80217034 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
802039b8:	e0bffb17 	ldw	r2,-20(fp)
802039bc:	10800044 	addi	r2,r2,1
802039c0:	e0bffb15 	stw	r2,-20(fp)
802039c4:	e0bffb17 	ldw	r2,-20(fp)
802039c8:	10800210 	cmplti	r2,r2,8
802039cc:	103fde1e 	bne	r2,zero,80203948 <__reset+0xfa1e3948>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
802039d0:	e0bffe17 	ldw	r2,-8(fp)
802039d4:	10800104 	addi	r2,r2,4
802039d8:	0007883a 	mov	r3,zero
802039dc:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
802039e0:	e0bffd17 	ldw	r2,-12(fp)
802039e4:	00c00044 	movi	r3,1
802039e8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
802039ec:	01000044 	movi	r4,1
802039f0:	02170340 	call	80217034 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
802039f4:	e0bffe17 	ldw	r2,-8(fp)
802039f8:	10800037 	ldwio	r2,0(r2)
802039fc:	1005003a 	cmpeq	r2,r2,zero
80203a00:	10803fcc 	andi	r2,r2,255
80203a04:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
80203a08:	e0bffd17 	ldw	r2,-12(fp)
80203a0c:	0007883a 	mov	r3,zero
80203a10:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
80203a14:	01000044 	movi	r4,1
80203a18:	02170340 	call	80217034 <usleep>
    return bAck;
80203a1c:	e0bffc17 	ldw	r2,-16(fp)
}    
80203a20:	e037883a 	mov	sp,fp
80203a24:	dfc00117 	ldw	ra,4(sp)
80203a28:	df000017 	ldw	fp,0(sp)
80203a2c:	dec00204 	addi	sp,sp,8
80203a30:	f800283a 	ret

80203a34 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
80203a34:	defff804 	addi	sp,sp,-32
80203a38:	dfc00715 	stw	ra,28(sp)
80203a3c:	df000615 	stw	fp,24(sp)
80203a40:	df000604 	addi	fp,sp,24
80203a44:	e13ffc15 	stw	r4,-16(fp)
80203a48:	e17ffd15 	stw	r5,-12(fp)
80203a4c:	e1bffe15 	stw	r6,-8(fp)
80203a50:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
80203a54:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
80203a58:	e0bffd17 	ldw	r2,-12(fp)
80203a5c:	10800104 	addi	r2,r2,4
80203a60:	0007883a 	mov	r3,zero
80203a64:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
80203a68:	e0bffc17 	ldw	r2,-16(fp)
80203a6c:	0007883a 	mov	r3,zero
80203a70:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
80203a74:	01000044 	movi	r4,1
80203a78:	02170340 	call	80217034 <usleep>

    for(i=0;i<8;i++){
80203a7c:	e03ffb15 	stw	zero,-20(fp)
80203a80:	00001606 	br	80203adc <i2c_read+0xa8>
        Data <<= 1;
80203a84:	e0bffa03 	ldbu	r2,-24(fp)
80203a88:	1085883a 	add	r2,r2,r2
80203a8c:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
80203a90:	e0bffc17 	ldw	r2,-16(fp)
80203a94:	00c00044 	movi	r3,1
80203a98:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
80203a9c:	01000044 	movi	r4,1
80203aa0:	02170340 	call	80217034 <usleep>
        if (SDA_READ(data_base))  // read data   
80203aa4:	e0bffd17 	ldw	r2,-12(fp)
80203aa8:	10800037 	ldwio	r2,0(r2)
80203aac:	10000326 	beq	r2,zero,80203abc <i2c_read+0x88>
            Data |= 0x01;
80203ab0:	e0bffa03 	ldbu	r2,-24(fp)
80203ab4:	10800054 	ori	r2,r2,1
80203ab8:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
80203abc:	e0bffc17 	ldw	r2,-16(fp)
80203ac0:	0007883a 	mov	r3,zero
80203ac4:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
80203ac8:	01000044 	movi	r4,1
80203acc:	02170340 	call	80217034 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
80203ad0:	e0bffb17 	ldw	r2,-20(fp)
80203ad4:	10800044 	addi	r2,r2,1
80203ad8:	e0bffb15 	stw	r2,-20(fp)
80203adc:	e0bffb17 	ldw	r2,-20(fp)
80203ae0:	10800210 	cmplti	r2,r2,8
80203ae4:	103fe71e 	bne	r2,zero,80203a84 <__reset+0xfa1e3a84>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
80203ae8:	e0bffc17 	ldw	r2,-16(fp)
80203aec:	0007883a 	mov	r3,zero
80203af0:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
80203af4:	e0bffd17 	ldw	r2,-12(fp)
80203af8:	10800104 	addi	r2,r2,4
80203afc:	1007883a 	mov	r3,r2
80203b00:	00800044 	movi	r2,1
80203b04:	18800035 	stwio	r2,0(r3)
    if (bAck)
80203b08:	e0bfff17 	ldw	r2,-4(fp)
80203b0c:	10000426 	beq	r2,zero,80203b20 <i2c_read+0xec>
        SDA_LOW(data_base);
80203b10:	e0bffd17 	ldw	r2,-12(fp)
80203b14:	0007883a 	mov	r3,zero
80203b18:	10c00035 	stwio	r3,0(r2)
80203b1c:	00000306 	br	80203b2c <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
80203b20:	e0bffd17 	ldw	r2,-12(fp)
80203b24:	00c00044 	movi	r3,1
80203b28:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
80203b2c:	e0bffc17 	ldw	r2,-16(fp)
80203b30:	00c00044 	movi	r3,1
80203b34:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
80203b38:	01000044 	movi	r4,1
80203b3c:	02170340 	call	80217034 <usleep>
    SCL_LOW(clk_base); // clock low
80203b40:	e0bffc17 	ldw	r2,-16(fp)
80203b44:	0007883a 	mov	r3,zero
80203b48:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
80203b4c:	01000044 	movi	r4,1
80203b50:	02170340 	call	80217034 <usleep>
    SDA_LOW(data_base);  // data low
80203b54:	e0bffd17 	ldw	r2,-12(fp)
80203b58:	0007883a 	mov	r3,zero
80203b5c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
80203b60:	01000044 	movi	r4,1
80203b64:	02170340 	call	80217034 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
80203b68:	e0bffe17 	ldw	r2,-8(fp)
80203b6c:	e0fffa03 	ldbu	r3,-24(fp)
80203b70:	10c00005 	stb	r3,0(r2)
}
80203b74:	0001883a 	nop
80203b78:	e037883a 	mov	sp,fp
80203b7c:	dfc00117 	ldw	ra,4(sp)
80203b80:	df000017 	ldw	fp,0(sp)
80203b84:	dec00204 	addi	sp,sp,8
80203b88:	f800283a 	ret

80203b8c <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
80203b8c:	defffd04 	addi	sp,sp,-12
80203b90:	df000215 	stw	fp,8(sp)
80203b94:	df000204 	addi	fp,sp,8
80203b98:	e13ffe15 	stw	r4,-8(fp)
80203b9c:	2805883a 	mov	r2,r5
80203ba0:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
80203ba4:	e0bffe17 	ldw	r2,-8(fp)
80203ba8:	10800058 	cmpnei	r2,r2,1
80203bac:	1000071e 	bne	r2,zero,80203bcc <bSetBoardLeds+0x40>
	LedsBoardControl &= (~LedsMask);
80203bb0:	e0bfff03 	ldbu	r2,-4(fp)
80203bb4:	0084303a 	nor	r2,zero,r2
80203bb8:	1007883a 	mov	r3,r2
80203bbc:	d0a01903 	ldbu	r2,-32668(gp)
80203bc0:	1884703a 	and	r2,r3,r2
80203bc4:	d0a01905 	stb	r2,-32668(gp)
80203bc8:	00000406 	br	80203bdc <bSetBoardLeds+0x50>
  } else {
	LedsBoardControl |= LedsMask;
80203bcc:	d0e01903 	ldbu	r3,-32668(gp)
80203bd0:	e0bfff03 	ldbu	r2,-4(fp)
80203bd4:	1884b03a 	or	r2,r3,r2
80203bd8:	d0a01905 	stb	r2,-32668(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
80203bdc:	d0a01903 	ldbu	r2,-32668(gp)
80203be0:	10c03fcc 	andi	r3,r2,255
80203be4:	00a04034 	movhi	r2,33024
80203be8:	10816404 	addi	r2,r2,1424
80203bec:	10c00035 	stwio	r3,0(r2)

  return TRUE;
80203bf0:	00800044 	movi	r2,1
}
80203bf4:	e037883a 	mov	sp,fp
80203bf8:	df000017 	ldw	fp,0(sp)
80203bfc:	dec00104 	addi	sp,sp,4
80203c00:	f800283a 	ret

80203c04 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
80203c04:	defffd04 	addi	sp,sp,-12
80203c08:	df000215 	stw	fp,8(sp)
80203c0c:	df000204 	addi	fp,sp,8
80203c10:	e13ffe15 	stw	r4,-8(fp)
80203c14:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
80203c18:	e0bffe17 	ldw	r2,-8(fp)
80203c1c:	10800058 	cmpnei	r2,r2,1
80203c20:	1000051e 	bne	r2,zero,80203c38 <bSetPainelLeds+0x34>
	LedsPainelControl |= LedsMask;
80203c24:	d0e00017 	ldw	r3,-32768(gp)
80203c28:	e0bfff17 	ldw	r2,-4(fp)
80203c2c:	1884b03a 	or	r2,r3,r2
80203c30:	d0a00015 	stw	r2,-32768(gp)
80203c34:	00000506 	br	80203c4c <bSetPainelLeds+0x48>
  } else {
	LedsPainelControl &= (~LedsMask);
80203c38:	e0bfff17 	ldw	r2,-4(fp)
80203c3c:	0086303a 	nor	r3,zero,r2
80203c40:	d0a00017 	ldw	r2,-32768(gp)
80203c44:	1884703a 	and	r2,r3,r2
80203c48:	d0a00015 	stw	r2,-32768(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
80203c4c:	d0a00017 	ldw	r2,-32768(gp)
80203c50:	1007883a 	mov	r3,r2
80203c54:	00a04034 	movhi	r2,33024
80203c58:	10813004 	addi	r2,r2,1216
80203c5c:	10c00035 	stwio	r3,0(r2)

  return TRUE;
80203c60:	00800044 	movi	r2,1
}
80203c64:	e037883a 	mov	sp,fp
80203c68:	df000017 	ldw	fp,0(sp)
80203c6c:	dec00104 	addi	sp,sp,4
80203c70:	f800283a 	ret

80203c74 <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
80203c74:	defffc04 	addi	sp,sp,-16
80203c78:	df000315 	stw	fp,12(sp)
80203c7c:	df000304 	addi	fp,sp,12
80203c80:	e13ffd15 	stw	r4,-12(fp)
80203c84:	e17ffe15 	stw	r5,-8(fp)
80203c88:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
80203c8c:	e0bffd17 	ldw	r2,-12(fp)
80203c90:	10800037 	ldwio	r2,0(r2)
80203c94:	1080010c 	andi	r2,r2,4
80203c98:	10000226 	beq	r2,zero,80203ca4 <msgdma_write_extended_descriptor+0x30>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
80203c9c:	00bff904 	movi	r2,-28
80203ca0:	00003d06 	br	80203d98 <msgdma_write_extended_descriptor+0x124>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
80203ca4:	e0bfff17 	ldw	r2,-4(fp)
80203ca8:	10800017 	ldw	r2,0(r2)
80203cac:	1007883a 	mov	r3,r2
80203cb0:	e0bffe17 	ldw	r2,-8(fp)
80203cb4:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
80203cb8:	e0bffe17 	ldw	r2,-8(fp)
80203cbc:	10800104 	addi	r2,r2,4
80203cc0:	e0ffff17 	ldw	r3,-4(fp)
80203cc4:	18c00117 	ldw	r3,4(r3)
80203cc8:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base,
80203ccc:	e0bffe17 	ldw	r2,-8(fp)
80203cd0:	10800204 	addi	r2,r2,8
80203cd4:	e0ffff17 	ldw	r3,-4(fp)
80203cd8:	18c00217 	ldw	r3,8(r3)
80203cdc:	10c00035 	stwio	r3,0(r2)
			descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
80203ce0:	e0bffe17 	ldw	r2,-8(fp)
80203ce4:	10800304 	addi	r2,r2,12
80203ce8:	e0ffff17 	ldw	r3,-4(fp)
80203cec:	18c0030b 	ldhu	r3,12(r3)
80203cf0:	18ffffcc 	andi	r3,r3,65535
80203cf4:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
80203cf8:	e0bffe17 	ldw	r2,-8(fp)
80203cfc:	10800384 	addi	r2,r2,14
80203d00:	e0ffff17 	ldw	r3,-4(fp)
80203d04:	18c00383 	ldbu	r3,14(r3)
80203d08:	18c03fcc 	andi	r3,r3,255
80203d0c:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
80203d10:	e0bffe17 	ldw	r2,-8(fp)
80203d14:	108003c4 	addi	r2,r2,15
80203d18:	e0ffff17 	ldw	r3,-4(fp)
80203d1c:	18c003c3 	ldbu	r3,15(r3)
80203d20:	18c03fcc 	andi	r3,r3,255
80203d24:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
80203d28:	e0bffe17 	ldw	r2,-8(fp)
80203d2c:	10800404 	addi	r2,r2,16
80203d30:	e0ffff17 	ldw	r3,-4(fp)
80203d34:	18c0040b 	ldhu	r3,16(r3)
80203d38:	18ffffcc 	andi	r3,r3,65535
80203d3c:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
80203d40:	e0bffe17 	ldw	r2,-8(fp)
80203d44:	10800484 	addi	r2,r2,18
80203d48:	e0ffff17 	ldw	r3,-4(fp)
80203d4c:	18c0048b 	ldhu	r3,18(r3)
80203d50:	18ffffcc 	andi	r3,r3,65535
80203d54:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base,
80203d58:	e0bffe17 	ldw	r2,-8(fp)
80203d5c:	10800504 	addi	r2,r2,20
80203d60:	e0ffff17 	ldw	r3,-4(fp)
80203d64:	18c00517 	ldw	r3,20(r3)
80203d68:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base,
80203d6c:	e0bffe17 	ldw	r2,-8(fp)
80203d70:	10800604 	addi	r2,r2,24
80203d74:	e0ffff17 	ldw	r3,-4(fp)
80203d78:	18c00617 	ldw	r3,24(r3)
80203d7c:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
80203d80:	e0bffe17 	ldw	r2,-8(fp)
80203d84:	10800704 	addi	r2,r2,28
80203d88:	e0ffff17 	ldw	r3,-4(fp)
80203d8c:	18c00717 	ldw	r3,28(r3)
80203d90:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
80203d94:	0005883a 	mov	r2,zero
}
80203d98:	e037883a 	mov	sp,fp
80203d9c:	df000017 	ldw	fp,0(sp)
80203da0:	dec00104 	addi	sp,sp,4
80203da4:	f800283a 	ret

80203da8 <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
80203da8:	defff604 	addi	sp,sp,-40
80203dac:	df000915 	stw	fp,36(sp)
80203db0:	df000904 	addi	fp,sp,36
80203db4:	e13ff715 	stw	r4,-36(fp)
80203db8:	e17ff815 	stw	r5,-32(fp)
80203dbc:	e1bff915 	stw	r6,-28(fp)
80203dc0:	e1fffa15 	stw	r7,-24(fp)
80203dc4:	e1800517 	ldw	r6,20(fp)
80203dc8:	e1400617 	ldw	r5,24(fp)
80203dcc:	e1000717 	ldw	r4,28(fp)
80203dd0:	e0c00817 	ldw	r3,32(fp)
80203dd4:	e0800917 	ldw	r2,36(fp)
80203dd8:	e1bffb0d 	sth	r6,-20(fp)
80203ddc:	e17ffc05 	stb	r5,-16(fp)
80203de0:	e13ffd05 	stb	r4,-12(fp)
80203de4:	e0fffe0d 	sth	r3,-8(fp)
80203de8:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
80203dec:	e0bff717 	ldw	r2,-36(fp)
80203df0:	10c01217 	ldw	r3,72(r2)
80203df4:	e0800117 	ldw	r2,4(fp)
80203df8:	18801936 	bltu	r3,r2,80203e60 <msgdma_construct_extended_descriptor+0xb8>
80203dfc:	e13ff717 	ldw	r4,-36(fp)
80203e00:	20801317 	ldw	r2,76(r4)
80203e04:	20c01417 	ldw	r3,80(r4)
80203e08:	e13ffe0b 	ldhu	r4,-8(fp)
80203e0c:	213fffcc 	andi	r4,r4,65535
80203e10:	2015883a 	mov	r10,r4
80203e14:	0017883a 	mov	r11,zero
80203e18:	1ac01136 	bltu	r3,r11,80203e60 <msgdma_construct_extended_descriptor+0xb8>
80203e1c:	58c0011e 	bne	r11,r3,80203e24 <msgdma_construct_extended_descriptor+0x7c>
80203e20:	12800f36 	bltu	r2,r10,80203e60 <msgdma_construct_extended_descriptor+0xb8>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
80203e24:	e13ff717 	ldw	r4,-36(fp)
80203e28:	20801317 	ldw	r2,76(r4)
80203e2c:	20c01417 	ldw	r3,80(r4)
80203e30:	e13fff0b 	ldhu	r4,-4(fp)
80203e34:	213fffcc 	andi	r4,r4,65535
80203e38:	2011883a 	mov	r8,r4
80203e3c:	0013883a 	mov	r9,zero
80203e40:	1a400736 	bltu	r3,r9,80203e60 <msgdma_construct_extended_descriptor+0xb8>
80203e44:	48c0011e 	bne	r9,r3,80203e4c <msgdma_construct_extended_descriptor+0xa4>
80203e48:	12000536 	bltu	r2,r8,80203e60 <msgdma_construct_extended_descriptor+0xb8>
80203e4c:	e0bff717 	ldw	r2,-36(fp)
80203e50:	10801703 	ldbu	r2,92(r2)
80203e54:	10803fcc 	andi	r2,r2,255
80203e58:	10800060 	cmpeqi	r2,r2,1
80203e5c:	1000021e 	bne	r2,zero,80203e68 <msgdma_construct_extended_descriptor+0xc0>
		return -EINVAL;
80203e60:	00bffa84 	movi	r2,-22
80203e64:	00002306 	br	80203ef4 <msgdma_construct_extended_descriptor+0x14c>
	}

	descriptor->read_address_low = read_address;
80203e68:	e0bff817 	ldw	r2,-32(fp)
80203e6c:	e0fff917 	ldw	r3,-28(fp)
80203e70:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
80203e74:	e0bff817 	ldw	r2,-32(fp)
80203e78:	e0fffa17 	ldw	r3,-24(fp)
80203e7c:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
80203e80:	e0bff817 	ldw	r2,-32(fp)
80203e84:	e0c00117 	ldw	r3,4(fp)
80203e88:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
80203e8c:	e0bff817 	ldw	r2,-32(fp)
80203e90:	e0fffb0b 	ldhu	r3,-20(fp)
80203e94:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
80203e98:	e0bff817 	ldw	r2,-32(fp)
80203e9c:	e0fffc03 	ldbu	r3,-16(fp)
80203ea0:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
80203ea4:	e0bff817 	ldw	r2,-32(fp)
80203ea8:	e0fffd03 	ldbu	r3,-12(fp)
80203eac:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
80203eb0:	e0bff817 	ldw	r2,-32(fp)
80203eb4:	e0fffe0b 	ldhu	r3,-8(fp)
80203eb8:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
80203ebc:	e0bff817 	ldw	r2,-32(fp)
80203ec0:	e0ffff0b 	ldhu	r3,-4(fp)
80203ec4:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
80203ec8:	e0bff817 	ldw	r2,-32(fp)
80203ecc:	e0c00317 	ldw	r3,12(fp)
80203ed0:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
80203ed4:	e0bff817 	ldw	r2,-32(fp)
80203ed8:	e0c00417 	ldw	r3,16(fp)
80203edc:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80203ee0:	e0800217 	ldw	r2,8(fp)
80203ee4:	10e00034 	orhi	r3,r2,32768
80203ee8:	e0bff817 	ldw	r2,-32(fp)
80203eec:	10c00715 	stw	r3,28(r2)

	return 0;
80203ef0:	0005883a 	mov	r2,zero

}
80203ef4:	e037883a 	mov	sp,fp
80203ef8:	df000017 	ldw	fp,0(sp)
80203efc:	dec00104 	addi	sp,sp,4
80203f00:	f800283a 	ret

80203f04 <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
80203f04:	defff004 	addi	sp,sp,-64
80203f08:	dfc00f15 	stw	ra,60(sp)
80203f0c:	df000e15 	stw	fp,56(sp)
80203f10:	df000e04 	addi	fp,sp,56
80203f14:	e13ffd15 	stw	r4,-12(fp)
80203f18:	e17ffe15 	stw	r5,-8(fp)
80203f1c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
80203f20:	e03ff315 	stw	zero,-52(fp)
	alt_irq_context context = 0;
80203f24:	e03ff415 	stw	zero,-48(fp)
	alt_u16 counter = 0;
80203f28:	e03ff20d 	sth	zero,-56(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80203f2c:	e0bffd17 	ldw	r2,-12(fp)
80203f30:	10800317 	ldw	r2,12(r2)
80203f34:	10800204 	addi	r2,r2,8
80203f38:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
80203f3c:	10bfffcc 	andi	r2,r2,65535
80203f40:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80203f44:	e0bffd17 	ldw	r2,-12(fp)
80203f48:	10800317 	ldw	r2,12(r2)
80203f4c:	10800204 	addi	r2,r2,8
80203f50:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
80203f54:	1004d43a 	srli	r2,r2,16
80203f58:	e0bff615 	stw	r2,-40(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
80203f5c:	e0bffd17 	ldw	r2,-12(fp)
80203f60:	10800917 	ldw	r2,36(r2)
80203f64:	e0fff617 	ldw	r3,-40(fp)
80203f68:	1880042e 	bgeu	r3,r2,80203f7c <msgdma_descriptor_async_transfer+0x78>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
80203f6c:	e0bffd17 	ldw	r2,-12(fp)
80203f70:	10800917 	ldw	r2,36(r2)
80203f74:	e0fff517 	ldw	r3,-44(fp)
80203f78:	18800236 	bltu	r3,r2,80203f84 <msgdma_descriptor_async_transfer+0x80>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
80203f7c:	00bff904 	movi	r2,-28
80203f80:	00007d06 	br	80204178 <msgdma_descriptor_async_transfer+0x274>
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80203f84:	00800804 	movi	r2,32
80203f88:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80203f8c:	0005303a 	rdctl	r2,status
80203f90:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80203f94:	e0fff717 	ldw	r3,-36(fp)
80203f98:	00bfff84 	movi	r2,-2
80203f9c:	1884703a 	and	r2,r3,r2
80203fa0:	1001703a 	wrctl	status,r2
  
  return context;
80203fa4:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
80203fa8:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80203fac:	e0bffd17 	ldw	r2,-12(fp)
80203fb0:	10800317 	ldw	r2,12(r2)
80203fb4:	10800104 	addi	r2,r2,4
80203fb8:	e0fff317 	ldw	r3,-52(fp)
80203fbc:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
80203fc0:	e0bffd17 	ldw	r2,-12(fp)
80203fc4:	10800317 	ldw	r2,12(r2)
80203fc8:	e0fffd17 	ldw	r3,-12(fp)
80203fcc:	18c00317 	ldw	r3,12(r3)
80203fd0:	18c00037 	ldwio	r3,0(r3)
80203fd4:	10c00035 	stwio	r3,0(r2)
80203fd8:	e0bff417 	ldw	r2,-48(fp)
80203fdc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80203fe0:	e0bffc17 	ldw	r2,-16(fp)
80203fe4:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
80203fe8:	e0bffe17 	ldw	r2,-8(fp)
80203fec:	10000826 	beq	r2,zero,80204010 <msgdma_descriptor_async_transfer+0x10c>
80203ff0:	e0bfff17 	ldw	r2,-4(fp)
80203ff4:	1000061e 	bne	r2,zero,80204010 <msgdma_descriptor_async_transfer+0x10c>
		counter = 0; /* reset counter */
80203ff8:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#if DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
80203ffc:	012008b4 	movhi	r4,32802
80204000:	21315404 	addi	r4,r4,-15024
80204004:	02069340 	call	80206934 <puts>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
80204008:	00bff084 	movi	r2,-62
8020400c:	00005a06 	br	80204178 <msgdma_descriptor_async_transfer+0x274>
	} else if (NULL == standard_desc && NULL != extended_desc) {
80204010:	e0bffe17 	ldw	r2,-8(fp)
80204014:	10001b1e 	bne	r2,zero,80204084 <msgdma_descriptor_async_transfer+0x180>
80204018:	e0bfff17 	ldw	r2,-4(fp)
8020401c:	10001926 	beq	r2,zero,80204084 <msgdma_descriptor_async_transfer+0x180>
		counter = 0; /* reset counter */
80204020:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
80204024:	00000d06 	br	8020405c <msgdma_descriptor_async_transfer+0x158>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
80204028:	01000044 	movi	r4,1
8020402c:	02166240 	call	80216624 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
80204030:	e0bff20b 	ldhu	r2,-56(fp)
80204034:	1084e230 	cmpltui	r2,r2,5000
80204038:	1000051e 	bne	r2,zero,80204050 <msgdma_descriptor_async_transfer+0x14c>
			{
				#if DEBUG_ON
					debug(fp, "time out after 5 msec while waiting free FIFO buffer for storing extended descriptor\n");
8020403c:	012008b4 	movhi	r4,32802
80204040:	21315c04 	addi	r4,r4,-14992
80204044:	02069340 	call	80206934 <puts>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
80204048:	00bff084 	movi	r2,-62
8020404c:	00004a06 	br	80204178 <msgdma_descriptor_async_transfer+0x274>
			}
			counter++;
80204050:	e0bff20b 	ldhu	r2,-56(fp)
80204054:	10800044 	addi	r2,r2,1
80204058:	e0bff20d 	sth	r2,-56(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
8020405c:	e0bffd17 	ldw	r2,-12(fp)
80204060:	10c00317 	ldw	r3,12(r2)
80204064:	e0bffd17 	ldw	r2,-12(fp)
80204068:	10800417 	ldw	r2,16(r2)
8020406c:	e1bfff17 	ldw	r6,-4(fp)
80204070:	100b883a 	mov	r5,r2
80204074:	1809883a 	mov	r4,r3
80204078:	0203c740 	call	80203c74 <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
8020407c:	103fea1e 	bne	r2,zero,80204028 <__reset+0xfa1e4028>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
80204080:	00000206 	br	8020408c <msgdma_descriptor_async_transfer+0x188>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
80204084:	00bfffc4 	movi	r2,-1
80204088:	00003b06 	br	80204178 <msgdma_descriptor_async_transfer+0x274>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
8020408c:	e0bffd17 	ldw	r2,-12(fp)
80204090:	10800b17 	ldw	r2,44(r2)
80204094:	10001c26 	beq	r2,zero,80204108 <msgdma_descriptor_async_transfer+0x204>

		control |= (dev->control |
80204098:	e0bffd17 	ldw	r2,-12(fp)
8020409c:	10c00d17 	ldw	r3,52(r2)
802040a0:	e0bff317 	ldw	r2,-52(fp)
802040a4:	1884b03a 	or	r2,r3,r2
802040a8:	10800514 	ori	r2,r2,20
802040ac:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
802040b0:	e0fff317 	ldw	r3,-52(fp)
802040b4:	00bff7c4 	movi	r2,-33
802040b8:	1884703a 	and	r2,r3,r2
802040bc:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802040c0:	0005303a 	rdctl	r2,status
802040c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802040c8:	e0fff917 	ldw	r3,-28(fp)
802040cc:	00bfff84 	movi	r2,-2
802040d0:	1884703a 	and	r2,r3,r2
802040d4:	1001703a 	wrctl	status,r2
  
  return context;
802040d8:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
802040dc:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
802040e0:	e0bffd17 	ldw	r2,-12(fp)
802040e4:	10800317 	ldw	r2,12(r2)
802040e8:	10800104 	addi	r2,r2,4
802040ec:	e0fff317 	ldw	r3,-52(fp)
802040f0:	10c00035 	stwio	r3,0(r2)
802040f4:	e0bff417 	ldw	r2,-48(fp)
802040f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802040fc:	e0bffb17 	ldw	r2,-20(fp)
80204100:	1001703a 	wrctl	status,r2
80204104:	00001b06 	br	80204174 <msgdma_descriptor_async_transfer+0x270>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
80204108:	e0bffd17 	ldw	r2,-12(fp)
8020410c:	10c00d17 	ldw	r3,52(r2)
80204110:	e0bff317 	ldw	r2,-52(fp)
80204114:	1884b03a 	or	r2,r3,r2
80204118:	10800114 	ori	r2,r2,4
8020411c:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
80204120:	e0fff317 	ldw	r3,-52(fp)
80204124:	00bff3c4 	movi	r2,-49
80204128:	1884703a 	and	r2,r3,r2
8020412c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80204130:	0005303a 	rdctl	r2,status
80204134:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80204138:	e0fffa17 	ldw	r3,-24(fp)
8020413c:	00bfff84 	movi	r2,-2
80204140:	1884703a 	and	r2,r3,r2
80204144:	1001703a 	wrctl	status,r2
  
  return context;
80204148:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
8020414c:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80204150:	e0bffd17 	ldw	r2,-12(fp)
80204154:	10800317 	ldw	r2,12(r2)
80204158:	10800104 	addi	r2,r2,4
8020415c:	e0fff317 	ldw	r3,-52(fp)
80204160:	10c00035 	stwio	r3,0(r2)
80204164:	e0bff417 	ldw	r2,-48(fp)
80204168:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020416c:	e0bff817 	ldw	r2,-32(fp)
80204170:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
80204174:	0005883a 	mov	r2,zero
}
80204178:	e037883a 	mov	sp,fp
8020417c:	dfc00117 	ldw	ra,4(sp)
80204180:	df000017 	ldw	fp,0(sp)
80204184:	dec00204 	addi	sp,sp,8
80204188:	f800283a 	ret

8020418c <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
8020418c:	defff004 	addi	sp,sp,-64
80204190:	dfc00f15 	stw	ra,60(sp)
80204194:	df000e15 	stw	fp,56(sp)
80204198:	df000e04 	addi	fp,sp,56
8020419c:	e13ffd15 	stw	r4,-12(fp)
802041a0:	e17ffe15 	stw	r5,-8(fp)
802041a4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
802041a8:	e03ff615 	stw	zero,-40(fp)
	alt_irq_context context = 0;
802041ac:	e03ff715 	stw	zero,-36(fp)
	alt_u32 csr_status = 0;
802041b0:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
802041b4:	e03ff30d 	sth	zero,-52(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
802041b8:	e0bffd17 	ldw	r2,-12(fp)
802041bc:	10800317 	ldw	r2,12(r2)
802041c0:	10800204 	addi	r2,r2,8
802041c4:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
802041c8:	10bfffcc 	andi	r2,r2,65535
802041cc:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
802041d0:	e0bffd17 	ldw	r2,-12(fp)
802041d4:	10800317 	ldw	r2,12(r2)
802041d8:	10800204 	addi	r2,r2,8
802041dc:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
802041e0:	1004d43a 	srli	r2,r2,16
802041e4:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
802041e8:	00807804 	movi	r2,480
802041ec:	e0bff815 	stw	r2,-32(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
802041f0:	00002006 	br	80204274 <msgdma_descriptor_sync_transfer+0xe8>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
802041f4:	01000044 	movi	r4,1
802041f8:	02166240 	call	80216624 <alt_busy_sleep>
#if DEBUG_ON
		fprintf(fp,"\n-- DMA can't write in the descriptor \n ");
802041fc:	d0a01a17 	ldw	r2,-32664(gp)
80204200:	100f883a 	mov	r7,r2
80204204:	01800a04 	movi	r6,40
80204208:	01400044 	movi	r5,1
8020420c:	012008b4 	movhi	r4,32802
80204210:	21317204 	addi	r4,r4,-14904
80204214:	020668c0 	call	8020668c <fwrite>
#endif
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
80204218:	e0bff30b 	ldhu	r2,-52(fp)
8020421c:	1084e230 	cmpltui	r2,r2,5000
80204220:	1000051e 	bne	r2,zero,80204238 <msgdma_descriptor_sync_transfer+0xac>
		{
#if DEBUG_ON
		debug(fp, "time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
80204224:	012008b4 	movhi	r4,32802
80204228:	21317d04 	addi	r4,r4,-14860
8020422c:	02069340 	call	80206934 <puts>
#endif
			return -ETIME;
80204230:	00bff084 	movi	r2,-62
80204234:	0000a206 	br	802044c0 <msgdma_descriptor_sync_transfer+0x334>
		}
		counter++;
80204238:	e0bff30b 	ldhu	r2,-52(fp)
8020423c:	10800044 	addi	r2,r2,1
80204240:	e0bff30d 	sth	r2,-52(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80204244:	e0bffd17 	ldw	r2,-12(fp)
80204248:	10800317 	ldw	r2,12(r2)
8020424c:	10800204 	addi	r2,r2,8
80204250:	10800037 	ldwio	r2,0(r2)
		debug(fp, "time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
80204254:	10bfffcc 	andi	r2,r2,65535
80204258:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8020425c:	e0bffd17 	ldw	r2,-12(fp)
80204260:	10800317 	ldw	r2,12(r2)
80204264:	10800204 	addi	r2,r2,8
80204268:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
8020426c:	1004d43a 	srli	r2,r2,16
80204270:	e0bff515 	stw	r2,-44(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
80204274:	e0bffd17 	ldw	r2,-12(fp)
80204278:	10800917 	ldw	r2,36(r2)
8020427c:	e0fff517 	ldw	r3,-44(fp)
80204280:	18bfdc2e 	bgeu	r3,r2,802041f4 <__reset+0xfa1e41f4>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
80204284:	e0bffd17 	ldw	r2,-12(fp)
80204288:	10800917 	ldw	r2,36(r2)
8020428c:	e0fff417 	ldw	r3,-48(fp)
80204290:	18bfd82e 	bgeu	r3,r2,802041f4 <__reset+0xfa1e41f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80204294:	0005303a 	rdctl	r2,status
80204298:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020429c:	e0fffc17 	ldw	r3,-16(fp)
802042a0:	00bfff84 	movi	r2,-2
802042a4:	1884703a 	and	r2,r3,r2
802042a8:	1001703a 	wrctl	status,r2
  
  return context;
802042ac:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
802042b0:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
802042b4:	e0bffd17 	ldw	r2,-12(fp)
802042b8:	10800317 	ldw	r2,12(r2)
802042bc:	10800104 	addi	r2,r2,4
802042c0:	00c00804 	movi	r3,32
802042c4:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
802042c8:	e0bffd17 	ldw	r2,-12(fp)
802042cc:	10800317 	ldw	r2,12(r2)
802042d0:	e0fffd17 	ldw	r3,-12(fp)
802042d4:	18c00317 	ldw	r3,12(r3)
802042d8:	18c00037 	ldwio	r3,0(r3)
802042dc:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
802042e0:	e0bffe17 	ldw	r2,-8(fp)
802042e4:	10000826 	beq	r2,zero,80204308 <msgdma_descriptor_sync_transfer+0x17c>
802042e8:	e0bfff17 	ldw	r2,-4(fp)
802042ec:	1000061e 	bne	r2,zero,80204308 <msgdma_descriptor_sync_transfer+0x17c>
		counter = 0; /* reset counter */
802042f0:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		#if DEBUG_ON
			debug(fp, "invalid dma descriptor option\n");
802042f4:	012008b4 	movhi	r4,32802
802042f8:	21315404 	addi	r4,r4,-15024
802042fc:	02069340 	call	80206934 <puts>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
80204300:	00bff084 	movi	r2,-62
80204304:	00006e06 	br	802044c0 <msgdma_descriptor_sync_transfer+0x334>
	} else if (NULL == standard_desc && NULL != extended_desc) {
80204308:	e0bffe17 	ldw	r2,-8(fp)
8020430c:	10001b1e 	bne	r2,zero,8020437c <msgdma_descriptor_sync_transfer+0x1f0>
80204310:	e0bfff17 	ldw	r2,-4(fp)
80204314:	10001926 	beq	r2,zero,8020437c <msgdma_descriptor_sync_transfer+0x1f0>
		counter = 0; /* reset counter */
80204318:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
8020431c:	00000d06 	br	80204354 <msgdma_descriptor_sync_transfer+0x1c8>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
80204320:	01000044 	movi	r4,1
80204324:	02166240 	call	80216624 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
80204328:	e0bff30b 	ldhu	r2,-52(fp)
8020432c:	1084e230 	cmpltui	r2,r2,5000
80204330:	1000051e 	bne	r2,zero,80204348 <msgdma_descriptor_sync_transfer+0x1bc>
			{
				#if DEBUG_ON
					debug(fp, "time out after 5 msec while writing extended descriptor to FIFO\n");
80204334:	012008b4 	movhi	r4,32802
80204338:	21319004 	addi	r4,r4,-14784
8020433c:	02069340 	call	80206934 <puts>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
80204340:	00bff084 	movi	r2,-62
80204344:	00005e06 	br	802044c0 <msgdma_descriptor_sync_transfer+0x334>
			}
			counter++;
80204348:	e0bff30b 	ldhu	r2,-52(fp)
8020434c:	10800044 	addi	r2,r2,1
80204350:	e0bff30d 	sth	r2,-52(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
80204354:	e0bffd17 	ldw	r2,-12(fp)
80204358:	10c00317 	ldw	r3,12(r2)
8020435c:	e0bffd17 	ldw	r2,-12(fp)
80204360:	10800417 	ldw	r2,16(r2)
80204364:	e1bfff17 	ldw	r6,-4(fp)
80204368:	100b883a 	mov	r5,r2
8020436c:	1809883a 	mov	r4,r3
80204370:	0203c740 	call	80203c74 <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
80204374:	103fea1e 	bne	r2,zero,80204320 <__reset+0xfa1e4320>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
80204378:	00000206 	br	80204384 <msgdma_descriptor_sync_transfer+0x1f8>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
8020437c:	00bfffc4 	movi	r2,-1
80204380:	00004f06 	br	802044c0 <msgdma_descriptor_sync_transfer+0x334>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80204384:	e0bffd17 	ldw	r2,-12(fp)
80204388:	10800317 	ldw	r2,12(r2)
8020438c:	10800104 	addi	r2,r2,4
80204390:	e0fffd17 	ldw	r3,-12(fp)
80204394:	19000d17 	ldw	r4,52(r3)
80204398:	00fff2c4 	movi	r3,-53
8020439c:	20c6703a 	and	r3,r4,r3
802043a0:	18c00114 	ori	r3,r3,4
802043a4:	10c00035 	stwio	r3,0(r2)
802043a8:	e0bff717 	ldw	r2,-36(fp)
802043ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802043b0:	e0bffb17 	ldw	r2,-20(fp)
802043b4:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
802043b8:	e03ff30d 	sth	zero,-52(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
802043bc:	e0bffd17 	ldw	r2,-12(fp)
802043c0:	10800317 	ldw	r2,12(r2)
802043c4:	10800037 	ldwio	r2,0(r2)
802043c8:	e0bff215 	stw	r2,-56(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
802043cc:	00001106 	br	80204414 <msgdma_descriptor_sync_transfer+0x288>
		alt_busy_sleep(1); /* delay 1us */
802043d0:	01000044 	movi	r4,1
802043d4:	02166240 	call	80216624 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
802043d8:	e0bff30b 	ldhu	r2,-52(fp)
802043dc:	1084e230 	cmpltui	r2,r2,5000
802043e0:	1000051e 	bne	r2,zero,802043f8 <msgdma_descriptor_sync_transfer+0x26c>
		{
			#if DEBUG_ON
				debug(fp, "time out after 5 msec while waiting for any pending transfer complete\n");
802043e4:	012008b4 	movhi	r4,32802
802043e8:	2131a004 	addi	r4,r4,-14720
802043ec:	02069340 	call	80206934 <puts>
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);

			return -ETIME;
802043f0:	00bff084 	movi	r2,-62
802043f4:	00003206 	br	802044c0 <msgdma_descriptor_sync_transfer+0x334>
		}
		counter++;
802043f8:	e0bff30b 	ldhu	r2,-52(fp)
802043fc:	10800044 	addi	r2,r2,1
80204400:	e0bff30d 	sth	r2,-52(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80204404:	e0bffd17 	ldw	r2,-12(fp)
80204408:	10800317 	ldw	r2,12(r2)
8020440c:	10800037 	ldwio	r2,0(r2)
80204410:	e0bff215 	stw	r2,-56(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
80204414:	e0fff217 	ldw	r3,-56(fp)
80204418:	e0bff817 	ldw	r2,-32(fp)
8020441c:	1884703a 	and	r2,r3,r2
80204420:	1000031e 	bne	r2,zero,80204430 <msgdma_descriptor_sync_transfer+0x2a4>
80204424:	e0bff217 	ldw	r2,-56(fp)
80204428:	1080004c 	andi	r2,r2,1
8020442c:	103fe81e 	bne	r2,zero,802043d0 <__reset+0xfa1e43d0>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
80204430:	e0fff217 	ldw	r3,-56(fp)
80204434:	e0bff817 	ldw	r2,-32(fp)
80204438:	1884703a 	and	r2,r3,r2
8020443c:	10000226 	beq	r2,zero,80204448 <msgdma_descriptor_sync_transfer+0x2bc>
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return error;
80204440:	e0bff817 	ldw	r2,-32(fp)
80204444:	00001e06 	br	802044c0 <msgdma_descriptor_sync_transfer+0x334>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
80204448:	e0bffd17 	ldw	r2,-12(fp)
8020444c:	10800317 	ldw	r2,12(r2)
80204450:	10800104 	addi	r2,r2,4
80204454:	10800037 	ldwio	r2,0(r2)
80204458:	10800814 	ori	r2,r2,32
8020445c:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80204460:	0005303a 	rdctl	r2,status
80204464:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80204468:	e0fff917 	ldw	r3,-28(fp)
8020446c:	00bfff84 	movi	r2,-2
80204470:	1884703a 	and	r2,r3,r2
80204474:	1001703a 	wrctl	status,r2
  
  return context;
80204478:	e0bff917 	ldw	r2,-28(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8020447c:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80204480:	e0bffd17 	ldw	r2,-12(fp)
80204484:	10800317 	ldw	r2,12(r2)
80204488:	10800104 	addi	r2,r2,4
8020448c:	e0fff617 	ldw	r3,-40(fp)
80204490:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
80204494:	e0bffd17 	ldw	r2,-12(fp)
80204498:	10800317 	ldw	r2,12(r2)
8020449c:	e0fffd17 	ldw	r3,-12(fp)
802044a0:	18c00317 	ldw	r3,12(r3)
802044a4:	18c00037 	ldwio	r3,0(r3)
802044a8:	10c00035 	stwio	r3,0(r2)
802044ac:	e0bff717 	ldw	r2,-36(fp)
802044b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802044b4:	e0bffa17 	ldw	r2,-24(fp)
802044b8:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
802044bc:	0005883a 	mov	r2,zero

}
802044c0:	e037883a 	mov	sp,fp
802044c4:	dfc00117 	ldw	ra,4(sp)
802044c8:	df000017 	ldw	fp,0(sp)
802044cc:	dec00204 	addi	sp,sp,8
802044d0:	f800283a 	ret

802044d4 <iMsgdmaConstructExtendedMmToMmDescriptor>:
int iMsgdmaConstructExtendedMmToMmDescriptor(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDescriptor, alt_u32 *puliReadAddress,
		alt_u32 *puliWriteAddress, alt_u32 uliLength, alt_u32 uliControl,
		alt_u32 *puliReadAddressHigh, alt_u32 *puliWriteAddressHigh,
		alt_u16 usiSequenceNumber, alt_u8 ucReadBurstCount,
		alt_u8 ucWriteBurstCount, alt_u16 usiReadStride, alt_u16 usiWriteStride) {
802044d4:	deffec04 	addi	sp,sp,-80
802044d8:	dfc01315 	stw	ra,76(sp)
802044dc:	df001215 	stw	fp,72(sp)
802044e0:	df001204 	addi	fp,sp,72
802044e4:	e13ff715 	stw	r4,-36(fp)
802044e8:	e17ff815 	stw	r5,-32(fp)
802044ec:	e1bff915 	stw	r6,-28(fp)
802044f0:	e1fffa15 	stw	r7,-24(fp)
802044f4:	e1800617 	ldw	r6,24(fp)
802044f8:	e1400717 	ldw	r5,28(fp)
802044fc:	e1000817 	ldw	r4,32(fp)
80204500:	e0c00917 	ldw	r3,36(fp)
80204504:	e0800a17 	ldw	r2,40(fp)
80204508:	e1bffb0d 	sth	r6,-20(fp)
8020450c:	e17ffc05 	stb	r5,-16(fp)
80204510:	e13ffd05 	stb	r4,-12(fp)
80204514:	e0fffe0d 	sth	r3,-8(fp)
80204518:	e0bfff0d 	sth	r2,-4(fp)

	return msgdma_construct_extended_descriptor(pxDev, pxDescriptor,
8020451c:	e0bffb0b 	ldhu	r2,-20(fp)
80204520:	e0fffc03 	ldbu	r3,-16(fp)
80204524:	e13ffd03 	ldbu	r4,-12(fp)
80204528:	e17ffe0b 	ldhu	r5,-8(fp)
8020452c:	e1bfff0b 	ldhu	r6,-4(fp)
80204530:	d9800815 	stw	r6,32(sp)
80204534:	d9400715 	stw	r5,28(sp)
80204538:	d9000615 	stw	r4,24(sp)
8020453c:	d8c00515 	stw	r3,20(sp)
80204540:	d8800415 	stw	r2,16(sp)
80204544:	e0800517 	ldw	r2,20(fp)
80204548:	d8800315 	stw	r2,12(sp)
8020454c:	e0800417 	ldw	r2,16(fp)
80204550:	d8800215 	stw	r2,8(sp)
80204554:	e0800317 	ldw	r2,12(fp)
80204558:	d8800115 	stw	r2,4(sp)
8020455c:	e0800217 	ldw	r2,8(fp)
80204560:	d8800015 	stw	r2,0(sp)
80204564:	e1fffa17 	ldw	r7,-24(fp)
80204568:	e1bff917 	ldw	r6,-28(fp)
8020456c:	e17ff817 	ldw	r5,-32(fp)
80204570:	e13ff717 	ldw	r4,-36(fp)
80204574:	0203da80 	call	80203da8 <msgdma_construct_extended_descriptor>
			puliReadAddress, puliWriteAddress, uliLength, uliControl,
			puliReadAddressHigh, puliWriteAddressHigh, usiSequenceNumber,
			ucReadBurstCount, ucWriteBurstCount, usiReadStride, usiWriteStride);

}
80204578:	e037883a 	mov	sp,fp
8020457c:	dfc00117 	ldw	ra,4(sp)
80204580:	df000017 	ldw	fp,0(sp)
80204584:	dec00204 	addi	sp,sp,8
80204588:	f800283a 	ret

8020458c <iMsgdmaExtendedDescriptorAsyncTransfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int iMsgdmaExtendedDescriptorAsyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
8020458c:	defffc04 	addi	sp,sp,-16
80204590:	dfc00315 	stw	ra,12(sp)
80204594:	df000215 	stw	fp,8(sp)
80204598:	df000204 	addi	fp,sp,8
8020459c:	e13ffe15 	stw	r4,-8(fp)
802045a0:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(pxDev, NULL, pxDesc);
802045a4:	e1bfff17 	ldw	r6,-4(fp)
802045a8:	000b883a 	mov	r5,zero
802045ac:	e13ffe17 	ldw	r4,-8(fp)
802045b0:	0203f040 	call	80203f04 <msgdma_descriptor_async_transfer>
}
802045b4:	e037883a 	mov	sp,fp
802045b8:	dfc00117 	ldw	ra,4(sp)
802045bc:	df000017 	ldw	fp,0(sp)
802045c0:	dec00204 	addi	sp,sp,8
802045c4:	f800283a 	ret

802045c8 <iMsgdmaExtendedDescriptorSyncTransfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int iMsgdmaExtendedDescriptorSyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
802045c8:	defffc04 	addi	sp,sp,-16
802045cc:	dfc00315 	stw	ra,12(sp)
802045d0:	df000215 	stw	fp,8(sp)
802045d4:	df000204 	addi	fp,sp,8
802045d8:	e13ffe15 	stw	r4,-8(fp)
802045dc:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(pxDev, NULL, pxDesc);
802045e0:	e1bfff17 	ldw	r6,-4(fp)
802045e4:	000b883a 	mov	r5,zero
802045e8:	e13ffe17 	ldw	r4,-8(fp)
802045ec:	020418c0 	call	8020418c <msgdma_descriptor_sync_transfer>
}
802045f0:	e037883a 	mov	sp,fp
802045f4:	dfc00117 	ldw	ra,4(sp)
802045f8:	df000017 	ldw	fp,0(sp)
802045fc:	dec00204 	addi	sp,sp,8
80204600:	f800283a 	ret

80204604 <POWER_SPI_RW>:
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(CSENSE_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(CSENSE_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock
// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN,
		bool bSGL, alt_u32 *pValue) {
80204604:	defff204 	addi	sp,sp,-56
80204608:	dfc00d15 	stw	ra,52(sp)
8020460c:	df000c15 	stw	fp,48(sp)
80204610:	df000c04 	addi	fp,sp,48
80204614:	2007883a 	mov	r3,r4
80204618:	2805883a 	mov	r2,r5
8020461c:	e1bffe15 	stw	r6,-8(fp)
80204620:	e1ffff15 	stw	r7,-4(fp)
80204624:	e0fffc05 	stb	r3,-16(fp)
80204628:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u8 Config8;
	alt_u32 Value32 = 0, Mask32;
8020462c:	e03ff515 	stw	zero,-44(fp)
	int i, nWait = 0, nZeroCnt;
80204630:	e03ff815 	stw	zero,-32(fp)
	const int nMaxWait = 1000000;
80204634:	008003f4 	movhi	r2,15
80204638:	10909004 	addi	r2,r2,16960
8020463c:	e0bffa15 	stw	r2,-24(fp)

	//
	Config8 = 0x80;
80204640:	00bfe004 	movi	r2,-128
80204644:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bEN) ? 0x20 : 0x00;
80204648:	e0bffe17 	ldw	r2,-8(fp)
8020464c:	10000226 	beq	r2,zero,80204658 <POWER_SPI_RW+0x54>
80204650:	00800804 	movi	r2,32
80204654:	00000106 	br	8020465c <POWER_SPI_RW+0x58>
80204658:	0005883a 	mov	r2,zero
8020465c:	e0fff403 	ldbu	r3,-48(fp)
80204660:	10c4b03a 	or	r2,r2,r3
80204664:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSGL) ? 0x10 : 0x00;
80204668:	e0800217 	ldw	r2,8(fp)
8020466c:	10000226 	beq	r2,zero,80204678 <POWER_SPI_RW+0x74>
80204670:	00800404 	movi	r2,16
80204674:	00000106 	br	8020467c <POWER_SPI_RW+0x78>
80204678:	0005883a 	mov	r2,zero
8020467c:	e0fff403 	ldbu	r3,-48(fp)
80204680:	10c4b03a 	or	r2,r2,r3
80204684:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSIGN) ? 0x08 : 0x00;
80204688:	e0bfff17 	ldw	r2,-4(fp)
8020468c:	10000226 	beq	r2,zero,80204698 <POWER_SPI_RW+0x94>
80204690:	00800204 	movi	r2,8
80204694:	00000106 	br	8020469c <POWER_SPI_RW+0x98>
80204698:	0005883a 	mov	r2,zero
8020469c:	e0fff403 	ldbu	r3,-48(fp)
802046a0:	10c4b03a 	or	r2,r2,r3
802046a4:	e0bff405 	stb	r2,-48(fp)
	Config8 |= NextChannel & 0x07; // channel
802046a8:	e0bffd03 	ldbu	r2,-12(fp)
802046ac:	108001cc 	andi	r2,r2,7
802046b0:	1007883a 	mov	r3,r2
802046b4:	e0bff403 	ldbu	r2,-48(fp)
802046b8:	1884b03a 	or	r2,r3,r2
802046bc:	e0bff405 	stb	r2,-48(fp)

	SPI_FO(0); // use internal conversion clock
802046c0:	0007883a 	mov	r3,zero
802046c4:	00a04034 	movhi	r2,33024
802046c8:	10813404 	addi	r2,r2,1232
802046cc:	10c00035 	stwio	r3,0(r2)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
802046d0:	0007883a 	mov	r3,zero
802046d4:	00a04034 	movhi	r2,33024
802046d8:	10813c04 	addi	r2,r2,1264
802046dc:	10c00035 	stwio	r3,0(r2)
	SPI_CS_N(IcIndex, 0);  // chip select: active
802046e0:	e0bffc03 	ldbu	r2,-16(fp)
802046e4:	1000021e 	bne	r2,zero,802046f0 <POWER_SPI_RW+0xec>
802046e8:	00c00084 	movi	r3,2
802046ec:	00000106 	br	802046f4 <POWER_SPI_RW+0xf0>
802046f0:	00c00044 	movi	r3,1
802046f4:	00a04034 	movhi	r2,33024
802046f8:	10813804 	addi	r2,r2,1248
802046fc:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
80204700:	010003c4 	movi	r4,15
80204704:	02170340 	call	80217034 <usleep>

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
80204708:	00000306 	br	80204718 <POWER_SPI_RW+0x114>
		nWait++;
8020470c:	e0bff817 	ldw	r2,-32(fp)
80204710:	10800044 	addi	r2,r2,1
80204714:	e0bff815 	stw	r2,-32(fp)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
	SPI_CS_N(IcIndex, 0);  // chip select: active
	SPI_DELAY;

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
80204718:	00a04034 	movhi	r2,33024
8020471c:	10814404 	addi	r2,r2,1296
80204720:	10800037 	ldwio	r2,0(r2)
80204724:	1080004c 	andi	r2,r2,1
80204728:	10000326 	beq	r2,zero,80204738 <POWER_SPI_RW+0x134>
8020472c:	e0fff817 	ldw	r3,-32(fp)
80204730:	e0bffa17 	ldw	r2,-24(fp)
80204734:	18bff516 	blt	r3,r2,8020470c <__reset+0xfa1e470c>
		nWait++;
	}

	if (SPI_SDO) {
80204738:	00a04034 	movhi	r2,33024
8020473c:	10814404 	addi	r2,r2,1296
80204740:	10800037 	ldwio	r2,0(r2)
80204744:	1080004c 	andi	r2,r2,1
80204748:	10000626 	beq	r2,zero,80204764 <POWER_SPI_RW+0x160>
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
8020474c:	00c000c4 	movi	r3,3
80204750:	00a04034 	movhi	r2,33024
80204754:	10813804 	addi	r2,r2,1248
80204758:	10c00035 	stwio	r3,0(r2)
		return FALSE;
8020475c:	0005883a 	mov	r2,zero
80204760:	0000db06 	br	80204ad0 <POWER_SPI_RW+0x4cc>
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
80204764:	e03ff715 	stw	zero,-36(fp)
80204768:	00002406 	br	802047fc <POWER_SPI_RW+0x1f8>
			// ignore EOC/ and DMY bits
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0);    //sdi=nextch.7; // put data on pin
8020476c:	e0bff403 	ldbu	r2,-48(fp)
80204770:	10803fcc 	andi	r2,r2,255
80204774:	1004d1fa 	srli	r2,r2,7
80204778:	10c03fcc 	andi	r3,r2,255
8020477c:	00a04034 	movhi	r2,33024
80204780:	10814004 	addi	r2,r2,1280
80204784:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
80204788:	e0bff403 	ldbu	r2,-48(fp)
8020478c:	1085883a 	add	r2,r2,r2
80204790:	e0bff405 	stb	r2,-48(fp)
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
80204794:	e0bff517 	ldw	r2,-44(fp)
80204798:	1085883a 	add	r2,r2,r2
8020479c:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
802047a0:	00a04034 	movhi	r2,33024
802047a4:	10814404 	addi	r2,r2,1296
802047a8:	10800037 	ldwio	r2,0(r2)
802047ac:	1080004c 	andi	r2,r2,1
802047b0:	1007883a 	mov	r3,r2
802047b4:	e0bff517 	ldw	r2,-44(fp)
802047b8:	10c4b03a 	or	r2,r2,r3
802047bc:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
802047c0:	00c00044 	movi	r3,1
802047c4:	00a04034 	movhi	r2,33024
802047c8:	10813c04 	addi	r2,r2,1264
802047cc:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802047d0:	010003c4 	movi	r4,15
802047d4:	02170340 	call	80217034 <usleep>
		SPI_SCK(0); //sck=0; // clock low
802047d8:	0007883a 	mov	r3,zero
802047dc:	00a04034 	movhi	r2,33024
802047e0:	10813c04 	addi	r2,r2,1264
802047e4:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802047e8:	010003c4 	movi	r4,15
802047ec:	02170340 	call	80217034 <usleep>
	if (SPI_SDO) {
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
		return FALSE;
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
802047f0:	e0bff717 	ldw	r2,-36(fp)
802047f4:	10800044 	addi	r2,r2,1
802047f8:	e0bff715 	stw	r2,-36(fp)
802047fc:	e0bff717 	ldw	r2,-36(fp)
80204800:	10800090 	cmplti	r2,r2,2
80204804:	103fd91e 	bne	r2,zero,8020476c <__reset+0xfa1e476c>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
80204808:	e03ff715 	stw	zero,-36(fp)
8020480c:	00002406 	br	802048a0 <POWER_SPI_RW+0x29c>
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0); //sdi=nextch.7; // put data on pin
80204810:	e0bff403 	ldbu	r2,-48(fp)
80204814:	10803fcc 	andi	r2,r2,255
80204818:	1004d1fa 	srli	r2,r2,7
8020481c:	10c03fcc 	andi	r3,r2,255
80204820:	00a04034 	movhi	r2,33024
80204824:	10814004 	addi	r2,r2,1280
80204828:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
8020482c:	e0bff403 	ldbu	r2,-48(fp)
80204830:	1085883a 	add	r2,r2,r2
80204834:	e0bff405 	stb	r2,-48(fp)

		Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
80204838:	e0bff517 	ldw	r2,-44(fp)
8020483c:	1085883a 	add	r2,r2,r2
80204840:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
80204844:	00a04034 	movhi	r2,33024
80204848:	10814404 	addi	r2,r2,1296
8020484c:	10800037 	ldwio	r2,0(r2)
80204850:	1080004c 	andi	r2,r2,1
80204854:	1007883a 	mov	r3,r2
80204858:	e0bff517 	ldw	r2,-44(fp)
8020485c:	10c4b03a 	or	r2,r2,r3
80204860:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
80204864:	00c00044 	movi	r3,1
80204868:	00a04034 	movhi	r2,33024
8020486c:	10813c04 	addi	r2,r2,1264
80204870:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204874:	010003c4 	movi	r4,15
80204878:	02170340 	call	80217034 <usleep>
		SPI_SCK(0); //sck=0; // clock low
8020487c:	0007883a 	mov	r3,zero
80204880:	00a04034 	movhi	r2,33024
80204884:	10813c04 	addi	r2,r2,1264
80204888:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8020488c:	010003c4 	movi	r4,15
80204890:	02170340 	call	80217034 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
80204894:	e0bff717 	ldw	r2,-36(fp)
80204898:	10800044 	addi	r2,r2,1
8020489c:	e0bff715 	stw	r2,-36(fp)
802048a0:	e0bff717 	ldw	r2,-36(fp)
802048a4:	10800210 	cmplti	r2,r2,8
802048a8:	103fd91e 	bne	r2,zero,80204810 <__reset+0xfa1e4810>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
802048ac:	e03ff715 	stw	zero,-36(fp)
802048b0:	00001a06 	br	8020491c <POWER_SPI_RW+0x318>
			{
		Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
802048b4:	e0bff517 	ldw	r2,-44(fp)
802048b8:	1085883a 	add	r2,r2,r2
802048bc:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
802048c0:	00a04034 	movhi	r2,33024
802048c4:	10814404 	addi	r2,r2,1296
802048c8:	10800037 	ldwio	r2,0(r2)
802048cc:	1080004c 	andi	r2,r2,1
802048d0:	1007883a 	mov	r3,r2
802048d4:	e0bff517 	ldw	r2,-44(fp)
802048d8:	10c4b03a 	or	r2,r2,r3
802048dc:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
802048e0:	00c00044 	movi	r3,1
802048e4:	00a04034 	movhi	r2,33024
802048e8:	10813c04 	addi	r2,r2,1264
802048ec:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802048f0:	010003c4 	movi	r4,15
802048f4:	02170340 	call	80217034 <usleep>
		SPI_SCK(0); //sck=0; // clock low
802048f8:	0007883a 	mov	r3,zero
802048fc:	00a04034 	movhi	r2,33024
80204900:	10813c04 	addi	r2,r2,1264
80204904:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204908:	010003c4 	movi	r4,15
8020490c:	02170340 	call	80217034 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
80204910:	e0bff717 	ldw	r2,-36(fp)
80204914:	10800044 	addi	r2,r2,1
80204918:	e0bff715 	stw	r2,-36(fp)
8020491c:	e0bff717 	ldw	r2,-36(fp)
80204920:	10800210 	cmplti	r2,r2,8
80204924:	103fe31e 	bne	r2,zero,802048b4 <__reset+0xfa1e48b4>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
80204928:	e03ff715 	stw	zero,-36(fp)
8020492c:	00001a06 	br	80204998 <POWER_SPI_RW+0x394>
			{
		Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
80204930:	e0bff517 	ldw	r2,-44(fp)
80204934:	1085883a 	add	r2,r2,r2
80204938:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_1.0 = sdo; // load lsb
8020493c:	00a04034 	movhi	r2,33024
80204940:	10814404 	addi	r2,r2,1296
80204944:	10800037 	ldwio	r2,0(r2)
80204948:	1080004c 	andi	r2,r2,1
8020494c:	1007883a 	mov	r3,r2
80204950:	e0bff517 	ldw	r2,-44(fp)
80204954:	10c4b03a 	or	r2,r2,r3
80204958:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
8020495c:	00c00044 	movi	r3,1
80204960:	00a04034 	movhi	r2,33024
80204964:	10813c04 	addi	r2,r2,1264
80204968:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8020496c:	010003c4 	movi	r4,15
80204970:	02170340 	call	80217034 <usleep>
		SPI_SCK(0); //sck=0; // clock low
80204974:	0007883a 	mov	r3,zero
80204978:	00a04034 	movhi	r2,33024
8020497c:	10813c04 	addi	r2,r2,1264
80204980:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204984:	010003c4 	movi	r4,15
80204988:	02170340 	call	80217034 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
8020498c:	e0bff717 	ldw	r2,-36(fp)
80204990:	10800044 	addi	r2,r2,1
80204994:	e0bff715 	stw	r2,-36(fp)
80204998:	e0bff717 	ldw	r2,-36(fp)
8020499c:	10800210 	cmplti	r2,r2,8
802049a0:	103fe31e 	bne	r2,zero,80204930 <__reset+0xfa1e4930>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
802049a4:	e03ff715 	stw	zero,-36(fp)
802049a8:	00001a06 	br	80204a14 <POWER_SPI_RW+0x410>
			{
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
802049ac:	e0bff517 	ldw	r2,-44(fp)
802049b0:	1085883a 	add	r2,r2,r2
802049b4:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
802049b8:	00a04034 	movhi	r2,33024
802049bc:	10814404 	addi	r2,r2,1296
802049c0:	10800037 	ldwio	r2,0(r2)
802049c4:	1080004c 	andi	r2,r2,1
802049c8:	1007883a 	mov	r3,r2
802049cc:	e0bff517 	ldw	r2,-44(fp)
802049d0:	10c4b03a 	or	r2,r2,r3
802049d4:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
802049d8:	00c00044 	movi	r3,1
802049dc:	00a04034 	movhi	r2,33024
802049e0:	10813c04 	addi	r2,r2,1264
802049e4:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802049e8:	010003c4 	movi	r4,15
802049ec:	02170340 	call	80217034 <usleep>
		SPI_SCK(0); //sck=0; // clock low
802049f0:	0007883a 	mov	r3,zero
802049f4:	00a04034 	movhi	r2,33024
802049f8:	10813c04 	addi	r2,r2,1264
802049fc:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204a00:	010003c4 	movi	r4,15
80204a04:	02170340 	call	80217034 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
80204a08:	e0bff717 	ldw	r2,-36(fp)
80204a0c:	10800044 	addi	r2,r2,1
80204a10:	e0bff715 	stw	r2,-36(fp)
80204a14:	e0bff717 	ldw	r2,-36(fp)
80204a18:	10800190 	cmplti	r2,r2,6
80204a1c:	103fe31e 	bne	r2,zero,802049ac <__reset+0xfa1e49ac>
		SPI_SCK(1); //sck=1; // clock high
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}
	SPI_SCK(1);
80204a20:	00c00044 	movi	r3,1
80204a24:	00a04034 	movhi	r2,33024
80204a28:	10813c04 	addi	r2,r2,1264
80204a2c:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
80204a30:	010003c4 	movi	r4,15
80204a34:	02170340 	call	80217034 <usleep>
	SPI_CS_N(IcIndex, 1);  // chip select: inactive
80204a38:	00c000c4 	movi	r3,3
80204a3c:	00a04034 	movhi	r2,33024
80204a40:	10813804 	addi	r2,r2,1248
80204a44:	10c00035 	stwio	r3,0(r2)

	// check parity
	nZeroCnt = 0;
80204a48:	e03ff915 	stw	zero,-28(fp)
	Mask32 = 0x01;
80204a4c:	00800044 	movi	r2,1
80204a50:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < 32; i++) {
80204a54:	e03ff715 	stw	zero,-36(fp)
80204a58:	00000d06 	br	80204a90 <POWER_SPI_RW+0x48c>
		if ((Value32 & Mask32) == 0x00) {
80204a5c:	e0fff517 	ldw	r3,-44(fp)
80204a60:	e0bff617 	ldw	r2,-40(fp)
80204a64:	1884703a 	and	r2,r3,r2
80204a68:	1000031e 	bne	r2,zero,80204a78 <POWER_SPI_RW+0x474>
			nZeroCnt++;
80204a6c:	e0bff917 	ldw	r2,-28(fp)
80204a70:	10800044 	addi	r2,r2,1
80204a74:	e0bff915 	stw	r2,-28(fp)
		}
		Mask32 <<= 1;
80204a78:	e0bff617 	ldw	r2,-40(fp)
80204a7c:	1085883a 	add	r2,r2,r2
80204a80:	e0bff615 	stw	r2,-40(fp)
	SPI_CS_N(IcIndex, 1);  // chip select: inactive

	// check parity
	nZeroCnt = 0;
	Mask32 = 0x01;
	for (i = 0; i < 32; i++) {
80204a84:	e0bff717 	ldw	r2,-36(fp)
80204a88:	10800044 	addi	r2,r2,1
80204a8c:	e0bff715 	stw	r2,-36(fp)
80204a90:	e0bff717 	ldw	r2,-36(fp)
80204a94:	10800810 	cmplti	r2,r2,32
80204a98:	103ff01e 	bne	r2,zero,80204a5c <__reset+0xfa1e4a5c>
		if ((Value32 & Mask32) == 0x00) {
			nZeroCnt++;
		}
		Mask32 <<= 1;
	}
	bSuccess = (nZeroCnt & 0x01) ? FALSE : TRUE;
80204a9c:	e0bff917 	ldw	r2,-28(fp)
80204aa0:	1080004c 	andi	r2,r2,1
80204aa4:	1005003a 	cmpeq	r2,r2,zero
80204aa8:	10803fcc 	andi	r2,r2,255
80204aac:	e0bffb15 	stw	r2,-20(fp)
	if (!bSuccess) {
80204ab0:	e0bffb17 	ldw	r2,-20(fp)
80204ab4:	1000021e 	bne	r2,zero,80204ac0 <POWER_SPI_RW+0x4bc>
		return FALSE;
80204ab8:	0005883a 	mov	r2,zero
80204abc:	00000406 	br	80204ad0 <POWER_SPI_RW+0x4cc>
	}

	*pValue = Value32;
80204ac0:	e0800317 	ldw	r2,12(fp)
80204ac4:	e0fff517 	ldw	r3,-44(fp)
80204ac8:	10c00015 	stw	r3,0(r2)

	return bSuccess;
80204acc:	e0bffb17 	ldw	r2,-20(fp)
}
80204ad0:	e037883a 	mov	sp,fp
80204ad4:	dfc00117 	ldw	ra,4(sp)
80204ad8:	df000017 	ldw	fp,0(sp)
80204adc:	dec00204 	addi	sp,sp,8
80204ae0:	f800283a 	ret

80204ae4 <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
80204ae4:	defffd04 	addi	sp,sp,-12
80204ae8:	df000215 	stw	fp,8(sp)
80204aec:	df000204 	addi	fp,sp,8
80204af0:	2005883a 	mov	r2,r4
80204af4:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
80204af8:	e0bfff03 	ldbu	r2,-4(fp)
80204afc:	10c00168 	cmpgeui	r3,r2,5
80204b00:	18001c1e 	bne	r3,zero,80204b74 <bSSDisplayConfig+0x90>
80204b04:	100690ba 	slli	r3,r2,2
80204b08:	00a00834 	movhi	r2,32800
80204b0c:	1092c704 	addi	r2,r2,19228
80204b10:	1885883a 	add	r2,r3,r2
80204b14:	10800017 	ldw	r2,0(r2)
80204b18:	1000683a 	jmp	r2
80204b1c:	80204b30 	cmpltui	zero,r16,33068
80204b20:	80204b3c 	xorhi	zero,r16,33068
80204b24:	80204b48 	cmpgei	zero,r16,-32467
80204b28:	80204b5c 	xori	zero,r16,33069
80204b2c:	80204b6c 	andhi	zero,r16,33069
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
80204b30:	00800cc4 	movi	r2,51
80204b34:	d0a01945 	stb	r2,-32667(gp)
	    break;
80204b38:	00001006 	br	80204b7c <bSSDisplayConfig+0x98>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
80204b3c:	00801544 	movi	r2,85
80204b40:	d0a01945 	stb	r2,-32667(gp)
	    break;
80204b44:	00000d06 	br	80204b7c <bSSDisplayConfig+0x98>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
80204b48:	d0e01943 	ldbu	r3,-32667(gp)
80204b4c:	00bff744 	movi	r2,-35
80204b50:	1884703a 	and	r2,r3,r2
80204b54:	d0a01945 	stb	r2,-32667(gp)
	    break;
80204b58:	00000806 	br	80204b7c <bSSDisplayConfig+0x98>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
80204b5c:	d0a01943 	ldbu	r2,-32667(gp)
80204b60:	10800894 	ori	r2,r2,34
80204b64:	d0a01945 	stb	r2,-32667(gp)
	    break;
80204b68:	00000406 	br	80204b7c <bSSDisplayConfig+0x98>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
80204b6c:	d0201945 	stb	zero,-32667(gp)
	    break;
80204b70:	00000206 	br	80204b7c <bSSDisplayConfig+0x98>
		
		default:
		    return FALSE;
80204b74:	0005883a 	mov	r2,zero
80204b78:	00000806 	br	80204b9c <bSSDisplayConfig+0xb8>
	}

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
80204b7c:	00a04034 	movhi	r2,33024
80204b80:	10817404 	addi	r2,r2,1488
80204b84:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
80204b88:	d0a01943 	ldbu	r2,-32667(gp)
80204b8c:	10c03fcc 	andi	r3,r2,255
80204b90:	e0bffe17 	ldw	r2,-8(fp)
80204b94:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
80204b98:	00800044 	movi	r2,1
}
80204b9c:	e037883a 	mov	sp,fp
80204ba0:	df000017 	ldw	fp,0(sp)
80204ba4:	dec00104 	addi	sp,sp,4
80204ba8:	f800283a 	ret

80204bac <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
80204bac:	defffd04 	addi	sp,sp,-12
80204bb0:	df000215 	stw	fp,8(sp)
80204bb4:	df000204 	addi	fp,sp,8
80204bb8:	2005883a 	mov	r2,r4
80204bbc:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
80204bc0:	00a04034 	movhi	r2,33024
80204bc4:	10817404 	addi	r2,r2,1488
80204bc8:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
80204bcc:	e0bffe17 	ldw	r2,-8(fp)
80204bd0:	10800104 	addi	r2,r2,4
80204bd4:	e0ffff03 	ldbu	r3,-4(fp)
80204bd8:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
80204bdc:	00800044 	movi	r2,1
}
80204be0:	e037883a 	mov	sp,fp
80204be4:	df000017 	ldw	fp,0(sp)
80204be8:	dec00104 	addi	sp,sp,4
80204bec:	f800283a 	ret

80204bf0 <main>:
void vLoopbackTest(void);
void vLoopbackRandomTest(void);

alt_u32 uliInitialState;

int main() {
80204bf0:	defffb04 	addi	sp,sp,-20
80204bf4:	dfc00415 	stw	ra,16(sp)
80204bf8:	df000315 	stw	fp,12(sp)
80204bfc:	df000304 	addi	fp,sp,12
	printf("Hello from Nios II!\n\n");
80204c00:	012008b4 	movhi	r4,32802
80204c04:	2131b204 	addi	r4,r4,-14648
80204c08:	02069340 	call	80206934 <puts>

	TFtdiRegisters *pxFtdi = (TFtdiRegisters *) USB_3_FTDI_0_BASE;
80204c0c:	00a00034 	movhi	r2,32768
80204c10:	e0bfff15 	stw	r2,-4(fp)

	bDdr2SwitchMemory(DDR2_M2_ID);
80204c14:	01000044 	movi	r4,1
80204c18:	02012940 	call	80201294 <bDdr2SwitchMemory>
	bSdmaInitM2Dma();
80204c1c:	02026c40 	call	802026c4 <bSdmaInitM2Dma>

	alt_u64 *pulliDdr2Mem;
	alt_u32 uliAddrCnt = 0;
80204c20:	e03ffe15 	stw	zero,-8(fp)

	// Clear Memory
	pulliDdr2Mem = (alt_u64 *)DDR2_EXT_ADDR_WINDOWED_BASE;
80204c24:	e03ffd15 	stw	zero,-12(fp)
	for (uliAddrCnt = 0; uliAddrCnt < 1024*2; uliAddrCnt++) {
80204c28:	e03ffe15 	stw	zero,-8(fp)
80204c2c:	00000906 	br	80204c54 <main+0x64>
		*pulliDdr2Mem = (alt_u64)0;
80204c30:	e0bffd17 	ldw	r2,-12(fp)
80204c34:	10000015 	stw	zero,0(r2)
80204c38:	10000115 	stw	zero,4(r2)
//		printf("Addr: 0x%08lX, Data: 0x%016llX \n", (alt_u32)pulliDdr2Mem, (alt_u64)(*pulliDdr2Mem));
		pulliDdr2Mem++;
80204c3c:	e0bffd17 	ldw	r2,-12(fp)
80204c40:	10800204 	addi	r2,r2,8
80204c44:	e0bffd15 	stw	r2,-12(fp)
	alt_u64 *pulliDdr2Mem;
	alt_u32 uliAddrCnt = 0;

	// Clear Memory
	pulliDdr2Mem = (alt_u64 *)DDR2_EXT_ADDR_WINDOWED_BASE;
	for (uliAddrCnt = 0; uliAddrCnt < 1024*2; uliAddrCnt++) {
80204c48:	e0bffe17 	ldw	r2,-8(fp)
80204c4c:	10800044 	addi	r2,r2,1
80204c50:	e0bffe15 	stw	r2,-8(fp)
80204c54:	e0bffe17 	ldw	r2,-8(fp)
80204c58:	10820030 	cmpltui	r2,r2,2048
80204c5c:	103ff41e 	bne	r2,zero,80204c30 <__reset+0xfa1e4c30>
//		printf("Addr: 0x%08lX, Data: 0x%016llX \n", (alt_u32)pulliDdr2Mem, (alt_u64)(*pulliDdr2Mem));
		pulliDdr2Mem++;
	}

	// Stop and Clear Channel
	pxFtdi->bFtdiStop = TRUE;
80204c60:	e0bfff17 	ldw	r2,-4(fp)
80204c64:	00c00044 	movi	r3,1
80204c68:	10c00115 	stw	r3,4(r2)
	pxFtdi->bFtdiClear = TRUE;
80204c6c:	e0bfff17 	ldw	r2,-4(fp)
80204c70:	00c00044 	movi	r3,1
80204c74:	10c00015 	stw	r3,0(r2)

	// Start Channel
//	pxFtdi->bFtdiStart = TRUE;

	usleep(5*1000*1000);
80204c78:	01001334 	movhi	r4,76
80204c7c:	2112d004 	addi	r4,r4,19264
80204c80:	02170340 	call	80217034 <usleep>
//	}

//	vWriteTest();
//	vReadTest();
//	vLoopbackTest();
	vLoopbackRandomTest();
80204c84:	02058100 	call	80205810 <vLoopbackRandomTest>

	while (1) {}
80204c88:	003fff06 	br	80204c88 <__reset+0xfa1e4c88>

80204c8c <vWriteTest>:

	return 0;
}

void vWriteTest(void){
80204c8c:	defff904 	addi	sp,sp,-28
80204c90:	dfc00615 	stw	ra,24(sp)
80204c94:	df000515 	stw	fp,20(sp)
80204c98:	df000504 	addi	fp,sp,20

	TFtdiRegisters *pxFtdi = (TFtdiRegisters *) USB_3_FTDI_0_BASE;
80204c9c:	00a00034 	movhi	r2,32768
80204ca0:	e0bfff15 	stw	r2,-4(fp)
	alt_u64 *pulliDdr2Mem;
	alt_u32 uliAddrCnt = 0;
80204ca4:	e03ffc15 	stw	zero,-16(fp)

	// Fill Memory
	alt_u16 ucDataCnt = 0;
80204ca8:	e03ffd0d 	sth	zero,-12(fp)
	alt_u8 *pucDataAddr = (alt_u8 *)DDR2_EXT_ADDR_WINDOWED_BASE;
80204cac:	e03ffe15 	stw	zero,-8(fp)
	for (ucDataCnt = 0; ucDataCnt < (8*1024); ucDataCnt++) {
80204cb0:	e03ffd0d 	sth	zero,-12(fp)
80204cb4:	00000a06 	br	80204ce0 <vWriteTest+0x54>
		*pucDataAddr = (alt_u8)ucDataCnt;
80204cb8:	e0bffd0b 	ldhu	r2,-12(fp)
80204cbc:	1007883a 	mov	r3,r2
80204cc0:	e0bffe17 	ldw	r2,-8(fp)
80204cc4:	10c00005 	stb	r3,0(r2)
		pucDataAddr++;
80204cc8:	e0bffe17 	ldw	r2,-8(fp)
80204ccc:	10800044 	addi	r2,r2,1
80204cd0:	e0bffe15 	stw	r2,-8(fp)
	alt_u32 uliAddrCnt = 0;

	// Fill Memory
	alt_u16 ucDataCnt = 0;
	alt_u8 *pucDataAddr = (alt_u8 *)DDR2_EXT_ADDR_WINDOWED_BASE;
	for (ucDataCnt = 0; ucDataCnt < (8*1024); ucDataCnt++) {
80204cd4:	e0bffd0b 	ldhu	r2,-12(fp)
80204cd8:	10800044 	addi	r2,r2,1
80204cdc:	e0bffd0d 	sth	r2,-12(fp)
80204ce0:	e0bffd0b 	ldhu	r2,-12(fp)
80204ce4:	10880030 	cmpltui	r2,r2,8192
80204ce8:	103ff31e 	bne	r2,zero,80204cb8 <__reset+0xfa1e4cb8>
		*pucDataAddr = (alt_u8)ucDataCnt;
		pucDataAddr++;
	}

	usleep(1*1000*1000);
80204cec:	010003f4 	movhi	r4,15
80204cf0:	21109004 	addi	r4,r4,16960
80204cf4:	02170340 	call	80217034 <usleep>

	// Check Memory Content
	pulliDdr2Mem = (alt_u64 *)DDR2_EXT_ADDR_WINDOWED_BASE;
80204cf8:	e03ffb15 	stw	zero,-20(fp)
	for (uliAddrCnt = 0; uliAddrCnt < 1024; uliAddrCnt++) {
80204cfc:	e03ffc15 	stw	zero,-16(fp)
80204d00:	00000f06 	br	80204d40 <vWriteTest+0xb4>
		printf("Addr: 0x%08lX, Data: 0x%016llX \n", (alt_u32)pulliDdr2Mem, (alt_u64)(*pulliDdr2Mem));
80204d04:	e17ffb17 	ldw	r5,-20(fp)
80204d08:	e13ffb17 	ldw	r4,-20(fp)
80204d0c:	20800017 	ldw	r2,0(r4)
80204d10:	20c00117 	ldw	r3,4(r4)
80204d14:	100d883a 	mov	r6,r2
80204d18:	180f883a 	mov	r7,r3
80204d1c:	012008b4 	movhi	r4,32802
80204d20:	2131b804 	addi	r4,r4,-14624
80204d24:	02068380 	call	80206838 <printf>
		pulliDdr2Mem++;
80204d28:	e0bffb17 	ldw	r2,-20(fp)
80204d2c:	10800204 	addi	r2,r2,8
80204d30:	e0bffb15 	stw	r2,-20(fp)

	usleep(1*1000*1000);

	// Check Memory Content
	pulliDdr2Mem = (alt_u64 *)DDR2_EXT_ADDR_WINDOWED_BASE;
	for (uliAddrCnt = 0; uliAddrCnt < 1024; uliAddrCnt++) {
80204d34:	e0bffc17 	ldw	r2,-16(fp)
80204d38:	10800044 	addi	r2,r2,1
80204d3c:	e0bffc15 	stw	r2,-16(fp)
80204d40:	e0bffc17 	ldw	r2,-16(fp)
80204d44:	10810030 	cmpltui	r2,r2,1024
80204d48:	103fee1e 	bne	r2,zero,80204d04 <__reset+0xfa1e4d04>
		printf("Addr: 0x%08lX, Data: 0x%016llX \n", (alt_u32)pulliDdr2Mem, (alt_u64)(*pulliDdr2Mem));
		pulliDdr2Mem++;
	}

	// Dump Channel Status
	printf("bFtdiClear        : %d \n", pxFtdi->bFtdiClear       );
80204d4c:	e0bfff17 	ldw	r2,-4(fp)
80204d50:	10800017 	ldw	r2,0(r2)
80204d54:	100b883a 	mov	r5,r2
80204d58:	012008b4 	movhi	r4,32802
80204d5c:	2131c104 	addi	r4,r4,-14588
80204d60:	02068380 	call	80206838 <printf>
	printf("bFtdiStop         : %d \n", pxFtdi->bFtdiStop        );
80204d64:	e0bfff17 	ldw	r2,-4(fp)
80204d68:	10800117 	ldw	r2,4(r2)
80204d6c:	100b883a 	mov	r5,r2
80204d70:	012008b4 	movhi	r4,32802
80204d74:	2131c804 	addi	r4,r4,-14560
80204d78:	02068380 	call	80206838 <printf>
	printf("bFtdiStart        : %d \n", pxFtdi->bFtdiStart       );
80204d7c:	e0bfff17 	ldw	r2,-4(fp)
80204d80:	10800217 	ldw	r2,8(r2)
80204d84:	100b883a 	mov	r5,r2
80204d88:	012008b4 	movhi	r4,32802
80204d8c:	2131cf04 	addi	r4,r4,-14532
80204d90:	02068380 	call	80206838 <printf>
	printf("bTxDbufferEmpty   : %d \n", pxFtdi->bTxDbufferEmpty  );
80204d94:	e0bfff17 	ldw	r2,-4(fp)
80204d98:	10800317 	ldw	r2,12(r2)
80204d9c:	100b883a 	mov	r5,r2
80204da0:	012008b4 	movhi	r4,32802
80204da4:	2131d604 	addi	r4,r4,-14504
80204da8:	02068380 	call	80206838 <printf>
	printf("bTxDbufferWrready : %d \n", pxFtdi->bTxDbufferWrready);
80204dac:	e0bfff17 	ldw	r2,-4(fp)
80204db0:	10800417 	ldw	r2,16(r2)
80204db4:	100b883a 	mov	r5,r2
80204db8:	012008b4 	movhi	r4,32802
80204dbc:	2131dd04 	addi	r4,r4,-14476
80204dc0:	02068380 	call	80206838 <printf>
	printf("bTxDbufferFull    : %d \n", pxFtdi->bTxDbufferFull   );
80204dc4:	e0bfff17 	ldw	r2,-4(fp)
80204dc8:	10800517 	ldw	r2,20(r2)
80204dcc:	100b883a 	mov	r5,r2
80204dd0:	012008b4 	movhi	r4,32802
80204dd4:	2131e404 	addi	r4,r4,-14448
80204dd8:	02068380 	call	80206838 <printf>
	printf("bTxDbufferRdready : %d \n", pxFtdi->bTxDbufferRdready);
80204ddc:	e0bfff17 	ldw	r2,-4(fp)
80204de0:	10800617 	ldw	r2,24(r2)
80204de4:	100b883a 	mov	r5,r2
80204de8:	012008b4 	movhi	r4,32802
80204dec:	2131eb04 	addi	r4,r4,-14420
80204df0:	02068380 	call	80206838 <printf>
	printf("bRxDbufferEmpty   : %d \n", pxFtdi->bRxDbufferEmpty  );
80204df4:	e0bfff17 	ldw	r2,-4(fp)
80204df8:	10800717 	ldw	r2,28(r2)
80204dfc:	100b883a 	mov	r5,r2
80204e00:	012008b4 	movhi	r4,32802
80204e04:	2131f204 	addi	r4,r4,-14392
80204e08:	02068380 	call	80206838 <printf>
	printf("bRxDbufferWrready : %d \n", pxFtdi->bRxDbufferWrready);
80204e0c:	e0bfff17 	ldw	r2,-4(fp)
80204e10:	10800817 	ldw	r2,32(r2)
80204e14:	100b883a 	mov	r5,r2
80204e18:	012008b4 	movhi	r4,32802
80204e1c:	2131f904 	addi	r4,r4,-14364
80204e20:	02068380 	call	80206838 <printf>
	printf("bRxDbufferFull    : %d \n", pxFtdi->bRxDbufferFull   );
80204e24:	e0bfff17 	ldw	r2,-4(fp)
80204e28:	10800917 	ldw	r2,36(r2)
80204e2c:	100b883a 	mov	r5,r2
80204e30:	012008b4 	movhi	r4,32802
80204e34:	21320004 	addi	r4,r4,-14336
80204e38:	02068380 	call	80206838 <printf>
	printf("bRxDbufferRdready : %d \n", pxFtdi->bRxDbufferRdready);
80204e3c:	e0bfff17 	ldw	r2,-4(fp)
80204e40:	10800a17 	ldw	r2,40(r2)
80204e44:	100b883a 	mov	r5,r2
80204e48:	012008b4 	movhi	r4,32802
80204e4c:	21320704 	addi	r4,r4,-14308
80204e50:	02068380 	call	80206838 <printf>

	// Start Channel
	pxFtdi->bFtdiStart = TRUE;
80204e54:	e0bfff17 	ldw	r2,-4(fp)
80204e58:	00c00044 	movi	r3,1
80204e5c:	10c00215 	stw	r3,8(r2)

	// Transmitt data to USB
	while (!pxFtdi->bTxDbufferWrready) {}
80204e60:	0001883a 	nop
80204e64:	e0bfff17 	ldw	r2,-4(fp)
80204e68:	10800417 	ldw	r2,16(r2)
80204e6c:	103ffd26 	beq	r2,zero,80204e64 <__reset+0xfa1e4e64>

	if (bSdmaDmaM2FtdiTransfer((alt_u32 *)0, (8 * 1024), eSdmaTxFtdi)) {
80204e70:	000d883a 	mov	r6,zero
80204e74:	01480004 	movi	r5,8192
80204e78:	0009883a 	mov	r4,zero
80204e7c:	020324c0 	call	8020324c <bSdmaDmaM2FtdiTransfer>
80204e80:	10000426 	beq	r2,zero,80204e94 <vWriteTest+0x208>
		printf("DMA Tx Ok \n");
80204e84:	012008b4 	movhi	r4,32802
80204e88:	21320e04 	addi	r4,r4,-14280
80204e8c:	02069340 	call	80206934 <puts>
80204e90:	00000306 	br	80204ea0 <vWriteTest+0x214>
	} else {
		printf("DMA Tx Fail \n");
80204e94:	012008b4 	movhi	r4,32802
80204e98:	21321104 	addi	r4,r4,-14268
80204e9c:	02069340 	call	80206934 <puts>
	}

	usleep(1*1000*1000);
80204ea0:	010003f4 	movhi	r4,15
80204ea4:	21109004 	addi	r4,r4,16960
80204ea8:	02170340 	call	80217034 <usleep>

	// Read Test Data (8kiB)
		printf("Test Tx Empty(%d), UsedW(%d), Full(%d) \n", pxFtdi->bTestTxRdempty, pxFtdi->uiTestTxRdusedw, pxFtdi->bTestTxRdfull);
80204eac:	e0bfff17 	ldw	r2,-4(fp)
80204eb0:	10c00c17 	ldw	r3,48(r2)
80204eb4:	e0bfff17 	ldw	r2,-4(fp)
80204eb8:	10800e0b 	ldhu	r2,56(r2)
80204ebc:	113fffcc 	andi	r4,r2,65535
80204ec0:	e0bfff17 	ldw	r2,-4(fp)
80204ec4:	10800d17 	ldw	r2,52(r2)
80204ec8:	100f883a 	mov	r7,r2
80204ecc:	200d883a 	mov	r6,r4
80204ed0:	180b883a 	mov	r5,r3
80204ed4:	012008b4 	movhi	r4,32802
80204ed8:	21321504 	addi	r4,r4,-14252
80204edc:	02068380 	call	80206838 <printf>
		for (ucDataCnt = 0; ucDataCnt < (8*1024/4); ucDataCnt++) {
80204ee0:	e03ffd0d 	sth	zero,-12(fp)
80204ee4:	00001406 	br	80204f38 <vWriteTest+0x2ac>
			while (pxFtdi->bTestTxRdempty) {}
80204ee8:	0001883a 	nop
80204eec:	e0bfff17 	ldw	r2,-4(fp)
80204ef0:	10800c17 	ldw	r2,48(r2)
80204ef4:	103ffd1e 	bne	r2,zero,80204eec <__reset+0xfa1e4eec>
			printf("Test Tx Data(0x%08lX), BE(0x%X) \n", pxFtdi->uliTestTxRddataData, pxFtdi->ucTestTxRddataBe);
80204ef8:	e0bfff17 	ldw	r2,-4(fp)
80204efc:	10c00f17 	ldw	r3,60(r2)
80204f00:	e0bfff17 	ldw	r2,-4(fp)
80204f04:	10801003 	ldbu	r2,64(r2)
80204f08:	10803fcc 	andi	r2,r2,255
80204f0c:	100d883a 	mov	r6,r2
80204f10:	180b883a 	mov	r5,r3
80204f14:	012008b4 	movhi	r4,32802
80204f18:	21322004 	addi	r4,r4,-14208
80204f1c:	02068380 	call	80206838 <printf>
			pxFtdi->bTestTxRdreq = TRUE;
80204f20:	e0bfff17 	ldw	r2,-4(fp)
80204f24:	00c00044 	movi	r3,1
80204f28:	10c00b15 	stw	r3,44(r2)

	usleep(1*1000*1000);

	// Read Test Data (8kiB)
		printf("Test Tx Empty(%d), UsedW(%d), Full(%d) \n", pxFtdi->bTestTxRdempty, pxFtdi->uiTestTxRdusedw, pxFtdi->bTestTxRdfull);
		for (ucDataCnt = 0; ucDataCnt < (8*1024/4); ucDataCnt++) {
80204f2c:	e0bffd0b 	ldhu	r2,-12(fp)
80204f30:	10800044 	addi	r2,r2,1
80204f34:	e0bffd0d 	sth	r2,-12(fp)
80204f38:	e0bffd0b 	ldhu	r2,-12(fp)
80204f3c:	10820030 	cmpltui	r2,r2,2048
80204f40:	103fe91e 	bne	r2,zero,80204ee8 <__reset+0xfa1e4ee8>
			while (pxFtdi->bTestTxRdempty) {}
			printf("Test Tx Data(0x%08lX), BE(0x%X) \n", pxFtdi->uliTestTxRddataData, pxFtdi->ucTestTxRddataBe);
			pxFtdi->bTestTxRdreq = TRUE;
		}
		printf("Test Tx Empty(%d), UsedW(%d), Full(%d) \n", pxFtdi->bTestTxRdempty, pxFtdi->uiTestTxRdusedw, pxFtdi->bTestTxRdfull);
80204f44:	e0bfff17 	ldw	r2,-4(fp)
80204f48:	10c00c17 	ldw	r3,48(r2)
80204f4c:	e0bfff17 	ldw	r2,-4(fp)
80204f50:	10800e0b 	ldhu	r2,56(r2)
80204f54:	113fffcc 	andi	r4,r2,65535
80204f58:	e0bfff17 	ldw	r2,-4(fp)
80204f5c:	10800d17 	ldw	r2,52(r2)
80204f60:	100f883a 	mov	r7,r2
80204f64:	200d883a 	mov	r6,r4
80204f68:	180b883a 	mov	r5,r3
80204f6c:	012008b4 	movhi	r4,32802
80204f70:	21321504 	addi	r4,r4,-14252
80204f74:	02068380 	call	80206838 <printf>

}
80204f78:	0001883a 	nop
80204f7c:	e037883a 	mov	sp,fp
80204f80:	dfc00117 	ldw	ra,4(sp)
80204f84:	df000017 	ldw	fp,0(sp)
80204f88:	dec00204 	addi	sp,sp,8
80204f8c:	f800283a 	ret

80204f90 <vReadTest>:

void vReadTest(void){
80204f90:	defffa04 	addi	sp,sp,-24
80204f94:	dfc00515 	stw	ra,20(sp)
80204f98:	df000415 	stw	fp,16(sp)
80204f9c:	df000404 	addi	fp,sp,16

	TFtdiRegisters *pxFtdi = (TFtdiRegisters *) USB_3_FTDI_0_BASE;
80204fa0:	00a00034 	movhi	r2,32768
80204fa4:	e0bfff15 	stw	r2,-4(fp)
	alt_u64 *pulliDdr2Mem;
	alt_u32 uliAddrCnt = 0;
80204fa8:	e03ffd15 	stw	zero,-12(fp)

	// Write Test Data to be read (8kiB)
		alt_u16 ucDataCnt = 0;
80204fac:	e03ffe0d 	sth	zero,-8(fp)
		for (ucDataCnt = 0; ucDataCnt < (8*1024); ucDataCnt = ucDataCnt + 4) {
80204fb0:	e03ffe0d 	sth	zero,-8(fp)
80204fb4:	00001c06 	br	80205028 <vReadTest+0x98>
			pxFtdi->uliTestRxWrdataData = (alt_u32)(((ucDataCnt) & 0x000000FF) | (((ucDataCnt + 1) << 8) & 0x0000FF00) | (((ucDataCnt + 2) << 16) & 0x00FF0000) | (((ucDataCnt + 3) << 24) & 0xFF000000));
80204fb8:	e0bffe0b 	ldhu	r2,-8(fp)
80204fbc:	10c03fcc 	andi	r3,r2,255
80204fc0:	e0bffe0b 	ldhu	r2,-8(fp)
80204fc4:	10800044 	addi	r2,r2,1
80204fc8:	1004923a 	slli	r2,r2,8
80204fcc:	10bfffcc 	andi	r2,r2,65535
80204fd0:	1886b03a 	or	r3,r3,r2
80204fd4:	e0bffe0b 	ldhu	r2,-8(fp)
80204fd8:	10800084 	addi	r2,r2,2
80204fdc:	1004943a 	slli	r2,r2,16
80204fe0:	10803fec 	andhi	r2,r2,255
80204fe4:	1884b03a 	or	r2,r3,r2
80204fe8:	1007883a 	mov	r3,r2
80204fec:	e0bffe0b 	ldhu	r2,-8(fp)
80204ff0:	108000c4 	addi	r2,r2,3
80204ff4:	1004963a 	slli	r2,r2,24
80204ff8:	1886b03a 	or	r3,r3,r2
80204ffc:	e0bfff17 	ldw	r2,-4(fp)
80205000:	10c01215 	stw	r3,72(r2)
			pxFtdi->ucTestRxWrdataBe = (alt_u8)0xFF;
80205004:	e0bfff17 	ldw	r2,-4(fp)
80205008:	00ffffc4 	movi	r3,-1
8020500c:	10c01305 	stb	r3,76(r2)
			pxFtdi->bTestRxWrreq = TRUE;
80205010:	e0bfff17 	ldw	r2,-4(fp)
80205014:	00c00044 	movi	r3,1
80205018:	10c01115 	stw	r3,68(r2)
	alt_u64 *pulliDdr2Mem;
	alt_u32 uliAddrCnt = 0;

	// Write Test Data to be read (8kiB)
		alt_u16 ucDataCnt = 0;
		for (ucDataCnt = 0; ucDataCnt < (8*1024); ucDataCnt = ucDataCnt + 4) {
8020501c:	e0bffe0b 	ldhu	r2,-8(fp)
80205020:	10800104 	addi	r2,r2,4
80205024:	e0bffe0d 	sth	r2,-8(fp)
80205028:	e0bffe0b 	ldhu	r2,-8(fp)
8020502c:	10880030 	cmpltui	r2,r2,8192
80205030:	103fe11e 	bne	r2,zero,80204fb8 <__reset+0xfa1e4fb8>
			pxFtdi->uliTestRxWrdataData = (alt_u32)(((ucDataCnt) & 0x000000FF) | (((ucDataCnt + 1) << 8) & 0x0000FF00) | (((ucDataCnt + 2) << 16) & 0x00FF0000) | (((ucDataCnt + 3) << 24) & 0xFF000000));
			pxFtdi->ucTestRxWrdataBe = (alt_u8)0xFF;
			pxFtdi->bTestRxWrreq = TRUE;
//			printf("Test Rx Empty(%d), UsedW(%d), Full(%d) \n", pxFtdi->bTestRxWrempty, pxFtdi->uiTestRxWrusedw, pxFtdi->bTestRxWrfull);
		}
		printf("Test Rx Empty(%d), UsedW(%d), Full(%d) \n", pxFtdi->bTestRxWrempty, pxFtdi->uiTestRxWrusedw, pxFtdi->bTestRxWrfull);
80205034:	e0bfff17 	ldw	r2,-4(fp)
80205038:	10c01417 	ldw	r3,80(r2)
8020503c:	e0bfff17 	ldw	r2,-4(fp)
80205040:	1080160b 	ldhu	r2,88(r2)
80205044:	113fffcc 	andi	r4,r2,65535
80205048:	e0bfff17 	ldw	r2,-4(fp)
8020504c:	10801517 	ldw	r2,84(r2)
80205050:	100f883a 	mov	r7,r2
80205054:	200d883a 	mov	r6,r4
80205058:	180b883a 	mov	r5,r3
8020505c:	012008b4 	movhi	r4,32802
80205060:	21322904 	addi	r4,r4,-14172
80205064:	02068380 	call	80206838 <printf>

		usleep(1*1000*1000);
80205068:	010003f4 	movhi	r4,15
8020506c:	21109004 	addi	r4,r4,16960
80205070:	02170340 	call	80217034 <usleep>

		// Start Channel
		pxFtdi->bFtdiStart = TRUE;
80205074:	e0bfff17 	ldw	r2,-4(fp)
80205078:	00c00044 	movi	r3,1
8020507c:	10c00215 	stw	r3,8(r2)


	// Dump Channel Status
	printf("bFtdiClear        : %d \n", pxFtdi->bFtdiClear       );
80205080:	e0bfff17 	ldw	r2,-4(fp)
80205084:	10800017 	ldw	r2,0(r2)
80205088:	100b883a 	mov	r5,r2
8020508c:	012008b4 	movhi	r4,32802
80205090:	2131c104 	addi	r4,r4,-14588
80205094:	02068380 	call	80206838 <printf>
	printf("bFtdiStop         : %d \n", pxFtdi->bFtdiStop        );
80205098:	e0bfff17 	ldw	r2,-4(fp)
8020509c:	10800117 	ldw	r2,4(r2)
802050a0:	100b883a 	mov	r5,r2
802050a4:	012008b4 	movhi	r4,32802
802050a8:	2131c804 	addi	r4,r4,-14560
802050ac:	02068380 	call	80206838 <printf>
	printf("bFtdiStart        : %d \n", pxFtdi->bFtdiStart       );
802050b0:	e0bfff17 	ldw	r2,-4(fp)
802050b4:	10800217 	ldw	r2,8(r2)
802050b8:	100b883a 	mov	r5,r2
802050bc:	012008b4 	movhi	r4,32802
802050c0:	2131cf04 	addi	r4,r4,-14532
802050c4:	02068380 	call	80206838 <printf>
	printf("bTxDbufferEmpty   : %d \n", pxFtdi->bTxDbufferEmpty  );
802050c8:	e0bfff17 	ldw	r2,-4(fp)
802050cc:	10800317 	ldw	r2,12(r2)
802050d0:	100b883a 	mov	r5,r2
802050d4:	012008b4 	movhi	r4,32802
802050d8:	2131d604 	addi	r4,r4,-14504
802050dc:	02068380 	call	80206838 <printf>
	printf("bTxDbufferWrready : %d \n", pxFtdi->bTxDbufferWrready);
802050e0:	e0bfff17 	ldw	r2,-4(fp)
802050e4:	10800417 	ldw	r2,16(r2)
802050e8:	100b883a 	mov	r5,r2
802050ec:	012008b4 	movhi	r4,32802
802050f0:	2131dd04 	addi	r4,r4,-14476
802050f4:	02068380 	call	80206838 <printf>
	printf("bTxDbufferFull    : %d \n", pxFtdi->bTxDbufferFull   );
802050f8:	e0bfff17 	ldw	r2,-4(fp)
802050fc:	10800517 	ldw	r2,20(r2)
80205100:	100b883a 	mov	r5,r2
80205104:	012008b4 	movhi	r4,32802
80205108:	2131e404 	addi	r4,r4,-14448
8020510c:	02068380 	call	80206838 <printf>
	printf("bTxDbufferRdready : %d \n", pxFtdi->bTxDbufferRdready);
80205110:	e0bfff17 	ldw	r2,-4(fp)
80205114:	10800617 	ldw	r2,24(r2)
80205118:	100b883a 	mov	r5,r2
8020511c:	012008b4 	movhi	r4,32802
80205120:	2131eb04 	addi	r4,r4,-14420
80205124:	02068380 	call	80206838 <printf>
	printf("bRxDbufferEmpty   : %d \n", pxFtdi->bRxDbufferEmpty  );
80205128:	e0bfff17 	ldw	r2,-4(fp)
8020512c:	10800717 	ldw	r2,28(r2)
80205130:	100b883a 	mov	r5,r2
80205134:	012008b4 	movhi	r4,32802
80205138:	2131f204 	addi	r4,r4,-14392
8020513c:	02068380 	call	80206838 <printf>
	printf("bRxDbufferWrready : %d \n", pxFtdi->bRxDbufferWrready);
80205140:	e0bfff17 	ldw	r2,-4(fp)
80205144:	10800817 	ldw	r2,32(r2)
80205148:	100b883a 	mov	r5,r2
8020514c:	012008b4 	movhi	r4,32802
80205150:	2131f904 	addi	r4,r4,-14364
80205154:	02068380 	call	80206838 <printf>
	printf("bRxDbufferFull    : %d \n", pxFtdi->bRxDbufferFull   );
80205158:	e0bfff17 	ldw	r2,-4(fp)
8020515c:	10800917 	ldw	r2,36(r2)
80205160:	100b883a 	mov	r5,r2
80205164:	012008b4 	movhi	r4,32802
80205168:	21320004 	addi	r4,r4,-14336
8020516c:	02068380 	call	80206838 <printf>
	printf("bRxDbufferRdready : %d \n", pxFtdi->bRxDbufferRdready);
80205170:	e0bfff17 	ldw	r2,-4(fp)
80205174:	10800a17 	ldw	r2,40(r2)
80205178:	100b883a 	mov	r5,r2
8020517c:	012008b4 	movhi	r4,32802
80205180:	21320704 	addi	r4,r4,-14308
80205184:	02068380 	call	80206838 <printf>

	// Receive data from USB
	while (!pxFtdi->bRxDbufferRdready) {}
80205188:	0001883a 	nop
8020518c:	e0bfff17 	ldw	r2,-4(fp)
80205190:	10800a17 	ldw	r2,40(r2)
80205194:	103ffd26 	beq	r2,zero,8020518c <__reset+0xfa1e518c>

	if (bSdmaDmaM2FtdiTransfer((alt_u32 *)0, (8 * 1024), eSdmaRxFtdi)) {
80205198:	01800044 	movi	r6,1
8020519c:	01480004 	movi	r5,8192
802051a0:	0009883a 	mov	r4,zero
802051a4:	020324c0 	call	8020324c <bSdmaDmaM2FtdiTransfer>
802051a8:	10000426 	beq	r2,zero,802051bc <vReadTest+0x22c>
		printf("DMA Rx Ok \n");
802051ac:	012008b4 	movhi	r4,32802
802051b0:	21323404 	addi	r4,r4,-14128
802051b4:	02069340 	call	80206934 <puts>
802051b8:	00000306 	br	802051c8 <vReadTest+0x238>
	} else {
		printf("DMA Rx Fail \n");
802051bc:	012008b4 	movhi	r4,32802
802051c0:	21323704 	addi	r4,r4,-14116
802051c4:	02069340 	call	80206934 <puts>
	}

	usleep(1*1000*1000);
802051c8:	010003f4 	movhi	r4,15
802051cc:	21109004 	addi	r4,r4,16960
802051d0:	02170340 	call	80217034 <usleep>

	// Check Memory Content
	pulliDdr2Mem = (alt_u64 *)DDR2_EXT_ADDR_WINDOWED_BASE;
802051d4:	e03ffc15 	stw	zero,-16(fp)
	for (uliAddrCnt = 0; uliAddrCnt < 1024; uliAddrCnt++) {
802051d8:	e03ffd15 	stw	zero,-12(fp)
802051dc:	00000f06 	br	8020521c <vReadTest+0x28c>
		printf("Addr: 0x%08lX, Data: 0x%016llX \n", (alt_u32)pulliDdr2Mem, (alt_u64)(*pulliDdr2Mem));
802051e0:	e17ffc17 	ldw	r5,-16(fp)
802051e4:	e13ffc17 	ldw	r4,-16(fp)
802051e8:	20800017 	ldw	r2,0(r4)
802051ec:	20c00117 	ldw	r3,4(r4)
802051f0:	100d883a 	mov	r6,r2
802051f4:	180f883a 	mov	r7,r3
802051f8:	012008b4 	movhi	r4,32802
802051fc:	2131b804 	addi	r4,r4,-14624
80205200:	02068380 	call	80206838 <printf>
		pulliDdr2Mem++;
80205204:	e0bffc17 	ldw	r2,-16(fp)
80205208:	10800204 	addi	r2,r2,8
8020520c:	e0bffc15 	stw	r2,-16(fp)

	usleep(1*1000*1000);

	// Check Memory Content
	pulliDdr2Mem = (alt_u64 *)DDR2_EXT_ADDR_WINDOWED_BASE;
	for (uliAddrCnt = 0; uliAddrCnt < 1024; uliAddrCnt++) {
80205210:	e0bffd17 	ldw	r2,-12(fp)
80205214:	10800044 	addi	r2,r2,1
80205218:	e0bffd15 	stw	r2,-12(fp)
8020521c:	e0bffd17 	ldw	r2,-12(fp)
80205220:	10810030 	cmpltui	r2,r2,1024
80205224:	103fee1e 	bne	r2,zero,802051e0 <__reset+0xfa1e51e0>
		printf("Addr: 0x%08lX, Data: 0x%016llX \n", (alt_u32)pulliDdr2Mem, (alt_u64)(*pulliDdr2Mem));
		pulliDdr2Mem++;
	}
}
80205228:	0001883a 	nop
8020522c:	e037883a 	mov	sp,fp
80205230:	dfc00117 	ldw	ra,4(sp)
80205234:	df000017 	ldw	fp,0(sp)
80205238:	dec00204 	addi	sp,sp,8
8020523c:	f800283a 	ret

80205240 <vLoopbackTest>:

void vLoopbackTest(void){
80205240:	defff604 	addi	sp,sp,-40
80205244:	dfc00915 	stw	ra,36(sp)
80205248:	df000815 	stw	fp,32(sp)
8020524c:	df000804 	addi	fp,sp,32

	TFtdiRegisters *pxFtdi = (TFtdiRegisters *) USB_3_FTDI_0_BASE;
80205250:	00a00034 	movhi	r2,32768
80205254:	e0bfff15 	stw	r2,-4(fp)
	alt_u64 *pulliDdr2Mem;
	alt_u32 uliAddrCnt = 0;
80205258:	e03ff915 	stw	zero,-28(fp)

	// Fill Memory
	alt_u16 ucDataCnt = 0;
8020525c:	e03ffa0d 	sth	zero,-24(fp)
	alt_u8 *pucDataAddr = (alt_u8 *)DDR2_EXT_ADDR_WINDOWED_BASE;
80205260:	e03ffb15 	stw	zero,-20(fp)
	for (ucDataCnt = 0; ucDataCnt < (8*1024); ucDataCnt++) {
80205264:	e03ffa0d 	sth	zero,-24(fp)
80205268:	00000a06 	br	80205294 <vLoopbackTest+0x54>
		*pucDataAddr = (alt_u8)ucDataCnt;
8020526c:	e0bffa0b 	ldhu	r2,-24(fp)
80205270:	1007883a 	mov	r3,r2
80205274:	e0bffb17 	ldw	r2,-20(fp)
80205278:	10c00005 	stb	r3,0(r2)
		pucDataAddr++;
8020527c:	e0bffb17 	ldw	r2,-20(fp)
80205280:	10800044 	addi	r2,r2,1
80205284:	e0bffb15 	stw	r2,-20(fp)
	alt_u32 uliAddrCnt = 0;

	// Fill Memory
	alt_u16 ucDataCnt = 0;
	alt_u8 *pucDataAddr = (alt_u8 *)DDR2_EXT_ADDR_WINDOWED_BASE;
	for (ucDataCnt = 0; ucDataCnt < (8*1024); ucDataCnt++) {
80205288:	e0bffa0b 	ldhu	r2,-24(fp)
8020528c:	10800044 	addi	r2,r2,1
80205290:	e0bffa0d 	sth	r2,-24(fp)
80205294:	e0bffa0b 	ldhu	r2,-24(fp)
80205298:	10880030 	cmpltui	r2,r2,8192
8020529c:	103ff31e 	bne	r2,zero,8020526c <__reset+0xfa1e526c>
		*pucDataAddr = (alt_u8)ucDataCnt;
		pucDataAddr++;
	}

	usleep(1*1000*1000);
802052a0:	010003f4 	movhi	r4,15
802052a4:	21109004 	addi	r4,r4,16960
802052a8:	02170340 	call	80217034 <usleep>

	// Check Memory Content
	pulliDdr2Mem = (alt_u64 *)DDR2_EXT_ADDR_WINDOWED_BASE;
802052ac:	e03ff815 	stw	zero,-32(fp)
	for (uliAddrCnt = 0; uliAddrCnt < 1024; uliAddrCnt++) {
802052b0:	e03ff915 	stw	zero,-28(fp)
802052b4:	00000f06 	br	802052f4 <vLoopbackTest+0xb4>
		printf("Addr: 0x%08lX, Data: 0x%016llX \n", (alt_u32)pulliDdr2Mem, (alt_u64)(*pulliDdr2Mem));
802052b8:	e17ff817 	ldw	r5,-32(fp)
802052bc:	e13ff817 	ldw	r4,-32(fp)
802052c0:	20800017 	ldw	r2,0(r4)
802052c4:	20c00117 	ldw	r3,4(r4)
802052c8:	100d883a 	mov	r6,r2
802052cc:	180f883a 	mov	r7,r3
802052d0:	012008b4 	movhi	r4,32802
802052d4:	2131b804 	addi	r4,r4,-14624
802052d8:	02068380 	call	80206838 <printf>
		pulliDdr2Mem++;
802052dc:	e0bff817 	ldw	r2,-32(fp)
802052e0:	10800204 	addi	r2,r2,8
802052e4:	e0bff815 	stw	r2,-32(fp)

	usleep(1*1000*1000);

	// Check Memory Content
	pulliDdr2Mem = (alt_u64 *)DDR2_EXT_ADDR_WINDOWED_BASE;
	for (uliAddrCnt = 0; uliAddrCnt < 1024; uliAddrCnt++) {
802052e8:	e0bff917 	ldw	r2,-28(fp)
802052ec:	10800044 	addi	r2,r2,1
802052f0:	e0bff915 	stw	r2,-28(fp)
802052f4:	e0bff917 	ldw	r2,-28(fp)
802052f8:	10810030 	cmpltui	r2,r2,1024
802052fc:	103fee1e 	bne	r2,zero,802052b8 <__reset+0xfa1e52b8>
		printf("Addr: 0x%08lX, Data: 0x%016llX \n", (alt_u32)pulliDdr2Mem, (alt_u64)(*pulliDdr2Mem));
		pulliDdr2Mem++;
	}

	// Dump Channel Status
	printf("bFtdiClear        : %d \n", pxFtdi->bFtdiClear       );
80205300:	e0bfff17 	ldw	r2,-4(fp)
80205304:	10800017 	ldw	r2,0(r2)
80205308:	100b883a 	mov	r5,r2
8020530c:	012008b4 	movhi	r4,32802
80205310:	2131c104 	addi	r4,r4,-14588
80205314:	02068380 	call	80206838 <printf>
	printf("bFtdiStop         : %d \n", pxFtdi->bFtdiStop        );
80205318:	e0bfff17 	ldw	r2,-4(fp)
8020531c:	10800117 	ldw	r2,4(r2)
80205320:	100b883a 	mov	r5,r2
80205324:	012008b4 	movhi	r4,32802
80205328:	2131c804 	addi	r4,r4,-14560
8020532c:	02068380 	call	80206838 <printf>
	printf("bFtdiStart        : %d \n", pxFtdi->bFtdiStart       );
80205330:	e0bfff17 	ldw	r2,-4(fp)
80205334:	10800217 	ldw	r2,8(r2)
80205338:	100b883a 	mov	r5,r2
8020533c:	012008b4 	movhi	r4,32802
80205340:	2131cf04 	addi	r4,r4,-14532
80205344:	02068380 	call	80206838 <printf>
	printf("bTxDbufferEmpty   : %d \n", pxFtdi->bTxDbufferEmpty  );
80205348:	e0bfff17 	ldw	r2,-4(fp)
8020534c:	10800317 	ldw	r2,12(r2)
80205350:	100b883a 	mov	r5,r2
80205354:	012008b4 	movhi	r4,32802
80205358:	2131d604 	addi	r4,r4,-14504
8020535c:	02068380 	call	80206838 <printf>
	printf("bTxDbufferWrready : %d \n", pxFtdi->bTxDbufferWrready);
80205360:	e0bfff17 	ldw	r2,-4(fp)
80205364:	10800417 	ldw	r2,16(r2)
80205368:	100b883a 	mov	r5,r2
8020536c:	012008b4 	movhi	r4,32802
80205370:	2131dd04 	addi	r4,r4,-14476
80205374:	02068380 	call	80206838 <printf>
	printf("bTxDbufferFull    : %d \n", pxFtdi->bTxDbufferFull   );
80205378:	e0bfff17 	ldw	r2,-4(fp)
8020537c:	10800517 	ldw	r2,20(r2)
80205380:	100b883a 	mov	r5,r2
80205384:	012008b4 	movhi	r4,32802
80205388:	2131e404 	addi	r4,r4,-14448
8020538c:	02068380 	call	80206838 <printf>
	printf("bTxDbufferRdready : %d \n", pxFtdi->bTxDbufferRdready);
80205390:	e0bfff17 	ldw	r2,-4(fp)
80205394:	10800617 	ldw	r2,24(r2)
80205398:	100b883a 	mov	r5,r2
8020539c:	012008b4 	movhi	r4,32802
802053a0:	2131eb04 	addi	r4,r4,-14420
802053a4:	02068380 	call	80206838 <printf>
	printf("bRxDbufferEmpty   : %d \n", pxFtdi->bRxDbufferEmpty  );
802053a8:	e0bfff17 	ldw	r2,-4(fp)
802053ac:	10800717 	ldw	r2,28(r2)
802053b0:	100b883a 	mov	r5,r2
802053b4:	012008b4 	movhi	r4,32802
802053b8:	2131f204 	addi	r4,r4,-14392
802053bc:	02068380 	call	80206838 <printf>
	printf("bRxDbufferWrready : %d \n", pxFtdi->bRxDbufferWrready);
802053c0:	e0bfff17 	ldw	r2,-4(fp)
802053c4:	10800817 	ldw	r2,32(r2)
802053c8:	100b883a 	mov	r5,r2
802053cc:	012008b4 	movhi	r4,32802
802053d0:	2131f904 	addi	r4,r4,-14364
802053d4:	02068380 	call	80206838 <printf>
	printf("bRxDbufferFull    : %d \n", pxFtdi->bRxDbufferFull   );
802053d8:	e0bfff17 	ldw	r2,-4(fp)
802053dc:	10800917 	ldw	r2,36(r2)
802053e0:	100b883a 	mov	r5,r2
802053e4:	012008b4 	movhi	r4,32802
802053e8:	21320004 	addi	r4,r4,-14336
802053ec:	02068380 	call	80206838 <printf>
	printf("bRxDbufferRdready : %d \n", pxFtdi->bRxDbufferRdready);
802053f0:	e0bfff17 	ldw	r2,-4(fp)
802053f4:	10800a17 	ldw	r2,40(r2)
802053f8:	100b883a 	mov	r5,r2
802053fc:	012008b4 	movhi	r4,32802
80205400:	21320704 	addi	r4,r4,-14308
80205404:	02068380 	call	80206838 <printf>

	// Start Channel
	pxFtdi->bFtdiStart = TRUE;
80205408:	e0bfff17 	ldw	r2,-4(fp)
8020540c:	00c00044 	movi	r3,1
80205410:	10c00215 	stw	r3,8(r2)

	// Transmitt data to USB
	while (!pxFtdi->bTxDbufferWrready) {}
80205414:	0001883a 	nop
80205418:	e0bfff17 	ldw	r2,-4(fp)
8020541c:	10800417 	ldw	r2,16(r2)
80205420:	103ffd26 	beq	r2,zero,80205418 <__reset+0xfa1e5418>

	if (bSdmaDmaM2FtdiTransfer((alt_u32 *)0, (8 * 1024), eSdmaTxFtdi)) {
80205424:	000d883a 	mov	r6,zero
80205428:	01480004 	movi	r5,8192
8020542c:	0009883a 	mov	r4,zero
80205430:	020324c0 	call	8020324c <bSdmaDmaM2FtdiTransfer>
80205434:	10000426 	beq	r2,zero,80205448 <vLoopbackTest+0x208>
		printf("DMA Tx Ok \n");
80205438:	012008b4 	movhi	r4,32802
8020543c:	21320e04 	addi	r4,r4,-14280
80205440:	02069340 	call	80206934 <puts>
80205444:	00000306 	br	80205454 <vLoopbackTest+0x214>
	} else {
		printf("DMA Tx Fail \n");
80205448:	012008b4 	movhi	r4,32802
8020544c:	21321104 	addi	r4,r4,-14268
80205450:	02069340 	call	80206934 <puts>
	}

	usleep(1*1000*1000);
80205454:	010003f4 	movhi	r4,15
80205458:	21109004 	addi	r4,r4,16960
8020545c:	02170340 	call	80217034 <usleep>

	// Start Channel
	pxFtdi->bFtdiStop = TRUE;
80205460:	e0bfff17 	ldw	r2,-4(fp)
80205464:	00c00044 	movi	r3,1
80205468:	10c00115 	stw	r3,4(r2)

	// Loopback Test Data (8kiB)
	printf("Test Tx Empty(%d), UsedW(%d), Full(%d) \n", pxFtdi->bTestTxRdempty, pxFtdi->uiTestTxRdusedw, pxFtdi->bTestTxRdfull);
8020546c:	e0bfff17 	ldw	r2,-4(fp)
80205470:	10c00c17 	ldw	r3,48(r2)
80205474:	e0bfff17 	ldw	r2,-4(fp)
80205478:	10800e0b 	ldhu	r2,56(r2)
8020547c:	113fffcc 	andi	r4,r2,65535
80205480:	e0bfff17 	ldw	r2,-4(fp)
80205484:	10800d17 	ldw	r2,52(r2)
80205488:	100f883a 	mov	r7,r2
8020548c:	200d883a 	mov	r6,r4
80205490:	180b883a 	mov	r5,r3
80205494:	012008b4 	movhi	r4,32802
80205498:	21321504 	addi	r4,r4,-14252
8020549c:	02068380 	call	80206838 <printf>
	printf("Test Rx Empty(%d), UsedW(%d), Full(%d) \n", pxFtdi->bTestRxWrempty, pxFtdi->uiTestRxWrusedw, pxFtdi->bTestRxWrfull);
802054a0:	e0bfff17 	ldw	r2,-4(fp)
802054a4:	10c01417 	ldw	r3,80(r2)
802054a8:	e0bfff17 	ldw	r2,-4(fp)
802054ac:	1080160b 	ldhu	r2,88(r2)
802054b0:	113fffcc 	andi	r4,r2,65535
802054b4:	e0bfff17 	ldw	r2,-4(fp)
802054b8:	10801517 	ldw	r2,84(r2)
802054bc:	100f883a 	mov	r7,r2
802054c0:	200d883a 	mov	r6,r4
802054c4:	180b883a 	mov	r5,r3
802054c8:	012008b4 	movhi	r4,32802
802054cc:	21322904 	addi	r4,r4,-14172
802054d0:	02068380 	call	80206838 <printf>
	for (ucDataCnt = 0; ucDataCnt < (8*1024/4); ucDataCnt++) {
802054d4:	e03ffa0d 	sth	zero,-24(fp)
802054d8:	00001106 	br	80205520 <vLoopbackTest+0x2e0>
		pxFtdi->uliTestRxWrdataData = pxFtdi->uliTestTxRddataData;
802054dc:	e0bfff17 	ldw	r2,-4(fp)
802054e0:	10c00f17 	ldw	r3,60(r2)
802054e4:	e0bfff17 	ldw	r2,-4(fp)
802054e8:	10c01215 	stw	r3,72(r2)
		pxFtdi->ucTestRxWrdataBe = pxFtdi->ucTestTxRddataBe;
802054ec:	e0bfff17 	ldw	r2,-4(fp)
802054f0:	10c01003 	ldbu	r3,64(r2)
802054f4:	e0bfff17 	ldw	r2,-4(fp)
802054f8:	10c01305 	stb	r3,76(r2)
		pxFtdi->bTestRxWrreq = TRUE;
802054fc:	e0bfff17 	ldw	r2,-4(fp)
80205500:	00c00044 	movi	r3,1
80205504:	10c01115 	stw	r3,68(r2)
		pxFtdi->bTestTxRdreq = TRUE;
80205508:	e0bfff17 	ldw	r2,-4(fp)
8020550c:	00c00044 	movi	r3,1
80205510:	10c00b15 	stw	r3,44(r2)
	pxFtdi->bFtdiStop = TRUE;

	// Loopback Test Data (8kiB)
	printf("Test Tx Empty(%d), UsedW(%d), Full(%d) \n", pxFtdi->bTestTxRdempty, pxFtdi->uiTestTxRdusedw, pxFtdi->bTestTxRdfull);
	printf("Test Rx Empty(%d), UsedW(%d), Full(%d) \n", pxFtdi->bTestRxWrempty, pxFtdi->uiTestRxWrusedw, pxFtdi->bTestRxWrfull);
	for (ucDataCnt = 0; ucDataCnt < (8*1024/4); ucDataCnt++) {
80205514:	e0bffa0b 	ldhu	r2,-24(fp)
80205518:	10800044 	addi	r2,r2,1
8020551c:	e0bffa0d 	sth	r2,-24(fp)
80205520:	e0bffa0b 	ldhu	r2,-24(fp)
80205524:	10820030 	cmpltui	r2,r2,2048
80205528:	103fec1e 	bne	r2,zero,802054dc <__reset+0xfa1e54dc>
		pxFtdi->uliTestRxWrdataData = pxFtdi->uliTestTxRddataData;
		pxFtdi->ucTestRxWrdataBe = pxFtdi->ucTestTxRddataBe;
		pxFtdi->bTestRxWrreq = TRUE;
		pxFtdi->bTestTxRdreq = TRUE;
	}
	printf("Test Tx Empty(%d), UsedW(%d), Full(%d) \n", pxFtdi->bTestTxRdempty, pxFtdi->uiTestTxRdusedw, pxFtdi->bTestTxRdfull);
8020552c:	e0bfff17 	ldw	r2,-4(fp)
80205530:	10c00c17 	ldw	r3,48(r2)
80205534:	e0bfff17 	ldw	r2,-4(fp)
80205538:	10800e0b 	ldhu	r2,56(r2)
8020553c:	113fffcc 	andi	r4,r2,65535
80205540:	e0bfff17 	ldw	r2,-4(fp)
80205544:	10800d17 	ldw	r2,52(r2)
80205548:	100f883a 	mov	r7,r2
8020554c:	200d883a 	mov	r6,r4
80205550:	180b883a 	mov	r5,r3
80205554:	012008b4 	movhi	r4,32802
80205558:	21321504 	addi	r4,r4,-14252
8020555c:	02068380 	call	80206838 <printf>
	printf("Test Rx Empty(%d), UsedW(%d), Full(%d) \n", pxFtdi->bTestRxWrempty, pxFtdi->uiTestRxWrusedw, pxFtdi->bTestRxWrfull);
80205560:	e0bfff17 	ldw	r2,-4(fp)
80205564:	10c01417 	ldw	r3,80(r2)
80205568:	e0bfff17 	ldw	r2,-4(fp)
8020556c:	1080160b 	ldhu	r2,88(r2)
80205570:	113fffcc 	andi	r4,r2,65535
80205574:	e0bfff17 	ldw	r2,-4(fp)
80205578:	10801517 	ldw	r2,84(r2)
8020557c:	100f883a 	mov	r7,r2
80205580:	200d883a 	mov	r6,r4
80205584:	180b883a 	mov	r5,r3
80205588:	012008b4 	movhi	r4,32802
8020558c:	21322904 	addi	r4,r4,-14172
80205590:	02068380 	call	80206838 <printf>

		usleep(1*1000*1000);
80205594:	010003f4 	movhi	r4,15
80205598:	21109004 	addi	r4,r4,16960
8020559c:	02170340 	call	80217034 <usleep>

		// Start Channel
		pxFtdi->bFtdiStart = TRUE;
802055a0:	e0bfff17 	ldw	r2,-4(fp)
802055a4:	00c00044 	movi	r3,1
802055a8:	10c00215 	stw	r3,8(r2)

	// Dump Channel Status
	printf("bFtdiClear        : %d \n", pxFtdi->bFtdiClear       );
802055ac:	e0bfff17 	ldw	r2,-4(fp)
802055b0:	10800017 	ldw	r2,0(r2)
802055b4:	100b883a 	mov	r5,r2
802055b8:	012008b4 	movhi	r4,32802
802055bc:	2131c104 	addi	r4,r4,-14588
802055c0:	02068380 	call	80206838 <printf>
	printf("bFtdiStop         : %d \n", pxFtdi->bFtdiStop        );
802055c4:	e0bfff17 	ldw	r2,-4(fp)
802055c8:	10800117 	ldw	r2,4(r2)
802055cc:	100b883a 	mov	r5,r2
802055d0:	012008b4 	movhi	r4,32802
802055d4:	2131c804 	addi	r4,r4,-14560
802055d8:	02068380 	call	80206838 <printf>
	printf("bFtdiStart        : %d \n", pxFtdi->bFtdiStart       );
802055dc:	e0bfff17 	ldw	r2,-4(fp)
802055e0:	10800217 	ldw	r2,8(r2)
802055e4:	100b883a 	mov	r5,r2
802055e8:	012008b4 	movhi	r4,32802
802055ec:	2131cf04 	addi	r4,r4,-14532
802055f0:	02068380 	call	80206838 <printf>
	printf("bTxDbufferEmpty   : %d \n", pxFtdi->bTxDbufferEmpty  );
802055f4:	e0bfff17 	ldw	r2,-4(fp)
802055f8:	10800317 	ldw	r2,12(r2)
802055fc:	100b883a 	mov	r5,r2
80205600:	012008b4 	movhi	r4,32802
80205604:	2131d604 	addi	r4,r4,-14504
80205608:	02068380 	call	80206838 <printf>
	printf("bTxDbufferWrready : %d \n", pxFtdi->bTxDbufferWrready);
8020560c:	e0bfff17 	ldw	r2,-4(fp)
80205610:	10800417 	ldw	r2,16(r2)
80205614:	100b883a 	mov	r5,r2
80205618:	012008b4 	movhi	r4,32802
8020561c:	2131dd04 	addi	r4,r4,-14476
80205620:	02068380 	call	80206838 <printf>
	printf("bTxDbufferFull    : %d \n", pxFtdi->bTxDbufferFull   );
80205624:	e0bfff17 	ldw	r2,-4(fp)
80205628:	10800517 	ldw	r2,20(r2)
8020562c:	100b883a 	mov	r5,r2
80205630:	012008b4 	movhi	r4,32802
80205634:	2131e404 	addi	r4,r4,-14448
80205638:	02068380 	call	80206838 <printf>
	printf("bTxDbufferRdready : %d \n", pxFtdi->bTxDbufferRdready);
8020563c:	e0bfff17 	ldw	r2,-4(fp)
80205640:	10800617 	ldw	r2,24(r2)
80205644:	100b883a 	mov	r5,r2
80205648:	012008b4 	movhi	r4,32802
8020564c:	2131eb04 	addi	r4,r4,-14420
80205650:	02068380 	call	80206838 <printf>
	printf("bRxDbufferEmpty   : %d \n", pxFtdi->bRxDbufferEmpty  );
80205654:	e0bfff17 	ldw	r2,-4(fp)
80205658:	10800717 	ldw	r2,28(r2)
8020565c:	100b883a 	mov	r5,r2
80205660:	012008b4 	movhi	r4,32802
80205664:	2131f204 	addi	r4,r4,-14392
80205668:	02068380 	call	80206838 <printf>
	printf("bRxDbufferWrready : %d \n", pxFtdi->bRxDbufferWrready);
8020566c:	e0bfff17 	ldw	r2,-4(fp)
80205670:	10800817 	ldw	r2,32(r2)
80205674:	100b883a 	mov	r5,r2
80205678:	012008b4 	movhi	r4,32802
8020567c:	2131f904 	addi	r4,r4,-14364
80205680:	02068380 	call	80206838 <printf>
	printf("bRxDbufferFull    : %d \n", pxFtdi->bRxDbufferFull   );
80205684:	e0bfff17 	ldw	r2,-4(fp)
80205688:	10800917 	ldw	r2,36(r2)
8020568c:	100b883a 	mov	r5,r2
80205690:	012008b4 	movhi	r4,32802
80205694:	21320004 	addi	r4,r4,-14336
80205698:	02068380 	call	80206838 <printf>
	printf("bRxDbufferRdready : %d \n", pxFtdi->bRxDbufferRdready);
8020569c:	e0bfff17 	ldw	r2,-4(fp)
802056a0:	10800a17 	ldw	r2,40(r2)
802056a4:	100b883a 	mov	r5,r2
802056a8:	012008b4 	movhi	r4,32802
802056ac:	21320704 	addi	r4,r4,-14308
802056b0:	02068380 	call	80206838 <printf>

	// Receive data from USB
	while (!pxFtdi->bRxDbufferRdready) {}
802056b4:	0001883a 	nop
802056b8:	e0bfff17 	ldw	r2,-4(fp)
802056bc:	10800a17 	ldw	r2,40(r2)
802056c0:	103ffd26 	beq	r2,zero,802056b8 <__reset+0xfa1e56b8>

	if (bSdmaDmaM2FtdiTransfer((alt_u32 *)0x2000, (8 * 1024), eSdmaRxFtdi)) {
802056c4:	01800044 	movi	r6,1
802056c8:	01480004 	movi	r5,8192
802056cc:	01080004 	movi	r4,8192
802056d0:	020324c0 	call	8020324c <bSdmaDmaM2FtdiTransfer>
802056d4:	10000426 	beq	r2,zero,802056e8 <vLoopbackTest+0x4a8>
		printf("DMA Rx Ok \n");
802056d8:	012008b4 	movhi	r4,32802
802056dc:	21323404 	addi	r4,r4,-14128
802056e0:	02069340 	call	80206934 <puts>
802056e4:	00000306 	br	802056f4 <vLoopbackTest+0x4b4>
	} else {
		printf("DMA Rx Fail \n");
802056e8:	012008b4 	movhi	r4,32802
802056ec:	21323704 	addi	r4,r4,-14116
802056f0:	02069340 	call	80206934 <puts>
	}

	usleep(1*1000*1000);
802056f4:	010003f4 	movhi	r4,15
802056f8:	21109004 	addi	r4,r4,16960
802056fc:	02170340 	call	80217034 <usleep>

	// Check Memory Content
	pulliDdr2Mem = (alt_u64 *)(DDR2_EXT_ADDR_WINDOWED_BASE + 0x2000);
80205700:	00880004 	movi	r2,8192
80205704:	e0bff815 	stw	r2,-32(fp)
	for (uliAddrCnt = 0; uliAddrCnt < 1024; uliAddrCnt++) {
80205708:	e03ff915 	stw	zero,-28(fp)
8020570c:	00000f06 	br	8020574c <vLoopbackTest+0x50c>
		printf("Addr: 0x%08lX, Data: 0x%016llX \n", (alt_u32)pulliDdr2Mem, (alt_u64)(*pulliDdr2Mem));
80205710:	e17ff817 	ldw	r5,-32(fp)
80205714:	e13ff817 	ldw	r4,-32(fp)
80205718:	20800017 	ldw	r2,0(r4)
8020571c:	20c00117 	ldw	r3,4(r4)
80205720:	100d883a 	mov	r6,r2
80205724:	180f883a 	mov	r7,r3
80205728:	012008b4 	movhi	r4,32802
8020572c:	2131b804 	addi	r4,r4,-14624
80205730:	02068380 	call	80206838 <printf>
		pulliDdr2Mem++;
80205734:	e0bff817 	ldw	r2,-32(fp)
80205738:	10800204 	addi	r2,r2,8
8020573c:	e0bff815 	stw	r2,-32(fp)

	usleep(1*1000*1000);

	// Check Memory Content
	pulliDdr2Mem = (alt_u64 *)(DDR2_EXT_ADDR_WINDOWED_BASE + 0x2000);
	for (uliAddrCnt = 0; uliAddrCnt < 1024; uliAddrCnt++) {
80205740:	e0bff917 	ldw	r2,-28(fp)
80205744:	10800044 	addi	r2,r2,1
80205748:	e0bff915 	stw	r2,-28(fp)
8020574c:	e0bff917 	ldw	r2,-28(fp)
80205750:	10810030 	cmpltui	r2,r2,1024
80205754:	103fee1e 	bne	r2,zero,80205710 <__reset+0xfa1e5710>
		printf("Addr: 0x%08lX, Data: 0x%016llX \n", (alt_u32)pulliDdr2Mem, (alt_u64)(*pulliDdr2Mem));
		pulliDdr2Mem++;
	}

	// Match Memory Content
	alt_u64 *pulliDdr2MemWrite = (alt_u64 *)DDR2_EXT_ADDR_WINDOWED_BASE;
80205758:	e03ffc15 	stw	zero,-16(fp)
	alt_u64 *pulliDdr2MemRead = (alt_u64 *)(DDR2_EXT_ADDR_WINDOWED_BASE + 0x2000);
8020575c:	00880004 	movi	r2,8192
80205760:	e0bffd15 	stw	r2,-12(fp)
	alt_u16 uiErrorCnt = 0;
80205764:	e03ffe0d 	sth	zero,-8(fp)
	for (uliAddrCnt = 0; uliAddrCnt < 1024; uliAddrCnt++) {
80205768:	e03ff915 	stw	zero,-28(fp)
8020576c:	00001406 	br	802057c0 <vLoopbackTest+0x580>
		if (*pulliDdr2MemWrite != *pulliDdr2MemRead) {
80205770:	e0bffc17 	ldw	r2,-16(fp)
80205774:	11000017 	ldw	r4,0(r2)
80205778:	11400117 	ldw	r5,4(r2)
8020577c:	e1bffd17 	ldw	r6,-12(fp)
80205780:	30800017 	ldw	r2,0(r6)
80205784:	30c00117 	ldw	r3,4(r6)
80205788:	2080011e 	bne	r4,r2,80205790 <vLoopbackTest+0x550>
8020578c:	28c00326 	beq	r5,r3,8020579c <vLoopbackTest+0x55c>
			uiErrorCnt++;
80205790:	e0bffe0b 	ldhu	r2,-8(fp)
80205794:	10800044 	addi	r2,r2,1
80205798:	e0bffe0d 	sth	r2,-8(fp)
		}
		pulliDdr2MemWrite++;
8020579c:	e0bffc17 	ldw	r2,-16(fp)
802057a0:	10800204 	addi	r2,r2,8
802057a4:	e0bffc15 	stw	r2,-16(fp)
		pulliDdr2MemRead++;
802057a8:	e0bffd17 	ldw	r2,-12(fp)
802057ac:	10800204 	addi	r2,r2,8
802057b0:	e0bffd15 	stw	r2,-12(fp)

	// Match Memory Content
	alt_u64 *pulliDdr2MemWrite = (alt_u64 *)DDR2_EXT_ADDR_WINDOWED_BASE;
	alt_u64 *pulliDdr2MemRead = (alt_u64 *)(DDR2_EXT_ADDR_WINDOWED_BASE + 0x2000);
	alt_u16 uiErrorCnt = 0;
	for (uliAddrCnt = 0; uliAddrCnt < 1024; uliAddrCnt++) {
802057b4:	e0bff917 	ldw	r2,-28(fp)
802057b8:	10800044 	addi	r2,r2,1
802057bc:	e0bff915 	stw	r2,-28(fp)
802057c0:	e0bff917 	ldw	r2,-28(fp)
802057c4:	10810030 	cmpltui	r2,r2,1024
802057c8:	103fe91e 	bne	r2,zero,80205770 <__reset+0xfa1e5770>
			uiErrorCnt++;
		}
		pulliDdr2MemWrite++;
		pulliDdr2MemRead++;
	}
	if (uiErrorCnt == 0) {
802057cc:	e0bffe0b 	ldhu	r2,-8(fp)
802057d0:	1000041e 	bne	r2,zero,802057e4 <vLoopbackTest+0x5a4>
		printf("Loopback Test Successful!! \n");
802057d4:	012008b4 	movhi	r4,32802
802057d8:	21323b04 	addi	r4,r4,-14100
802057dc:	02069340 	call	80206934 <puts>
	} else {
		printf("Loopback Test Failed, with %d errors!! \n", uiErrorCnt);
	}

}
802057e0:	00000506 	br	802057f8 <vLoopbackTest+0x5b8>
		pulliDdr2MemRead++;
	}
	if (uiErrorCnt == 0) {
		printf("Loopback Test Successful!! \n");
	} else {
		printf("Loopback Test Failed, with %d errors!! \n", uiErrorCnt);
802057e4:	e0bffe0b 	ldhu	r2,-8(fp)
802057e8:	100b883a 	mov	r5,r2
802057ec:	012008b4 	movhi	r4,32802
802057f0:	21324204 	addi	r4,r4,-14072
802057f4:	02068380 	call	80206838 <printf>
	}

}
802057f8:	0001883a 	nop
802057fc:	e037883a 	mov	sp,fp
80205800:	dfc00117 	ldw	ra,4(sp)
80205804:	df000017 	ldw	fp,0(sp)
80205808:	dec00204 	addi	sp,sp,8
8020580c:	f800283a 	ret

80205810 <vLoopbackRandomTest>:

void vLoopbackRandomTest(void){
80205810:	defff504 	addi	sp,sp,-44
80205814:	dfc00a15 	stw	ra,40(sp)
80205818:	df000915 	stw	fp,36(sp)
8020581c:	df000904 	addi	fp,sp,36

	TFtdiRegisters *pxFtdi = (TFtdiRegisters *) USB_3_FTDI_0_BASE;
80205820:	00a00034 	movhi	r2,32768
80205824:	e0bffe15 	stw	r2,-8(fp)
	alt_u64 *pulliDdr2Mem;
	alt_u32 uliAddrCnt = 0;
80205828:	e03ff815 	stw	zero,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8020582c:	d0a02617 	ldw	r2,-32616(gp)
	alt_u32 uliCurrentState;

	uliInitialState = alt_nticks();
80205830:	d0a01315 	stw	r2,-32692(gp)
	uliCurrentState = uliInitialState;
80205834:	d0a01317 	ldw	r2,-32692(gp)
80205838:	e0bfff15 	stw	r2,-4(fp)

	// Fill Memory
	alt_u16 ucDataCnt = 0;
8020583c:	e03ff90d 	sth	zero,-28(fp)
	alt_u32 *pucDataAddr = (alt_u32 *)DDR2_EXT_ADDR_WINDOWED_BASE;
80205840:	e03ffa15 	stw	zero,-24(fp)
	for (ucDataCnt = 0; ucDataCnt < (8*1024/4); ucDataCnt++) {
80205844:	e03ff90d 	sth	zero,-28(fp)
80205848:	00000c06 	br	8020587c <vLoopbackRandomTest+0x6c>
		*pucDataAddr = (alt_u32)(uliXorshift32(&uliCurrentState));
8020584c:	e0bfff04 	addi	r2,fp,-4
80205850:	1009883a 	mov	r4,r2
80205854:	02025980 	call	80202598 <uliXorshift32>
80205858:	1007883a 	mov	r3,r2
8020585c:	e0bffa17 	ldw	r2,-24(fp)
80205860:	10c00015 	stw	r3,0(r2)
		pucDataAddr++;
80205864:	e0bffa17 	ldw	r2,-24(fp)
80205868:	10800104 	addi	r2,r2,4
8020586c:	e0bffa15 	stw	r2,-24(fp)
	uliCurrentState = uliInitialState;

	// Fill Memory
	alt_u16 ucDataCnt = 0;
	alt_u32 *pucDataAddr = (alt_u32 *)DDR2_EXT_ADDR_WINDOWED_BASE;
	for (ucDataCnt = 0; ucDataCnt < (8*1024/4); ucDataCnt++) {
80205870:	e0bff90b 	ldhu	r2,-28(fp)
80205874:	10800044 	addi	r2,r2,1
80205878:	e0bff90d 	sth	r2,-28(fp)
8020587c:	e0bff90b 	ldhu	r2,-28(fp)
80205880:	10820030 	cmpltui	r2,r2,2048
80205884:	103ff11e 	bne	r2,zero,8020584c <__reset+0xfa1e584c>
		*pucDataAddr = (alt_u32)(uliXorshift32(&uliCurrentState));
		pucDataAddr++;
	}

	usleep(1*1000*1000);
80205888:	010003f4 	movhi	r4,15
8020588c:	21109004 	addi	r4,r4,16960
80205890:	02170340 	call	80217034 <usleep>

	// Check Memory Content
	pulliDdr2Mem = (alt_u64 *)DDR2_EXT_ADDR_WINDOWED_BASE;
80205894:	e03ff715 	stw	zero,-36(fp)
	for (uliAddrCnt = 0; uliAddrCnt < 1024; uliAddrCnt++) {
80205898:	e03ff815 	stw	zero,-32(fp)
8020589c:	00000f06 	br	802058dc <vLoopbackRandomTest+0xcc>
		printf("Addr: 0x%08lX, Data: 0x%016llX \n", (alt_u32)pulliDdr2Mem, (alt_u64)(*pulliDdr2Mem));
802058a0:	e17ff717 	ldw	r5,-36(fp)
802058a4:	e13ff717 	ldw	r4,-36(fp)
802058a8:	20800017 	ldw	r2,0(r4)
802058ac:	20c00117 	ldw	r3,4(r4)
802058b0:	100d883a 	mov	r6,r2
802058b4:	180f883a 	mov	r7,r3
802058b8:	012008b4 	movhi	r4,32802
802058bc:	2131b804 	addi	r4,r4,-14624
802058c0:	02068380 	call	80206838 <printf>
		pulliDdr2Mem++;
802058c4:	e0bff717 	ldw	r2,-36(fp)
802058c8:	10800204 	addi	r2,r2,8
802058cc:	e0bff715 	stw	r2,-36(fp)

	usleep(1*1000*1000);

	// Check Memory Content
	pulliDdr2Mem = (alt_u64 *)DDR2_EXT_ADDR_WINDOWED_BASE;
	for (uliAddrCnt = 0; uliAddrCnt < 1024; uliAddrCnt++) {
802058d0:	e0bff817 	ldw	r2,-32(fp)
802058d4:	10800044 	addi	r2,r2,1
802058d8:	e0bff815 	stw	r2,-32(fp)
802058dc:	e0bff817 	ldw	r2,-32(fp)
802058e0:	10810030 	cmpltui	r2,r2,1024
802058e4:	103fee1e 	bne	r2,zero,802058a0 <__reset+0xfa1e58a0>
		printf("Addr: 0x%08lX, Data: 0x%016llX \n", (alt_u32)pulliDdr2Mem, (alt_u64)(*pulliDdr2Mem));
		pulliDdr2Mem++;
	}

	// Dump Channel Status
	printf("bFtdiClear        : %d \n", pxFtdi->bFtdiClear       );
802058e8:	e0bffe17 	ldw	r2,-8(fp)
802058ec:	10800017 	ldw	r2,0(r2)
802058f0:	100b883a 	mov	r5,r2
802058f4:	012008b4 	movhi	r4,32802
802058f8:	2131c104 	addi	r4,r4,-14588
802058fc:	02068380 	call	80206838 <printf>
	printf("bFtdiStop         : %d \n", pxFtdi->bFtdiStop        );
80205900:	e0bffe17 	ldw	r2,-8(fp)
80205904:	10800117 	ldw	r2,4(r2)
80205908:	100b883a 	mov	r5,r2
8020590c:	012008b4 	movhi	r4,32802
80205910:	2131c804 	addi	r4,r4,-14560
80205914:	02068380 	call	80206838 <printf>
	printf("bFtdiStart        : %d \n", pxFtdi->bFtdiStart       );
80205918:	e0bffe17 	ldw	r2,-8(fp)
8020591c:	10800217 	ldw	r2,8(r2)
80205920:	100b883a 	mov	r5,r2
80205924:	012008b4 	movhi	r4,32802
80205928:	2131cf04 	addi	r4,r4,-14532
8020592c:	02068380 	call	80206838 <printf>
	printf("bTxDbufferEmpty   : %d \n", pxFtdi->bTxDbufferEmpty  );
80205930:	e0bffe17 	ldw	r2,-8(fp)
80205934:	10800317 	ldw	r2,12(r2)
80205938:	100b883a 	mov	r5,r2
8020593c:	012008b4 	movhi	r4,32802
80205940:	2131d604 	addi	r4,r4,-14504
80205944:	02068380 	call	80206838 <printf>
	printf("bTxDbufferWrready : %d \n", pxFtdi->bTxDbufferWrready);
80205948:	e0bffe17 	ldw	r2,-8(fp)
8020594c:	10800417 	ldw	r2,16(r2)
80205950:	100b883a 	mov	r5,r2
80205954:	012008b4 	movhi	r4,32802
80205958:	2131dd04 	addi	r4,r4,-14476
8020595c:	02068380 	call	80206838 <printf>
	printf("bTxDbufferFull    : %d \n", pxFtdi->bTxDbufferFull   );
80205960:	e0bffe17 	ldw	r2,-8(fp)
80205964:	10800517 	ldw	r2,20(r2)
80205968:	100b883a 	mov	r5,r2
8020596c:	012008b4 	movhi	r4,32802
80205970:	2131e404 	addi	r4,r4,-14448
80205974:	02068380 	call	80206838 <printf>
	printf("bTxDbufferRdready : %d \n", pxFtdi->bTxDbufferRdready);
80205978:	e0bffe17 	ldw	r2,-8(fp)
8020597c:	10800617 	ldw	r2,24(r2)
80205980:	100b883a 	mov	r5,r2
80205984:	012008b4 	movhi	r4,32802
80205988:	2131eb04 	addi	r4,r4,-14420
8020598c:	02068380 	call	80206838 <printf>
	printf("bRxDbufferEmpty   : %d \n", pxFtdi->bRxDbufferEmpty  );
80205990:	e0bffe17 	ldw	r2,-8(fp)
80205994:	10800717 	ldw	r2,28(r2)
80205998:	100b883a 	mov	r5,r2
8020599c:	012008b4 	movhi	r4,32802
802059a0:	2131f204 	addi	r4,r4,-14392
802059a4:	02068380 	call	80206838 <printf>
	printf("bRxDbufferWrready : %d \n", pxFtdi->bRxDbufferWrready);
802059a8:	e0bffe17 	ldw	r2,-8(fp)
802059ac:	10800817 	ldw	r2,32(r2)
802059b0:	100b883a 	mov	r5,r2
802059b4:	012008b4 	movhi	r4,32802
802059b8:	2131f904 	addi	r4,r4,-14364
802059bc:	02068380 	call	80206838 <printf>
	printf("bRxDbufferFull    : %d \n", pxFtdi->bRxDbufferFull   );
802059c0:	e0bffe17 	ldw	r2,-8(fp)
802059c4:	10800917 	ldw	r2,36(r2)
802059c8:	100b883a 	mov	r5,r2
802059cc:	012008b4 	movhi	r4,32802
802059d0:	21320004 	addi	r4,r4,-14336
802059d4:	02068380 	call	80206838 <printf>
	printf("bRxDbufferRdready : %d \n", pxFtdi->bRxDbufferRdready);
802059d8:	e0bffe17 	ldw	r2,-8(fp)
802059dc:	10800a17 	ldw	r2,40(r2)
802059e0:	100b883a 	mov	r5,r2
802059e4:	012008b4 	movhi	r4,32802
802059e8:	21320704 	addi	r4,r4,-14308
802059ec:	02068380 	call	80206838 <printf>

	// Start Channel
	pxFtdi->bFtdiStart = TRUE;
802059f0:	e0bffe17 	ldw	r2,-8(fp)
802059f4:	00c00044 	movi	r3,1
802059f8:	10c00215 	stw	r3,8(r2)

	// Transmitt data to USB
	while (!pxFtdi->bTxDbufferWrready) {}
802059fc:	0001883a 	nop
80205a00:	e0bffe17 	ldw	r2,-8(fp)
80205a04:	10800417 	ldw	r2,16(r2)
80205a08:	103ffd26 	beq	r2,zero,80205a00 <__reset+0xfa1e5a00>

	if (bSdmaDmaM2FtdiTransfer((alt_u32 *)0, (8 * 1024), eSdmaTxFtdi)) {
80205a0c:	000d883a 	mov	r6,zero
80205a10:	01480004 	movi	r5,8192
80205a14:	0009883a 	mov	r4,zero
80205a18:	020324c0 	call	8020324c <bSdmaDmaM2FtdiTransfer>
80205a1c:	10000426 	beq	r2,zero,80205a30 <vLoopbackRandomTest+0x220>
		printf("DMA Tx Ok \n");
80205a20:	012008b4 	movhi	r4,32802
80205a24:	21320e04 	addi	r4,r4,-14280
80205a28:	02069340 	call	80206934 <puts>
80205a2c:	00000306 	br	80205a3c <vLoopbackRandomTest+0x22c>
	} else {
		printf("DMA Tx Fail \n");
80205a30:	012008b4 	movhi	r4,32802
80205a34:	21321104 	addi	r4,r4,-14268
80205a38:	02069340 	call	80206934 <puts>
	}

	usleep(1*1000*1000);
80205a3c:	010003f4 	movhi	r4,15
80205a40:	21109004 	addi	r4,r4,16960
80205a44:	02170340 	call	80217034 <usleep>

	// Start Channel
	pxFtdi->bFtdiStop = TRUE;
80205a48:	e0bffe17 	ldw	r2,-8(fp)
80205a4c:	00c00044 	movi	r3,1
80205a50:	10c00115 	stw	r3,4(r2)

	// Loopback Test Data (8kiB)
	printf("Test Tx Empty(%d), UsedW(%d), Full(%d) \n", pxFtdi->bTestTxRdempty, pxFtdi->uiTestTxRdusedw, pxFtdi->bTestTxRdfull);
80205a54:	e0bffe17 	ldw	r2,-8(fp)
80205a58:	10c00c17 	ldw	r3,48(r2)
80205a5c:	e0bffe17 	ldw	r2,-8(fp)
80205a60:	10800e0b 	ldhu	r2,56(r2)
80205a64:	113fffcc 	andi	r4,r2,65535
80205a68:	e0bffe17 	ldw	r2,-8(fp)
80205a6c:	10800d17 	ldw	r2,52(r2)
80205a70:	100f883a 	mov	r7,r2
80205a74:	200d883a 	mov	r6,r4
80205a78:	180b883a 	mov	r5,r3
80205a7c:	012008b4 	movhi	r4,32802
80205a80:	21321504 	addi	r4,r4,-14252
80205a84:	02068380 	call	80206838 <printf>
	printf("Test Rx Empty(%d), UsedW(%d), Full(%d) \n", pxFtdi->bTestRxWrempty, pxFtdi->uiTestRxWrusedw, pxFtdi->bTestRxWrfull);
80205a88:	e0bffe17 	ldw	r2,-8(fp)
80205a8c:	10c01417 	ldw	r3,80(r2)
80205a90:	e0bffe17 	ldw	r2,-8(fp)
80205a94:	1080160b 	ldhu	r2,88(r2)
80205a98:	113fffcc 	andi	r4,r2,65535
80205a9c:	e0bffe17 	ldw	r2,-8(fp)
80205aa0:	10801517 	ldw	r2,84(r2)
80205aa4:	100f883a 	mov	r7,r2
80205aa8:	200d883a 	mov	r6,r4
80205aac:	180b883a 	mov	r5,r3
80205ab0:	012008b4 	movhi	r4,32802
80205ab4:	21322904 	addi	r4,r4,-14172
80205ab8:	02068380 	call	80206838 <printf>
	for (ucDataCnt = 0; ucDataCnt < (8*1024/4); ucDataCnt++) {
80205abc:	e03ff90d 	sth	zero,-28(fp)
80205ac0:	00001106 	br	80205b08 <vLoopbackRandomTest+0x2f8>
		pxFtdi->uliTestRxWrdataData = pxFtdi->uliTestTxRddataData;
80205ac4:	e0bffe17 	ldw	r2,-8(fp)
80205ac8:	10c00f17 	ldw	r3,60(r2)
80205acc:	e0bffe17 	ldw	r2,-8(fp)
80205ad0:	10c01215 	stw	r3,72(r2)
		pxFtdi->ucTestRxWrdataBe = pxFtdi->ucTestTxRddataBe;
80205ad4:	e0bffe17 	ldw	r2,-8(fp)
80205ad8:	10c01003 	ldbu	r3,64(r2)
80205adc:	e0bffe17 	ldw	r2,-8(fp)
80205ae0:	10c01305 	stb	r3,76(r2)
		pxFtdi->bTestRxWrreq = TRUE;
80205ae4:	e0bffe17 	ldw	r2,-8(fp)
80205ae8:	00c00044 	movi	r3,1
80205aec:	10c01115 	stw	r3,68(r2)
		pxFtdi->bTestTxRdreq = TRUE;
80205af0:	e0bffe17 	ldw	r2,-8(fp)
80205af4:	00c00044 	movi	r3,1
80205af8:	10c00b15 	stw	r3,44(r2)
	pxFtdi->bFtdiStop = TRUE;

	// Loopback Test Data (8kiB)
	printf("Test Tx Empty(%d), UsedW(%d), Full(%d) \n", pxFtdi->bTestTxRdempty, pxFtdi->uiTestTxRdusedw, pxFtdi->bTestTxRdfull);
	printf("Test Rx Empty(%d), UsedW(%d), Full(%d) \n", pxFtdi->bTestRxWrempty, pxFtdi->uiTestRxWrusedw, pxFtdi->bTestRxWrfull);
	for (ucDataCnt = 0; ucDataCnt < (8*1024/4); ucDataCnt++) {
80205afc:	e0bff90b 	ldhu	r2,-28(fp)
80205b00:	10800044 	addi	r2,r2,1
80205b04:	e0bff90d 	sth	r2,-28(fp)
80205b08:	e0bff90b 	ldhu	r2,-28(fp)
80205b0c:	10820030 	cmpltui	r2,r2,2048
80205b10:	103fec1e 	bne	r2,zero,80205ac4 <__reset+0xfa1e5ac4>
		pxFtdi->uliTestRxWrdataData = pxFtdi->uliTestTxRddataData;
		pxFtdi->ucTestRxWrdataBe = pxFtdi->ucTestTxRddataBe;
		pxFtdi->bTestRxWrreq = TRUE;
		pxFtdi->bTestTxRdreq = TRUE;
	}
	printf("Test Tx Empty(%d), UsedW(%d), Full(%d) \n", pxFtdi->bTestTxRdempty, pxFtdi->uiTestTxRdusedw, pxFtdi->bTestTxRdfull);
80205b14:	e0bffe17 	ldw	r2,-8(fp)
80205b18:	10c00c17 	ldw	r3,48(r2)
80205b1c:	e0bffe17 	ldw	r2,-8(fp)
80205b20:	10800e0b 	ldhu	r2,56(r2)
80205b24:	113fffcc 	andi	r4,r2,65535
80205b28:	e0bffe17 	ldw	r2,-8(fp)
80205b2c:	10800d17 	ldw	r2,52(r2)
80205b30:	100f883a 	mov	r7,r2
80205b34:	200d883a 	mov	r6,r4
80205b38:	180b883a 	mov	r5,r3
80205b3c:	012008b4 	movhi	r4,32802
80205b40:	21321504 	addi	r4,r4,-14252
80205b44:	02068380 	call	80206838 <printf>
	printf("Test Rx Empty(%d), UsedW(%d), Full(%d) \n", pxFtdi->bTestRxWrempty, pxFtdi->uiTestRxWrusedw, pxFtdi->bTestRxWrfull);
80205b48:	e0bffe17 	ldw	r2,-8(fp)
80205b4c:	10c01417 	ldw	r3,80(r2)
80205b50:	e0bffe17 	ldw	r2,-8(fp)
80205b54:	1080160b 	ldhu	r2,88(r2)
80205b58:	113fffcc 	andi	r4,r2,65535
80205b5c:	e0bffe17 	ldw	r2,-8(fp)
80205b60:	10801517 	ldw	r2,84(r2)
80205b64:	100f883a 	mov	r7,r2
80205b68:	200d883a 	mov	r6,r4
80205b6c:	180b883a 	mov	r5,r3
80205b70:	012008b4 	movhi	r4,32802
80205b74:	21322904 	addi	r4,r4,-14172
80205b78:	02068380 	call	80206838 <printf>

		usleep(1*1000*1000);
80205b7c:	010003f4 	movhi	r4,15
80205b80:	21109004 	addi	r4,r4,16960
80205b84:	02170340 	call	80217034 <usleep>

		// Start Channel
		pxFtdi->bFtdiStart = TRUE;
80205b88:	e0bffe17 	ldw	r2,-8(fp)
80205b8c:	00c00044 	movi	r3,1
80205b90:	10c00215 	stw	r3,8(r2)

	// Dump Channel Status
	printf("bFtdiClear        : %d \n", pxFtdi->bFtdiClear       );
80205b94:	e0bffe17 	ldw	r2,-8(fp)
80205b98:	10800017 	ldw	r2,0(r2)
80205b9c:	100b883a 	mov	r5,r2
80205ba0:	012008b4 	movhi	r4,32802
80205ba4:	2131c104 	addi	r4,r4,-14588
80205ba8:	02068380 	call	80206838 <printf>
	printf("bFtdiStop         : %d \n", pxFtdi->bFtdiStop        );
80205bac:	e0bffe17 	ldw	r2,-8(fp)
80205bb0:	10800117 	ldw	r2,4(r2)
80205bb4:	100b883a 	mov	r5,r2
80205bb8:	012008b4 	movhi	r4,32802
80205bbc:	2131c804 	addi	r4,r4,-14560
80205bc0:	02068380 	call	80206838 <printf>
	printf("bFtdiStart        : %d \n", pxFtdi->bFtdiStart       );
80205bc4:	e0bffe17 	ldw	r2,-8(fp)
80205bc8:	10800217 	ldw	r2,8(r2)
80205bcc:	100b883a 	mov	r5,r2
80205bd0:	012008b4 	movhi	r4,32802
80205bd4:	2131cf04 	addi	r4,r4,-14532
80205bd8:	02068380 	call	80206838 <printf>
	printf("bTxDbufferEmpty   : %d \n", pxFtdi->bTxDbufferEmpty  );
80205bdc:	e0bffe17 	ldw	r2,-8(fp)
80205be0:	10800317 	ldw	r2,12(r2)
80205be4:	100b883a 	mov	r5,r2
80205be8:	012008b4 	movhi	r4,32802
80205bec:	2131d604 	addi	r4,r4,-14504
80205bf0:	02068380 	call	80206838 <printf>
	printf("bTxDbufferWrready : %d \n", pxFtdi->bTxDbufferWrready);
80205bf4:	e0bffe17 	ldw	r2,-8(fp)
80205bf8:	10800417 	ldw	r2,16(r2)
80205bfc:	100b883a 	mov	r5,r2
80205c00:	012008b4 	movhi	r4,32802
80205c04:	2131dd04 	addi	r4,r4,-14476
80205c08:	02068380 	call	80206838 <printf>
	printf("bTxDbufferFull    : %d \n", pxFtdi->bTxDbufferFull   );
80205c0c:	e0bffe17 	ldw	r2,-8(fp)
80205c10:	10800517 	ldw	r2,20(r2)
80205c14:	100b883a 	mov	r5,r2
80205c18:	012008b4 	movhi	r4,32802
80205c1c:	2131e404 	addi	r4,r4,-14448
80205c20:	02068380 	call	80206838 <printf>
	printf("bTxDbufferRdready : %d \n", pxFtdi->bTxDbufferRdready);
80205c24:	e0bffe17 	ldw	r2,-8(fp)
80205c28:	10800617 	ldw	r2,24(r2)
80205c2c:	100b883a 	mov	r5,r2
80205c30:	012008b4 	movhi	r4,32802
80205c34:	2131eb04 	addi	r4,r4,-14420
80205c38:	02068380 	call	80206838 <printf>
	printf("bRxDbufferEmpty   : %d \n", pxFtdi->bRxDbufferEmpty  );
80205c3c:	e0bffe17 	ldw	r2,-8(fp)
80205c40:	10800717 	ldw	r2,28(r2)
80205c44:	100b883a 	mov	r5,r2
80205c48:	012008b4 	movhi	r4,32802
80205c4c:	2131f204 	addi	r4,r4,-14392
80205c50:	02068380 	call	80206838 <printf>
	printf("bRxDbufferWrready : %d \n", pxFtdi->bRxDbufferWrready);
80205c54:	e0bffe17 	ldw	r2,-8(fp)
80205c58:	10800817 	ldw	r2,32(r2)
80205c5c:	100b883a 	mov	r5,r2
80205c60:	012008b4 	movhi	r4,32802
80205c64:	2131f904 	addi	r4,r4,-14364
80205c68:	02068380 	call	80206838 <printf>
	printf("bRxDbufferFull    : %d \n", pxFtdi->bRxDbufferFull   );
80205c6c:	e0bffe17 	ldw	r2,-8(fp)
80205c70:	10800917 	ldw	r2,36(r2)
80205c74:	100b883a 	mov	r5,r2
80205c78:	012008b4 	movhi	r4,32802
80205c7c:	21320004 	addi	r4,r4,-14336
80205c80:	02068380 	call	80206838 <printf>
	printf("bRxDbufferRdready : %d \n", pxFtdi->bRxDbufferRdready);
80205c84:	e0bffe17 	ldw	r2,-8(fp)
80205c88:	10800a17 	ldw	r2,40(r2)
80205c8c:	100b883a 	mov	r5,r2
80205c90:	012008b4 	movhi	r4,32802
80205c94:	21320704 	addi	r4,r4,-14308
80205c98:	02068380 	call	80206838 <printf>

	// Receive data from USB
	while (!pxFtdi->bRxDbufferRdready) {}
80205c9c:	0001883a 	nop
80205ca0:	e0bffe17 	ldw	r2,-8(fp)
80205ca4:	10800a17 	ldw	r2,40(r2)
80205ca8:	103ffd26 	beq	r2,zero,80205ca0 <__reset+0xfa1e5ca0>

	if (bSdmaDmaM2FtdiTransfer((alt_u32 *)0x2000, (8 * 1024), eSdmaRxFtdi)) {
80205cac:	01800044 	movi	r6,1
80205cb0:	01480004 	movi	r5,8192
80205cb4:	01080004 	movi	r4,8192
80205cb8:	020324c0 	call	8020324c <bSdmaDmaM2FtdiTransfer>
80205cbc:	10000426 	beq	r2,zero,80205cd0 <vLoopbackRandomTest+0x4c0>
		printf("DMA Rx Ok \n");
80205cc0:	012008b4 	movhi	r4,32802
80205cc4:	21323404 	addi	r4,r4,-14128
80205cc8:	02069340 	call	80206934 <puts>
80205ccc:	00000306 	br	80205cdc <vLoopbackRandomTest+0x4cc>
	} else {
		printf("DMA Rx Fail \n");
80205cd0:	012008b4 	movhi	r4,32802
80205cd4:	21323704 	addi	r4,r4,-14116
80205cd8:	02069340 	call	80206934 <puts>
	}

	usleep(1*1000*1000);
80205cdc:	010003f4 	movhi	r4,15
80205ce0:	21109004 	addi	r4,r4,16960
80205ce4:	02170340 	call	80217034 <usleep>

	// Check Memory Content
	pulliDdr2Mem = (alt_u64 *)(DDR2_EXT_ADDR_WINDOWED_BASE + 0x2000);
80205ce8:	00880004 	movi	r2,8192
80205cec:	e0bff715 	stw	r2,-36(fp)
	for (uliAddrCnt = 0; uliAddrCnt < 1024; uliAddrCnt++) {
80205cf0:	e03ff815 	stw	zero,-32(fp)
80205cf4:	00000f06 	br	80205d34 <vLoopbackRandomTest+0x524>
		printf("Addr: 0x%08lX, Data: 0x%016llX \n", (alt_u32)pulliDdr2Mem, (alt_u64)(*pulliDdr2Mem));
80205cf8:	e17ff717 	ldw	r5,-36(fp)
80205cfc:	e13ff717 	ldw	r4,-36(fp)
80205d00:	20800017 	ldw	r2,0(r4)
80205d04:	20c00117 	ldw	r3,4(r4)
80205d08:	100d883a 	mov	r6,r2
80205d0c:	180f883a 	mov	r7,r3
80205d10:	012008b4 	movhi	r4,32802
80205d14:	2131b804 	addi	r4,r4,-14624
80205d18:	02068380 	call	80206838 <printf>
		pulliDdr2Mem++;
80205d1c:	e0bff717 	ldw	r2,-36(fp)
80205d20:	10800204 	addi	r2,r2,8
80205d24:	e0bff715 	stw	r2,-36(fp)

	usleep(1*1000*1000);

	// Check Memory Content
	pulliDdr2Mem = (alt_u64 *)(DDR2_EXT_ADDR_WINDOWED_BASE + 0x2000);
	for (uliAddrCnt = 0; uliAddrCnt < 1024; uliAddrCnt++) {
80205d28:	e0bff817 	ldw	r2,-32(fp)
80205d2c:	10800044 	addi	r2,r2,1
80205d30:	e0bff815 	stw	r2,-32(fp)
80205d34:	e0bff817 	ldw	r2,-32(fp)
80205d38:	10810030 	cmpltui	r2,r2,1024
80205d3c:	103fee1e 	bne	r2,zero,80205cf8 <__reset+0xfa1e5cf8>
		printf("Addr: 0x%08lX, Data: 0x%016llX \n", (alt_u32)pulliDdr2Mem, (alt_u64)(*pulliDdr2Mem));
		pulliDdr2Mem++;
	}

	// Match Memory Content
	alt_u64 *pulliDdr2MemWrite = (alt_u64 *)DDR2_EXT_ADDR_WINDOWED_BASE;
80205d40:	e03ffb15 	stw	zero,-20(fp)
	alt_u64 *pulliDdr2MemRead = (alt_u64 *)(DDR2_EXT_ADDR_WINDOWED_BASE + 0x2000);
80205d44:	00880004 	movi	r2,8192
80205d48:	e0bffc15 	stw	r2,-16(fp)
	alt_u16 uiErrorCnt = 0;
80205d4c:	e03ffd0d 	sth	zero,-12(fp)
	for (uliAddrCnt = 0; uliAddrCnt < 1024; uliAddrCnt++) {
80205d50:	e03ff815 	stw	zero,-32(fp)
80205d54:	00001406 	br	80205da8 <vLoopbackRandomTest+0x598>
		if (*pulliDdr2MemWrite != *pulliDdr2MemRead) {
80205d58:	e0bffb17 	ldw	r2,-20(fp)
80205d5c:	11000017 	ldw	r4,0(r2)
80205d60:	11400117 	ldw	r5,4(r2)
80205d64:	e1bffc17 	ldw	r6,-16(fp)
80205d68:	30800017 	ldw	r2,0(r6)
80205d6c:	30c00117 	ldw	r3,4(r6)
80205d70:	2080011e 	bne	r4,r2,80205d78 <vLoopbackRandomTest+0x568>
80205d74:	28c00326 	beq	r5,r3,80205d84 <vLoopbackRandomTest+0x574>
			uiErrorCnt++;
80205d78:	e0bffd0b 	ldhu	r2,-12(fp)
80205d7c:	10800044 	addi	r2,r2,1
80205d80:	e0bffd0d 	sth	r2,-12(fp)
		}
		pulliDdr2MemWrite++;
80205d84:	e0bffb17 	ldw	r2,-20(fp)
80205d88:	10800204 	addi	r2,r2,8
80205d8c:	e0bffb15 	stw	r2,-20(fp)
		pulliDdr2MemRead++;
80205d90:	e0bffc17 	ldw	r2,-16(fp)
80205d94:	10800204 	addi	r2,r2,8
80205d98:	e0bffc15 	stw	r2,-16(fp)

	// Match Memory Content
	alt_u64 *pulliDdr2MemWrite = (alt_u64 *)DDR2_EXT_ADDR_WINDOWED_BASE;
	alt_u64 *pulliDdr2MemRead = (alt_u64 *)(DDR2_EXT_ADDR_WINDOWED_BASE + 0x2000);
	alt_u16 uiErrorCnt = 0;
	for (uliAddrCnt = 0; uliAddrCnt < 1024; uliAddrCnt++) {
80205d9c:	e0bff817 	ldw	r2,-32(fp)
80205da0:	10800044 	addi	r2,r2,1
80205da4:	e0bff815 	stw	r2,-32(fp)
80205da8:	e0bff817 	ldw	r2,-32(fp)
80205dac:	10810030 	cmpltui	r2,r2,1024
80205db0:	103fe91e 	bne	r2,zero,80205d58 <__reset+0xfa1e5d58>
			uiErrorCnt++;
		}
		pulliDdr2MemWrite++;
		pulliDdr2MemRead++;
	}
	if (uiErrorCnt == 0) {
80205db4:	e0bffd0b 	ldhu	r2,-12(fp)
80205db8:	1000041e 	bne	r2,zero,80205dcc <vLoopbackRandomTest+0x5bc>
		printf("Loopback Test Successful!! \n");
80205dbc:	012008b4 	movhi	r4,32802
80205dc0:	21323b04 	addi	r4,r4,-14100
80205dc4:	02069340 	call	80206934 <puts>
	} else {
		printf("Loopback Test Failed, with %d errors!! \n", uiErrorCnt);
	}

}
80205dc8:	00000506 	br	80205de0 <vLoopbackRandomTest+0x5d0>
		pulliDdr2MemRead++;
	}
	if (uiErrorCnt == 0) {
		printf("Loopback Test Successful!! \n");
	} else {
		printf("Loopback Test Failed, with %d errors!! \n", uiErrorCnt);
80205dcc:	e0bffd0b 	ldhu	r2,-12(fp)
80205dd0:	100b883a 	mov	r5,r2
80205dd4:	012008b4 	movhi	r4,32802
80205dd8:	21324204 	addi	r4,r4,-14072
80205ddc:	02068380 	call	80206838 <printf>
	}

}
80205de0:	0001883a 	nop
80205de4:	e037883a 	mov	sp,fp
80205de8:	dfc00117 	ldw	ra,4(sp)
80205dec:	df000017 	ldw	fp,0(sp)
80205df0:	dec00204 	addi	sp,sp,8
80205df4:	f800283a 	ret

80205df8 <__divsf3>:
80205df8:	defff504 	addi	sp,sp,-44
80205dfc:	200cd5fa 	srli	r6,r4,23
80205e00:	dcc00415 	stw	r19,16(sp)
80205e04:	2026d7fa 	srli	r19,r4,31
80205e08:	00c02034 	movhi	r3,128
80205e0c:	dd800715 	stw	r22,28(sp)
80205e10:	dd000515 	stw	r20,20(sp)
80205e14:	dc800315 	stw	r18,12(sp)
80205e18:	18ffffc4 	addi	r3,r3,-1
80205e1c:	dfc00a15 	stw	ra,40(sp)
80205e20:	df000915 	stw	fp,36(sp)
80205e24:	ddc00815 	stw	r23,32(sp)
80205e28:	dd400615 	stw	r21,24(sp)
80205e2c:	dc400215 	stw	r17,8(sp)
80205e30:	dc000115 	stw	r16,4(sp)
80205e34:	35003fcc 	andi	r20,r6,255
80205e38:	1924703a 	and	r18,r3,r4
80205e3c:	9d803fcc 	andi	r22,r19,255
80205e40:	a0005226 	beq	r20,zero,80205f8c <__divsf3+0x194>
80205e44:	00803fc4 	movi	r2,255
80205e48:	a0802e26 	beq	r20,r2,80205f04 <__divsf3+0x10c>
80205e4c:	91002034 	orhi	r4,r18,128
80205e50:	202490fa 	slli	r18,r4,3
80205e54:	a53fe044 	addi	r20,r20,-127
80205e58:	0021883a 	mov	r16,zero
80205e5c:	002f883a 	mov	r23,zero
80205e60:	280cd5fa 	srli	r6,r5,23
80205e64:	282ad7fa 	srli	r21,r5,31
80205e68:	00c02034 	movhi	r3,128
80205e6c:	18ffffc4 	addi	r3,r3,-1
80205e70:	31803fcc 	andi	r6,r6,255
80205e74:	1962703a 	and	r17,r3,r5
80205e78:	af003fcc 	andi	fp,r21,255
80205e7c:	30004a26 	beq	r6,zero,80205fa8 <__divsf3+0x1b0>
80205e80:	00803fc4 	movi	r2,255
80205e84:	30804526 	beq	r6,r2,80205f9c <__divsf3+0x1a4>
80205e88:	89402034 	orhi	r5,r17,128
80205e8c:	282290fa 	slli	r17,r5,3
80205e90:	31bfe044 	addi	r6,r6,-127
80205e94:	000b883a 	mov	r5,zero
80205e98:	2c20b03a 	or	r16,r5,r16
80205e9c:	802090ba 	slli	r16,r16,2
80205ea0:	00a00834 	movhi	r2,32800
80205ea4:	1097b104 	addi	r2,r2,24260
80205ea8:	80a1883a 	add	r16,r16,r2
80205eac:	81000017 	ldw	r4,0(r16)
80205eb0:	9d46f03a 	xor	r3,r19,r21
80205eb4:	180f883a 	mov	r7,r3
80205eb8:	18803fcc 	andi	r2,r3,255
80205ebc:	a18dc83a 	sub	r6,r20,r6
80205ec0:	2000683a 	jmp	r4
80205ec4:	802060a8 	cmpgeui	zero,r16,33154
80205ec8:	80205f2c 	andhi	zero,r16,33148
80205ecc:	8020609c 	xori	zero,r16,33154
80205ed0:	80205f18 	cmpnei	zero,r16,-32388
80205ed4:	8020609c 	xori	zero,r16,33154
80205ed8:	80206074 	orhi	zero,r16,33153
80205edc:	8020609c 	xori	zero,r16,33154
80205ee0:	80205f18 	cmpnei	zero,r16,-32388
80205ee4:	80205f2c 	andhi	zero,r16,33148
80205ee8:	80205f2c 	andhi	zero,r16,33148
80205eec:	80206074 	orhi	zero,r16,33153
80205ef0:	80205f18 	cmpnei	zero,r16,-32388
80205ef4:	80206188 	cmpgei	zero,r16,-32378
80205ef8:	80206188 	cmpgei	zero,r16,-32378
80205efc:	80206188 	cmpgei	zero,r16,-32378
80205f00:	8020613c 	xorhi	zero,r16,33156
80205f04:	9000581e 	bne	r18,zero,80206068 <__divsf3+0x270>
80205f08:	04000204 	movi	r16,8
80205f0c:	05c00084 	movi	r23,2
80205f10:	003fd306 	br	80205e60 <__reset+0xfa1e5e60>
80205f14:	0023883a 	mov	r17,zero
80205f18:	e02d883a 	mov	r22,fp
80205f1c:	282f883a 	mov	r23,r5
80205f20:	00800084 	movi	r2,2
80205f24:	b8808f1e 	bne	r23,r2,80206164 <__divsf3+0x36c>
80205f28:	b005883a 	mov	r2,r22
80205f2c:	11c0004c 	andi	r7,r2,1
80205f30:	013fffc4 	movi	r4,-1
80205f34:	000d883a 	mov	r6,zero
80205f38:	21003fcc 	andi	r4,r4,255
80205f3c:	200895fa 	slli	r4,r4,23
80205f40:	38803fcc 	andi	r2,r7,255
80205f44:	00c02034 	movhi	r3,128
80205f48:	100497fa 	slli	r2,r2,31
80205f4c:	18ffffc4 	addi	r3,r3,-1
80205f50:	30c6703a 	and	r3,r6,r3
80205f54:	1906b03a 	or	r3,r3,r4
80205f58:	1884b03a 	or	r2,r3,r2
80205f5c:	dfc00a17 	ldw	ra,40(sp)
80205f60:	df000917 	ldw	fp,36(sp)
80205f64:	ddc00817 	ldw	r23,32(sp)
80205f68:	dd800717 	ldw	r22,28(sp)
80205f6c:	dd400617 	ldw	r21,24(sp)
80205f70:	dd000517 	ldw	r20,20(sp)
80205f74:	dcc00417 	ldw	r19,16(sp)
80205f78:	dc800317 	ldw	r18,12(sp)
80205f7c:	dc400217 	ldw	r17,8(sp)
80205f80:	dc000117 	ldw	r16,4(sp)
80205f84:	dec00b04 	addi	sp,sp,44
80205f88:	f800283a 	ret
80205f8c:	90002b1e 	bne	r18,zero,8020603c <__divsf3+0x244>
80205f90:	04000104 	movi	r16,4
80205f94:	05c00044 	movi	r23,1
80205f98:	003fb106 	br	80205e60 <__reset+0xfa1e5e60>
80205f9c:	8800251e 	bne	r17,zero,80206034 <__divsf3+0x23c>
80205fa0:	01400084 	movi	r5,2
80205fa4:	00000206 	br	80205fb0 <__divsf3+0x1b8>
80205fa8:	88001a1e 	bne	r17,zero,80206014 <__divsf3+0x21c>
80205fac:	01400044 	movi	r5,1
80205fb0:	8160b03a 	or	r16,r16,r5
80205fb4:	802090ba 	slli	r16,r16,2
80205fb8:	00e00834 	movhi	r3,32800
80205fbc:	18d7f504 	addi	r3,r3,24532
80205fc0:	80e1883a 	add	r16,r16,r3
80205fc4:	80c00017 	ldw	r3,0(r16)
80205fc8:	9d44f03a 	xor	r2,r19,r21
80205fcc:	a18dc83a 	sub	r6,r20,r6
80205fd0:	1800683a 	jmp	r3
80205fd4:	80205f2c 	andhi	zero,r16,33148
80205fd8:	80205f2c 	andhi	zero,r16,33148
80205fdc:	80206178 	rdprs	zero,r16,-32379
80205fe0:	80205f14 	ori	zero,r16,33148
80205fe4:	80206178 	rdprs	zero,r16,-32379
80205fe8:	80206074 	orhi	zero,r16,33153
80205fec:	80206178 	rdprs	zero,r16,-32379
80205ff0:	80205f14 	ori	zero,r16,33148
80205ff4:	80205f2c 	andhi	zero,r16,33148
80205ff8:	80205f2c 	andhi	zero,r16,33148
80205ffc:	80206074 	orhi	zero,r16,33153
80206000:	80205f14 	ori	zero,r16,33148
80206004:	80206188 	cmpgei	zero,r16,-32378
80206008:	80206188 	cmpgei	zero,r16,-32378
8020600c:	80206188 	cmpgei	zero,r16,-32378
80206010:	802061a0 	cmpeqi	zero,r16,-32378
80206014:	8809883a 	mov	r4,r17
80206018:	020655c0 	call	8020655c <__clzsi2>
8020601c:	10fffec4 	addi	r3,r2,-5
80206020:	10801d84 	addi	r2,r2,118
80206024:	88e2983a 	sll	r17,r17,r3
80206028:	008dc83a 	sub	r6,zero,r2
8020602c:	000b883a 	mov	r5,zero
80206030:	003f9906 	br	80205e98 <__reset+0xfa1e5e98>
80206034:	014000c4 	movi	r5,3
80206038:	003f9706 	br	80205e98 <__reset+0xfa1e5e98>
8020603c:	9009883a 	mov	r4,r18
80206040:	d9400015 	stw	r5,0(sp)
80206044:	020655c0 	call	8020655c <__clzsi2>
80206048:	10fffec4 	addi	r3,r2,-5
8020604c:	11801d84 	addi	r6,r2,118
80206050:	90e4983a 	sll	r18,r18,r3
80206054:	01a9c83a 	sub	r20,zero,r6
80206058:	0021883a 	mov	r16,zero
8020605c:	002f883a 	mov	r23,zero
80206060:	d9400017 	ldw	r5,0(sp)
80206064:	003f7e06 	br	80205e60 <__reset+0xfa1e5e60>
80206068:	04000304 	movi	r16,12
8020606c:	05c000c4 	movi	r23,3
80206070:	003f7b06 	br	80205e60 <__reset+0xfa1e5e60>
80206074:	01802034 	movhi	r6,128
80206078:	000f883a 	mov	r7,zero
8020607c:	31bfffc4 	addi	r6,r6,-1
80206080:	013fffc4 	movi	r4,-1
80206084:	003fac06 	br	80205f38 <__reset+0xfa1e5f38>
80206088:	01400044 	movi	r5,1
8020608c:	2909c83a 	sub	r4,r5,r4
80206090:	00c006c4 	movi	r3,27
80206094:	19004b0e 	bge	r3,r4,802061c4 <__divsf3+0x3cc>
80206098:	114e703a 	and	r7,r2,r5
8020609c:	0009883a 	mov	r4,zero
802060a0:	000d883a 	mov	r6,zero
802060a4:	003fa406 	br	80205f38 <__reset+0xfa1e5f38>
802060a8:	9006917a 	slli	r3,r18,5
802060ac:	8822917a 	slli	r17,r17,5
802060b0:	1c40372e 	bgeu	r3,r17,80206190 <__divsf3+0x398>
802060b4:	31bfffc4 	addi	r6,r6,-1
802060b8:	010006c4 	movi	r4,27
802060bc:	000b883a 	mov	r5,zero
802060c0:	180f883a 	mov	r7,r3
802060c4:	294b883a 	add	r5,r5,r5
802060c8:	18c7883a 	add	r3,r3,r3
802060cc:	38000116 	blt	r7,zero,802060d4 <__divsf3+0x2dc>
802060d0:	1c400236 	bltu	r3,r17,802060dc <__divsf3+0x2e4>
802060d4:	1c47c83a 	sub	r3,r3,r17
802060d8:	29400054 	ori	r5,r5,1
802060dc:	213fffc4 	addi	r4,r4,-1
802060e0:	203ff71e 	bne	r4,zero,802060c0 <__reset+0xfa1e60c0>
802060e4:	1806c03a 	cmpne	r3,r3,zero
802060e8:	1962b03a 	or	r17,r3,r5
802060ec:	31001fc4 	addi	r4,r6,127
802060f0:	013fe50e 	bge	zero,r4,80206088 <__reset+0xfa1e6088>
802060f4:	88c001cc 	andi	r3,r17,7
802060f8:	18000426 	beq	r3,zero,8020610c <__divsf3+0x314>
802060fc:	88c003cc 	andi	r3,r17,15
80206100:	01400104 	movi	r5,4
80206104:	19400126 	beq	r3,r5,8020610c <__divsf3+0x314>
80206108:	8963883a 	add	r17,r17,r5
8020610c:	88c2002c 	andhi	r3,r17,2048
80206110:	18000426 	beq	r3,zero,80206124 <__divsf3+0x32c>
80206114:	00fe0034 	movhi	r3,63488
80206118:	18ffffc4 	addi	r3,r3,-1
8020611c:	31002004 	addi	r4,r6,128
80206120:	88e2703a 	and	r17,r17,r3
80206124:	00c03f84 	movi	r3,254
80206128:	193f8016 	blt	r3,r4,80205f2c <__reset+0xfa1e5f2c>
8020612c:	880c91ba 	slli	r6,r17,6
80206130:	11c0004c 	andi	r7,r2,1
80206134:	300cd27a 	srli	r6,r6,9
80206138:	003f7f06 	br	80205f38 <__reset+0xfa1e5f38>
8020613c:	9080102c 	andhi	r2,r18,64
80206140:	10000226 	beq	r2,zero,8020614c <__divsf3+0x354>
80206144:	8880102c 	andhi	r2,r17,64
80206148:	10001826 	beq	r2,zero,802061ac <__divsf3+0x3b4>
8020614c:	00802034 	movhi	r2,128
80206150:	91801034 	orhi	r6,r18,64
80206154:	10bfffc4 	addi	r2,r2,-1
80206158:	980f883a 	mov	r7,r19
8020615c:	308c703a 	and	r6,r6,r2
80206160:	003fc706 	br	80206080 <__reset+0xfa1e6080>
80206164:	008000c4 	movi	r2,3
80206168:	b8802d26 	beq	r23,r2,80206220 <__divsf3+0x428>
8020616c:	00c00044 	movi	r3,1
80206170:	b005883a 	mov	r2,r22
80206174:	b8ffdd1e 	bne	r23,r3,802060ec <__reset+0xfa1e60ec>
80206178:	11c0004c 	andi	r7,r2,1
8020617c:	0009883a 	mov	r4,zero
80206180:	000d883a 	mov	r6,zero
80206184:	003f6c06 	br	80205f38 <__reset+0xfa1e5f38>
80206188:	9023883a 	mov	r17,r18
8020618c:	003f6406 	br	80205f20 <__reset+0xfa1e5f20>
80206190:	1c47c83a 	sub	r3,r3,r17
80206194:	01000684 	movi	r4,26
80206198:	01400044 	movi	r5,1
8020619c:	003fc806 	br	802060c0 <__reset+0xfa1e60c0>
802061a0:	9080102c 	andhi	r2,r18,64
802061a4:	103fe926 	beq	r2,zero,8020614c <__reset+0xfa1e614c>
802061a8:	0023883a 	mov	r17,zero
802061ac:	00802034 	movhi	r2,128
802061b0:	89801034 	orhi	r6,r17,64
802061b4:	10bfffc4 	addi	r2,r2,-1
802061b8:	a80f883a 	mov	r7,r21
802061bc:	308c703a 	and	r6,r6,r2
802061c0:	003faf06 	br	80206080 <__reset+0xfa1e6080>
802061c4:	01c00804 	movi	r7,32
802061c8:	390fc83a 	sub	r7,r7,r4
802061cc:	89ce983a 	sll	r7,r17,r7
802061d0:	890ad83a 	srl	r5,r17,r4
802061d4:	380ec03a 	cmpne	r7,r7,zero
802061d8:	29cab03a 	or	r5,r5,r7
802061dc:	28c001cc 	andi	r3,r5,7
802061e0:	18000426 	beq	r3,zero,802061f4 <__divsf3+0x3fc>
802061e4:	28c003cc 	andi	r3,r5,15
802061e8:	01000104 	movi	r4,4
802061ec:	19000126 	beq	r3,r4,802061f4 <__divsf3+0x3fc>
802061f0:	290b883a 	add	r5,r5,r4
802061f4:	28c1002c 	andhi	r3,r5,1024
802061f8:	18000426 	beq	r3,zero,8020620c <__divsf3+0x414>
802061fc:	11c0004c 	andi	r7,r2,1
80206200:	01000044 	movi	r4,1
80206204:	000d883a 	mov	r6,zero
80206208:	003f4b06 	br	80205f38 <__reset+0xfa1e5f38>
8020620c:	280a91ba 	slli	r5,r5,6
80206210:	11c0004c 	andi	r7,r2,1
80206214:	0009883a 	mov	r4,zero
80206218:	280cd27a 	srli	r6,r5,9
8020621c:	003f4606 	br	80205f38 <__reset+0xfa1e5f38>
80206220:	00802034 	movhi	r2,128
80206224:	89801034 	orhi	r6,r17,64
80206228:	10bfffc4 	addi	r2,r2,-1
8020622c:	b00f883a 	mov	r7,r22
80206230:	308c703a 	and	r6,r6,r2
80206234:	003f9206 	br	80206080 <__reset+0xfa1e6080>

80206238 <__floatsisf>:
80206238:	defffd04 	addi	sp,sp,-12
8020623c:	dfc00215 	stw	ra,8(sp)
80206240:	dc400115 	stw	r17,4(sp)
80206244:	dc000015 	stw	r16,0(sp)
80206248:	20003526 	beq	r4,zero,80206320 <__floatsisf+0xe8>
8020624c:	2021883a 	mov	r16,r4
80206250:	2022d7fa 	srli	r17,r4,31
80206254:	20003616 	blt	r4,zero,80206330 <__floatsisf+0xf8>
80206258:	8009883a 	mov	r4,r16
8020625c:	020655c0 	call	8020655c <__clzsi2>
80206260:	00c02784 	movi	r3,158
80206264:	1887c83a 	sub	r3,r3,r2
80206268:	01002584 	movi	r4,150
8020626c:	20c01416 	blt	r4,r3,802062c0 <__floatsisf+0x88>
80206270:	20c9c83a 	sub	r4,r4,r3
80206274:	8120983a 	sll	r16,r16,r4
80206278:	00802034 	movhi	r2,128
8020627c:	10bfffc4 	addi	r2,r2,-1
80206280:	8809883a 	mov	r4,r17
80206284:	80a0703a 	and	r16,r16,r2
80206288:	18803fcc 	andi	r2,r3,255
8020628c:	100695fa 	slli	r3,r2,23
80206290:	20803fcc 	andi	r2,r4,255
80206294:	100897fa 	slli	r4,r2,31
80206298:	00802034 	movhi	r2,128
8020629c:	10bfffc4 	addi	r2,r2,-1
802062a0:	8084703a 	and	r2,r16,r2
802062a4:	10c4b03a 	or	r2,r2,r3
802062a8:	1104b03a 	or	r2,r2,r4
802062ac:	dfc00217 	ldw	ra,8(sp)
802062b0:	dc400117 	ldw	r17,4(sp)
802062b4:	dc000017 	ldw	r16,0(sp)
802062b8:	dec00304 	addi	sp,sp,12
802062bc:	f800283a 	ret
802062c0:	01002644 	movi	r4,153
802062c4:	20c01c16 	blt	r4,r3,80206338 <__floatsisf+0x100>
802062c8:	20c9c83a 	sub	r4,r4,r3
802062cc:	8120983a 	sll	r16,r16,r4
802062d0:	013f0034 	movhi	r4,64512
802062d4:	213fffc4 	addi	r4,r4,-1
802062d8:	814001cc 	andi	r5,r16,7
802062dc:	8108703a 	and	r4,r16,r4
802062e0:	28000426 	beq	r5,zero,802062f4 <__floatsisf+0xbc>
802062e4:	840003cc 	andi	r16,r16,15
802062e8:	01400104 	movi	r5,4
802062ec:	81400126 	beq	r16,r5,802062f4 <__floatsisf+0xbc>
802062f0:	2149883a 	add	r4,r4,r5
802062f4:	2141002c 	andhi	r5,r4,1024
802062f8:	28000526 	beq	r5,zero,80206310 <__floatsisf+0xd8>
802062fc:	00c027c4 	movi	r3,159
80206300:	1887c83a 	sub	r3,r3,r2
80206304:	00bf0034 	movhi	r2,64512
80206308:	10bfffc4 	addi	r2,r2,-1
8020630c:	2088703a 	and	r4,r4,r2
80206310:	202091ba 	slli	r16,r4,6
80206314:	8809883a 	mov	r4,r17
80206318:	8020d27a 	srli	r16,r16,9
8020631c:	003fda06 	br	80206288 <__reset+0xfa1e6288>
80206320:	0009883a 	mov	r4,zero
80206324:	0007883a 	mov	r3,zero
80206328:	0021883a 	mov	r16,zero
8020632c:	003fd606 	br	80206288 <__reset+0xfa1e6288>
80206330:	0121c83a 	sub	r16,zero,r4
80206334:	003fc806 	br	80206258 <__reset+0xfa1e6258>
80206338:	01002e44 	movi	r4,185
8020633c:	20c9c83a 	sub	r4,r4,r3
80206340:	01400144 	movi	r5,5
80206344:	8108983a 	sll	r4,r16,r4
80206348:	288bc83a 	sub	r5,r5,r2
8020634c:	8160d83a 	srl	r16,r16,r5
80206350:	2008c03a 	cmpne	r4,r4,zero
80206354:	8120b03a 	or	r16,r16,r4
80206358:	003fdd06 	br	802062d0 <__reset+0xfa1e62d0>

8020635c <__floatunsisf>:
8020635c:	defffe04 	addi	sp,sp,-8
80206360:	dfc00115 	stw	ra,4(sp)
80206364:	dc000015 	stw	r16,0(sp)
80206368:	20002c26 	beq	r4,zero,8020641c <__floatunsisf+0xc0>
8020636c:	2021883a 	mov	r16,r4
80206370:	020655c0 	call	8020655c <__clzsi2>
80206374:	00c02784 	movi	r3,158
80206378:	1887c83a 	sub	r3,r3,r2
8020637c:	01002584 	movi	r4,150
80206380:	20c00f16 	blt	r4,r3,802063c0 <__floatunsisf+0x64>
80206384:	20c9c83a 	sub	r4,r4,r3
80206388:	8108983a 	sll	r4,r16,r4
8020638c:	00802034 	movhi	r2,128
80206390:	10bfffc4 	addi	r2,r2,-1
80206394:	2088703a 	and	r4,r4,r2
80206398:	18803fcc 	andi	r2,r3,255
8020639c:	100695fa 	slli	r3,r2,23
802063a0:	00802034 	movhi	r2,128
802063a4:	10bfffc4 	addi	r2,r2,-1
802063a8:	2084703a 	and	r2,r4,r2
802063ac:	10c4b03a 	or	r2,r2,r3
802063b0:	dfc00117 	ldw	ra,4(sp)
802063b4:	dc000017 	ldw	r16,0(sp)
802063b8:	dec00204 	addi	sp,sp,8
802063bc:	f800283a 	ret
802063c0:	01002644 	movi	r4,153
802063c4:	20c01816 	blt	r4,r3,80206428 <__floatunsisf+0xcc>
802063c8:	20c9c83a 	sub	r4,r4,r3
802063cc:	8108983a 	sll	r4,r16,r4
802063d0:	017f0034 	movhi	r5,64512
802063d4:	297fffc4 	addi	r5,r5,-1
802063d8:	218001cc 	andi	r6,r4,7
802063dc:	214a703a 	and	r5,r4,r5
802063e0:	30000426 	beq	r6,zero,802063f4 <__floatunsisf+0x98>
802063e4:	210003cc 	andi	r4,r4,15
802063e8:	01800104 	movi	r6,4
802063ec:	21800126 	beq	r4,r6,802063f4 <__floatunsisf+0x98>
802063f0:	298b883a 	add	r5,r5,r6
802063f4:	2901002c 	andhi	r4,r5,1024
802063f8:	20000526 	beq	r4,zero,80206410 <__floatunsisf+0xb4>
802063fc:	00c027c4 	movi	r3,159
80206400:	1887c83a 	sub	r3,r3,r2
80206404:	00bf0034 	movhi	r2,64512
80206408:	10bfffc4 	addi	r2,r2,-1
8020640c:	288a703a 	and	r5,r5,r2
80206410:	280891ba 	slli	r4,r5,6
80206414:	2008d27a 	srli	r4,r4,9
80206418:	003fdf06 	br	80206398 <__reset+0xfa1e6398>
8020641c:	0007883a 	mov	r3,zero
80206420:	0009883a 	mov	r4,zero
80206424:	003fdc06 	br	80206398 <__reset+0xfa1e6398>
80206428:	01402e44 	movi	r5,185
8020642c:	28cbc83a 	sub	r5,r5,r3
80206430:	01000144 	movi	r4,5
80206434:	2089c83a 	sub	r4,r4,r2
80206438:	814a983a 	sll	r5,r16,r5
8020643c:	8108d83a 	srl	r4,r16,r4
80206440:	2820c03a 	cmpne	r16,r5,zero
80206444:	2408b03a 	or	r4,r4,r16
80206448:	003fe106 	br	802063d0 <__reset+0xfa1e63d0>

8020644c <__extendsfdf2>:
8020644c:	200ad5fa 	srli	r5,r4,23
80206450:	defffd04 	addi	sp,sp,-12
80206454:	dc400115 	stw	r17,4(sp)
80206458:	29403fcc 	andi	r5,r5,255
8020645c:	29800044 	addi	r6,r5,1
80206460:	04402034 	movhi	r17,128
80206464:	dc000015 	stw	r16,0(sp)
80206468:	8c7fffc4 	addi	r17,r17,-1
8020646c:	dfc00215 	stw	ra,8(sp)
80206470:	31803fcc 	andi	r6,r6,255
80206474:	00800044 	movi	r2,1
80206478:	8922703a 	and	r17,r17,r4
8020647c:	2020d7fa 	srli	r16,r4,31
80206480:	1180110e 	bge	r2,r6,802064c8 <__extendsfdf2+0x7c>
80206484:	880cd0fa 	srli	r6,r17,3
80206488:	8822977a 	slli	r17,r17,29
8020648c:	2940e004 	addi	r5,r5,896
80206490:	2941ffcc 	andi	r5,r5,2047
80206494:	2804953a 	slli	r2,r5,20
80206498:	01400434 	movhi	r5,16
8020649c:	800697fa 	slli	r3,r16,31
802064a0:	297fffc4 	addi	r5,r5,-1
802064a4:	314a703a 	and	r5,r6,r5
802064a8:	288ab03a 	or	r5,r5,r2
802064ac:	28c6b03a 	or	r3,r5,r3
802064b0:	8805883a 	mov	r2,r17
802064b4:	dfc00217 	ldw	ra,8(sp)
802064b8:	dc400117 	ldw	r17,4(sp)
802064bc:	dc000017 	ldw	r16,0(sp)
802064c0:	dec00304 	addi	sp,sp,12
802064c4:	f800283a 	ret
802064c8:	2800111e 	bne	r5,zero,80206510 <__extendsfdf2+0xc4>
802064cc:	88001c26 	beq	r17,zero,80206540 <__extendsfdf2+0xf4>
802064d0:	8809883a 	mov	r4,r17
802064d4:	020655c0 	call	8020655c <__clzsi2>
802064d8:	00c00284 	movi	r3,10
802064dc:	18801b16 	blt	r3,r2,8020654c <__extendsfdf2+0x100>
802064e0:	018002c4 	movi	r6,11
802064e4:	308dc83a 	sub	r6,r6,r2
802064e8:	11000544 	addi	r4,r2,21
802064ec:	8986d83a 	srl	r3,r17,r6
802064f0:	8922983a 	sll	r17,r17,r4
802064f4:	0180e244 	movi	r6,905
802064f8:	01400434 	movhi	r5,16
802064fc:	3085c83a 	sub	r2,r6,r2
80206500:	297fffc4 	addi	r5,r5,-1
80206504:	194c703a 	and	r6,r3,r5
80206508:	1141ffcc 	andi	r5,r2,2047
8020650c:	003fe006 	br	80206490 <__reset+0xfa1e6490>
80206510:	88000826 	beq	r17,zero,80206534 <__extendsfdf2+0xe8>
80206514:	880cd0fa 	srli	r6,r17,3
80206518:	00800434 	movhi	r2,16
8020651c:	10bfffc4 	addi	r2,r2,-1
80206520:	31800234 	orhi	r6,r6,8
80206524:	8822977a 	slli	r17,r17,29
80206528:	308c703a 	and	r6,r6,r2
8020652c:	0141ffc4 	movi	r5,2047
80206530:	003fd706 	br	80206490 <__reset+0xfa1e6490>
80206534:	0141ffc4 	movi	r5,2047
80206538:	000d883a 	mov	r6,zero
8020653c:	003fd406 	br	80206490 <__reset+0xfa1e6490>
80206540:	000b883a 	mov	r5,zero
80206544:	000d883a 	mov	r6,zero
80206548:	003fd106 	br	80206490 <__reset+0xfa1e6490>
8020654c:	11bffd44 	addi	r6,r2,-11
80206550:	8986983a 	sll	r3,r17,r6
80206554:	0023883a 	mov	r17,zero
80206558:	003fe606 	br	802064f4 <__reset+0xfa1e64f4>

8020655c <__clzsi2>:
8020655c:	00bfffd4 	movui	r2,65535
80206560:	11000536 	bltu	r2,r4,80206578 <__clzsi2+0x1c>
80206564:	00803fc4 	movi	r2,255
80206568:	11000f36 	bltu	r2,r4,802065a8 <__clzsi2+0x4c>
8020656c:	00800804 	movi	r2,32
80206570:	0007883a 	mov	r3,zero
80206574:	00000506 	br	8020658c <__clzsi2+0x30>
80206578:	00804034 	movhi	r2,256
8020657c:	10bfffc4 	addi	r2,r2,-1
80206580:	11000c2e 	bgeu	r2,r4,802065b4 <__clzsi2+0x58>
80206584:	00800204 	movi	r2,8
80206588:	00c00604 	movi	r3,24
8020658c:	20c8d83a 	srl	r4,r4,r3
80206590:	00e008b4 	movhi	r3,32802
80206594:	18f24c44 	addi	r3,r3,-14031
80206598:	1909883a 	add	r4,r3,r4
8020659c:	20c00003 	ldbu	r3,0(r4)
802065a0:	10c5c83a 	sub	r2,r2,r3
802065a4:	f800283a 	ret
802065a8:	00800604 	movi	r2,24
802065ac:	00c00204 	movi	r3,8
802065b0:	003ff606 	br	8020658c <__reset+0xfa1e658c>
802065b4:	00800404 	movi	r2,16
802065b8:	1007883a 	mov	r3,r2
802065bc:	003ff306 	br	8020658c <__reset+0xfa1e658c>

802065c0 <_fwrite_r>:
802065c0:	defff504 	addi	sp,sp,-44
802065c4:	dc800815 	stw	r18,32(sp)
802065c8:	39a5383a 	mul	r18,r7,r6
802065cc:	d8800304 	addi	r2,sp,12
802065d0:	d8800015 	stw	r2,0(sp)
802065d4:	00800044 	movi	r2,1
802065d8:	dcc00915 	stw	r19,36(sp)
802065dc:	dc400715 	stw	r17,28(sp)
802065e0:	dc000615 	stw	r16,24(sp)
802065e4:	d9400315 	stw	r5,12(sp)
802065e8:	dfc00a15 	stw	ra,40(sp)
802065ec:	dc800415 	stw	r18,16(sp)
802065f0:	dc800215 	stw	r18,8(sp)
802065f4:	d8800115 	stw	r2,4(sp)
802065f8:	3027883a 	mov	r19,r6
802065fc:	3821883a 	mov	r16,r7
80206600:	2023883a 	mov	r17,r4
80206604:	d9400b17 	ldw	r5,44(sp)
80206608:	20000226 	beq	r4,zero,80206614 <_fwrite_r+0x54>
8020660c:	20800e17 	ldw	r2,56(r4)
80206610:	10001a26 	beq	r2,zero,8020667c <_fwrite_r+0xbc>
80206614:	2880030b 	ldhu	r2,12(r5)
80206618:	10c8000c 	andi	r3,r2,8192
8020661c:	1800061e 	bne	r3,zero,80206638 <_fwrite_r+0x78>
80206620:	29001917 	ldw	r4,100(r5)
80206624:	00f7ffc4 	movi	r3,-8193
80206628:	10880014 	ori	r2,r2,8192
8020662c:	20c6703a 	and	r3,r4,r3
80206630:	2880030d 	sth	r2,12(r5)
80206634:	28c01915 	stw	r3,100(r5)
80206638:	d80d883a 	mov	r6,sp
8020663c:	8809883a 	mov	r4,r17
80206640:	020d3a40 	call	8020d3a4 <__sfvwrite_r>
80206644:	10000b26 	beq	r2,zero,80206674 <_fwrite_r+0xb4>
80206648:	d9000217 	ldw	r4,8(sp)
8020664c:	980b883a 	mov	r5,r19
80206650:	9109c83a 	sub	r4,r18,r4
80206654:	0213f640 	call	80213f64 <__udivsi3>
80206658:	dfc00a17 	ldw	ra,40(sp)
8020665c:	dcc00917 	ldw	r19,36(sp)
80206660:	dc800817 	ldw	r18,32(sp)
80206664:	dc400717 	ldw	r17,28(sp)
80206668:	dc000617 	ldw	r16,24(sp)
8020666c:	dec00b04 	addi	sp,sp,44
80206670:	f800283a 	ret
80206674:	8005883a 	mov	r2,r16
80206678:	003ff706 	br	80206658 <__reset+0xfa1e6658>
8020667c:	d9400515 	stw	r5,20(sp)
80206680:	020cf200 	call	8020cf20 <__sinit>
80206684:	d9400517 	ldw	r5,20(sp)
80206688:	003fe206 	br	80206614 <__reset+0xfa1e6614>

8020668c <fwrite>:
8020668c:	defffe04 	addi	sp,sp,-8
80206690:	00a008b4 	movhi	r2,32802
80206694:	d9c00015 	stw	r7,0(sp)
80206698:	10bad504 	addi	r2,r2,-5292
8020669c:	300f883a 	mov	r7,r6
802066a0:	280d883a 	mov	r6,r5
802066a4:	200b883a 	mov	r5,r4
802066a8:	11000017 	ldw	r4,0(r2)
802066ac:	dfc00115 	stw	ra,4(sp)
802066b0:	02065c00 	call	802065c0 <_fwrite_r>
802066b4:	dfc00117 	ldw	ra,4(sp)
802066b8:	dec00204 	addi	sp,sp,8
802066bc:	f800283a 	ret

802066c0 <memcpy>:
802066c0:	defffd04 	addi	sp,sp,-12
802066c4:	dfc00215 	stw	ra,8(sp)
802066c8:	dc400115 	stw	r17,4(sp)
802066cc:	dc000015 	stw	r16,0(sp)
802066d0:	00c003c4 	movi	r3,15
802066d4:	2005883a 	mov	r2,r4
802066d8:	1980452e 	bgeu	r3,r6,802067f0 <memcpy+0x130>
802066dc:	2906b03a 	or	r3,r5,r4
802066e0:	18c000cc 	andi	r3,r3,3
802066e4:	1800441e 	bne	r3,zero,802067f8 <memcpy+0x138>
802066e8:	347ffc04 	addi	r17,r6,-16
802066ec:	8822d13a 	srli	r17,r17,4
802066f0:	28c00104 	addi	r3,r5,4
802066f4:	23400104 	addi	r13,r4,4
802066f8:	8820913a 	slli	r16,r17,4
802066fc:	2b000204 	addi	r12,r5,8
80206700:	22c00204 	addi	r11,r4,8
80206704:	84000504 	addi	r16,r16,20
80206708:	2a800304 	addi	r10,r5,12
8020670c:	22400304 	addi	r9,r4,12
80206710:	2c21883a 	add	r16,r5,r16
80206714:	2811883a 	mov	r8,r5
80206718:	200f883a 	mov	r7,r4
8020671c:	41000017 	ldw	r4,0(r8)
80206720:	1fc00017 	ldw	ra,0(r3)
80206724:	63c00017 	ldw	r15,0(r12)
80206728:	39000015 	stw	r4,0(r7)
8020672c:	53800017 	ldw	r14,0(r10)
80206730:	6fc00015 	stw	ra,0(r13)
80206734:	5bc00015 	stw	r15,0(r11)
80206738:	4b800015 	stw	r14,0(r9)
8020673c:	18c00404 	addi	r3,r3,16
80206740:	39c00404 	addi	r7,r7,16
80206744:	42000404 	addi	r8,r8,16
80206748:	6b400404 	addi	r13,r13,16
8020674c:	63000404 	addi	r12,r12,16
80206750:	5ac00404 	addi	r11,r11,16
80206754:	52800404 	addi	r10,r10,16
80206758:	4a400404 	addi	r9,r9,16
8020675c:	1c3fef1e 	bne	r3,r16,8020671c <__reset+0xfa1e671c>
80206760:	89c00044 	addi	r7,r17,1
80206764:	380e913a 	slli	r7,r7,4
80206768:	310003cc 	andi	r4,r6,15
8020676c:	02c000c4 	movi	r11,3
80206770:	11c7883a 	add	r3,r2,r7
80206774:	29cb883a 	add	r5,r5,r7
80206778:	5900212e 	bgeu	r11,r4,80206800 <memcpy+0x140>
8020677c:	1813883a 	mov	r9,r3
80206780:	2811883a 	mov	r8,r5
80206784:	200f883a 	mov	r7,r4
80206788:	42800017 	ldw	r10,0(r8)
8020678c:	4a400104 	addi	r9,r9,4
80206790:	39ffff04 	addi	r7,r7,-4
80206794:	4abfff15 	stw	r10,-4(r9)
80206798:	42000104 	addi	r8,r8,4
8020679c:	59fffa36 	bltu	r11,r7,80206788 <__reset+0xfa1e6788>
802067a0:	213fff04 	addi	r4,r4,-4
802067a4:	2008d0ba 	srli	r4,r4,2
802067a8:	318000cc 	andi	r6,r6,3
802067ac:	21000044 	addi	r4,r4,1
802067b0:	2109883a 	add	r4,r4,r4
802067b4:	2109883a 	add	r4,r4,r4
802067b8:	1907883a 	add	r3,r3,r4
802067bc:	290b883a 	add	r5,r5,r4
802067c0:	30000626 	beq	r6,zero,802067dc <memcpy+0x11c>
802067c4:	198d883a 	add	r6,r3,r6
802067c8:	29c00003 	ldbu	r7,0(r5)
802067cc:	18c00044 	addi	r3,r3,1
802067d0:	29400044 	addi	r5,r5,1
802067d4:	19ffffc5 	stb	r7,-1(r3)
802067d8:	19bffb1e 	bne	r3,r6,802067c8 <__reset+0xfa1e67c8>
802067dc:	dfc00217 	ldw	ra,8(sp)
802067e0:	dc400117 	ldw	r17,4(sp)
802067e4:	dc000017 	ldw	r16,0(sp)
802067e8:	dec00304 	addi	sp,sp,12
802067ec:	f800283a 	ret
802067f0:	2007883a 	mov	r3,r4
802067f4:	003ff206 	br	802067c0 <__reset+0xfa1e67c0>
802067f8:	2007883a 	mov	r3,r4
802067fc:	003ff106 	br	802067c4 <__reset+0xfa1e67c4>
80206800:	200d883a 	mov	r6,r4
80206804:	003fee06 	br	802067c0 <__reset+0xfa1e67c0>

80206808 <_printf_r>:
80206808:	defffd04 	addi	sp,sp,-12
8020680c:	2805883a 	mov	r2,r5
80206810:	dfc00015 	stw	ra,0(sp)
80206814:	d9800115 	stw	r6,4(sp)
80206818:	d9c00215 	stw	r7,8(sp)
8020681c:	21400217 	ldw	r5,8(r4)
80206820:	d9c00104 	addi	r7,sp,4
80206824:	100d883a 	mov	r6,r2
80206828:	0208c7c0 	call	80208c7c <___vfprintf_internal_r>
8020682c:	dfc00017 	ldw	ra,0(sp)
80206830:	dec00304 	addi	sp,sp,12
80206834:	f800283a 	ret

80206838 <printf>:
80206838:	defffc04 	addi	sp,sp,-16
8020683c:	dfc00015 	stw	ra,0(sp)
80206840:	d9400115 	stw	r5,4(sp)
80206844:	d9800215 	stw	r6,8(sp)
80206848:	d9c00315 	stw	r7,12(sp)
8020684c:	00a008b4 	movhi	r2,32802
80206850:	10bad504 	addi	r2,r2,-5292
80206854:	10800017 	ldw	r2,0(r2)
80206858:	200b883a 	mov	r5,r4
8020685c:	d9800104 	addi	r6,sp,4
80206860:	11000217 	ldw	r4,8(r2)
80206864:	020ae740 	call	8020ae74 <__vfprintf_internal>
80206868:	dfc00017 	ldw	ra,0(sp)
8020686c:	dec00404 	addi	sp,sp,16
80206870:	f800283a 	ret

80206874 <_puts_r>:
80206874:	defff604 	addi	sp,sp,-40
80206878:	dc000715 	stw	r16,28(sp)
8020687c:	2021883a 	mov	r16,r4
80206880:	2809883a 	mov	r4,r5
80206884:	dc400815 	stw	r17,32(sp)
80206888:	dfc00915 	stw	ra,36(sp)
8020688c:	2823883a 	mov	r17,r5
80206890:	0206a0c0 	call	80206a0c <strlen>
80206894:	10c00044 	addi	r3,r2,1
80206898:	d8800115 	stw	r2,4(sp)
8020689c:	00a008b4 	movhi	r2,32802
802068a0:	10b28e04 	addi	r2,r2,-13768
802068a4:	d8800215 	stw	r2,8(sp)
802068a8:	00800044 	movi	r2,1
802068ac:	d8800315 	stw	r2,12(sp)
802068b0:	00800084 	movi	r2,2
802068b4:	dc400015 	stw	r17,0(sp)
802068b8:	d8c00615 	stw	r3,24(sp)
802068bc:	dec00415 	stw	sp,16(sp)
802068c0:	d8800515 	stw	r2,20(sp)
802068c4:	80000226 	beq	r16,zero,802068d0 <_puts_r+0x5c>
802068c8:	80800e17 	ldw	r2,56(r16)
802068cc:	10001426 	beq	r2,zero,80206920 <_puts_r+0xac>
802068d0:	81400217 	ldw	r5,8(r16)
802068d4:	2880030b 	ldhu	r2,12(r5)
802068d8:	10c8000c 	andi	r3,r2,8192
802068dc:	1800061e 	bne	r3,zero,802068f8 <_puts_r+0x84>
802068e0:	29001917 	ldw	r4,100(r5)
802068e4:	00f7ffc4 	movi	r3,-8193
802068e8:	10880014 	ori	r2,r2,8192
802068ec:	20c6703a 	and	r3,r4,r3
802068f0:	2880030d 	sth	r2,12(r5)
802068f4:	28c01915 	stw	r3,100(r5)
802068f8:	d9800404 	addi	r6,sp,16
802068fc:	8009883a 	mov	r4,r16
80206900:	020d3a40 	call	8020d3a4 <__sfvwrite_r>
80206904:	1000091e 	bne	r2,zero,8020692c <_puts_r+0xb8>
80206908:	00800284 	movi	r2,10
8020690c:	dfc00917 	ldw	ra,36(sp)
80206910:	dc400817 	ldw	r17,32(sp)
80206914:	dc000717 	ldw	r16,28(sp)
80206918:	dec00a04 	addi	sp,sp,40
8020691c:	f800283a 	ret
80206920:	8009883a 	mov	r4,r16
80206924:	020cf200 	call	8020cf20 <__sinit>
80206928:	003fe906 	br	802068d0 <__reset+0xfa1e68d0>
8020692c:	00bfffc4 	movi	r2,-1
80206930:	003ff606 	br	8020690c <__reset+0xfa1e690c>

80206934 <puts>:
80206934:	00a008b4 	movhi	r2,32802
80206938:	10bad504 	addi	r2,r2,-5292
8020693c:	200b883a 	mov	r5,r4
80206940:	11000017 	ldw	r4,0(r2)
80206944:	02068741 	jmpi	80206874 <_puts_r>

80206948 <_sprintf_r>:
80206948:	deffe404 	addi	sp,sp,-112
8020694c:	2807883a 	mov	r3,r5
80206950:	dfc01a15 	stw	ra,104(sp)
80206954:	d9c01b15 	stw	r7,108(sp)
80206958:	00a00034 	movhi	r2,32768
8020695c:	10bfffc4 	addi	r2,r2,-1
80206960:	02008204 	movi	r8,520
80206964:	d8800215 	stw	r2,8(sp)
80206968:	d8800515 	stw	r2,20(sp)
8020696c:	d9c01b04 	addi	r7,sp,108
80206970:	d80b883a 	mov	r5,sp
80206974:	00bfffc4 	movi	r2,-1
80206978:	d8c00015 	stw	r3,0(sp)
8020697c:	d8c00415 	stw	r3,16(sp)
80206980:	da00030d 	sth	r8,12(sp)
80206984:	d880038d 	sth	r2,14(sp)
80206988:	0206aa40 	call	80206aa4 <___svfprintf_internal_r>
8020698c:	d8c00017 	ldw	r3,0(sp)
80206990:	18000005 	stb	zero,0(r3)
80206994:	dfc01a17 	ldw	ra,104(sp)
80206998:	dec01c04 	addi	sp,sp,112
8020699c:	f800283a 	ret

802069a0 <sprintf>:
802069a0:	deffe304 	addi	sp,sp,-116
802069a4:	2007883a 	mov	r3,r4
802069a8:	dfc01a15 	stw	ra,104(sp)
802069ac:	d9801b15 	stw	r6,108(sp)
802069b0:	d9c01c15 	stw	r7,112(sp)
802069b4:	012008b4 	movhi	r4,32802
802069b8:	213ad504 	addi	r4,r4,-5292
802069bc:	21000017 	ldw	r4,0(r4)
802069c0:	00a00034 	movhi	r2,32768
802069c4:	10bfffc4 	addi	r2,r2,-1
802069c8:	280d883a 	mov	r6,r5
802069cc:	02008204 	movi	r8,520
802069d0:	d8800215 	stw	r2,8(sp)
802069d4:	d8800515 	stw	r2,20(sp)
802069d8:	d9c01b04 	addi	r7,sp,108
802069dc:	d80b883a 	mov	r5,sp
802069e0:	00bfffc4 	movi	r2,-1
802069e4:	d8c00015 	stw	r3,0(sp)
802069e8:	d8c00415 	stw	r3,16(sp)
802069ec:	da00030d 	sth	r8,12(sp)
802069f0:	d880038d 	sth	r2,14(sp)
802069f4:	0206aa40 	call	80206aa4 <___svfprintf_internal_r>
802069f8:	d8c00017 	ldw	r3,0(sp)
802069fc:	18000005 	stb	zero,0(r3)
80206a00:	dfc01a17 	ldw	ra,104(sp)
80206a04:	dec01d04 	addi	sp,sp,116
80206a08:	f800283a 	ret

80206a0c <strlen>:
80206a0c:	208000cc 	andi	r2,r4,3
80206a10:	10002026 	beq	r2,zero,80206a94 <strlen+0x88>
80206a14:	20800007 	ldb	r2,0(r4)
80206a18:	10002026 	beq	r2,zero,80206a9c <strlen+0x90>
80206a1c:	2005883a 	mov	r2,r4
80206a20:	00000206 	br	80206a2c <strlen+0x20>
80206a24:	10c00007 	ldb	r3,0(r2)
80206a28:	18001826 	beq	r3,zero,80206a8c <strlen+0x80>
80206a2c:	10800044 	addi	r2,r2,1
80206a30:	10c000cc 	andi	r3,r2,3
80206a34:	183ffb1e 	bne	r3,zero,80206a24 <__reset+0xfa1e6a24>
80206a38:	10c00017 	ldw	r3,0(r2)
80206a3c:	01ffbff4 	movhi	r7,65279
80206a40:	39ffbfc4 	addi	r7,r7,-257
80206a44:	00ca303a 	nor	r5,zero,r3
80206a48:	01a02074 	movhi	r6,32897
80206a4c:	19c7883a 	add	r3,r3,r7
80206a50:	31a02004 	addi	r6,r6,-32640
80206a54:	1946703a 	and	r3,r3,r5
80206a58:	1986703a 	and	r3,r3,r6
80206a5c:	1800091e 	bne	r3,zero,80206a84 <strlen+0x78>
80206a60:	10800104 	addi	r2,r2,4
80206a64:	10c00017 	ldw	r3,0(r2)
80206a68:	19cb883a 	add	r5,r3,r7
80206a6c:	00c6303a 	nor	r3,zero,r3
80206a70:	28c6703a 	and	r3,r5,r3
80206a74:	1986703a 	and	r3,r3,r6
80206a78:	183ff926 	beq	r3,zero,80206a60 <__reset+0xfa1e6a60>
80206a7c:	00000106 	br	80206a84 <strlen+0x78>
80206a80:	10800044 	addi	r2,r2,1
80206a84:	10c00007 	ldb	r3,0(r2)
80206a88:	183ffd1e 	bne	r3,zero,80206a80 <__reset+0xfa1e6a80>
80206a8c:	1105c83a 	sub	r2,r2,r4
80206a90:	f800283a 	ret
80206a94:	2005883a 	mov	r2,r4
80206a98:	003fe706 	br	80206a38 <__reset+0xfa1e6a38>
80206a9c:	0005883a 	mov	r2,zero
80206aa0:	f800283a 	ret

80206aa4 <___svfprintf_internal_r>:
80206aa4:	deffb704 	addi	sp,sp,-292
80206aa8:	dfc04815 	stw	ra,288(sp)
80206aac:	ddc04615 	stw	r23,280(sp)
80206ab0:	d9402c15 	stw	r5,176(sp)
80206ab4:	d9003915 	stw	r4,228(sp)
80206ab8:	302f883a 	mov	r23,r6
80206abc:	d9c02d15 	stw	r7,180(sp)
80206ac0:	df004715 	stw	fp,284(sp)
80206ac4:	dd804515 	stw	r22,276(sp)
80206ac8:	dd404415 	stw	r21,272(sp)
80206acc:	dd004315 	stw	r20,268(sp)
80206ad0:	dcc04215 	stw	r19,264(sp)
80206ad4:	dc804115 	stw	r18,260(sp)
80206ad8:	dc404015 	stw	r17,256(sp)
80206adc:	dc003f15 	stw	r16,252(sp)
80206ae0:	020da940 	call	8020da94 <_localeconv_r>
80206ae4:	10800017 	ldw	r2,0(r2)
80206ae8:	1009883a 	mov	r4,r2
80206aec:	d8803415 	stw	r2,208(sp)
80206af0:	0206a0c0 	call	80206a0c <strlen>
80206af4:	d8c02c17 	ldw	r3,176(sp)
80206af8:	d8803815 	stw	r2,224(sp)
80206afc:	1880030b 	ldhu	r2,12(r3)
80206b00:	1080200c 	andi	r2,r2,128
80206b04:	10000226 	beq	r2,zero,80206b10 <___svfprintf_internal_r+0x6c>
80206b08:	18800417 	ldw	r2,16(r3)
80206b0c:	10067f26 	beq	r2,zero,8020850c <___svfprintf_internal_r+0x1a68>
80206b10:	dcc03917 	ldw	r19,228(sp)
80206b14:	d8c00404 	addi	r3,sp,16
80206b18:	056008b4 	movhi	r21,32802
80206b1c:	d9001e04 	addi	r4,sp,120
80206b20:	ad729f84 	addi	r21,r21,-13698
80206b24:	d8c01e15 	stw	r3,120(sp)
80206b28:	d8002015 	stw	zero,128(sp)
80206b2c:	d8001f15 	stw	zero,124(sp)
80206b30:	d8003315 	stw	zero,204(sp)
80206b34:	d8003615 	stw	zero,216(sp)
80206b38:	d8003715 	stw	zero,220(sp)
80206b3c:	1811883a 	mov	r8,r3
80206b40:	d8003a15 	stw	zero,232(sp)
80206b44:	d8003b15 	stw	zero,236(sp)
80206b48:	d8002f15 	stw	zero,188(sp)
80206b4c:	d9002815 	stw	r4,160(sp)
80206b50:	b8800007 	ldb	r2,0(r23)
80206b54:	10026726 	beq	r2,zero,802074f4 <___svfprintf_internal_r+0xa50>
80206b58:	00c00944 	movi	r3,37
80206b5c:	b821883a 	mov	r16,r23
80206b60:	10c0021e 	bne	r2,r3,80206b6c <___svfprintf_internal_r+0xc8>
80206b64:	00001406 	br	80206bb8 <___svfprintf_internal_r+0x114>
80206b68:	10c00326 	beq	r2,r3,80206b78 <___svfprintf_internal_r+0xd4>
80206b6c:	84000044 	addi	r16,r16,1
80206b70:	80800007 	ldb	r2,0(r16)
80206b74:	103ffc1e 	bne	r2,zero,80206b68 <__reset+0xfa1e6b68>
80206b78:	85e3c83a 	sub	r17,r16,r23
80206b7c:	88000e26 	beq	r17,zero,80206bb8 <___svfprintf_internal_r+0x114>
80206b80:	d8c02017 	ldw	r3,128(sp)
80206b84:	d8801f17 	ldw	r2,124(sp)
80206b88:	45c00015 	stw	r23,0(r8)
80206b8c:	1c47883a 	add	r3,r3,r17
80206b90:	10800044 	addi	r2,r2,1
80206b94:	d8c02015 	stw	r3,128(sp)
80206b98:	44400115 	stw	r17,4(r8)
80206b9c:	d8801f15 	stw	r2,124(sp)
80206ba0:	00c001c4 	movi	r3,7
80206ba4:	18809716 	blt	r3,r2,80206e04 <___svfprintf_internal_r+0x360>
80206ba8:	42000204 	addi	r8,r8,8
80206bac:	d9402f17 	ldw	r5,188(sp)
80206bb0:	2c4b883a 	add	r5,r5,r17
80206bb4:	d9402f15 	stw	r5,188(sp)
80206bb8:	80800007 	ldb	r2,0(r16)
80206bbc:	10009826 	beq	r2,zero,80206e20 <___svfprintf_internal_r+0x37c>
80206bc0:	84400047 	ldb	r17,1(r16)
80206bc4:	00bfffc4 	movi	r2,-1
80206bc8:	85c00044 	addi	r23,r16,1
80206bcc:	d8002785 	stb	zero,158(sp)
80206bd0:	0007883a 	mov	r3,zero
80206bd4:	000f883a 	mov	r7,zero
80206bd8:	d8802915 	stw	r2,164(sp)
80206bdc:	d8003115 	stw	zero,196(sp)
80206be0:	0025883a 	mov	r18,zero
80206be4:	01401604 	movi	r5,88
80206be8:	01800244 	movi	r6,9
80206bec:	02800a84 	movi	r10,42
80206bf0:	02401b04 	movi	r9,108
80206bf4:	bdc00044 	addi	r23,r23,1
80206bf8:	88bff804 	addi	r2,r17,-32
80206bfc:	2882f036 	bltu	r5,r2,802077c0 <___svfprintf_internal_r+0xd1c>
80206c00:	100490ba 	slli	r2,r2,2
80206c04:	01200834 	movhi	r4,32800
80206c08:	211b0604 	addi	r4,r4,27672
80206c0c:	1105883a 	add	r2,r2,r4
80206c10:	10800017 	ldw	r2,0(r2)
80206c14:	1000683a 	jmp	r2
80206c18:	80207728 	cmpgeui	zero,r16,33244
80206c1c:	802077c0 	call	8802077c <__reset+0x200077c>
80206c20:	802077c0 	call	8802077c <__reset+0x200077c>
80206c24:	8020771c 	xori	zero,r16,33244
80206c28:	802077c0 	call	8802077c <__reset+0x200077c>
80206c2c:	802077c0 	call	8802077c <__reset+0x200077c>
80206c30:	802077c0 	call	8802077c <__reset+0x200077c>
80206c34:	802077c0 	call	8802077c <__reset+0x200077c>
80206c38:	802077c0 	call	8802077c <__reset+0x200077c>
80206c3c:	802077c0 	call	8802077c <__reset+0x200077c>
80206c40:	80206e7c 	xorhi	zero,r16,33209
80206c44:	80207658 	cmpnei	zero,r16,-32295
80206c48:	802077c0 	call	8802077c <__reset+0x200077c>
80206c4c:	80206d8c 	andi	zero,r16,33206
80206c50:	80206ea4 	muli	zero,r16,-32326
80206c54:	802077c0 	call	8802077c <__reset+0x200077c>
80206c58:	80206f18 	cmpnei	zero,r16,-32324
80206c5c:	80206ee4 	muli	zero,r16,-32325
80206c60:	80206ee4 	muli	zero,r16,-32325
80206c64:	80206ee4 	muli	zero,r16,-32325
80206c68:	80206ee4 	muli	zero,r16,-32325
80206c6c:	80206ee4 	muli	zero,r16,-32325
80206c70:	80206ee4 	muli	zero,r16,-32325
80206c74:	80206ee4 	muli	zero,r16,-32325
80206c78:	80206ee4 	muli	zero,r16,-32325
80206c7c:	80206ee4 	muli	zero,r16,-32325
80206c80:	802077c0 	call	8802077c <__reset+0x200077c>
80206c84:	802077c0 	call	8802077c <__reset+0x200077c>
80206c88:	802077c0 	call	8802077c <__reset+0x200077c>
80206c8c:	802077c0 	call	8802077c <__reset+0x200077c>
80206c90:	802077c0 	call	8802077c <__reset+0x200077c>
80206c94:	802077c0 	call	8802077c <__reset+0x200077c>
80206c98:	802077c0 	call	8802077c <__reset+0x200077c>
80206c9c:	802077c0 	call	8802077c <__reset+0x200077c>
80206ca0:	802077c0 	call	8802077c <__reset+0x200077c>
80206ca4:	802077c0 	call	8802077c <__reset+0x200077c>
80206ca8:	80206fd0 	cmplti	zero,r16,-32321
80206cac:	80206f24 	muli	zero,r16,-32324
80206cb0:	802077c0 	call	8802077c <__reset+0x200077c>
80206cb4:	80206f24 	muli	zero,r16,-32324
80206cb8:	802077c0 	call	8802077c <__reset+0x200077c>
80206cbc:	802077c0 	call	8802077c <__reset+0x200077c>
80206cc0:	802077c0 	call	8802077c <__reset+0x200077c>
80206cc4:	802077c0 	call	8802077c <__reset+0x200077c>
80206cc8:	80206fc4 	addi	zero,r16,-32321
80206ccc:	802077c0 	call	8802077c <__reset+0x200077c>
80206cd0:	802077c0 	call	8802077c <__reset+0x200077c>
80206cd4:	8020708c 	andi	zero,r16,33218
80206cd8:	802077c0 	call	8802077c <__reset+0x200077c>
80206cdc:	802077c0 	call	8802077c <__reset+0x200077c>
80206ce0:	802077c0 	call	8802077c <__reset+0x200077c>
80206ce4:	802077c0 	call	8802077c <__reset+0x200077c>
80206ce8:	802077c0 	call	8802077c <__reset+0x200077c>
80206cec:	802074fc 	xorhi	zero,r16,33235
80206cf0:	802077c0 	call	8802077c <__reset+0x200077c>
80206cf4:	802077c0 	call	8802077c <__reset+0x200077c>
80206cf8:	8020755c 	xori	zero,r16,33237
80206cfc:	802077c0 	call	8802077c <__reset+0x200077c>
80206d00:	802077c0 	call	8802077c <__reset+0x200077c>
80206d04:	802077c0 	call	8802077c <__reset+0x200077c>
80206d08:	802077c0 	call	8802077c <__reset+0x200077c>
80206d0c:	802077c0 	call	8802077c <__reset+0x200077c>
80206d10:	802077c0 	call	8802077c <__reset+0x200077c>
80206d14:	802077c0 	call	8802077c <__reset+0x200077c>
80206d18:	802077c0 	call	8802077c <__reset+0x200077c>
80206d1c:	802077c0 	call	8802077c <__reset+0x200077c>
80206d20:	802077c0 	call	8802077c <__reset+0x200077c>
80206d24:	8020760c 	andi	zero,r16,33240
80206d28:	80207748 	cmpgei	zero,r16,-32291
80206d2c:	80206f24 	muli	zero,r16,-32324
80206d30:	80206f24 	muli	zero,r16,-32324
80206d34:	80206f24 	muli	zero,r16,-32324
80206d38:	8020779c 	xori	zero,r16,33246
80206d3c:	80207748 	cmpgei	zero,r16,-32291
80206d40:	802077c0 	call	8802077c <__reset+0x200077c>
80206d44:	802077c0 	call	8802077c <__reset+0x200077c>
80206d48:	80207758 	cmpnei	zero,r16,-32291
80206d4c:	802077c0 	call	8802077c <__reset+0x200077c>
80206d50:	80207768 	cmpgeui	zero,r16,33245
80206d54:	80207648 	cmpgei	zero,r16,-32295
80206d58:	80206d98 	cmpnei	zero,r16,-32330
80206d5c:	80207668 	cmpgeui	zero,r16,33241
80206d60:	802077c0 	call	8802077c <__reset+0x200077c>
80206d64:	80207674 	orhi	zero,r16,33241
80206d68:	802077c0 	call	8802077c <__reset+0x200077c>
80206d6c:	802076d0 	cmplti	zero,r16,-32293
80206d70:	802077c0 	call	8802077c <__reset+0x200077c>
80206d74:	802077c0 	call	8802077c <__reset+0x200077c>
80206d78:	802076e0 	cmpeqi	zero,r16,-32293
80206d7c:	d9003117 	ldw	r4,196(sp)
80206d80:	d8802d15 	stw	r2,180(sp)
80206d84:	0109c83a 	sub	r4,zero,r4
80206d88:	d9003115 	stw	r4,196(sp)
80206d8c:	94800114 	ori	r18,r18,4
80206d90:	bc400007 	ldb	r17,0(r23)
80206d94:	003f9706 	br	80206bf4 <__reset+0xfa1e6bf4>
80206d98:	00800c04 	movi	r2,48
80206d9c:	d9002d17 	ldw	r4,180(sp)
80206da0:	d9402917 	ldw	r5,164(sp)
80206da4:	d8802705 	stb	r2,156(sp)
80206da8:	00801e04 	movi	r2,120
80206dac:	d8802745 	stb	r2,157(sp)
80206db0:	d8002785 	stb	zero,158(sp)
80206db4:	20c00104 	addi	r3,r4,4
80206db8:	25000017 	ldw	r20,0(r4)
80206dbc:	002d883a 	mov	r22,zero
80206dc0:	90800094 	ori	r2,r18,2
80206dc4:	28028616 	blt	r5,zero,802077e0 <___svfprintf_internal_r+0xd3c>
80206dc8:	00bfdfc4 	movi	r2,-129
80206dcc:	90a4703a 	and	r18,r18,r2
80206dd0:	d8c02d15 	stw	r3,180(sp)
80206dd4:	94800094 	ori	r18,r18,2
80206dd8:	a002731e 	bne	r20,zero,802077a8 <___svfprintf_internal_r+0xd04>
80206ddc:	00a008b4 	movhi	r2,32802
80206de0:	10b29804 	addi	r2,r2,-13728
80206de4:	d8803a15 	stw	r2,232(sp)
80206de8:	04401e04 	movi	r17,120
80206dec:	d8c02917 	ldw	r3,164(sp)
80206df0:	0039883a 	mov	fp,zero
80206df4:	1801d526 	beq	r3,zero,8020754c <___svfprintf_internal_r+0xaa8>
80206df8:	0029883a 	mov	r20,zero
80206dfc:	002d883a 	mov	r22,zero
80206e00:	0001f106 	br	802075c8 <___svfprintf_internal_r+0xb24>
80206e04:	d9402c17 	ldw	r5,176(sp)
80206e08:	d9801e04 	addi	r6,sp,120
80206e0c:	9809883a 	mov	r4,r19
80206e10:	02100340 	call	80210034 <__ssprint_r>
80206e14:	1000081e 	bne	r2,zero,80206e38 <___svfprintf_internal_r+0x394>
80206e18:	da000404 	addi	r8,sp,16
80206e1c:	003f6306 	br	80206bac <__reset+0xfa1e6bac>
80206e20:	d8802017 	ldw	r2,128(sp)
80206e24:	10000426 	beq	r2,zero,80206e38 <___svfprintf_internal_r+0x394>
80206e28:	d9402c17 	ldw	r5,176(sp)
80206e2c:	d9003917 	ldw	r4,228(sp)
80206e30:	d9801e04 	addi	r6,sp,120
80206e34:	02100340 	call	80210034 <__ssprint_r>
80206e38:	d8802c17 	ldw	r2,176(sp)
80206e3c:	10c0030b 	ldhu	r3,12(r2)
80206e40:	d8802f17 	ldw	r2,188(sp)
80206e44:	18c0100c 	andi	r3,r3,64
80206e48:	1805f51e 	bne	r3,zero,80208620 <___svfprintf_internal_r+0x1b7c>
80206e4c:	dfc04817 	ldw	ra,288(sp)
80206e50:	df004717 	ldw	fp,284(sp)
80206e54:	ddc04617 	ldw	r23,280(sp)
80206e58:	dd804517 	ldw	r22,276(sp)
80206e5c:	dd404417 	ldw	r21,272(sp)
80206e60:	dd004317 	ldw	r20,268(sp)
80206e64:	dcc04217 	ldw	r19,264(sp)
80206e68:	dc804117 	ldw	r18,260(sp)
80206e6c:	dc404017 	ldw	r17,256(sp)
80206e70:	dc003f17 	ldw	r16,252(sp)
80206e74:	dec04904 	addi	sp,sp,292
80206e78:	f800283a 	ret
80206e7c:	d8802d17 	ldw	r2,180(sp)
80206e80:	d9002d17 	ldw	r4,180(sp)
80206e84:	10800017 	ldw	r2,0(r2)
80206e88:	d8803115 	stw	r2,196(sp)
80206e8c:	20800104 	addi	r2,r4,4
80206e90:	d9003117 	ldw	r4,196(sp)
80206e94:	203fb916 	blt	r4,zero,80206d7c <__reset+0xfa1e6d7c>
80206e98:	d8802d15 	stw	r2,180(sp)
80206e9c:	bc400007 	ldb	r17,0(r23)
80206ea0:	003f5406 	br	80206bf4 <__reset+0xfa1e6bf4>
80206ea4:	bc400007 	ldb	r17,0(r23)
80206ea8:	bac00044 	addi	r11,r23,1
80206eac:	8a873926 	beq	r17,r10,80208b94 <___svfprintf_internal_r+0x20f0>
80206eb0:	88bff404 	addi	r2,r17,-48
80206eb4:	0009883a 	mov	r4,zero
80206eb8:	30868836 	bltu	r6,r2,802088dc <___svfprintf_internal_r+0x1e38>
80206ebc:	5c400007 	ldb	r17,0(r11)
80206ec0:	210002a4 	muli	r4,r4,10
80206ec4:	5dc00044 	addi	r23,r11,1
80206ec8:	b817883a 	mov	r11,r23
80206ecc:	2089883a 	add	r4,r4,r2
80206ed0:	88bff404 	addi	r2,r17,-48
80206ed4:	30bff92e 	bgeu	r6,r2,80206ebc <__reset+0xfa1e6ebc>
80206ed8:	2005d716 	blt	r4,zero,80208638 <___svfprintf_internal_r+0x1b94>
80206edc:	d9002915 	stw	r4,164(sp)
80206ee0:	003f4506 	br	80206bf8 <__reset+0xfa1e6bf8>
80206ee4:	b809883a 	mov	r4,r23
80206ee8:	d8003115 	stw	zero,196(sp)
80206eec:	88bff404 	addi	r2,r17,-48
80206ef0:	0017883a 	mov	r11,zero
80206ef4:	24400007 	ldb	r17,0(r4)
80206ef8:	5ac002a4 	muli	r11,r11,10
80206efc:	bdc00044 	addi	r23,r23,1
80206f00:	b809883a 	mov	r4,r23
80206f04:	12d7883a 	add	r11,r2,r11
80206f08:	88bff404 	addi	r2,r17,-48
80206f0c:	30bff92e 	bgeu	r6,r2,80206ef4 <__reset+0xfa1e6ef4>
80206f10:	dac03115 	stw	r11,196(sp)
80206f14:	003f3806 	br	80206bf8 <__reset+0xfa1e6bf8>
80206f18:	94802014 	ori	r18,r18,128
80206f1c:	bc400007 	ldb	r17,0(r23)
80206f20:	003f3406 	br	80206bf4 <__reset+0xfa1e6bf4>
80206f24:	18c03fcc 	andi	r3,r3,255
80206f28:	1807471e 	bne	r3,zero,80208c48 <___svfprintf_internal_r+0x21a4>
80206f2c:	9080020c 	andi	r2,r18,8
80206f30:	10047d26 	beq	r2,zero,80208128 <___svfprintf_internal_r+0x1684>
80206f34:	d8c02d17 	ldw	r3,180(sp)
80206f38:	d9002d17 	ldw	r4,180(sp)
80206f3c:	d9402d17 	ldw	r5,180(sp)
80206f40:	18c00017 	ldw	r3,0(r3)
80206f44:	21000117 	ldw	r4,4(r4)
80206f48:	29400204 	addi	r5,r5,8
80206f4c:	d8c03615 	stw	r3,216(sp)
80206f50:	d9003715 	stw	r4,220(sp)
80206f54:	d9402d15 	stw	r5,180(sp)
80206f58:	d9003617 	ldw	r4,216(sp)
80206f5c:	d9403717 	ldw	r5,220(sp)
80206f60:	da003e15 	stw	r8,248(sp)
80206f64:	04000044 	movi	r16,1
80206f68:	020fd540 	call	8020fd54 <__fpclassifyd>
80206f6c:	da003e17 	ldw	r8,248(sp)
80206f70:	14044b1e 	bne	r2,r16,802080a0 <___svfprintf_internal_r+0x15fc>
80206f74:	d9003617 	ldw	r4,216(sp)
80206f78:	d9403717 	ldw	r5,220(sp)
80206f7c:	000d883a 	mov	r6,zero
80206f80:	000f883a 	mov	r7,zero
80206f84:	02153180 	call	80215318 <__ledf2>
80206f88:	da003e17 	ldw	r8,248(sp)
80206f8c:	1005f316 	blt	r2,zero,8020875c <___svfprintf_internal_r+0x1cb8>
80206f90:	df002783 	ldbu	fp,158(sp)
80206f94:	008011c4 	movi	r2,71
80206f98:	1445590e 	bge	r2,r17,80208500 <___svfprintf_internal_r+0x1a5c>
80206f9c:	042008b4 	movhi	r16,32802
80206fa0:	84329004 	addi	r16,r16,-13760
80206fa4:	00c000c4 	movi	r3,3
80206fa8:	00bfdfc4 	movi	r2,-129
80206fac:	d8c02a15 	stw	r3,168(sp)
80206fb0:	90a4703a 	and	r18,r18,r2
80206fb4:	d8c02e15 	stw	r3,184(sp)
80206fb8:	d8002915 	stw	zero,164(sp)
80206fbc:	d8003215 	stw	zero,200(sp)
80206fc0:	00006606 	br	8020715c <___svfprintf_internal_r+0x6b8>
80206fc4:	94800214 	ori	r18,r18,8
80206fc8:	bc400007 	ldb	r17,0(r23)
80206fcc:	003f0906 	br	80206bf4 <__reset+0xfa1e6bf4>
80206fd0:	18c03fcc 	andi	r3,r3,255
80206fd4:	1807181e 	bne	r3,zero,80208c38 <___svfprintf_internal_r+0x2194>
80206fd8:	94800414 	ori	r18,r18,16
80206fdc:	9080080c 	andi	r2,r18,32
80206fe0:	10039626 	beq	r2,zero,80207e3c <___svfprintf_internal_r+0x1398>
80206fe4:	d9402d17 	ldw	r5,180(sp)
80206fe8:	28800117 	ldw	r2,4(r5)
80206fec:	2d000017 	ldw	r20,0(r5)
80206ff0:	29400204 	addi	r5,r5,8
80206ff4:	d9402d15 	stw	r5,180(sp)
80206ff8:	102d883a 	mov	r22,r2
80206ffc:	10039816 	blt	r2,zero,80207e60 <___svfprintf_internal_r+0x13bc>
80207000:	d9402917 	ldw	r5,164(sp)
80207004:	df002783 	ldbu	fp,158(sp)
80207008:	2803ab16 	blt	r5,zero,80207eb8 <___svfprintf_internal_r+0x1414>
8020700c:	00ffdfc4 	movi	r3,-129
80207010:	a584b03a 	or	r2,r20,r22
80207014:	90e4703a 	and	r18,r18,r3
80207018:	10014a26 	beq	r2,zero,80207544 <___svfprintf_internal_r+0xaa0>
8020701c:	b0034b26 	beq	r22,zero,80207d4c <___svfprintf_internal_r+0x12a8>
80207020:	dc402a15 	stw	r17,168(sp)
80207024:	dc001e04 	addi	r16,sp,120
80207028:	b023883a 	mov	r17,r22
8020702c:	402d883a 	mov	r22,r8
80207030:	a009883a 	mov	r4,r20
80207034:	880b883a 	mov	r5,r17
80207038:	01800284 	movi	r6,10
8020703c:	000f883a 	mov	r7,zero
80207040:	02139340 	call	80213934 <__umoddi3>
80207044:	10800c04 	addi	r2,r2,48
80207048:	843fffc4 	addi	r16,r16,-1
8020704c:	a009883a 	mov	r4,r20
80207050:	880b883a 	mov	r5,r17
80207054:	80800005 	stb	r2,0(r16)
80207058:	01800284 	movi	r6,10
8020705c:	000f883a 	mov	r7,zero
80207060:	02133bc0 	call	802133bc <__udivdi3>
80207064:	1029883a 	mov	r20,r2
80207068:	10c4b03a 	or	r2,r2,r3
8020706c:	1823883a 	mov	r17,r3
80207070:	103fef1e 	bne	r2,zero,80207030 <__reset+0xfa1e7030>
80207074:	d8c02817 	ldw	r3,160(sp)
80207078:	dc402a17 	ldw	r17,168(sp)
8020707c:	b011883a 	mov	r8,r22
80207080:	1c07c83a 	sub	r3,r3,r16
80207084:	d8c02e15 	stw	r3,184(sp)
80207088:	00002e06 	br	80207144 <___svfprintf_internal_r+0x6a0>
8020708c:	18c03fcc 	andi	r3,r3,255
80207090:	1806e71e 	bne	r3,zero,80208c30 <___svfprintf_internal_r+0x218c>
80207094:	94800414 	ori	r18,r18,16
80207098:	9080080c 	andi	r2,r18,32
8020709c:	1002d426 	beq	r2,zero,80207bf0 <___svfprintf_internal_r+0x114c>
802070a0:	d9402d17 	ldw	r5,180(sp)
802070a4:	d8c02917 	ldw	r3,164(sp)
802070a8:	d8002785 	stb	zero,158(sp)
802070ac:	28800204 	addi	r2,r5,8
802070b0:	2d000017 	ldw	r20,0(r5)
802070b4:	2d800117 	ldw	r22,4(r5)
802070b8:	18041516 	blt	r3,zero,80208110 <___svfprintf_internal_r+0x166c>
802070bc:	013fdfc4 	movi	r4,-129
802070c0:	a586b03a 	or	r3,r20,r22
802070c4:	d8802d15 	stw	r2,180(sp)
802070c8:	9124703a 	and	r18,r18,r4
802070cc:	1802d51e 	bne	r3,zero,80207c24 <___svfprintf_internal_r+0x1180>
802070d0:	d9402917 	ldw	r5,164(sp)
802070d4:	0039883a 	mov	fp,zero
802070d8:	2806be26 	beq	r5,zero,80208bd4 <___svfprintf_internal_r+0x2130>
802070dc:	0029883a 	mov	r20,zero
802070e0:	002d883a 	mov	r22,zero
802070e4:	dc001e04 	addi	r16,sp,120
802070e8:	a006d0fa 	srli	r3,r20,3
802070ec:	b008977a 	slli	r4,r22,29
802070f0:	b02cd0fa 	srli	r22,r22,3
802070f4:	a50001cc 	andi	r20,r20,7
802070f8:	a0800c04 	addi	r2,r20,48
802070fc:	843fffc4 	addi	r16,r16,-1
80207100:	20e8b03a 	or	r20,r4,r3
80207104:	80800005 	stb	r2,0(r16)
80207108:	a586b03a 	or	r3,r20,r22
8020710c:	183ff61e 	bne	r3,zero,802070e8 <__reset+0xfa1e70e8>
80207110:	90c0004c 	andi	r3,r18,1
80207114:	18013926 	beq	r3,zero,802075fc <___svfprintf_internal_r+0xb58>
80207118:	10803fcc 	andi	r2,r2,255
8020711c:	1080201c 	xori	r2,r2,128
80207120:	10bfe004 	addi	r2,r2,-128
80207124:	00c00c04 	movi	r3,48
80207128:	10c13426 	beq	r2,r3,802075fc <___svfprintf_internal_r+0xb58>
8020712c:	80ffffc5 	stb	r3,-1(r16)
80207130:	d8c02817 	ldw	r3,160(sp)
80207134:	80bfffc4 	addi	r2,r16,-1
80207138:	1021883a 	mov	r16,r2
8020713c:	1887c83a 	sub	r3,r3,r2
80207140:	d8c02e15 	stw	r3,184(sp)
80207144:	d8802e17 	ldw	r2,184(sp)
80207148:	d9002917 	ldw	r4,164(sp)
8020714c:	1100010e 	bge	r2,r4,80207154 <___svfprintf_internal_r+0x6b0>
80207150:	2005883a 	mov	r2,r4
80207154:	d8802a15 	stw	r2,168(sp)
80207158:	d8003215 	stw	zero,200(sp)
8020715c:	e7003fcc 	andi	fp,fp,255
80207160:	e700201c 	xori	fp,fp,128
80207164:	e73fe004 	addi	fp,fp,-128
80207168:	e0000326 	beq	fp,zero,80207178 <___svfprintf_internal_r+0x6d4>
8020716c:	d8c02a17 	ldw	r3,168(sp)
80207170:	18c00044 	addi	r3,r3,1
80207174:	d8c02a15 	stw	r3,168(sp)
80207178:	90c0008c 	andi	r3,r18,2
8020717c:	d8c02b15 	stw	r3,172(sp)
80207180:	18000326 	beq	r3,zero,80207190 <___svfprintf_internal_r+0x6ec>
80207184:	d8c02a17 	ldw	r3,168(sp)
80207188:	18c00084 	addi	r3,r3,2
8020718c:	d8c02a15 	stw	r3,168(sp)
80207190:	90c0210c 	andi	r3,r18,132
80207194:	d8c03015 	stw	r3,192(sp)
80207198:	1801a11e 	bne	r3,zero,80207820 <___svfprintf_internal_r+0xd7c>
8020719c:	d9003117 	ldw	r4,196(sp)
802071a0:	d8c02a17 	ldw	r3,168(sp)
802071a4:	20e9c83a 	sub	r20,r4,r3
802071a8:	05019d0e 	bge	zero,r20,80207820 <___svfprintf_internal_r+0xd7c>
802071ac:	02400404 	movi	r9,16
802071b0:	d8c02017 	ldw	r3,128(sp)
802071b4:	d8801f17 	ldw	r2,124(sp)
802071b8:	4d051b0e 	bge	r9,r20,80208628 <___svfprintf_internal_r+0x1b84>
802071bc:	016008b4 	movhi	r5,32802
802071c0:	2972a384 	addi	r5,r5,-13682
802071c4:	dc403c15 	stw	r17,240(sp)
802071c8:	d9403515 	stw	r5,212(sp)
802071cc:	a023883a 	mov	r17,r20
802071d0:	482d883a 	mov	r22,r9
802071d4:	9029883a 	mov	r20,r18
802071d8:	070001c4 	movi	fp,7
802071dc:	8025883a 	mov	r18,r16
802071e0:	dc002c17 	ldw	r16,176(sp)
802071e4:	00000306 	br	802071f4 <___svfprintf_internal_r+0x750>
802071e8:	8c7ffc04 	addi	r17,r17,-16
802071ec:	42000204 	addi	r8,r8,8
802071f0:	b440130e 	bge	r22,r17,80207240 <___svfprintf_internal_r+0x79c>
802071f4:	012008b4 	movhi	r4,32802
802071f8:	18c00404 	addi	r3,r3,16
802071fc:	10800044 	addi	r2,r2,1
80207200:	2132a384 	addi	r4,r4,-13682
80207204:	41000015 	stw	r4,0(r8)
80207208:	45800115 	stw	r22,4(r8)
8020720c:	d8c02015 	stw	r3,128(sp)
80207210:	d8801f15 	stw	r2,124(sp)
80207214:	e0bff40e 	bge	fp,r2,802071e8 <__reset+0xfa1e71e8>
80207218:	d9801e04 	addi	r6,sp,120
8020721c:	800b883a 	mov	r5,r16
80207220:	9809883a 	mov	r4,r19
80207224:	02100340 	call	80210034 <__ssprint_r>
80207228:	103f031e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
8020722c:	8c7ffc04 	addi	r17,r17,-16
80207230:	d8c02017 	ldw	r3,128(sp)
80207234:	d8801f17 	ldw	r2,124(sp)
80207238:	da000404 	addi	r8,sp,16
8020723c:	b47fed16 	blt	r22,r17,802071f4 <__reset+0xfa1e71f4>
80207240:	9021883a 	mov	r16,r18
80207244:	a025883a 	mov	r18,r20
80207248:	8829883a 	mov	r20,r17
8020724c:	dc403c17 	ldw	r17,240(sp)
80207250:	d9403517 	ldw	r5,212(sp)
80207254:	a0c7883a 	add	r3,r20,r3
80207258:	10800044 	addi	r2,r2,1
8020725c:	41400015 	stw	r5,0(r8)
80207260:	45000115 	stw	r20,4(r8)
80207264:	d8c02015 	stw	r3,128(sp)
80207268:	d8801f15 	stw	r2,124(sp)
8020726c:	010001c4 	movi	r4,7
80207270:	20829f16 	blt	r4,r2,80207cf0 <___svfprintf_internal_r+0x124c>
80207274:	df002787 	ldb	fp,158(sp)
80207278:	42000204 	addi	r8,r8,8
8020727c:	e0000c26 	beq	fp,zero,802072b0 <___svfprintf_internal_r+0x80c>
80207280:	d8801f17 	ldw	r2,124(sp)
80207284:	d9002784 	addi	r4,sp,158
80207288:	18c00044 	addi	r3,r3,1
8020728c:	10800044 	addi	r2,r2,1
80207290:	41000015 	stw	r4,0(r8)
80207294:	01000044 	movi	r4,1
80207298:	41000115 	stw	r4,4(r8)
8020729c:	d8c02015 	stw	r3,128(sp)
802072a0:	d8801f15 	stw	r2,124(sp)
802072a4:	010001c4 	movi	r4,7
802072a8:	20823816 	blt	r4,r2,80207b8c <___svfprintf_internal_r+0x10e8>
802072ac:	42000204 	addi	r8,r8,8
802072b0:	d8802b17 	ldw	r2,172(sp)
802072b4:	10000c26 	beq	r2,zero,802072e8 <___svfprintf_internal_r+0x844>
802072b8:	d8801f17 	ldw	r2,124(sp)
802072bc:	d9002704 	addi	r4,sp,156
802072c0:	18c00084 	addi	r3,r3,2
802072c4:	10800044 	addi	r2,r2,1
802072c8:	41000015 	stw	r4,0(r8)
802072cc:	01000084 	movi	r4,2
802072d0:	41000115 	stw	r4,4(r8)
802072d4:	d8c02015 	stw	r3,128(sp)
802072d8:	d8801f15 	stw	r2,124(sp)
802072dc:	010001c4 	movi	r4,7
802072e0:	20823216 	blt	r4,r2,80207bac <___svfprintf_internal_r+0x1108>
802072e4:	42000204 	addi	r8,r8,8
802072e8:	d9003017 	ldw	r4,192(sp)
802072ec:	00802004 	movi	r2,128
802072f0:	20819726 	beq	r4,r2,80207950 <___svfprintf_internal_r+0xeac>
802072f4:	d9402917 	ldw	r5,164(sp)
802072f8:	d8802e17 	ldw	r2,184(sp)
802072fc:	28adc83a 	sub	r22,r5,r2
80207300:	05802f0e 	bge	zero,r22,802073c0 <___svfprintf_internal_r+0x91c>
80207304:	07000404 	movi	fp,16
80207308:	d8801f17 	ldw	r2,124(sp)
8020730c:	e583c00e 	bge	fp,r22,80208210 <___svfprintf_internal_r+0x176c>
80207310:	016008b4 	movhi	r5,32802
80207314:	29729f84 	addi	r5,r5,-13698
80207318:	dc402915 	stw	r17,164(sp)
8020731c:	d9402b15 	stw	r5,172(sp)
80207320:	b023883a 	mov	r17,r22
80207324:	050001c4 	movi	r20,7
80207328:	902d883a 	mov	r22,r18
8020732c:	8025883a 	mov	r18,r16
80207330:	dc002c17 	ldw	r16,176(sp)
80207334:	00000306 	br	80207344 <___svfprintf_internal_r+0x8a0>
80207338:	8c7ffc04 	addi	r17,r17,-16
8020733c:	42000204 	addi	r8,r8,8
80207340:	e440110e 	bge	fp,r17,80207388 <___svfprintf_internal_r+0x8e4>
80207344:	18c00404 	addi	r3,r3,16
80207348:	10800044 	addi	r2,r2,1
8020734c:	45400015 	stw	r21,0(r8)
80207350:	47000115 	stw	fp,4(r8)
80207354:	d8c02015 	stw	r3,128(sp)
80207358:	d8801f15 	stw	r2,124(sp)
8020735c:	a0bff60e 	bge	r20,r2,80207338 <__reset+0xfa1e7338>
80207360:	d9801e04 	addi	r6,sp,120
80207364:	800b883a 	mov	r5,r16
80207368:	9809883a 	mov	r4,r19
8020736c:	02100340 	call	80210034 <__ssprint_r>
80207370:	103eb11e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80207374:	8c7ffc04 	addi	r17,r17,-16
80207378:	d8c02017 	ldw	r3,128(sp)
8020737c:	d8801f17 	ldw	r2,124(sp)
80207380:	da000404 	addi	r8,sp,16
80207384:	e47fef16 	blt	fp,r17,80207344 <__reset+0xfa1e7344>
80207388:	9021883a 	mov	r16,r18
8020738c:	b025883a 	mov	r18,r22
80207390:	882d883a 	mov	r22,r17
80207394:	dc402917 	ldw	r17,164(sp)
80207398:	d9002b17 	ldw	r4,172(sp)
8020739c:	1d87883a 	add	r3,r3,r22
802073a0:	10800044 	addi	r2,r2,1
802073a4:	41000015 	stw	r4,0(r8)
802073a8:	45800115 	stw	r22,4(r8)
802073ac:	d8c02015 	stw	r3,128(sp)
802073b0:	d8801f15 	stw	r2,124(sp)
802073b4:	010001c4 	movi	r4,7
802073b8:	2081ec16 	blt	r4,r2,80207b6c <___svfprintf_internal_r+0x10c8>
802073bc:	42000204 	addi	r8,r8,8
802073c0:	9080400c 	andi	r2,r18,256
802073c4:	1001181e 	bne	r2,zero,80207828 <___svfprintf_internal_r+0xd84>
802073c8:	d9402e17 	ldw	r5,184(sp)
802073cc:	d8801f17 	ldw	r2,124(sp)
802073d0:	44000015 	stw	r16,0(r8)
802073d4:	1947883a 	add	r3,r3,r5
802073d8:	10800044 	addi	r2,r2,1
802073dc:	41400115 	stw	r5,4(r8)
802073e0:	d8c02015 	stw	r3,128(sp)
802073e4:	d8801f15 	stw	r2,124(sp)
802073e8:	010001c4 	movi	r4,7
802073ec:	2081d116 	blt	r4,r2,80207b34 <___svfprintf_internal_r+0x1090>
802073f0:	42000204 	addi	r8,r8,8
802073f4:	9480010c 	andi	r18,r18,4
802073f8:	90003226 	beq	r18,zero,802074c4 <___svfprintf_internal_r+0xa20>
802073fc:	d9403117 	ldw	r5,196(sp)
80207400:	d8802a17 	ldw	r2,168(sp)
80207404:	28a1c83a 	sub	r16,r5,r2
80207408:	04002e0e 	bge	zero,r16,802074c4 <___svfprintf_internal_r+0xa20>
8020740c:	04400404 	movi	r17,16
80207410:	d8801f17 	ldw	r2,124(sp)
80207414:	8c04b90e 	bge	r17,r16,802086fc <___svfprintf_internal_r+0x1c58>
80207418:	016008b4 	movhi	r5,32802
8020741c:	2972a384 	addi	r5,r5,-13682
80207420:	d9403515 	stw	r5,212(sp)
80207424:	048001c4 	movi	r18,7
80207428:	dd002c17 	ldw	r20,176(sp)
8020742c:	00000306 	br	8020743c <___svfprintf_internal_r+0x998>
80207430:	843ffc04 	addi	r16,r16,-16
80207434:	42000204 	addi	r8,r8,8
80207438:	8c00130e 	bge	r17,r16,80207488 <___svfprintf_internal_r+0x9e4>
8020743c:	012008b4 	movhi	r4,32802
80207440:	18c00404 	addi	r3,r3,16
80207444:	10800044 	addi	r2,r2,1
80207448:	2132a384 	addi	r4,r4,-13682
8020744c:	41000015 	stw	r4,0(r8)
80207450:	44400115 	stw	r17,4(r8)
80207454:	d8c02015 	stw	r3,128(sp)
80207458:	d8801f15 	stw	r2,124(sp)
8020745c:	90bff40e 	bge	r18,r2,80207430 <__reset+0xfa1e7430>
80207460:	d9801e04 	addi	r6,sp,120
80207464:	a00b883a 	mov	r5,r20
80207468:	9809883a 	mov	r4,r19
8020746c:	02100340 	call	80210034 <__ssprint_r>
80207470:	103e711e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80207474:	843ffc04 	addi	r16,r16,-16
80207478:	d8c02017 	ldw	r3,128(sp)
8020747c:	d8801f17 	ldw	r2,124(sp)
80207480:	da000404 	addi	r8,sp,16
80207484:	8c3fed16 	blt	r17,r16,8020743c <__reset+0xfa1e743c>
80207488:	d9403517 	ldw	r5,212(sp)
8020748c:	1c07883a 	add	r3,r3,r16
80207490:	10800044 	addi	r2,r2,1
80207494:	41400015 	stw	r5,0(r8)
80207498:	44000115 	stw	r16,4(r8)
8020749c:	d8c02015 	stw	r3,128(sp)
802074a0:	d8801f15 	stw	r2,124(sp)
802074a4:	010001c4 	movi	r4,7
802074a8:	2080060e 	bge	r4,r2,802074c4 <___svfprintf_internal_r+0xa20>
802074ac:	d9402c17 	ldw	r5,176(sp)
802074b0:	d9801e04 	addi	r6,sp,120
802074b4:	9809883a 	mov	r4,r19
802074b8:	02100340 	call	80210034 <__ssprint_r>
802074bc:	103e5e1e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
802074c0:	d8c02017 	ldw	r3,128(sp)
802074c4:	d8803117 	ldw	r2,196(sp)
802074c8:	d9002a17 	ldw	r4,168(sp)
802074cc:	1100010e 	bge	r2,r4,802074d4 <___svfprintf_internal_r+0xa30>
802074d0:	2005883a 	mov	r2,r4
802074d4:	d9402f17 	ldw	r5,188(sp)
802074d8:	288b883a 	add	r5,r5,r2
802074dc:	d9402f15 	stw	r5,188(sp)
802074e0:	18019c1e 	bne	r3,zero,80207b54 <___svfprintf_internal_r+0x10b0>
802074e4:	b8800007 	ldb	r2,0(r23)
802074e8:	d8001f15 	stw	zero,124(sp)
802074ec:	da000404 	addi	r8,sp,16
802074f0:	103d991e 	bne	r2,zero,80206b58 <__reset+0xfa1e6b58>
802074f4:	b821883a 	mov	r16,r23
802074f8:	003daf06 	br	80206bb8 <__reset+0xfa1e6bb8>
802074fc:	18c03fcc 	andi	r3,r3,255
80207500:	1805c71e 	bne	r3,zero,80208c20 <___svfprintf_internal_r+0x217c>
80207504:	94800414 	ori	r18,r18,16
80207508:	9080080c 	andi	r2,r18,32
8020750c:	10020126 	beq	r2,zero,80207d14 <___svfprintf_internal_r+0x1270>
80207510:	d8802d17 	ldw	r2,180(sp)
80207514:	d9002917 	ldw	r4,164(sp)
80207518:	d8002785 	stb	zero,158(sp)
8020751c:	10c00204 	addi	r3,r2,8
80207520:	15000017 	ldw	r20,0(r2)
80207524:	15800117 	ldw	r22,4(r2)
80207528:	20038e16 	blt	r4,zero,80208364 <___svfprintf_internal_r+0x18c0>
8020752c:	013fdfc4 	movi	r4,-129
80207530:	a584b03a 	or	r2,r20,r22
80207534:	d8c02d15 	stw	r3,180(sp)
80207538:	9124703a 	and	r18,r18,r4
8020753c:	0039883a 	mov	fp,zero
80207540:	103eb61e 	bne	r2,zero,8020701c <__reset+0xfa1e701c>
80207544:	d8802917 	ldw	r2,164(sp)
80207548:	1002c81e 	bne	r2,zero,8020806c <___svfprintf_internal_r+0x15c8>
8020754c:	d8002915 	stw	zero,164(sp)
80207550:	d8002e15 	stw	zero,184(sp)
80207554:	dc001e04 	addi	r16,sp,120
80207558:	003efa06 	br	80207144 <__reset+0xfa1e7144>
8020755c:	18c03fcc 	andi	r3,r3,255
80207560:	1805ad1e 	bne	r3,zero,80208c18 <___svfprintf_internal_r+0x2174>
80207564:	016008b4 	movhi	r5,32802
80207568:	29729304 	addi	r5,r5,-13748
8020756c:	d9403a15 	stw	r5,232(sp)
80207570:	9080080c 	andi	r2,r18,32
80207574:	10006126 	beq	r2,zero,802076fc <___svfprintf_internal_r+0xc58>
80207578:	d8802d17 	ldw	r2,180(sp)
8020757c:	15000017 	ldw	r20,0(r2)
80207580:	15800117 	ldw	r22,4(r2)
80207584:	10800204 	addi	r2,r2,8
80207588:	d8802d15 	stw	r2,180(sp)
8020758c:	9080004c 	andi	r2,r18,1
80207590:	10018e26 	beq	r2,zero,80207bcc <___svfprintf_internal_r+0x1128>
80207594:	a584b03a 	or	r2,r20,r22
80207598:	10030926 	beq	r2,zero,802081c0 <___svfprintf_internal_r+0x171c>
8020759c:	d8c02917 	ldw	r3,164(sp)
802075a0:	00800c04 	movi	r2,48
802075a4:	d8802705 	stb	r2,156(sp)
802075a8:	dc402745 	stb	r17,157(sp)
802075ac:	d8002785 	stb	zero,158(sp)
802075b0:	90800094 	ori	r2,r18,2
802075b4:	18048716 	blt	r3,zero,802087d4 <___svfprintf_internal_r+0x1d30>
802075b8:	00bfdfc4 	movi	r2,-129
802075bc:	90a4703a 	and	r18,r18,r2
802075c0:	94800094 	ori	r18,r18,2
802075c4:	0039883a 	mov	fp,zero
802075c8:	d9003a17 	ldw	r4,232(sp)
802075cc:	dc001e04 	addi	r16,sp,120
802075d0:	a08003cc 	andi	r2,r20,15
802075d4:	b006973a 	slli	r3,r22,28
802075d8:	2085883a 	add	r2,r4,r2
802075dc:	a028d13a 	srli	r20,r20,4
802075e0:	10800003 	ldbu	r2,0(r2)
802075e4:	b02cd13a 	srli	r22,r22,4
802075e8:	843fffc4 	addi	r16,r16,-1
802075ec:	1d28b03a 	or	r20,r3,r20
802075f0:	80800005 	stb	r2,0(r16)
802075f4:	a584b03a 	or	r2,r20,r22
802075f8:	103ff51e 	bne	r2,zero,802075d0 <__reset+0xfa1e75d0>
802075fc:	d8c02817 	ldw	r3,160(sp)
80207600:	1c07c83a 	sub	r3,r3,r16
80207604:	d8c02e15 	stw	r3,184(sp)
80207608:	003ece06 	br	80207144 <__reset+0xfa1e7144>
8020760c:	d8c02d17 	ldw	r3,180(sp)
80207610:	d9002d17 	ldw	r4,180(sp)
80207614:	d8002785 	stb	zero,158(sp)
80207618:	18800017 	ldw	r2,0(r3)
8020761c:	21000104 	addi	r4,r4,4
80207620:	00c00044 	movi	r3,1
80207624:	d8c02a15 	stw	r3,168(sp)
80207628:	d8801405 	stb	r2,80(sp)
8020762c:	d9002d15 	stw	r4,180(sp)
80207630:	d8c02e15 	stw	r3,184(sp)
80207634:	d8002915 	stw	zero,164(sp)
80207638:	d8003215 	stw	zero,200(sp)
8020763c:	dc001404 	addi	r16,sp,80
80207640:	0039883a 	mov	fp,zero
80207644:	003ecc06 	br	80207178 <__reset+0xfa1e7178>
80207648:	18c03fcc 	andi	r3,r3,255
8020764c:	183e9226 	beq	r3,zero,80207098 <__reset+0xfa1e7098>
80207650:	d9c02785 	stb	r7,158(sp)
80207654:	003e9006 	br	80207098 <__reset+0xfa1e7098>
80207658:	00c00044 	movi	r3,1
8020765c:	01c00ac4 	movi	r7,43
80207660:	bc400007 	ldb	r17,0(r23)
80207664:	003d6306 	br	80206bf4 <__reset+0xfa1e6bf4>
80207668:	94800814 	ori	r18,r18,32
8020766c:	bc400007 	ldb	r17,0(r23)
80207670:	003d6006 	br	80206bf4 <__reset+0xfa1e6bf4>
80207674:	d8c02d17 	ldw	r3,180(sp)
80207678:	d8002785 	stb	zero,158(sp)
8020767c:	1c000017 	ldw	r16,0(r3)
80207680:	1d000104 	addi	r20,r3,4
80207684:	80040f26 	beq	r16,zero,802086c4 <___svfprintf_internal_r+0x1c20>
80207688:	d9002917 	ldw	r4,164(sp)
8020768c:	2003dc16 	blt	r4,zero,80208600 <___svfprintf_internal_r+0x1b5c>
80207690:	200d883a 	mov	r6,r4
80207694:	000b883a 	mov	r5,zero
80207698:	8009883a 	mov	r4,r16
8020769c:	da003e15 	stw	r8,248(sp)
802076a0:	020e48c0 	call	8020e48c <memchr>
802076a4:	da003e17 	ldw	r8,248(sp)
802076a8:	10045826 	beq	r2,zero,8020880c <___svfprintf_internal_r+0x1d68>
802076ac:	1405c83a 	sub	r2,r2,r16
802076b0:	d8802e15 	stw	r2,184(sp)
802076b4:	1003d816 	blt	r2,zero,80208618 <___svfprintf_internal_r+0x1b74>
802076b8:	df002783 	ldbu	fp,158(sp)
802076bc:	d8802a15 	stw	r2,168(sp)
802076c0:	dd002d15 	stw	r20,180(sp)
802076c4:	d8002915 	stw	zero,164(sp)
802076c8:	d8003215 	stw	zero,200(sp)
802076cc:	003ea306 	br	8020715c <__reset+0xfa1e715c>
802076d0:	18c03fcc 	andi	r3,r3,255
802076d4:	183f8c26 	beq	r3,zero,80207508 <__reset+0xfa1e7508>
802076d8:	d9c02785 	stb	r7,158(sp)
802076dc:	003f8a06 	br	80207508 <__reset+0xfa1e7508>
802076e0:	18c03fcc 	andi	r3,r3,255
802076e4:	1805631e 	bne	r3,zero,80208c74 <___svfprintf_internal_r+0x21d0>
802076e8:	016008b4 	movhi	r5,32802
802076ec:	29729804 	addi	r5,r5,-13728
802076f0:	d9403a15 	stw	r5,232(sp)
802076f4:	9080080c 	andi	r2,r18,32
802076f8:	103f9f1e 	bne	r2,zero,80207578 <__reset+0xfa1e7578>
802076fc:	9080040c 	andi	r2,r18,16
80207700:	10029c26 	beq	r2,zero,80208174 <___svfprintf_internal_r+0x16d0>
80207704:	d8c02d17 	ldw	r3,180(sp)
80207708:	002d883a 	mov	r22,zero
8020770c:	1d000017 	ldw	r20,0(r3)
80207710:	18c00104 	addi	r3,r3,4
80207714:	d8c02d15 	stw	r3,180(sp)
80207718:	003f9c06 	br	8020758c <__reset+0xfa1e758c>
8020771c:	94800054 	ori	r18,r18,1
80207720:	bc400007 	ldb	r17,0(r23)
80207724:	003d3306 	br	80206bf4 <__reset+0xfa1e6bf4>
80207728:	38803fcc 	andi	r2,r7,255
8020772c:	1080201c 	xori	r2,r2,128
80207730:	10bfe004 	addi	r2,r2,-128
80207734:	1002971e 	bne	r2,zero,80208194 <___svfprintf_internal_r+0x16f0>
80207738:	00c00044 	movi	r3,1
8020773c:	01c00804 	movi	r7,32
80207740:	bc400007 	ldb	r17,0(r23)
80207744:	003d2b06 	br	80206bf4 <__reset+0xfa1e6bf4>
80207748:	18c03fcc 	andi	r3,r3,255
8020774c:	183e2326 	beq	r3,zero,80206fdc <__reset+0xfa1e6fdc>
80207750:	d9c02785 	stb	r7,158(sp)
80207754:	003e2106 	br	80206fdc <__reset+0xfa1e6fdc>
80207758:	bc400007 	ldb	r17,0(r23)
8020775c:	8a430426 	beq	r17,r9,80208370 <___svfprintf_internal_r+0x18cc>
80207760:	94800414 	ori	r18,r18,16
80207764:	003d2306 	br	80206bf4 <__reset+0xfa1e6bf4>
80207768:	18c03fcc 	andi	r3,r3,255
8020776c:	18053f1e 	bne	r3,zero,80208c6c <___svfprintf_internal_r+0x21c8>
80207770:	9080080c 	andi	r2,r18,32
80207774:	10028926 	beq	r2,zero,8020819c <___svfprintf_internal_r+0x16f8>
80207778:	d9402d17 	ldw	r5,180(sp)
8020777c:	d9002f17 	ldw	r4,188(sp)
80207780:	28800017 	ldw	r2,0(r5)
80207784:	2007d7fa 	srai	r3,r4,31
80207788:	29400104 	addi	r5,r5,4
8020778c:	d9402d15 	stw	r5,180(sp)
80207790:	11000015 	stw	r4,0(r2)
80207794:	10c00115 	stw	r3,4(r2)
80207798:	003ced06 	br	80206b50 <__reset+0xfa1e6b50>
8020779c:	94801014 	ori	r18,r18,64
802077a0:	bc400007 	ldb	r17,0(r23)
802077a4:	003d1306 	br	80206bf4 <__reset+0xfa1e6bf4>
802077a8:	012008b4 	movhi	r4,32802
802077ac:	21329804 	addi	r4,r4,-13728
802077b0:	0039883a 	mov	fp,zero
802077b4:	d9003a15 	stw	r4,232(sp)
802077b8:	04401e04 	movi	r17,120
802077bc:	003f8206 	br	802075c8 <__reset+0xfa1e75c8>
802077c0:	18c03fcc 	andi	r3,r3,255
802077c4:	1805221e 	bne	r3,zero,80208c50 <___svfprintf_internal_r+0x21ac>
802077c8:	883d9526 	beq	r17,zero,80206e20 <__reset+0xfa1e6e20>
802077cc:	00c00044 	movi	r3,1
802077d0:	d8c02a15 	stw	r3,168(sp)
802077d4:	dc401405 	stb	r17,80(sp)
802077d8:	d8002785 	stb	zero,158(sp)
802077dc:	003f9406 	br	80207630 <__reset+0xfa1e7630>
802077e0:	012008b4 	movhi	r4,32802
802077e4:	21329804 	addi	r4,r4,-13728
802077e8:	d9003a15 	stw	r4,232(sp)
802077ec:	d8c02d15 	stw	r3,180(sp)
802077f0:	1025883a 	mov	r18,r2
802077f4:	04401e04 	movi	r17,120
802077f8:	a584b03a 	or	r2,r20,r22
802077fc:	1000fa1e 	bne	r2,zero,80207be8 <___svfprintf_internal_r+0x1144>
80207800:	0039883a 	mov	fp,zero
80207804:	00800084 	movi	r2,2
80207808:	10803fcc 	andi	r2,r2,255
8020780c:	00c00044 	movi	r3,1
80207810:	10c21626 	beq	r2,r3,8020806c <___svfprintf_internal_r+0x15c8>
80207814:	00c00084 	movi	r3,2
80207818:	10fe301e 	bne	r2,r3,802070dc <__reset+0xfa1e70dc>
8020781c:	003d7606 	br	80206df8 <__reset+0xfa1e6df8>
80207820:	d8c02017 	ldw	r3,128(sp)
80207824:	003e9506 	br	8020727c <__reset+0xfa1e727c>
80207828:	00801944 	movi	r2,101
8020782c:	14407c0e 	bge	r2,r17,80207a20 <___svfprintf_internal_r+0xf7c>
80207830:	d9003617 	ldw	r4,216(sp)
80207834:	d9403717 	ldw	r5,220(sp)
80207838:	000d883a 	mov	r6,zero
8020783c:	000f883a 	mov	r7,zero
80207840:	d8c03d15 	stw	r3,244(sp)
80207844:	da003e15 	stw	r8,248(sp)
80207848:	02151b40 	call	802151b4 <__eqdf2>
8020784c:	d8c03d17 	ldw	r3,244(sp)
80207850:	da003e17 	ldw	r8,248(sp)
80207854:	1000f51e 	bne	r2,zero,80207c2c <___svfprintf_internal_r+0x1188>
80207858:	d8801f17 	ldw	r2,124(sp)
8020785c:	012008b4 	movhi	r4,32802
80207860:	21329f04 	addi	r4,r4,-13700
80207864:	18c00044 	addi	r3,r3,1
80207868:	10800044 	addi	r2,r2,1
8020786c:	41000015 	stw	r4,0(r8)
80207870:	01000044 	movi	r4,1
80207874:	41000115 	stw	r4,4(r8)
80207878:	d8c02015 	stw	r3,128(sp)
8020787c:	d8801f15 	stw	r2,124(sp)
80207880:	010001c4 	movi	r4,7
80207884:	20826616 	blt	r4,r2,80208220 <___svfprintf_internal_r+0x177c>
80207888:	42000204 	addi	r8,r8,8
8020788c:	d8802617 	ldw	r2,152(sp)
80207890:	d9403317 	ldw	r5,204(sp)
80207894:	11400216 	blt	r2,r5,802078a0 <___svfprintf_internal_r+0xdfc>
80207898:	9080004c 	andi	r2,r18,1
8020789c:	103ed526 	beq	r2,zero,802073f4 <__reset+0xfa1e73f4>
802078a0:	d8803817 	ldw	r2,224(sp)
802078a4:	d9003417 	ldw	r4,208(sp)
802078a8:	d9403817 	ldw	r5,224(sp)
802078ac:	1887883a 	add	r3,r3,r2
802078b0:	d8801f17 	ldw	r2,124(sp)
802078b4:	41000015 	stw	r4,0(r8)
802078b8:	41400115 	stw	r5,4(r8)
802078bc:	10800044 	addi	r2,r2,1
802078c0:	d8c02015 	stw	r3,128(sp)
802078c4:	d8801f15 	stw	r2,124(sp)
802078c8:	010001c4 	movi	r4,7
802078cc:	2082af16 	blt	r4,r2,8020838c <___svfprintf_internal_r+0x18e8>
802078d0:	42000204 	addi	r8,r8,8
802078d4:	d8803317 	ldw	r2,204(sp)
802078d8:	143fffc4 	addi	r16,r2,-1
802078dc:	043ec50e 	bge	zero,r16,802073f4 <__reset+0xfa1e73f4>
802078e0:	04400404 	movi	r17,16
802078e4:	d8801f17 	ldw	r2,124(sp)
802078e8:	8c00860e 	bge	r17,r16,80207b04 <___svfprintf_internal_r+0x1060>
802078ec:	016008b4 	movhi	r5,32802
802078f0:	29729f84 	addi	r5,r5,-13698
802078f4:	d9402b15 	stw	r5,172(sp)
802078f8:	058001c4 	movi	r22,7
802078fc:	dd002c17 	ldw	r20,176(sp)
80207900:	00000306 	br	80207910 <___svfprintf_internal_r+0xe6c>
80207904:	42000204 	addi	r8,r8,8
80207908:	843ffc04 	addi	r16,r16,-16
8020790c:	8c00800e 	bge	r17,r16,80207b10 <___svfprintf_internal_r+0x106c>
80207910:	18c00404 	addi	r3,r3,16
80207914:	10800044 	addi	r2,r2,1
80207918:	45400015 	stw	r21,0(r8)
8020791c:	44400115 	stw	r17,4(r8)
80207920:	d8c02015 	stw	r3,128(sp)
80207924:	d8801f15 	stw	r2,124(sp)
80207928:	b0bff60e 	bge	r22,r2,80207904 <__reset+0xfa1e7904>
8020792c:	d9801e04 	addi	r6,sp,120
80207930:	a00b883a 	mov	r5,r20
80207934:	9809883a 	mov	r4,r19
80207938:	02100340 	call	80210034 <__ssprint_r>
8020793c:	103d3e1e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80207940:	d8c02017 	ldw	r3,128(sp)
80207944:	d8801f17 	ldw	r2,124(sp)
80207948:	da000404 	addi	r8,sp,16
8020794c:	003fee06 	br	80207908 <__reset+0xfa1e7908>
80207950:	d9403117 	ldw	r5,196(sp)
80207954:	d8802a17 	ldw	r2,168(sp)
80207958:	28adc83a 	sub	r22,r5,r2
8020795c:	05be650e 	bge	zero,r22,802072f4 <__reset+0xfa1e72f4>
80207960:	07000404 	movi	fp,16
80207964:	d8801f17 	ldw	r2,124(sp)
80207968:	e583a20e 	bge	fp,r22,802087f4 <___svfprintf_internal_r+0x1d50>
8020796c:	016008b4 	movhi	r5,32802
80207970:	29729f84 	addi	r5,r5,-13698
80207974:	dc403015 	stw	r17,192(sp)
80207978:	d9402b15 	stw	r5,172(sp)
8020797c:	b023883a 	mov	r17,r22
80207980:	050001c4 	movi	r20,7
80207984:	902d883a 	mov	r22,r18
80207988:	8025883a 	mov	r18,r16
8020798c:	dc002c17 	ldw	r16,176(sp)
80207990:	00000306 	br	802079a0 <___svfprintf_internal_r+0xefc>
80207994:	8c7ffc04 	addi	r17,r17,-16
80207998:	42000204 	addi	r8,r8,8
8020799c:	e440110e 	bge	fp,r17,802079e4 <___svfprintf_internal_r+0xf40>
802079a0:	18c00404 	addi	r3,r3,16
802079a4:	10800044 	addi	r2,r2,1
802079a8:	45400015 	stw	r21,0(r8)
802079ac:	47000115 	stw	fp,4(r8)
802079b0:	d8c02015 	stw	r3,128(sp)
802079b4:	d8801f15 	stw	r2,124(sp)
802079b8:	a0bff60e 	bge	r20,r2,80207994 <__reset+0xfa1e7994>
802079bc:	d9801e04 	addi	r6,sp,120
802079c0:	800b883a 	mov	r5,r16
802079c4:	9809883a 	mov	r4,r19
802079c8:	02100340 	call	80210034 <__ssprint_r>
802079cc:	103d1a1e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
802079d0:	8c7ffc04 	addi	r17,r17,-16
802079d4:	d8c02017 	ldw	r3,128(sp)
802079d8:	d8801f17 	ldw	r2,124(sp)
802079dc:	da000404 	addi	r8,sp,16
802079e0:	e47fef16 	blt	fp,r17,802079a0 <__reset+0xfa1e79a0>
802079e4:	9021883a 	mov	r16,r18
802079e8:	b025883a 	mov	r18,r22
802079ec:	882d883a 	mov	r22,r17
802079f0:	dc403017 	ldw	r17,192(sp)
802079f4:	d9002b17 	ldw	r4,172(sp)
802079f8:	1d87883a 	add	r3,r3,r22
802079fc:	10800044 	addi	r2,r2,1
80207a00:	41000015 	stw	r4,0(r8)
80207a04:	45800115 	stw	r22,4(r8)
80207a08:	d8c02015 	stw	r3,128(sp)
80207a0c:	d8801f15 	stw	r2,124(sp)
80207a10:	010001c4 	movi	r4,7
80207a14:	20819a16 	blt	r4,r2,80208080 <___svfprintf_internal_r+0x15dc>
80207a18:	42000204 	addi	r8,r8,8
80207a1c:	003e3506 	br	802072f4 <__reset+0xfa1e72f4>
80207a20:	d9403317 	ldw	r5,204(sp)
80207a24:	00800044 	movi	r2,1
80207a28:	18c00044 	addi	r3,r3,1
80207a2c:	1141710e 	bge	r2,r5,80207ff4 <___svfprintf_internal_r+0x1550>
80207a30:	dc401f17 	ldw	r17,124(sp)
80207a34:	00800044 	movi	r2,1
80207a38:	40800115 	stw	r2,4(r8)
80207a3c:	8c400044 	addi	r17,r17,1
80207a40:	44000015 	stw	r16,0(r8)
80207a44:	d8c02015 	stw	r3,128(sp)
80207a48:	dc401f15 	stw	r17,124(sp)
80207a4c:	008001c4 	movi	r2,7
80207a50:	14417416 	blt	r2,r17,80208024 <___svfprintf_internal_r+0x1580>
80207a54:	42000204 	addi	r8,r8,8
80207a58:	d8803817 	ldw	r2,224(sp)
80207a5c:	d9003417 	ldw	r4,208(sp)
80207a60:	8c400044 	addi	r17,r17,1
80207a64:	10c7883a 	add	r3,r2,r3
80207a68:	40800115 	stw	r2,4(r8)
80207a6c:	41000015 	stw	r4,0(r8)
80207a70:	d8c02015 	stw	r3,128(sp)
80207a74:	dc401f15 	stw	r17,124(sp)
80207a78:	008001c4 	movi	r2,7
80207a7c:	14417216 	blt	r2,r17,80208048 <___svfprintf_internal_r+0x15a4>
80207a80:	45800204 	addi	r22,r8,8
80207a84:	d9003617 	ldw	r4,216(sp)
80207a88:	d9403717 	ldw	r5,220(sp)
80207a8c:	000d883a 	mov	r6,zero
80207a90:	000f883a 	mov	r7,zero
80207a94:	d8c03d15 	stw	r3,244(sp)
80207a98:	02151b40 	call	802151b4 <__eqdf2>
80207a9c:	d8c03d17 	ldw	r3,244(sp)
80207aa0:	1000b326 	beq	r2,zero,80207d70 <___svfprintf_internal_r+0x12cc>
80207aa4:	d9403317 	ldw	r5,204(sp)
80207aa8:	84000044 	addi	r16,r16,1
80207aac:	8c400044 	addi	r17,r17,1
80207ab0:	28bfffc4 	addi	r2,r5,-1
80207ab4:	1887883a 	add	r3,r3,r2
80207ab8:	b0800115 	stw	r2,4(r22)
80207abc:	b4000015 	stw	r16,0(r22)
80207ac0:	d8c02015 	stw	r3,128(sp)
80207ac4:	dc401f15 	stw	r17,124(sp)
80207ac8:	008001c4 	movi	r2,7
80207acc:	1440d216 	blt	r2,r17,80207e18 <___svfprintf_internal_r+0x1374>
80207ad0:	b5800204 	addi	r22,r22,8
80207ad4:	d9003b17 	ldw	r4,236(sp)
80207ad8:	df0022c4 	addi	fp,sp,139
80207adc:	8c400044 	addi	r17,r17,1
80207ae0:	20c7883a 	add	r3,r4,r3
80207ae4:	b7000015 	stw	fp,0(r22)
80207ae8:	b1000115 	stw	r4,4(r22)
80207aec:	d8c02015 	stw	r3,128(sp)
80207af0:	dc401f15 	stw	r17,124(sp)
80207af4:	008001c4 	movi	r2,7
80207af8:	14400e16 	blt	r2,r17,80207b34 <___svfprintf_internal_r+0x1090>
80207afc:	b2000204 	addi	r8,r22,8
80207b00:	003e3c06 	br	802073f4 <__reset+0xfa1e73f4>
80207b04:	012008b4 	movhi	r4,32802
80207b08:	21329f84 	addi	r4,r4,-13698
80207b0c:	d9002b15 	stw	r4,172(sp)
80207b10:	d9002b17 	ldw	r4,172(sp)
80207b14:	1c07883a 	add	r3,r3,r16
80207b18:	44000115 	stw	r16,4(r8)
80207b1c:	41000015 	stw	r4,0(r8)
80207b20:	10800044 	addi	r2,r2,1
80207b24:	d8c02015 	stw	r3,128(sp)
80207b28:	d8801f15 	stw	r2,124(sp)
80207b2c:	010001c4 	movi	r4,7
80207b30:	20be2f0e 	bge	r4,r2,802073f0 <__reset+0xfa1e73f0>
80207b34:	d9402c17 	ldw	r5,176(sp)
80207b38:	d9801e04 	addi	r6,sp,120
80207b3c:	9809883a 	mov	r4,r19
80207b40:	02100340 	call	80210034 <__ssprint_r>
80207b44:	103cbc1e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80207b48:	d8c02017 	ldw	r3,128(sp)
80207b4c:	da000404 	addi	r8,sp,16
80207b50:	003e2806 	br	802073f4 <__reset+0xfa1e73f4>
80207b54:	d9402c17 	ldw	r5,176(sp)
80207b58:	d9801e04 	addi	r6,sp,120
80207b5c:	9809883a 	mov	r4,r19
80207b60:	02100340 	call	80210034 <__ssprint_r>
80207b64:	103e5f26 	beq	r2,zero,802074e4 <__reset+0xfa1e74e4>
80207b68:	003cb306 	br	80206e38 <__reset+0xfa1e6e38>
80207b6c:	d9402c17 	ldw	r5,176(sp)
80207b70:	d9801e04 	addi	r6,sp,120
80207b74:	9809883a 	mov	r4,r19
80207b78:	02100340 	call	80210034 <__ssprint_r>
80207b7c:	103cae1e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80207b80:	d8c02017 	ldw	r3,128(sp)
80207b84:	da000404 	addi	r8,sp,16
80207b88:	003e0d06 	br	802073c0 <__reset+0xfa1e73c0>
80207b8c:	d9402c17 	ldw	r5,176(sp)
80207b90:	d9801e04 	addi	r6,sp,120
80207b94:	9809883a 	mov	r4,r19
80207b98:	02100340 	call	80210034 <__ssprint_r>
80207b9c:	103ca61e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80207ba0:	d8c02017 	ldw	r3,128(sp)
80207ba4:	da000404 	addi	r8,sp,16
80207ba8:	003dc106 	br	802072b0 <__reset+0xfa1e72b0>
80207bac:	d9402c17 	ldw	r5,176(sp)
80207bb0:	d9801e04 	addi	r6,sp,120
80207bb4:	9809883a 	mov	r4,r19
80207bb8:	02100340 	call	80210034 <__ssprint_r>
80207bbc:	103c9e1e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80207bc0:	d8c02017 	ldw	r3,128(sp)
80207bc4:	da000404 	addi	r8,sp,16
80207bc8:	003dc706 	br	802072e8 <__reset+0xfa1e72e8>
80207bcc:	d8802917 	ldw	r2,164(sp)
80207bd0:	d8002785 	stb	zero,158(sp)
80207bd4:	103f0816 	blt	r2,zero,802077f8 <__reset+0xfa1e77f8>
80207bd8:	00ffdfc4 	movi	r3,-129
80207bdc:	a584b03a 	or	r2,r20,r22
80207be0:	90e4703a 	and	r18,r18,r3
80207be4:	103c8126 	beq	r2,zero,80206dec <__reset+0xfa1e6dec>
80207be8:	0039883a 	mov	fp,zero
80207bec:	003e7606 	br	802075c8 <__reset+0xfa1e75c8>
80207bf0:	9080040c 	andi	r2,r18,16
80207bf4:	10013d26 	beq	r2,zero,802080ec <___svfprintf_internal_r+0x1648>
80207bf8:	d9002d17 	ldw	r4,180(sp)
80207bfc:	d9402917 	ldw	r5,164(sp)
80207c00:	d8002785 	stb	zero,158(sp)
80207c04:	20800104 	addi	r2,r4,4
80207c08:	25000017 	ldw	r20,0(r4)
80207c0c:	002d883a 	mov	r22,zero
80207c10:	28013f16 	blt	r5,zero,80208110 <___svfprintf_internal_r+0x166c>
80207c14:	00ffdfc4 	movi	r3,-129
80207c18:	d8802d15 	stw	r2,180(sp)
80207c1c:	90e4703a 	and	r18,r18,r3
80207c20:	a03d2b26 	beq	r20,zero,802070d0 <__reset+0xfa1e70d0>
80207c24:	0039883a 	mov	fp,zero
80207c28:	003d2e06 	br	802070e4 <__reset+0xfa1e70e4>
80207c2c:	dc402617 	ldw	r17,152(sp)
80207c30:	0441830e 	bge	zero,r17,80208240 <___svfprintf_internal_r+0x179c>
80207c34:	dc403217 	ldw	r17,200(sp)
80207c38:	d8803317 	ldw	r2,204(sp)
80207c3c:	1440010e 	bge	r2,r17,80207c44 <___svfprintf_internal_r+0x11a0>
80207c40:	1023883a 	mov	r17,r2
80207c44:	04400a0e 	bge	zero,r17,80207c70 <___svfprintf_internal_r+0x11cc>
80207c48:	d8801f17 	ldw	r2,124(sp)
80207c4c:	1c47883a 	add	r3,r3,r17
80207c50:	44000015 	stw	r16,0(r8)
80207c54:	10800044 	addi	r2,r2,1
80207c58:	44400115 	stw	r17,4(r8)
80207c5c:	d8c02015 	stw	r3,128(sp)
80207c60:	d8801f15 	stw	r2,124(sp)
80207c64:	010001c4 	movi	r4,7
80207c68:	20827516 	blt	r4,r2,80208640 <___svfprintf_internal_r+0x1b9c>
80207c6c:	42000204 	addi	r8,r8,8
80207c70:	88027b16 	blt	r17,zero,80208660 <___svfprintf_internal_r+0x1bbc>
80207c74:	d9003217 	ldw	r4,200(sp)
80207c78:	2463c83a 	sub	r17,r4,r17
80207c7c:	0440990e 	bge	zero,r17,80207ee4 <___svfprintf_internal_r+0x1440>
80207c80:	05800404 	movi	r22,16
80207c84:	d8801f17 	ldw	r2,124(sp)
80207c88:	b441530e 	bge	r22,r17,802081d8 <___svfprintf_internal_r+0x1734>
80207c8c:	012008b4 	movhi	r4,32802
80207c90:	21329f84 	addi	r4,r4,-13698
80207c94:	d9002b15 	stw	r4,172(sp)
80207c98:	070001c4 	movi	fp,7
80207c9c:	dd002c17 	ldw	r20,176(sp)
80207ca0:	00000306 	br	80207cb0 <___svfprintf_internal_r+0x120c>
80207ca4:	42000204 	addi	r8,r8,8
80207ca8:	8c7ffc04 	addi	r17,r17,-16
80207cac:	b4414d0e 	bge	r22,r17,802081e4 <___svfprintf_internal_r+0x1740>
80207cb0:	18c00404 	addi	r3,r3,16
80207cb4:	10800044 	addi	r2,r2,1
80207cb8:	45400015 	stw	r21,0(r8)
80207cbc:	45800115 	stw	r22,4(r8)
80207cc0:	d8c02015 	stw	r3,128(sp)
80207cc4:	d8801f15 	stw	r2,124(sp)
80207cc8:	e0bff60e 	bge	fp,r2,80207ca4 <__reset+0xfa1e7ca4>
80207ccc:	d9801e04 	addi	r6,sp,120
80207cd0:	a00b883a 	mov	r5,r20
80207cd4:	9809883a 	mov	r4,r19
80207cd8:	02100340 	call	80210034 <__ssprint_r>
80207cdc:	103c561e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80207ce0:	d8c02017 	ldw	r3,128(sp)
80207ce4:	d8801f17 	ldw	r2,124(sp)
80207ce8:	da000404 	addi	r8,sp,16
80207cec:	003fee06 	br	80207ca8 <__reset+0xfa1e7ca8>
80207cf0:	d9402c17 	ldw	r5,176(sp)
80207cf4:	d9801e04 	addi	r6,sp,120
80207cf8:	9809883a 	mov	r4,r19
80207cfc:	02100340 	call	80210034 <__ssprint_r>
80207d00:	103c4d1e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80207d04:	d8c02017 	ldw	r3,128(sp)
80207d08:	df002787 	ldb	fp,158(sp)
80207d0c:	da000404 	addi	r8,sp,16
80207d10:	003d5a06 	br	8020727c <__reset+0xfa1e727c>
80207d14:	9080040c 	andi	r2,r18,16
80207d18:	10005c26 	beq	r2,zero,80207e8c <___svfprintf_internal_r+0x13e8>
80207d1c:	d9402d17 	ldw	r5,180(sp)
80207d20:	d8c02917 	ldw	r3,164(sp)
80207d24:	d8002785 	stb	zero,158(sp)
80207d28:	28800104 	addi	r2,r5,4
80207d2c:	2d000017 	ldw	r20,0(r5)
80207d30:	002d883a 	mov	r22,zero
80207d34:	18005e16 	blt	r3,zero,80207eb0 <___svfprintf_internal_r+0x140c>
80207d38:	00ffdfc4 	movi	r3,-129
80207d3c:	d8802d15 	stw	r2,180(sp)
80207d40:	90e4703a 	and	r18,r18,r3
80207d44:	0039883a 	mov	fp,zero
80207d48:	a03dfe26 	beq	r20,zero,80207544 <__reset+0xfa1e7544>
80207d4c:	00800244 	movi	r2,9
80207d50:	153cb336 	bltu	r2,r20,80207020 <__reset+0xfa1e7020>
80207d54:	a5000c04 	addi	r20,r20,48
80207d58:	dc001dc4 	addi	r16,sp,119
80207d5c:	dd001dc5 	stb	r20,119(sp)
80207d60:	d8c02817 	ldw	r3,160(sp)
80207d64:	1c07c83a 	sub	r3,r3,r16
80207d68:	d8c02e15 	stw	r3,184(sp)
80207d6c:	003cf506 	br	80207144 <__reset+0xfa1e7144>
80207d70:	d8803317 	ldw	r2,204(sp)
80207d74:	143fffc4 	addi	r16,r2,-1
80207d78:	043f560e 	bge	zero,r16,80207ad4 <__reset+0xfa1e7ad4>
80207d7c:	07000404 	movi	fp,16
80207d80:	e403530e 	bge	fp,r16,80208ad0 <___svfprintf_internal_r+0x202c>
80207d84:	016008b4 	movhi	r5,32802
80207d88:	29729f84 	addi	r5,r5,-13698
80207d8c:	d9402b15 	stw	r5,172(sp)
80207d90:	01c001c4 	movi	r7,7
80207d94:	dd002c17 	ldw	r20,176(sp)
80207d98:	00000306 	br	80207da8 <___svfprintf_internal_r+0x1304>
80207d9c:	843ffc04 	addi	r16,r16,-16
80207da0:	b5800204 	addi	r22,r22,8
80207da4:	e400130e 	bge	fp,r16,80207df4 <___svfprintf_internal_r+0x1350>
80207da8:	18c00404 	addi	r3,r3,16
80207dac:	8c400044 	addi	r17,r17,1
80207db0:	b5400015 	stw	r21,0(r22)
80207db4:	b7000115 	stw	fp,4(r22)
80207db8:	d8c02015 	stw	r3,128(sp)
80207dbc:	dc401f15 	stw	r17,124(sp)
80207dc0:	3c7ff60e 	bge	r7,r17,80207d9c <__reset+0xfa1e7d9c>
80207dc4:	d9801e04 	addi	r6,sp,120
80207dc8:	a00b883a 	mov	r5,r20
80207dcc:	9809883a 	mov	r4,r19
80207dd0:	d9c03d15 	stw	r7,244(sp)
80207dd4:	02100340 	call	80210034 <__ssprint_r>
80207dd8:	d9c03d17 	ldw	r7,244(sp)
80207ddc:	103c161e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80207de0:	843ffc04 	addi	r16,r16,-16
80207de4:	d8c02017 	ldw	r3,128(sp)
80207de8:	dc401f17 	ldw	r17,124(sp)
80207dec:	dd800404 	addi	r22,sp,16
80207df0:	e43fed16 	blt	fp,r16,80207da8 <__reset+0xfa1e7da8>
80207df4:	d8802b17 	ldw	r2,172(sp)
80207df8:	1c07883a 	add	r3,r3,r16
80207dfc:	8c400044 	addi	r17,r17,1
80207e00:	b0800015 	stw	r2,0(r22)
80207e04:	b4000115 	stw	r16,4(r22)
80207e08:	d8c02015 	stw	r3,128(sp)
80207e0c:	dc401f15 	stw	r17,124(sp)
80207e10:	008001c4 	movi	r2,7
80207e14:	147f2e0e 	bge	r2,r17,80207ad0 <__reset+0xfa1e7ad0>
80207e18:	d9402c17 	ldw	r5,176(sp)
80207e1c:	d9801e04 	addi	r6,sp,120
80207e20:	9809883a 	mov	r4,r19
80207e24:	02100340 	call	80210034 <__ssprint_r>
80207e28:	103c031e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80207e2c:	d8c02017 	ldw	r3,128(sp)
80207e30:	dc401f17 	ldw	r17,124(sp)
80207e34:	dd800404 	addi	r22,sp,16
80207e38:	003f2606 	br	80207ad4 <__reset+0xfa1e7ad4>
80207e3c:	9080040c 	andi	r2,r18,16
80207e40:	1000c326 	beq	r2,zero,80208150 <___svfprintf_internal_r+0x16ac>
80207e44:	d8802d17 	ldw	r2,180(sp)
80207e48:	15000017 	ldw	r20,0(r2)
80207e4c:	10800104 	addi	r2,r2,4
80207e50:	d8802d15 	stw	r2,180(sp)
80207e54:	a02dd7fa 	srai	r22,r20,31
80207e58:	b005883a 	mov	r2,r22
80207e5c:	103c680e 	bge	r2,zero,80207000 <__reset+0xfa1e7000>
80207e60:	0529c83a 	sub	r20,zero,r20
80207e64:	a004c03a 	cmpne	r2,r20,zero
80207e68:	05adc83a 	sub	r22,zero,r22
80207e6c:	b0adc83a 	sub	r22,r22,r2
80207e70:	d8802917 	ldw	r2,164(sp)
80207e74:	07000b44 	movi	fp,45
80207e78:	df002785 	stb	fp,158(sp)
80207e7c:	10022e16 	blt	r2,zero,80208738 <___svfprintf_internal_r+0x1c94>
80207e80:	00bfdfc4 	movi	r2,-129
80207e84:	90a4703a 	and	r18,r18,r2
80207e88:	003c6406 	br	8020701c <__reset+0xfa1e701c>
80207e8c:	9080100c 	andi	r2,r18,64
80207e90:	d8002785 	stb	zero,158(sp)
80207e94:	10012526 	beq	r2,zero,8020832c <___svfprintf_internal_r+0x1888>
80207e98:	d9002d17 	ldw	r4,180(sp)
80207e9c:	d9402917 	ldw	r5,164(sp)
80207ea0:	002d883a 	mov	r22,zero
80207ea4:	20800104 	addi	r2,r4,4
80207ea8:	2500000b 	ldhu	r20,0(r4)
80207eac:	283fa20e 	bge	r5,zero,80207d38 <__reset+0xfa1e7d38>
80207eb0:	d8802d15 	stw	r2,180(sp)
80207eb4:	0039883a 	mov	fp,zero
80207eb8:	a584b03a 	or	r2,r20,r22
80207ebc:	103c571e 	bne	r2,zero,8020701c <__reset+0xfa1e701c>
80207ec0:	00800044 	movi	r2,1
80207ec4:	003e5006 	br	80207808 <__reset+0xfa1e7808>
80207ec8:	d9402c17 	ldw	r5,176(sp)
80207ecc:	d9801e04 	addi	r6,sp,120
80207ed0:	9809883a 	mov	r4,r19
80207ed4:	02100340 	call	80210034 <__ssprint_r>
80207ed8:	103bd71e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80207edc:	d8c02017 	ldw	r3,128(sp)
80207ee0:	da000404 	addi	r8,sp,16
80207ee4:	d9003217 	ldw	r4,200(sp)
80207ee8:	d8802617 	ldw	r2,152(sp)
80207eec:	d9403317 	ldw	r5,204(sp)
80207ef0:	8123883a 	add	r17,r16,r4
80207ef4:	11400216 	blt	r2,r5,80207f00 <___svfprintf_internal_r+0x145c>
80207ef8:	9100004c 	andi	r4,r18,1
80207efc:	20000d26 	beq	r4,zero,80207f34 <___svfprintf_internal_r+0x1490>
80207f00:	d9003817 	ldw	r4,224(sp)
80207f04:	d9403417 	ldw	r5,208(sp)
80207f08:	1907883a 	add	r3,r3,r4
80207f0c:	d9001f17 	ldw	r4,124(sp)
80207f10:	41400015 	stw	r5,0(r8)
80207f14:	d9403817 	ldw	r5,224(sp)
80207f18:	21000044 	addi	r4,r4,1
80207f1c:	d8c02015 	stw	r3,128(sp)
80207f20:	41400115 	stw	r5,4(r8)
80207f24:	d9001f15 	stw	r4,124(sp)
80207f28:	014001c4 	movi	r5,7
80207f2c:	2901dc16 	blt	r5,r4,802086a0 <___svfprintf_internal_r+0x1bfc>
80207f30:	42000204 	addi	r8,r8,8
80207f34:	d9003317 	ldw	r4,204(sp)
80207f38:	8121883a 	add	r16,r16,r4
80207f3c:	2085c83a 	sub	r2,r4,r2
80207f40:	8461c83a 	sub	r16,r16,r17
80207f44:	1400010e 	bge	r2,r16,80207f4c <___svfprintf_internal_r+0x14a8>
80207f48:	1021883a 	mov	r16,r2
80207f4c:	04000a0e 	bge	zero,r16,80207f78 <___svfprintf_internal_r+0x14d4>
80207f50:	d9001f17 	ldw	r4,124(sp)
80207f54:	1c07883a 	add	r3,r3,r16
80207f58:	44400015 	stw	r17,0(r8)
80207f5c:	21000044 	addi	r4,r4,1
80207f60:	44000115 	stw	r16,4(r8)
80207f64:	d8c02015 	stw	r3,128(sp)
80207f68:	d9001f15 	stw	r4,124(sp)
80207f6c:	014001c4 	movi	r5,7
80207f70:	2901e616 	blt	r5,r4,8020870c <___svfprintf_internal_r+0x1c68>
80207f74:	42000204 	addi	r8,r8,8
80207f78:	8001f616 	blt	r16,zero,80208754 <___svfprintf_internal_r+0x1cb0>
80207f7c:	1421c83a 	sub	r16,r2,r16
80207f80:	043d1c0e 	bge	zero,r16,802073f4 <__reset+0xfa1e73f4>
80207f84:	04400404 	movi	r17,16
80207f88:	d8801f17 	ldw	r2,124(sp)
80207f8c:	8c3edd0e 	bge	r17,r16,80207b04 <__reset+0xfa1e7b04>
80207f90:	016008b4 	movhi	r5,32802
80207f94:	29729f84 	addi	r5,r5,-13698
80207f98:	d9402b15 	stw	r5,172(sp)
80207f9c:	058001c4 	movi	r22,7
80207fa0:	dd002c17 	ldw	r20,176(sp)
80207fa4:	00000306 	br	80207fb4 <___svfprintf_internal_r+0x1510>
80207fa8:	42000204 	addi	r8,r8,8
80207fac:	843ffc04 	addi	r16,r16,-16
80207fb0:	8c3ed70e 	bge	r17,r16,80207b10 <__reset+0xfa1e7b10>
80207fb4:	18c00404 	addi	r3,r3,16
80207fb8:	10800044 	addi	r2,r2,1
80207fbc:	45400015 	stw	r21,0(r8)
80207fc0:	44400115 	stw	r17,4(r8)
80207fc4:	d8c02015 	stw	r3,128(sp)
80207fc8:	d8801f15 	stw	r2,124(sp)
80207fcc:	b0bff60e 	bge	r22,r2,80207fa8 <__reset+0xfa1e7fa8>
80207fd0:	d9801e04 	addi	r6,sp,120
80207fd4:	a00b883a 	mov	r5,r20
80207fd8:	9809883a 	mov	r4,r19
80207fdc:	02100340 	call	80210034 <__ssprint_r>
80207fe0:	103b951e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80207fe4:	d8c02017 	ldw	r3,128(sp)
80207fe8:	d8801f17 	ldw	r2,124(sp)
80207fec:	da000404 	addi	r8,sp,16
80207ff0:	003fee06 	br	80207fac <__reset+0xfa1e7fac>
80207ff4:	9088703a 	and	r4,r18,r2
80207ff8:	203e8d1e 	bne	r4,zero,80207a30 <__reset+0xfa1e7a30>
80207ffc:	dc401f17 	ldw	r17,124(sp)
80208000:	40800115 	stw	r2,4(r8)
80208004:	44000015 	stw	r16,0(r8)
80208008:	8c400044 	addi	r17,r17,1
8020800c:	d8c02015 	stw	r3,128(sp)
80208010:	dc401f15 	stw	r17,124(sp)
80208014:	008001c4 	movi	r2,7
80208018:	147f7f16 	blt	r2,r17,80207e18 <__reset+0xfa1e7e18>
8020801c:	45800204 	addi	r22,r8,8
80208020:	003eac06 	br	80207ad4 <__reset+0xfa1e7ad4>
80208024:	d9402c17 	ldw	r5,176(sp)
80208028:	d9801e04 	addi	r6,sp,120
8020802c:	9809883a 	mov	r4,r19
80208030:	02100340 	call	80210034 <__ssprint_r>
80208034:	103b801e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80208038:	d8c02017 	ldw	r3,128(sp)
8020803c:	dc401f17 	ldw	r17,124(sp)
80208040:	da000404 	addi	r8,sp,16
80208044:	003e8406 	br	80207a58 <__reset+0xfa1e7a58>
80208048:	d9402c17 	ldw	r5,176(sp)
8020804c:	d9801e04 	addi	r6,sp,120
80208050:	9809883a 	mov	r4,r19
80208054:	02100340 	call	80210034 <__ssprint_r>
80208058:	103b771e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
8020805c:	d8c02017 	ldw	r3,128(sp)
80208060:	dc401f17 	ldw	r17,124(sp)
80208064:	dd800404 	addi	r22,sp,16
80208068:	003e8606 	br	80207a84 <__reset+0xfa1e7a84>
8020806c:	0029883a 	mov	r20,zero
80208070:	a5000c04 	addi	r20,r20,48
80208074:	dc001dc4 	addi	r16,sp,119
80208078:	dd001dc5 	stb	r20,119(sp)
8020807c:	003f3806 	br	80207d60 <__reset+0xfa1e7d60>
80208080:	d9402c17 	ldw	r5,176(sp)
80208084:	d9801e04 	addi	r6,sp,120
80208088:	9809883a 	mov	r4,r19
8020808c:	02100340 	call	80210034 <__ssprint_r>
80208090:	103b691e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80208094:	d8c02017 	ldw	r3,128(sp)
80208098:	da000404 	addi	r8,sp,16
8020809c:	003c9506 	br	802072f4 <__reset+0xfa1e72f4>
802080a0:	d9003617 	ldw	r4,216(sp)
802080a4:	d9403717 	ldw	r5,220(sp)
802080a8:	da003e15 	stw	r8,248(sp)
802080ac:	020fd540 	call	8020fd54 <__fpclassifyd>
802080b0:	da003e17 	ldw	r8,248(sp)
802080b4:	1000bd1e 	bne	r2,zero,802083ac <___svfprintf_internal_r+0x1908>
802080b8:	008011c4 	movi	r2,71
802080bc:	14411e0e 	bge	r2,r17,80208538 <___svfprintf_internal_r+0x1a94>
802080c0:	042008b4 	movhi	r16,32802
802080c4:	84329204 	addi	r16,r16,-13752
802080c8:	00c000c4 	movi	r3,3
802080cc:	00bfdfc4 	movi	r2,-129
802080d0:	d8c02a15 	stw	r3,168(sp)
802080d4:	90a4703a 	and	r18,r18,r2
802080d8:	df002783 	ldbu	fp,158(sp)
802080dc:	d8c02e15 	stw	r3,184(sp)
802080e0:	d8002915 	stw	zero,164(sp)
802080e4:	d8003215 	stw	zero,200(sp)
802080e8:	003c1c06 	br	8020715c <__reset+0xfa1e715c>
802080ec:	9080100c 	andi	r2,r18,64
802080f0:	d8002785 	stb	zero,158(sp)
802080f4:	10009426 	beq	r2,zero,80208348 <___svfprintf_internal_r+0x18a4>
802080f8:	d8c02d17 	ldw	r3,180(sp)
802080fc:	d9002917 	ldw	r4,164(sp)
80208100:	002d883a 	mov	r22,zero
80208104:	18800104 	addi	r2,r3,4
80208108:	1d00000b 	ldhu	r20,0(r3)
8020810c:	203ec10e 	bge	r4,zero,80207c14 <__reset+0xfa1e7c14>
80208110:	a586b03a 	or	r3,r20,r22
80208114:	d8802d15 	stw	r2,180(sp)
80208118:	183ec21e 	bne	r3,zero,80207c24 <__reset+0xfa1e7c24>
8020811c:	0039883a 	mov	fp,zero
80208120:	0005883a 	mov	r2,zero
80208124:	003db806 	br	80207808 <__reset+0xfa1e7808>
80208128:	d8802d17 	ldw	r2,180(sp)
8020812c:	d8c02d17 	ldw	r3,180(sp)
80208130:	d9002d17 	ldw	r4,180(sp)
80208134:	10800017 	ldw	r2,0(r2)
80208138:	18c00117 	ldw	r3,4(r3)
8020813c:	21000204 	addi	r4,r4,8
80208140:	d8803615 	stw	r2,216(sp)
80208144:	d8c03715 	stw	r3,220(sp)
80208148:	d9002d15 	stw	r4,180(sp)
8020814c:	003b8206 	br	80206f58 <__reset+0xfa1e6f58>
80208150:	9080100c 	andi	r2,r18,64
80208154:	10010726 	beq	r2,zero,80208574 <___svfprintf_internal_r+0x1ad0>
80208158:	d8c02d17 	ldw	r3,180(sp)
8020815c:	1d00000f 	ldh	r20,0(r3)
80208160:	18c00104 	addi	r3,r3,4
80208164:	d8c02d15 	stw	r3,180(sp)
80208168:	a02dd7fa 	srai	r22,r20,31
8020816c:	b005883a 	mov	r2,r22
80208170:	003ba206 	br	80206ffc <__reset+0xfa1e6ffc>
80208174:	9080100c 	andi	r2,r18,64
80208178:	10010526 	beq	r2,zero,80208590 <___svfprintf_internal_r+0x1aec>
8020817c:	d9002d17 	ldw	r4,180(sp)
80208180:	002d883a 	mov	r22,zero
80208184:	2500000b 	ldhu	r20,0(r4)
80208188:	21000104 	addi	r4,r4,4
8020818c:	d9002d15 	stw	r4,180(sp)
80208190:	003cfe06 	br	8020758c <__reset+0xfa1e758c>
80208194:	bc400007 	ldb	r17,0(r23)
80208198:	003a9606 	br	80206bf4 <__reset+0xfa1e6bf4>
8020819c:	9080040c 	andi	r2,r18,16
802081a0:	10010126 	beq	r2,zero,802085a8 <___svfprintf_internal_r+0x1b04>
802081a4:	d9402d17 	ldw	r5,180(sp)
802081a8:	d8c02f17 	ldw	r3,188(sp)
802081ac:	28800017 	ldw	r2,0(r5)
802081b0:	29400104 	addi	r5,r5,4
802081b4:	d9402d15 	stw	r5,180(sp)
802081b8:	10c00015 	stw	r3,0(r2)
802081bc:	003a6406 	br	80206b50 <__reset+0xfa1e6b50>
802081c0:	d9002917 	ldw	r4,164(sp)
802081c4:	d8002785 	stb	zero,158(sp)
802081c8:	203d8d16 	blt	r4,zero,80207800 <__reset+0xfa1e7800>
802081cc:	00bfdfc4 	movi	r2,-129
802081d0:	90a4703a 	and	r18,r18,r2
802081d4:	003b0506 	br	80206dec <__reset+0xfa1e6dec>
802081d8:	016008b4 	movhi	r5,32802
802081dc:	29729f84 	addi	r5,r5,-13698
802081e0:	d9402b15 	stw	r5,172(sp)
802081e4:	d9402b17 	ldw	r5,172(sp)
802081e8:	1c47883a 	add	r3,r3,r17
802081ec:	10800044 	addi	r2,r2,1
802081f0:	41400015 	stw	r5,0(r8)
802081f4:	44400115 	stw	r17,4(r8)
802081f8:	d8c02015 	stw	r3,128(sp)
802081fc:	d8801f15 	stw	r2,124(sp)
80208200:	010001c4 	movi	r4,7
80208204:	20bf3016 	blt	r4,r2,80207ec8 <__reset+0xfa1e7ec8>
80208208:	42000204 	addi	r8,r8,8
8020820c:	003f3506 	br	80207ee4 <__reset+0xfa1e7ee4>
80208210:	012008b4 	movhi	r4,32802
80208214:	21329f84 	addi	r4,r4,-13698
80208218:	d9002b15 	stw	r4,172(sp)
8020821c:	003c5e06 	br	80207398 <__reset+0xfa1e7398>
80208220:	d9402c17 	ldw	r5,176(sp)
80208224:	d9801e04 	addi	r6,sp,120
80208228:	9809883a 	mov	r4,r19
8020822c:	02100340 	call	80210034 <__ssprint_r>
80208230:	103b011e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80208234:	d8c02017 	ldw	r3,128(sp)
80208238:	da000404 	addi	r8,sp,16
8020823c:	003d9306 	br	8020788c <__reset+0xfa1e788c>
80208240:	d8801f17 	ldw	r2,124(sp)
80208244:	016008b4 	movhi	r5,32802
80208248:	01000044 	movi	r4,1
8020824c:	18c00044 	addi	r3,r3,1
80208250:	10800044 	addi	r2,r2,1
80208254:	29729f04 	addi	r5,r5,-13700
80208258:	41000115 	stw	r4,4(r8)
8020825c:	41400015 	stw	r5,0(r8)
80208260:	d8c02015 	stw	r3,128(sp)
80208264:	d8801f15 	stw	r2,124(sp)
80208268:	010001c4 	movi	r4,7
8020826c:	2080b516 	blt	r4,r2,80208544 <___svfprintf_internal_r+0x1aa0>
80208270:	42000204 	addi	r8,r8,8
80208274:	8800041e 	bne	r17,zero,80208288 <___svfprintf_internal_r+0x17e4>
80208278:	d8803317 	ldw	r2,204(sp)
8020827c:	1000021e 	bne	r2,zero,80208288 <___svfprintf_internal_r+0x17e4>
80208280:	9080004c 	andi	r2,r18,1
80208284:	103c5b26 	beq	r2,zero,802073f4 <__reset+0xfa1e73f4>
80208288:	d9003817 	ldw	r4,224(sp)
8020828c:	d8801f17 	ldw	r2,124(sp)
80208290:	d9403417 	ldw	r5,208(sp)
80208294:	20c7883a 	add	r3,r4,r3
80208298:	10800044 	addi	r2,r2,1
8020829c:	41000115 	stw	r4,4(r8)
802082a0:	41400015 	stw	r5,0(r8)
802082a4:	d8c02015 	stw	r3,128(sp)
802082a8:	d8801f15 	stw	r2,124(sp)
802082ac:	010001c4 	movi	r4,7
802082b0:	20818016 	blt	r4,r2,802088b4 <___svfprintf_internal_r+0x1e10>
802082b4:	42000204 	addi	r8,r8,8
802082b8:	0463c83a 	sub	r17,zero,r17
802082bc:	0440cb0e 	bge	zero,r17,802085ec <___svfprintf_internal_r+0x1b48>
802082c0:	05800404 	movi	r22,16
802082c4:	b440e80e 	bge	r22,r17,80208668 <___svfprintf_internal_r+0x1bc4>
802082c8:	016008b4 	movhi	r5,32802
802082cc:	29729f84 	addi	r5,r5,-13698
802082d0:	d9402b15 	stw	r5,172(sp)
802082d4:	070001c4 	movi	fp,7
802082d8:	dd002c17 	ldw	r20,176(sp)
802082dc:	00000306 	br	802082ec <___svfprintf_internal_r+0x1848>
802082e0:	42000204 	addi	r8,r8,8
802082e4:	8c7ffc04 	addi	r17,r17,-16
802082e8:	b440e20e 	bge	r22,r17,80208674 <___svfprintf_internal_r+0x1bd0>
802082ec:	18c00404 	addi	r3,r3,16
802082f0:	10800044 	addi	r2,r2,1
802082f4:	45400015 	stw	r21,0(r8)
802082f8:	45800115 	stw	r22,4(r8)
802082fc:	d8c02015 	stw	r3,128(sp)
80208300:	d8801f15 	stw	r2,124(sp)
80208304:	e0bff60e 	bge	fp,r2,802082e0 <__reset+0xfa1e82e0>
80208308:	d9801e04 	addi	r6,sp,120
8020830c:	a00b883a 	mov	r5,r20
80208310:	9809883a 	mov	r4,r19
80208314:	02100340 	call	80210034 <__ssprint_r>
80208318:	103ac71e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
8020831c:	d8c02017 	ldw	r3,128(sp)
80208320:	d8801f17 	ldw	r2,124(sp)
80208324:	da000404 	addi	r8,sp,16
80208328:	003fee06 	br	802082e4 <__reset+0xfa1e82e4>
8020832c:	d8c02d17 	ldw	r3,180(sp)
80208330:	d9002917 	ldw	r4,164(sp)
80208334:	002d883a 	mov	r22,zero
80208338:	18800104 	addi	r2,r3,4
8020833c:	1d000017 	ldw	r20,0(r3)
80208340:	203e7d0e 	bge	r4,zero,80207d38 <__reset+0xfa1e7d38>
80208344:	003eda06 	br	80207eb0 <__reset+0xfa1e7eb0>
80208348:	d9402d17 	ldw	r5,180(sp)
8020834c:	d8c02917 	ldw	r3,164(sp)
80208350:	002d883a 	mov	r22,zero
80208354:	28800104 	addi	r2,r5,4
80208358:	2d000017 	ldw	r20,0(r5)
8020835c:	183e2d0e 	bge	r3,zero,80207c14 <__reset+0xfa1e7c14>
80208360:	003f6b06 	br	80208110 <__reset+0xfa1e8110>
80208364:	d8c02d15 	stw	r3,180(sp)
80208368:	0039883a 	mov	fp,zero
8020836c:	003ed206 	br	80207eb8 <__reset+0xfa1e7eb8>
80208370:	bc400043 	ldbu	r17,1(r23)
80208374:	94800814 	ori	r18,r18,32
80208378:	bdc00044 	addi	r23,r23,1
8020837c:	8c403fcc 	andi	r17,r17,255
80208380:	8c40201c 	xori	r17,r17,128
80208384:	8c7fe004 	addi	r17,r17,-128
80208388:	003a1a06 	br	80206bf4 <__reset+0xfa1e6bf4>
8020838c:	d9402c17 	ldw	r5,176(sp)
80208390:	d9801e04 	addi	r6,sp,120
80208394:	9809883a 	mov	r4,r19
80208398:	02100340 	call	80210034 <__ssprint_r>
8020839c:	103aa61e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
802083a0:	d8c02017 	ldw	r3,128(sp)
802083a4:	da000404 	addi	r8,sp,16
802083a8:	003d4a06 	br	802078d4 <__reset+0xfa1e78d4>
802083ac:	d9002917 	ldw	r4,164(sp)
802083b0:	05bff7c4 	movi	r22,-33
802083b4:	00bfffc4 	movi	r2,-1
802083b8:	8dac703a 	and	r22,r17,r22
802083bc:	20806a26 	beq	r4,r2,80208568 <___svfprintf_internal_r+0x1ac4>
802083c0:	008011c4 	movi	r2,71
802083c4:	b0813726 	beq	r22,r2,802088a4 <___svfprintf_internal_r+0x1e00>
802083c8:	d9003717 	ldw	r4,220(sp)
802083cc:	90c04014 	ori	r3,r18,256
802083d0:	d8c02b15 	stw	r3,172(sp)
802083d4:	20015d16 	blt	r4,zero,8020894c <___svfprintf_internal_r+0x1ea8>
802083d8:	dd003717 	ldw	r20,220(sp)
802083dc:	d8002a05 	stb	zero,168(sp)
802083e0:	00801984 	movi	r2,102
802083e4:	88814026 	beq	r17,r2,802088e8 <___svfprintf_internal_r+0x1e44>
802083e8:	00801184 	movi	r2,70
802083ec:	88817126 	beq	r17,r2,802089b4 <___svfprintf_internal_r+0x1f10>
802083f0:	00801144 	movi	r2,69
802083f4:	b0816226 	beq	r22,r2,80208980 <___svfprintf_internal_r+0x1edc>
802083f8:	d8c02917 	ldw	r3,164(sp)
802083fc:	d8802104 	addi	r2,sp,132
80208400:	d8800315 	stw	r2,12(sp)
80208404:	d9403617 	ldw	r5,216(sp)
80208408:	d8802504 	addi	r2,sp,148
8020840c:	d8800215 	stw	r2,8(sp)
80208410:	d8802604 	addi	r2,sp,152
80208414:	d8c00015 	stw	r3,0(sp)
80208418:	d8800115 	stw	r2,4(sp)
8020841c:	01c00084 	movi	r7,2
80208420:	a00d883a 	mov	r6,r20
80208424:	9809883a 	mov	r4,r19
80208428:	d8c03d15 	stw	r3,244(sp)
8020842c:	da003e15 	stw	r8,248(sp)
80208430:	020b2a00 	call	8020b2a0 <_dtoa_r>
80208434:	1021883a 	mov	r16,r2
80208438:	008019c4 	movi	r2,103
8020843c:	d8c03d17 	ldw	r3,244(sp)
80208440:	da003e17 	ldw	r8,248(sp)
80208444:	8880e726 	beq	r17,r2,802087e4 <___svfprintf_internal_r+0x1d40>
80208448:	008011c4 	movi	r2,71
8020844c:	8880d426 	beq	r17,r2,802087a0 <___svfprintf_internal_r+0x1cfc>
80208450:	80f9883a 	add	fp,r16,r3
80208454:	d9003617 	ldw	r4,216(sp)
80208458:	000d883a 	mov	r6,zero
8020845c:	000f883a 	mov	r7,zero
80208460:	a00b883a 	mov	r5,r20
80208464:	da003e15 	stw	r8,248(sp)
80208468:	02151b40 	call	802151b4 <__eqdf2>
8020846c:	da003e17 	ldw	r8,248(sp)
80208470:	1000e426 	beq	r2,zero,80208804 <___svfprintf_internal_r+0x1d60>
80208474:	d8802117 	ldw	r2,132(sp)
80208478:	1700062e 	bgeu	r2,fp,80208494 <___svfprintf_internal_r+0x19f0>
8020847c:	01000c04 	movi	r4,48
80208480:	10c00044 	addi	r3,r2,1
80208484:	d8c02115 	stw	r3,132(sp)
80208488:	11000005 	stb	r4,0(r2)
8020848c:	d8802117 	ldw	r2,132(sp)
80208490:	173ffb36 	bltu	r2,fp,80208480 <__reset+0xfa1e8480>
80208494:	1405c83a 	sub	r2,r2,r16
80208498:	d8803315 	stw	r2,204(sp)
8020849c:	008011c4 	movi	r2,71
802084a0:	b080c526 	beq	r22,r2,802087b8 <___svfprintf_internal_r+0x1d14>
802084a4:	00801944 	movi	r2,101
802084a8:	1441d90e 	bge	r2,r17,80208c10 <___svfprintf_internal_r+0x216c>
802084ac:	d8c02617 	ldw	r3,152(sp)
802084b0:	00801984 	movi	r2,102
802084b4:	d8c03215 	stw	r3,200(sp)
802084b8:	88813426 	beq	r17,r2,8020898c <___svfprintf_internal_r+0x1ee8>
802084bc:	d8c03217 	ldw	r3,200(sp)
802084c0:	d9003317 	ldw	r4,204(sp)
802084c4:	19012516 	blt	r3,r4,8020895c <___svfprintf_internal_r+0x1eb8>
802084c8:	9480004c 	andi	r18,r18,1
802084cc:	9001841e 	bne	r18,zero,80208ae0 <___svfprintf_internal_r+0x203c>
802084d0:	1805883a 	mov	r2,r3
802084d4:	1801cc16 	blt	r3,zero,80208c08 <___svfprintf_internal_r+0x2164>
802084d8:	d8c03217 	ldw	r3,200(sp)
802084dc:	044019c4 	movi	r17,103
802084e0:	d8c02e15 	stw	r3,184(sp)
802084e4:	df002a07 	ldb	fp,168(sp)
802084e8:	e000a61e 	bne	fp,zero,80208784 <___svfprintf_internal_r+0x1ce0>
802084ec:	df002783 	ldbu	fp,158(sp)
802084f0:	d8802a15 	stw	r2,168(sp)
802084f4:	dc802b17 	ldw	r18,172(sp)
802084f8:	d8002915 	stw	zero,164(sp)
802084fc:	003b1706 	br	8020715c <__reset+0xfa1e715c>
80208500:	042008b4 	movhi	r16,32802
80208504:	84328f04 	addi	r16,r16,-13764
80208508:	003aa606 	br	80206fa4 <__reset+0xfa1e6fa4>
8020850c:	d9003917 	ldw	r4,228(sp)
80208510:	04001004 	movi	r16,64
80208514:	800b883a 	mov	r5,r16
80208518:	020dc800 	call	8020dc80 <_malloc_r>
8020851c:	d9002c17 	ldw	r4,176(sp)
80208520:	20800015 	stw	r2,0(r4)
80208524:	20800415 	stw	r2,16(r4)
80208528:	1001cb26 	beq	r2,zero,80208c58 <___svfprintf_internal_r+0x21b4>
8020852c:	d8802c17 	ldw	r2,176(sp)
80208530:	14000515 	stw	r16,20(r2)
80208534:	00397606 	br	80206b10 <__reset+0xfa1e6b10>
80208538:	042008b4 	movhi	r16,32802
8020853c:	84329104 	addi	r16,r16,-13756
80208540:	003ee106 	br	802080c8 <__reset+0xfa1e80c8>
80208544:	d9402c17 	ldw	r5,176(sp)
80208548:	d9801e04 	addi	r6,sp,120
8020854c:	9809883a 	mov	r4,r19
80208550:	02100340 	call	80210034 <__ssprint_r>
80208554:	103a381e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80208558:	dc402617 	ldw	r17,152(sp)
8020855c:	d8c02017 	ldw	r3,128(sp)
80208560:	da000404 	addi	r8,sp,16
80208564:	003f4306 	br	80208274 <__reset+0xfa1e8274>
80208568:	01400184 	movi	r5,6
8020856c:	d9402915 	stw	r5,164(sp)
80208570:	003f9506 	br	802083c8 <__reset+0xfa1e83c8>
80208574:	d9002d17 	ldw	r4,180(sp)
80208578:	25000017 	ldw	r20,0(r4)
8020857c:	21000104 	addi	r4,r4,4
80208580:	d9002d15 	stw	r4,180(sp)
80208584:	a02dd7fa 	srai	r22,r20,31
80208588:	b005883a 	mov	r2,r22
8020858c:	003a9b06 	br	80206ffc <__reset+0xfa1e6ffc>
80208590:	d9402d17 	ldw	r5,180(sp)
80208594:	002d883a 	mov	r22,zero
80208598:	2d000017 	ldw	r20,0(r5)
8020859c:	29400104 	addi	r5,r5,4
802085a0:	d9402d15 	stw	r5,180(sp)
802085a4:	003bf906 	br	8020758c <__reset+0xfa1e758c>
802085a8:	9480100c 	andi	r18,r18,64
802085ac:	90006e26 	beq	r18,zero,80208768 <___svfprintf_internal_r+0x1cc4>
802085b0:	d9002d17 	ldw	r4,180(sp)
802085b4:	d9402f17 	ldw	r5,188(sp)
802085b8:	20800017 	ldw	r2,0(r4)
802085bc:	21000104 	addi	r4,r4,4
802085c0:	d9002d15 	stw	r4,180(sp)
802085c4:	1140000d 	sth	r5,0(r2)
802085c8:	00396106 	br	80206b50 <__reset+0xfa1e6b50>
802085cc:	d9402c17 	ldw	r5,176(sp)
802085d0:	d9801e04 	addi	r6,sp,120
802085d4:	9809883a 	mov	r4,r19
802085d8:	02100340 	call	80210034 <__ssprint_r>
802085dc:	103a161e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
802085e0:	d8c02017 	ldw	r3,128(sp)
802085e4:	d8801f17 	ldw	r2,124(sp)
802085e8:	da000404 	addi	r8,sp,16
802085ec:	d9403317 	ldw	r5,204(sp)
802085f0:	10800044 	addi	r2,r2,1
802085f4:	44000015 	stw	r16,0(r8)
802085f8:	28c7883a 	add	r3,r5,r3
802085fc:	003b7706 	br	802073dc <__reset+0xfa1e73dc>
80208600:	8009883a 	mov	r4,r16
80208604:	da003e15 	stw	r8,248(sp)
80208608:	0206a0c0 	call	80206a0c <strlen>
8020860c:	d8802e15 	stw	r2,184(sp)
80208610:	da003e17 	ldw	r8,248(sp)
80208614:	103c280e 	bge	r2,zero,802076b8 <__reset+0xfa1e76b8>
80208618:	0005883a 	mov	r2,zero
8020861c:	003c2606 	br	802076b8 <__reset+0xfa1e76b8>
80208620:	00bfffc4 	movi	r2,-1
80208624:	003a0906 	br	80206e4c <__reset+0xfa1e6e4c>
80208628:	012008b4 	movhi	r4,32802
8020862c:	2132a384 	addi	r4,r4,-13682
80208630:	d9003515 	stw	r4,212(sp)
80208634:	003b0606 	br	80207250 <__reset+0xfa1e7250>
80208638:	013fffc4 	movi	r4,-1
8020863c:	003a2706 	br	80206edc <__reset+0xfa1e6edc>
80208640:	d9402c17 	ldw	r5,176(sp)
80208644:	d9801e04 	addi	r6,sp,120
80208648:	9809883a 	mov	r4,r19
8020864c:	02100340 	call	80210034 <__ssprint_r>
80208650:	1039f91e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80208654:	d8c02017 	ldw	r3,128(sp)
80208658:	da000404 	addi	r8,sp,16
8020865c:	003d8406 	br	80207c70 <__reset+0xfa1e7c70>
80208660:	0023883a 	mov	r17,zero
80208664:	003d8306 	br	80207c74 <__reset+0xfa1e7c74>
80208668:	012008b4 	movhi	r4,32802
8020866c:	21329f84 	addi	r4,r4,-13698
80208670:	d9002b15 	stw	r4,172(sp)
80208674:	d9002b17 	ldw	r4,172(sp)
80208678:	1c47883a 	add	r3,r3,r17
8020867c:	10800044 	addi	r2,r2,1
80208680:	41000015 	stw	r4,0(r8)
80208684:	44400115 	stw	r17,4(r8)
80208688:	d8c02015 	stw	r3,128(sp)
8020868c:	d8801f15 	stw	r2,124(sp)
80208690:	010001c4 	movi	r4,7
80208694:	20bfcd16 	blt	r4,r2,802085cc <__reset+0xfa1e85cc>
80208698:	42000204 	addi	r8,r8,8
8020869c:	003fd306 	br	802085ec <__reset+0xfa1e85ec>
802086a0:	d9402c17 	ldw	r5,176(sp)
802086a4:	d9801e04 	addi	r6,sp,120
802086a8:	9809883a 	mov	r4,r19
802086ac:	02100340 	call	80210034 <__ssprint_r>
802086b0:	1039e11e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
802086b4:	d8802617 	ldw	r2,152(sp)
802086b8:	d8c02017 	ldw	r3,128(sp)
802086bc:	da000404 	addi	r8,sp,16
802086c0:	003e1c06 	br	80207f34 <__reset+0xfa1e7f34>
802086c4:	d8802917 	ldw	r2,164(sp)
802086c8:	00c00184 	movi	r3,6
802086cc:	1880012e 	bgeu	r3,r2,802086d4 <___svfprintf_internal_r+0x1c30>
802086d0:	1805883a 	mov	r2,r3
802086d4:	d8802e15 	stw	r2,184(sp)
802086d8:	1000f316 	blt	r2,zero,80208aa8 <___svfprintf_internal_r+0x2004>
802086dc:	042008b4 	movhi	r16,32802
802086e0:	d8802a15 	stw	r2,168(sp)
802086e4:	dd002d15 	stw	r20,180(sp)
802086e8:	d8002915 	stw	zero,164(sp)
802086ec:	d8003215 	stw	zero,200(sp)
802086f0:	84329d04 	addi	r16,r16,-13708
802086f4:	0039883a 	mov	fp,zero
802086f8:	003a9f06 	br	80207178 <__reset+0xfa1e7178>
802086fc:	012008b4 	movhi	r4,32802
80208700:	2132a384 	addi	r4,r4,-13682
80208704:	d9003515 	stw	r4,212(sp)
80208708:	003b5f06 	br	80207488 <__reset+0xfa1e7488>
8020870c:	d9402c17 	ldw	r5,176(sp)
80208710:	d9801e04 	addi	r6,sp,120
80208714:	9809883a 	mov	r4,r19
80208718:	02100340 	call	80210034 <__ssprint_r>
8020871c:	1039c61e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
80208720:	d8802617 	ldw	r2,152(sp)
80208724:	d9403317 	ldw	r5,204(sp)
80208728:	d8c02017 	ldw	r3,128(sp)
8020872c:	da000404 	addi	r8,sp,16
80208730:	2885c83a 	sub	r2,r5,r2
80208734:	003e1006 	br	80207f78 <__reset+0xfa1e7f78>
80208738:	00800044 	movi	r2,1
8020873c:	10803fcc 	andi	r2,r2,255
80208740:	00c00044 	movi	r3,1
80208744:	10fa3526 	beq	r2,r3,8020701c <__reset+0xfa1e701c>
80208748:	00c00084 	movi	r3,2
8020874c:	10fb9e26 	beq	r2,r3,802075c8 <__reset+0xfa1e75c8>
80208750:	003a6406 	br	802070e4 <__reset+0xfa1e70e4>
80208754:	0021883a 	mov	r16,zero
80208758:	003e0806 	br	80207f7c <__reset+0xfa1e7f7c>
8020875c:	07000b44 	movi	fp,45
80208760:	df002785 	stb	fp,158(sp)
80208764:	003a0b06 	br	80206f94 <__reset+0xfa1e6f94>
80208768:	d8c02d17 	ldw	r3,180(sp)
8020876c:	d9002f17 	ldw	r4,188(sp)
80208770:	18800017 	ldw	r2,0(r3)
80208774:	18c00104 	addi	r3,r3,4
80208778:	d8c02d15 	stw	r3,180(sp)
8020877c:	11000015 	stw	r4,0(r2)
80208780:	0038f306 	br	80206b50 <__reset+0xfa1e6b50>
80208784:	00c00b44 	movi	r3,45
80208788:	d8c02785 	stb	r3,158(sp)
8020878c:	d8802a15 	stw	r2,168(sp)
80208790:	dc802b17 	ldw	r18,172(sp)
80208794:	d8002915 	stw	zero,164(sp)
80208798:	07000b44 	movi	fp,45
8020879c:	003a7306 	br	8020716c <__reset+0xfa1e716c>
802087a0:	9080004c 	andi	r2,r18,1
802087a4:	1000941e 	bne	r2,zero,802089f8 <___svfprintf_internal_r+0x1f54>
802087a8:	d8802117 	ldw	r2,132(sp)
802087ac:	1405c83a 	sub	r2,r2,r16
802087b0:	d8803315 	stw	r2,204(sp)
802087b4:	b441161e 	bne	r22,r17,80208c10 <___svfprintf_internal_r+0x216c>
802087b8:	dd802617 	ldw	r22,152(sp)
802087bc:	00bfff44 	movi	r2,-3
802087c0:	b0801a16 	blt	r22,r2,8020882c <___svfprintf_internal_r+0x1d88>
802087c4:	d9402917 	ldw	r5,164(sp)
802087c8:	2d801816 	blt	r5,r22,8020882c <___svfprintf_internal_r+0x1d88>
802087cc:	dd803215 	stw	r22,200(sp)
802087d0:	003f3a06 	br	802084bc <__reset+0xfa1e84bc>
802087d4:	1025883a 	mov	r18,r2
802087d8:	0039883a 	mov	fp,zero
802087dc:	00800084 	movi	r2,2
802087e0:	003fd606 	br	8020873c <__reset+0xfa1e873c>
802087e4:	9080004c 	andi	r2,r18,1
802087e8:	103f191e 	bne	r2,zero,80208450 <__reset+0xfa1e8450>
802087ec:	d8802117 	ldw	r2,132(sp)
802087f0:	003f2806 	br	80208494 <__reset+0xfa1e8494>
802087f4:	012008b4 	movhi	r4,32802
802087f8:	21329f84 	addi	r4,r4,-13698
802087fc:	d9002b15 	stw	r4,172(sp)
80208800:	003c7c06 	br	802079f4 <__reset+0xfa1e79f4>
80208804:	e005883a 	mov	r2,fp
80208808:	003f2206 	br	80208494 <__reset+0xfa1e8494>
8020880c:	d9402917 	ldw	r5,164(sp)
80208810:	df002783 	ldbu	fp,158(sp)
80208814:	dd002d15 	stw	r20,180(sp)
80208818:	d9402a15 	stw	r5,168(sp)
8020881c:	d9402e15 	stw	r5,184(sp)
80208820:	d8002915 	stw	zero,164(sp)
80208824:	d8003215 	stw	zero,200(sp)
80208828:	003a4c06 	br	8020715c <__reset+0xfa1e715c>
8020882c:	8c7fff84 	addi	r17,r17,-2
80208830:	b5bfffc4 	addi	r22,r22,-1
80208834:	dd802615 	stw	r22,152(sp)
80208838:	dc4022c5 	stb	r17,139(sp)
8020883c:	b000c316 	blt	r22,zero,80208b4c <___svfprintf_internal_r+0x20a8>
80208840:	00800ac4 	movi	r2,43
80208844:	d8802305 	stb	r2,140(sp)
80208848:	00800244 	movi	r2,9
8020884c:	15806e16 	blt	r2,r22,80208a08 <___svfprintf_internal_r+0x1f64>
80208850:	00800c04 	movi	r2,48
80208854:	b5800c04 	addi	r22,r22,48
80208858:	d8802345 	stb	r2,141(sp)
8020885c:	dd802385 	stb	r22,142(sp)
80208860:	d88023c4 	addi	r2,sp,143
80208864:	df0022c4 	addi	fp,sp,139
80208868:	d8c03317 	ldw	r3,204(sp)
8020886c:	1739c83a 	sub	fp,r2,fp
80208870:	d9003317 	ldw	r4,204(sp)
80208874:	e0c7883a 	add	r3,fp,r3
80208878:	df003b15 	stw	fp,236(sp)
8020887c:	d8c02e15 	stw	r3,184(sp)
80208880:	00800044 	movi	r2,1
80208884:	1100b70e 	bge	r2,r4,80208b64 <___svfprintf_internal_r+0x20c0>
80208888:	d8c02e17 	ldw	r3,184(sp)
8020888c:	18c00044 	addi	r3,r3,1
80208890:	d8c02e15 	stw	r3,184(sp)
80208894:	1805883a 	mov	r2,r3
80208898:	1800b016 	blt	r3,zero,80208b5c <___svfprintf_internal_r+0x20b8>
8020889c:	d8003215 	stw	zero,200(sp)
802088a0:	003f1006 	br	802084e4 <__reset+0xfa1e84e4>
802088a4:	d8802917 	ldw	r2,164(sp)
802088a8:	103ec71e 	bne	r2,zero,802083c8 <__reset+0xfa1e83c8>
802088ac:	dc002915 	stw	r16,164(sp)
802088b0:	003ec506 	br	802083c8 <__reset+0xfa1e83c8>
802088b4:	d9402c17 	ldw	r5,176(sp)
802088b8:	d9801e04 	addi	r6,sp,120
802088bc:	9809883a 	mov	r4,r19
802088c0:	02100340 	call	80210034 <__ssprint_r>
802088c4:	10395c1e 	bne	r2,zero,80206e38 <__reset+0xfa1e6e38>
802088c8:	dc402617 	ldw	r17,152(sp)
802088cc:	d8c02017 	ldw	r3,128(sp)
802088d0:	d8801f17 	ldw	r2,124(sp)
802088d4:	da000404 	addi	r8,sp,16
802088d8:	003e7706 	br	802082b8 <__reset+0xfa1e82b8>
802088dc:	582f883a 	mov	r23,r11
802088e0:	d8002915 	stw	zero,164(sp)
802088e4:	0038c406 	br	80206bf8 <__reset+0xfa1e6bf8>
802088e8:	d8c02917 	ldw	r3,164(sp)
802088ec:	d8802104 	addi	r2,sp,132
802088f0:	d8800315 	stw	r2,12(sp)
802088f4:	d9403617 	ldw	r5,216(sp)
802088f8:	d8802504 	addi	r2,sp,148
802088fc:	d8800215 	stw	r2,8(sp)
80208900:	d8802604 	addi	r2,sp,152
80208904:	d8c00015 	stw	r3,0(sp)
80208908:	9809883a 	mov	r4,r19
8020890c:	d8800115 	stw	r2,4(sp)
80208910:	01c000c4 	movi	r7,3
80208914:	a00d883a 	mov	r6,r20
80208918:	da003e15 	stw	r8,248(sp)
8020891c:	020b2a00 	call	8020b2a0 <_dtoa_r>
80208920:	d9002917 	ldw	r4,164(sp)
80208924:	da003e17 	ldw	r8,248(sp)
80208928:	1021883a 	mov	r16,r2
8020892c:	1139883a 	add	fp,r2,r4
80208930:	2007883a 	mov	r3,r4
80208934:	81000007 	ldb	r4,0(r16)
80208938:	00800c04 	movi	r2,48
8020893c:	20806f26 	beq	r4,r2,80208afc <___svfprintf_internal_r+0x2058>
80208940:	d8c02617 	ldw	r3,152(sp)
80208944:	e0f9883a 	add	fp,fp,r3
80208948:	003ec206 	br	80208454 <__reset+0xfa1e8454>
8020894c:	00c00b44 	movi	r3,45
80208950:	2520003c 	xorhi	r20,r4,32768
80208954:	d8c02a05 	stb	r3,168(sp)
80208958:	003ea106 	br	802083e0 <__reset+0xfa1e83e0>
8020895c:	d8c03217 	ldw	r3,200(sp)
80208960:	00c0890e 	bge	zero,r3,80208b88 <___svfprintf_internal_r+0x20e4>
80208964:	00800044 	movi	r2,1
80208968:	d9003317 	ldw	r4,204(sp)
8020896c:	1105883a 	add	r2,r2,r4
80208970:	d8802e15 	stw	r2,184(sp)
80208974:	10005f16 	blt	r2,zero,80208af4 <___svfprintf_internal_r+0x2050>
80208978:	044019c4 	movi	r17,103
8020897c:	003ed906 	br	802084e4 <__reset+0xfa1e84e4>
80208980:	d9002917 	ldw	r4,164(sp)
80208984:	20c00044 	addi	r3,r4,1
80208988:	003e9c06 	br	802083fc <__reset+0xfa1e83fc>
8020898c:	d9002917 	ldw	r4,164(sp)
80208990:	00c0680e 	bge	zero,r3,80208b34 <___svfprintf_internal_r+0x2090>
80208994:	2000461e 	bne	r4,zero,80208ab0 <___svfprintf_internal_r+0x200c>
80208998:	9480004c 	andi	r18,r18,1
8020899c:	9000441e 	bne	r18,zero,80208ab0 <___svfprintf_internal_r+0x200c>
802089a0:	1805883a 	mov	r2,r3
802089a4:	1800a016 	blt	r3,zero,80208c28 <___svfprintf_internal_r+0x2184>
802089a8:	d8c03217 	ldw	r3,200(sp)
802089ac:	d8c02e15 	stw	r3,184(sp)
802089b0:	003ecc06 	br	802084e4 <__reset+0xfa1e84e4>
802089b4:	d9402917 	ldw	r5,164(sp)
802089b8:	d8802104 	addi	r2,sp,132
802089bc:	d8800315 	stw	r2,12(sp)
802089c0:	d9400015 	stw	r5,0(sp)
802089c4:	d8802504 	addi	r2,sp,148
802089c8:	d9403617 	ldw	r5,216(sp)
802089cc:	d8800215 	stw	r2,8(sp)
802089d0:	d8802604 	addi	r2,sp,152
802089d4:	d8800115 	stw	r2,4(sp)
802089d8:	01c000c4 	movi	r7,3
802089dc:	a00d883a 	mov	r6,r20
802089e0:	9809883a 	mov	r4,r19
802089e4:	da003e15 	stw	r8,248(sp)
802089e8:	020b2a00 	call	8020b2a0 <_dtoa_r>
802089ec:	d8c02917 	ldw	r3,164(sp)
802089f0:	da003e17 	ldw	r8,248(sp)
802089f4:	1021883a 	mov	r16,r2
802089f8:	00801184 	movi	r2,70
802089fc:	80f9883a 	add	fp,r16,r3
80208a00:	88bfcc26 	beq	r17,r2,80208934 <__reset+0xfa1e8934>
80208a04:	003e9306 	br	80208454 <__reset+0xfa1e8454>
80208a08:	df0022c4 	addi	fp,sp,139
80208a0c:	dc002915 	stw	r16,164(sp)
80208a10:	9829883a 	mov	r20,r19
80208a14:	e021883a 	mov	r16,fp
80208a18:	4027883a 	mov	r19,r8
80208a1c:	b009883a 	mov	r4,r22
80208a20:	01400284 	movi	r5,10
80208a24:	0213ef00 	call	80213ef0 <__modsi3>
80208a28:	10800c04 	addi	r2,r2,48
80208a2c:	843fffc4 	addi	r16,r16,-1
80208a30:	b009883a 	mov	r4,r22
80208a34:	01400284 	movi	r5,10
80208a38:	80800005 	stb	r2,0(r16)
80208a3c:	0213e6c0 	call	80213e6c <__divsi3>
80208a40:	102d883a 	mov	r22,r2
80208a44:	00800244 	movi	r2,9
80208a48:	15bff416 	blt	r2,r22,80208a1c <__reset+0xfa1e8a1c>
80208a4c:	9811883a 	mov	r8,r19
80208a50:	b0800c04 	addi	r2,r22,48
80208a54:	a027883a 	mov	r19,r20
80208a58:	8029883a 	mov	r20,r16
80208a5c:	a17fffc4 	addi	r5,r20,-1
80208a60:	a0bfffc5 	stb	r2,-1(r20)
80208a64:	dc002917 	ldw	r16,164(sp)
80208a68:	2f00752e 	bgeu	r5,fp,80208c40 <___svfprintf_internal_r+0x219c>
80208a6c:	d9c02384 	addi	r7,sp,142
80208a70:	3d0fc83a 	sub	r7,r7,r20
80208a74:	d9002344 	addi	r4,sp,141
80208a78:	e1cf883a 	add	r7,fp,r7
80208a7c:	00000106 	br	80208a84 <___svfprintf_internal_r+0x1fe0>
80208a80:	28800003 	ldbu	r2,0(r5)
80208a84:	20800005 	stb	r2,0(r4)
80208a88:	21000044 	addi	r4,r4,1
80208a8c:	29400044 	addi	r5,r5,1
80208a90:	21fffb1e 	bne	r4,r7,80208a80 <__reset+0xfa1e8a80>
80208a94:	d8802304 	addi	r2,sp,140
80208a98:	1505c83a 	sub	r2,r2,r20
80208a9c:	d8c02344 	addi	r3,sp,141
80208aa0:	1885883a 	add	r2,r3,r2
80208aa4:	003f7006 	br	80208868 <__reset+0xfa1e8868>
80208aa8:	0005883a 	mov	r2,zero
80208aac:	003f0b06 	br	802086dc <__reset+0xfa1e86dc>
80208ab0:	d9002917 	ldw	r4,164(sp)
80208ab4:	d8c03217 	ldw	r3,200(sp)
80208ab8:	20800044 	addi	r2,r4,1
80208abc:	1885883a 	add	r2,r3,r2
80208ac0:	d8802e15 	stw	r2,184(sp)
80208ac4:	103e870e 	bge	r2,zero,802084e4 <__reset+0xfa1e84e4>
80208ac8:	0005883a 	mov	r2,zero
80208acc:	003e8506 	br	802084e4 <__reset+0xfa1e84e4>
80208ad0:	012008b4 	movhi	r4,32802
80208ad4:	21329f84 	addi	r4,r4,-13698
80208ad8:	d9002b15 	stw	r4,172(sp)
80208adc:	003cc506 	br	80207df4 <__reset+0xfa1e7df4>
80208ae0:	d8c03217 	ldw	r3,200(sp)
80208ae4:	18c00044 	addi	r3,r3,1
80208ae8:	d8c02e15 	stw	r3,184(sp)
80208aec:	1805883a 	mov	r2,r3
80208af0:	183fa10e 	bge	r3,zero,80208978 <__reset+0xfa1e8978>
80208af4:	0005883a 	mov	r2,zero
80208af8:	003f9f06 	br	80208978 <__reset+0xfa1e8978>
80208afc:	d9003617 	ldw	r4,216(sp)
80208b00:	000d883a 	mov	r6,zero
80208b04:	000f883a 	mov	r7,zero
80208b08:	a00b883a 	mov	r5,r20
80208b0c:	d8c03d15 	stw	r3,244(sp)
80208b10:	da003e15 	stw	r8,248(sp)
80208b14:	02151b40 	call	802151b4 <__eqdf2>
80208b18:	d8c03d17 	ldw	r3,244(sp)
80208b1c:	da003e17 	ldw	r8,248(sp)
80208b20:	103f8726 	beq	r2,zero,80208940 <__reset+0xfa1e8940>
80208b24:	00800044 	movi	r2,1
80208b28:	10c7c83a 	sub	r3,r2,r3
80208b2c:	d8c02615 	stw	r3,152(sp)
80208b30:	003f8406 	br	80208944 <__reset+0xfa1e8944>
80208b34:	20000e1e 	bne	r4,zero,80208b70 <___svfprintf_internal_r+0x20cc>
80208b38:	9480004c 	andi	r18,r18,1
80208b3c:	90000c1e 	bne	r18,zero,80208b70 <___svfprintf_internal_r+0x20cc>
80208b40:	00800044 	movi	r2,1
80208b44:	d8802e15 	stw	r2,184(sp)
80208b48:	003e6606 	br	802084e4 <__reset+0xfa1e84e4>
80208b4c:	00800b44 	movi	r2,45
80208b50:	05adc83a 	sub	r22,zero,r22
80208b54:	d8802305 	stb	r2,140(sp)
80208b58:	003f3b06 	br	80208848 <__reset+0xfa1e8848>
80208b5c:	0005883a 	mov	r2,zero
80208b60:	003f4e06 	br	8020889c <__reset+0xfa1e889c>
80208b64:	90a4703a 	and	r18,r18,r2
80208b68:	903f4a26 	beq	r18,zero,80208894 <__reset+0xfa1e8894>
80208b6c:	003f4606 	br	80208888 <__reset+0xfa1e8888>
80208b70:	d8c02917 	ldw	r3,164(sp)
80208b74:	18c00084 	addi	r3,r3,2
80208b78:	d8c02e15 	stw	r3,184(sp)
80208b7c:	1805883a 	mov	r2,r3
80208b80:	183e580e 	bge	r3,zero,802084e4 <__reset+0xfa1e84e4>
80208b84:	003fd006 	br	80208ac8 <__reset+0xfa1e8ac8>
80208b88:	00800084 	movi	r2,2
80208b8c:	10c5c83a 	sub	r2,r2,r3
80208b90:	003f7506 	br	80208968 <__reset+0xfa1e8968>
80208b94:	d8802d17 	ldw	r2,180(sp)
80208b98:	d9002d17 	ldw	r4,180(sp)
80208b9c:	bc400043 	ldbu	r17,1(r23)
80208ba0:	10800017 	ldw	r2,0(r2)
80208ba4:	582f883a 	mov	r23,r11
80208ba8:	d8802915 	stw	r2,164(sp)
80208bac:	20800104 	addi	r2,r4,4
80208bb0:	d9002917 	ldw	r4,164(sp)
80208bb4:	d8802d15 	stw	r2,180(sp)
80208bb8:	203df00e 	bge	r4,zero,8020837c <__reset+0xfa1e837c>
80208bbc:	8c403fcc 	andi	r17,r17,255
80208bc0:	00bfffc4 	movi	r2,-1
80208bc4:	8c40201c 	xori	r17,r17,128
80208bc8:	d8802915 	stw	r2,164(sp)
80208bcc:	8c7fe004 	addi	r17,r17,-128
80208bd0:	00380806 	br	80206bf4 <__reset+0xfa1e6bf4>
80208bd4:	9080004c 	andi	r2,r18,1
80208bd8:	0039883a 	mov	fp,zero
80208bdc:	10000726 	beq	r2,zero,80208bfc <___svfprintf_internal_r+0x2158>
80208be0:	d8c02817 	ldw	r3,160(sp)
80208be4:	dc001dc4 	addi	r16,sp,119
80208be8:	00800c04 	movi	r2,48
80208bec:	1c07c83a 	sub	r3,r3,r16
80208bf0:	d8801dc5 	stb	r2,119(sp)
80208bf4:	d8c02e15 	stw	r3,184(sp)
80208bf8:	00395206 	br	80207144 <__reset+0xfa1e7144>
80208bfc:	d8002e15 	stw	zero,184(sp)
80208c00:	dc001e04 	addi	r16,sp,120
80208c04:	00394f06 	br	80207144 <__reset+0xfa1e7144>
80208c08:	0005883a 	mov	r2,zero
80208c0c:	003e3206 	br	802084d8 <__reset+0xfa1e84d8>
80208c10:	dd802617 	ldw	r22,152(sp)
80208c14:	003f0606 	br	80208830 <__reset+0xfa1e8830>
80208c18:	d9c02785 	stb	r7,158(sp)
80208c1c:	003a5106 	br	80207564 <__reset+0xfa1e7564>
80208c20:	d9c02785 	stb	r7,158(sp)
80208c24:	003a3706 	br	80207504 <__reset+0xfa1e7504>
80208c28:	0005883a 	mov	r2,zero
80208c2c:	003f5e06 	br	802089a8 <__reset+0xfa1e89a8>
80208c30:	d9c02785 	stb	r7,158(sp)
80208c34:	00391706 	br	80207094 <__reset+0xfa1e7094>
80208c38:	d9c02785 	stb	r7,158(sp)
80208c3c:	0038e606 	br	80206fd8 <__reset+0xfa1e6fd8>
80208c40:	d8802344 	addi	r2,sp,141
80208c44:	003f0806 	br	80208868 <__reset+0xfa1e8868>
80208c48:	d9c02785 	stb	r7,158(sp)
80208c4c:	0038b706 	br	80206f2c <__reset+0xfa1e6f2c>
80208c50:	d9c02785 	stb	r7,158(sp)
80208c54:	003adc06 	br	802077c8 <__reset+0xfa1e77c8>
80208c58:	d9403917 	ldw	r5,228(sp)
80208c5c:	00800304 	movi	r2,12
80208c60:	28800015 	stw	r2,0(r5)
80208c64:	00bfffc4 	movi	r2,-1
80208c68:	00387806 	br	80206e4c <__reset+0xfa1e6e4c>
80208c6c:	d9c02785 	stb	r7,158(sp)
80208c70:	003abf06 	br	80207770 <__reset+0xfa1e7770>
80208c74:	d9c02785 	stb	r7,158(sp)
80208c78:	003a9b06 	br	802076e8 <__reset+0xfa1e76e8>

80208c7c <___vfprintf_internal_r>:
80208c7c:	deffb804 	addi	sp,sp,-288
80208c80:	dfc04715 	stw	ra,284(sp)
80208c84:	ddc04515 	stw	r23,276(sp)
80208c88:	dd404315 	stw	r21,268(sp)
80208c8c:	d9002c15 	stw	r4,176(sp)
80208c90:	282f883a 	mov	r23,r5
80208c94:	302b883a 	mov	r21,r6
80208c98:	d9c02d15 	stw	r7,180(sp)
80208c9c:	df004615 	stw	fp,280(sp)
80208ca0:	dd804415 	stw	r22,272(sp)
80208ca4:	dd004215 	stw	r20,264(sp)
80208ca8:	dcc04115 	stw	r19,260(sp)
80208cac:	dc804015 	stw	r18,256(sp)
80208cb0:	dc403f15 	stw	r17,252(sp)
80208cb4:	dc003e15 	stw	r16,248(sp)
80208cb8:	020da940 	call	8020da94 <_localeconv_r>
80208cbc:	10800017 	ldw	r2,0(r2)
80208cc0:	1009883a 	mov	r4,r2
80208cc4:	d8803415 	stw	r2,208(sp)
80208cc8:	0206a0c0 	call	80206a0c <strlen>
80208ccc:	d8803715 	stw	r2,220(sp)
80208cd0:	d8802c17 	ldw	r2,176(sp)
80208cd4:	10000226 	beq	r2,zero,80208ce0 <___vfprintf_internal_r+0x64>
80208cd8:	10800e17 	ldw	r2,56(r2)
80208cdc:	1000f926 	beq	r2,zero,802090c4 <___vfprintf_internal_r+0x448>
80208ce0:	b880030b 	ldhu	r2,12(r23)
80208ce4:	10c8000c 	andi	r3,r2,8192
80208ce8:	1800061e 	bne	r3,zero,80208d04 <___vfprintf_internal_r+0x88>
80208cec:	b9001917 	ldw	r4,100(r23)
80208cf0:	00f7ffc4 	movi	r3,-8193
80208cf4:	10880014 	ori	r2,r2,8192
80208cf8:	20c6703a 	and	r3,r4,r3
80208cfc:	b880030d 	sth	r2,12(r23)
80208d00:	b8c01915 	stw	r3,100(r23)
80208d04:	10c0020c 	andi	r3,r2,8
80208d08:	1800c126 	beq	r3,zero,80209010 <___vfprintf_internal_r+0x394>
80208d0c:	b8c00417 	ldw	r3,16(r23)
80208d10:	1800bf26 	beq	r3,zero,80209010 <___vfprintf_internal_r+0x394>
80208d14:	1080068c 	andi	r2,r2,26
80208d18:	00c00284 	movi	r3,10
80208d1c:	10c0c426 	beq	r2,r3,80209030 <___vfprintf_internal_r+0x3b4>
80208d20:	d8c00404 	addi	r3,sp,16
80208d24:	052008b4 	movhi	r20,32802
80208d28:	d9001e04 	addi	r4,sp,120
80208d2c:	a532a784 	addi	r20,r20,-13666
80208d30:	d8c01e15 	stw	r3,120(sp)
80208d34:	d8002015 	stw	zero,128(sp)
80208d38:	d8001f15 	stw	zero,124(sp)
80208d3c:	d8003315 	stw	zero,204(sp)
80208d40:	d8003615 	stw	zero,216(sp)
80208d44:	d8003815 	stw	zero,224(sp)
80208d48:	1811883a 	mov	r8,r3
80208d4c:	d8003915 	stw	zero,228(sp)
80208d50:	d8003a15 	stw	zero,232(sp)
80208d54:	d8002f15 	stw	zero,188(sp)
80208d58:	d9002815 	stw	r4,160(sp)
80208d5c:	a8800007 	ldb	r2,0(r21)
80208d60:	10027b26 	beq	r2,zero,80209750 <___vfprintf_internal_r+0xad4>
80208d64:	00c00944 	movi	r3,37
80208d68:	a821883a 	mov	r16,r21
80208d6c:	10c0021e 	bne	r2,r3,80208d78 <___vfprintf_internal_r+0xfc>
80208d70:	00001406 	br	80208dc4 <___vfprintf_internal_r+0x148>
80208d74:	10c00326 	beq	r2,r3,80208d84 <___vfprintf_internal_r+0x108>
80208d78:	84000044 	addi	r16,r16,1
80208d7c:	80800007 	ldb	r2,0(r16)
80208d80:	103ffc1e 	bne	r2,zero,80208d74 <__reset+0xfa1e8d74>
80208d84:	8563c83a 	sub	r17,r16,r21
80208d88:	88000e26 	beq	r17,zero,80208dc4 <___vfprintf_internal_r+0x148>
80208d8c:	d8c02017 	ldw	r3,128(sp)
80208d90:	d8801f17 	ldw	r2,124(sp)
80208d94:	45400015 	stw	r21,0(r8)
80208d98:	1c47883a 	add	r3,r3,r17
80208d9c:	10800044 	addi	r2,r2,1
80208da0:	d8c02015 	stw	r3,128(sp)
80208da4:	44400115 	stw	r17,4(r8)
80208da8:	d8801f15 	stw	r2,124(sp)
80208dac:	00c001c4 	movi	r3,7
80208db0:	1880a716 	blt	r3,r2,80209050 <___vfprintf_internal_r+0x3d4>
80208db4:	42000204 	addi	r8,r8,8
80208db8:	d9402f17 	ldw	r5,188(sp)
80208dbc:	2c4b883a 	add	r5,r5,r17
80208dc0:	d9402f15 	stw	r5,188(sp)
80208dc4:	80800007 	ldb	r2,0(r16)
80208dc8:	1000a826 	beq	r2,zero,8020906c <___vfprintf_internal_r+0x3f0>
80208dcc:	84400047 	ldb	r17,1(r16)
80208dd0:	00bfffc4 	movi	r2,-1
80208dd4:	85400044 	addi	r21,r16,1
80208dd8:	d8002785 	stb	zero,158(sp)
80208ddc:	0007883a 	mov	r3,zero
80208de0:	000f883a 	mov	r7,zero
80208de4:	d8802915 	stw	r2,164(sp)
80208de8:	d8003115 	stw	zero,196(sp)
80208dec:	0025883a 	mov	r18,zero
80208df0:	01401604 	movi	r5,88
80208df4:	01800244 	movi	r6,9
80208df8:	02800a84 	movi	r10,42
80208dfc:	02401b04 	movi	r9,108
80208e00:	ad400044 	addi	r21,r21,1
80208e04:	88bff804 	addi	r2,r17,-32
80208e08:	28830436 	bltu	r5,r2,80209a1c <___vfprintf_internal_r+0xda0>
80208e0c:	100490ba 	slli	r2,r2,2
80208e10:	01200874 	movhi	r4,32801
80208e14:	21238904 	addi	r4,r4,-29148
80208e18:	1105883a 	add	r2,r2,r4
80208e1c:	10800017 	ldw	r2,0(r2)
80208e20:	1000683a 	jmp	r2
80208e24:	8020993c 	xorhi	zero,r16,33380
80208e28:	80209a1c 	xori	zero,r16,33384
80208e2c:	80209a1c 	xori	zero,r16,33384
80208e30:	8020995c 	xori	zero,r16,33381
80208e34:	80209a1c 	xori	zero,r16,33384
80208e38:	80209a1c 	xori	zero,r16,33384
80208e3c:	80209a1c 	xori	zero,r16,33384
80208e40:	80209a1c 	xori	zero,r16,33384
80208e44:	80209a1c 	xori	zero,r16,33384
80208e48:	80209a1c 	xori	zero,r16,33384
80208e4c:	802090d0 	cmplti	zero,r16,-32189
80208e50:	80209878 	rdprs	zero,r16,-32159
80208e54:	80209a1c 	xori	zero,r16,33384
80208e58:	80208f98 	cmpnei	zero,r16,-32194
80208e5c:	802090f8 	rdprs	zero,r16,-32189
80208e60:	80209a1c 	xori	zero,r16,33384
80208e64:	80209138 	rdprs	zero,r16,-32188
80208e68:	80209144 	addi	zero,r16,-32187
80208e6c:	80209144 	addi	zero,r16,-32187
80208e70:	80209144 	addi	zero,r16,-32187
80208e74:	80209144 	addi	zero,r16,-32187
80208e78:	80209144 	addi	zero,r16,-32187
80208e7c:	80209144 	addi	zero,r16,-32187
80208e80:	80209144 	addi	zero,r16,-32187
80208e84:	80209144 	addi	zero,r16,-32187
80208e88:	80209144 	addi	zero,r16,-32187
80208e8c:	80209a1c 	xori	zero,r16,33384
80208e90:	80209a1c 	xori	zero,r16,33384
80208e94:	80209a1c 	xori	zero,r16,33384
80208e98:	80209a1c 	xori	zero,r16,33384
80208e9c:	80209a1c 	xori	zero,r16,33384
80208ea0:	80209a1c 	xori	zero,r16,33384
80208ea4:	80209a1c 	xori	zero,r16,33384
80208ea8:	80209a1c 	xori	zero,r16,33384
80208eac:	80209a1c 	xori	zero,r16,33384
80208eb0:	80209a1c 	xori	zero,r16,33384
80208eb4:	80209178 	rdprs	zero,r16,-32187
80208eb8:	80209234 	orhi	zero,r16,33352
80208ebc:	80209a1c 	xori	zero,r16,33384
80208ec0:	80209234 	orhi	zero,r16,33352
80208ec4:	80209a1c 	xori	zero,r16,33384
80208ec8:	80209a1c 	xori	zero,r16,33384
80208ecc:	80209a1c 	xori	zero,r16,33384
80208ed0:	80209a1c 	xori	zero,r16,33384
80208ed4:	802092d4 	ori	zero,r16,33355
80208ed8:	80209a1c 	xori	zero,r16,33384
80208edc:	80209a1c 	xori	zero,r16,33384
80208ee0:	802092e0 	cmpeqi	zero,r16,-32181
80208ee4:	80209a1c 	xori	zero,r16,33384
80208ee8:	80209a1c 	xori	zero,r16,33384
80208eec:	80209a1c 	xori	zero,r16,33384
80208ef0:	80209a1c 	xori	zero,r16,33384
80208ef4:	80209a1c 	xori	zero,r16,33384
80208ef8:	80209758 	cmpnei	zero,r16,-32163
80208efc:	80209a1c 	xori	zero,r16,33384
80208f00:	80209a1c 	xori	zero,r16,33384
80208f04:	802097b8 	rdprs	zero,r16,-32162
80208f08:	80209a1c 	xori	zero,r16,33384
80208f0c:	80209a1c 	xori	zero,r16,33384
80208f10:	80209a1c 	xori	zero,r16,33384
80208f14:	80209a1c 	xori	zero,r16,33384
80208f18:	80209a1c 	xori	zero,r16,33384
80208f1c:	80209a1c 	xori	zero,r16,33384
80208f20:	80209a1c 	xori	zero,r16,33384
80208f24:	80209a1c 	xori	zero,r16,33384
80208f28:	80209a1c 	xori	zero,r16,33384
80208f2c:	80209a1c 	xori	zero,r16,33384
80208f30:	802099c8 	cmpgei	zero,r16,-32153
80208f34:	80209968 	cmpgeui	zero,r16,33381
80208f38:	80209234 	orhi	zero,r16,33352
80208f3c:	80209234 	orhi	zero,r16,33352
80208f40:	80209234 	orhi	zero,r16,33352
80208f44:	80209978 	rdprs	zero,r16,-32155
80208f48:	80209968 	cmpgeui	zero,r16,33381
80208f4c:	80209a1c 	xori	zero,r16,33384
80208f50:	80209a1c 	xori	zero,r16,33384
80208f54:	80209984 	addi	zero,r16,-32154
80208f58:	80209a1c 	xori	zero,r16,33384
80208f5c:	80209994 	ori	zero,r16,33382
80208f60:	80209868 	cmpgeui	zero,r16,33377
80208f64:	80208fa4 	muli	zero,r16,-32194
80208f68:	80209888 	cmpgei	zero,r16,-32158
80208f6c:	80209a1c 	xori	zero,r16,33384
80208f70:	80209894 	ori	zero,r16,33378
80208f74:	80209a1c 	xori	zero,r16,33384
80208f78:	802098f0 	cmpltui	zero,r16,33379
80208f7c:	80209a1c 	xori	zero,r16,33384
80208f80:	80209a1c 	xori	zero,r16,33384
80208f84:	80209900 	call	88020990 <__reset+0x2000990>
80208f88:	d9003117 	ldw	r4,196(sp)
80208f8c:	d8802d15 	stw	r2,180(sp)
80208f90:	0109c83a 	sub	r4,zero,r4
80208f94:	d9003115 	stw	r4,196(sp)
80208f98:	94800114 	ori	r18,r18,4
80208f9c:	ac400007 	ldb	r17,0(r21)
80208fa0:	003f9706 	br	80208e00 <__reset+0xfa1e8e00>
80208fa4:	00800c04 	movi	r2,48
80208fa8:	d9002d17 	ldw	r4,180(sp)
80208fac:	d9402917 	ldw	r5,164(sp)
80208fb0:	d8802705 	stb	r2,156(sp)
80208fb4:	00801e04 	movi	r2,120
80208fb8:	d8802745 	stb	r2,157(sp)
80208fbc:	d8002785 	stb	zero,158(sp)
80208fc0:	20c00104 	addi	r3,r4,4
80208fc4:	24c00017 	ldw	r19,0(r4)
80208fc8:	002d883a 	mov	r22,zero
80208fcc:	90800094 	ori	r2,r18,2
80208fd0:	28029a16 	blt	r5,zero,80209a3c <___vfprintf_internal_r+0xdc0>
80208fd4:	00bfdfc4 	movi	r2,-129
80208fd8:	90a4703a 	and	r18,r18,r2
80208fdc:	d8c02d15 	stw	r3,180(sp)
80208fe0:	94800094 	ori	r18,r18,2
80208fe4:	9802871e 	bne	r19,zero,80209a04 <___vfprintf_internal_r+0xd88>
80208fe8:	00a008b4 	movhi	r2,32802
80208fec:	10b29804 	addi	r2,r2,-13728
80208ff0:	d8803915 	stw	r2,228(sp)
80208ff4:	04401e04 	movi	r17,120
80208ff8:	d8802917 	ldw	r2,164(sp)
80208ffc:	0039883a 	mov	fp,zero
80209000:	1001e926 	beq	r2,zero,802097a8 <___vfprintf_internal_r+0xb2c>
80209004:	0027883a 	mov	r19,zero
80209008:	002d883a 	mov	r22,zero
8020900c:	00020506 	br	80209824 <___vfprintf_internal_r+0xba8>
80209010:	d9002c17 	ldw	r4,176(sp)
80209014:	b80b883a 	mov	r5,r23
80209018:	020af4c0 	call	8020af4c <__swsetup_r>
8020901c:	1005ac1e 	bne	r2,zero,8020a6d0 <___vfprintf_internal_r+0x1a54>
80209020:	b880030b 	ldhu	r2,12(r23)
80209024:	00c00284 	movi	r3,10
80209028:	1080068c 	andi	r2,r2,26
8020902c:	10ff3c1e 	bne	r2,r3,80208d20 <__reset+0xfa1e8d20>
80209030:	b880038f 	ldh	r2,14(r23)
80209034:	103f3a16 	blt	r2,zero,80208d20 <__reset+0xfa1e8d20>
80209038:	d9c02d17 	ldw	r7,180(sp)
8020903c:	d9002c17 	ldw	r4,176(sp)
80209040:	a80d883a 	mov	r6,r21
80209044:	b80b883a 	mov	r5,r23
80209048:	020ae900 	call	8020ae90 <__sbprintf>
8020904c:	00001106 	br	80209094 <___vfprintf_internal_r+0x418>
80209050:	d9002c17 	ldw	r4,176(sp)
80209054:	d9801e04 	addi	r6,sp,120
80209058:	b80b883a 	mov	r5,r23
8020905c:	021153c0 	call	8021153c <__sprint_r>
80209060:	1000081e 	bne	r2,zero,80209084 <___vfprintf_internal_r+0x408>
80209064:	da000404 	addi	r8,sp,16
80209068:	003f5306 	br	80208db8 <__reset+0xfa1e8db8>
8020906c:	d8802017 	ldw	r2,128(sp)
80209070:	10000426 	beq	r2,zero,80209084 <___vfprintf_internal_r+0x408>
80209074:	d9002c17 	ldw	r4,176(sp)
80209078:	d9801e04 	addi	r6,sp,120
8020907c:	b80b883a 	mov	r5,r23
80209080:	021153c0 	call	8021153c <__sprint_r>
80209084:	b880030b 	ldhu	r2,12(r23)
80209088:	1080100c 	andi	r2,r2,64
8020908c:	1005901e 	bne	r2,zero,8020a6d0 <___vfprintf_internal_r+0x1a54>
80209090:	d8802f17 	ldw	r2,188(sp)
80209094:	dfc04717 	ldw	ra,284(sp)
80209098:	df004617 	ldw	fp,280(sp)
8020909c:	ddc04517 	ldw	r23,276(sp)
802090a0:	dd804417 	ldw	r22,272(sp)
802090a4:	dd404317 	ldw	r21,268(sp)
802090a8:	dd004217 	ldw	r20,264(sp)
802090ac:	dcc04117 	ldw	r19,260(sp)
802090b0:	dc804017 	ldw	r18,256(sp)
802090b4:	dc403f17 	ldw	r17,252(sp)
802090b8:	dc003e17 	ldw	r16,248(sp)
802090bc:	dec04804 	addi	sp,sp,288
802090c0:	f800283a 	ret
802090c4:	d9002c17 	ldw	r4,176(sp)
802090c8:	020cf200 	call	8020cf20 <__sinit>
802090cc:	003f0406 	br	80208ce0 <__reset+0xfa1e8ce0>
802090d0:	d8802d17 	ldw	r2,180(sp)
802090d4:	d9002d17 	ldw	r4,180(sp)
802090d8:	10800017 	ldw	r2,0(r2)
802090dc:	d8803115 	stw	r2,196(sp)
802090e0:	20800104 	addi	r2,r4,4
802090e4:	d9003117 	ldw	r4,196(sp)
802090e8:	203fa716 	blt	r4,zero,80208f88 <__reset+0xfa1e8f88>
802090ec:	d8802d15 	stw	r2,180(sp)
802090f0:	ac400007 	ldb	r17,0(r21)
802090f4:	003f4206 	br	80208e00 <__reset+0xfa1e8e00>
802090f8:	ac400007 	ldb	r17,0(r21)
802090fc:	aac00044 	addi	r11,r21,1
80209100:	8a872826 	beq	r17,r10,8020ada4 <___vfprintf_internal_r+0x2128>
80209104:	88bff404 	addi	r2,r17,-48
80209108:	0009883a 	mov	r4,zero
8020910c:	30867d36 	bltu	r6,r2,8020ab04 <___vfprintf_internal_r+0x1e88>
80209110:	5c400007 	ldb	r17,0(r11)
80209114:	210002a4 	muli	r4,r4,10
80209118:	5d400044 	addi	r21,r11,1
8020911c:	a817883a 	mov	r11,r21
80209120:	2089883a 	add	r4,r4,r2
80209124:	88bff404 	addi	r2,r17,-48
80209128:	30bff92e 	bgeu	r6,r2,80209110 <__reset+0xfa1e9110>
8020912c:	2005c916 	blt	r4,zero,8020a854 <___vfprintf_internal_r+0x1bd8>
80209130:	d9002915 	stw	r4,164(sp)
80209134:	003f3306 	br	80208e04 <__reset+0xfa1e8e04>
80209138:	94802014 	ori	r18,r18,128
8020913c:	ac400007 	ldb	r17,0(r21)
80209140:	003f2f06 	br	80208e00 <__reset+0xfa1e8e00>
80209144:	a809883a 	mov	r4,r21
80209148:	d8003115 	stw	zero,196(sp)
8020914c:	88bff404 	addi	r2,r17,-48
80209150:	0017883a 	mov	r11,zero
80209154:	24400007 	ldb	r17,0(r4)
80209158:	5ac002a4 	muli	r11,r11,10
8020915c:	ad400044 	addi	r21,r21,1
80209160:	a809883a 	mov	r4,r21
80209164:	12d7883a 	add	r11,r2,r11
80209168:	88bff404 	addi	r2,r17,-48
8020916c:	30bff92e 	bgeu	r6,r2,80209154 <__reset+0xfa1e9154>
80209170:	dac03115 	stw	r11,196(sp)
80209174:	003f2306 	br	80208e04 <__reset+0xfa1e8e04>
80209178:	18c03fcc 	andi	r3,r3,255
8020917c:	18072b1e 	bne	r3,zero,8020ae2c <___vfprintf_internal_r+0x21b0>
80209180:	94800414 	ori	r18,r18,16
80209184:	9080080c 	andi	r2,r18,32
80209188:	10037b26 	beq	r2,zero,80209f78 <___vfprintf_internal_r+0x12fc>
8020918c:	d9402d17 	ldw	r5,180(sp)
80209190:	28800117 	ldw	r2,4(r5)
80209194:	2cc00017 	ldw	r19,0(r5)
80209198:	29400204 	addi	r5,r5,8
8020919c:	d9402d15 	stw	r5,180(sp)
802091a0:	102d883a 	mov	r22,r2
802091a4:	10044b16 	blt	r2,zero,8020a2d4 <___vfprintf_internal_r+0x1658>
802091a8:	d9402917 	ldw	r5,164(sp)
802091ac:	df002783 	ldbu	fp,158(sp)
802091b0:	2803bc16 	blt	r5,zero,8020a0a4 <___vfprintf_internal_r+0x1428>
802091b4:	00ffdfc4 	movi	r3,-129
802091b8:	9d84b03a 	or	r2,r19,r22
802091bc:	90e4703a 	and	r18,r18,r3
802091c0:	10017726 	beq	r2,zero,802097a0 <___vfprintf_internal_r+0xb24>
802091c4:	b0038326 	beq	r22,zero,80209fd4 <___vfprintf_internal_r+0x1358>
802091c8:	dc402a15 	stw	r17,168(sp)
802091cc:	dc001e04 	addi	r16,sp,120
802091d0:	b023883a 	mov	r17,r22
802091d4:	402d883a 	mov	r22,r8
802091d8:	9809883a 	mov	r4,r19
802091dc:	880b883a 	mov	r5,r17
802091e0:	01800284 	movi	r6,10
802091e4:	000f883a 	mov	r7,zero
802091e8:	02139340 	call	80213934 <__umoddi3>
802091ec:	10800c04 	addi	r2,r2,48
802091f0:	843fffc4 	addi	r16,r16,-1
802091f4:	9809883a 	mov	r4,r19
802091f8:	880b883a 	mov	r5,r17
802091fc:	80800005 	stb	r2,0(r16)
80209200:	01800284 	movi	r6,10
80209204:	000f883a 	mov	r7,zero
80209208:	02133bc0 	call	802133bc <__udivdi3>
8020920c:	1027883a 	mov	r19,r2
80209210:	10c4b03a 	or	r2,r2,r3
80209214:	1823883a 	mov	r17,r3
80209218:	103fef1e 	bne	r2,zero,802091d8 <__reset+0xfa1e91d8>
8020921c:	d8c02817 	ldw	r3,160(sp)
80209220:	dc402a17 	ldw	r17,168(sp)
80209224:	b011883a 	mov	r8,r22
80209228:	1c07c83a 	sub	r3,r3,r16
8020922c:	d8c02e15 	stw	r3,184(sp)
80209230:	00005906 	br	80209398 <___vfprintf_internal_r+0x71c>
80209234:	18c03fcc 	andi	r3,r3,255
80209238:	1806fa1e 	bne	r3,zero,8020ae24 <___vfprintf_internal_r+0x21a8>
8020923c:	9080020c 	andi	r2,r18,8
80209240:	10048a26 	beq	r2,zero,8020a46c <___vfprintf_internal_r+0x17f0>
80209244:	d8c02d17 	ldw	r3,180(sp)
80209248:	d9002d17 	ldw	r4,180(sp)
8020924c:	d9402d17 	ldw	r5,180(sp)
80209250:	18c00017 	ldw	r3,0(r3)
80209254:	21000117 	ldw	r4,4(r4)
80209258:	29400204 	addi	r5,r5,8
8020925c:	d8c03615 	stw	r3,216(sp)
80209260:	d9003815 	stw	r4,224(sp)
80209264:	d9402d15 	stw	r5,180(sp)
80209268:	d9003617 	ldw	r4,216(sp)
8020926c:	d9403817 	ldw	r5,224(sp)
80209270:	da003d15 	stw	r8,244(sp)
80209274:	04000044 	movi	r16,1
80209278:	020fd540 	call	8020fd54 <__fpclassifyd>
8020927c:	da003d17 	ldw	r8,244(sp)
80209280:	14041f1e 	bne	r2,r16,8020a300 <___vfprintf_internal_r+0x1684>
80209284:	d9003617 	ldw	r4,216(sp)
80209288:	d9403817 	ldw	r5,224(sp)
8020928c:	000d883a 	mov	r6,zero
80209290:	000f883a 	mov	r7,zero
80209294:	02153180 	call	80215318 <__ledf2>
80209298:	da003d17 	ldw	r8,244(sp)
8020929c:	1005be16 	blt	r2,zero,8020a998 <___vfprintf_internal_r+0x1d1c>
802092a0:	df002783 	ldbu	fp,158(sp)
802092a4:	008011c4 	movi	r2,71
802092a8:	1445330e 	bge	r2,r17,8020a778 <___vfprintf_internal_r+0x1afc>
802092ac:	042008b4 	movhi	r16,32802
802092b0:	84329004 	addi	r16,r16,-13760
802092b4:	00c000c4 	movi	r3,3
802092b8:	00bfdfc4 	movi	r2,-129
802092bc:	d8c02a15 	stw	r3,168(sp)
802092c0:	90a4703a 	and	r18,r18,r2
802092c4:	d8c02e15 	stw	r3,184(sp)
802092c8:	d8002915 	stw	zero,164(sp)
802092cc:	d8003215 	stw	zero,200(sp)
802092d0:	00003706 	br	802093b0 <___vfprintf_internal_r+0x734>
802092d4:	94800214 	ori	r18,r18,8
802092d8:	ac400007 	ldb	r17,0(r21)
802092dc:	003ec806 	br	80208e00 <__reset+0xfa1e8e00>
802092e0:	18c03fcc 	andi	r3,r3,255
802092e4:	1806db1e 	bne	r3,zero,8020ae54 <___vfprintf_internal_r+0x21d8>
802092e8:	94800414 	ori	r18,r18,16
802092ec:	9080080c 	andi	r2,r18,32
802092f0:	1002d826 	beq	r2,zero,80209e54 <___vfprintf_internal_r+0x11d8>
802092f4:	d9402d17 	ldw	r5,180(sp)
802092f8:	d8c02917 	ldw	r3,164(sp)
802092fc:	d8002785 	stb	zero,158(sp)
80209300:	28800204 	addi	r2,r5,8
80209304:	2cc00017 	ldw	r19,0(r5)
80209308:	2d800117 	ldw	r22,4(r5)
8020930c:	18048f16 	blt	r3,zero,8020a54c <___vfprintf_internal_r+0x18d0>
80209310:	013fdfc4 	movi	r4,-129
80209314:	9d86b03a 	or	r3,r19,r22
80209318:	d8802d15 	stw	r2,180(sp)
8020931c:	9124703a 	and	r18,r18,r4
80209320:	1802d91e 	bne	r3,zero,80209e88 <___vfprintf_internal_r+0x120c>
80209324:	d8c02917 	ldw	r3,164(sp)
80209328:	0039883a 	mov	fp,zero
8020932c:	1805c326 	beq	r3,zero,8020aa3c <___vfprintf_internal_r+0x1dc0>
80209330:	0027883a 	mov	r19,zero
80209334:	002d883a 	mov	r22,zero
80209338:	dc001e04 	addi	r16,sp,120
8020933c:	9806d0fa 	srli	r3,r19,3
80209340:	b008977a 	slli	r4,r22,29
80209344:	b02cd0fa 	srli	r22,r22,3
80209348:	9cc001cc 	andi	r19,r19,7
8020934c:	98800c04 	addi	r2,r19,48
80209350:	843fffc4 	addi	r16,r16,-1
80209354:	20e6b03a 	or	r19,r4,r3
80209358:	80800005 	stb	r2,0(r16)
8020935c:	9d86b03a 	or	r3,r19,r22
80209360:	183ff61e 	bne	r3,zero,8020933c <__reset+0xfa1e933c>
80209364:	90c0004c 	andi	r3,r18,1
80209368:	18013b26 	beq	r3,zero,80209858 <___vfprintf_internal_r+0xbdc>
8020936c:	10803fcc 	andi	r2,r2,255
80209370:	1080201c 	xori	r2,r2,128
80209374:	10bfe004 	addi	r2,r2,-128
80209378:	00c00c04 	movi	r3,48
8020937c:	10c13626 	beq	r2,r3,80209858 <___vfprintf_internal_r+0xbdc>
80209380:	80ffffc5 	stb	r3,-1(r16)
80209384:	d8c02817 	ldw	r3,160(sp)
80209388:	80bfffc4 	addi	r2,r16,-1
8020938c:	1021883a 	mov	r16,r2
80209390:	1887c83a 	sub	r3,r3,r2
80209394:	d8c02e15 	stw	r3,184(sp)
80209398:	d8802e17 	ldw	r2,184(sp)
8020939c:	d9002917 	ldw	r4,164(sp)
802093a0:	1100010e 	bge	r2,r4,802093a8 <___vfprintf_internal_r+0x72c>
802093a4:	2005883a 	mov	r2,r4
802093a8:	d8802a15 	stw	r2,168(sp)
802093ac:	d8003215 	stw	zero,200(sp)
802093b0:	e7003fcc 	andi	fp,fp,255
802093b4:	e700201c 	xori	fp,fp,128
802093b8:	e73fe004 	addi	fp,fp,-128
802093bc:	e0000326 	beq	fp,zero,802093cc <___vfprintf_internal_r+0x750>
802093c0:	d8c02a17 	ldw	r3,168(sp)
802093c4:	18c00044 	addi	r3,r3,1
802093c8:	d8c02a15 	stw	r3,168(sp)
802093cc:	90c0008c 	andi	r3,r18,2
802093d0:	d8c02b15 	stw	r3,172(sp)
802093d4:	18000326 	beq	r3,zero,802093e4 <___vfprintf_internal_r+0x768>
802093d8:	d8c02a17 	ldw	r3,168(sp)
802093dc:	18c00084 	addi	r3,r3,2
802093e0:	d8c02a15 	stw	r3,168(sp)
802093e4:	90c0210c 	andi	r3,r18,132
802093e8:	d8c03015 	stw	r3,192(sp)
802093ec:	1801a31e 	bne	r3,zero,80209a7c <___vfprintf_internal_r+0xe00>
802093f0:	d9003117 	ldw	r4,196(sp)
802093f4:	d8c02a17 	ldw	r3,168(sp)
802093f8:	20e7c83a 	sub	r19,r4,r3
802093fc:	04c19f0e 	bge	zero,r19,80209a7c <___vfprintf_internal_r+0xe00>
80209400:	02400404 	movi	r9,16
80209404:	d8c02017 	ldw	r3,128(sp)
80209408:	d8801f17 	ldw	r2,124(sp)
8020940c:	4cc50d0e 	bge	r9,r19,8020a844 <___vfprintf_internal_r+0x1bc8>
80209410:	016008b4 	movhi	r5,32802
80209414:	2972ab84 	addi	r5,r5,-13650
80209418:	dc403b15 	stw	r17,236(sp)
8020941c:	d9403515 	stw	r5,212(sp)
80209420:	9823883a 	mov	r17,r19
80209424:	482d883a 	mov	r22,r9
80209428:	9027883a 	mov	r19,r18
8020942c:	070001c4 	movi	fp,7
80209430:	8025883a 	mov	r18,r16
80209434:	dc002c17 	ldw	r16,176(sp)
80209438:	00000306 	br	80209448 <___vfprintf_internal_r+0x7cc>
8020943c:	8c7ffc04 	addi	r17,r17,-16
80209440:	42000204 	addi	r8,r8,8
80209444:	b440130e 	bge	r22,r17,80209494 <___vfprintf_internal_r+0x818>
80209448:	012008b4 	movhi	r4,32802
8020944c:	18c00404 	addi	r3,r3,16
80209450:	10800044 	addi	r2,r2,1
80209454:	2132ab84 	addi	r4,r4,-13650
80209458:	41000015 	stw	r4,0(r8)
8020945c:	45800115 	stw	r22,4(r8)
80209460:	d8c02015 	stw	r3,128(sp)
80209464:	d8801f15 	stw	r2,124(sp)
80209468:	e0bff40e 	bge	fp,r2,8020943c <__reset+0xfa1e943c>
8020946c:	d9801e04 	addi	r6,sp,120
80209470:	b80b883a 	mov	r5,r23
80209474:	8009883a 	mov	r4,r16
80209478:	021153c0 	call	8021153c <__sprint_r>
8020947c:	103f011e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
80209480:	8c7ffc04 	addi	r17,r17,-16
80209484:	d8c02017 	ldw	r3,128(sp)
80209488:	d8801f17 	ldw	r2,124(sp)
8020948c:	da000404 	addi	r8,sp,16
80209490:	b47fed16 	blt	r22,r17,80209448 <__reset+0xfa1e9448>
80209494:	9021883a 	mov	r16,r18
80209498:	9825883a 	mov	r18,r19
8020949c:	8827883a 	mov	r19,r17
802094a0:	dc403b17 	ldw	r17,236(sp)
802094a4:	d9403517 	ldw	r5,212(sp)
802094a8:	98c7883a 	add	r3,r19,r3
802094ac:	10800044 	addi	r2,r2,1
802094b0:	41400015 	stw	r5,0(r8)
802094b4:	44c00115 	stw	r19,4(r8)
802094b8:	d8c02015 	stw	r3,128(sp)
802094bc:	d8801f15 	stw	r2,124(sp)
802094c0:	010001c4 	movi	r4,7
802094c4:	2082a316 	blt	r4,r2,80209f54 <___vfprintf_internal_r+0x12d8>
802094c8:	df002787 	ldb	fp,158(sp)
802094cc:	42000204 	addi	r8,r8,8
802094d0:	e0000c26 	beq	fp,zero,80209504 <___vfprintf_internal_r+0x888>
802094d4:	d8801f17 	ldw	r2,124(sp)
802094d8:	d9002784 	addi	r4,sp,158
802094dc:	18c00044 	addi	r3,r3,1
802094e0:	10800044 	addi	r2,r2,1
802094e4:	41000015 	stw	r4,0(r8)
802094e8:	01000044 	movi	r4,1
802094ec:	41000115 	stw	r4,4(r8)
802094f0:	d8c02015 	stw	r3,128(sp)
802094f4:	d8801f15 	stw	r2,124(sp)
802094f8:	010001c4 	movi	r4,7
802094fc:	20823c16 	blt	r4,r2,80209df0 <___vfprintf_internal_r+0x1174>
80209500:	42000204 	addi	r8,r8,8
80209504:	d8802b17 	ldw	r2,172(sp)
80209508:	10000c26 	beq	r2,zero,8020953c <___vfprintf_internal_r+0x8c0>
8020950c:	d8801f17 	ldw	r2,124(sp)
80209510:	d9002704 	addi	r4,sp,156
80209514:	18c00084 	addi	r3,r3,2
80209518:	10800044 	addi	r2,r2,1
8020951c:	41000015 	stw	r4,0(r8)
80209520:	01000084 	movi	r4,2
80209524:	41000115 	stw	r4,4(r8)
80209528:	d8c02015 	stw	r3,128(sp)
8020952c:	d8801f15 	stw	r2,124(sp)
80209530:	010001c4 	movi	r4,7
80209534:	20823616 	blt	r4,r2,80209e10 <___vfprintf_internal_r+0x1194>
80209538:	42000204 	addi	r8,r8,8
8020953c:	d9003017 	ldw	r4,192(sp)
80209540:	00802004 	movi	r2,128
80209544:	20819926 	beq	r4,r2,80209bac <___vfprintf_internal_r+0xf30>
80209548:	d9402917 	ldw	r5,164(sp)
8020954c:	d8802e17 	ldw	r2,184(sp)
80209550:	28adc83a 	sub	r22,r5,r2
80209554:	0580310e 	bge	zero,r22,8020961c <___vfprintf_internal_r+0x9a0>
80209558:	07000404 	movi	fp,16
8020955c:	d8801f17 	ldw	r2,124(sp)
80209560:	e584140e 	bge	fp,r22,8020a5b4 <___vfprintf_internal_r+0x1938>
80209564:	016008b4 	movhi	r5,32802
80209568:	2972a784 	addi	r5,r5,-13666
8020956c:	dc402915 	stw	r17,164(sp)
80209570:	d9402b15 	stw	r5,172(sp)
80209574:	b023883a 	mov	r17,r22
80209578:	04c001c4 	movi	r19,7
8020957c:	a82d883a 	mov	r22,r21
80209580:	902b883a 	mov	r21,r18
80209584:	8025883a 	mov	r18,r16
80209588:	dc002c17 	ldw	r16,176(sp)
8020958c:	00000306 	br	8020959c <___vfprintf_internal_r+0x920>
80209590:	8c7ffc04 	addi	r17,r17,-16
80209594:	42000204 	addi	r8,r8,8
80209598:	e440110e 	bge	fp,r17,802095e0 <___vfprintf_internal_r+0x964>
8020959c:	18c00404 	addi	r3,r3,16
802095a0:	10800044 	addi	r2,r2,1
802095a4:	45000015 	stw	r20,0(r8)
802095a8:	47000115 	stw	fp,4(r8)
802095ac:	d8c02015 	stw	r3,128(sp)
802095b0:	d8801f15 	stw	r2,124(sp)
802095b4:	98bff60e 	bge	r19,r2,80209590 <__reset+0xfa1e9590>
802095b8:	d9801e04 	addi	r6,sp,120
802095bc:	b80b883a 	mov	r5,r23
802095c0:	8009883a 	mov	r4,r16
802095c4:	021153c0 	call	8021153c <__sprint_r>
802095c8:	103eae1e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
802095cc:	8c7ffc04 	addi	r17,r17,-16
802095d0:	d8c02017 	ldw	r3,128(sp)
802095d4:	d8801f17 	ldw	r2,124(sp)
802095d8:	da000404 	addi	r8,sp,16
802095dc:	e47fef16 	blt	fp,r17,8020959c <__reset+0xfa1e959c>
802095e0:	9021883a 	mov	r16,r18
802095e4:	a825883a 	mov	r18,r21
802095e8:	b02b883a 	mov	r21,r22
802095ec:	882d883a 	mov	r22,r17
802095f0:	dc402917 	ldw	r17,164(sp)
802095f4:	d9002b17 	ldw	r4,172(sp)
802095f8:	1d87883a 	add	r3,r3,r22
802095fc:	10800044 	addi	r2,r2,1
80209600:	41000015 	stw	r4,0(r8)
80209604:	45800115 	stw	r22,4(r8)
80209608:	d8c02015 	stw	r3,128(sp)
8020960c:	d8801f15 	stw	r2,124(sp)
80209610:	010001c4 	movi	r4,7
80209614:	2081ee16 	blt	r4,r2,80209dd0 <___vfprintf_internal_r+0x1154>
80209618:	42000204 	addi	r8,r8,8
8020961c:	9080400c 	andi	r2,r18,256
80209620:	1001181e 	bne	r2,zero,80209a84 <___vfprintf_internal_r+0xe08>
80209624:	d9402e17 	ldw	r5,184(sp)
80209628:	d8801f17 	ldw	r2,124(sp)
8020962c:	44000015 	stw	r16,0(r8)
80209630:	1947883a 	add	r3,r3,r5
80209634:	10800044 	addi	r2,r2,1
80209638:	41400115 	stw	r5,4(r8)
8020963c:	d8c02015 	stw	r3,128(sp)
80209640:	d8801f15 	stw	r2,124(sp)
80209644:	010001c4 	movi	r4,7
80209648:	2081d316 	blt	r4,r2,80209d98 <___vfprintf_internal_r+0x111c>
8020964c:	42000204 	addi	r8,r8,8
80209650:	9480010c 	andi	r18,r18,4
80209654:	90003226 	beq	r18,zero,80209720 <___vfprintf_internal_r+0xaa4>
80209658:	d9403117 	ldw	r5,196(sp)
8020965c:	d8802a17 	ldw	r2,168(sp)
80209660:	28a1c83a 	sub	r16,r5,r2
80209664:	04002e0e 	bge	zero,r16,80209720 <___vfprintf_internal_r+0xaa4>
80209668:	04400404 	movi	r17,16
8020966c:	d8801f17 	ldw	r2,124(sp)
80209670:	8c04a20e 	bge	r17,r16,8020a8fc <___vfprintf_internal_r+0x1c80>
80209674:	016008b4 	movhi	r5,32802
80209678:	2972ab84 	addi	r5,r5,-13650
8020967c:	d9403515 	stw	r5,212(sp)
80209680:	048001c4 	movi	r18,7
80209684:	dcc02c17 	ldw	r19,176(sp)
80209688:	00000306 	br	80209698 <___vfprintf_internal_r+0xa1c>
8020968c:	843ffc04 	addi	r16,r16,-16
80209690:	42000204 	addi	r8,r8,8
80209694:	8c00130e 	bge	r17,r16,802096e4 <___vfprintf_internal_r+0xa68>
80209698:	012008b4 	movhi	r4,32802
8020969c:	18c00404 	addi	r3,r3,16
802096a0:	10800044 	addi	r2,r2,1
802096a4:	2132ab84 	addi	r4,r4,-13650
802096a8:	41000015 	stw	r4,0(r8)
802096ac:	44400115 	stw	r17,4(r8)
802096b0:	d8c02015 	stw	r3,128(sp)
802096b4:	d8801f15 	stw	r2,124(sp)
802096b8:	90bff40e 	bge	r18,r2,8020968c <__reset+0xfa1e968c>
802096bc:	d9801e04 	addi	r6,sp,120
802096c0:	b80b883a 	mov	r5,r23
802096c4:	9809883a 	mov	r4,r19
802096c8:	021153c0 	call	8021153c <__sprint_r>
802096cc:	103e6d1e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
802096d0:	843ffc04 	addi	r16,r16,-16
802096d4:	d8c02017 	ldw	r3,128(sp)
802096d8:	d8801f17 	ldw	r2,124(sp)
802096dc:	da000404 	addi	r8,sp,16
802096e0:	8c3fed16 	blt	r17,r16,80209698 <__reset+0xfa1e9698>
802096e4:	d9403517 	ldw	r5,212(sp)
802096e8:	1c07883a 	add	r3,r3,r16
802096ec:	10800044 	addi	r2,r2,1
802096f0:	41400015 	stw	r5,0(r8)
802096f4:	44000115 	stw	r16,4(r8)
802096f8:	d8c02015 	stw	r3,128(sp)
802096fc:	d8801f15 	stw	r2,124(sp)
80209700:	010001c4 	movi	r4,7
80209704:	2080060e 	bge	r4,r2,80209720 <___vfprintf_internal_r+0xaa4>
80209708:	d9002c17 	ldw	r4,176(sp)
8020970c:	d9801e04 	addi	r6,sp,120
80209710:	b80b883a 	mov	r5,r23
80209714:	021153c0 	call	8021153c <__sprint_r>
80209718:	103e5a1e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
8020971c:	d8c02017 	ldw	r3,128(sp)
80209720:	d8803117 	ldw	r2,196(sp)
80209724:	d9002a17 	ldw	r4,168(sp)
80209728:	1100010e 	bge	r2,r4,80209730 <___vfprintf_internal_r+0xab4>
8020972c:	2005883a 	mov	r2,r4
80209730:	d9402f17 	ldw	r5,188(sp)
80209734:	288b883a 	add	r5,r5,r2
80209738:	d9402f15 	stw	r5,188(sp)
8020973c:	18019e1e 	bne	r3,zero,80209db8 <___vfprintf_internal_r+0x113c>
80209740:	a8800007 	ldb	r2,0(r21)
80209744:	d8001f15 	stw	zero,124(sp)
80209748:	da000404 	addi	r8,sp,16
8020974c:	103d851e 	bne	r2,zero,80208d64 <__reset+0xfa1e8d64>
80209750:	a821883a 	mov	r16,r21
80209754:	003d9b06 	br	80208dc4 <__reset+0xfa1e8dc4>
80209758:	18c03fcc 	andi	r3,r3,255
8020975c:	1805c11e 	bne	r3,zero,8020ae64 <___vfprintf_internal_r+0x21e8>
80209760:	94800414 	ori	r18,r18,16
80209764:	9080080c 	andi	r2,r18,32
80209768:	10020c26 	beq	r2,zero,80209f9c <___vfprintf_internal_r+0x1320>
8020976c:	d8802d17 	ldw	r2,180(sp)
80209770:	d9002917 	ldw	r4,164(sp)
80209774:	d8002785 	stb	zero,158(sp)
80209778:	10c00204 	addi	r3,r2,8
8020977c:	14c00017 	ldw	r19,0(r2)
80209780:	15800117 	ldw	r22,4(r2)
80209784:	20040f16 	blt	r4,zero,8020a7c4 <___vfprintf_internal_r+0x1b48>
80209788:	013fdfc4 	movi	r4,-129
8020978c:	9d84b03a 	or	r2,r19,r22
80209790:	d8c02d15 	stw	r3,180(sp)
80209794:	9124703a 	and	r18,r18,r4
80209798:	0039883a 	mov	fp,zero
8020979c:	103e891e 	bne	r2,zero,802091c4 <__reset+0xfa1e91c4>
802097a0:	d9002917 	ldw	r4,164(sp)
802097a4:	2002c11e 	bne	r4,zero,8020a2ac <___vfprintf_internal_r+0x1630>
802097a8:	d8002915 	stw	zero,164(sp)
802097ac:	d8002e15 	stw	zero,184(sp)
802097b0:	dc001e04 	addi	r16,sp,120
802097b4:	003ef806 	br	80209398 <__reset+0xfa1e9398>
802097b8:	18c03fcc 	andi	r3,r3,255
802097bc:	18059d1e 	bne	r3,zero,8020ae34 <___vfprintf_internal_r+0x21b8>
802097c0:	016008b4 	movhi	r5,32802
802097c4:	29729304 	addi	r5,r5,-13748
802097c8:	d9403915 	stw	r5,228(sp)
802097cc:	9080080c 	andi	r2,r18,32
802097d0:	10005226 	beq	r2,zero,8020991c <___vfprintf_internal_r+0xca0>
802097d4:	d8802d17 	ldw	r2,180(sp)
802097d8:	14c00017 	ldw	r19,0(r2)
802097dc:	15800117 	ldw	r22,4(r2)
802097e0:	10800204 	addi	r2,r2,8
802097e4:	d8802d15 	stw	r2,180(sp)
802097e8:	9080004c 	andi	r2,r18,1
802097ec:	10019026 	beq	r2,zero,80209e30 <___vfprintf_internal_r+0x11b4>
802097f0:	9d84b03a 	or	r2,r19,r22
802097f4:	10036926 	beq	r2,zero,8020a59c <___vfprintf_internal_r+0x1920>
802097f8:	d8c02917 	ldw	r3,164(sp)
802097fc:	00800c04 	movi	r2,48
80209800:	d8802705 	stb	r2,156(sp)
80209804:	dc402745 	stb	r17,157(sp)
80209808:	d8002785 	stb	zero,158(sp)
8020980c:	90800094 	ori	r2,r18,2
80209810:	18045d16 	blt	r3,zero,8020a988 <___vfprintf_internal_r+0x1d0c>
80209814:	00bfdfc4 	movi	r2,-129
80209818:	90a4703a 	and	r18,r18,r2
8020981c:	94800094 	ori	r18,r18,2
80209820:	0039883a 	mov	fp,zero
80209824:	d9003917 	ldw	r4,228(sp)
80209828:	dc001e04 	addi	r16,sp,120
8020982c:	988003cc 	andi	r2,r19,15
80209830:	b006973a 	slli	r3,r22,28
80209834:	2085883a 	add	r2,r4,r2
80209838:	9826d13a 	srli	r19,r19,4
8020983c:	10800003 	ldbu	r2,0(r2)
80209840:	b02cd13a 	srli	r22,r22,4
80209844:	843fffc4 	addi	r16,r16,-1
80209848:	1ce6b03a 	or	r19,r3,r19
8020984c:	80800005 	stb	r2,0(r16)
80209850:	9d84b03a 	or	r2,r19,r22
80209854:	103ff51e 	bne	r2,zero,8020982c <__reset+0xfa1e982c>
80209858:	d8c02817 	ldw	r3,160(sp)
8020985c:	1c07c83a 	sub	r3,r3,r16
80209860:	d8c02e15 	stw	r3,184(sp)
80209864:	003ecc06 	br	80209398 <__reset+0xfa1e9398>
80209868:	18c03fcc 	andi	r3,r3,255
8020986c:	183e9f26 	beq	r3,zero,802092ec <__reset+0xfa1e92ec>
80209870:	d9c02785 	stb	r7,158(sp)
80209874:	003e9d06 	br	802092ec <__reset+0xfa1e92ec>
80209878:	00c00044 	movi	r3,1
8020987c:	01c00ac4 	movi	r7,43
80209880:	ac400007 	ldb	r17,0(r21)
80209884:	003d5e06 	br	80208e00 <__reset+0xfa1e8e00>
80209888:	94800814 	ori	r18,r18,32
8020988c:	ac400007 	ldb	r17,0(r21)
80209890:	003d5b06 	br	80208e00 <__reset+0xfa1e8e00>
80209894:	d8c02d17 	ldw	r3,180(sp)
80209898:	d8002785 	stb	zero,158(sp)
8020989c:	1c000017 	ldw	r16,0(r3)
802098a0:	1cc00104 	addi	r19,r3,4
802098a4:	80041926 	beq	r16,zero,8020a90c <___vfprintf_internal_r+0x1c90>
802098a8:	d9002917 	ldw	r4,164(sp)
802098ac:	2003d016 	blt	r4,zero,8020a7f0 <___vfprintf_internal_r+0x1b74>
802098b0:	200d883a 	mov	r6,r4
802098b4:	000b883a 	mov	r5,zero
802098b8:	8009883a 	mov	r4,r16
802098bc:	da003d15 	stw	r8,244(sp)
802098c0:	020e48c0 	call	8020e48c <memchr>
802098c4:	da003d17 	ldw	r8,244(sp)
802098c8:	10045426 	beq	r2,zero,8020aa1c <___vfprintf_internal_r+0x1da0>
802098cc:	1405c83a 	sub	r2,r2,r16
802098d0:	d8802e15 	stw	r2,184(sp)
802098d4:	1003cc16 	blt	r2,zero,8020a808 <___vfprintf_internal_r+0x1b8c>
802098d8:	df002783 	ldbu	fp,158(sp)
802098dc:	d8802a15 	stw	r2,168(sp)
802098e0:	dcc02d15 	stw	r19,180(sp)
802098e4:	d8002915 	stw	zero,164(sp)
802098e8:	d8003215 	stw	zero,200(sp)
802098ec:	003eb006 	br	802093b0 <__reset+0xfa1e93b0>
802098f0:	18c03fcc 	andi	r3,r3,255
802098f4:	183f9b26 	beq	r3,zero,80209764 <__reset+0xfa1e9764>
802098f8:	d9c02785 	stb	r7,158(sp)
802098fc:	003f9906 	br	80209764 <__reset+0xfa1e9764>
80209900:	18c03fcc 	andi	r3,r3,255
80209904:	1805551e 	bne	r3,zero,8020ae5c <___vfprintf_internal_r+0x21e0>
80209908:	016008b4 	movhi	r5,32802
8020990c:	29729804 	addi	r5,r5,-13728
80209910:	d9403915 	stw	r5,228(sp)
80209914:	9080080c 	andi	r2,r18,32
80209918:	103fae1e 	bne	r2,zero,802097d4 <__reset+0xfa1e97d4>
8020991c:	9080040c 	andi	r2,r18,16
80209920:	1002de26 	beq	r2,zero,8020a49c <___vfprintf_internal_r+0x1820>
80209924:	d8c02d17 	ldw	r3,180(sp)
80209928:	002d883a 	mov	r22,zero
8020992c:	1cc00017 	ldw	r19,0(r3)
80209930:	18c00104 	addi	r3,r3,4
80209934:	d8c02d15 	stw	r3,180(sp)
80209938:	003fab06 	br	802097e8 <__reset+0xfa1e97e8>
8020993c:	38803fcc 	andi	r2,r7,255
80209940:	1080201c 	xori	r2,r2,128
80209944:	10bfe004 	addi	r2,r2,-128
80209948:	1002d21e 	bne	r2,zero,8020a494 <___vfprintf_internal_r+0x1818>
8020994c:	00c00044 	movi	r3,1
80209950:	01c00804 	movi	r7,32
80209954:	ac400007 	ldb	r17,0(r21)
80209958:	003d2906 	br	80208e00 <__reset+0xfa1e8e00>
8020995c:	94800054 	ori	r18,r18,1
80209960:	ac400007 	ldb	r17,0(r21)
80209964:	003d2606 	br	80208e00 <__reset+0xfa1e8e00>
80209968:	18c03fcc 	andi	r3,r3,255
8020996c:	183e0526 	beq	r3,zero,80209184 <__reset+0xfa1e9184>
80209970:	d9c02785 	stb	r7,158(sp)
80209974:	003e0306 	br	80209184 <__reset+0xfa1e9184>
80209978:	94801014 	ori	r18,r18,64
8020997c:	ac400007 	ldb	r17,0(r21)
80209980:	003d1f06 	br	80208e00 <__reset+0xfa1e8e00>
80209984:	ac400007 	ldb	r17,0(r21)
80209988:	8a438726 	beq	r17,r9,8020a7a8 <___vfprintf_internal_r+0x1b2c>
8020998c:	94800414 	ori	r18,r18,16
80209990:	003d1b06 	br	80208e00 <__reset+0xfa1e8e00>
80209994:	18c03fcc 	andi	r3,r3,255
80209998:	1805341e 	bne	r3,zero,8020ae6c <___vfprintf_internal_r+0x21f0>
8020999c:	9080080c 	andi	r2,r18,32
802099a0:	1002cd26 	beq	r2,zero,8020a4d8 <___vfprintf_internal_r+0x185c>
802099a4:	d9402d17 	ldw	r5,180(sp)
802099a8:	d9002f17 	ldw	r4,188(sp)
802099ac:	28800017 	ldw	r2,0(r5)
802099b0:	2007d7fa 	srai	r3,r4,31
802099b4:	29400104 	addi	r5,r5,4
802099b8:	d9402d15 	stw	r5,180(sp)
802099bc:	11000015 	stw	r4,0(r2)
802099c0:	10c00115 	stw	r3,4(r2)
802099c4:	003ce506 	br	80208d5c <__reset+0xfa1e8d5c>
802099c8:	d8c02d17 	ldw	r3,180(sp)
802099cc:	d9002d17 	ldw	r4,180(sp)
802099d0:	d8002785 	stb	zero,158(sp)
802099d4:	18800017 	ldw	r2,0(r3)
802099d8:	21000104 	addi	r4,r4,4
802099dc:	00c00044 	movi	r3,1
802099e0:	d8c02a15 	stw	r3,168(sp)
802099e4:	d8801405 	stb	r2,80(sp)
802099e8:	d9002d15 	stw	r4,180(sp)
802099ec:	d8c02e15 	stw	r3,184(sp)
802099f0:	d8002915 	stw	zero,164(sp)
802099f4:	d8003215 	stw	zero,200(sp)
802099f8:	dc001404 	addi	r16,sp,80
802099fc:	0039883a 	mov	fp,zero
80209a00:	003e7206 	br	802093cc <__reset+0xfa1e93cc>
80209a04:	012008b4 	movhi	r4,32802
80209a08:	21329804 	addi	r4,r4,-13728
80209a0c:	0039883a 	mov	fp,zero
80209a10:	d9003915 	stw	r4,228(sp)
80209a14:	04401e04 	movi	r17,120
80209a18:	003f8206 	br	80209824 <__reset+0xfa1e9824>
80209a1c:	18c03fcc 	andi	r3,r3,255
80209a20:	1805061e 	bne	r3,zero,8020ae3c <___vfprintf_internal_r+0x21c0>
80209a24:	883d9126 	beq	r17,zero,8020906c <__reset+0xfa1e906c>
80209a28:	00c00044 	movi	r3,1
80209a2c:	d8c02a15 	stw	r3,168(sp)
80209a30:	dc401405 	stb	r17,80(sp)
80209a34:	d8002785 	stb	zero,158(sp)
80209a38:	003fec06 	br	802099ec <__reset+0xfa1e99ec>
80209a3c:	016008b4 	movhi	r5,32802
80209a40:	29729804 	addi	r5,r5,-13728
80209a44:	d9403915 	stw	r5,228(sp)
80209a48:	d8c02d15 	stw	r3,180(sp)
80209a4c:	1025883a 	mov	r18,r2
80209a50:	04401e04 	movi	r17,120
80209a54:	9d84b03a 	or	r2,r19,r22
80209a58:	1000fc1e 	bne	r2,zero,80209e4c <___vfprintf_internal_r+0x11d0>
80209a5c:	0039883a 	mov	fp,zero
80209a60:	00800084 	movi	r2,2
80209a64:	10803fcc 	andi	r2,r2,255
80209a68:	00c00044 	movi	r3,1
80209a6c:	10c20f26 	beq	r2,r3,8020a2ac <___vfprintf_internal_r+0x1630>
80209a70:	00c00084 	movi	r3,2
80209a74:	10fd6326 	beq	r2,r3,80209004 <__reset+0xfa1e9004>
80209a78:	003e2d06 	br	80209330 <__reset+0xfa1e9330>
80209a7c:	d8c02017 	ldw	r3,128(sp)
80209a80:	003e9306 	br	802094d0 <__reset+0xfa1e94d0>
80209a84:	00801944 	movi	r2,101
80209a88:	14407e0e 	bge	r2,r17,80209c84 <___vfprintf_internal_r+0x1008>
80209a8c:	d9003617 	ldw	r4,216(sp)
80209a90:	d9403817 	ldw	r5,224(sp)
80209a94:	000d883a 	mov	r6,zero
80209a98:	000f883a 	mov	r7,zero
80209a9c:	d8c03c15 	stw	r3,240(sp)
80209aa0:	da003d15 	stw	r8,244(sp)
80209aa4:	02151b40 	call	802151b4 <__eqdf2>
80209aa8:	d8c03c17 	ldw	r3,240(sp)
80209aac:	da003d17 	ldw	r8,244(sp)
80209ab0:	1000f71e 	bne	r2,zero,80209e90 <___vfprintf_internal_r+0x1214>
80209ab4:	d8801f17 	ldw	r2,124(sp)
80209ab8:	012008b4 	movhi	r4,32802
80209abc:	21329f04 	addi	r4,r4,-13700
80209ac0:	18c00044 	addi	r3,r3,1
80209ac4:	10800044 	addi	r2,r2,1
80209ac8:	41000015 	stw	r4,0(r8)
80209acc:	01000044 	movi	r4,1
80209ad0:	41000115 	stw	r4,4(r8)
80209ad4:	d8c02015 	stw	r3,128(sp)
80209ad8:	d8801f15 	stw	r2,124(sp)
80209adc:	010001c4 	movi	r4,7
80209ae0:	2082b816 	blt	r4,r2,8020a5c4 <___vfprintf_internal_r+0x1948>
80209ae4:	42000204 	addi	r8,r8,8
80209ae8:	d8802617 	ldw	r2,152(sp)
80209aec:	d9403317 	ldw	r5,204(sp)
80209af0:	11400216 	blt	r2,r5,80209afc <___vfprintf_internal_r+0xe80>
80209af4:	9080004c 	andi	r2,r18,1
80209af8:	103ed526 	beq	r2,zero,80209650 <__reset+0xfa1e9650>
80209afc:	d8803717 	ldw	r2,220(sp)
80209b00:	d9003417 	ldw	r4,208(sp)
80209b04:	d9403717 	ldw	r5,220(sp)
80209b08:	1887883a 	add	r3,r3,r2
80209b0c:	d8801f17 	ldw	r2,124(sp)
80209b10:	41000015 	stw	r4,0(r8)
80209b14:	41400115 	stw	r5,4(r8)
80209b18:	10800044 	addi	r2,r2,1
80209b1c:	d8c02015 	stw	r3,128(sp)
80209b20:	d8801f15 	stw	r2,124(sp)
80209b24:	010001c4 	movi	r4,7
80209b28:	20832916 	blt	r4,r2,8020a7d0 <___vfprintf_internal_r+0x1b54>
80209b2c:	42000204 	addi	r8,r8,8
80209b30:	d8803317 	ldw	r2,204(sp)
80209b34:	143fffc4 	addi	r16,r2,-1
80209b38:	043ec50e 	bge	zero,r16,80209650 <__reset+0xfa1e9650>
80209b3c:	04400404 	movi	r17,16
80209b40:	d8801f17 	ldw	r2,124(sp)
80209b44:	8c00880e 	bge	r17,r16,80209d68 <___vfprintf_internal_r+0x10ec>
80209b48:	016008b4 	movhi	r5,32802
80209b4c:	2972a784 	addi	r5,r5,-13666
80209b50:	d9402b15 	stw	r5,172(sp)
80209b54:	058001c4 	movi	r22,7
80209b58:	dcc02c17 	ldw	r19,176(sp)
80209b5c:	00000306 	br	80209b6c <___vfprintf_internal_r+0xef0>
80209b60:	42000204 	addi	r8,r8,8
80209b64:	843ffc04 	addi	r16,r16,-16
80209b68:	8c00820e 	bge	r17,r16,80209d74 <___vfprintf_internal_r+0x10f8>
80209b6c:	18c00404 	addi	r3,r3,16
80209b70:	10800044 	addi	r2,r2,1
80209b74:	45000015 	stw	r20,0(r8)
80209b78:	44400115 	stw	r17,4(r8)
80209b7c:	d8c02015 	stw	r3,128(sp)
80209b80:	d8801f15 	stw	r2,124(sp)
80209b84:	b0bff60e 	bge	r22,r2,80209b60 <__reset+0xfa1e9b60>
80209b88:	d9801e04 	addi	r6,sp,120
80209b8c:	b80b883a 	mov	r5,r23
80209b90:	9809883a 	mov	r4,r19
80209b94:	021153c0 	call	8021153c <__sprint_r>
80209b98:	103d3a1e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
80209b9c:	d8c02017 	ldw	r3,128(sp)
80209ba0:	d8801f17 	ldw	r2,124(sp)
80209ba4:	da000404 	addi	r8,sp,16
80209ba8:	003fee06 	br	80209b64 <__reset+0xfa1e9b64>
80209bac:	d9403117 	ldw	r5,196(sp)
80209bb0:	d8802a17 	ldw	r2,168(sp)
80209bb4:	28adc83a 	sub	r22,r5,r2
80209bb8:	05be630e 	bge	zero,r22,80209548 <__reset+0xfa1e9548>
80209bbc:	07000404 	movi	fp,16
80209bc0:	d8801f17 	ldw	r2,124(sp)
80209bc4:	e5838f0e 	bge	fp,r22,8020aa04 <___vfprintf_internal_r+0x1d88>
80209bc8:	016008b4 	movhi	r5,32802
80209bcc:	2972a784 	addi	r5,r5,-13666
80209bd0:	dc403015 	stw	r17,192(sp)
80209bd4:	d9402b15 	stw	r5,172(sp)
80209bd8:	b023883a 	mov	r17,r22
80209bdc:	04c001c4 	movi	r19,7
80209be0:	a82d883a 	mov	r22,r21
80209be4:	902b883a 	mov	r21,r18
80209be8:	8025883a 	mov	r18,r16
80209bec:	dc002c17 	ldw	r16,176(sp)
80209bf0:	00000306 	br	80209c00 <___vfprintf_internal_r+0xf84>
80209bf4:	8c7ffc04 	addi	r17,r17,-16
80209bf8:	42000204 	addi	r8,r8,8
80209bfc:	e440110e 	bge	fp,r17,80209c44 <___vfprintf_internal_r+0xfc8>
80209c00:	18c00404 	addi	r3,r3,16
80209c04:	10800044 	addi	r2,r2,1
80209c08:	45000015 	stw	r20,0(r8)
80209c0c:	47000115 	stw	fp,4(r8)
80209c10:	d8c02015 	stw	r3,128(sp)
80209c14:	d8801f15 	stw	r2,124(sp)
80209c18:	98bff60e 	bge	r19,r2,80209bf4 <__reset+0xfa1e9bf4>
80209c1c:	d9801e04 	addi	r6,sp,120
80209c20:	b80b883a 	mov	r5,r23
80209c24:	8009883a 	mov	r4,r16
80209c28:	021153c0 	call	8021153c <__sprint_r>
80209c2c:	103d151e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
80209c30:	8c7ffc04 	addi	r17,r17,-16
80209c34:	d8c02017 	ldw	r3,128(sp)
80209c38:	d8801f17 	ldw	r2,124(sp)
80209c3c:	da000404 	addi	r8,sp,16
80209c40:	e47fef16 	blt	fp,r17,80209c00 <__reset+0xfa1e9c00>
80209c44:	9021883a 	mov	r16,r18
80209c48:	a825883a 	mov	r18,r21
80209c4c:	b02b883a 	mov	r21,r22
80209c50:	882d883a 	mov	r22,r17
80209c54:	dc403017 	ldw	r17,192(sp)
80209c58:	d9002b17 	ldw	r4,172(sp)
80209c5c:	1d87883a 	add	r3,r3,r22
80209c60:	10800044 	addi	r2,r2,1
80209c64:	41000015 	stw	r4,0(r8)
80209c68:	45800115 	stw	r22,4(r8)
80209c6c:	d8c02015 	stw	r3,128(sp)
80209c70:	d8801f15 	stw	r2,124(sp)
80209c74:	010001c4 	movi	r4,7
80209c78:	20818e16 	blt	r4,r2,8020a2b4 <___vfprintf_internal_r+0x1638>
80209c7c:	42000204 	addi	r8,r8,8
80209c80:	003e3106 	br	80209548 <__reset+0xfa1e9548>
80209c84:	d9403317 	ldw	r5,204(sp)
80209c88:	00800044 	movi	r2,1
80209c8c:	18c00044 	addi	r3,r3,1
80209c90:	1141530e 	bge	r2,r5,8020a1e0 <___vfprintf_internal_r+0x1564>
80209c94:	dc401f17 	ldw	r17,124(sp)
80209c98:	00800044 	movi	r2,1
80209c9c:	40800115 	stw	r2,4(r8)
80209ca0:	8c400044 	addi	r17,r17,1
80209ca4:	44000015 	stw	r16,0(r8)
80209ca8:	d8c02015 	stw	r3,128(sp)
80209cac:	dc401f15 	stw	r17,124(sp)
80209cb0:	008001c4 	movi	r2,7
80209cb4:	14416b16 	blt	r2,r17,8020a264 <___vfprintf_internal_r+0x15e8>
80209cb8:	42000204 	addi	r8,r8,8
80209cbc:	d8803717 	ldw	r2,220(sp)
80209cc0:	d9003417 	ldw	r4,208(sp)
80209cc4:	8c400044 	addi	r17,r17,1
80209cc8:	10c7883a 	add	r3,r2,r3
80209ccc:	40800115 	stw	r2,4(r8)
80209cd0:	41000015 	stw	r4,0(r8)
80209cd4:	d8c02015 	stw	r3,128(sp)
80209cd8:	dc401f15 	stw	r17,124(sp)
80209cdc:	008001c4 	movi	r2,7
80209ce0:	14416916 	blt	r2,r17,8020a288 <___vfprintf_internal_r+0x160c>
80209ce4:	45800204 	addi	r22,r8,8
80209ce8:	d9003617 	ldw	r4,216(sp)
80209cec:	d9403817 	ldw	r5,224(sp)
80209cf0:	000d883a 	mov	r6,zero
80209cf4:	000f883a 	mov	r7,zero
80209cf8:	d8c03c15 	stw	r3,240(sp)
80209cfc:	02151b40 	call	802151b4 <__eqdf2>
80209d00:	d8c03c17 	ldw	r3,240(sp)
80209d04:	1000bc26 	beq	r2,zero,80209ff8 <___vfprintf_internal_r+0x137c>
80209d08:	d9403317 	ldw	r5,204(sp)
80209d0c:	84000044 	addi	r16,r16,1
80209d10:	8c400044 	addi	r17,r17,1
80209d14:	28bfffc4 	addi	r2,r5,-1
80209d18:	1887883a 	add	r3,r3,r2
80209d1c:	b0800115 	stw	r2,4(r22)
80209d20:	b4000015 	stw	r16,0(r22)
80209d24:	d8c02015 	stw	r3,128(sp)
80209d28:	dc401f15 	stw	r17,124(sp)
80209d2c:	008001c4 	movi	r2,7
80209d30:	14414316 	blt	r2,r17,8020a240 <___vfprintf_internal_r+0x15c4>
80209d34:	b5800204 	addi	r22,r22,8
80209d38:	d9003a17 	ldw	r4,232(sp)
80209d3c:	df0022c4 	addi	fp,sp,139
80209d40:	8c400044 	addi	r17,r17,1
80209d44:	20c7883a 	add	r3,r4,r3
80209d48:	b7000015 	stw	fp,0(r22)
80209d4c:	b1000115 	stw	r4,4(r22)
80209d50:	d8c02015 	stw	r3,128(sp)
80209d54:	dc401f15 	stw	r17,124(sp)
80209d58:	008001c4 	movi	r2,7
80209d5c:	14400e16 	blt	r2,r17,80209d98 <___vfprintf_internal_r+0x111c>
80209d60:	b2000204 	addi	r8,r22,8
80209d64:	003e3a06 	br	80209650 <__reset+0xfa1e9650>
80209d68:	012008b4 	movhi	r4,32802
80209d6c:	2132a784 	addi	r4,r4,-13666
80209d70:	d9002b15 	stw	r4,172(sp)
80209d74:	d9002b17 	ldw	r4,172(sp)
80209d78:	1c07883a 	add	r3,r3,r16
80209d7c:	44000115 	stw	r16,4(r8)
80209d80:	41000015 	stw	r4,0(r8)
80209d84:	10800044 	addi	r2,r2,1
80209d88:	d8c02015 	stw	r3,128(sp)
80209d8c:	d8801f15 	stw	r2,124(sp)
80209d90:	010001c4 	movi	r4,7
80209d94:	20be2d0e 	bge	r4,r2,8020964c <__reset+0xfa1e964c>
80209d98:	d9002c17 	ldw	r4,176(sp)
80209d9c:	d9801e04 	addi	r6,sp,120
80209da0:	b80b883a 	mov	r5,r23
80209da4:	021153c0 	call	8021153c <__sprint_r>
80209da8:	103cb61e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
80209dac:	d8c02017 	ldw	r3,128(sp)
80209db0:	da000404 	addi	r8,sp,16
80209db4:	003e2606 	br	80209650 <__reset+0xfa1e9650>
80209db8:	d9002c17 	ldw	r4,176(sp)
80209dbc:	d9801e04 	addi	r6,sp,120
80209dc0:	b80b883a 	mov	r5,r23
80209dc4:	021153c0 	call	8021153c <__sprint_r>
80209dc8:	103e5d26 	beq	r2,zero,80209740 <__reset+0xfa1e9740>
80209dcc:	003cad06 	br	80209084 <__reset+0xfa1e9084>
80209dd0:	d9002c17 	ldw	r4,176(sp)
80209dd4:	d9801e04 	addi	r6,sp,120
80209dd8:	b80b883a 	mov	r5,r23
80209ddc:	021153c0 	call	8021153c <__sprint_r>
80209de0:	103ca81e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
80209de4:	d8c02017 	ldw	r3,128(sp)
80209de8:	da000404 	addi	r8,sp,16
80209dec:	003e0b06 	br	8020961c <__reset+0xfa1e961c>
80209df0:	d9002c17 	ldw	r4,176(sp)
80209df4:	d9801e04 	addi	r6,sp,120
80209df8:	b80b883a 	mov	r5,r23
80209dfc:	021153c0 	call	8021153c <__sprint_r>
80209e00:	103ca01e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
80209e04:	d8c02017 	ldw	r3,128(sp)
80209e08:	da000404 	addi	r8,sp,16
80209e0c:	003dbd06 	br	80209504 <__reset+0xfa1e9504>
80209e10:	d9002c17 	ldw	r4,176(sp)
80209e14:	d9801e04 	addi	r6,sp,120
80209e18:	b80b883a 	mov	r5,r23
80209e1c:	021153c0 	call	8021153c <__sprint_r>
80209e20:	103c981e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
80209e24:	d8c02017 	ldw	r3,128(sp)
80209e28:	da000404 	addi	r8,sp,16
80209e2c:	003dc306 	br	8020953c <__reset+0xfa1e953c>
80209e30:	d8802917 	ldw	r2,164(sp)
80209e34:	d8002785 	stb	zero,158(sp)
80209e38:	103f0616 	blt	r2,zero,80209a54 <__reset+0xfa1e9a54>
80209e3c:	00ffdfc4 	movi	r3,-129
80209e40:	9d84b03a 	or	r2,r19,r22
80209e44:	90e4703a 	and	r18,r18,r3
80209e48:	103c6b26 	beq	r2,zero,80208ff8 <__reset+0xfa1e8ff8>
80209e4c:	0039883a 	mov	fp,zero
80209e50:	003e7406 	br	80209824 <__reset+0xfa1e9824>
80209e54:	9080040c 	andi	r2,r18,16
80209e58:	1001b326 	beq	r2,zero,8020a528 <___vfprintf_internal_r+0x18ac>
80209e5c:	d9002d17 	ldw	r4,180(sp)
80209e60:	d9402917 	ldw	r5,164(sp)
80209e64:	d8002785 	stb	zero,158(sp)
80209e68:	20800104 	addi	r2,r4,4
80209e6c:	24c00017 	ldw	r19,0(r4)
80209e70:	002d883a 	mov	r22,zero
80209e74:	2801b516 	blt	r5,zero,8020a54c <___vfprintf_internal_r+0x18d0>
80209e78:	00ffdfc4 	movi	r3,-129
80209e7c:	d8802d15 	stw	r2,180(sp)
80209e80:	90e4703a 	and	r18,r18,r3
80209e84:	983d2726 	beq	r19,zero,80209324 <__reset+0xfa1e9324>
80209e88:	0039883a 	mov	fp,zero
80209e8c:	003d2a06 	br	80209338 <__reset+0xfa1e9338>
80209e90:	dc402617 	ldw	r17,152(sp)
80209e94:	0441d30e 	bge	zero,r17,8020a5e4 <___vfprintf_internal_r+0x1968>
80209e98:	dc403217 	ldw	r17,200(sp)
80209e9c:	d8803317 	ldw	r2,204(sp)
80209ea0:	1440010e 	bge	r2,r17,80209ea8 <___vfprintf_internal_r+0x122c>
80209ea4:	1023883a 	mov	r17,r2
80209ea8:	04400a0e 	bge	zero,r17,80209ed4 <___vfprintf_internal_r+0x1258>
80209eac:	d8801f17 	ldw	r2,124(sp)
80209eb0:	1c47883a 	add	r3,r3,r17
80209eb4:	44000015 	stw	r16,0(r8)
80209eb8:	10800044 	addi	r2,r2,1
80209ebc:	44400115 	stw	r17,4(r8)
80209ec0:	d8c02015 	stw	r3,128(sp)
80209ec4:	d8801f15 	stw	r2,124(sp)
80209ec8:	010001c4 	movi	r4,7
80209ecc:	20826516 	blt	r4,r2,8020a864 <___vfprintf_internal_r+0x1be8>
80209ed0:	42000204 	addi	r8,r8,8
80209ed4:	88026116 	blt	r17,zero,8020a85c <___vfprintf_internal_r+0x1be0>
80209ed8:	d9003217 	ldw	r4,200(sp)
80209edc:	2463c83a 	sub	r17,r4,r17
80209ee0:	04407b0e 	bge	zero,r17,8020a0d0 <___vfprintf_internal_r+0x1454>
80209ee4:	05800404 	movi	r22,16
80209ee8:	d8801f17 	ldw	r2,124(sp)
80209eec:	b4419d0e 	bge	r22,r17,8020a564 <___vfprintf_internal_r+0x18e8>
80209ef0:	012008b4 	movhi	r4,32802
80209ef4:	2132a784 	addi	r4,r4,-13666
80209ef8:	d9002b15 	stw	r4,172(sp)
80209efc:	070001c4 	movi	fp,7
80209f00:	dcc02c17 	ldw	r19,176(sp)
80209f04:	00000306 	br	80209f14 <___vfprintf_internal_r+0x1298>
80209f08:	42000204 	addi	r8,r8,8
80209f0c:	8c7ffc04 	addi	r17,r17,-16
80209f10:	b441970e 	bge	r22,r17,8020a570 <___vfprintf_internal_r+0x18f4>
80209f14:	18c00404 	addi	r3,r3,16
80209f18:	10800044 	addi	r2,r2,1
80209f1c:	45000015 	stw	r20,0(r8)
80209f20:	45800115 	stw	r22,4(r8)
80209f24:	d8c02015 	stw	r3,128(sp)
80209f28:	d8801f15 	stw	r2,124(sp)
80209f2c:	e0bff60e 	bge	fp,r2,80209f08 <__reset+0xfa1e9f08>
80209f30:	d9801e04 	addi	r6,sp,120
80209f34:	b80b883a 	mov	r5,r23
80209f38:	9809883a 	mov	r4,r19
80209f3c:	021153c0 	call	8021153c <__sprint_r>
80209f40:	103c501e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
80209f44:	d8c02017 	ldw	r3,128(sp)
80209f48:	d8801f17 	ldw	r2,124(sp)
80209f4c:	da000404 	addi	r8,sp,16
80209f50:	003fee06 	br	80209f0c <__reset+0xfa1e9f0c>
80209f54:	d9002c17 	ldw	r4,176(sp)
80209f58:	d9801e04 	addi	r6,sp,120
80209f5c:	b80b883a 	mov	r5,r23
80209f60:	021153c0 	call	8021153c <__sprint_r>
80209f64:	103c471e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
80209f68:	d8c02017 	ldw	r3,128(sp)
80209f6c:	df002787 	ldb	fp,158(sp)
80209f70:	da000404 	addi	r8,sp,16
80209f74:	003d5606 	br	802094d0 <__reset+0xfa1e94d0>
80209f78:	9080040c 	andi	r2,r18,16
80209f7c:	10016126 	beq	r2,zero,8020a504 <___vfprintf_internal_r+0x1888>
80209f80:	d8802d17 	ldw	r2,180(sp)
80209f84:	14c00017 	ldw	r19,0(r2)
80209f88:	10800104 	addi	r2,r2,4
80209f8c:	d8802d15 	stw	r2,180(sp)
80209f90:	982dd7fa 	srai	r22,r19,31
80209f94:	b005883a 	mov	r2,r22
80209f98:	003c8206 	br	802091a4 <__reset+0xfa1e91a4>
80209f9c:	9080040c 	andi	r2,r18,16
80209fa0:	10003526 	beq	r2,zero,8020a078 <___vfprintf_internal_r+0x13fc>
80209fa4:	d9402d17 	ldw	r5,180(sp)
80209fa8:	d8c02917 	ldw	r3,164(sp)
80209fac:	d8002785 	stb	zero,158(sp)
80209fb0:	28800104 	addi	r2,r5,4
80209fb4:	2cc00017 	ldw	r19,0(r5)
80209fb8:	002d883a 	mov	r22,zero
80209fbc:	18003716 	blt	r3,zero,8020a09c <___vfprintf_internal_r+0x1420>
80209fc0:	00ffdfc4 	movi	r3,-129
80209fc4:	d8802d15 	stw	r2,180(sp)
80209fc8:	90e4703a 	and	r18,r18,r3
80209fcc:	0039883a 	mov	fp,zero
80209fd0:	983df326 	beq	r19,zero,802097a0 <__reset+0xfa1e97a0>
80209fd4:	00800244 	movi	r2,9
80209fd8:	14fc7b36 	bltu	r2,r19,802091c8 <__reset+0xfa1e91c8>
80209fdc:	d8c02817 	ldw	r3,160(sp)
80209fe0:	dc001dc4 	addi	r16,sp,119
80209fe4:	9cc00c04 	addi	r19,r19,48
80209fe8:	1c07c83a 	sub	r3,r3,r16
80209fec:	dcc01dc5 	stb	r19,119(sp)
80209ff0:	d8c02e15 	stw	r3,184(sp)
80209ff4:	003ce806 	br	80209398 <__reset+0xfa1e9398>
80209ff8:	d8803317 	ldw	r2,204(sp)
80209ffc:	143fffc4 	addi	r16,r2,-1
8020a000:	043f4d0e 	bge	zero,r16,80209d38 <__reset+0xfa1e9d38>
8020a004:	07000404 	movi	fp,16
8020a008:	e400810e 	bge	fp,r16,8020a210 <___vfprintf_internal_r+0x1594>
8020a00c:	016008b4 	movhi	r5,32802
8020a010:	2972a784 	addi	r5,r5,-13666
8020a014:	d9402b15 	stw	r5,172(sp)
8020a018:	01c001c4 	movi	r7,7
8020a01c:	dcc02c17 	ldw	r19,176(sp)
8020a020:	00000306 	br	8020a030 <___vfprintf_internal_r+0x13b4>
8020a024:	b5800204 	addi	r22,r22,8
8020a028:	843ffc04 	addi	r16,r16,-16
8020a02c:	e4007b0e 	bge	fp,r16,8020a21c <___vfprintf_internal_r+0x15a0>
8020a030:	18c00404 	addi	r3,r3,16
8020a034:	8c400044 	addi	r17,r17,1
8020a038:	b5000015 	stw	r20,0(r22)
8020a03c:	b7000115 	stw	fp,4(r22)
8020a040:	d8c02015 	stw	r3,128(sp)
8020a044:	dc401f15 	stw	r17,124(sp)
8020a048:	3c7ff60e 	bge	r7,r17,8020a024 <__reset+0xfa1ea024>
8020a04c:	d9801e04 	addi	r6,sp,120
8020a050:	b80b883a 	mov	r5,r23
8020a054:	9809883a 	mov	r4,r19
8020a058:	d9c03c15 	stw	r7,240(sp)
8020a05c:	021153c0 	call	8021153c <__sprint_r>
8020a060:	d9c03c17 	ldw	r7,240(sp)
8020a064:	103c071e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
8020a068:	d8c02017 	ldw	r3,128(sp)
8020a06c:	dc401f17 	ldw	r17,124(sp)
8020a070:	dd800404 	addi	r22,sp,16
8020a074:	003fec06 	br	8020a028 <__reset+0xfa1ea028>
8020a078:	9080100c 	andi	r2,r18,64
8020a07c:	d8002785 	stb	zero,158(sp)
8020a080:	10010e26 	beq	r2,zero,8020a4bc <___vfprintf_internal_r+0x1840>
8020a084:	d9002d17 	ldw	r4,180(sp)
8020a088:	d9402917 	ldw	r5,164(sp)
8020a08c:	002d883a 	mov	r22,zero
8020a090:	20800104 	addi	r2,r4,4
8020a094:	24c0000b 	ldhu	r19,0(r4)
8020a098:	283fc90e 	bge	r5,zero,80209fc0 <__reset+0xfa1e9fc0>
8020a09c:	d8802d15 	stw	r2,180(sp)
8020a0a0:	0039883a 	mov	fp,zero
8020a0a4:	9d84b03a 	or	r2,r19,r22
8020a0a8:	103c461e 	bne	r2,zero,802091c4 <__reset+0xfa1e91c4>
8020a0ac:	00800044 	movi	r2,1
8020a0b0:	003e6c06 	br	80209a64 <__reset+0xfa1e9a64>
8020a0b4:	d9002c17 	ldw	r4,176(sp)
8020a0b8:	d9801e04 	addi	r6,sp,120
8020a0bc:	b80b883a 	mov	r5,r23
8020a0c0:	021153c0 	call	8021153c <__sprint_r>
8020a0c4:	103bef1e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
8020a0c8:	d8c02017 	ldw	r3,128(sp)
8020a0cc:	da000404 	addi	r8,sp,16
8020a0d0:	d9003217 	ldw	r4,200(sp)
8020a0d4:	d8802617 	ldw	r2,152(sp)
8020a0d8:	d9403317 	ldw	r5,204(sp)
8020a0dc:	8123883a 	add	r17,r16,r4
8020a0e0:	11400216 	blt	r2,r5,8020a0ec <___vfprintf_internal_r+0x1470>
8020a0e4:	9100004c 	andi	r4,r18,1
8020a0e8:	20000d26 	beq	r4,zero,8020a120 <___vfprintf_internal_r+0x14a4>
8020a0ec:	d9003717 	ldw	r4,220(sp)
8020a0f0:	d9403417 	ldw	r5,208(sp)
8020a0f4:	1907883a 	add	r3,r3,r4
8020a0f8:	d9001f17 	ldw	r4,124(sp)
8020a0fc:	41400015 	stw	r5,0(r8)
8020a100:	d9403717 	ldw	r5,220(sp)
8020a104:	21000044 	addi	r4,r4,1
8020a108:	d8c02015 	stw	r3,128(sp)
8020a10c:	41400115 	stw	r5,4(r8)
8020a110:	d9001f15 	stw	r4,124(sp)
8020a114:	014001c4 	movi	r5,7
8020a118:	2901e816 	blt	r5,r4,8020a8bc <___vfprintf_internal_r+0x1c40>
8020a11c:	42000204 	addi	r8,r8,8
8020a120:	d9003317 	ldw	r4,204(sp)
8020a124:	8121883a 	add	r16,r16,r4
8020a128:	2085c83a 	sub	r2,r4,r2
8020a12c:	8461c83a 	sub	r16,r16,r17
8020a130:	1400010e 	bge	r2,r16,8020a138 <___vfprintf_internal_r+0x14bc>
8020a134:	1021883a 	mov	r16,r2
8020a138:	04000a0e 	bge	zero,r16,8020a164 <___vfprintf_internal_r+0x14e8>
8020a13c:	d9001f17 	ldw	r4,124(sp)
8020a140:	1c07883a 	add	r3,r3,r16
8020a144:	44400015 	stw	r17,0(r8)
8020a148:	21000044 	addi	r4,r4,1
8020a14c:	44000115 	stw	r16,4(r8)
8020a150:	d8c02015 	stw	r3,128(sp)
8020a154:	d9001f15 	stw	r4,124(sp)
8020a158:	014001c4 	movi	r5,7
8020a15c:	2901fb16 	blt	r5,r4,8020a94c <___vfprintf_internal_r+0x1cd0>
8020a160:	42000204 	addi	r8,r8,8
8020a164:	8001f716 	blt	r16,zero,8020a944 <___vfprintf_internal_r+0x1cc8>
8020a168:	1421c83a 	sub	r16,r2,r16
8020a16c:	043d380e 	bge	zero,r16,80209650 <__reset+0xfa1e9650>
8020a170:	04400404 	movi	r17,16
8020a174:	d8801f17 	ldw	r2,124(sp)
8020a178:	8c3efb0e 	bge	r17,r16,80209d68 <__reset+0xfa1e9d68>
8020a17c:	016008b4 	movhi	r5,32802
8020a180:	2972a784 	addi	r5,r5,-13666
8020a184:	d9402b15 	stw	r5,172(sp)
8020a188:	058001c4 	movi	r22,7
8020a18c:	dcc02c17 	ldw	r19,176(sp)
8020a190:	00000306 	br	8020a1a0 <___vfprintf_internal_r+0x1524>
8020a194:	42000204 	addi	r8,r8,8
8020a198:	843ffc04 	addi	r16,r16,-16
8020a19c:	8c3ef50e 	bge	r17,r16,80209d74 <__reset+0xfa1e9d74>
8020a1a0:	18c00404 	addi	r3,r3,16
8020a1a4:	10800044 	addi	r2,r2,1
8020a1a8:	45000015 	stw	r20,0(r8)
8020a1ac:	44400115 	stw	r17,4(r8)
8020a1b0:	d8c02015 	stw	r3,128(sp)
8020a1b4:	d8801f15 	stw	r2,124(sp)
8020a1b8:	b0bff60e 	bge	r22,r2,8020a194 <__reset+0xfa1ea194>
8020a1bc:	d9801e04 	addi	r6,sp,120
8020a1c0:	b80b883a 	mov	r5,r23
8020a1c4:	9809883a 	mov	r4,r19
8020a1c8:	021153c0 	call	8021153c <__sprint_r>
8020a1cc:	103bad1e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
8020a1d0:	d8c02017 	ldw	r3,128(sp)
8020a1d4:	d8801f17 	ldw	r2,124(sp)
8020a1d8:	da000404 	addi	r8,sp,16
8020a1dc:	003fee06 	br	8020a198 <__reset+0xfa1ea198>
8020a1e0:	9088703a 	and	r4,r18,r2
8020a1e4:	203eab1e 	bne	r4,zero,80209c94 <__reset+0xfa1e9c94>
8020a1e8:	dc401f17 	ldw	r17,124(sp)
8020a1ec:	40800115 	stw	r2,4(r8)
8020a1f0:	44000015 	stw	r16,0(r8)
8020a1f4:	8c400044 	addi	r17,r17,1
8020a1f8:	d8c02015 	stw	r3,128(sp)
8020a1fc:	dc401f15 	stw	r17,124(sp)
8020a200:	008001c4 	movi	r2,7
8020a204:	14400e16 	blt	r2,r17,8020a240 <___vfprintf_internal_r+0x15c4>
8020a208:	45800204 	addi	r22,r8,8
8020a20c:	003eca06 	br	80209d38 <__reset+0xfa1e9d38>
8020a210:	012008b4 	movhi	r4,32802
8020a214:	2132a784 	addi	r4,r4,-13666
8020a218:	d9002b15 	stw	r4,172(sp)
8020a21c:	d8802b17 	ldw	r2,172(sp)
8020a220:	1c07883a 	add	r3,r3,r16
8020a224:	8c400044 	addi	r17,r17,1
8020a228:	b0800015 	stw	r2,0(r22)
8020a22c:	b4000115 	stw	r16,4(r22)
8020a230:	d8c02015 	stw	r3,128(sp)
8020a234:	dc401f15 	stw	r17,124(sp)
8020a238:	008001c4 	movi	r2,7
8020a23c:	147ebd0e 	bge	r2,r17,80209d34 <__reset+0xfa1e9d34>
8020a240:	d9002c17 	ldw	r4,176(sp)
8020a244:	d9801e04 	addi	r6,sp,120
8020a248:	b80b883a 	mov	r5,r23
8020a24c:	021153c0 	call	8021153c <__sprint_r>
8020a250:	103b8c1e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
8020a254:	d8c02017 	ldw	r3,128(sp)
8020a258:	dc401f17 	ldw	r17,124(sp)
8020a25c:	dd800404 	addi	r22,sp,16
8020a260:	003eb506 	br	80209d38 <__reset+0xfa1e9d38>
8020a264:	d9002c17 	ldw	r4,176(sp)
8020a268:	d9801e04 	addi	r6,sp,120
8020a26c:	b80b883a 	mov	r5,r23
8020a270:	021153c0 	call	8021153c <__sprint_r>
8020a274:	103b831e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
8020a278:	d8c02017 	ldw	r3,128(sp)
8020a27c:	dc401f17 	ldw	r17,124(sp)
8020a280:	da000404 	addi	r8,sp,16
8020a284:	003e8d06 	br	80209cbc <__reset+0xfa1e9cbc>
8020a288:	d9002c17 	ldw	r4,176(sp)
8020a28c:	d9801e04 	addi	r6,sp,120
8020a290:	b80b883a 	mov	r5,r23
8020a294:	021153c0 	call	8021153c <__sprint_r>
8020a298:	103b7a1e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
8020a29c:	d8c02017 	ldw	r3,128(sp)
8020a2a0:	dc401f17 	ldw	r17,124(sp)
8020a2a4:	dd800404 	addi	r22,sp,16
8020a2a8:	003e8f06 	br	80209ce8 <__reset+0xfa1e9ce8>
8020a2ac:	0027883a 	mov	r19,zero
8020a2b0:	003f4a06 	br	80209fdc <__reset+0xfa1e9fdc>
8020a2b4:	d9002c17 	ldw	r4,176(sp)
8020a2b8:	d9801e04 	addi	r6,sp,120
8020a2bc:	b80b883a 	mov	r5,r23
8020a2c0:	021153c0 	call	8021153c <__sprint_r>
8020a2c4:	103b6f1e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
8020a2c8:	d8c02017 	ldw	r3,128(sp)
8020a2cc:	da000404 	addi	r8,sp,16
8020a2d0:	003c9d06 	br	80209548 <__reset+0xfa1e9548>
8020a2d4:	04e7c83a 	sub	r19,zero,r19
8020a2d8:	9804c03a 	cmpne	r2,r19,zero
8020a2dc:	05adc83a 	sub	r22,zero,r22
8020a2e0:	b0adc83a 	sub	r22,r22,r2
8020a2e4:	d8802917 	ldw	r2,164(sp)
8020a2e8:	07000b44 	movi	fp,45
8020a2ec:	df002785 	stb	fp,158(sp)
8020a2f0:	10017b16 	blt	r2,zero,8020a8e0 <___vfprintf_internal_r+0x1c64>
8020a2f4:	00bfdfc4 	movi	r2,-129
8020a2f8:	90a4703a 	and	r18,r18,r2
8020a2fc:	003bb106 	br	802091c4 <__reset+0xfa1e91c4>
8020a300:	d9003617 	ldw	r4,216(sp)
8020a304:	d9403817 	ldw	r5,224(sp)
8020a308:	da003d15 	stw	r8,244(sp)
8020a30c:	020fd540 	call	8020fd54 <__fpclassifyd>
8020a310:	da003d17 	ldw	r8,244(sp)
8020a314:	1000f026 	beq	r2,zero,8020a6d8 <___vfprintf_internal_r+0x1a5c>
8020a318:	d9002917 	ldw	r4,164(sp)
8020a31c:	05bff7c4 	movi	r22,-33
8020a320:	00bfffc4 	movi	r2,-1
8020a324:	8dac703a 	and	r22,r17,r22
8020a328:	20820026 	beq	r4,r2,8020ab2c <___vfprintf_internal_r+0x1eb0>
8020a32c:	008011c4 	movi	r2,71
8020a330:	b081f726 	beq	r22,r2,8020ab10 <___vfprintf_internal_r+0x1e94>
8020a334:	d9003817 	ldw	r4,224(sp)
8020a338:	90c04014 	ori	r3,r18,256
8020a33c:	d8c02b15 	stw	r3,172(sp)
8020a340:	20021516 	blt	r4,zero,8020ab98 <___vfprintf_internal_r+0x1f1c>
8020a344:	dcc03817 	ldw	r19,224(sp)
8020a348:	d8002a05 	stb	zero,168(sp)
8020a34c:	00801984 	movi	r2,102
8020a350:	8881f926 	beq	r17,r2,8020ab38 <___vfprintf_internal_r+0x1ebc>
8020a354:	00801184 	movi	r2,70
8020a358:	88821c26 	beq	r17,r2,8020abcc <___vfprintf_internal_r+0x1f50>
8020a35c:	00801144 	movi	r2,69
8020a360:	b081ef26 	beq	r22,r2,8020ab20 <___vfprintf_internal_r+0x1ea4>
8020a364:	d8c02917 	ldw	r3,164(sp)
8020a368:	d8802104 	addi	r2,sp,132
8020a36c:	d8800315 	stw	r2,12(sp)
8020a370:	d9403617 	ldw	r5,216(sp)
8020a374:	d8802504 	addi	r2,sp,148
8020a378:	d9002c17 	ldw	r4,176(sp)
8020a37c:	d8800215 	stw	r2,8(sp)
8020a380:	d8802604 	addi	r2,sp,152
8020a384:	d8c00015 	stw	r3,0(sp)
8020a388:	d8800115 	stw	r2,4(sp)
8020a38c:	01c00084 	movi	r7,2
8020a390:	980d883a 	mov	r6,r19
8020a394:	d8c03c15 	stw	r3,240(sp)
8020a398:	da003d15 	stw	r8,244(sp)
8020a39c:	020b2a00 	call	8020b2a0 <_dtoa_r>
8020a3a0:	1021883a 	mov	r16,r2
8020a3a4:	008019c4 	movi	r2,103
8020a3a8:	d8c03c17 	ldw	r3,240(sp)
8020a3ac:	da003d17 	ldw	r8,244(sp)
8020a3b0:	88817126 	beq	r17,r2,8020a978 <___vfprintf_internal_r+0x1cfc>
8020a3b4:	008011c4 	movi	r2,71
8020a3b8:	88829226 	beq	r17,r2,8020ae04 <___vfprintf_internal_r+0x2188>
8020a3bc:	80f9883a 	add	fp,r16,r3
8020a3c0:	d9003617 	ldw	r4,216(sp)
8020a3c4:	000d883a 	mov	r6,zero
8020a3c8:	000f883a 	mov	r7,zero
8020a3cc:	980b883a 	mov	r5,r19
8020a3d0:	da003d15 	stw	r8,244(sp)
8020a3d4:	02151b40 	call	802151b4 <__eqdf2>
8020a3d8:	da003d17 	ldw	r8,244(sp)
8020a3dc:	10018d26 	beq	r2,zero,8020aa14 <___vfprintf_internal_r+0x1d98>
8020a3e0:	d8802117 	ldw	r2,132(sp)
8020a3e4:	1700062e 	bgeu	r2,fp,8020a400 <___vfprintf_internal_r+0x1784>
8020a3e8:	01000c04 	movi	r4,48
8020a3ec:	10c00044 	addi	r3,r2,1
8020a3f0:	d8c02115 	stw	r3,132(sp)
8020a3f4:	11000005 	stb	r4,0(r2)
8020a3f8:	d8802117 	ldw	r2,132(sp)
8020a3fc:	173ffb36 	bltu	r2,fp,8020a3ec <__reset+0xfa1ea3ec>
8020a400:	1405c83a 	sub	r2,r2,r16
8020a404:	d8803315 	stw	r2,204(sp)
8020a408:	008011c4 	movi	r2,71
8020a40c:	b0817626 	beq	r22,r2,8020a9e8 <___vfprintf_internal_r+0x1d6c>
8020a410:	00801944 	movi	r2,101
8020a414:	1442810e 	bge	r2,r17,8020ae1c <___vfprintf_internal_r+0x21a0>
8020a418:	d8c02617 	ldw	r3,152(sp)
8020a41c:	00801984 	movi	r2,102
8020a420:	d8c03215 	stw	r3,200(sp)
8020a424:	8881fe26 	beq	r17,r2,8020ac20 <___vfprintf_internal_r+0x1fa4>
8020a428:	d8c03217 	ldw	r3,200(sp)
8020a42c:	d9003317 	ldw	r4,204(sp)
8020a430:	1901dd16 	blt	r3,r4,8020aba8 <___vfprintf_internal_r+0x1f2c>
8020a434:	9480004c 	andi	r18,r18,1
8020a438:	90022b1e 	bne	r18,zero,8020ace8 <___vfprintf_internal_r+0x206c>
8020a43c:	1805883a 	mov	r2,r3
8020a440:	18028016 	blt	r3,zero,8020ae44 <___vfprintf_internal_r+0x21c8>
8020a444:	d8c03217 	ldw	r3,200(sp)
8020a448:	044019c4 	movi	r17,103
8020a44c:	d8c02e15 	stw	r3,184(sp)
8020a450:	df002a07 	ldb	fp,168(sp)
8020a454:	e001531e 	bne	fp,zero,8020a9a4 <___vfprintf_internal_r+0x1d28>
8020a458:	df002783 	ldbu	fp,158(sp)
8020a45c:	d8802a15 	stw	r2,168(sp)
8020a460:	dc802b17 	ldw	r18,172(sp)
8020a464:	d8002915 	stw	zero,164(sp)
8020a468:	003bd106 	br	802093b0 <__reset+0xfa1e93b0>
8020a46c:	d8802d17 	ldw	r2,180(sp)
8020a470:	d8c02d17 	ldw	r3,180(sp)
8020a474:	d9002d17 	ldw	r4,180(sp)
8020a478:	10800017 	ldw	r2,0(r2)
8020a47c:	18c00117 	ldw	r3,4(r3)
8020a480:	21000204 	addi	r4,r4,8
8020a484:	d8803615 	stw	r2,216(sp)
8020a488:	d8c03815 	stw	r3,224(sp)
8020a48c:	d9002d15 	stw	r4,180(sp)
8020a490:	003b7506 	br	80209268 <__reset+0xfa1e9268>
8020a494:	ac400007 	ldb	r17,0(r21)
8020a498:	003a5906 	br	80208e00 <__reset+0xfa1e8e00>
8020a49c:	9080100c 	andi	r2,r18,64
8020a4a0:	1000a826 	beq	r2,zero,8020a744 <___vfprintf_internal_r+0x1ac8>
8020a4a4:	d9002d17 	ldw	r4,180(sp)
8020a4a8:	002d883a 	mov	r22,zero
8020a4ac:	24c0000b 	ldhu	r19,0(r4)
8020a4b0:	21000104 	addi	r4,r4,4
8020a4b4:	d9002d15 	stw	r4,180(sp)
8020a4b8:	003ccb06 	br	802097e8 <__reset+0xfa1e97e8>
8020a4bc:	d8c02d17 	ldw	r3,180(sp)
8020a4c0:	d9002917 	ldw	r4,164(sp)
8020a4c4:	002d883a 	mov	r22,zero
8020a4c8:	18800104 	addi	r2,r3,4
8020a4cc:	1cc00017 	ldw	r19,0(r3)
8020a4d0:	203ebb0e 	bge	r4,zero,80209fc0 <__reset+0xfa1e9fc0>
8020a4d4:	003ef106 	br	8020a09c <__reset+0xfa1ea09c>
8020a4d8:	9080040c 	andi	r2,r18,16
8020a4dc:	1000921e 	bne	r2,zero,8020a728 <___vfprintf_internal_r+0x1aac>
8020a4e0:	9480100c 	andi	r18,r18,64
8020a4e4:	90013926 	beq	r18,zero,8020a9cc <___vfprintf_internal_r+0x1d50>
8020a4e8:	d9002d17 	ldw	r4,180(sp)
8020a4ec:	d9402f17 	ldw	r5,188(sp)
8020a4f0:	20800017 	ldw	r2,0(r4)
8020a4f4:	21000104 	addi	r4,r4,4
8020a4f8:	d9002d15 	stw	r4,180(sp)
8020a4fc:	1140000d 	sth	r5,0(r2)
8020a500:	003a1606 	br	80208d5c <__reset+0xfa1e8d5c>
8020a504:	9080100c 	andi	r2,r18,64
8020a508:	10008026 	beq	r2,zero,8020a70c <___vfprintf_internal_r+0x1a90>
8020a50c:	d8c02d17 	ldw	r3,180(sp)
8020a510:	1cc0000f 	ldh	r19,0(r3)
8020a514:	18c00104 	addi	r3,r3,4
8020a518:	d8c02d15 	stw	r3,180(sp)
8020a51c:	982dd7fa 	srai	r22,r19,31
8020a520:	b005883a 	mov	r2,r22
8020a524:	003b1f06 	br	802091a4 <__reset+0xfa1e91a4>
8020a528:	9080100c 	andi	r2,r18,64
8020a52c:	d8002785 	stb	zero,158(sp)
8020a530:	10008a1e 	bne	r2,zero,8020a75c <___vfprintf_internal_r+0x1ae0>
8020a534:	d9402d17 	ldw	r5,180(sp)
8020a538:	d8c02917 	ldw	r3,164(sp)
8020a53c:	002d883a 	mov	r22,zero
8020a540:	28800104 	addi	r2,r5,4
8020a544:	2cc00017 	ldw	r19,0(r5)
8020a548:	183e4b0e 	bge	r3,zero,80209e78 <__reset+0xfa1e9e78>
8020a54c:	9d86b03a 	or	r3,r19,r22
8020a550:	d8802d15 	stw	r2,180(sp)
8020a554:	183e4c1e 	bne	r3,zero,80209e88 <__reset+0xfa1e9e88>
8020a558:	0039883a 	mov	fp,zero
8020a55c:	0005883a 	mov	r2,zero
8020a560:	003d4006 	br	80209a64 <__reset+0xfa1e9a64>
8020a564:	016008b4 	movhi	r5,32802
8020a568:	2972a784 	addi	r5,r5,-13666
8020a56c:	d9402b15 	stw	r5,172(sp)
8020a570:	d9402b17 	ldw	r5,172(sp)
8020a574:	1c47883a 	add	r3,r3,r17
8020a578:	10800044 	addi	r2,r2,1
8020a57c:	41400015 	stw	r5,0(r8)
8020a580:	44400115 	stw	r17,4(r8)
8020a584:	d8c02015 	stw	r3,128(sp)
8020a588:	d8801f15 	stw	r2,124(sp)
8020a58c:	010001c4 	movi	r4,7
8020a590:	20bec816 	blt	r4,r2,8020a0b4 <__reset+0xfa1ea0b4>
8020a594:	42000204 	addi	r8,r8,8
8020a598:	003ecd06 	br	8020a0d0 <__reset+0xfa1ea0d0>
8020a59c:	d9002917 	ldw	r4,164(sp)
8020a5a0:	d8002785 	stb	zero,158(sp)
8020a5a4:	203d2d16 	blt	r4,zero,80209a5c <__reset+0xfa1e9a5c>
8020a5a8:	00bfdfc4 	movi	r2,-129
8020a5ac:	90a4703a 	and	r18,r18,r2
8020a5b0:	003a9106 	br	80208ff8 <__reset+0xfa1e8ff8>
8020a5b4:	012008b4 	movhi	r4,32802
8020a5b8:	2132a784 	addi	r4,r4,-13666
8020a5bc:	d9002b15 	stw	r4,172(sp)
8020a5c0:	003c0c06 	br	802095f4 <__reset+0xfa1e95f4>
8020a5c4:	d9002c17 	ldw	r4,176(sp)
8020a5c8:	d9801e04 	addi	r6,sp,120
8020a5cc:	b80b883a 	mov	r5,r23
8020a5d0:	021153c0 	call	8021153c <__sprint_r>
8020a5d4:	103aab1e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
8020a5d8:	d8c02017 	ldw	r3,128(sp)
8020a5dc:	da000404 	addi	r8,sp,16
8020a5e0:	003d4106 	br	80209ae8 <__reset+0xfa1e9ae8>
8020a5e4:	d8801f17 	ldw	r2,124(sp)
8020a5e8:	016008b4 	movhi	r5,32802
8020a5ec:	01000044 	movi	r4,1
8020a5f0:	18c00044 	addi	r3,r3,1
8020a5f4:	10800044 	addi	r2,r2,1
8020a5f8:	29729f04 	addi	r5,r5,-13700
8020a5fc:	41000115 	stw	r4,4(r8)
8020a600:	41400015 	stw	r5,0(r8)
8020a604:	d8c02015 	stw	r3,128(sp)
8020a608:	d8801f15 	stw	r2,124(sp)
8020a60c:	010001c4 	movi	r4,7
8020a610:	20805c16 	blt	r4,r2,8020a784 <___vfprintf_internal_r+0x1b08>
8020a614:	42000204 	addi	r8,r8,8
8020a618:	8800041e 	bne	r17,zero,8020a62c <___vfprintf_internal_r+0x19b0>
8020a61c:	d8803317 	ldw	r2,204(sp)
8020a620:	1000021e 	bne	r2,zero,8020a62c <___vfprintf_internal_r+0x19b0>
8020a624:	9080004c 	andi	r2,r18,1
8020a628:	103c0926 	beq	r2,zero,80209650 <__reset+0xfa1e9650>
8020a62c:	d9003717 	ldw	r4,220(sp)
8020a630:	d8801f17 	ldw	r2,124(sp)
8020a634:	d9403417 	ldw	r5,208(sp)
8020a638:	20c7883a 	add	r3,r4,r3
8020a63c:	10800044 	addi	r2,r2,1
8020a640:	41000115 	stw	r4,4(r8)
8020a644:	41400015 	stw	r5,0(r8)
8020a648:	d8c02015 	stw	r3,128(sp)
8020a64c:	d8801f15 	stw	r2,124(sp)
8020a650:	010001c4 	movi	r4,7
8020a654:	20812116 	blt	r4,r2,8020aadc <___vfprintf_internal_r+0x1e60>
8020a658:	42000204 	addi	r8,r8,8
8020a65c:	0463c83a 	sub	r17,zero,r17
8020a660:	0440730e 	bge	zero,r17,8020a830 <___vfprintf_internal_r+0x1bb4>
8020a664:	05800404 	movi	r22,16
8020a668:	b440860e 	bge	r22,r17,8020a884 <___vfprintf_internal_r+0x1c08>
8020a66c:	016008b4 	movhi	r5,32802
8020a670:	2972a784 	addi	r5,r5,-13666
8020a674:	d9402b15 	stw	r5,172(sp)
8020a678:	070001c4 	movi	fp,7
8020a67c:	dcc02c17 	ldw	r19,176(sp)
8020a680:	00000306 	br	8020a690 <___vfprintf_internal_r+0x1a14>
8020a684:	42000204 	addi	r8,r8,8
8020a688:	8c7ffc04 	addi	r17,r17,-16
8020a68c:	b440800e 	bge	r22,r17,8020a890 <___vfprintf_internal_r+0x1c14>
8020a690:	18c00404 	addi	r3,r3,16
8020a694:	10800044 	addi	r2,r2,1
8020a698:	45000015 	stw	r20,0(r8)
8020a69c:	45800115 	stw	r22,4(r8)
8020a6a0:	d8c02015 	stw	r3,128(sp)
8020a6a4:	d8801f15 	stw	r2,124(sp)
8020a6a8:	e0bff60e 	bge	fp,r2,8020a684 <__reset+0xfa1ea684>
8020a6ac:	d9801e04 	addi	r6,sp,120
8020a6b0:	b80b883a 	mov	r5,r23
8020a6b4:	9809883a 	mov	r4,r19
8020a6b8:	021153c0 	call	8021153c <__sprint_r>
8020a6bc:	103a711e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
8020a6c0:	d8c02017 	ldw	r3,128(sp)
8020a6c4:	d8801f17 	ldw	r2,124(sp)
8020a6c8:	da000404 	addi	r8,sp,16
8020a6cc:	003fee06 	br	8020a688 <__reset+0xfa1ea688>
8020a6d0:	00bfffc4 	movi	r2,-1
8020a6d4:	003a6f06 	br	80209094 <__reset+0xfa1e9094>
8020a6d8:	008011c4 	movi	r2,71
8020a6dc:	1440b816 	blt	r2,r17,8020a9c0 <___vfprintf_internal_r+0x1d44>
8020a6e0:	042008b4 	movhi	r16,32802
8020a6e4:	84329104 	addi	r16,r16,-13756
8020a6e8:	00c000c4 	movi	r3,3
8020a6ec:	00bfdfc4 	movi	r2,-129
8020a6f0:	d8c02a15 	stw	r3,168(sp)
8020a6f4:	90a4703a 	and	r18,r18,r2
8020a6f8:	df002783 	ldbu	fp,158(sp)
8020a6fc:	d8c02e15 	stw	r3,184(sp)
8020a700:	d8002915 	stw	zero,164(sp)
8020a704:	d8003215 	stw	zero,200(sp)
8020a708:	003b2906 	br	802093b0 <__reset+0xfa1e93b0>
8020a70c:	d9002d17 	ldw	r4,180(sp)
8020a710:	24c00017 	ldw	r19,0(r4)
8020a714:	21000104 	addi	r4,r4,4
8020a718:	d9002d15 	stw	r4,180(sp)
8020a71c:	982dd7fa 	srai	r22,r19,31
8020a720:	b005883a 	mov	r2,r22
8020a724:	003a9f06 	br	802091a4 <__reset+0xfa1e91a4>
8020a728:	d9402d17 	ldw	r5,180(sp)
8020a72c:	d8c02f17 	ldw	r3,188(sp)
8020a730:	28800017 	ldw	r2,0(r5)
8020a734:	29400104 	addi	r5,r5,4
8020a738:	d9402d15 	stw	r5,180(sp)
8020a73c:	10c00015 	stw	r3,0(r2)
8020a740:	00398606 	br	80208d5c <__reset+0xfa1e8d5c>
8020a744:	d9402d17 	ldw	r5,180(sp)
8020a748:	002d883a 	mov	r22,zero
8020a74c:	2cc00017 	ldw	r19,0(r5)
8020a750:	29400104 	addi	r5,r5,4
8020a754:	d9402d15 	stw	r5,180(sp)
8020a758:	003c2306 	br	802097e8 <__reset+0xfa1e97e8>
8020a75c:	d8c02d17 	ldw	r3,180(sp)
8020a760:	d9002917 	ldw	r4,164(sp)
8020a764:	002d883a 	mov	r22,zero
8020a768:	18800104 	addi	r2,r3,4
8020a76c:	1cc0000b 	ldhu	r19,0(r3)
8020a770:	203dc10e 	bge	r4,zero,80209e78 <__reset+0xfa1e9e78>
8020a774:	003f7506 	br	8020a54c <__reset+0xfa1ea54c>
8020a778:	042008b4 	movhi	r16,32802
8020a77c:	84328f04 	addi	r16,r16,-13764
8020a780:	003acc06 	br	802092b4 <__reset+0xfa1e92b4>
8020a784:	d9002c17 	ldw	r4,176(sp)
8020a788:	d9801e04 	addi	r6,sp,120
8020a78c:	b80b883a 	mov	r5,r23
8020a790:	021153c0 	call	8021153c <__sprint_r>
8020a794:	103a3b1e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
8020a798:	dc402617 	ldw	r17,152(sp)
8020a79c:	d8c02017 	ldw	r3,128(sp)
8020a7a0:	da000404 	addi	r8,sp,16
8020a7a4:	003f9c06 	br	8020a618 <__reset+0xfa1ea618>
8020a7a8:	ac400043 	ldbu	r17,1(r21)
8020a7ac:	94800814 	ori	r18,r18,32
8020a7b0:	ad400044 	addi	r21,r21,1
8020a7b4:	8c403fcc 	andi	r17,r17,255
8020a7b8:	8c40201c 	xori	r17,r17,128
8020a7bc:	8c7fe004 	addi	r17,r17,-128
8020a7c0:	00398f06 	br	80208e00 <__reset+0xfa1e8e00>
8020a7c4:	d8c02d15 	stw	r3,180(sp)
8020a7c8:	0039883a 	mov	fp,zero
8020a7cc:	003e3506 	br	8020a0a4 <__reset+0xfa1ea0a4>
8020a7d0:	d9002c17 	ldw	r4,176(sp)
8020a7d4:	d9801e04 	addi	r6,sp,120
8020a7d8:	b80b883a 	mov	r5,r23
8020a7dc:	021153c0 	call	8021153c <__sprint_r>
8020a7e0:	103a281e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
8020a7e4:	d8c02017 	ldw	r3,128(sp)
8020a7e8:	da000404 	addi	r8,sp,16
8020a7ec:	003cd006 	br	80209b30 <__reset+0xfa1e9b30>
8020a7f0:	8009883a 	mov	r4,r16
8020a7f4:	da003d15 	stw	r8,244(sp)
8020a7f8:	0206a0c0 	call	80206a0c <strlen>
8020a7fc:	d8802e15 	stw	r2,184(sp)
8020a800:	da003d17 	ldw	r8,244(sp)
8020a804:	103c340e 	bge	r2,zero,802098d8 <__reset+0xfa1e98d8>
8020a808:	0005883a 	mov	r2,zero
8020a80c:	003c3206 	br	802098d8 <__reset+0xfa1e98d8>
8020a810:	d9002c17 	ldw	r4,176(sp)
8020a814:	d9801e04 	addi	r6,sp,120
8020a818:	b80b883a 	mov	r5,r23
8020a81c:	021153c0 	call	8021153c <__sprint_r>
8020a820:	103a181e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
8020a824:	d8c02017 	ldw	r3,128(sp)
8020a828:	d8801f17 	ldw	r2,124(sp)
8020a82c:	da000404 	addi	r8,sp,16
8020a830:	d9403317 	ldw	r5,204(sp)
8020a834:	10800044 	addi	r2,r2,1
8020a838:	44000015 	stw	r16,0(r8)
8020a83c:	28c7883a 	add	r3,r5,r3
8020a840:	003b7d06 	br	80209638 <__reset+0xfa1e9638>
8020a844:	012008b4 	movhi	r4,32802
8020a848:	2132ab84 	addi	r4,r4,-13650
8020a84c:	d9003515 	stw	r4,212(sp)
8020a850:	003b1406 	br	802094a4 <__reset+0xfa1e94a4>
8020a854:	013fffc4 	movi	r4,-1
8020a858:	003a3506 	br	80209130 <__reset+0xfa1e9130>
8020a85c:	0023883a 	mov	r17,zero
8020a860:	003d9d06 	br	80209ed8 <__reset+0xfa1e9ed8>
8020a864:	d9002c17 	ldw	r4,176(sp)
8020a868:	d9801e04 	addi	r6,sp,120
8020a86c:	b80b883a 	mov	r5,r23
8020a870:	021153c0 	call	8021153c <__sprint_r>
8020a874:	103a031e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
8020a878:	d8c02017 	ldw	r3,128(sp)
8020a87c:	da000404 	addi	r8,sp,16
8020a880:	003d9406 	br	80209ed4 <__reset+0xfa1e9ed4>
8020a884:	012008b4 	movhi	r4,32802
8020a888:	2132a784 	addi	r4,r4,-13666
8020a88c:	d9002b15 	stw	r4,172(sp)
8020a890:	d9002b17 	ldw	r4,172(sp)
8020a894:	1c47883a 	add	r3,r3,r17
8020a898:	10800044 	addi	r2,r2,1
8020a89c:	41000015 	stw	r4,0(r8)
8020a8a0:	44400115 	stw	r17,4(r8)
8020a8a4:	d8c02015 	stw	r3,128(sp)
8020a8a8:	d8801f15 	stw	r2,124(sp)
8020a8ac:	010001c4 	movi	r4,7
8020a8b0:	20bfd716 	blt	r4,r2,8020a810 <__reset+0xfa1ea810>
8020a8b4:	42000204 	addi	r8,r8,8
8020a8b8:	003fdd06 	br	8020a830 <__reset+0xfa1ea830>
8020a8bc:	d9002c17 	ldw	r4,176(sp)
8020a8c0:	d9801e04 	addi	r6,sp,120
8020a8c4:	b80b883a 	mov	r5,r23
8020a8c8:	021153c0 	call	8021153c <__sprint_r>
8020a8cc:	1039ed1e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
8020a8d0:	d8802617 	ldw	r2,152(sp)
8020a8d4:	d8c02017 	ldw	r3,128(sp)
8020a8d8:	da000404 	addi	r8,sp,16
8020a8dc:	003e1006 	br	8020a120 <__reset+0xfa1ea120>
8020a8e0:	00800044 	movi	r2,1
8020a8e4:	10803fcc 	andi	r2,r2,255
8020a8e8:	00c00044 	movi	r3,1
8020a8ec:	10fa3526 	beq	r2,r3,802091c4 <__reset+0xfa1e91c4>
8020a8f0:	00c00084 	movi	r3,2
8020a8f4:	10fbcb26 	beq	r2,r3,80209824 <__reset+0xfa1e9824>
8020a8f8:	003a8f06 	br	80209338 <__reset+0xfa1e9338>
8020a8fc:	012008b4 	movhi	r4,32802
8020a900:	2132ab84 	addi	r4,r4,-13650
8020a904:	d9003515 	stw	r4,212(sp)
8020a908:	003b7606 	br	802096e4 <__reset+0xfa1e96e4>
8020a90c:	d8802917 	ldw	r2,164(sp)
8020a910:	00c00184 	movi	r3,6
8020a914:	1880012e 	bgeu	r3,r2,8020a91c <___vfprintf_internal_r+0x1ca0>
8020a918:	1805883a 	mov	r2,r3
8020a91c:	d8802e15 	stw	r2,184(sp)
8020a920:	1000ef16 	blt	r2,zero,8020ace0 <___vfprintf_internal_r+0x2064>
8020a924:	042008b4 	movhi	r16,32802
8020a928:	d8802a15 	stw	r2,168(sp)
8020a92c:	dcc02d15 	stw	r19,180(sp)
8020a930:	d8002915 	stw	zero,164(sp)
8020a934:	d8003215 	stw	zero,200(sp)
8020a938:	84329d04 	addi	r16,r16,-13708
8020a93c:	0039883a 	mov	fp,zero
8020a940:	003aa206 	br	802093cc <__reset+0xfa1e93cc>
8020a944:	0021883a 	mov	r16,zero
8020a948:	003e0706 	br	8020a168 <__reset+0xfa1ea168>
8020a94c:	d9002c17 	ldw	r4,176(sp)
8020a950:	d9801e04 	addi	r6,sp,120
8020a954:	b80b883a 	mov	r5,r23
8020a958:	021153c0 	call	8021153c <__sprint_r>
8020a95c:	1039c91e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
8020a960:	d8802617 	ldw	r2,152(sp)
8020a964:	d9403317 	ldw	r5,204(sp)
8020a968:	d8c02017 	ldw	r3,128(sp)
8020a96c:	da000404 	addi	r8,sp,16
8020a970:	2885c83a 	sub	r2,r5,r2
8020a974:	003dfb06 	br	8020a164 <__reset+0xfa1ea164>
8020a978:	9080004c 	andi	r2,r18,1
8020a97c:	103e8f1e 	bne	r2,zero,8020a3bc <__reset+0xfa1ea3bc>
8020a980:	d8802117 	ldw	r2,132(sp)
8020a984:	003e9e06 	br	8020a400 <__reset+0xfa1ea400>
8020a988:	1025883a 	mov	r18,r2
8020a98c:	0039883a 	mov	fp,zero
8020a990:	00800084 	movi	r2,2
8020a994:	003fd306 	br	8020a8e4 <__reset+0xfa1ea8e4>
8020a998:	07000b44 	movi	fp,45
8020a99c:	df002785 	stb	fp,158(sp)
8020a9a0:	003a4006 	br	802092a4 <__reset+0xfa1e92a4>
8020a9a4:	00c00b44 	movi	r3,45
8020a9a8:	d8c02785 	stb	r3,158(sp)
8020a9ac:	d8802a15 	stw	r2,168(sp)
8020a9b0:	dc802b17 	ldw	r18,172(sp)
8020a9b4:	d8002915 	stw	zero,164(sp)
8020a9b8:	07000b44 	movi	fp,45
8020a9bc:	003a8006 	br	802093c0 <__reset+0xfa1e93c0>
8020a9c0:	042008b4 	movhi	r16,32802
8020a9c4:	84329204 	addi	r16,r16,-13752
8020a9c8:	003f4706 	br	8020a6e8 <__reset+0xfa1ea6e8>
8020a9cc:	d8c02d17 	ldw	r3,180(sp)
8020a9d0:	d9002f17 	ldw	r4,188(sp)
8020a9d4:	18800017 	ldw	r2,0(r3)
8020a9d8:	18c00104 	addi	r3,r3,4
8020a9dc:	d8c02d15 	stw	r3,180(sp)
8020a9e0:	11000015 	stw	r4,0(r2)
8020a9e4:	0038dd06 	br	80208d5c <__reset+0xfa1e8d5c>
8020a9e8:	dd802617 	ldw	r22,152(sp)
8020a9ec:	00bfff44 	movi	r2,-3
8020a9f0:	b0801c16 	blt	r22,r2,8020aa64 <___vfprintf_internal_r+0x1de8>
8020a9f4:	d9402917 	ldw	r5,164(sp)
8020a9f8:	2d801a16 	blt	r5,r22,8020aa64 <___vfprintf_internal_r+0x1de8>
8020a9fc:	dd803215 	stw	r22,200(sp)
8020aa00:	003e8906 	br	8020a428 <__reset+0xfa1ea428>
8020aa04:	012008b4 	movhi	r4,32802
8020aa08:	2132a784 	addi	r4,r4,-13666
8020aa0c:	d9002b15 	stw	r4,172(sp)
8020aa10:	003c9106 	br	80209c58 <__reset+0xfa1e9c58>
8020aa14:	e005883a 	mov	r2,fp
8020aa18:	003e7906 	br	8020a400 <__reset+0xfa1ea400>
8020aa1c:	d9402917 	ldw	r5,164(sp)
8020aa20:	df002783 	ldbu	fp,158(sp)
8020aa24:	dcc02d15 	stw	r19,180(sp)
8020aa28:	d9402a15 	stw	r5,168(sp)
8020aa2c:	d9402e15 	stw	r5,184(sp)
8020aa30:	d8002915 	stw	zero,164(sp)
8020aa34:	d8003215 	stw	zero,200(sp)
8020aa38:	003a5d06 	br	802093b0 <__reset+0xfa1e93b0>
8020aa3c:	9080004c 	andi	r2,r18,1
8020aa40:	0039883a 	mov	fp,zero
8020aa44:	10000426 	beq	r2,zero,8020aa58 <___vfprintf_internal_r+0x1ddc>
8020aa48:	00800c04 	movi	r2,48
8020aa4c:	dc001dc4 	addi	r16,sp,119
8020aa50:	d8801dc5 	stb	r2,119(sp)
8020aa54:	003b8006 	br	80209858 <__reset+0xfa1e9858>
8020aa58:	d8002e15 	stw	zero,184(sp)
8020aa5c:	dc001e04 	addi	r16,sp,120
8020aa60:	003a4d06 	br	80209398 <__reset+0xfa1e9398>
8020aa64:	8c7fff84 	addi	r17,r17,-2
8020aa68:	b5bfffc4 	addi	r22,r22,-1
8020aa6c:	dd802615 	stw	r22,152(sp)
8020aa70:	dc4022c5 	stb	r17,139(sp)
8020aa74:	b000bf16 	blt	r22,zero,8020ad74 <___vfprintf_internal_r+0x20f8>
8020aa78:	00800ac4 	movi	r2,43
8020aa7c:	d8802305 	stb	r2,140(sp)
8020aa80:	00800244 	movi	r2,9
8020aa84:	15807016 	blt	r2,r22,8020ac48 <___vfprintf_internal_r+0x1fcc>
8020aa88:	00800c04 	movi	r2,48
8020aa8c:	b5800c04 	addi	r22,r22,48
8020aa90:	d8802345 	stb	r2,141(sp)
8020aa94:	dd802385 	stb	r22,142(sp)
8020aa98:	d88023c4 	addi	r2,sp,143
8020aa9c:	df0022c4 	addi	fp,sp,139
8020aaa0:	d8c03317 	ldw	r3,204(sp)
8020aaa4:	1739c83a 	sub	fp,r2,fp
8020aaa8:	d9003317 	ldw	r4,204(sp)
8020aaac:	e0c7883a 	add	r3,fp,r3
8020aab0:	df003a15 	stw	fp,232(sp)
8020aab4:	d8c02e15 	stw	r3,184(sp)
8020aab8:	00800044 	movi	r2,1
8020aabc:	1100b30e 	bge	r2,r4,8020ad8c <___vfprintf_internal_r+0x2110>
8020aac0:	d8c02e17 	ldw	r3,184(sp)
8020aac4:	18c00044 	addi	r3,r3,1
8020aac8:	d8c02e15 	stw	r3,184(sp)
8020aacc:	1805883a 	mov	r2,r3
8020aad0:	1800ac16 	blt	r3,zero,8020ad84 <___vfprintf_internal_r+0x2108>
8020aad4:	d8003215 	stw	zero,200(sp)
8020aad8:	003e5d06 	br	8020a450 <__reset+0xfa1ea450>
8020aadc:	d9002c17 	ldw	r4,176(sp)
8020aae0:	d9801e04 	addi	r6,sp,120
8020aae4:	b80b883a 	mov	r5,r23
8020aae8:	021153c0 	call	8021153c <__sprint_r>
8020aaec:	1039651e 	bne	r2,zero,80209084 <__reset+0xfa1e9084>
8020aaf0:	dc402617 	ldw	r17,152(sp)
8020aaf4:	d8c02017 	ldw	r3,128(sp)
8020aaf8:	d8801f17 	ldw	r2,124(sp)
8020aafc:	da000404 	addi	r8,sp,16
8020ab00:	003ed606 	br	8020a65c <__reset+0xfa1ea65c>
8020ab04:	582b883a 	mov	r21,r11
8020ab08:	d8002915 	stw	zero,164(sp)
8020ab0c:	0038bd06 	br	80208e04 <__reset+0xfa1e8e04>
8020ab10:	d8802917 	ldw	r2,164(sp)
8020ab14:	103e071e 	bne	r2,zero,8020a334 <__reset+0xfa1ea334>
8020ab18:	dc002915 	stw	r16,164(sp)
8020ab1c:	003e0506 	br	8020a334 <__reset+0xfa1ea334>
8020ab20:	d9002917 	ldw	r4,164(sp)
8020ab24:	20c00044 	addi	r3,r4,1
8020ab28:	003e0f06 	br	8020a368 <__reset+0xfa1ea368>
8020ab2c:	01400184 	movi	r5,6
8020ab30:	d9402915 	stw	r5,164(sp)
8020ab34:	003dff06 	br	8020a334 <__reset+0xfa1ea334>
8020ab38:	d8802104 	addi	r2,sp,132
8020ab3c:	d8800315 	stw	r2,12(sp)
8020ab40:	d8802504 	addi	r2,sp,148
8020ab44:	d8800215 	stw	r2,8(sp)
8020ab48:	d8802604 	addi	r2,sp,152
8020ab4c:	d8800115 	stw	r2,4(sp)
8020ab50:	d8802917 	ldw	r2,164(sp)
8020ab54:	d9403617 	ldw	r5,216(sp)
8020ab58:	d9002c17 	ldw	r4,176(sp)
8020ab5c:	d8800015 	stw	r2,0(sp)
8020ab60:	01c000c4 	movi	r7,3
8020ab64:	980d883a 	mov	r6,r19
8020ab68:	da003d15 	stw	r8,244(sp)
8020ab6c:	020b2a00 	call	8020b2a0 <_dtoa_r>
8020ab70:	d8c02917 	ldw	r3,164(sp)
8020ab74:	da003d17 	ldw	r8,244(sp)
8020ab78:	1021883a 	mov	r16,r2
8020ab7c:	10f9883a 	add	fp,r2,r3
8020ab80:	81000007 	ldb	r4,0(r16)
8020ab84:	00800c04 	movi	r2,48
8020ab88:	20805e26 	beq	r4,r2,8020ad04 <___vfprintf_internal_r+0x2088>
8020ab8c:	d8c02617 	ldw	r3,152(sp)
8020ab90:	e0f9883a 	add	fp,fp,r3
8020ab94:	003e0a06 	br	8020a3c0 <__reset+0xfa1ea3c0>
8020ab98:	00c00b44 	movi	r3,45
8020ab9c:	24e0003c 	xorhi	r19,r4,32768
8020aba0:	d8c02a05 	stb	r3,168(sp)
8020aba4:	003de906 	br	8020a34c <__reset+0xfa1ea34c>
8020aba8:	d8c03217 	ldw	r3,200(sp)
8020abac:	00c07a0e 	bge	zero,r3,8020ad98 <___vfprintf_internal_r+0x211c>
8020abb0:	00800044 	movi	r2,1
8020abb4:	d9003317 	ldw	r4,204(sp)
8020abb8:	1105883a 	add	r2,r2,r4
8020abbc:	d8802e15 	stw	r2,184(sp)
8020abc0:	10004e16 	blt	r2,zero,8020acfc <___vfprintf_internal_r+0x2080>
8020abc4:	044019c4 	movi	r17,103
8020abc8:	003e2106 	br	8020a450 <__reset+0xfa1ea450>
8020abcc:	d9002917 	ldw	r4,164(sp)
8020abd0:	d8802104 	addi	r2,sp,132
8020abd4:	d8800315 	stw	r2,12(sp)
8020abd8:	d9000015 	stw	r4,0(sp)
8020abdc:	d8802504 	addi	r2,sp,148
8020abe0:	d9403617 	ldw	r5,216(sp)
8020abe4:	d9002c17 	ldw	r4,176(sp)
8020abe8:	d8800215 	stw	r2,8(sp)
8020abec:	d8802604 	addi	r2,sp,152
8020abf0:	d8800115 	stw	r2,4(sp)
8020abf4:	01c000c4 	movi	r7,3
8020abf8:	980d883a 	mov	r6,r19
8020abfc:	da003d15 	stw	r8,244(sp)
8020ac00:	020b2a00 	call	8020b2a0 <_dtoa_r>
8020ac04:	d8c02917 	ldw	r3,164(sp)
8020ac08:	da003d17 	ldw	r8,244(sp)
8020ac0c:	1021883a 	mov	r16,r2
8020ac10:	00801184 	movi	r2,70
8020ac14:	80f9883a 	add	fp,r16,r3
8020ac18:	88bfd926 	beq	r17,r2,8020ab80 <__reset+0xfa1eab80>
8020ac1c:	003de806 	br	8020a3c0 <__reset+0xfa1ea3c0>
8020ac20:	d9002917 	ldw	r4,164(sp)
8020ac24:	00c04d0e 	bge	zero,r3,8020ad5c <___vfprintf_internal_r+0x20e0>
8020ac28:	2000441e 	bne	r4,zero,8020ad3c <___vfprintf_internal_r+0x20c0>
8020ac2c:	9480004c 	andi	r18,r18,1
8020ac30:	9000421e 	bne	r18,zero,8020ad3c <___vfprintf_internal_r+0x20c0>
8020ac34:	1805883a 	mov	r2,r3
8020ac38:	18007016 	blt	r3,zero,8020adfc <___vfprintf_internal_r+0x2180>
8020ac3c:	d8c03217 	ldw	r3,200(sp)
8020ac40:	d8c02e15 	stw	r3,184(sp)
8020ac44:	003e0206 	br	8020a450 <__reset+0xfa1ea450>
8020ac48:	df0022c4 	addi	fp,sp,139
8020ac4c:	dc002915 	stw	r16,164(sp)
8020ac50:	4027883a 	mov	r19,r8
8020ac54:	e021883a 	mov	r16,fp
8020ac58:	b009883a 	mov	r4,r22
8020ac5c:	01400284 	movi	r5,10
8020ac60:	0213ef00 	call	80213ef0 <__modsi3>
8020ac64:	10800c04 	addi	r2,r2,48
8020ac68:	843fffc4 	addi	r16,r16,-1
8020ac6c:	b009883a 	mov	r4,r22
8020ac70:	01400284 	movi	r5,10
8020ac74:	80800005 	stb	r2,0(r16)
8020ac78:	0213e6c0 	call	80213e6c <__divsi3>
8020ac7c:	102d883a 	mov	r22,r2
8020ac80:	00800244 	movi	r2,9
8020ac84:	15bff416 	blt	r2,r22,8020ac58 <__reset+0xfa1eac58>
8020ac88:	9811883a 	mov	r8,r19
8020ac8c:	b0800c04 	addi	r2,r22,48
8020ac90:	8027883a 	mov	r19,r16
8020ac94:	997fffc4 	addi	r5,r19,-1
8020ac98:	98bfffc5 	stb	r2,-1(r19)
8020ac9c:	dc002917 	ldw	r16,164(sp)
8020aca0:	2f006a2e 	bgeu	r5,fp,8020ae4c <___vfprintf_internal_r+0x21d0>
8020aca4:	d9c02384 	addi	r7,sp,142
8020aca8:	3ccfc83a 	sub	r7,r7,r19
8020acac:	d9002344 	addi	r4,sp,141
8020acb0:	e1cf883a 	add	r7,fp,r7
8020acb4:	00000106 	br	8020acbc <___vfprintf_internal_r+0x2040>
8020acb8:	28800003 	ldbu	r2,0(r5)
8020acbc:	20800005 	stb	r2,0(r4)
8020acc0:	21000044 	addi	r4,r4,1
8020acc4:	29400044 	addi	r5,r5,1
8020acc8:	393ffb1e 	bne	r7,r4,8020acb8 <__reset+0xfa1eacb8>
8020accc:	d8802304 	addi	r2,sp,140
8020acd0:	14c5c83a 	sub	r2,r2,r19
8020acd4:	d8c02344 	addi	r3,sp,141
8020acd8:	1885883a 	add	r2,r3,r2
8020acdc:	003f7006 	br	8020aaa0 <__reset+0xfa1eaaa0>
8020ace0:	0005883a 	mov	r2,zero
8020ace4:	003f0f06 	br	8020a924 <__reset+0xfa1ea924>
8020ace8:	d8c03217 	ldw	r3,200(sp)
8020acec:	18c00044 	addi	r3,r3,1
8020acf0:	d8c02e15 	stw	r3,184(sp)
8020acf4:	1805883a 	mov	r2,r3
8020acf8:	183fb20e 	bge	r3,zero,8020abc4 <__reset+0xfa1eabc4>
8020acfc:	0005883a 	mov	r2,zero
8020ad00:	003fb006 	br	8020abc4 <__reset+0xfa1eabc4>
8020ad04:	d9003617 	ldw	r4,216(sp)
8020ad08:	000d883a 	mov	r6,zero
8020ad0c:	000f883a 	mov	r7,zero
8020ad10:	980b883a 	mov	r5,r19
8020ad14:	d8c03c15 	stw	r3,240(sp)
8020ad18:	da003d15 	stw	r8,244(sp)
8020ad1c:	02151b40 	call	802151b4 <__eqdf2>
8020ad20:	d8c03c17 	ldw	r3,240(sp)
8020ad24:	da003d17 	ldw	r8,244(sp)
8020ad28:	103f9826 	beq	r2,zero,8020ab8c <__reset+0xfa1eab8c>
8020ad2c:	00800044 	movi	r2,1
8020ad30:	10c7c83a 	sub	r3,r2,r3
8020ad34:	d8c02615 	stw	r3,152(sp)
8020ad38:	003f9506 	br	8020ab90 <__reset+0xfa1eab90>
8020ad3c:	d9002917 	ldw	r4,164(sp)
8020ad40:	d8c03217 	ldw	r3,200(sp)
8020ad44:	20800044 	addi	r2,r4,1
8020ad48:	1885883a 	add	r2,r3,r2
8020ad4c:	d8802e15 	stw	r2,184(sp)
8020ad50:	103dbf0e 	bge	r2,zero,8020a450 <__reset+0xfa1ea450>
8020ad54:	0005883a 	mov	r2,zero
8020ad58:	003dbd06 	br	8020a450 <__reset+0xfa1ea450>
8020ad5c:	2000211e 	bne	r4,zero,8020ade4 <___vfprintf_internal_r+0x2168>
8020ad60:	9480004c 	andi	r18,r18,1
8020ad64:	90001f1e 	bne	r18,zero,8020ade4 <___vfprintf_internal_r+0x2168>
8020ad68:	00800044 	movi	r2,1
8020ad6c:	d8802e15 	stw	r2,184(sp)
8020ad70:	003db706 	br	8020a450 <__reset+0xfa1ea450>
8020ad74:	00800b44 	movi	r2,45
8020ad78:	05adc83a 	sub	r22,zero,r22
8020ad7c:	d8802305 	stb	r2,140(sp)
8020ad80:	003f3f06 	br	8020aa80 <__reset+0xfa1eaa80>
8020ad84:	0005883a 	mov	r2,zero
8020ad88:	003f5206 	br	8020aad4 <__reset+0xfa1eaad4>
8020ad8c:	90a4703a 	and	r18,r18,r2
8020ad90:	903f4e26 	beq	r18,zero,8020aacc <__reset+0xfa1eaacc>
8020ad94:	003f4a06 	br	8020aac0 <__reset+0xfa1eaac0>
8020ad98:	00800084 	movi	r2,2
8020ad9c:	10c5c83a 	sub	r2,r2,r3
8020ada0:	003f8406 	br	8020abb4 <__reset+0xfa1eabb4>
8020ada4:	d8802d17 	ldw	r2,180(sp)
8020ada8:	d9002d17 	ldw	r4,180(sp)
8020adac:	ac400043 	ldbu	r17,1(r21)
8020adb0:	10800017 	ldw	r2,0(r2)
8020adb4:	582b883a 	mov	r21,r11
8020adb8:	d8802915 	stw	r2,164(sp)
8020adbc:	20800104 	addi	r2,r4,4
8020adc0:	d9002917 	ldw	r4,164(sp)
8020adc4:	d8802d15 	stw	r2,180(sp)
8020adc8:	203e7a0e 	bge	r4,zero,8020a7b4 <__reset+0xfa1ea7b4>
8020adcc:	8c403fcc 	andi	r17,r17,255
8020add0:	00bfffc4 	movi	r2,-1
8020add4:	8c40201c 	xori	r17,r17,128
8020add8:	d8802915 	stw	r2,164(sp)
8020addc:	8c7fe004 	addi	r17,r17,-128
8020ade0:	00380706 	br	80208e00 <__reset+0xfa1e8e00>
8020ade4:	d8c02917 	ldw	r3,164(sp)
8020ade8:	18c00084 	addi	r3,r3,2
8020adec:	d8c02e15 	stw	r3,184(sp)
8020adf0:	1805883a 	mov	r2,r3
8020adf4:	183d960e 	bge	r3,zero,8020a450 <__reset+0xfa1ea450>
8020adf8:	003fd606 	br	8020ad54 <__reset+0xfa1ead54>
8020adfc:	0005883a 	mov	r2,zero
8020ae00:	003f8e06 	br	8020ac3c <__reset+0xfa1eac3c>
8020ae04:	9080004c 	andi	r2,r18,1
8020ae08:	103f811e 	bne	r2,zero,8020ac10 <__reset+0xfa1eac10>
8020ae0c:	d8802117 	ldw	r2,132(sp)
8020ae10:	1405c83a 	sub	r2,r2,r16
8020ae14:	d8803315 	stw	r2,204(sp)
8020ae18:	b47ef326 	beq	r22,r17,8020a9e8 <__reset+0xfa1ea9e8>
8020ae1c:	dd802617 	ldw	r22,152(sp)
8020ae20:	003f1106 	br	8020aa68 <__reset+0xfa1eaa68>
8020ae24:	d9c02785 	stb	r7,158(sp)
8020ae28:	00390406 	br	8020923c <__reset+0xfa1e923c>
8020ae2c:	d9c02785 	stb	r7,158(sp)
8020ae30:	0038d306 	br	80209180 <__reset+0xfa1e9180>
8020ae34:	d9c02785 	stb	r7,158(sp)
8020ae38:	003a6106 	br	802097c0 <__reset+0xfa1e97c0>
8020ae3c:	d9c02785 	stb	r7,158(sp)
8020ae40:	003af806 	br	80209a24 <__reset+0xfa1e9a24>
8020ae44:	0005883a 	mov	r2,zero
8020ae48:	003d7e06 	br	8020a444 <__reset+0xfa1ea444>
8020ae4c:	d8802344 	addi	r2,sp,141
8020ae50:	003f1306 	br	8020aaa0 <__reset+0xfa1eaaa0>
8020ae54:	d9c02785 	stb	r7,158(sp)
8020ae58:	00392306 	br	802092e8 <__reset+0xfa1e92e8>
8020ae5c:	d9c02785 	stb	r7,158(sp)
8020ae60:	003aa906 	br	80209908 <__reset+0xfa1e9908>
8020ae64:	d9c02785 	stb	r7,158(sp)
8020ae68:	003a3d06 	br	80209760 <__reset+0xfa1e9760>
8020ae6c:	d9c02785 	stb	r7,158(sp)
8020ae70:	003aca06 	br	8020999c <__reset+0xfa1e999c>

8020ae74 <__vfprintf_internal>:
8020ae74:	00a008b4 	movhi	r2,32802
8020ae78:	10bad504 	addi	r2,r2,-5292
8020ae7c:	300f883a 	mov	r7,r6
8020ae80:	280d883a 	mov	r6,r5
8020ae84:	200b883a 	mov	r5,r4
8020ae88:	11000017 	ldw	r4,0(r2)
8020ae8c:	0208c7c1 	jmpi	80208c7c <___vfprintf_internal_r>

8020ae90 <__sbprintf>:
8020ae90:	2880030b 	ldhu	r2,12(r5)
8020ae94:	2ac01917 	ldw	r11,100(r5)
8020ae98:	2a80038b 	ldhu	r10,14(r5)
8020ae9c:	2a400717 	ldw	r9,28(r5)
8020aea0:	2a000917 	ldw	r8,36(r5)
8020aea4:	defee204 	addi	sp,sp,-1144
8020aea8:	00c10004 	movi	r3,1024
8020aeac:	dc011a15 	stw	r16,1128(sp)
8020aeb0:	10bfff4c 	andi	r2,r2,65533
8020aeb4:	2821883a 	mov	r16,r5
8020aeb8:	d8cb883a 	add	r5,sp,r3
8020aebc:	dc811c15 	stw	r18,1136(sp)
8020aec0:	dc411b15 	stw	r17,1132(sp)
8020aec4:	dfc11d15 	stw	ra,1140(sp)
8020aec8:	2025883a 	mov	r18,r4
8020aecc:	d881030d 	sth	r2,1036(sp)
8020aed0:	dac11915 	stw	r11,1124(sp)
8020aed4:	da81038d 	sth	r10,1038(sp)
8020aed8:	da410715 	stw	r9,1052(sp)
8020aedc:	da010915 	stw	r8,1060(sp)
8020aee0:	dec10015 	stw	sp,1024(sp)
8020aee4:	dec10415 	stw	sp,1040(sp)
8020aee8:	d8c10215 	stw	r3,1032(sp)
8020aeec:	d8c10515 	stw	r3,1044(sp)
8020aef0:	d8010615 	stw	zero,1048(sp)
8020aef4:	0208c7c0 	call	80208c7c <___vfprintf_internal_r>
8020aef8:	1023883a 	mov	r17,r2
8020aefc:	10000416 	blt	r2,zero,8020af10 <__sbprintf+0x80>
8020af00:	d9410004 	addi	r5,sp,1024
8020af04:	9009883a 	mov	r4,r18
8020af08:	020cb440 	call	8020cb44 <_fflush_r>
8020af0c:	10000d1e 	bne	r2,zero,8020af44 <__sbprintf+0xb4>
8020af10:	d881030b 	ldhu	r2,1036(sp)
8020af14:	1080100c 	andi	r2,r2,64
8020af18:	10000326 	beq	r2,zero,8020af28 <__sbprintf+0x98>
8020af1c:	8080030b 	ldhu	r2,12(r16)
8020af20:	10801014 	ori	r2,r2,64
8020af24:	8080030d 	sth	r2,12(r16)
8020af28:	8805883a 	mov	r2,r17
8020af2c:	dfc11d17 	ldw	ra,1140(sp)
8020af30:	dc811c17 	ldw	r18,1136(sp)
8020af34:	dc411b17 	ldw	r17,1132(sp)
8020af38:	dc011a17 	ldw	r16,1128(sp)
8020af3c:	dec11e04 	addi	sp,sp,1144
8020af40:	f800283a 	ret
8020af44:	047fffc4 	movi	r17,-1
8020af48:	003ff106 	br	8020af10 <__reset+0xfa1eaf10>

8020af4c <__swsetup_r>:
8020af4c:	00a008b4 	movhi	r2,32802
8020af50:	defffd04 	addi	sp,sp,-12
8020af54:	10bad504 	addi	r2,r2,-5292
8020af58:	dc400115 	stw	r17,4(sp)
8020af5c:	2023883a 	mov	r17,r4
8020af60:	11000017 	ldw	r4,0(r2)
8020af64:	dc000015 	stw	r16,0(sp)
8020af68:	dfc00215 	stw	ra,8(sp)
8020af6c:	2821883a 	mov	r16,r5
8020af70:	20000226 	beq	r4,zero,8020af7c <__swsetup_r+0x30>
8020af74:	20800e17 	ldw	r2,56(r4)
8020af78:	10003126 	beq	r2,zero,8020b040 <__swsetup_r+0xf4>
8020af7c:	8080030b 	ldhu	r2,12(r16)
8020af80:	10c0020c 	andi	r3,r2,8
8020af84:	1009883a 	mov	r4,r2
8020af88:	18000f26 	beq	r3,zero,8020afc8 <__swsetup_r+0x7c>
8020af8c:	80c00417 	ldw	r3,16(r16)
8020af90:	18001526 	beq	r3,zero,8020afe8 <__swsetup_r+0x9c>
8020af94:	1100004c 	andi	r4,r2,1
8020af98:	20001c1e 	bne	r4,zero,8020b00c <__swsetup_r+0xc0>
8020af9c:	1080008c 	andi	r2,r2,2
8020afa0:	1000291e 	bne	r2,zero,8020b048 <__swsetup_r+0xfc>
8020afa4:	80800517 	ldw	r2,20(r16)
8020afa8:	80800215 	stw	r2,8(r16)
8020afac:	18001c26 	beq	r3,zero,8020b020 <__swsetup_r+0xd4>
8020afb0:	0005883a 	mov	r2,zero
8020afb4:	dfc00217 	ldw	ra,8(sp)
8020afb8:	dc400117 	ldw	r17,4(sp)
8020afbc:	dc000017 	ldw	r16,0(sp)
8020afc0:	dec00304 	addi	sp,sp,12
8020afc4:	f800283a 	ret
8020afc8:	2080040c 	andi	r2,r4,16
8020afcc:	10002e26 	beq	r2,zero,8020b088 <__swsetup_r+0x13c>
8020afd0:	2080010c 	andi	r2,r4,4
8020afd4:	10001e1e 	bne	r2,zero,8020b050 <__swsetup_r+0x104>
8020afd8:	80c00417 	ldw	r3,16(r16)
8020afdc:	20800214 	ori	r2,r4,8
8020afe0:	8080030d 	sth	r2,12(r16)
8020afe4:	183feb1e 	bne	r3,zero,8020af94 <__reset+0xfa1eaf94>
8020afe8:	1100a00c 	andi	r4,r2,640
8020afec:	01408004 	movi	r5,512
8020aff0:	217fe826 	beq	r4,r5,8020af94 <__reset+0xfa1eaf94>
8020aff4:	800b883a 	mov	r5,r16
8020aff8:	8809883a 	mov	r4,r17
8020affc:	020dac40 	call	8020dac4 <__smakebuf_r>
8020b000:	8080030b 	ldhu	r2,12(r16)
8020b004:	80c00417 	ldw	r3,16(r16)
8020b008:	003fe206 	br	8020af94 <__reset+0xfa1eaf94>
8020b00c:	80800517 	ldw	r2,20(r16)
8020b010:	80000215 	stw	zero,8(r16)
8020b014:	0085c83a 	sub	r2,zero,r2
8020b018:	80800615 	stw	r2,24(r16)
8020b01c:	183fe41e 	bne	r3,zero,8020afb0 <__reset+0xfa1eafb0>
8020b020:	80c0030b 	ldhu	r3,12(r16)
8020b024:	0005883a 	mov	r2,zero
8020b028:	1900200c 	andi	r4,r3,128
8020b02c:	203fe126 	beq	r4,zero,8020afb4 <__reset+0xfa1eafb4>
8020b030:	18c01014 	ori	r3,r3,64
8020b034:	80c0030d 	sth	r3,12(r16)
8020b038:	00bfffc4 	movi	r2,-1
8020b03c:	003fdd06 	br	8020afb4 <__reset+0xfa1eafb4>
8020b040:	020cf200 	call	8020cf20 <__sinit>
8020b044:	003fcd06 	br	8020af7c <__reset+0xfa1eaf7c>
8020b048:	0005883a 	mov	r2,zero
8020b04c:	003fd606 	br	8020afa8 <__reset+0xfa1eafa8>
8020b050:	81400c17 	ldw	r5,48(r16)
8020b054:	28000626 	beq	r5,zero,8020b070 <__swsetup_r+0x124>
8020b058:	80801004 	addi	r2,r16,64
8020b05c:	28800326 	beq	r5,r2,8020b06c <__swsetup_r+0x120>
8020b060:	8809883a 	mov	r4,r17
8020b064:	020d0940 	call	8020d094 <_free_r>
8020b068:	8100030b 	ldhu	r4,12(r16)
8020b06c:	80000c15 	stw	zero,48(r16)
8020b070:	80c00417 	ldw	r3,16(r16)
8020b074:	00bff6c4 	movi	r2,-37
8020b078:	1108703a 	and	r4,r2,r4
8020b07c:	80000115 	stw	zero,4(r16)
8020b080:	80c00015 	stw	r3,0(r16)
8020b084:	003fd506 	br	8020afdc <__reset+0xfa1eafdc>
8020b088:	00800244 	movi	r2,9
8020b08c:	88800015 	stw	r2,0(r17)
8020b090:	20801014 	ori	r2,r4,64
8020b094:	8080030d 	sth	r2,12(r16)
8020b098:	00bfffc4 	movi	r2,-1
8020b09c:	003fc506 	br	8020afb4 <__reset+0xfa1eafb4>

8020b0a0 <quorem>:
8020b0a0:	defff704 	addi	sp,sp,-36
8020b0a4:	dc800215 	stw	r18,8(sp)
8020b0a8:	20800417 	ldw	r2,16(r4)
8020b0ac:	2c800417 	ldw	r18,16(r5)
8020b0b0:	dfc00815 	stw	ra,32(sp)
8020b0b4:	ddc00715 	stw	r23,28(sp)
8020b0b8:	dd800615 	stw	r22,24(sp)
8020b0bc:	dd400515 	stw	r21,20(sp)
8020b0c0:	dd000415 	stw	r20,16(sp)
8020b0c4:	dcc00315 	stw	r19,12(sp)
8020b0c8:	dc400115 	stw	r17,4(sp)
8020b0cc:	dc000015 	stw	r16,0(sp)
8020b0d0:	14807116 	blt	r2,r18,8020b298 <quorem+0x1f8>
8020b0d4:	94bfffc4 	addi	r18,r18,-1
8020b0d8:	94ad883a 	add	r22,r18,r18
8020b0dc:	b5ad883a 	add	r22,r22,r22
8020b0e0:	2c400504 	addi	r17,r5,20
8020b0e4:	8da9883a 	add	r20,r17,r22
8020b0e8:	25400504 	addi	r21,r4,20
8020b0ec:	282f883a 	mov	r23,r5
8020b0f0:	adad883a 	add	r22,r21,r22
8020b0f4:	a1400017 	ldw	r5,0(r20)
8020b0f8:	2021883a 	mov	r16,r4
8020b0fc:	b1000017 	ldw	r4,0(r22)
8020b100:	29400044 	addi	r5,r5,1
8020b104:	0213f640 	call	80213f64 <__udivsi3>
8020b108:	1027883a 	mov	r19,r2
8020b10c:	10002c26 	beq	r2,zero,8020b1c0 <quorem+0x120>
8020b110:	a813883a 	mov	r9,r21
8020b114:	880b883a 	mov	r5,r17
8020b118:	0009883a 	mov	r4,zero
8020b11c:	000d883a 	mov	r6,zero
8020b120:	2a000017 	ldw	r8,0(r5)
8020b124:	49c00017 	ldw	r7,0(r9)
8020b128:	29400104 	addi	r5,r5,4
8020b12c:	40bfffcc 	andi	r2,r8,65535
8020b130:	14c5383a 	mul	r2,r2,r19
8020b134:	4010d43a 	srli	r8,r8,16
8020b138:	38ffffcc 	andi	r3,r7,65535
8020b13c:	1105883a 	add	r2,r2,r4
8020b140:	1008d43a 	srli	r4,r2,16
8020b144:	44d1383a 	mul	r8,r8,r19
8020b148:	198d883a 	add	r6,r3,r6
8020b14c:	10ffffcc 	andi	r3,r2,65535
8020b150:	30c7c83a 	sub	r3,r6,r3
8020b154:	380ed43a 	srli	r7,r7,16
8020b158:	4105883a 	add	r2,r8,r4
8020b15c:	180dd43a 	srai	r6,r3,16
8020b160:	113fffcc 	andi	r4,r2,65535
8020b164:	390fc83a 	sub	r7,r7,r4
8020b168:	398d883a 	add	r6,r7,r6
8020b16c:	300e943a 	slli	r7,r6,16
8020b170:	18ffffcc 	andi	r3,r3,65535
8020b174:	1008d43a 	srli	r4,r2,16
8020b178:	38ceb03a 	or	r7,r7,r3
8020b17c:	49c00015 	stw	r7,0(r9)
8020b180:	300dd43a 	srai	r6,r6,16
8020b184:	4a400104 	addi	r9,r9,4
8020b188:	a17fe52e 	bgeu	r20,r5,8020b120 <__reset+0xfa1eb120>
8020b18c:	b0800017 	ldw	r2,0(r22)
8020b190:	10000b1e 	bne	r2,zero,8020b1c0 <quorem+0x120>
8020b194:	b0bfff04 	addi	r2,r22,-4
8020b198:	a880082e 	bgeu	r21,r2,8020b1bc <quorem+0x11c>
8020b19c:	b0ffff17 	ldw	r3,-4(r22)
8020b1a0:	18000326 	beq	r3,zero,8020b1b0 <quorem+0x110>
8020b1a4:	00000506 	br	8020b1bc <quorem+0x11c>
8020b1a8:	10c00017 	ldw	r3,0(r2)
8020b1ac:	1800031e 	bne	r3,zero,8020b1bc <quorem+0x11c>
8020b1b0:	10bfff04 	addi	r2,r2,-4
8020b1b4:	94bfffc4 	addi	r18,r18,-1
8020b1b8:	a8bffb36 	bltu	r21,r2,8020b1a8 <__reset+0xfa1eb1a8>
8020b1bc:	84800415 	stw	r18,16(r16)
8020b1c0:	b80b883a 	mov	r5,r23
8020b1c4:	8009883a 	mov	r4,r16
8020b1c8:	020f0bc0 	call	8020f0bc <__mcmp>
8020b1cc:	10002616 	blt	r2,zero,8020b268 <quorem+0x1c8>
8020b1d0:	9cc00044 	addi	r19,r19,1
8020b1d4:	a805883a 	mov	r2,r21
8020b1d8:	000b883a 	mov	r5,zero
8020b1dc:	11000017 	ldw	r4,0(r2)
8020b1e0:	89800017 	ldw	r6,0(r17)
8020b1e4:	10800104 	addi	r2,r2,4
8020b1e8:	20ffffcc 	andi	r3,r4,65535
8020b1ec:	194b883a 	add	r5,r3,r5
8020b1f0:	30ffffcc 	andi	r3,r6,65535
8020b1f4:	28c7c83a 	sub	r3,r5,r3
8020b1f8:	300cd43a 	srli	r6,r6,16
8020b1fc:	2008d43a 	srli	r4,r4,16
8020b200:	180bd43a 	srai	r5,r3,16
8020b204:	18ffffcc 	andi	r3,r3,65535
8020b208:	2189c83a 	sub	r4,r4,r6
8020b20c:	2149883a 	add	r4,r4,r5
8020b210:	200c943a 	slli	r6,r4,16
8020b214:	8c400104 	addi	r17,r17,4
8020b218:	200bd43a 	srai	r5,r4,16
8020b21c:	30c6b03a 	or	r3,r6,r3
8020b220:	10ffff15 	stw	r3,-4(r2)
8020b224:	a47fed2e 	bgeu	r20,r17,8020b1dc <__reset+0xfa1eb1dc>
8020b228:	9485883a 	add	r2,r18,r18
8020b22c:	1085883a 	add	r2,r2,r2
8020b230:	a887883a 	add	r3,r21,r2
8020b234:	18800017 	ldw	r2,0(r3)
8020b238:	10000b1e 	bne	r2,zero,8020b268 <quorem+0x1c8>
8020b23c:	18bfff04 	addi	r2,r3,-4
8020b240:	a880082e 	bgeu	r21,r2,8020b264 <quorem+0x1c4>
8020b244:	18ffff17 	ldw	r3,-4(r3)
8020b248:	18000326 	beq	r3,zero,8020b258 <quorem+0x1b8>
8020b24c:	00000506 	br	8020b264 <quorem+0x1c4>
8020b250:	10c00017 	ldw	r3,0(r2)
8020b254:	1800031e 	bne	r3,zero,8020b264 <quorem+0x1c4>
8020b258:	10bfff04 	addi	r2,r2,-4
8020b25c:	94bfffc4 	addi	r18,r18,-1
8020b260:	a8bffb36 	bltu	r21,r2,8020b250 <__reset+0xfa1eb250>
8020b264:	84800415 	stw	r18,16(r16)
8020b268:	9805883a 	mov	r2,r19
8020b26c:	dfc00817 	ldw	ra,32(sp)
8020b270:	ddc00717 	ldw	r23,28(sp)
8020b274:	dd800617 	ldw	r22,24(sp)
8020b278:	dd400517 	ldw	r21,20(sp)
8020b27c:	dd000417 	ldw	r20,16(sp)
8020b280:	dcc00317 	ldw	r19,12(sp)
8020b284:	dc800217 	ldw	r18,8(sp)
8020b288:	dc400117 	ldw	r17,4(sp)
8020b28c:	dc000017 	ldw	r16,0(sp)
8020b290:	dec00904 	addi	sp,sp,36
8020b294:	f800283a 	ret
8020b298:	0005883a 	mov	r2,zero
8020b29c:	003ff306 	br	8020b26c <__reset+0xfa1eb26c>

8020b2a0 <_dtoa_r>:
8020b2a0:	20801017 	ldw	r2,64(r4)
8020b2a4:	deffde04 	addi	sp,sp,-136
8020b2a8:	df002015 	stw	fp,128(sp)
8020b2ac:	dcc01b15 	stw	r19,108(sp)
8020b2b0:	dc801a15 	stw	r18,104(sp)
8020b2b4:	dc401915 	stw	r17,100(sp)
8020b2b8:	dc001815 	stw	r16,96(sp)
8020b2bc:	dfc02115 	stw	ra,132(sp)
8020b2c0:	ddc01f15 	stw	r23,124(sp)
8020b2c4:	dd801e15 	stw	r22,120(sp)
8020b2c8:	dd401d15 	stw	r21,116(sp)
8020b2cc:	dd001c15 	stw	r20,112(sp)
8020b2d0:	d9c00315 	stw	r7,12(sp)
8020b2d4:	2039883a 	mov	fp,r4
8020b2d8:	3023883a 	mov	r17,r6
8020b2dc:	2825883a 	mov	r18,r5
8020b2e0:	dc002417 	ldw	r16,144(sp)
8020b2e4:	3027883a 	mov	r19,r6
8020b2e8:	10000826 	beq	r2,zero,8020b30c <_dtoa_r+0x6c>
8020b2ec:	21801117 	ldw	r6,68(r4)
8020b2f0:	00c00044 	movi	r3,1
8020b2f4:	100b883a 	mov	r5,r2
8020b2f8:	1986983a 	sll	r3,r3,r6
8020b2fc:	11800115 	stw	r6,4(r2)
8020b300:	10c00215 	stw	r3,8(r2)
8020b304:	020e89c0 	call	8020e89c <_Bfree>
8020b308:	e0001015 	stw	zero,64(fp)
8020b30c:	88002e16 	blt	r17,zero,8020b3c8 <_dtoa_r+0x128>
8020b310:	80000015 	stw	zero,0(r16)
8020b314:	889ffc2c 	andhi	r2,r17,32752
8020b318:	00dffc34 	movhi	r3,32752
8020b31c:	10c01c26 	beq	r2,r3,8020b390 <_dtoa_r+0xf0>
8020b320:	000d883a 	mov	r6,zero
8020b324:	000f883a 	mov	r7,zero
8020b328:	9009883a 	mov	r4,r18
8020b32c:	980b883a 	mov	r5,r19
8020b330:	02151b40 	call	802151b4 <__eqdf2>
8020b334:	10002b1e 	bne	r2,zero,8020b3e4 <_dtoa_r+0x144>
8020b338:	d9c02317 	ldw	r7,140(sp)
8020b33c:	00800044 	movi	r2,1
8020b340:	38800015 	stw	r2,0(r7)
8020b344:	d8802517 	ldw	r2,148(sp)
8020b348:	10019e26 	beq	r2,zero,8020b9c4 <_dtoa_r+0x724>
8020b34c:	d8c02517 	ldw	r3,148(sp)
8020b350:	00a008b4 	movhi	r2,32802
8020b354:	10b29f44 	addi	r2,r2,-13699
8020b358:	18800015 	stw	r2,0(r3)
8020b35c:	10bfffc4 	addi	r2,r2,-1
8020b360:	dfc02117 	ldw	ra,132(sp)
8020b364:	df002017 	ldw	fp,128(sp)
8020b368:	ddc01f17 	ldw	r23,124(sp)
8020b36c:	dd801e17 	ldw	r22,120(sp)
8020b370:	dd401d17 	ldw	r21,116(sp)
8020b374:	dd001c17 	ldw	r20,112(sp)
8020b378:	dcc01b17 	ldw	r19,108(sp)
8020b37c:	dc801a17 	ldw	r18,104(sp)
8020b380:	dc401917 	ldw	r17,100(sp)
8020b384:	dc001817 	ldw	r16,96(sp)
8020b388:	dec02204 	addi	sp,sp,136
8020b38c:	f800283a 	ret
8020b390:	d8c02317 	ldw	r3,140(sp)
8020b394:	0089c3c4 	movi	r2,9999
8020b398:	18800015 	stw	r2,0(r3)
8020b39c:	90017726 	beq	r18,zero,8020b97c <_dtoa_r+0x6dc>
8020b3a0:	00a008b4 	movhi	r2,32802
8020b3a4:	10b2b304 	addi	r2,r2,-13620
8020b3a8:	d9002517 	ldw	r4,148(sp)
8020b3ac:	203fec26 	beq	r4,zero,8020b360 <__reset+0xfa1eb360>
8020b3b0:	10c000c7 	ldb	r3,3(r2)
8020b3b4:	1801781e 	bne	r3,zero,8020b998 <_dtoa_r+0x6f8>
8020b3b8:	10c000c4 	addi	r3,r2,3
8020b3bc:	d9802517 	ldw	r6,148(sp)
8020b3c0:	30c00015 	stw	r3,0(r6)
8020b3c4:	003fe606 	br	8020b360 <__reset+0xfa1eb360>
8020b3c8:	04e00034 	movhi	r19,32768
8020b3cc:	9cffffc4 	addi	r19,r19,-1
8020b3d0:	00800044 	movi	r2,1
8020b3d4:	8ce6703a 	and	r19,r17,r19
8020b3d8:	80800015 	stw	r2,0(r16)
8020b3dc:	9823883a 	mov	r17,r19
8020b3e0:	003fcc06 	br	8020b314 <__reset+0xfa1eb314>
8020b3e4:	d8800204 	addi	r2,sp,8
8020b3e8:	d8800015 	stw	r2,0(sp)
8020b3ec:	d9c00104 	addi	r7,sp,4
8020b3f0:	900b883a 	mov	r5,r18
8020b3f4:	980d883a 	mov	r6,r19
8020b3f8:	e009883a 	mov	r4,fp
8020b3fc:	8820d53a 	srli	r16,r17,20
8020b400:	020f4880 	call	8020f488 <__d2b>
8020b404:	d8800915 	stw	r2,36(sp)
8020b408:	8001651e 	bne	r16,zero,8020b9a0 <_dtoa_r+0x700>
8020b40c:	dd800217 	ldw	r22,8(sp)
8020b410:	dc000117 	ldw	r16,4(sp)
8020b414:	00800804 	movi	r2,32
8020b418:	b421883a 	add	r16,r22,r16
8020b41c:	80c10c84 	addi	r3,r16,1074
8020b420:	10c2d10e 	bge	r2,r3,8020bf68 <_dtoa_r+0xcc8>
8020b424:	00801004 	movi	r2,64
8020b428:	81010484 	addi	r4,r16,1042
8020b42c:	10c7c83a 	sub	r3,r2,r3
8020b430:	9108d83a 	srl	r4,r18,r4
8020b434:	88e2983a 	sll	r17,r17,r3
8020b438:	2448b03a 	or	r4,r4,r17
8020b43c:	021657c0 	call	8021657c <__floatunsidf>
8020b440:	017f8434 	movhi	r5,65040
8020b444:	01800044 	movi	r6,1
8020b448:	1009883a 	mov	r4,r2
8020b44c:	194b883a 	add	r5,r3,r5
8020b450:	843fffc4 	addi	r16,r16,-1
8020b454:	d9801115 	stw	r6,68(sp)
8020b458:	000d883a 	mov	r6,zero
8020b45c:	01cffe34 	movhi	r7,16376
8020b460:	0215b240 	call	80215b24 <__subdf3>
8020b464:	0198dbf4 	movhi	r6,25455
8020b468:	01cff4f4 	movhi	r7,16339
8020b46c:	3190d844 	addi	r6,r6,17249
8020b470:	39e1e9c4 	addi	r7,r7,-30809
8020b474:	1009883a 	mov	r4,r2
8020b478:	180b883a 	mov	r5,r3
8020b47c:	021540c0 	call	8021540c <__muldf3>
8020b480:	01a2d874 	movhi	r6,35681
8020b484:	01cff1f4 	movhi	r7,16327
8020b488:	31b22cc4 	addi	r6,r6,-14157
8020b48c:	39e28a04 	addi	r7,r7,-30168
8020b490:	180b883a 	mov	r5,r3
8020b494:	1009883a 	mov	r4,r2
8020b498:	02140200 	call	80214020 <__adddf3>
8020b49c:	8009883a 	mov	r4,r16
8020b4a0:	1029883a 	mov	r20,r2
8020b4a4:	1823883a 	mov	r17,r3
8020b4a8:	02164a00 	call	802164a0 <__floatsidf>
8020b4ac:	019427f4 	movhi	r6,20639
8020b4b0:	01cff4f4 	movhi	r7,16339
8020b4b4:	319e7ec4 	addi	r6,r6,31227
8020b4b8:	39d104c4 	addi	r7,r7,17427
8020b4bc:	1009883a 	mov	r4,r2
8020b4c0:	180b883a 	mov	r5,r3
8020b4c4:	021540c0 	call	8021540c <__muldf3>
8020b4c8:	100d883a 	mov	r6,r2
8020b4cc:	180f883a 	mov	r7,r3
8020b4d0:	a009883a 	mov	r4,r20
8020b4d4:	880b883a 	mov	r5,r17
8020b4d8:	02140200 	call	80214020 <__adddf3>
8020b4dc:	1009883a 	mov	r4,r2
8020b4e0:	180b883a 	mov	r5,r3
8020b4e4:	1029883a 	mov	r20,r2
8020b4e8:	1823883a 	mov	r17,r3
8020b4ec:	02164200 	call	80216420 <__fixdfsi>
8020b4f0:	000d883a 	mov	r6,zero
8020b4f4:	000f883a 	mov	r7,zero
8020b4f8:	a009883a 	mov	r4,r20
8020b4fc:	880b883a 	mov	r5,r17
8020b500:	d8800515 	stw	r2,20(sp)
8020b504:	02153180 	call	80215318 <__ledf2>
8020b508:	10028716 	blt	r2,zero,8020bf28 <_dtoa_r+0xc88>
8020b50c:	d8c00517 	ldw	r3,20(sp)
8020b510:	00800584 	movi	r2,22
8020b514:	10c27536 	bltu	r2,r3,8020beec <_dtoa_r+0xc4c>
8020b518:	180490fa 	slli	r2,r3,3
8020b51c:	00e008b4 	movhi	r3,32802
8020b520:	18f2ce04 	addi	r3,r3,-13512
8020b524:	1885883a 	add	r2,r3,r2
8020b528:	11000017 	ldw	r4,0(r2)
8020b52c:	11400117 	ldw	r5,4(r2)
8020b530:	900d883a 	mov	r6,r18
8020b534:	980f883a 	mov	r7,r19
8020b538:	021523c0 	call	8021523c <__gedf2>
8020b53c:	00828d0e 	bge	zero,r2,8020bf74 <_dtoa_r+0xcd4>
8020b540:	d9000517 	ldw	r4,20(sp)
8020b544:	d8000e15 	stw	zero,56(sp)
8020b548:	213fffc4 	addi	r4,r4,-1
8020b54c:	d9000515 	stw	r4,20(sp)
8020b550:	b42dc83a 	sub	r22,r22,r16
8020b554:	b5bfffc4 	addi	r22,r22,-1
8020b558:	b0026f16 	blt	r22,zero,8020bf18 <_dtoa_r+0xc78>
8020b55c:	d8000815 	stw	zero,32(sp)
8020b560:	d9c00517 	ldw	r7,20(sp)
8020b564:	38026416 	blt	r7,zero,8020bef8 <_dtoa_r+0xc58>
8020b568:	b1ed883a 	add	r22,r22,r7
8020b56c:	d9c00d15 	stw	r7,52(sp)
8020b570:	d8000a15 	stw	zero,40(sp)
8020b574:	d9800317 	ldw	r6,12(sp)
8020b578:	00800244 	movi	r2,9
8020b57c:	11811436 	bltu	r2,r6,8020b9d0 <_dtoa_r+0x730>
8020b580:	00800144 	movi	r2,5
8020b584:	1184e10e 	bge	r2,r6,8020c90c <_dtoa_r+0x166c>
8020b588:	31bfff04 	addi	r6,r6,-4
8020b58c:	d9800315 	stw	r6,12(sp)
8020b590:	0023883a 	mov	r17,zero
8020b594:	d9800317 	ldw	r6,12(sp)
8020b598:	008000c4 	movi	r2,3
8020b59c:	30836726 	beq	r6,r2,8020c33c <_dtoa_r+0x109c>
8020b5a0:	1183410e 	bge	r2,r6,8020c2a8 <_dtoa_r+0x1008>
8020b5a4:	d9c00317 	ldw	r7,12(sp)
8020b5a8:	00800104 	movi	r2,4
8020b5ac:	38827c26 	beq	r7,r2,8020bfa0 <_dtoa_r+0xd00>
8020b5b0:	00800144 	movi	r2,5
8020b5b4:	3884c41e 	bne	r7,r2,8020c8c8 <_dtoa_r+0x1628>
8020b5b8:	00800044 	movi	r2,1
8020b5bc:	d8800b15 	stw	r2,44(sp)
8020b5c0:	d8c00517 	ldw	r3,20(sp)
8020b5c4:	d9002217 	ldw	r4,136(sp)
8020b5c8:	1907883a 	add	r3,r3,r4
8020b5cc:	19800044 	addi	r6,r3,1
8020b5d0:	d8c00c15 	stw	r3,48(sp)
8020b5d4:	d9800615 	stw	r6,24(sp)
8020b5d8:	0183a40e 	bge	zero,r6,8020c46c <_dtoa_r+0x11cc>
8020b5dc:	d9800617 	ldw	r6,24(sp)
8020b5e0:	3021883a 	mov	r16,r6
8020b5e4:	e0001115 	stw	zero,68(fp)
8020b5e8:	008005c4 	movi	r2,23
8020b5ec:	1184c92e 	bgeu	r2,r6,8020c914 <_dtoa_r+0x1674>
8020b5f0:	00c00044 	movi	r3,1
8020b5f4:	00800104 	movi	r2,4
8020b5f8:	1085883a 	add	r2,r2,r2
8020b5fc:	11000504 	addi	r4,r2,20
8020b600:	180b883a 	mov	r5,r3
8020b604:	18c00044 	addi	r3,r3,1
8020b608:	313ffb2e 	bgeu	r6,r4,8020b5f8 <__reset+0xfa1eb5f8>
8020b60c:	e1401115 	stw	r5,68(fp)
8020b610:	e009883a 	mov	r4,fp
8020b614:	020e7f40 	call	8020e7f4 <_Balloc>
8020b618:	d8800715 	stw	r2,28(sp)
8020b61c:	e0801015 	stw	r2,64(fp)
8020b620:	00800384 	movi	r2,14
8020b624:	1400f736 	bltu	r2,r16,8020ba04 <_dtoa_r+0x764>
8020b628:	8800f626 	beq	r17,zero,8020ba04 <_dtoa_r+0x764>
8020b62c:	d9c00517 	ldw	r7,20(sp)
8020b630:	01c39a0e 	bge	zero,r7,8020c49c <_dtoa_r+0x11fc>
8020b634:	388003cc 	andi	r2,r7,15
8020b638:	100490fa 	slli	r2,r2,3
8020b63c:	382bd13a 	srai	r21,r7,4
8020b640:	00e008b4 	movhi	r3,32802
8020b644:	18f2ce04 	addi	r3,r3,-13512
8020b648:	1885883a 	add	r2,r3,r2
8020b64c:	a8c0040c 	andi	r3,r21,16
8020b650:	12400017 	ldw	r9,0(r2)
8020b654:	12000117 	ldw	r8,4(r2)
8020b658:	18037926 	beq	r3,zero,8020c440 <_dtoa_r+0x11a0>
8020b65c:	00a008b4 	movhi	r2,32802
8020b660:	10b2c404 	addi	r2,r2,-13552
8020b664:	11800817 	ldw	r6,32(r2)
8020b668:	11c00917 	ldw	r7,36(r2)
8020b66c:	9009883a 	mov	r4,r18
8020b670:	980b883a 	mov	r5,r19
8020b674:	da001715 	stw	r8,92(sp)
8020b678:	da401615 	stw	r9,88(sp)
8020b67c:	02148cc0 	call	802148cc <__divdf3>
8020b680:	da001717 	ldw	r8,92(sp)
8020b684:	da401617 	ldw	r9,88(sp)
8020b688:	ad4003cc 	andi	r21,r21,15
8020b68c:	040000c4 	movi	r16,3
8020b690:	1023883a 	mov	r17,r2
8020b694:	1829883a 	mov	r20,r3
8020b698:	a8001126 	beq	r21,zero,8020b6e0 <_dtoa_r+0x440>
8020b69c:	05e008b4 	movhi	r23,32802
8020b6a0:	bdf2c404 	addi	r23,r23,-13552
8020b6a4:	4805883a 	mov	r2,r9
8020b6a8:	4007883a 	mov	r3,r8
8020b6ac:	a980004c 	andi	r6,r21,1
8020b6b0:	1009883a 	mov	r4,r2
8020b6b4:	a82bd07a 	srai	r21,r21,1
8020b6b8:	180b883a 	mov	r5,r3
8020b6bc:	30000426 	beq	r6,zero,8020b6d0 <_dtoa_r+0x430>
8020b6c0:	b9800017 	ldw	r6,0(r23)
8020b6c4:	b9c00117 	ldw	r7,4(r23)
8020b6c8:	84000044 	addi	r16,r16,1
8020b6cc:	021540c0 	call	8021540c <__muldf3>
8020b6d0:	bdc00204 	addi	r23,r23,8
8020b6d4:	a83ff51e 	bne	r21,zero,8020b6ac <__reset+0xfa1eb6ac>
8020b6d8:	1013883a 	mov	r9,r2
8020b6dc:	1811883a 	mov	r8,r3
8020b6e0:	480d883a 	mov	r6,r9
8020b6e4:	400f883a 	mov	r7,r8
8020b6e8:	8809883a 	mov	r4,r17
8020b6ec:	a00b883a 	mov	r5,r20
8020b6f0:	02148cc0 	call	802148cc <__divdf3>
8020b6f4:	d8800f15 	stw	r2,60(sp)
8020b6f8:	d8c01015 	stw	r3,64(sp)
8020b6fc:	d8c00e17 	ldw	r3,56(sp)
8020b700:	18000626 	beq	r3,zero,8020b71c <_dtoa_r+0x47c>
8020b704:	d9000f17 	ldw	r4,60(sp)
8020b708:	d9401017 	ldw	r5,64(sp)
8020b70c:	000d883a 	mov	r6,zero
8020b710:	01cffc34 	movhi	r7,16368
8020b714:	02153180 	call	80215318 <__ledf2>
8020b718:	10040b16 	blt	r2,zero,8020c748 <_dtoa_r+0x14a8>
8020b71c:	8009883a 	mov	r4,r16
8020b720:	02164a00 	call	802164a0 <__floatsidf>
8020b724:	d9800f17 	ldw	r6,60(sp)
8020b728:	d9c01017 	ldw	r7,64(sp)
8020b72c:	1009883a 	mov	r4,r2
8020b730:	180b883a 	mov	r5,r3
8020b734:	021540c0 	call	8021540c <__muldf3>
8020b738:	000d883a 	mov	r6,zero
8020b73c:	01d00734 	movhi	r7,16412
8020b740:	1009883a 	mov	r4,r2
8020b744:	180b883a 	mov	r5,r3
8020b748:	02140200 	call	80214020 <__adddf3>
8020b74c:	1021883a 	mov	r16,r2
8020b750:	d8800617 	ldw	r2,24(sp)
8020b754:	047f3034 	movhi	r17,64704
8020b758:	1c63883a 	add	r17,r3,r17
8020b75c:	10031826 	beq	r2,zero,8020c3c0 <_dtoa_r+0x1120>
8020b760:	d8c00517 	ldw	r3,20(sp)
8020b764:	db000617 	ldw	r12,24(sp)
8020b768:	d8c01315 	stw	r3,76(sp)
8020b76c:	d9000b17 	ldw	r4,44(sp)
8020b770:	20038f26 	beq	r4,zero,8020c5b0 <_dtoa_r+0x1310>
8020b774:	60bfffc4 	addi	r2,r12,-1
8020b778:	100490fa 	slli	r2,r2,3
8020b77c:	00e008b4 	movhi	r3,32802
8020b780:	18f2ce04 	addi	r3,r3,-13512
8020b784:	1885883a 	add	r2,r3,r2
8020b788:	11800017 	ldw	r6,0(r2)
8020b78c:	11c00117 	ldw	r7,4(r2)
8020b790:	d8800717 	ldw	r2,28(sp)
8020b794:	0009883a 	mov	r4,zero
8020b798:	014ff834 	movhi	r5,16352
8020b79c:	db001615 	stw	r12,88(sp)
8020b7a0:	15c00044 	addi	r23,r2,1
8020b7a4:	02148cc0 	call	802148cc <__divdf3>
8020b7a8:	800d883a 	mov	r6,r16
8020b7ac:	880f883a 	mov	r7,r17
8020b7b0:	1009883a 	mov	r4,r2
8020b7b4:	180b883a 	mov	r5,r3
8020b7b8:	0215b240 	call	80215b24 <__subdf3>
8020b7bc:	d9401017 	ldw	r5,64(sp)
8020b7c0:	d9000f17 	ldw	r4,60(sp)
8020b7c4:	102b883a 	mov	r21,r2
8020b7c8:	d8c01215 	stw	r3,72(sp)
8020b7cc:	02164200 	call	80216420 <__fixdfsi>
8020b7d0:	1009883a 	mov	r4,r2
8020b7d4:	1029883a 	mov	r20,r2
8020b7d8:	02164a00 	call	802164a0 <__floatsidf>
8020b7dc:	d9000f17 	ldw	r4,60(sp)
8020b7e0:	d9401017 	ldw	r5,64(sp)
8020b7e4:	100d883a 	mov	r6,r2
8020b7e8:	180f883a 	mov	r7,r3
8020b7ec:	0215b240 	call	80215b24 <__subdf3>
8020b7f0:	1823883a 	mov	r17,r3
8020b7f4:	d8c00717 	ldw	r3,28(sp)
8020b7f8:	d9401217 	ldw	r5,72(sp)
8020b7fc:	a2000c04 	addi	r8,r20,48
8020b800:	1021883a 	mov	r16,r2
8020b804:	1a000005 	stb	r8,0(r3)
8020b808:	800d883a 	mov	r6,r16
8020b80c:	880f883a 	mov	r7,r17
8020b810:	a809883a 	mov	r4,r21
8020b814:	4029883a 	mov	r20,r8
8020b818:	021523c0 	call	8021523c <__gedf2>
8020b81c:	00841d16 	blt	zero,r2,8020c894 <_dtoa_r+0x15f4>
8020b820:	800d883a 	mov	r6,r16
8020b824:	880f883a 	mov	r7,r17
8020b828:	0009883a 	mov	r4,zero
8020b82c:	014ffc34 	movhi	r5,16368
8020b830:	0215b240 	call	80215b24 <__subdf3>
8020b834:	d9401217 	ldw	r5,72(sp)
8020b838:	100d883a 	mov	r6,r2
8020b83c:	180f883a 	mov	r7,r3
8020b840:	a809883a 	mov	r4,r21
8020b844:	021523c0 	call	8021523c <__gedf2>
8020b848:	db001617 	ldw	r12,88(sp)
8020b84c:	00840e16 	blt	zero,r2,8020c888 <_dtoa_r+0x15e8>
8020b850:	00800044 	movi	r2,1
8020b854:	13006b0e 	bge	r2,r12,8020ba04 <_dtoa_r+0x764>
8020b858:	d9000717 	ldw	r4,28(sp)
8020b85c:	dd800f15 	stw	r22,60(sp)
8020b860:	dcc01015 	stw	r19,64(sp)
8020b864:	2319883a 	add	r12,r4,r12
8020b868:	dcc01217 	ldw	r19,72(sp)
8020b86c:	602d883a 	mov	r22,r12
8020b870:	dc801215 	stw	r18,72(sp)
8020b874:	b825883a 	mov	r18,r23
8020b878:	00000906 	br	8020b8a0 <_dtoa_r+0x600>
8020b87c:	0215b240 	call	80215b24 <__subdf3>
8020b880:	a80d883a 	mov	r6,r21
8020b884:	980f883a 	mov	r7,r19
8020b888:	1009883a 	mov	r4,r2
8020b88c:	180b883a 	mov	r5,r3
8020b890:	02153180 	call	80215318 <__ledf2>
8020b894:	1003e816 	blt	r2,zero,8020c838 <_dtoa_r+0x1598>
8020b898:	b825883a 	mov	r18,r23
8020b89c:	bd83e926 	beq	r23,r22,8020c844 <_dtoa_r+0x15a4>
8020b8a0:	a809883a 	mov	r4,r21
8020b8a4:	980b883a 	mov	r5,r19
8020b8a8:	000d883a 	mov	r6,zero
8020b8ac:	01d00934 	movhi	r7,16420
8020b8b0:	021540c0 	call	8021540c <__muldf3>
8020b8b4:	000d883a 	mov	r6,zero
8020b8b8:	01d00934 	movhi	r7,16420
8020b8bc:	8009883a 	mov	r4,r16
8020b8c0:	880b883a 	mov	r5,r17
8020b8c4:	102b883a 	mov	r21,r2
8020b8c8:	1827883a 	mov	r19,r3
8020b8cc:	021540c0 	call	8021540c <__muldf3>
8020b8d0:	180b883a 	mov	r5,r3
8020b8d4:	1009883a 	mov	r4,r2
8020b8d8:	1821883a 	mov	r16,r3
8020b8dc:	1023883a 	mov	r17,r2
8020b8e0:	02164200 	call	80216420 <__fixdfsi>
8020b8e4:	1009883a 	mov	r4,r2
8020b8e8:	1029883a 	mov	r20,r2
8020b8ec:	02164a00 	call	802164a0 <__floatsidf>
8020b8f0:	8809883a 	mov	r4,r17
8020b8f4:	800b883a 	mov	r5,r16
8020b8f8:	100d883a 	mov	r6,r2
8020b8fc:	180f883a 	mov	r7,r3
8020b900:	0215b240 	call	80215b24 <__subdf3>
8020b904:	a5000c04 	addi	r20,r20,48
8020b908:	a80d883a 	mov	r6,r21
8020b90c:	980f883a 	mov	r7,r19
8020b910:	1009883a 	mov	r4,r2
8020b914:	180b883a 	mov	r5,r3
8020b918:	95000005 	stb	r20,0(r18)
8020b91c:	1021883a 	mov	r16,r2
8020b920:	1823883a 	mov	r17,r3
8020b924:	02153180 	call	80215318 <__ledf2>
8020b928:	bdc00044 	addi	r23,r23,1
8020b92c:	800d883a 	mov	r6,r16
8020b930:	880f883a 	mov	r7,r17
8020b934:	0009883a 	mov	r4,zero
8020b938:	014ffc34 	movhi	r5,16368
8020b93c:	103fcf0e 	bge	r2,zero,8020b87c <__reset+0xfa1eb87c>
8020b940:	d8c01317 	ldw	r3,76(sp)
8020b944:	d8c00515 	stw	r3,20(sp)
8020b948:	d9400917 	ldw	r5,36(sp)
8020b94c:	e009883a 	mov	r4,fp
8020b950:	020e89c0 	call	8020e89c <_Bfree>
8020b954:	d9000517 	ldw	r4,20(sp)
8020b958:	d9802317 	ldw	r6,140(sp)
8020b95c:	d9c02517 	ldw	r7,148(sp)
8020b960:	b8000005 	stb	zero,0(r23)
8020b964:	20800044 	addi	r2,r4,1
8020b968:	30800015 	stw	r2,0(r6)
8020b96c:	3802aa26 	beq	r7,zero,8020c418 <_dtoa_r+0x1178>
8020b970:	3dc00015 	stw	r23,0(r7)
8020b974:	d8800717 	ldw	r2,28(sp)
8020b978:	003e7906 	br	8020b360 <__reset+0xfa1eb360>
8020b97c:	00800434 	movhi	r2,16
8020b980:	10bfffc4 	addi	r2,r2,-1
8020b984:	88a2703a 	and	r17,r17,r2
8020b988:	883e851e 	bne	r17,zero,8020b3a0 <__reset+0xfa1eb3a0>
8020b98c:	00a008b4 	movhi	r2,32802
8020b990:	10b2b004 	addi	r2,r2,-13632
8020b994:	003e8406 	br	8020b3a8 <__reset+0xfa1eb3a8>
8020b998:	10c00204 	addi	r3,r2,8
8020b99c:	003e8706 	br	8020b3bc <__reset+0xfa1eb3bc>
8020b9a0:	01400434 	movhi	r5,16
8020b9a4:	297fffc4 	addi	r5,r5,-1
8020b9a8:	994a703a 	and	r5,r19,r5
8020b9ac:	9009883a 	mov	r4,r18
8020b9b0:	843f0044 	addi	r16,r16,-1023
8020b9b4:	294ffc34 	orhi	r5,r5,16368
8020b9b8:	dd800217 	ldw	r22,8(sp)
8020b9bc:	d8001115 	stw	zero,68(sp)
8020b9c0:	003ea506 	br	8020b458 <__reset+0xfa1eb458>
8020b9c4:	00a008b4 	movhi	r2,32802
8020b9c8:	10b29f04 	addi	r2,r2,-13700
8020b9cc:	003e6406 	br	8020b360 <__reset+0xfa1eb360>
8020b9d0:	e0001115 	stw	zero,68(fp)
8020b9d4:	000b883a 	mov	r5,zero
8020b9d8:	e009883a 	mov	r4,fp
8020b9dc:	020e7f40 	call	8020e7f4 <_Balloc>
8020b9e0:	01bfffc4 	movi	r6,-1
8020b9e4:	01c00044 	movi	r7,1
8020b9e8:	d8800715 	stw	r2,28(sp)
8020b9ec:	d9800c15 	stw	r6,48(sp)
8020b9f0:	e0801015 	stw	r2,64(fp)
8020b9f4:	d8000315 	stw	zero,12(sp)
8020b9f8:	d9c00b15 	stw	r7,44(sp)
8020b9fc:	d9800615 	stw	r6,24(sp)
8020ba00:	d8002215 	stw	zero,136(sp)
8020ba04:	d8800117 	ldw	r2,4(sp)
8020ba08:	10008916 	blt	r2,zero,8020bc30 <_dtoa_r+0x990>
8020ba0c:	d9000517 	ldw	r4,20(sp)
8020ba10:	00c00384 	movi	r3,14
8020ba14:	19008616 	blt	r3,r4,8020bc30 <_dtoa_r+0x990>
8020ba18:	200490fa 	slli	r2,r4,3
8020ba1c:	00e008b4 	movhi	r3,32802
8020ba20:	d9802217 	ldw	r6,136(sp)
8020ba24:	18f2ce04 	addi	r3,r3,-13512
8020ba28:	1885883a 	add	r2,r3,r2
8020ba2c:	14000017 	ldw	r16,0(r2)
8020ba30:	14400117 	ldw	r17,4(r2)
8020ba34:	30016316 	blt	r6,zero,8020bfc4 <_dtoa_r+0xd24>
8020ba38:	800d883a 	mov	r6,r16
8020ba3c:	880f883a 	mov	r7,r17
8020ba40:	9009883a 	mov	r4,r18
8020ba44:	980b883a 	mov	r5,r19
8020ba48:	02148cc0 	call	802148cc <__divdf3>
8020ba4c:	180b883a 	mov	r5,r3
8020ba50:	1009883a 	mov	r4,r2
8020ba54:	02164200 	call	80216420 <__fixdfsi>
8020ba58:	1009883a 	mov	r4,r2
8020ba5c:	102b883a 	mov	r21,r2
8020ba60:	02164a00 	call	802164a0 <__floatsidf>
8020ba64:	800d883a 	mov	r6,r16
8020ba68:	880f883a 	mov	r7,r17
8020ba6c:	1009883a 	mov	r4,r2
8020ba70:	180b883a 	mov	r5,r3
8020ba74:	021540c0 	call	8021540c <__muldf3>
8020ba78:	100d883a 	mov	r6,r2
8020ba7c:	180f883a 	mov	r7,r3
8020ba80:	9009883a 	mov	r4,r18
8020ba84:	980b883a 	mov	r5,r19
8020ba88:	0215b240 	call	80215b24 <__subdf3>
8020ba8c:	d9c00717 	ldw	r7,28(sp)
8020ba90:	1009883a 	mov	r4,r2
8020ba94:	a8800c04 	addi	r2,r21,48
8020ba98:	38800005 	stb	r2,0(r7)
8020ba9c:	3dc00044 	addi	r23,r7,1
8020baa0:	d9c00617 	ldw	r7,24(sp)
8020baa4:	01800044 	movi	r6,1
8020baa8:	180b883a 	mov	r5,r3
8020baac:	2005883a 	mov	r2,r4
8020bab0:	39803826 	beq	r7,r6,8020bb94 <_dtoa_r+0x8f4>
8020bab4:	000d883a 	mov	r6,zero
8020bab8:	01d00934 	movhi	r7,16420
8020babc:	021540c0 	call	8021540c <__muldf3>
8020bac0:	000d883a 	mov	r6,zero
8020bac4:	000f883a 	mov	r7,zero
8020bac8:	1009883a 	mov	r4,r2
8020bacc:	180b883a 	mov	r5,r3
8020bad0:	1025883a 	mov	r18,r2
8020bad4:	1827883a 	mov	r19,r3
8020bad8:	02151b40 	call	802151b4 <__eqdf2>
8020badc:	103f9a26 	beq	r2,zero,8020b948 <__reset+0xfa1eb948>
8020bae0:	d9c00617 	ldw	r7,24(sp)
8020bae4:	d8c00717 	ldw	r3,28(sp)
8020bae8:	b829883a 	mov	r20,r23
8020baec:	38bfffc4 	addi	r2,r7,-1
8020baf0:	18ad883a 	add	r22,r3,r2
8020baf4:	00000a06 	br	8020bb20 <_dtoa_r+0x880>
8020baf8:	021540c0 	call	8021540c <__muldf3>
8020bafc:	000d883a 	mov	r6,zero
8020bb00:	000f883a 	mov	r7,zero
8020bb04:	1009883a 	mov	r4,r2
8020bb08:	180b883a 	mov	r5,r3
8020bb0c:	1025883a 	mov	r18,r2
8020bb10:	1827883a 	mov	r19,r3
8020bb14:	b829883a 	mov	r20,r23
8020bb18:	02151b40 	call	802151b4 <__eqdf2>
8020bb1c:	103f8a26 	beq	r2,zero,8020b948 <__reset+0xfa1eb948>
8020bb20:	800d883a 	mov	r6,r16
8020bb24:	880f883a 	mov	r7,r17
8020bb28:	9009883a 	mov	r4,r18
8020bb2c:	980b883a 	mov	r5,r19
8020bb30:	02148cc0 	call	802148cc <__divdf3>
8020bb34:	180b883a 	mov	r5,r3
8020bb38:	1009883a 	mov	r4,r2
8020bb3c:	02164200 	call	80216420 <__fixdfsi>
8020bb40:	1009883a 	mov	r4,r2
8020bb44:	102b883a 	mov	r21,r2
8020bb48:	02164a00 	call	802164a0 <__floatsidf>
8020bb4c:	800d883a 	mov	r6,r16
8020bb50:	880f883a 	mov	r7,r17
8020bb54:	1009883a 	mov	r4,r2
8020bb58:	180b883a 	mov	r5,r3
8020bb5c:	021540c0 	call	8021540c <__muldf3>
8020bb60:	100d883a 	mov	r6,r2
8020bb64:	180f883a 	mov	r7,r3
8020bb68:	9009883a 	mov	r4,r18
8020bb6c:	980b883a 	mov	r5,r19
8020bb70:	0215b240 	call	80215b24 <__subdf3>
8020bb74:	aa000c04 	addi	r8,r21,48
8020bb78:	a2000005 	stb	r8,0(r20)
8020bb7c:	000d883a 	mov	r6,zero
8020bb80:	01d00934 	movhi	r7,16420
8020bb84:	1009883a 	mov	r4,r2
8020bb88:	180b883a 	mov	r5,r3
8020bb8c:	a5c00044 	addi	r23,r20,1
8020bb90:	b53fd91e 	bne	r22,r20,8020baf8 <__reset+0xfa1ebaf8>
8020bb94:	100d883a 	mov	r6,r2
8020bb98:	180f883a 	mov	r7,r3
8020bb9c:	1009883a 	mov	r4,r2
8020bba0:	180b883a 	mov	r5,r3
8020bba4:	02140200 	call	80214020 <__adddf3>
8020bba8:	100d883a 	mov	r6,r2
8020bbac:	180f883a 	mov	r7,r3
8020bbb0:	8009883a 	mov	r4,r16
8020bbb4:	880b883a 	mov	r5,r17
8020bbb8:	1027883a 	mov	r19,r2
8020bbbc:	1825883a 	mov	r18,r3
8020bbc0:	02153180 	call	80215318 <__ledf2>
8020bbc4:	10000816 	blt	r2,zero,8020bbe8 <_dtoa_r+0x948>
8020bbc8:	980d883a 	mov	r6,r19
8020bbcc:	900f883a 	mov	r7,r18
8020bbd0:	8009883a 	mov	r4,r16
8020bbd4:	880b883a 	mov	r5,r17
8020bbd8:	02151b40 	call	802151b4 <__eqdf2>
8020bbdc:	103f5a1e 	bne	r2,zero,8020b948 <__reset+0xfa1eb948>
8020bbe0:	ad40004c 	andi	r21,r21,1
8020bbe4:	a83f5826 	beq	r21,zero,8020b948 <__reset+0xfa1eb948>
8020bbe8:	bd3fffc3 	ldbu	r20,-1(r23)
8020bbec:	b8bfffc4 	addi	r2,r23,-1
8020bbf0:	1007883a 	mov	r3,r2
8020bbf4:	01400e44 	movi	r5,57
8020bbf8:	d9800717 	ldw	r6,28(sp)
8020bbfc:	00000506 	br	8020bc14 <_dtoa_r+0x974>
8020bc00:	18ffffc4 	addi	r3,r3,-1
8020bc04:	11824726 	beq	r2,r6,8020c524 <_dtoa_r+0x1284>
8020bc08:	1d000003 	ldbu	r20,0(r3)
8020bc0c:	102f883a 	mov	r23,r2
8020bc10:	10bfffc4 	addi	r2,r2,-1
8020bc14:	a1003fcc 	andi	r4,r20,255
8020bc18:	2100201c 	xori	r4,r4,128
8020bc1c:	213fe004 	addi	r4,r4,-128
8020bc20:	217ff726 	beq	r4,r5,8020bc00 <__reset+0xfa1ebc00>
8020bc24:	a2000044 	addi	r8,r20,1
8020bc28:	12000005 	stb	r8,0(r2)
8020bc2c:	003f4606 	br	8020b948 <__reset+0xfa1eb948>
8020bc30:	d9000b17 	ldw	r4,44(sp)
8020bc34:	2000c826 	beq	r4,zero,8020bf58 <_dtoa_r+0xcb8>
8020bc38:	d9800317 	ldw	r6,12(sp)
8020bc3c:	00c00044 	movi	r3,1
8020bc40:	1980f90e 	bge	r3,r6,8020c028 <_dtoa_r+0xd88>
8020bc44:	d8800617 	ldw	r2,24(sp)
8020bc48:	d8c00a17 	ldw	r3,40(sp)
8020bc4c:	157fffc4 	addi	r21,r2,-1
8020bc50:	1d41f316 	blt	r3,r21,8020c420 <_dtoa_r+0x1180>
8020bc54:	1d6bc83a 	sub	r21,r3,r21
8020bc58:	d9c00617 	ldw	r7,24(sp)
8020bc5c:	3802aa16 	blt	r7,zero,8020c708 <_dtoa_r+0x1468>
8020bc60:	dd000817 	ldw	r20,32(sp)
8020bc64:	d8800617 	ldw	r2,24(sp)
8020bc68:	d8c00817 	ldw	r3,32(sp)
8020bc6c:	01400044 	movi	r5,1
8020bc70:	e009883a 	mov	r4,fp
8020bc74:	1887883a 	add	r3,r3,r2
8020bc78:	d8c00815 	stw	r3,32(sp)
8020bc7c:	b0ad883a 	add	r22,r22,r2
8020bc80:	020ec000 	call	8020ec00 <__i2b>
8020bc84:	1023883a 	mov	r17,r2
8020bc88:	a0000826 	beq	r20,zero,8020bcac <_dtoa_r+0xa0c>
8020bc8c:	0580070e 	bge	zero,r22,8020bcac <_dtoa_r+0xa0c>
8020bc90:	a005883a 	mov	r2,r20
8020bc94:	b500b916 	blt	r22,r20,8020bf7c <_dtoa_r+0xcdc>
8020bc98:	d9000817 	ldw	r4,32(sp)
8020bc9c:	a0a9c83a 	sub	r20,r20,r2
8020bca0:	b0adc83a 	sub	r22,r22,r2
8020bca4:	2089c83a 	sub	r4,r4,r2
8020bca8:	d9000815 	stw	r4,32(sp)
8020bcac:	d9800a17 	ldw	r6,40(sp)
8020bcb0:	0181810e 	bge	zero,r6,8020c2b8 <_dtoa_r+0x1018>
8020bcb4:	d9c00b17 	ldw	r7,44(sp)
8020bcb8:	3800b326 	beq	r7,zero,8020bf88 <_dtoa_r+0xce8>
8020bcbc:	a800b226 	beq	r21,zero,8020bf88 <_dtoa_r+0xce8>
8020bcc0:	880b883a 	mov	r5,r17
8020bcc4:	a80d883a 	mov	r6,r21
8020bcc8:	e009883a 	mov	r4,fp
8020bccc:	020ee340 	call	8020ee34 <__pow5mult>
8020bcd0:	d9800917 	ldw	r6,36(sp)
8020bcd4:	100b883a 	mov	r5,r2
8020bcd8:	e009883a 	mov	r4,fp
8020bcdc:	1023883a 	mov	r17,r2
8020bce0:	020ec3c0 	call	8020ec3c <__multiply>
8020bce4:	1021883a 	mov	r16,r2
8020bce8:	d8800a17 	ldw	r2,40(sp)
8020bcec:	d9400917 	ldw	r5,36(sp)
8020bcf0:	e009883a 	mov	r4,fp
8020bcf4:	1545c83a 	sub	r2,r2,r21
8020bcf8:	d8800a15 	stw	r2,40(sp)
8020bcfc:	020e89c0 	call	8020e89c <_Bfree>
8020bd00:	d8c00a17 	ldw	r3,40(sp)
8020bd04:	18009f1e 	bne	r3,zero,8020bf84 <_dtoa_r+0xce4>
8020bd08:	05c00044 	movi	r23,1
8020bd0c:	e009883a 	mov	r4,fp
8020bd10:	b80b883a 	mov	r5,r23
8020bd14:	020ec000 	call	8020ec00 <__i2b>
8020bd18:	d9000d17 	ldw	r4,52(sp)
8020bd1c:	102b883a 	mov	r21,r2
8020bd20:	2000ce26 	beq	r4,zero,8020c05c <_dtoa_r+0xdbc>
8020bd24:	200d883a 	mov	r6,r4
8020bd28:	100b883a 	mov	r5,r2
8020bd2c:	e009883a 	mov	r4,fp
8020bd30:	020ee340 	call	8020ee34 <__pow5mult>
8020bd34:	d9800317 	ldw	r6,12(sp)
8020bd38:	102b883a 	mov	r21,r2
8020bd3c:	b981810e 	bge	r23,r6,8020c344 <_dtoa_r+0x10a4>
8020bd40:	0027883a 	mov	r19,zero
8020bd44:	a8800417 	ldw	r2,16(r21)
8020bd48:	05c00804 	movi	r23,32
8020bd4c:	10800104 	addi	r2,r2,4
8020bd50:	1085883a 	add	r2,r2,r2
8020bd54:	1085883a 	add	r2,r2,r2
8020bd58:	a885883a 	add	r2,r21,r2
8020bd5c:	11000017 	ldw	r4,0(r2)
8020bd60:	020eae80 	call	8020eae8 <__hi0bits>
8020bd64:	b885c83a 	sub	r2,r23,r2
8020bd68:	1585883a 	add	r2,r2,r22
8020bd6c:	108007cc 	andi	r2,r2,31
8020bd70:	1000b326 	beq	r2,zero,8020c040 <_dtoa_r+0xda0>
8020bd74:	00c00804 	movi	r3,32
8020bd78:	1887c83a 	sub	r3,r3,r2
8020bd7c:	01000104 	movi	r4,4
8020bd80:	20c2cd0e 	bge	r4,r3,8020c8b8 <_dtoa_r+0x1618>
8020bd84:	00c00704 	movi	r3,28
8020bd88:	1885c83a 	sub	r2,r3,r2
8020bd8c:	d8c00817 	ldw	r3,32(sp)
8020bd90:	a0a9883a 	add	r20,r20,r2
8020bd94:	b0ad883a 	add	r22,r22,r2
8020bd98:	1887883a 	add	r3,r3,r2
8020bd9c:	d8c00815 	stw	r3,32(sp)
8020bda0:	d9800817 	ldw	r6,32(sp)
8020bda4:	0180040e 	bge	zero,r6,8020bdb8 <_dtoa_r+0xb18>
8020bda8:	800b883a 	mov	r5,r16
8020bdac:	e009883a 	mov	r4,fp
8020bdb0:	020ef740 	call	8020ef74 <__lshift>
8020bdb4:	1021883a 	mov	r16,r2
8020bdb8:	0580050e 	bge	zero,r22,8020bdd0 <_dtoa_r+0xb30>
8020bdbc:	a80b883a 	mov	r5,r21
8020bdc0:	b00d883a 	mov	r6,r22
8020bdc4:	e009883a 	mov	r4,fp
8020bdc8:	020ef740 	call	8020ef74 <__lshift>
8020bdcc:	102b883a 	mov	r21,r2
8020bdd0:	d9c00e17 	ldw	r7,56(sp)
8020bdd4:	3801211e 	bne	r7,zero,8020c25c <_dtoa_r+0xfbc>
8020bdd8:	d9800617 	ldw	r6,24(sp)
8020bddc:	0181380e 	bge	zero,r6,8020c2c0 <_dtoa_r+0x1020>
8020bde0:	d8c00b17 	ldw	r3,44(sp)
8020bde4:	1800ab1e 	bne	r3,zero,8020c094 <_dtoa_r+0xdf4>
8020bde8:	dc800717 	ldw	r18,28(sp)
8020bdec:	dcc00617 	ldw	r19,24(sp)
8020bdf0:	9029883a 	mov	r20,r18
8020bdf4:	00000206 	br	8020be00 <_dtoa_r+0xb60>
8020bdf8:	020e8c40 	call	8020e8c4 <__multadd>
8020bdfc:	1021883a 	mov	r16,r2
8020be00:	a80b883a 	mov	r5,r21
8020be04:	8009883a 	mov	r4,r16
8020be08:	020b0a00 	call	8020b0a0 <quorem>
8020be0c:	10800c04 	addi	r2,r2,48
8020be10:	90800005 	stb	r2,0(r18)
8020be14:	94800044 	addi	r18,r18,1
8020be18:	9507c83a 	sub	r3,r18,r20
8020be1c:	000f883a 	mov	r7,zero
8020be20:	01800284 	movi	r6,10
8020be24:	800b883a 	mov	r5,r16
8020be28:	e009883a 	mov	r4,fp
8020be2c:	1cfff216 	blt	r3,r19,8020bdf8 <__reset+0xfa1ebdf8>
8020be30:	1011883a 	mov	r8,r2
8020be34:	d8800617 	ldw	r2,24(sp)
8020be38:	0082370e 	bge	zero,r2,8020c718 <_dtoa_r+0x1478>
8020be3c:	d9000717 	ldw	r4,28(sp)
8020be40:	0025883a 	mov	r18,zero
8020be44:	20af883a 	add	r23,r4,r2
8020be48:	01800044 	movi	r6,1
8020be4c:	800b883a 	mov	r5,r16
8020be50:	e009883a 	mov	r4,fp
8020be54:	da001715 	stw	r8,92(sp)
8020be58:	020ef740 	call	8020ef74 <__lshift>
8020be5c:	a80b883a 	mov	r5,r21
8020be60:	1009883a 	mov	r4,r2
8020be64:	d8800915 	stw	r2,36(sp)
8020be68:	020f0bc0 	call	8020f0bc <__mcmp>
8020be6c:	da001717 	ldw	r8,92(sp)
8020be70:	0081800e 	bge	zero,r2,8020c474 <_dtoa_r+0x11d4>
8020be74:	b93fffc3 	ldbu	r4,-1(r23)
8020be78:	b8bfffc4 	addi	r2,r23,-1
8020be7c:	1007883a 	mov	r3,r2
8020be80:	01800e44 	movi	r6,57
8020be84:	d9c00717 	ldw	r7,28(sp)
8020be88:	00000506 	br	8020bea0 <_dtoa_r+0xc00>
8020be8c:	18ffffc4 	addi	r3,r3,-1
8020be90:	11c12326 	beq	r2,r7,8020c320 <_dtoa_r+0x1080>
8020be94:	19000003 	ldbu	r4,0(r3)
8020be98:	102f883a 	mov	r23,r2
8020be9c:	10bfffc4 	addi	r2,r2,-1
8020bea0:	21403fcc 	andi	r5,r4,255
8020bea4:	2940201c 	xori	r5,r5,128
8020bea8:	297fe004 	addi	r5,r5,-128
8020beac:	29bff726 	beq	r5,r6,8020be8c <__reset+0xfa1ebe8c>
8020beb0:	21000044 	addi	r4,r4,1
8020beb4:	11000005 	stb	r4,0(r2)
8020beb8:	a80b883a 	mov	r5,r21
8020bebc:	e009883a 	mov	r4,fp
8020bec0:	020e89c0 	call	8020e89c <_Bfree>
8020bec4:	883ea026 	beq	r17,zero,8020b948 <__reset+0xfa1eb948>
8020bec8:	90000426 	beq	r18,zero,8020bedc <_dtoa_r+0xc3c>
8020becc:	94400326 	beq	r18,r17,8020bedc <_dtoa_r+0xc3c>
8020bed0:	900b883a 	mov	r5,r18
8020bed4:	e009883a 	mov	r4,fp
8020bed8:	020e89c0 	call	8020e89c <_Bfree>
8020bedc:	880b883a 	mov	r5,r17
8020bee0:	e009883a 	mov	r4,fp
8020bee4:	020e89c0 	call	8020e89c <_Bfree>
8020bee8:	003e9706 	br	8020b948 <__reset+0xfa1eb948>
8020beec:	01800044 	movi	r6,1
8020bef0:	d9800e15 	stw	r6,56(sp)
8020bef4:	003d9606 	br	8020b550 <__reset+0xfa1eb550>
8020bef8:	d8800817 	ldw	r2,32(sp)
8020befc:	d8c00517 	ldw	r3,20(sp)
8020bf00:	d8000d15 	stw	zero,52(sp)
8020bf04:	10c5c83a 	sub	r2,r2,r3
8020bf08:	00c9c83a 	sub	r4,zero,r3
8020bf0c:	d8800815 	stw	r2,32(sp)
8020bf10:	d9000a15 	stw	r4,40(sp)
8020bf14:	003d9706 	br	8020b574 <__reset+0xfa1eb574>
8020bf18:	05adc83a 	sub	r22,zero,r22
8020bf1c:	dd800815 	stw	r22,32(sp)
8020bf20:	002d883a 	mov	r22,zero
8020bf24:	003d8e06 	br	8020b560 <__reset+0xfa1eb560>
8020bf28:	d9000517 	ldw	r4,20(sp)
8020bf2c:	02164a00 	call	802164a0 <__floatsidf>
8020bf30:	100d883a 	mov	r6,r2
8020bf34:	180f883a 	mov	r7,r3
8020bf38:	a009883a 	mov	r4,r20
8020bf3c:	880b883a 	mov	r5,r17
8020bf40:	02151b40 	call	802151b4 <__eqdf2>
8020bf44:	103d7126 	beq	r2,zero,8020b50c <__reset+0xfa1eb50c>
8020bf48:	d9c00517 	ldw	r7,20(sp)
8020bf4c:	39ffffc4 	addi	r7,r7,-1
8020bf50:	d9c00515 	stw	r7,20(sp)
8020bf54:	003d6d06 	br	8020b50c <__reset+0xfa1eb50c>
8020bf58:	dd400a17 	ldw	r21,40(sp)
8020bf5c:	dd000817 	ldw	r20,32(sp)
8020bf60:	0023883a 	mov	r17,zero
8020bf64:	003f4806 	br	8020bc88 <__reset+0xfa1ebc88>
8020bf68:	10e3c83a 	sub	r17,r2,r3
8020bf6c:	9448983a 	sll	r4,r18,r17
8020bf70:	003d3206 	br	8020b43c <__reset+0xfa1eb43c>
8020bf74:	d8000e15 	stw	zero,56(sp)
8020bf78:	003d7506 	br	8020b550 <__reset+0xfa1eb550>
8020bf7c:	b005883a 	mov	r2,r22
8020bf80:	003f4506 	br	8020bc98 <__reset+0xfa1ebc98>
8020bf84:	dc000915 	stw	r16,36(sp)
8020bf88:	d9800a17 	ldw	r6,40(sp)
8020bf8c:	d9400917 	ldw	r5,36(sp)
8020bf90:	e009883a 	mov	r4,fp
8020bf94:	020ee340 	call	8020ee34 <__pow5mult>
8020bf98:	1021883a 	mov	r16,r2
8020bf9c:	003f5a06 	br	8020bd08 <__reset+0xfa1ebd08>
8020bfa0:	01c00044 	movi	r7,1
8020bfa4:	d9c00b15 	stw	r7,44(sp)
8020bfa8:	d8802217 	ldw	r2,136(sp)
8020bfac:	0081280e 	bge	zero,r2,8020c450 <_dtoa_r+0x11b0>
8020bfb0:	100d883a 	mov	r6,r2
8020bfb4:	1021883a 	mov	r16,r2
8020bfb8:	d8800c15 	stw	r2,48(sp)
8020bfbc:	d8800615 	stw	r2,24(sp)
8020bfc0:	003d8806 	br	8020b5e4 <__reset+0xfa1eb5e4>
8020bfc4:	d8800617 	ldw	r2,24(sp)
8020bfc8:	00be9b16 	blt	zero,r2,8020ba38 <__reset+0xfa1eba38>
8020bfcc:	10010f1e 	bne	r2,zero,8020c40c <_dtoa_r+0x116c>
8020bfd0:	880b883a 	mov	r5,r17
8020bfd4:	000d883a 	mov	r6,zero
8020bfd8:	01d00534 	movhi	r7,16404
8020bfdc:	8009883a 	mov	r4,r16
8020bfe0:	021540c0 	call	8021540c <__muldf3>
8020bfe4:	900d883a 	mov	r6,r18
8020bfe8:	980f883a 	mov	r7,r19
8020bfec:	1009883a 	mov	r4,r2
8020bff0:	180b883a 	mov	r5,r3
8020bff4:	021523c0 	call	8021523c <__gedf2>
8020bff8:	002b883a 	mov	r21,zero
8020bffc:	0023883a 	mov	r17,zero
8020c000:	1000bf16 	blt	r2,zero,8020c300 <_dtoa_r+0x1060>
8020c004:	d9802217 	ldw	r6,136(sp)
8020c008:	ddc00717 	ldw	r23,28(sp)
8020c00c:	018c303a 	nor	r6,zero,r6
8020c010:	d9800515 	stw	r6,20(sp)
8020c014:	a80b883a 	mov	r5,r21
8020c018:	e009883a 	mov	r4,fp
8020c01c:	020e89c0 	call	8020e89c <_Bfree>
8020c020:	883e4926 	beq	r17,zero,8020b948 <__reset+0xfa1eb948>
8020c024:	003fad06 	br	8020bedc <__reset+0xfa1ebedc>
8020c028:	d9c01117 	ldw	r7,68(sp)
8020c02c:	3801bc26 	beq	r7,zero,8020c720 <_dtoa_r+0x1480>
8020c030:	10810cc4 	addi	r2,r2,1075
8020c034:	dd400a17 	ldw	r21,40(sp)
8020c038:	dd000817 	ldw	r20,32(sp)
8020c03c:	003f0a06 	br	8020bc68 <__reset+0xfa1ebc68>
8020c040:	00800704 	movi	r2,28
8020c044:	d9000817 	ldw	r4,32(sp)
8020c048:	a0a9883a 	add	r20,r20,r2
8020c04c:	b0ad883a 	add	r22,r22,r2
8020c050:	2089883a 	add	r4,r4,r2
8020c054:	d9000815 	stw	r4,32(sp)
8020c058:	003f5106 	br	8020bda0 <__reset+0xfa1ebda0>
8020c05c:	d8c00317 	ldw	r3,12(sp)
8020c060:	b8c1fc0e 	bge	r23,r3,8020c854 <_dtoa_r+0x15b4>
8020c064:	0027883a 	mov	r19,zero
8020c068:	b805883a 	mov	r2,r23
8020c06c:	003f3e06 	br	8020bd68 <__reset+0xfa1ebd68>
8020c070:	880b883a 	mov	r5,r17
8020c074:	e009883a 	mov	r4,fp
8020c078:	000f883a 	mov	r7,zero
8020c07c:	01800284 	movi	r6,10
8020c080:	020e8c40 	call	8020e8c4 <__multadd>
8020c084:	d9000c17 	ldw	r4,48(sp)
8020c088:	1023883a 	mov	r17,r2
8020c08c:	0102040e 	bge	zero,r4,8020c8a0 <_dtoa_r+0x1600>
8020c090:	d9000615 	stw	r4,24(sp)
8020c094:	0500050e 	bge	zero,r20,8020c0ac <_dtoa_r+0xe0c>
8020c098:	880b883a 	mov	r5,r17
8020c09c:	a00d883a 	mov	r6,r20
8020c0a0:	e009883a 	mov	r4,fp
8020c0a4:	020ef740 	call	8020ef74 <__lshift>
8020c0a8:	1023883a 	mov	r17,r2
8020c0ac:	9801241e 	bne	r19,zero,8020c540 <_dtoa_r+0x12a0>
8020c0b0:	8829883a 	mov	r20,r17
8020c0b4:	d9000617 	ldw	r4,24(sp)
8020c0b8:	dcc00717 	ldw	r19,28(sp)
8020c0bc:	9480004c 	andi	r18,r18,1
8020c0c0:	20bfffc4 	addi	r2,r4,-1
8020c0c4:	9885883a 	add	r2,r19,r2
8020c0c8:	d8800415 	stw	r2,16(sp)
8020c0cc:	dc800615 	stw	r18,24(sp)
8020c0d0:	a80b883a 	mov	r5,r21
8020c0d4:	8009883a 	mov	r4,r16
8020c0d8:	020b0a00 	call	8020b0a0 <quorem>
8020c0dc:	880b883a 	mov	r5,r17
8020c0e0:	8009883a 	mov	r4,r16
8020c0e4:	102f883a 	mov	r23,r2
8020c0e8:	020f0bc0 	call	8020f0bc <__mcmp>
8020c0ec:	a80b883a 	mov	r5,r21
8020c0f0:	a00d883a 	mov	r6,r20
8020c0f4:	e009883a 	mov	r4,fp
8020c0f8:	102d883a 	mov	r22,r2
8020c0fc:	020f11c0 	call	8020f11c <__mdiff>
8020c100:	1007883a 	mov	r3,r2
8020c104:	10800317 	ldw	r2,12(r2)
8020c108:	bc800c04 	addi	r18,r23,48
8020c10c:	180b883a 	mov	r5,r3
8020c110:	10004e1e 	bne	r2,zero,8020c24c <_dtoa_r+0xfac>
8020c114:	8009883a 	mov	r4,r16
8020c118:	d8c01615 	stw	r3,88(sp)
8020c11c:	020f0bc0 	call	8020f0bc <__mcmp>
8020c120:	d8c01617 	ldw	r3,88(sp)
8020c124:	e009883a 	mov	r4,fp
8020c128:	d8801615 	stw	r2,88(sp)
8020c12c:	180b883a 	mov	r5,r3
8020c130:	020e89c0 	call	8020e89c <_Bfree>
8020c134:	d8801617 	ldw	r2,88(sp)
8020c138:	1000041e 	bne	r2,zero,8020c14c <_dtoa_r+0xeac>
8020c13c:	d9800317 	ldw	r6,12(sp)
8020c140:	3000021e 	bne	r6,zero,8020c14c <_dtoa_r+0xeac>
8020c144:	d8c00617 	ldw	r3,24(sp)
8020c148:	18003726 	beq	r3,zero,8020c228 <_dtoa_r+0xf88>
8020c14c:	b0002016 	blt	r22,zero,8020c1d0 <_dtoa_r+0xf30>
8020c150:	b000041e 	bne	r22,zero,8020c164 <_dtoa_r+0xec4>
8020c154:	d9000317 	ldw	r4,12(sp)
8020c158:	2000021e 	bne	r4,zero,8020c164 <_dtoa_r+0xec4>
8020c15c:	d8c00617 	ldw	r3,24(sp)
8020c160:	18001b26 	beq	r3,zero,8020c1d0 <_dtoa_r+0xf30>
8020c164:	00810716 	blt	zero,r2,8020c584 <_dtoa_r+0x12e4>
8020c168:	d8c00417 	ldw	r3,16(sp)
8020c16c:	9d800044 	addi	r22,r19,1
8020c170:	9c800005 	stb	r18,0(r19)
8020c174:	b02f883a 	mov	r23,r22
8020c178:	98c10626 	beq	r19,r3,8020c594 <_dtoa_r+0x12f4>
8020c17c:	800b883a 	mov	r5,r16
8020c180:	000f883a 	mov	r7,zero
8020c184:	01800284 	movi	r6,10
8020c188:	e009883a 	mov	r4,fp
8020c18c:	020e8c40 	call	8020e8c4 <__multadd>
8020c190:	1021883a 	mov	r16,r2
8020c194:	000f883a 	mov	r7,zero
8020c198:	01800284 	movi	r6,10
8020c19c:	880b883a 	mov	r5,r17
8020c1a0:	e009883a 	mov	r4,fp
8020c1a4:	8d002526 	beq	r17,r20,8020c23c <_dtoa_r+0xf9c>
8020c1a8:	020e8c40 	call	8020e8c4 <__multadd>
8020c1ac:	a00b883a 	mov	r5,r20
8020c1b0:	000f883a 	mov	r7,zero
8020c1b4:	01800284 	movi	r6,10
8020c1b8:	e009883a 	mov	r4,fp
8020c1bc:	1023883a 	mov	r17,r2
8020c1c0:	020e8c40 	call	8020e8c4 <__multadd>
8020c1c4:	1029883a 	mov	r20,r2
8020c1c8:	b027883a 	mov	r19,r22
8020c1cc:	003fc006 	br	8020c0d0 <__reset+0xfa1ec0d0>
8020c1d0:	9011883a 	mov	r8,r18
8020c1d4:	00800e0e 	bge	zero,r2,8020c210 <_dtoa_r+0xf70>
8020c1d8:	800b883a 	mov	r5,r16
8020c1dc:	01800044 	movi	r6,1
8020c1e0:	e009883a 	mov	r4,fp
8020c1e4:	da001715 	stw	r8,92(sp)
8020c1e8:	020ef740 	call	8020ef74 <__lshift>
8020c1ec:	a80b883a 	mov	r5,r21
8020c1f0:	1009883a 	mov	r4,r2
8020c1f4:	1021883a 	mov	r16,r2
8020c1f8:	020f0bc0 	call	8020f0bc <__mcmp>
8020c1fc:	da001717 	ldw	r8,92(sp)
8020c200:	0081960e 	bge	zero,r2,8020c85c <_dtoa_r+0x15bc>
8020c204:	00800e44 	movi	r2,57
8020c208:	40817026 	beq	r8,r2,8020c7cc <_dtoa_r+0x152c>
8020c20c:	ba000c44 	addi	r8,r23,49
8020c210:	8825883a 	mov	r18,r17
8020c214:	9dc00044 	addi	r23,r19,1
8020c218:	9a000005 	stb	r8,0(r19)
8020c21c:	a023883a 	mov	r17,r20
8020c220:	dc000915 	stw	r16,36(sp)
8020c224:	003f2406 	br	8020beb8 <__reset+0xfa1ebeb8>
8020c228:	00800e44 	movi	r2,57
8020c22c:	9011883a 	mov	r8,r18
8020c230:	90816626 	beq	r18,r2,8020c7cc <_dtoa_r+0x152c>
8020c234:	05bff516 	blt	zero,r22,8020c20c <__reset+0xfa1ec20c>
8020c238:	003ff506 	br	8020c210 <__reset+0xfa1ec210>
8020c23c:	020e8c40 	call	8020e8c4 <__multadd>
8020c240:	1023883a 	mov	r17,r2
8020c244:	1029883a 	mov	r20,r2
8020c248:	003fdf06 	br	8020c1c8 <__reset+0xfa1ec1c8>
8020c24c:	e009883a 	mov	r4,fp
8020c250:	020e89c0 	call	8020e89c <_Bfree>
8020c254:	00800044 	movi	r2,1
8020c258:	003fbc06 	br	8020c14c <__reset+0xfa1ec14c>
8020c25c:	a80b883a 	mov	r5,r21
8020c260:	8009883a 	mov	r4,r16
8020c264:	020f0bc0 	call	8020f0bc <__mcmp>
8020c268:	103edb0e 	bge	r2,zero,8020bdd8 <__reset+0xfa1ebdd8>
8020c26c:	800b883a 	mov	r5,r16
8020c270:	000f883a 	mov	r7,zero
8020c274:	01800284 	movi	r6,10
8020c278:	e009883a 	mov	r4,fp
8020c27c:	020e8c40 	call	8020e8c4 <__multadd>
8020c280:	1021883a 	mov	r16,r2
8020c284:	d8800517 	ldw	r2,20(sp)
8020c288:	d8c00b17 	ldw	r3,44(sp)
8020c28c:	10bfffc4 	addi	r2,r2,-1
8020c290:	d8800515 	stw	r2,20(sp)
8020c294:	183f761e 	bne	r3,zero,8020c070 <__reset+0xfa1ec070>
8020c298:	d9000c17 	ldw	r4,48(sp)
8020c29c:	0101730e 	bge	zero,r4,8020c86c <_dtoa_r+0x15cc>
8020c2a0:	d9000615 	stw	r4,24(sp)
8020c2a4:	003ed006 	br	8020bde8 <__reset+0xfa1ebde8>
8020c2a8:	00800084 	movi	r2,2
8020c2ac:	3081861e 	bne	r6,r2,8020c8c8 <_dtoa_r+0x1628>
8020c2b0:	d8000b15 	stw	zero,44(sp)
8020c2b4:	003f3c06 	br	8020bfa8 <__reset+0xfa1ebfa8>
8020c2b8:	dc000917 	ldw	r16,36(sp)
8020c2bc:	003e9206 	br	8020bd08 <__reset+0xfa1ebd08>
8020c2c0:	d9c00317 	ldw	r7,12(sp)
8020c2c4:	00800084 	movi	r2,2
8020c2c8:	11fec50e 	bge	r2,r7,8020bde0 <__reset+0xfa1ebde0>
8020c2cc:	d9000617 	ldw	r4,24(sp)
8020c2d0:	20013c1e 	bne	r4,zero,8020c7c4 <_dtoa_r+0x1524>
8020c2d4:	a80b883a 	mov	r5,r21
8020c2d8:	000f883a 	mov	r7,zero
8020c2dc:	01800144 	movi	r6,5
8020c2e0:	e009883a 	mov	r4,fp
8020c2e4:	020e8c40 	call	8020e8c4 <__multadd>
8020c2e8:	100b883a 	mov	r5,r2
8020c2ec:	8009883a 	mov	r4,r16
8020c2f0:	102b883a 	mov	r21,r2
8020c2f4:	020f0bc0 	call	8020f0bc <__mcmp>
8020c2f8:	dc000915 	stw	r16,36(sp)
8020c2fc:	00bf410e 	bge	zero,r2,8020c004 <__reset+0xfa1ec004>
8020c300:	d9c00717 	ldw	r7,28(sp)
8020c304:	00800c44 	movi	r2,49
8020c308:	38800005 	stb	r2,0(r7)
8020c30c:	d8800517 	ldw	r2,20(sp)
8020c310:	3dc00044 	addi	r23,r7,1
8020c314:	10800044 	addi	r2,r2,1
8020c318:	d8800515 	stw	r2,20(sp)
8020c31c:	003f3d06 	br	8020c014 <__reset+0xfa1ec014>
8020c320:	d9800517 	ldw	r6,20(sp)
8020c324:	d9c00717 	ldw	r7,28(sp)
8020c328:	00800c44 	movi	r2,49
8020c32c:	31800044 	addi	r6,r6,1
8020c330:	d9800515 	stw	r6,20(sp)
8020c334:	38800005 	stb	r2,0(r7)
8020c338:	003edf06 	br	8020beb8 <__reset+0xfa1ebeb8>
8020c33c:	d8000b15 	stw	zero,44(sp)
8020c340:	003c9f06 	br	8020b5c0 <__reset+0xfa1eb5c0>
8020c344:	903e7e1e 	bne	r18,zero,8020bd40 <__reset+0xfa1ebd40>
8020c348:	00800434 	movhi	r2,16
8020c34c:	10bfffc4 	addi	r2,r2,-1
8020c350:	9884703a 	and	r2,r19,r2
8020c354:	1000ea1e 	bne	r2,zero,8020c700 <_dtoa_r+0x1460>
8020c358:	9cdffc2c 	andhi	r19,r19,32752
8020c35c:	9800e826 	beq	r19,zero,8020c700 <_dtoa_r+0x1460>
8020c360:	d9c00817 	ldw	r7,32(sp)
8020c364:	b5800044 	addi	r22,r22,1
8020c368:	04c00044 	movi	r19,1
8020c36c:	39c00044 	addi	r7,r7,1
8020c370:	d9c00815 	stw	r7,32(sp)
8020c374:	d8800d17 	ldw	r2,52(sp)
8020c378:	103e721e 	bne	r2,zero,8020bd44 <__reset+0xfa1ebd44>
8020c37c:	00800044 	movi	r2,1
8020c380:	003e7906 	br	8020bd68 <__reset+0xfa1ebd68>
8020c384:	8009883a 	mov	r4,r16
8020c388:	02164a00 	call	802164a0 <__floatsidf>
8020c38c:	d9800f17 	ldw	r6,60(sp)
8020c390:	d9c01017 	ldw	r7,64(sp)
8020c394:	1009883a 	mov	r4,r2
8020c398:	180b883a 	mov	r5,r3
8020c39c:	021540c0 	call	8021540c <__muldf3>
8020c3a0:	000d883a 	mov	r6,zero
8020c3a4:	01d00734 	movhi	r7,16412
8020c3a8:	1009883a 	mov	r4,r2
8020c3ac:	180b883a 	mov	r5,r3
8020c3b0:	02140200 	call	80214020 <__adddf3>
8020c3b4:	047f3034 	movhi	r17,64704
8020c3b8:	1021883a 	mov	r16,r2
8020c3bc:	1c63883a 	add	r17,r3,r17
8020c3c0:	d9000f17 	ldw	r4,60(sp)
8020c3c4:	d9401017 	ldw	r5,64(sp)
8020c3c8:	000d883a 	mov	r6,zero
8020c3cc:	01d00534 	movhi	r7,16404
8020c3d0:	0215b240 	call	80215b24 <__subdf3>
8020c3d4:	800d883a 	mov	r6,r16
8020c3d8:	880f883a 	mov	r7,r17
8020c3dc:	1009883a 	mov	r4,r2
8020c3e0:	180b883a 	mov	r5,r3
8020c3e4:	102b883a 	mov	r21,r2
8020c3e8:	1829883a 	mov	r20,r3
8020c3ec:	021523c0 	call	8021523c <__gedf2>
8020c3f0:	00806c16 	blt	zero,r2,8020c5a4 <_dtoa_r+0x1304>
8020c3f4:	89e0003c 	xorhi	r7,r17,32768
8020c3f8:	800d883a 	mov	r6,r16
8020c3fc:	a809883a 	mov	r4,r21
8020c400:	a00b883a 	mov	r5,r20
8020c404:	02153180 	call	80215318 <__ledf2>
8020c408:	103d7e0e 	bge	r2,zero,8020ba04 <__reset+0xfa1eba04>
8020c40c:	002b883a 	mov	r21,zero
8020c410:	0023883a 	mov	r17,zero
8020c414:	003efb06 	br	8020c004 <__reset+0xfa1ec004>
8020c418:	d8800717 	ldw	r2,28(sp)
8020c41c:	003bd006 	br	8020b360 <__reset+0xfa1eb360>
8020c420:	d9000a17 	ldw	r4,40(sp)
8020c424:	d9800d17 	ldw	r6,52(sp)
8020c428:	dd400a15 	stw	r21,40(sp)
8020c42c:	a905c83a 	sub	r2,r21,r4
8020c430:	308d883a 	add	r6,r6,r2
8020c434:	d9800d15 	stw	r6,52(sp)
8020c438:	002b883a 	mov	r21,zero
8020c43c:	003e0606 	br	8020bc58 <__reset+0xfa1ebc58>
8020c440:	9023883a 	mov	r17,r18
8020c444:	9829883a 	mov	r20,r19
8020c448:	04000084 	movi	r16,2
8020c44c:	003c9206 	br	8020b698 <__reset+0xfa1eb698>
8020c450:	04000044 	movi	r16,1
8020c454:	dc000c15 	stw	r16,48(sp)
8020c458:	dc000615 	stw	r16,24(sp)
8020c45c:	dc002215 	stw	r16,136(sp)
8020c460:	e0001115 	stw	zero,68(fp)
8020c464:	000b883a 	mov	r5,zero
8020c468:	003c6906 	br	8020b610 <__reset+0xfa1eb610>
8020c46c:	3021883a 	mov	r16,r6
8020c470:	003ffb06 	br	8020c460 <__reset+0xfa1ec460>
8020c474:	1000021e 	bne	r2,zero,8020c480 <_dtoa_r+0x11e0>
8020c478:	4200004c 	andi	r8,r8,1
8020c47c:	403e7d1e 	bne	r8,zero,8020be74 <__reset+0xfa1ebe74>
8020c480:	01000c04 	movi	r4,48
8020c484:	00000106 	br	8020c48c <_dtoa_r+0x11ec>
8020c488:	102f883a 	mov	r23,r2
8020c48c:	b8bfffc4 	addi	r2,r23,-1
8020c490:	10c00007 	ldb	r3,0(r2)
8020c494:	193ffc26 	beq	r3,r4,8020c488 <__reset+0xfa1ec488>
8020c498:	003e8706 	br	8020beb8 <__reset+0xfa1ebeb8>
8020c49c:	d8800517 	ldw	r2,20(sp)
8020c4a0:	00a3c83a 	sub	r17,zero,r2
8020c4a4:	8800a426 	beq	r17,zero,8020c738 <_dtoa_r+0x1498>
8020c4a8:	888003cc 	andi	r2,r17,15
8020c4ac:	100490fa 	slli	r2,r2,3
8020c4b0:	00e008b4 	movhi	r3,32802
8020c4b4:	18f2ce04 	addi	r3,r3,-13512
8020c4b8:	1885883a 	add	r2,r3,r2
8020c4bc:	11800017 	ldw	r6,0(r2)
8020c4c0:	11c00117 	ldw	r7,4(r2)
8020c4c4:	9009883a 	mov	r4,r18
8020c4c8:	980b883a 	mov	r5,r19
8020c4cc:	8823d13a 	srai	r17,r17,4
8020c4d0:	021540c0 	call	8021540c <__muldf3>
8020c4d4:	d8800f15 	stw	r2,60(sp)
8020c4d8:	d8c01015 	stw	r3,64(sp)
8020c4dc:	8800e826 	beq	r17,zero,8020c880 <_dtoa_r+0x15e0>
8020c4e0:	052008b4 	movhi	r20,32802
8020c4e4:	a532c404 	addi	r20,r20,-13552
8020c4e8:	04000084 	movi	r16,2
8020c4ec:	8980004c 	andi	r6,r17,1
8020c4f0:	1009883a 	mov	r4,r2
8020c4f4:	8823d07a 	srai	r17,r17,1
8020c4f8:	180b883a 	mov	r5,r3
8020c4fc:	30000426 	beq	r6,zero,8020c510 <_dtoa_r+0x1270>
8020c500:	a1800017 	ldw	r6,0(r20)
8020c504:	a1c00117 	ldw	r7,4(r20)
8020c508:	84000044 	addi	r16,r16,1
8020c50c:	021540c0 	call	8021540c <__muldf3>
8020c510:	a5000204 	addi	r20,r20,8
8020c514:	883ff51e 	bne	r17,zero,8020c4ec <__reset+0xfa1ec4ec>
8020c518:	d8800f15 	stw	r2,60(sp)
8020c51c:	d8c01015 	stw	r3,64(sp)
8020c520:	003c7606 	br	8020b6fc <__reset+0xfa1eb6fc>
8020c524:	00c00c04 	movi	r3,48
8020c528:	10c00005 	stb	r3,0(r2)
8020c52c:	d8c00517 	ldw	r3,20(sp)
8020c530:	bd3fffc3 	ldbu	r20,-1(r23)
8020c534:	18c00044 	addi	r3,r3,1
8020c538:	d8c00515 	stw	r3,20(sp)
8020c53c:	003db906 	br	8020bc24 <__reset+0xfa1ebc24>
8020c540:	89400117 	ldw	r5,4(r17)
8020c544:	e009883a 	mov	r4,fp
8020c548:	020e7f40 	call	8020e7f4 <_Balloc>
8020c54c:	89800417 	ldw	r6,16(r17)
8020c550:	89400304 	addi	r5,r17,12
8020c554:	11000304 	addi	r4,r2,12
8020c558:	31800084 	addi	r6,r6,2
8020c55c:	318d883a 	add	r6,r6,r6
8020c560:	318d883a 	add	r6,r6,r6
8020c564:	1027883a 	mov	r19,r2
8020c568:	02066c00 	call	802066c0 <memcpy>
8020c56c:	01800044 	movi	r6,1
8020c570:	980b883a 	mov	r5,r19
8020c574:	e009883a 	mov	r4,fp
8020c578:	020ef740 	call	8020ef74 <__lshift>
8020c57c:	1029883a 	mov	r20,r2
8020c580:	003ecc06 	br	8020c0b4 <__reset+0xfa1ec0b4>
8020c584:	00800e44 	movi	r2,57
8020c588:	90809026 	beq	r18,r2,8020c7cc <_dtoa_r+0x152c>
8020c58c:	92000044 	addi	r8,r18,1
8020c590:	003f1f06 	br	8020c210 <__reset+0xfa1ec210>
8020c594:	9011883a 	mov	r8,r18
8020c598:	8825883a 	mov	r18,r17
8020c59c:	a023883a 	mov	r17,r20
8020c5a0:	003e2906 	br	8020be48 <__reset+0xfa1ebe48>
8020c5a4:	002b883a 	mov	r21,zero
8020c5a8:	0023883a 	mov	r17,zero
8020c5ac:	003f5406 	br	8020c300 <__reset+0xfa1ec300>
8020c5b0:	61bfffc4 	addi	r6,r12,-1
8020c5b4:	300490fa 	slli	r2,r6,3
8020c5b8:	00e008b4 	movhi	r3,32802
8020c5bc:	18f2ce04 	addi	r3,r3,-13512
8020c5c0:	1885883a 	add	r2,r3,r2
8020c5c4:	11000017 	ldw	r4,0(r2)
8020c5c8:	11400117 	ldw	r5,4(r2)
8020c5cc:	d8800717 	ldw	r2,28(sp)
8020c5d0:	880f883a 	mov	r7,r17
8020c5d4:	d9801215 	stw	r6,72(sp)
8020c5d8:	800d883a 	mov	r6,r16
8020c5dc:	db001615 	stw	r12,88(sp)
8020c5e0:	15c00044 	addi	r23,r2,1
8020c5e4:	021540c0 	call	8021540c <__muldf3>
8020c5e8:	d9401017 	ldw	r5,64(sp)
8020c5ec:	d9000f17 	ldw	r4,60(sp)
8020c5f0:	d8c01515 	stw	r3,84(sp)
8020c5f4:	d8801415 	stw	r2,80(sp)
8020c5f8:	02164200 	call	80216420 <__fixdfsi>
8020c5fc:	1009883a 	mov	r4,r2
8020c600:	1021883a 	mov	r16,r2
8020c604:	02164a00 	call	802164a0 <__floatsidf>
8020c608:	d9000f17 	ldw	r4,60(sp)
8020c60c:	d9401017 	ldw	r5,64(sp)
8020c610:	100d883a 	mov	r6,r2
8020c614:	180f883a 	mov	r7,r3
8020c618:	0215b240 	call	80215b24 <__subdf3>
8020c61c:	1829883a 	mov	r20,r3
8020c620:	d8c00717 	ldw	r3,28(sp)
8020c624:	84000c04 	addi	r16,r16,48
8020c628:	1023883a 	mov	r17,r2
8020c62c:	1c000005 	stb	r16,0(r3)
8020c630:	db001617 	ldw	r12,88(sp)
8020c634:	00800044 	movi	r2,1
8020c638:	60802226 	beq	r12,r2,8020c6c4 <_dtoa_r+0x1424>
8020c63c:	d9c00717 	ldw	r7,28(sp)
8020c640:	8805883a 	mov	r2,r17
8020c644:	b82b883a 	mov	r21,r23
8020c648:	3b19883a 	add	r12,r7,r12
8020c64c:	6023883a 	mov	r17,r12
8020c650:	a007883a 	mov	r3,r20
8020c654:	dc800f15 	stw	r18,60(sp)
8020c658:	000d883a 	mov	r6,zero
8020c65c:	01d00934 	movhi	r7,16420
8020c660:	1009883a 	mov	r4,r2
8020c664:	180b883a 	mov	r5,r3
8020c668:	021540c0 	call	8021540c <__muldf3>
8020c66c:	180b883a 	mov	r5,r3
8020c670:	1009883a 	mov	r4,r2
8020c674:	1829883a 	mov	r20,r3
8020c678:	1025883a 	mov	r18,r2
8020c67c:	02164200 	call	80216420 <__fixdfsi>
8020c680:	1009883a 	mov	r4,r2
8020c684:	1021883a 	mov	r16,r2
8020c688:	02164a00 	call	802164a0 <__floatsidf>
8020c68c:	100d883a 	mov	r6,r2
8020c690:	180f883a 	mov	r7,r3
8020c694:	9009883a 	mov	r4,r18
8020c698:	a00b883a 	mov	r5,r20
8020c69c:	84000c04 	addi	r16,r16,48
8020c6a0:	0215b240 	call	80215b24 <__subdf3>
8020c6a4:	ad400044 	addi	r21,r21,1
8020c6a8:	ac3fffc5 	stb	r16,-1(r21)
8020c6ac:	ac7fea1e 	bne	r21,r17,8020c658 <__reset+0xfa1ec658>
8020c6b0:	1023883a 	mov	r17,r2
8020c6b4:	d8801217 	ldw	r2,72(sp)
8020c6b8:	dc800f17 	ldw	r18,60(sp)
8020c6bc:	1829883a 	mov	r20,r3
8020c6c0:	b8af883a 	add	r23,r23,r2
8020c6c4:	d9001417 	ldw	r4,80(sp)
8020c6c8:	d9401517 	ldw	r5,84(sp)
8020c6cc:	000d883a 	mov	r6,zero
8020c6d0:	01cff834 	movhi	r7,16352
8020c6d4:	02140200 	call	80214020 <__adddf3>
8020c6d8:	880d883a 	mov	r6,r17
8020c6dc:	a00f883a 	mov	r7,r20
8020c6e0:	1009883a 	mov	r4,r2
8020c6e4:	180b883a 	mov	r5,r3
8020c6e8:	02153180 	call	80215318 <__ledf2>
8020c6ec:	10003e0e 	bge	r2,zero,8020c7e8 <_dtoa_r+0x1548>
8020c6f0:	d9001317 	ldw	r4,76(sp)
8020c6f4:	bd3fffc3 	ldbu	r20,-1(r23)
8020c6f8:	d9000515 	stw	r4,20(sp)
8020c6fc:	003d3b06 	br	8020bbec <__reset+0xfa1ebbec>
8020c700:	0027883a 	mov	r19,zero
8020c704:	003f1b06 	br	8020c374 <__reset+0xfa1ec374>
8020c708:	d8800817 	ldw	r2,32(sp)
8020c70c:	11e9c83a 	sub	r20,r2,r7
8020c710:	0005883a 	mov	r2,zero
8020c714:	003d5406 	br	8020bc68 <__reset+0xfa1ebc68>
8020c718:	00800044 	movi	r2,1
8020c71c:	003dc706 	br	8020be3c <__reset+0xfa1ebe3c>
8020c720:	d8c00217 	ldw	r3,8(sp)
8020c724:	00800d84 	movi	r2,54
8020c728:	dd400a17 	ldw	r21,40(sp)
8020c72c:	10c5c83a 	sub	r2,r2,r3
8020c730:	dd000817 	ldw	r20,32(sp)
8020c734:	003d4c06 	br	8020bc68 <__reset+0xfa1ebc68>
8020c738:	dc800f15 	stw	r18,60(sp)
8020c73c:	dcc01015 	stw	r19,64(sp)
8020c740:	04000084 	movi	r16,2
8020c744:	003bed06 	br	8020b6fc <__reset+0xfa1eb6fc>
8020c748:	d9000617 	ldw	r4,24(sp)
8020c74c:	203f0d26 	beq	r4,zero,8020c384 <__reset+0xfa1ec384>
8020c750:	d9800c17 	ldw	r6,48(sp)
8020c754:	01bcab0e 	bge	zero,r6,8020ba04 <__reset+0xfa1eba04>
8020c758:	d9401017 	ldw	r5,64(sp)
8020c75c:	d9000f17 	ldw	r4,60(sp)
8020c760:	000d883a 	mov	r6,zero
8020c764:	01d00934 	movhi	r7,16420
8020c768:	021540c0 	call	8021540c <__muldf3>
8020c76c:	81000044 	addi	r4,r16,1
8020c770:	d8800f15 	stw	r2,60(sp)
8020c774:	d8c01015 	stw	r3,64(sp)
8020c778:	02164a00 	call	802164a0 <__floatsidf>
8020c77c:	d9800f17 	ldw	r6,60(sp)
8020c780:	d9c01017 	ldw	r7,64(sp)
8020c784:	1009883a 	mov	r4,r2
8020c788:	180b883a 	mov	r5,r3
8020c78c:	021540c0 	call	8021540c <__muldf3>
8020c790:	01d00734 	movhi	r7,16412
8020c794:	000d883a 	mov	r6,zero
8020c798:	1009883a 	mov	r4,r2
8020c79c:	180b883a 	mov	r5,r3
8020c7a0:	02140200 	call	80214020 <__adddf3>
8020c7a4:	d9c00517 	ldw	r7,20(sp)
8020c7a8:	047f3034 	movhi	r17,64704
8020c7ac:	1021883a 	mov	r16,r2
8020c7b0:	39ffffc4 	addi	r7,r7,-1
8020c7b4:	d9c01315 	stw	r7,76(sp)
8020c7b8:	1c63883a 	add	r17,r3,r17
8020c7bc:	db000c17 	ldw	r12,48(sp)
8020c7c0:	003bea06 	br	8020b76c <__reset+0xfa1eb76c>
8020c7c4:	dc000915 	stw	r16,36(sp)
8020c7c8:	003e0e06 	br	8020c004 <__reset+0xfa1ec004>
8020c7cc:	01000e44 	movi	r4,57
8020c7d0:	8825883a 	mov	r18,r17
8020c7d4:	9dc00044 	addi	r23,r19,1
8020c7d8:	99000005 	stb	r4,0(r19)
8020c7dc:	a023883a 	mov	r17,r20
8020c7e0:	dc000915 	stw	r16,36(sp)
8020c7e4:	003da406 	br	8020be78 <__reset+0xfa1ebe78>
8020c7e8:	d9801417 	ldw	r6,80(sp)
8020c7ec:	d9c01517 	ldw	r7,84(sp)
8020c7f0:	0009883a 	mov	r4,zero
8020c7f4:	014ff834 	movhi	r5,16352
8020c7f8:	0215b240 	call	80215b24 <__subdf3>
8020c7fc:	880d883a 	mov	r6,r17
8020c800:	a00f883a 	mov	r7,r20
8020c804:	1009883a 	mov	r4,r2
8020c808:	180b883a 	mov	r5,r3
8020c80c:	021523c0 	call	8021523c <__gedf2>
8020c810:	00bc7c0e 	bge	zero,r2,8020ba04 <__reset+0xfa1eba04>
8020c814:	01000c04 	movi	r4,48
8020c818:	00000106 	br	8020c820 <_dtoa_r+0x1580>
8020c81c:	102f883a 	mov	r23,r2
8020c820:	b8bfffc4 	addi	r2,r23,-1
8020c824:	10c00007 	ldb	r3,0(r2)
8020c828:	193ffc26 	beq	r3,r4,8020c81c <__reset+0xfa1ec81c>
8020c82c:	d9801317 	ldw	r6,76(sp)
8020c830:	d9800515 	stw	r6,20(sp)
8020c834:	003c4406 	br	8020b948 <__reset+0xfa1eb948>
8020c838:	d9801317 	ldw	r6,76(sp)
8020c83c:	d9800515 	stw	r6,20(sp)
8020c840:	003cea06 	br	8020bbec <__reset+0xfa1ebbec>
8020c844:	dd800f17 	ldw	r22,60(sp)
8020c848:	dcc01017 	ldw	r19,64(sp)
8020c84c:	dc801217 	ldw	r18,72(sp)
8020c850:	003c6c06 	br	8020ba04 <__reset+0xfa1eba04>
8020c854:	903e031e 	bne	r18,zero,8020c064 <__reset+0xfa1ec064>
8020c858:	003ebb06 	br	8020c348 <__reset+0xfa1ec348>
8020c85c:	103e6c1e 	bne	r2,zero,8020c210 <__reset+0xfa1ec210>
8020c860:	4080004c 	andi	r2,r8,1
8020c864:	103e6a26 	beq	r2,zero,8020c210 <__reset+0xfa1ec210>
8020c868:	003e6606 	br	8020c204 <__reset+0xfa1ec204>
8020c86c:	d8c00317 	ldw	r3,12(sp)
8020c870:	00800084 	movi	r2,2
8020c874:	10c02916 	blt	r2,r3,8020c91c <_dtoa_r+0x167c>
8020c878:	d9000c17 	ldw	r4,48(sp)
8020c87c:	003e8806 	br	8020c2a0 <__reset+0xfa1ec2a0>
8020c880:	04000084 	movi	r16,2
8020c884:	003b9d06 	br	8020b6fc <__reset+0xfa1eb6fc>
8020c888:	d9001317 	ldw	r4,76(sp)
8020c88c:	d9000515 	stw	r4,20(sp)
8020c890:	003cd606 	br	8020bbec <__reset+0xfa1ebbec>
8020c894:	d8801317 	ldw	r2,76(sp)
8020c898:	d8800515 	stw	r2,20(sp)
8020c89c:	003c2a06 	br	8020b948 <__reset+0xfa1eb948>
8020c8a0:	d9800317 	ldw	r6,12(sp)
8020c8a4:	00800084 	movi	r2,2
8020c8a8:	11801516 	blt	r2,r6,8020c900 <_dtoa_r+0x1660>
8020c8ac:	d9c00c17 	ldw	r7,48(sp)
8020c8b0:	d9c00615 	stw	r7,24(sp)
8020c8b4:	003df706 	br	8020c094 <__reset+0xfa1ec094>
8020c8b8:	193d3926 	beq	r3,r4,8020bda0 <__reset+0xfa1ebda0>
8020c8bc:	00c00f04 	movi	r3,60
8020c8c0:	1885c83a 	sub	r2,r3,r2
8020c8c4:	003ddf06 	br	8020c044 <__reset+0xfa1ec044>
8020c8c8:	e009883a 	mov	r4,fp
8020c8cc:	e0001115 	stw	zero,68(fp)
8020c8d0:	000b883a 	mov	r5,zero
8020c8d4:	020e7f40 	call	8020e7f4 <_Balloc>
8020c8d8:	d8800715 	stw	r2,28(sp)
8020c8dc:	d8c00717 	ldw	r3,28(sp)
8020c8e0:	00bfffc4 	movi	r2,-1
8020c8e4:	01000044 	movi	r4,1
8020c8e8:	d8800c15 	stw	r2,48(sp)
8020c8ec:	e0c01015 	stw	r3,64(fp)
8020c8f0:	d9000b15 	stw	r4,44(sp)
8020c8f4:	d8800615 	stw	r2,24(sp)
8020c8f8:	d8002215 	stw	zero,136(sp)
8020c8fc:	003c4106 	br	8020ba04 <__reset+0xfa1eba04>
8020c900:	d8c00c17 	ldw	r3,48(sp)
8020c904:	d8c00615 	stw	r3,24(sp)
8020c908:	003e7006 	br	8020c2cc <__reset+0xfa1ec2cc>
8020c90c:	04400044 	movi	r17,1
8020c910:	003b2006 	br	8020b594 <__reset+0xfa1eb594>
8020c914:	000b883a 	mov	r5,zero
8020c918:	003b3d06 	br	8020b610 <__reset+0xfa1eb610>
8020c91c:	d8800c17 	ldw	r2,48(sp)
8020c920:	d8800615 	stw	r2,24(sp)
8020c924:	003e6906 	br	8020c2cc <__reset+0xfa1ec2cc>

8020c928 <__sflush_r>:
8020c928:	2880030b 	ldhu	r2,12(r5)
8020c92c:	defffb04 	addi	sp,sp,-20
8020c930:	dcc00315 	stw	r19,12(sp)
8020c934:	dc400115 	stw	r17,4(sp)
8020c938:	dfc00415 	stw	ra,16(sp)
8020c93c:	dc800215 	stw	r18,8(sp)
8020c940:	dc000015 	stw	r16,0(sp)
8020c944:	10c0020c 	andi	r3,r2,8
8020c948:	2823883a 	mov	r17,r5
8020c94c:	2027883a 	mov	r19,r4
8020c950:	1800311e 	bne	r3,zero,8020ca18 <__sflush_r+0xf0>
8020c954:	28c00117 	ldw	r3,4(r5)
8020c958:	10820014 	ori	r2,r2,2048
8020c95c:	2880030d 	sth	r2,12(r5)
8020c960:	00c04b0e 	bge	zero,r3,8020ca90 <__sflush_r+0x168>
8020c964:	8a000a17 	ldw	r8,40(r17)
8020c968:	40002326 	beq	r8,zero,8020c9f8 <__sflush_r+0xd0>
8020c96c:	9c000017 	ldw	r16,0(r19)
8020c970:	10c4000c 	andi	r3,r2,4096
8020c974:	98000015 	stw	zero,0(r19)
8020c978:	18004826 	beq	r3,zero,8020ca9c <__sflush_r+0x174>
8020c97c:	89801417 	ldw	r6,80(r17)
8020c980:	10c0010c 	andi	r3,r2,4
8020c984:	18000626 	beq	r3,zero,8020c9a0 <__sflush_r+0x78>
8020c988:	88c00117 	ldw	r3,4(r17)
8020c98c:	88800c17 	ldw	r2,48(r17)
8020c990:	30cdc83a 	sub	r6,r6,r3
8020c994:	10000226 	beq	r2,zero,8020c9a0 <__sflush_r+0x78>
8020c998:	88800f17 	ldw	r2,60(r17)
8020c99c:	308dc83a 	sub	r6,r6,r2
8020c9a0:	89400717 	ldw	r5,28(r17)
8020c9a4:	000f883a 	mov	r7,zero
8020c9a8:	9809883a 	mov	r4,r19
8020c9ac:	403ee83a 	callr	r8
8020c9b0:	00ffffc4 	movi	r3,-1
8020c9b4:	10c04426 	beq	r2,r3,8020cac8 <__sflush_r+0x1a0>
8020c9b8:	88c0030b 	ldhu	r3,12(r17)
8020c9bc:	89000417 	ldw	r4,16(r17)
8020c9c0:	88000115 	stw	zero,4(r17)
8020c9c4:	197dffcc 	andi	r5,r3,63487
8020c9c8:	8940030d 	sth	r5,12(r17)
8020c9cc:	89000015 	stw	r4,0(r17)
8020c9d0:	18c4000c 	andi	r3,r3,4096
8020c9d4:	18002c1e 	bne	r3,zero,8020ca88 <__sflush_r+0x160>
8020c9d8:	89400c17 	ldw	r5,48(r17)
8020c9dc:	9c000015 	stw	r16,0(r19)
8020c9e0:	28000526 	beq	r5,zero,8020c9f8 <__sflush_r+0xd0>
8020c9e4:	88801004 	addi	r2,r17,64
8020c9e8:	28800226 	beq	r5,r2,8020c9f4 <__sflush_r+0xcc>
8020c9ec:	9809883a 	mov	r4,r19
8020c9f0:	020d0940 	call	8020d094 <_free_r>
8020c9f4:	88000c15 	stw	zero,48(r17)
8020c9f8:	0005883a 	mov	r2,zero
8020c9fc:	dfc00417 	ldw	ra,16(sp)
8020ca00:	dcc00317 	ldw	r19,12(sp)
8020ca04:	dc800217 	ldw	r18,8(sp)
8020ca08:	dc400117 	ldw	r17,4(sp)
8020ca0c:	dc000017 	ldw	r16,0(sp)
8020ca10:	dec00504 	addi	sp,sp,20
8020ca14:	f800283a 	ret
8020ca18:	2c800417 	ldw	r18,16(r5)
8020ca1c:	903ff626 	beq	r18,zero,8020c9f8 <__reset+0xfa1ec9f8>
8020ca20:	2c000017 	ldw	r16,0(r5)
8020ca24:	108000cc 	andi	r2,r2,3
8020ca28:	2c800015 	stw	r18,0(r5)
8020ca2c:	84a1c83a 	sub	r16,r16,r18
8020ca30:	1000131e 	bne	r2,zero,8020ca80 <__sflush_r+0x158>
8020ca34:	28800517 	ldw	r2,20(r5)
8020ca38:	88800215 	stw	r2,8(r17)
8020ca3c:	04000316 	blt	zero,r16,8020ca4c <__sflush_r+0x124>
8020ca40:	003fed06 	br	8020c9f8 <__reset+0xfa1ec9f8>
8020ca44:	90a5883a 	add	r18,r18,r2
8020ca48:	043feb0e 	bge	zero,r16,8020c9f8 <__reset+0xfa1ec9f8>
8020ca4c:	88800917 	ldw	r2,36(r17)
8020ca50:	89400717 	ldw	r5,28(r17)
8020ca54:	800f883a 	mov	r7,r16
8020ca58:	900d883a 	mov	r6,r18
8020ca5c:	9809883a 	mov	r4,r19
8020ca60:	103ee83a 	callr	r2
8020ca64:	80a1c83a 	sub	r16,r16,r2
8020ca68:	00bff616 	blt	zero,r2,8020ca44 <__reset+0xfa1eca44>
8020ca6c:	88c0030b 	ldhu	r3,12(r17)
8020ca70:	00bfffc4 	movi	r2,-1
8020ca74:	18c01014 	ori	r3,r3,64
8020ca78:	88c0030d 	sth	r3,12(r17)
8020ca7c:	003fdf06 	br	8020c9fc <__reset+0xfa1ec9fc>
8020ca80:	0005883a 	mov	r2,zero
8020ca84:	003fec06 	br	8020ca38 <__reset+0xfa1eca38>
8020ca88:	88801415 	stw	r2,80(r17)
8020ca8c:	003fd206 	br	8020c9d8 <__reset+0xfa1ec9d8>
8020ca90:	28c00f17 	ldw	r3,60(r5)
8020ca94:	00ffb316 	blt	zero,r3,8020c964 <__reset+0xfa1ec964>
8020ca98:	003fd706 	br	8020c9f8 <__reset+0xfa1ec9f8>
8020ca9c:	89400717 	ldw	r5,28(r17)
8020caa0:	000d883a 	mov	r6,zero
8020caa4:	01c00044 	movi	r7,1
8020caa8:	9809883a 	mov	r4,r19
8020caac:	403ee83a 	callr	r8
8020cab0:	100d883a 	mov	r6,r2
8020cab4:	00bfffc4 	movi	r2,-1
8020cab8:	30801426 	beq	r6,r2,8020cb0c <__sflush_r+0x1e4>
8020cabc:	8880030b 	ldhu	r2,12(r17)
8020cac0:	8a000a17 	ldw	r8,40(r17)
8020cac4:	003fae06 	br	8020c980 <__reset+0xfa1ec980>
8020cac8:	98c00017 	ldw	r3,0(r19)
8020cacc:	183fba26 	beq	r3,zero,8020c9b8 <__reset+0xfa1ec9b8>
8020cad0:	01000744 	movi	r4,29
8020cad4:	19000626 	beq	r3,r4,8020caf0 <__sflush_r+0x1c8>
8020cad8:	01000584 	movi	r4,22
8020cadc:	19000426 	beq	r3,r4,8020caf0 <__sflush_r+0x1c8>
8020cae0:	88c0030b 	ldhu	r3,12(r17)
8020cae4:	18c01014 	ori	r3,r3,64
8020cae8:	88c0030d 	sth	r3,12(r17)
8020caec:	003fc306 	br	8020c9fc <__reset+0xfa1ec9fc>
8020caf0:	8880030b 	ldhu	r2,12(r17)
8020caf4:	88c00417 	ldw	r3,16(r17)
8020caf8:	88000115 	stw	zero,4(r17)
8020cafc:	10bdffcc 	andi	r2,r2,63487
8020cb00:	8880030d 	sth	r2,12(r17)
8020cb04:	88c00015 	stw	r3,0(r17)
8020cb08:	003fb306 	br	8020c9d8 <__reset+0xfa1ec9d8>
8020cb0c:	98800017 	ldw	r2,0(r19)
8020cb10:	103fea26 	beq	r2,zero,8020cabc <__reset+0xfa1ecabc>
8020cb14:	00c00744 	movi	r3,29
8020cb18:	10c00226 	beq	r2,r3,8020cb24 <__sflush_r+0x1fc>
8020cb1c:	00c00584 	movi	r3,22
8020cb20:	10c0031e 	bne	r2,r3,8020cb30 <__sflush_r+0x208>
8020cb24:	9c000015 	stw	r16,0(r19)
8020cb28:	0005883a 	mov	r2,zero
8020cb2c:	003fb306 	br	8020c9fc <__reset+0xfa1ec9fc>
8020cb30:	88c0030b 	ldhu	r3,12(r17)
8020cb34:	3005883a 	mov	r2,r6
8020cb38:	18c01014 	ori	r3,r3,64
8020cb3c:	88c0030d 	sth	r3,12(r17)
8020cb40:	003fae06 	br	8020c9fc <__reset+0xfa1ec9fc>

8020cb44 <_fflush_r>:
8020cb44:	defffd04 	addi	sp,sp,-12
8020cb48:	dc000115 	stw	r16,4(sp)
8020cb4c:	dfc00215 	stw	ra,8(sp)
8020cb50:	2021883a 	mov	r16,r4
8020cb54:	20000226 	beq	r4,zero,8020cb60 <_fflush_r+0x1c>
8020cb58:	20800e17 	ldw	r2,56(r4)
8020cb5c:	10000c26 	beq	r2,zero,8020cb90 <_fflush_r+0x4c>
8020cb60:	2880030f 	ldh	r2,12(r5)
8020cb64:	1000051e 	bne	r2,zero,8020cb7c <_fflush_r+0x38>
8020cb68:	0005883a 	mov	r2,zero
8020cb6c:	dfc00217 	ldw	ra,8(sp)
8020cb70:	dc000117 	ldw	r16,4(sp)
8020cb74:	dec00304 	addi	sp,sp,12
8020cb78:	f800283a 	ret
8020cb7c:	8009883a 	mov	r4,r16
8020cb80:	dfc00217 	ldw	ra,8(sp)
8020cb84:	dc000117 	ldw	r16,4(sp)
8020cb88:	dec00304 	addi	sp,sp,12
8020cb8c:	020c9281 	jmpi	8020c928 <__sflush_r>
8020cb90:	d9400015 	stw	r5,0(sp)
8020cb94:	020cf200 	call	8020cf20 <__sinit>
8020cb98:	d9400017 	ldw	r5,0(sp)
8020cb9c:	003ff006 	br	8020cb60 <__reset+0xfa1ecb60>

8020cba0 <fflush>:
8020cba0:	20000526 	beq	r4,zero,8020cbb8 <fflush+0x18>
8020cba4:	00a008b4 	movhi	r2,32802
8020cba8:	10bad504 	addi	r2,r2,-5292
8020cbac:	200b883a 	mov	r5,r4
8020cbb0:	11000017 	ldw	r4,0(r2)
8020cbb4:	020cb441 	jmpi	8020cb44 <_fflush_r>
8020cbb8:	00a008b4 	movhi	r2,32802
8020cbbc:	10bad404 	addi	r2,r2,-5296
8020cbc0:	11000017 	ldw	r4,0(r2)
8020cbc4:	01600874 	movhi	r5,32801
8020cbc8:	2972d104 	addi	r5,r5,-13500
8020cbcc:	020d9241 	jmpi	8020d924 <_fwalk_reent>

8020cbd0 <__fp_unlock>:
8020cbd0:	0005883a 	mov	r2,zero
8020cbd4:	f800283a 	ret

8020cbd8 <_cleanup_r>:
8020cbd8:	01600874 	movhi	r5,32801
8020cbdc:	294b0004 	addi	r5,r5,11264
8020cbe0:	020d9241 	jmpi	8020d924 <_fwalk_reent>

8020cbe4 <__sinit.part.1>:
8020cbe4:	defff704 	addi	sp,sp,-36
8020cbe8:	00e00874 	movhi	r3,32801
8020cbec:	dfc00815 	stw	ra,32(sp)
8020cbf0:	ddc00715 	stw	r23,28(sp)
8020cbf4:	dd800615 	stw	r22,24(sp)
8020cbf8:	dd400515 	stw	r21,20(sp)
8020cbfc:	dd000415 	stw	r20,16(sp)
8020cc00:	dcc00315 	stw	r19,12(sp)
8020cc04:	dc800215 	stw	r18,8(sp)
8020cc08:	dc400115 	stw	r17,4(sp)
8020cc0c:	dc000015 	stw	r16,0(sp)
8020cc10:	18f2f604 	addi	r3,r3,-13352
8020cc14:	24000117 	ldw	r16,4(r4)
8020cc18:	20c00f15 	stw	r3,60(r4)
8020cc1c:	2080bb04 	addi	r2,r4,748
8020cc20:	00c000c4 	movi	r3,3
8020cc24:	20c0b915 	stw	r3,740(r4)
8020cc28:	2080ba15 	stw	r2,744(r4)
8020cc2c:	2000b815 	stw	zero,736(r4)
8020cc30:	05c00204 	movi	r23,8
8020cc34:	00800104 	movi	r2,4
8020cc38:	2025883a 	mov	r18,r4
8020cc3c:	b80d883a 	mov	r6,r23
8020cc40:	81001704 	addi	r4,r16,92
8020cc44:	000b883a 	mov	r5,zero
8020cc48:	80000015 	stw	zero,0(r16)
8020cc4c:	80000115 	stw	zero,4(r16)
8020cc50:	80000215 	stw	zero,8(r16)
8020cc54:	8080030d 	sth	r2,12(r16)
8020cc58:	80001915 	stw	zero,100(r16)
8020cc5c:	8000038d 	sth	zero,14(r16)
8020cc60:	80000415 	stw	zero,16(r16)
8020cc64:	80000515 	stw	zero,20(r16)
8020cc68:	80000615 	stw	zero,24(r16)
8020cc6c:	020e6cc0 	call	8020e6cc <memset>
8020cc70:	05a00874 	movhi	r22,32801
8020cc74:	94400217 	ldw	r17,8(r18)
8020cc78:	05600874 	movhi	r21,32801
8020cc7c:	05200874 	movhi	r20,32801
8020cc80:	04e00874 	movhi	r19,32801
8020cc84:	b5bf8704 	addi	r22,r22,-484
8020cc88:	ad7f9e04 	addi	r21,r21,-392
8020cc8c:	a53fbd04 	addi	r20,r20,-268
8020cc90:	9cffd404 	addi	r19,r19,-176
8020cc94:	85800815 	stw	r22,32(r16)
8020cc98:	85400915 	stw	r21,36(r16)
8020cc9c:	85000a15 	stw	r20,40(r16)
8020cca0:	84c00b15 	stw	r19,44(r16)
8020cca4:	84000715 	stw	r16,28(r16)
8020cca8:	00800284 	movi	r2,10
8020ccac:	8880030d 	sth	r2,12(r17)
8020ccb0:	00800044 	movi	r2,1
8020ccb4:	b80d883a 	mov	r6,r23
8020ccb8:	89001704 	addi	r4,r17,92
8020ccbc:	000b883a 	mov	r5,zero
8020ccc0:	88000015 	stw	zero,0(r17)
8020ccc4:	88000115 	stw	zero,4(r17)
8020ccc8:	88000215 	stw	zero,8(r17)
8020cccc:	88001915 	stw	zero,100(r17)
8020ccd0:	8880038d 	sth	r2,14(r17)
8020ccd4:	88000415 	stw	zero,16(r17)
8020ccd8:	88000515 	stw	zero,20(r17)
8020ccdc:	88000615 	stw	zero,24(r17)
8020cce0:	020e6cc0 	call	8020e6cc <memset>
8020cce4:	94000317 	ldw	r16,12(r18)
8020cce8:	00800484 	movi	r2,18
8020ccec:	8c400715 	stw	r17,28(r17)
8020ccf0:	8d800815 	stw	r22,32(r17)
8020ccf4:	8d400915 	stw	r21,36(r17)
8020ccf8:	8d000a15 	stw	r20,40(r17)
8020ccfc:	8cc00b15 	stw	r19,44(r17)
8020cd00:	8080030d 	sth	r2,12(r16)
8020cd04:	00800084 	movi	r2,2
8020cd08:	80000015 	stw	zero,0(r16)
8020cd0c:	80000115 	stw	zero,4(r16)
8020cd10:	80000215 	stw	zero,8(r16)
8020cd14:	80001915 	stw	zero,100(r16)
8020cd18:	8080038d 	sth	r2,14(r16)
8020cd1c:	80000415 	stw	zero,16(r16)
8020cd20:	80000515 	stw	zero,20(r16)
8020cd24:	80000615 	stw	zero,24(r16)
8020cd28:	b80d883a 	mov	r6,r23
8020cd2c:	000b883a 	mov	r5,zero
8020cd30:	81001704 	addi	r4,r16,92
8020cd34:	020e6cc0 	call	8020e6cc <memset>
8020cd38:	00800044 	movi	r2,1
8020cd3c:	84000715 	stw	r16,28(r16)
8020cd40:	85800815 	stw	r22,32(r16)
8020cd44:	85400915 	stw	r21,36(r16)
8020cd48:	85000a15 	stw	r20,40(r16)
8020cd4c:	84c00b15 	stw	r19,44(r16)
8020cd50:	90800e15 	stw	r2,56(r18)
8020cd54:	dfc00817 	ldw	ra,32(sp)
8020cd58:	ddc00717 	ldw	r23,28(sp)
8020cd5c:	dd800617 	ldw	r22,24(sp)
8020cd60:	dd400517 	ldw	r21,20(sp)
8020cd64:	dd000417 	ldw	r20,16(sp)
8020cd68:	dcc00317 	ldw	r19,12(sp)
8020cd6c:	dc800217 	ldw	r18,8(sp)
8020cd70:	dc400117 	ldw	r17,4(sp)
8020cd74:	dc000017 	ldw	r16,0(sp)
8020cd78:	dec00904 	addi	sp,sp,36
8020cd7c:	f800283a 	ret

8020cd80 <__fp_lock>:
8020cd80:	0005883a 	mov	r2,zero
8020cd84:	f800283a 	ret

8020cd88 <__sfmoreglue>:
8020cd88:	defffc04 	addi	sp,sp,-16
8020cd8c:	dc400115 	stw	r17,4(sp)
8020cd90:	2c7fffc4 	addi	r17,r5,-1
8020cd94:	8c401a24 	muli	r17,r17,104
8020cd98:	dc800215 	stw	r18,8(sp)
8020cd9c:	2825883a 	mov	r18,r5
8020cda0:	89401d04 	addi	r5,r17,116
8020cda4:	dc000015 	stw	r16,0(sp)
8020cda8:	dfc00315 	stw	ra,12(sp)
8020cdac:	020dc800 	call	8020dc80 <_malloc_r>
8020cdb0:	1021883a 	mov	r16,r2
8020cdb4:	10000726 	beq	r2,zero,8020cdd4 <__sfmoreglue+0x4c>
8020cdb8:	11000304 	addi	r4,r2,12
8020cdbc:	10000015 	stw	zero,0(r2)
8020cdc0:	14800115 	stw	r18,4(r2)
8020cdc4:	11000215 	stw	r4,8(r2)
8020cdc8:	89801a04 	addi	r6,r17,104
8020cdcc:	000b883a 	mov	r5,zero
8020cdd0:	020e6cc0 	call	8020e6cc <memset>
8020cdd4:	8005883a 	mov	r2,r16
8020cdd8:	dfc00317 	ldw	ra,12(sp)
8020cddc:	dc800217 	ldw	r18,8(sp)
8020cde0:	dc400117 	ldw	r17,4(sp)
8020cde4:	dc000017 	ldw	r16,0(sp)
8020cde8:	dec00404 	addi	sp,sp,16
8020cdec:	f800283a 	ret

8020cdf0 <__sfp>:
8020cdf0:	defffb04 	addi	sp,sp,-20
8020cdf4:	dc000015 	stw	r16,0(sp)
8020cdf8:	042008b4 	movhi	r16,32802
8020cdfc:	843ad404 	addi	r16,r16,-5296
8020ce00:	dcc00315 	stw	r19,12(sp)
8020ce04:	2027883a 	mov	r19,r4
8020ce08:	81000017 	ldw	r4,0(r16)
8020ce0c:	dfc00415 	stw	ra,16(sp)
8020ce10:	dc800215 	stw	r18,8(sp)
8020ce14:	20800e17 	ldw	r2,56(r4)
8020ce18:	dc400115 	stw	r17,4(sp)
8020ce1c:	1000021e 	bne	r2,zero,8020ce28 <__sfp+0x38>
8020ce20:	020cbe40 	call	8020cbe4 <__sinit.part.1>
8020ce24:	81000017 	ldw	r4,0(r16)
8020ce28:	2480b804 	addi	r18,r4,736
8020ce2c:	047fffc4 	movi	r17,-1
8020ce30:	91000117 	ldw	r4,4(r18)
8020ce34:	94000217 	ldw	r16,8(r18)
8020ce38:	213fffc4 	addi	r4,r4,-1
8020ce3c:	20000a16 	blt	r4,zero,8020ce68 <__sfp+0x78>
8020ce40:	8080030f 	ldh	r2,12(r16)
8020ce44:	10000c26 	beq	r2,zero,8020ce78 <__sfp+0x88>
8020ce48:	80c01d04 	addi	r3,r16,116
8020ce4c:	00000206 	br	8020ce58 <__sfp+0x68>
8020ce50:	18bfe60f 	ldh	r2,-104(r3)
8020ce54:	10000826 	beq	r2,zero,8020ce78 <__sfp+0x88>
8020ce58:	213fffc4 	addi	r4,r4,-1
8020ce5c:	1c3ffd04 	addi	r16,r3,-12
8020ce60:	18c01a04 	addi	r3,r3,104
8020ce64:	247ffa1e 	bne	r4,r17,8020ce50 <__reset+0xfa1ece50>
8020ce68:	90800017 	ldw	r2,0(r18)
8020ce6c:	10001d26 	beq	r2,zero,8020cee4 <__sfp+0xf4>
8020ce70:	1025883a 	mov	r18,r2
8020ce74:	003fee06 	br	8020ce30 <__reset+0xfa1ece30>
8020ce78:	00bfffc4 	movi	r2,-1
8020ce7c:	8080038d 	sth	r2,14(r16)
8020ce80:	00800044 	movi	r2,1
8020ce84:	8080030d 	sth	r2,12(r16)
8020ce88:	80001915 	stw	zero,100(r16)
8020ce8c:	80000015 	stw	zero,0(r16)
8020ce90:	80000215 	stw	zero,8(r16)
8020ce94:	80000115 	stw	zero,4(r16)
8020ce98:	80000415 	stw	zero,16(r16)
8020ce9c:	80000515 	stw	zero,20(r16)
8020cea0:	80000615 	stw	zero,24(r16)
8020cea4:	01800204 	movi	r6,8
8020cea8:	000b883a 	mov	r5,zero
8020ceac:	81001704 	addi	r4,r16,92
8020ceb0:	020e6cc0 	call	8020e6cc <memset>
8020ceb4:	8005883a 	mov	r2,r16
8020ceb8:	80000c15 	stw	zero,48(r16)
8020cebc:	80000d15 	stw	zero,52(r16)
8020cec0:	80001115 	stw	zero,68(r16)
8020cec4:	80001215 	stw	zero,72(r16)
8020cec8:	dfc00417 	ldw	ra,16(sp)
8020cecc:	dcc00317 	ldw	r19,12(sp)
8020ced0:	dc800217 	ldw	r18,8(sp)
8020ced4:	dc400117 	ldw	r17,4(sp)
8020ced8:	dc000017 	ldw	r16,0(sp)
8020cedc:	dec00504 	addi	sp,sp,20
8020cee0:	f800283a 	ret
8020cee4:	01400104 	movi	r5,4
8020cee8:	9809883a 	mov	r4,r19
8020ceec:	020cd880 	call	8020cd88 <__sfmoreglue>
8020cef0:	90800015 	stw	r2,0(r18)
8020cef4:	103fde1e 	bne	r2,zero,8020ce70 <__reset+0xfa1ece70>
8020cef8:	00800304 	movi	r2,12
8020cefc:	98800015 	stw	r2,0(r19)
8020cf00:	0005883a 	mov	r2,zero
8020cf04:	003ff006 	br	8020cec8 <__reset+0xfa1ecec8>

8020cf08 <_cleanup>:
8020cf08:	00a008b4 	movhi	r2,32802
8020cf0c:	10bad404 	addi	r2,r2,-5296
8020cf10:	11000017 	ldw	r4,0(r2)
8020cf14:	01600874 	movhi	r5,32801
8020cf18:	294b0004 	addi	r5,r5,11264
8020cf1c:	020d9241 	jmpi	8020d924 <_fwalk_reent>

8020cf20 <__sinit>:
8020cf20:	20800e17 	ldw	r2,56(r4)
8020cf24:	10000126 	beq	r2,zero,8020cf2c <__sinit+0xc>
8020cf28:	f800283a 	ret
8020cf2c:	020cbe41 	jmpi	8020cbe4 <__sinit.part.1>

8020cf30 <__sfp_lock_acquire>:
8020cf30:	f800283a 	ret

8020cf34 <__sfp_lock_release>:
8020cf34:	f800283a 	ret

8020cf38 <__sinit_lock_acquire>:
8020cf38:	f800283a 	ret

8020cf3c <__sinit_lock_release>:
8020cf3c:	f800283a 	ret

8020cf40 <__fp_lock_all>:
8020cf40:	00a008b4 	movhi	r2,32802
8020cf44:	10bad504 	addi	r2,r2,-5292
8020cf48:	11000017 	ldw	r4,0(r2)
8020cf4c:	01600874 	movhi	r5,32801
8020cf50:	29736004 	addi	r5,r5,-12928
8020cf54:	020d8601 	jmpi	8020d860 <_fwalk>

8020cf58 <__fp_unlock_all>:
8020cf58:	00a008b4 	movhi	r2,32802
8020cf5c:	10bad504 	addi	r2,r2,-5292
8020cf60:	11000017 	ldw	r4,0(r2)
8020cf64:	01600874 	movhi	r5,32801
8020cf68:	2972f404 	addi	r5,r5,-13360
8020cf6c:	020d8601 	jmpi	8020d860 <_fwalk>

8020cf70 <_malloc_trim_r>:
8020cf70:	defffb04 	addi	sp,sp,-20
8020cf74:	dcc00315 	stw	r19,12(sp)
8020cf78:	04e008b4 	movhi	r19,32802
8020cf7c:	dc800215 	stw	r18,8(sp)
8020cf80:	dc400115 	stw	r17,4(sp)
8020cf84:	dc000015 	stw	r16,0(sp)
8020cf88:	dfc00415 	stw	ra,16(sp)
8020cf8c:	2821883a 	mov	r16,r5
8020cf90:	9cf4df04 	addi	r19,r19,-11396
8020cf94:	2025883a 	mov	r18,r4
8020cf98:	0216bfc0 	call	80216bfc <__malloc_lock>
8020cf9c:	98800217 	ldw	r2,8(r19)
8020cfa0:	14400117 	ldw	r17,4(r2)
8020cfa4:	00bfff04 	movi	r2,-4
8020cfa8:	88a2703a 	and	r17,r17,r2
8020cfac:	8c21c83a 	sub	r16,r17,r16
8020cfb0:	8403fbc4 	addi	r16,r16,4079
8020cfb4:	8020d33a 	srli	r16,r16,12
8020cfb8:	0083ffc4 	movi	r2,4095
8020cfbc:	843fffc4 	addi	r16,r16,-1
8020cfc0:	8020933a 	slli	r16,r16,12
8020cfc4:	1400060e 	bge	r2,r16,8020cfe0 <_malloc_trim_r+0x70>
8020cfc8:	000b883a 	mov	r5,zero
8020cfcc:	9009883a 	mov	r4,r18
8020cfd0:	020fdc80 	call	8020fdc8 <_sbrk_r>
8020cfd4:	98c00217 	ldw	r3,8(r19)
8020cfd8:	1c47883a 	add	r3,r3,r17
8020cfdc:	10c00a26 	beq	r2,r3,8020d008 <_malloc_trim_r+0x98>
8020cfe0:	9009883a 	mov	r4,r18
8020cfe4:	0216c200 	call	80216c20 <__malloc_unlock>
8020cfe8:	0005883a 	mov	r2,zero
8020cfec:	dfc00417 	ldw	ra,16(sp)
8020cff0:	dcc00317 	ldw	r19,12(sp)
8020cff4:	dc800217 	ldw	r18,8(sp)
8020cff8:	dc400117 	ldw	r17,4(sp)
8020cffc:	dc000017 	ldw	r16,0(sp)
8020d000:	dec00504 	addi	sp,sp,20
8020d004:	f800283a 	ret
8020d008:	040bc83a 	sub	r5,zero,r16
8020d00c:	9009883a 	mov	r4,r18
8020d010:	020fdc80 	call	8020fdc8 <_sbrk_r>
8020d014:	00ffffc4 	movi	r3,-1
8020d018:	10c00d26 	beq	r2,r3,8020d050 <_malloc_trim_r+0xe0>
8020d01c:	00e008b4 	movhi	r3,32802
8020d020:	18fafc04 	addi	r3,r3,-5136
8020d024:	18800017 	ldw	r2,0(r3)
8020d028:	99000217 	ldw	r4,8(r19)
8020d02c:	8c23c83a 	sub	r17,r17,r16
8020d030:	8c400054 	ori	r17,r17,1
8020d034:	1421c83a 	sub	r16,r2,r16
8020d038:	24400115 	stw	r17,4(r4)
8020d03c:	9009883a 	mov	r4,r18
8020d040:	1c000015 	stw	r16,0(r3)
8020d044:	0216c200 	call	80216c20 <__malloc_unlock>
8020d048:	00800044 	movi	r2,1
8020d04c:	003fe706 	br	8020cfec <__reset+0xfa1ecfec>
8020d050:	000b883a 	mov	r5,zero
8020d054:	9009883a 	mov	r4,r18
8020d058:	020fdc80 	call	8020fdc8 <_sbrk_r>
8020d05c:	99000217 	ldw	r4,8(r19)
8020d060:	014003c4 	movi	r5,15
8020d064:	1107c83a 	sub	r3,r2,r4
8020d068:	28ffdd0e 	bge	r5,r3,8020cfe0 <__reset+0xfa1ecfe0>
8020d06c:	016008b4 	movhi	r5,32802
8020d070:	297ad704 	addi	r5,r5,-5284
8020d074:	29400017 	ldw	r5,0(r5)
8020d078:	18c00054 	ori	r3,r3,1
8020d07c:	20c00115 	stw	r3,4(r4)
8020d080:	00e008b4 	movhi	r3,32802
8020d084:	1145c83a 	sub	r2,r2,r5
8020d088:	18fafc04 	addi	r3,r3,-5136
8020d08c:	18800015 	stw	r2,0(r3)
8020d090:	003fd306 	br	8020cfe0 <__reset+0xfa1ecfe0>

8020d094 <_free_r>:
8020d094:	28004126 	beq	r5,zero,8020d19c <_free_r+0x108>
8020d098:	defffd04 	addi	sp,sp,-12
8020d09c:	dc400115 	stw	r17,4(sp)
8020d0a0:	dc000015 	stw	r16,0(sp)
8020d0a4:	2023883a 	mov	r17,r4
8020d0a8:	2821883a 	mov	r16,r5
8020d0ac:	dfc00215 	stw	ra,8(sp)
8020d0b0:	0216bfc0 	call	80216bfc <__malloc_lock>
8020d0b4:	81ffff17 	ldw	r7,-4(r16)
8020d0b8:	00bfff84 	movi	r2,-2
8020d0bc:	012008b4 	movhi	r4,32802
8020d0c0:	81bffe04 	addi	r6,r16,-8
8020d0c4:	3884703a 	and	r2,r7,r2
8020d0c8:	2134df04 	addi	r4,r4,-11396
8020d0cc:	308b883a 	add	r5,r6,r2
8020d0d0:	2a400117 	ldw	r9,4(r5)
8020d0d4:	22000217 	ldw	r8,8(r4)
8020d0d8:	00ffff04 	movi	r3,-4
8020d0dc:	48c6703a 	and	r3,r9,r3
8020d0e0:	2a005726 	beq	r5,r8,8020d240 <_free_r+0x1ac>
8020d0e4:	28c00115 	stw	r3,4(r5)
8020d0e8:	39c0004c 	andi	r7,r7,1
8020d0ec:	3800091e 	bne	r7,zero,8020d114 <_free_r+0x80>
8020d0f0:	823ffe17 	ldw	r8,-8(r16)
8020d0f4:	22400204 	addi	r9,r4,8
8020d0f8:	320dc83a 	sub	r6,r6,r8
8020d0fc:	31c00217 	ldw	r7,8(r6)
8020d100:	1205883a 	add	r2,r2,r8
8020d104:	3a406526 	beq	r7,r9,8020d29c <_free_r+0x208>
8020d108:	32000317 	ldw	r8,12(r6)
8020d10c:	3a000315 	stw	r8,12(r7)
8020d110:	41c00215 	stw	r7,8(r8)
8020d114:	28cf883a 	add	r7,r5,r3
8020d118:	39c00117 	ldw	r7,4(r7)
8020d11c:	39c0004c 	andi	r7,r7,1
8020d120:	38003a26 	beq	r7,zero,8020d20c <_free_r+0x178>
8020d124:	10c00054 	ori	r3,r2,1
8020d128:	30c00115 	stw	r3,4(r6)
8020d12c:	3087883a 	add	r3,r6,r2
8020d130:	18800015 	stw	r2,0(r3)
8020d134:	00c07fc4 	movi	r3,511
8020d138:	18801936 	bltu	r3,r2,8020d1a0 <_free_r+0x10c>
8020d13c:	1004d0fa 	srli	r2,r2,3
8020d140:	01c00044 	movi	r7,1
8020d144:	21400117 	ldw	r5,4(r4)
8020d148:	10c00044 	addi	r3,r2,1
8020d14c:	18c7883a 	add	r3,r3,r3
8020d150:	1005d0ba 	srai	r2,r2,2
8020d154:	18c7883a 	add	r3,r3,r3
8020d158:	18c7883a 	add	r3,r3,r3
8020d15c:	1907883a 	add	r3,r3,r4
8020d160:	3884983a 	sll	r2,r7,r2
8020d164:	19c00017 	ldw	r7,0(r3)
8020d168:	1a3ffe04 	addi	r8,r3,-8
8020d16c:	1144b03a 	or	r2,r2,r5
8020d170:	32000315 	stw	r8,12(r6)
8020d174:	31c00215 	stw	r7,8(r6)
8020d178:	20800115 	stw	r2,4(r4)
8020d17c:	19800015 	stw	r6,0(r3)
8020d180:	39800315 	stw	r6,12(r7)
8020d184:	8809883a 	mov	r4,r17
8020d188:	dfc00217 	ldw	ra,8(sp)
8020d18c:	dc400117 	ldw	r17,4(sp)
8020d190:	dc000017 	ldw	r16,0(sp)
8020d194:	dec00304 	addi	sp,sp,12
8020d198:	0216c201 	jmpi	80216c20 <__malloc_unlock>
8020d19c:	f800283a 	ret
8020d1a0:	100ad27a 	srli	r5,r2,9
8020d1a4:	00c00104 	movi	r3,4
8020d1a8:	19404a36 	bltu	r3,r5,8020d2d4 <_free_r+0x240>
8020d1ac:	100ad1ba 	srli	r5,r2,6
8020d1b0:	28c00e44 	addi	r3,r5,57
8020d1b4:	18c7883a 	add	r3,r3,r3
8020d1b8:	29400e04 	addi	r5,r5,56
8020d1bc:	18c7883a 	add	r3,r3,r3
8020d1c0:	18c7883a 	add	r3,r3,r3
8020d1c4:	1909883a 	add	r4,r3,r4
8020d1c8:	20c00017 	ldw	r3,0(r4)
8020d1cc:	01e008b4 	movhi	r7,32802
8020d1d0:	213ffe04 	addi	r4,r4,-8
8020d1d4:	39f4df04 	addi	r7,r7,-11396
8020d1d8:	20c04426 	beq	r4,r3,8020d2ec <_free_r+0x258>
8020d1dc:	01ffff04 	movi	r7,-4
8020d1e0:	19400117 	ldw	r5,4(r3)
8020d1e4:	29ca703a 	and	r5,r5,r7
8020d1e8:	1140022e 	bgeu	r2,r5,8020d1f4 <_free_r+0x160>
8020d1ec:	18c00217 	ldw	r3,8(r3)
8020d1f0:	20fffb1e 	bne	r4,r3,8020d1e0 <__reset+0xfa1ed1e0>
8020d1f4:	19000317 	ldw	r4,12(r3)
8020d1f8:	31000315 	stw	r4,12(r6)
8020d1fc:	30c00215 	stw	r3,8(r6)
8020d200:	21800215 	stw	r6,8(r4)
8020d204:	19800315 	stw	r6,12(r3)
8020d208:	003fde06 	br	8020d184 <__reset+0xfa1ed184>
8020d20c:	29c00217 	ldw	r7,8(r5)
8020d210:	10c5883a 	add	r2,r2,r3
8020d214:	00e008b4 	movhi	r3,32802
8020d218:	18f4e104 	addi	r3,r3,-11388
8020d21c:	38c03b26 	beq	r7,r3,8020d30c <_free_r+0x278>
8020d220:	2a000317 	ldw	r8,12(r5)
8020d224:	11400054 	ori	r5,r2,1
8020d228:	3087883a 	add	r3,r6,r2
8020d22c:	3a000315 	stw	r8,12(r7)
8020d230:	41c00215 	stw	r7,8(r8)
8020d234:	31400115 	stw	r5,4(r6)
8020d238:	18800015 	stw	r2,0(r3)
8020d23c:	003fbd06 	br	8020d134 <__reset+0xfa1ed134>
8020d240:	39c0004c 	andi	r7,r7,1
8020d244:	10c5883a 	add	r2,r2,r3
8020d248:	3800071e 	bne	r7,zero,8020d268 <_free_r+0x1d4>
8020d24c:	81fffe17 	ldw	r7,-8(r16)
8020d250:	31cdc83a 	sub	r6,r6,r7
8020d254:	30c00317 	ldw	r3,12(r6)
8020d258:	31400217 	ldw	r5,8(r6)
8020d25c:	11c5883a 	add	r2,r2,r7
8020d260:	28c00315 	stw	r3,12(r5)
8020d264:	19400215 	stw	r5,8(r3)
8020d268:	10c00054 	ori	r3,r2,1
8020d26c:	30c00115 	stw	r3,4(r6)
8020d270:	00e008b4 	movhi	r3,32802
8020d274:	18fad804 	addi	r3,r3,-5280
8020d278:	18c00017 	ldw	r3,0(r3)
8020d27c:	21800215 	stw	r6,8(r4)
8020d280:	10ffc036 	bltu	r2,r3,8020d184 <__reset+0xfa1ed184>
8020d284:	00a008b4 	movhi	r2,32802
8020d288:	10baf304 	addi	r2,r2,-5172
8020d28c:	11400017 	ldw	r5,0(r2)
8020d290:	8809883a 	mov	r4,r17
8020d294:	020cf700 	call	8020cf70 <_malloc_trim_r>
8020d298:	003fba06 	br	8020d184 <__reset+0xfa1ed184>
8020d29c:	28c9883a 	add	r4,r5,r3
8020d2a0:	21000117 	ldw	r4,4(r4)
8020d2a4:	2100004c 	andi	r4,r4,1
8020d2a8:	2000391e 	bne	r4,zero,8020d390 <_free_r+0x2fc>
8020d2ac:	29c00217 	ldw	r7,8(r5)
8020d2b0:	29000317 	ldw	r4,12(r5)
8020d2b4:	1885883a 	add	r2,r3,r2
8020d2b8:	10c00054 	ori	r3,r2,1
8020d2bc:	39000315 	stw	r4,12(r7)
8020d2c0:	21c00215 	stw	r7,8(r4)
8020d2c4:	30c00115 	stw	r3,4(r6)
8020d2c8:	308d883a 	add	r6,r6,r2
8020d2cc:	30800015 	stw	r2,0(r6)
8020d2d0:	003fac06 	br	8020d184 <__reset+0xfa1ed184>
8020d2d4:	00c00504 	movi	r3,20
8020d2d8:	19401536 	bltu	r3,r5,8020d330 <_free_r+0x29c>
8020d2dc:	28c01704 	addi	r3,r5,92
8020d2e0:	18c7883a 	add	r3,r3,r3
8020d2e4:	294016c4 	addi	r5,r5,91
8020d2e8:	003fb406 	br	8020d1bc <__reset+0xfa1ed1bc>
8020d2ec:	280bd0ba 	srai	r5,r5,2
8020d2f0:	00c00044 	movi	r3,1
8020d2f4:	38800117 	ldw	r2,4(r7)
8020d2f8:	194a983a 	sll	r5,r3,r5
8020d2fc:	2007883a 	mov	r3,r4
8020d300:	2884b03a 	or	r2,r5,r2
8020d304:	38800115 	stw	r2,4(r7)
8020d308:	003fbb06 	br	8020d1f8 <__reset+0xfa1ed1f8>
8020d30c:	21800515 	stw	r6,20(r4)
8020d310:	21800415 	stw	r6,16(r4)
8020d314:	10c00054 	ori	r3,r2,1
8020d318:	31c00315 	stw	r7,12(r6)
8020d31c:	31c00215 	stw	r7,8(r6)
8020d320:	30c00115 	stw	r3,4(r6)
8020d324:	308d883a 	add	r6,r6,r2
8020d328:	30800015 	stw	r2,0(r6)
8020d32c:	003f9506 	br	8020d184 <__reset+0xfa1ed184>
8020d330:	00c01504 	movi	r3,84
8020d334:	19400536 	bltu	r3,r5,8020d34c <_free_r+0x2b8>
8020d338:	100ad33a 	srli	r5,r2,12
8020d33c:	28c01bc4 	addi	r3,r5,111
8020d340:	18c7883a 	add	r3,r3,r3
8020d344:	29401b84 	addi	r5,r5,110
8020d348:	003f9c06 	br	8020d1bc <__reset+0xfa1ed1bc>
8020d34c:	00c05504 	movi	r3,340
8020d350:	19400536 	bltu	r3,r5,8020d368 <_free_r+0x2d4>
8020d354:	100ad3fa 	srli	r5,r2,15
8020d358:	28c01e04 	addi	r3,r5,120
8020d35c:	18c7883a 	add	r3,r3,r3
8020d360:	29401dc4 	addi	r5,r5,119
8020d364:	003f9506 	br	8020d1bc <__reset+0xfa1ed1bc>
8020d368:	00c15504 	movi	r3,1364
8020d36c:	19400536 	bltu	r3,r5,8020d384 <_free_r+0x2f0>
8020d370:	100ad4ba 	srli	r5,r2,18
8020d374:	28c01f44 	addi	r3,r5,125
8020d378:	18c7883a 	add	r3,r3,r3
8020d37c:	29401f04 	addi	r5,r5,124
8020d380:	003f8e06 	br	8020d1bc <__reset+0xfa1ed1bc>
8020d384:	00c03f84 	movi	r3,254
8020d388:	01401f84 	movi	r5,126
8020d38c:	003f8b06 	br	8020d1bc <__reset+0xfa1ed1bc>
8020d390:	10c00054 	ori	r3,r2,1
8020d394:	30c00115 	stw	r3,4(r6)
8020d398:	308d883a 	add	r6,r6,r2
8020d39c:	30800015 	stw	r2,0(r6)
8020d3a0:	003f7806 	br	8020d184 <__reset+0xfa1ed184>

8020d3a4 <__sfvwrite_r>:
8020d3a4:	30800217 	ldw	r2,8(r6)
8020d3a8:	10006726 	beq	r2,zero,8020d548 <__sfvwrite_r+0x1a4>
8020d3ac:	28c0030b 	ldhu	r3,12(r5)
8020d3b0:	defff404 	addi	sp,sp,-48
8020d3b4:	dd400715 	stw	r21,28(sp)
8020d3b8:	dd000615 	stw	r20,24(sp)
8020d3bc:	dc000215 	stw	r16,8(sp)
8020d3c0:	dfc00b15 	stw	ra,44(sp)
8020d3c4:	df000a15 	stw	fp,40(sp)
8020d3c8:	ddc00915 	stw	r23,36(sp)
8020d3cc:	dd800815 	stw	r22,32(sp)
8020d3d0:	dcc00515 	stw	r19,20(sp)
8020d3d4:	dc800415 	stw	r18,16(sp)
8020d3d8:	dc400315 	stw	r17,12(sp)
8020d3dc:	1880020c 	andi	r2,r3,8
8020d3e0:	2821883a 	mov	r16,r5
8020d3e4:	202b883a 	mov	r21,r4
8020d3e8:	3029883a 	mov	r20,r6
8020d3ec:	10002726 	beq	r2,zero,8020d48c <__sfvwrite_r+0xe8>
8020d3f0:	28800417 	ldw	r2,16(r5)
8020d3f4:	10002526 	beq	r2,zero,8020d48c <__sfvwrite_r+0xe8>
8020d3f8:	1880008c 	andi	r2,r3,2
8020d3fc:	a4400017 	ldw	r17,0(r20)
8020d400:	10002a26 	beq	r2,zero,8020d4ac <__sfvwrite_r+0x108>
8020d404:	05a00034 	movhi	r22,32768
8020d408:	0027883a 	mov	r19,zero
8020d40c:	0025883a 	mov	r18,zero
8020d410:	b5bf0004 	addi	r22,r22,-1024
8020d414:	980d883a 	mov	r6,r19
8020d418:	a809883a 	mov	r4,r21
8020d41c:	90004626 	beq	r18,zero,8020d538 <__sfvwrite_r+0x194>
8020d420:	900f883a 	mov	r7,r18
8020d424:	b480022e 	bgeu	r22,r18,8020d430 <__sfvwrite_r+0x8c>
8020d428:	01e00034 	movhi	r7,32768
8020d42c:	39ff0004 	addi	r7,r7,-1024
8020d430:	80800917 	ldw	r2,36(r16)
8020d434:	81400717 	ldw	r5,28(r16)
8020d438:	103ee83a 	callr	r2
8020d43c:	0080570e 	bge	zero,r2,8020d59c <__sfvwrite_r+0x1f8>
8020d440:	a0c00217 	ldw	r3,8(r20)
8020d444:	98a7883a 	add	r19,r19,r2
8020d448:	90a5c83a 	sub	r18,r18,r2
8020d44c:	1885c83a 	sub	r2,r3,r2
8020d450:	a0800215 	stw	r2,8(r20)
8020d454:	103fef1e 	bne	r2,zero,8020d414 <__reset+0xfa1ed414>
8020d458:	0005883a 	mov	r2,zero
8020d45c:	dfc00b17 	ldw	ra,44(sp)
8020d460:	df000a17 	ldw	fp,40(sp)
8020d464:	ddc00917 	ldw	r23,36(sp)
8020d468:	dd800817 	ldw	r22,32(sp)
8020d46c:	dd400717 	ldw	r21,28(sp)
8020d470:	dd000617 	ldw	r20,24(sp)
8020d474:	dcc00517 	ldw	r19,20(sp)
8020d478:	dc800417 	ldw	r18,16(sp)
8020d47c:	dc400317 	ldw	r17,12(sp)
8020d480:	dc000217 	ldw	r16,8(sp)
8020d484:	dec00c04 	addi	sp,sp,48
8020d488:	f800283a 	ret
8020d48c:	800b883a 	mov	r5,r16
8020d490:	a809883a 	mov	r4,r21
8020d494:	020af4c0 	call	8020af4c <__swsetup_r>
8020d498:	1000eb1e 	bne	r2,zero,8020d848 <__sfvwrite_r+0x4a4>
8020d49c:	80c0030b 	ldhu	r3,12(r16)
8020d4a0:	a4400017 	ldw	r17,0(r20)
8020d4a4:	1880008c 	andi	r2,r3,2
8020d4a8:	103fd61e 	bne	r2,zero,8020d404 <__reset+0xfa1ed404>
8020d4ac:	1880004c 	andi	r2,r3,1
8020d4b0:	10003f1e 	bne	r2,zero,8020d5b0 <__sfvwrite_r+0x20c>
8020d4b4:	0039883a 	mov	fp,zero
8020d4b8:	0025883a 	mov	r18,zero
8020d4bc:	90001a26 	beq	r18,zero,8020d528 <__sfvwrite_r+0x184>
8020d4c0:	1880800c 	andi	r2,r3,512
8020d4c4:	84c00217 	ldw	r19,8(r16)
8020d4c8:	10002126 	beq	r2,zero,8020d550 <__sfvwrite_r+0x1ac>
8020d4cc:	982f883a 	mov	r23,r19
8020d4d0:	94c09336 	bltu	r18,r19,8020d720 <__sfvwrite_r+0x37c>
8020d4d4:	1881200c 	andi	r2,r3,1152
8020d4d8:	10009e1e 	bne	r2,zero,8020d754 <__sfvwrite_r+0x3b0>
8020d4dc:	81000017 	ldw	r4,0(r16)
8020d4e0:	b80d883a 	mov	r6,r23
8020d4e4:	e00b883a 	mov	r5,fp
8020d4e8:	020e5700 	call	8020e570 <memmove>
8020d4ec:	80c00217 	ldw	r3,8(r16)
8020d4f0:	81000017 	ldw	r4,0(r16)
8020d4f4:	9005883a 	mov	r2,r18
8020d4f8:	1ce7c83a 	sub	r19,r3,r19
8020d4fc:	25cf883a 	add	r7,r4,r23
8020d500:	84c00215 	stw	r19,8(r16)
8020d504:	81c00015 	stw	r7,0(r16)
8020d508:	a0c00217 	ldw	r3,8(r20)
8020d50c:	e0b9883a 	add	fp,fp,r2
8020d510:	90a5c83a 	sub	r18,r18,r2
8020d514:	18a7c83a 	sub	r19,r3,r2
8020d518:	a4c00215 	stw	r19,8(r20)
8020d51c:	983fce26 	beq	r19,zero,8020d458 <__reset+0xfa1ed458>
8020d520:	80c0030b 	ldhu	r3,12(r16)
8020d524:	903fe61e 	bne	r18,zero,8020d4c0 <__reset+0xfa1ed4c0>
8020d528:	8f000017 	ldw	fp,0(r17)
8020d52c:	8c800117 	ldw	r18,4(r17)
8020d530:	8c400204 	addi	r17,r17,8
8020d534:	003fe106 	br	8020d4bc <__reset+0xfa1ed4bc>
8020d538:	8cc00017 	ldw	r19,0(r17)
8020d53c:	8c800117 	ldw	r18,4(r17)
8020d540:	8c400204 	addi	r17,r17,8
8020d544:	003fb306 	br	8020d414 <__reset+0xfa1ed414>
8020d548:	0005883a 	mov	r2,zero
8020d54c:	f800283a 	ret
8020d550:	81000017 	ldw	r4,0(r16)
8020d554:	80800417 	ldw	r2,16(r16)
8020d558:	11005736 	bltu	r2,r4,8020d6b8 <__sfvwrite_r+0x314>
8020d55c:	85c00517 	ldw	r23,20(r16)
8020d560:	95c05536 	bltu	r18,r23,8020d6b8 <__sfvwrite_r+0x314>
8020d564:	00a00034 	movhi	r2,32768
8020d568:	10bfffc4 	addi	r2,r2,-1
8020d56c:	9009883a 	mov	r4,r18
8020d570:	1480012e 	bgeu	r2,r18,8020d578 <__sfvwrite_r+0x1d4>
8020d574:	1009883a 	mov	r4,r2
8020d578:	b80b883a 	mov	r5,r23
8020d57c:	0213e6c0 	call	80213e6c <__divsi3>
8020d580:	15cf383a 	mul	r7,r2,r23
8020d584:	81400717 	ldw	r5,28(r16)
8020d588:	80800917 	ldw	r2,36(r16)
8020d58c:	e00d883a 	mov	r6,fp
8020d590:	a809883a 	mov	r4,r21
8020d594:	103ee83a 	callr	r2
8020d598:	00bfdb16 	blt	zero,r2,8020d508 <__reset+0xfa1ed508>
8020d59c:	8080030b 	ldhu	r2,12(r16)
8020d5a0:	10801014 	ori	r2,r2,64
8020d5a4:	8080030d 	sth	r2,12(r16)
8020d5a8:	00bfffc4 	movi	r2,-1
8020d5ac:	003fab06 	br	8020d45c <__reset+0xfa1ed45c>
8020d5b0:	0027883a 	mov	r19,zero
8020d5b4:	0011883a 	mov	r8,zero
8020d5b8:	0039883a 	mov	fp,zero
8020d5bc:	0025883a 	mov	r18,zero
8020d5c0:	90001f26 	beq	r18,zero,8020d640 <__sfvwrite_r+0x29c>
8020d5c4:	40005a26 	beq	r8,zero,8020d730 <__sfvwrite_r+0x38c>
8020d5c8:	982d883a 	mov	r22,r19
8020d5cc:	94c0012e 	bgeu	r18,r19,8020d5d4 <__sfvwrite_r+0x230>
8020d5d0:	902d883a 	mov	r22,r18
8020d5d4:	81000017 	ldw	r4,0(r16)
8020d5d8:	80800417 	ldw	r2,16(r16)
8020d5dc:	b02f883a 	mov	r23,r22
8020d5e0:	81c00517 	ldw	r7,20(r16)
8020d5e4:	1100032e 	bgeu	r2,r4,8020d5f4 <__sfvwrite_r+0x250>
8020d5e8:	80c00217 	ldw	r3,8(r16)
8020d5ec:	38c7883a 	add	r3,r7,r3
8020d5f0:	1d801816 	blt	r3,r22,8020d654 <__sfvwrite_r+0x2b0>
8020d5f4:	b1c03e16 	blt	r22,r7,8020d6f0 <__sfvwrite_r+0x34c>
8020d5f8:	80800917 	ldw	r2,36(r16)
8020d5fc:	81400717 	ldw	r5,28(r16)
8020d600:	e00d883a 	mov	r6,fp
8020d604:	da000115 	stw	r8,4(sp)
8020d608:	a809883a 	mov	r4,r21
8020d60c:	103ee83a 	callr	r2
8020d610:	102f883a 	mov	r23,r2
8020d614:	da000117 	ldw	r8,4(sp)
8020d618:	00bfe00e 	bge	zero,r2,8020d59c <__reset+0xfa1ed59c>
8020d61c:	9de7c83a 	sub	r19,r19,r23
8020d620:	98001f26 	beq	r19,zero,8020d6a0 <__sfvwrite_r+0x2fc>
8020d624:	a0800217 	ldw	r2,8(r20)
8020d628:	e5f9883a 	add	fp,fp,r23
8020d62c:	95e5c83a 	sub	r18,r18,r23
8020d630:	15efc83a 	sub	r23,r2,r23
8020d634:	a5c00215 	stw	r23,8(r20)
8020d638:	b83f8726 	beq	r23,zero,8020d458 <__reset+0xfa1ed458>
8020d63c:	903fe11e 	bne	r18,zero,8020d5c4 <__reset+0xfa1ed5c4>
8020d640:	8f000017 	ldw	fp,0(r17)
8020d644:	8c800117 	ldw	r18,4(r17)
8020d648:	0011883a 	mov	r8,zero
8020d64c:	8c400204 	addi	r17,r17,8
8020d650:	003fdb06 	br	8020d5c0 <__reset+0xfa1ed5c0>
8020d654:	180d883a 	mov	r6,r3
8020d658:	e00b883a 	mov	r5,fp
8020d65c:	da000115 	stw	r8,4(sp)
8020d660:	d8c00015 	stw	r3,0(sp)
8020d664:	020e5700 	call	8020e570 <memmove>
8020d668:	d8c00017 	ldw	r3,0(sp)
8020d66c:	80800017 	ldw	r2,0(r16)
8020d670:	800b883a 	mov	r5,r16
8020d674:	a809883a 	mov	r4,r21
8020d678:	10c5883a 	add	r2,r2,r3
8020d67c:	80800015 	stw	r2,0(r16)
8020d680:	d8c00015 	stw	r3,0(sp)
8020d684:	020cb440 	call	8020cb44 <_fflush_r>
8020d688:	d8c00017 	ldw	r3,0(sp)
8020d68c:	da000117 	ldw	r8,4(sp)
8020d690:	103fc21e 	bne	r2,zero,8020d59c <__reset+0xfa1ed59c>
8020d694:	182f883a 	mov	r23,r3
8020d698:	9de7c83a 	sub	r19,r19,r23
8020d69c:	983fe11e 	bne	r19,zero,8020d624 <__reset+0xfa1ed624>
8020d6a0:	800b883a 	mov	r5,r16
8020d6a4:	a809883a 	mov	r4,r21
8020d6a8:	020cb440 	call	8020cb44 <_fflush_r>
8020d6ac:	103fbb1e 	bne	r2,zero,8020d59c <__reset+0xfa1ed59c>
8020d6b0:	0011883a 	mov	r8,zero
8020d6b4:	003fdb06 	br	8020d624 <__reset+0xfa1ed624>
8020d6b8:	94c0012e 	bgeu	r18,r19,8020d6c0 <__sfvwrite_r+0x31c>
8020d6bc:	9027883a 	mov	r19,r18
8020d6c0:	980d883a 	mov	r6,r19
8020d6c4:	e00b883a 	mov	r5,fp
8020d6c8:	020e5700 	call	8020e570 <memmove>
8020d6cc:	80800217 	ldw	r2,8(r16)
8020d6d0:	80c00017 	ldw	r3,0(r16)
8020d6d4:	14c5c83a 	sub	r2,r2,r19
8020d6d8:	1cc7883a 	add	r3,r3,r19
8020d6dc:	80800215 	stw	r2,8(r16)
8020d6e0:	80c00015 	stw	r3,0(r16)
8020d6e4:	10004326 	beq	r2,zero,8020d7f4 <__sfvwrite_r+0x450>
8020d6e8:	9805883a 	mov	r2,r19
8020d6ec:	003f8606 	br	8020d508 <__reset+0xfa1ed508>
8020d6f0:	b00d883a 	mov	r6,r22
8020d6f4:	e00b883a 	mov	r5,fp
8020d6f8:	da000115 	stw	r8,4(sp)
8020d6fc:	020e5700 	call	8020e570 <memmove>
8020d700:	80800217 	ldw	r2,8(r16)
8020d704:	80c00017 	ldw	r3,0(r16)
8020d708:	da000117 	ldw	r8,4(sp)
8020d70c:	1585c83a 	sub	r2,r2,r22
8020d710:	1dad883a 	add	r22,r3,r22
8020d714:	80800215 	stw	r2,8(r16)
8020d718:	85800015 	stw	r22,0(r16)
8020d71c:	003fbf06 	br	8020d61c <__reset+0xfa1ed61c>
8020d720:	81000017 	ldw	r4,0(r16)
8020d724:	9027883a 	mov	r19,r18
8020d728:	902f883a 	mov	r23,r18
8020d72c:	003f6c06 	br	8020d4e0 <__reset+0xfa1ed4e0>
8020d730:	900d883a 	mov	r6,r18
8020d734:	01400284 	movi	r5,10
8020d738:	e009883a 	mov	r4,fp
8020d73c:	020e48c0 	call	8020e48c <memchr>
8020d740:	10003e26 	beq	r2,zero,8020d83c <__sfvwrite_r+0x498>
8020d744:	10800044 	addi	r2,r2,1
8020d748:	1727c83a 	sub	r19,r2,fp
8020d74c:	02000044 	movi	r8,1
8020d750:	003f9d06 	br	8020d5c8 <__reset+0xfa1ed5c8>
8020d754:	80800517 	ldw	r2,20(r16)
8020d758:	81400417 	ldw	r5,16(r16)
8020d75c:	81c00017 	ldw	r7,0(r16)
8020d760:	10a7883a 	add	r19,r2,r2
8020d764:	9885883a 	add	r2,r19,r2
8020d768:	1026d7fa 	srli	r19,r2,31
8020d76c:	396dc83a 	sub	r22,r7,r5
8020d770:	b1000044 	addi	r4,r22,1
8020d774:	9885883a 	add	r2,r19,r2
8020d778:	1027d07a 	srai	r19,r2,1
8020d77c:	2485883a 	add	r2,r4,r18
8020d780:	980d883a 	mov	r6,r19
8020d784:	9880022e 	bgeu	r19,r2,8020d790 <__sfvwrite_r+0x3ec>
8020d788:	1027883a 	mov	r19,r2
8020d78c:	100d883a 	mov	r6,r2
8020d790:	18c1000c 	andi	r3,r3,1024
8020d794:	18001c26 	beq	r3,zero,8020d808 <__sfvwrite_r+0x464>
8020d798:	300b883a 	mov	r5,r6
8020d79c:	a809883a 	mov	r4,r21
8020d7a0:	020dc800 	call	8020dc80 <_malloc_r>
8020d7a4:	102f883a 	mov	r23,r2
8020d7a8:	10002926 	beq	r2,zero,8020d850 <__sfvwrite_r+0x4ac>
8020d7ac:	81400417 	ldw	r5,16(r16)
8020d7b0:	b00d883a 	mov	r6,r22
8020d7b4:	1009883a 	mov	r4,r2
8020d7b8:	02066c00 	call	802066c0 <memcpy>
8020d7bc:	8080030b 	ldhu	r2,12(r16)
8020d7c0:	00fedfc4 	movi	r3,-1153
8020d7c4:	10c4703a 	and	r2,r2,r3
8020d7c8:	10802014 	ori	r2,r2,128
8020d7cc:	8080030d 	sth	r2,12(r16)
8020d7d0:	bd89883a 	add	r4,r23,r22
8020d7d4:	9d8fc83a 	sub	r7,r19,r22
8020d7d8:	85c00415 	stw	r23,16(r16)
8020d7dc:	84c00515 	stw	r19,20(r16)
8020d7e0:	81000015 	stw	r4,0(r16)
8020d7e4:	9027883a 	mov	r19,r18
8020d7e8:	81c00215 	stw	r7,8(r16)
8020d7ec:	902f883a 	mov	r23,r18
8020d7f0:	003f3b06 	br	8020d4e0 <__reset+0xfa1ed4e0>
8020d7f4:	800b883a 	mov	r5,r16
8020d7f8:	a809883a 	mov	r4,r21
8020d7fc:	020cb440 	call	8020cb44 <_fflush_r>
8020d800:	103fb926 	beq	r2,zero,8020d6e8 <__reset+0xfa1ed6e8>
8020d804:	003f6506 	br	8020d59c <__reset+0xfa1ed59c>
8020d808:	a809883a 	mov	r4,r21
8020d80c:	020f7f00 	call	8020f7f0 <_realloc_r>
8020d810:	102f883a 	mov	r23,r2
8020d814:	103fee1e 	bne	r2,zero,8020d7d0 <__reset+0xfa1ed7d0>
8020d818:	81400417 	ldw	r5,16(r16)
8020d81c:	a809883a 	mov	r4,r21
8020d820:	020d0940 	call	8020d094 <_free_r>
8020d824:	8080030b 	ldhu	r2,12(r16)
8020d828:	00ffdfc4 	movi	r3,-129
8020d82c:	1884703a 	and	r2,r3,r2
8020d830:	00c00304 	movi	r3,12
8020d834:	a8c00015 	stw	r3,0(r21)
8020d838:	003f5906 	br	8020d5a0 <__reset+0xfa1ed5a0>
8020d83c:	94c00044 	addi	r19,r18,1
8020d840:	02000044 	movi	r8,1
8020d844:	003f6006 	br	8020d5c8 <__reset+0xfa1ed5c8>
8020d848:	00bfffc4 	movi	r2,-1
8020d84c:	003f0306 	br	8020d45c <__reset+0xfa1ed45c>
8020d850:	00800304 	movi	r2,12
8020d854:	a8800015 	stw	r2,0(r21)
8020d858:	8080030b 	ldhu	r2,12(r16)
8020d85c:	003f5006 	br	8020d5a0 <__reset+0xfa1ed5a0>

8020d860 <_fwalk>:
8020d860:	defff704 	addi	sp,sp,-36
8020d864:	dd000415 	stw	r20,16(sp)
8020d868:	dfc00815 	stw	ra,32(sp)
8020d86c:	ddc00715 	stw	r23,28(sp)
8020d870:	dd800615 	stw	r22,24(sp)
8020d874:	dd400515 	stw	r21,20(sp)
8020d878:	dcc00315 	stw	r19,12(sp)
8020d87c:	dc800215 	stw	r18,8(sp)
8020d880:	dc400115 	stw	r17,4(sp)
8020d884:	dc000015 	stw	r16,0(sp)
8020d888:	2500b804 	addi	r20,r4,736
8020d88c:	a0002326 	beq	r20,zero,8020d91c <_fwalk+0xbc>
8020d890:	282b883a 	mov	r21,r5
8020d894:	002f883a 	mov	r23,zero
8020d898:	05800044 	movi	r22,1
8020d89c:	04ffffc4 	movi	r19,-1
8020d8a0:	a4400117 	ldw	r17,4(r20)
8020d8a4:	a4800217 	ldw	r18,8(r20)
8020d8a8:	8c7fffc4 	addi	r17,r17,-1
8020d8ac:	88000d16 	blt	r17,zero,8020d8e4 <_fwalk+0x84>
8020d8b0:	94000304 	addi	r16,r18,12
8020d8b4:	94800384 	addi	r18,r18,14
8020d8b8:	8080000b 	ldhu	r2,0(r16)
8020d8bc:	8c7fffc4 	addi	r17,r17,-1
8020d8c0:	813ffd04 	addi	r4,r16,-12
8020d8c4:	b080042e 	bgeu	r22,r2,8020d8d8 <_fwalk+0x78>
8020d8c8:	9080000f 	ldh	r2,0(r18)
8020d8cc:	14c00226 	beq	r2,r19,8020d8d8 <_fwalk+0x78>
8020d8d0:	a83ee83a 	callr	r21
8020d8d4:	b8aeb03a 	or	r23,r23,r2
8020d8d8:	84001a04 	addi	r16,r16,104
8020d8dc:	94801a04 	addi	r18,r18,104
8020d8e0:	8cfff51e 	bne	r17,r19,8020d8b8 <__reset+0xfa1ed8b8>
8020d8e4:	a5000017 	ldw	r20,0(r20)
8020d8e8:	a03fed1e 	bne	r20,zero,8020d8a0 <__reset+0xfa1ed8a0>
8020d8ec:	b805883a 	mov	r2,r23
8020d8f0:	dfc00817 	ldw	ra,32(sp)
8020d8f4:	ddc00717 	ldw	r23,28(sp)
8020d8f8:	dd800617 	ldw	r22,24(sp)
8020d8fc:	dd400517 	ldw	r21,20(sp)
8020d900:	dd000417 	ldw	r20,16(sp)
8020d904:	dcc00317 	ldw	r19,12(sp)
8020d908:	dc800217 	ldw	r18,8(sp)
8020d90c:	dc400117 	ldw	r17,4(sp)
8020d910:	dc000017 	ldw	r16,0(sp)
8020d914:	dec00904 	addi	sp,sp,36
8020d918:	f800283a 	ret
8020d91c:	002f883a 	mov	r23,zero
8020d920:	003ff206 	br	8020d8ec <__reset+0xfa1ed8ec>

8020d924 <_fwalk_reent>:
8020d924:	defff704 	addi	sp,sp,-36
8020d928:	dd000415 	stw	r20,16(sp)
8020d92c:	dfc00815 	stw	ra,32(sp)
8020d930:	ddc00715 	stw	r23,28(sp)
8020d934:	dd800615 	stw	r22,24(sp)
8020d938:	dd400515 	stw	r21,20(sp)
8020d93c:	dcc00315 	stw	r19,12(sp)
8020d940:	dc800215 	stw	r18,8(sp)
8020d944:	dc400115 	stw	r17,4(sp)
8020d948:	dc000015 	stw	r16,0(sp)
8020d94c:	2500b804 	addi	r20,r4,736
8020d950:	a0002326 	beq	r20,zero,8020d9e0 <_fwalk_reent+0xbc>
8020d954:	282b883a 	mov	r21,r5
8020d958:	2027883a 	mov	r19,r4
8020d95c:	002f883a 	mov	r23,zero
8020d960:	05800044 	movi	r22,1
8020d964:	04bfffc4 	movi	r18,-1
8020d968:	a4400117 	ldw	r17,4(r20)
8020d96c:	a4000217 	ldw	r16,8(r20)
8020d970:	8c7fffc4 	addi	r17,r17,-1
8020d974:	88000c16 	blt	r17,zero,8020d9a8 <_fwalk_reent+0x84>
8020d978:	84000304 	addi	r16,r16,12
8020d97c:	8080000b 	ldhu	r2,0(r16)
8020d980:	8c7fffc4 	addi	r17,r17,-1
8020d984:	817ffd04 	addi	r5,r16,-12
8020d988:	b080052e 	bgeu	r22,r2,8020d9a0 <_fwalk_reent+0x7c>
8020d98c:	8080008f 	ldh	r2,2(r16)
8020d990:	9809883a 	mov	r4,r19
8020d994:	14800226 	beq	r2,r18,8020d9a0 <_fwalk_reent+0x7c>
8020d998:	a83ee83a 	callr	r21
8020d99c:	b8aeb03a 	or	r23,r23,r2
8020d9a0:	84001a04 	addi	r16,r16,104
8020d9a4:	8cbff51e 	bne	r17,r18,8020d97c <__reset+0xfa1ed97c>
8020d9a8:	a5000017 	ldw	r20,0(r20)
8020d9ac:	a03fee1e 	bne	r20,zero,8020d968 <__reset+0xfa1ed968>
8020d9b0:	b805883a 	mov	r2,r23
8020d9b4:	dfc00817 	ldw	ra,32(sp)
8020d9b8:	ddc00717 	ldw	r23,28(sp)
8020d9bc:	dd800617 	ldw	r22,24(sp)
8020d9c0:	dd400517 	ldw	r21,20(sp)
8020d9c4:	dd000417 	ldw	r20,16(sp)
8020d9c8:	dcc00317 	ldw	r19,12(sp)
8020d9cc:	dc800217 	ldw	r18,8(sp)
8020d9d0:	dc400117 	ldw	r17,4(sp)
8020d9d4:	dc000017 	ldw	r16,0(sp)
8020d9d8:	dec00904 	addi	sp,sp,36
8020d9dc:	f800283a 	ret
8020d9e0:	002f883a 	mov	r23,zero
8020d9e4:	003ff206 	br	8020d9b0 <__reset+0xfa1ed9b0>

8020d9e8 <_setlocale_r>:
8020d9e8:	30001b26 	beq	r6,zero,8020da58 <_setlocale_r+0x70>
8020d9ec:	016008b4 	movhi	r5,32802
8020d9f0:	defffe04 	addi	sp,sp,-8
8020d9f4:	2972b404 	addi	r5,r5,-13616
8020d9f8:	3009883a 	mov	r4,r6
8020d9fc:	dc000015 	stw	r16,0(sp)
8020da00:	dfc00115 	stw	ra,4(sp)
8020da04:	3021883a 	mov	r16,r6
8020da08:	020ff580 	call	8020ff58 <strcmp>
8020da0c:	1000061e 	bne	r2,zero,8020da28 <_setlocale_r+0x40>
8020da10:	00a008b4 	movhi	r2,32802
8020da14:	10b28d04 	addi	r2,r2,-13772
8020da18:	dfc00117 	ldw	ra,4(sp)
8020da1c:	dc000017 	ldw	r16,0(sp)
8020da20:	dec00204 	addi	sp,sp,8
8020da24:	f800283a 	ret
8020da28:	016008b4 	movhi	r5,32802
8020da2c:	29728d04 	addi	r5,r5,-13772
8020da30:	8009883a 	mov	r4,r16
8020da34:	020ff580 	call	8020ff58 <strcmp>
8020da38:	103ff526 	beq	r2,zero,8020da10 <__reset+0xfa1eda10>
8020da3c:	016008b4 	movhi	r5,32802
8020da40:	29729704 	addi	r5,r5,-13732
8020da44:	8009883a 	mov	r4,r16
8020da48:	020ff580 	call	8020ff58 <strcmp>
8020da4c:	103ff026 	beq	r2,zero,8020da10 <__reset+0xfa1eda10>
8020da50:	0005883a 	mov	r2,zero
8020da54:	003ff006 	br	8020da18 <__reset+0xfa1eda18>
8020da58:	00a008b4 	movhi	r2,32802
8020da5c:	10b28d04 	addi	r2,r2,-13772
8020da60:	f800283a 	ret

8020da64 <__locale_charset>:
8020da64:	00a008b4 	movhi	r2,32802
8020da68:	10b4c904 	addi	r2,r2,-11484
8020da6c:	f800283a 	ret

8020da70 <__locale_mb_cur_max>:
8020da70:	00a008b4 	movhi	r2,32802
8020da74:	10bad604 	addi	r2,r2,-5288
8020da78:	10800017 	ldw	r2,0(r2)
8020da7c:	f800283a 	ret

8020da80 <__locale_msgcharset>:
8020da80:	00a008b4 	movhi	r2,32802
8020da84:	10b4c104 	addi	r2,r2,-11516
8020da88:	f800283a 	ret

8020da8c <__locale_cjk_lang>:
8020da8c:	0005883a 	mov	r2,zero
8020da90:	f800283a 	ret

8020da94 <_localeconv_r>:
8020da94:	00a008b4 	movhi	r2,32802
8020da98:	10b4d104 	addi	r2,r2,-11452
8020da9c:	f800283a 	ret

8020daa0 <setlocale>:
8020daa0:	00a008b4 	movhi	r2,32802
8020daa4:	10bad504 	addi	r2,r2,-5292
8020daa8:	280d883a 	mov	r6,r5
8020daac:	200b883a 	mov	r5,r4
8020dab0:	11000017 	ldw	r4,0(r2)
8020dab4:	020d9e81 	jmpi	8020d9e8 <_setlocale_r>

8020dab8 <localeconv>:
8020dab8:	00a008b4 	movhi	r2,32802
8020dabc:	10b4d104 	addi	r2,r2,-11452
8020dac0:	f800283a 	ret

8020dac4 <__smakebuf_r>:
8020dac4:	2880030b 	ldhu	r2,12(r5)
8020dac8:	10c0008c 	andi	r3,r2,2
8020dacc:	1800411e 	bne	r3,zero,8020dbd4 <__smakebuf_r+0x110>
8020dad0:	deffec04 	addi	sp,sp,-80
8020dad4:	dc000f15 	stw	r16,60(sp)
8020dad8:	2821883a 	mov	r16,r5
8020dadc:	2940038f 	ldh	r5,14(r5)
8020dae0:	dc401015 	stw	r17,64(sp)
8020dae4:	dfc01315 	stw	ra,76(sp)
8020dae8:	dcc01215 	stw	r19,72(sp)
8020daec:	dc801115 	stw	r18,68(sp)
8020daf0:	2023883a 	mov	r17,r4
8020daf4:	28001c16 	blt	r5,zero,8020db68 <__smakebuf_r+0xa4>
8020daf8:	d80d883a 	mov	r6,sp
8020dafc:	0212f0c0 	call	80212f0c <_fstat_r>
8020db00:	10001816 	blt	r2,zero,8020db64 <__smakebuf_r+0xa0>
8020db04:	d8800117 	ldw	r2,4(sp)
8020db08:	00e00014 	movui	r3,32768
8020db0c:	10bc000c 	andi	r2,r2,61440
8020db10:	14c80020 	cmpeqi	r19,r2,8192
8020db14:	10c03726 	beq	r2,r3,8020dbf4 <__smakebuf_r+0x130>
8020db18:	80c0030b 	ldhu	r3,12(r16)
8020db1c:	18c20014 	ori	r3,r3,2048
8020db20:	80c0030d 	sth	r3,12(r16)
8020db24:	00c80004 	movi	r3,8192
8020db28:	10c0521e 	bne	r2,r3,8020dc74 <__smakebuf_r+0x1b0>
8020db2c:	8140038f 	ldh	r5,14(r16)
8020db30:	8809883a 	mov	r4,r17
8020db34:	0212f680 	call	80212f68 <_isatty_r>
8020db38:	10004c26 	beq	r2,zero,8020dc6c <__smakebuf_r+0x1a8>
8020db3c:	8080030b 	ldhu	r2,12(r16)
8020db40:	80c010c4 	addi	r3,r16,67
8020db44:	80c00015 	stw	r3,0(r16)
8020db48:	10800054 	ori	r2,r2,1
8020db4c:	8080030d 	sth	r2,12(r16)
8020db50:	00800044 	movi	r2,1
8020db54:	80c00415 	stw	r3,16(r16)
8020db58:	80800515 	stw	r2,20(r16)
8020db5c:	04810004 	movi	r18,1024
8020db60:	00000706 	br	8020db80 <__smakebuf_r+0xbc>
8020db64:	8080030b 	ldhu	r2,12(r16)
8020db68:	10c0200c 	andi	r3,r2,128
8020db6c:	18001f1e 	bne	r3,zero,8020dbec <__smakebuf_r+0x128>
8020db70:	04810004 	movi	r18,1024
8020db74:	10820014 	ori	r2,r2,2048
8020db78:	8080030d 	sth	r2,12(r16)
8020db7c:	0027883a 	mov	r19,zero
8020db80:	900b883a 	mov	r5,r18
8020db84:	8809883a 	mov	r4,r17
8020db88:	020dc800 	call	8020dc80 <_malloc_r>
8020db8c:	10002c26 	beq	r2,zero,8020dc40 <__smakebuf_r+0x17c>
8020db90:	80c0030b 	ldhu	r3,12(r16)
8020db94:	01200874 	movhi	r4,32801
8020db98:	2132f604 	addi	r4,r4,-13352
8020db9c:	89000f15 	stw	r4,60(r17)
8020dba0:	18c02014 	ori	r3,r3,128
8020dba4:	80c0030d 	sth	r3,12(r16)
8020dba8:	80800015 	stw	r2,0(r16)
8020dbac:	80800415 	stw	r2,16(r16)
8020dbb0:	84800515 	stw	r18,20(r16)
8020dbb4:	98001a1e 	bne	r19,zero,8020dc20 <__smakebuf_r+0x15c>
8020dbb8:	dfc01317 	ldw	ra,76(sp)
8020dbbc:	dcc01217 	ldw	r19,72(sp)
8020dbc0:	dc801117 	ldw	r18,68(sp)
8020dbc4:	dc401017 	ldw	r17,64(sp)
8020dbc8:	dc000f17 	ldw	r16,60(sp)
8020dbcc:	dec01404 	addi	sp,sp,80
8020dbd0:	f800283a 	ret
8020dbd4:	288010c4 	addi	r2,r5,67
8020dbd8:	28800015 	stw	r2,0(r5)
8020dbdc:	28800415 	stw	r2,16(r5)
8020dbe0:	00800044 	movi	r2,1
8020dbe4:	28800515 	stw	r2,20(r5)
8020dbe8:	f800283a 	ret
8020dbec:	04801004 	movi	r18,64
8020dbf0:	003fe006 	br	8020db74 <__reset+0xfa1edb74>
8020dbf4:	81000a17 	ldw	r4,40(r16)
8020dbf8:	00e00874 	movhi	r3,32801
8020dbfc:	18ffbd04 	addi	r3,r3,-268
8020dc00:	20ffc51e 	bne	r4,r3,8020db18 <__reset+0xfa1edb18>
8020dc04:	8080030b 	ldhu	r2,12(r16)
8020dc08:	04810004 	movi	r18,1024
8020dc0c:	84801315 	stw	r18,76(r16)
8020dc10:	1484b03a 	or	r2,r2,r18
8020dc14:	8080030d 	sth	r2,12(r16)
8020dc18:	0027883a 	mov	r19,zero
8020dc1c:	003fd806 	br	8020db80 <__reset+0xfa1edb80>
8020dc20:	8140038f 	ldh	r5,14(r16)
8020dc24:	8809883a 	mov	r4,r17
8020dc28:	0212f680 	call	80212f68 <_isatty_r>
8020dc2c:	103fe226 	beq	r2,zero,8020dbb8 <__reset+0xfa1edbb8>
8020dc30:	8080030b 	ldhu	r2,12(r16)
8020dc34:	10800054 	ori	r2,r2,1
8020dc38:	8080030d 	sth	r2,12(r16)
8020dc3c:	003fde06 	br	8020dbb8 <__reset+0xfa1edbb8>
8020dc40:	8080030b 	ldhu	r2,12(r16)
8020dc44:	10c0800c 	andi	r3,r2,512
8020dc48:	183fdb1e 	bne	r3,zero,8020dbb8 <__reset+0xfa1edbb8>
8020dc4c:	10800094 	ori	r2,r2,2
8020dc50:	80c010c4 	addi	r3,r16,67
8020dc54:	8080030d 	sth	r2,12(r16)
8020dc58:	00800044 	movi	r2,1
8020dc5c:	80c00015 	stw	r3,0(r16)
8020dc60:	80c00415 	stw	r3,16(r16)
8020dc64:	80800515 	stw	r2,20(r16)
8020dc68:	003fd306 	br	8020dbb8 <__reset+0xfa1edbb8>
8020dc6c:	04810004 	movi	r18,1024
8020dc70:	003fc306 	br	8020db80 <__reset+0xfa1edb80>
8020dc74:	0027883a 	mov	r19,zero
8020dc78:	04810004 	movi	r18,1024
8020dc7c:	003fc006 	br	8020db80 <__reset+0xfa1edb80>

8020dc80 <_malloc_r>:
8020dc80:	defff504 	addi	sp,sp,-44
8020dc84:	dc800315 	stw	r18,12(sp)
8020dc88:	dfc00a15 	stw	ra,40(sp)
8020dc8c:	df000915 	stw	fp,36(sp)
8020dc90:	ddc00815 	stw	r23,32(sp)
8020dc94:	dd800715 	stw	r22,28(sp)
8020dc98:	dd400615 	stw	r21,24(sp)
8020dc9c:	dd000515 	stw	r20,20(sp)
8020dca0:	dcc00415 	stw	r19,16(sp)
8020dca4:	dc400215 	stw	r17,8(sp)
8020dca8:	dc000115 	stw	r16,4(sp)
8020dcac:	288002c4 	addi	r2,r5,11
8020dcb0:	00c00584 	movi	r3,22
8020dcb4:	2025883a 	mov	r18,r4
8020dcb8:	18807f2e 	bgeu	r3,r2,8020deb8 <_malloc_r+0x238>
8020dcbc:	047ffe04 	movi	r17,-8
8020dcc0:	1462703a 	and	r17,r2,r17
8020dcc4:	8800a316 	blt	r17,zero,8020df54 <_malloc_r+0x2d4>
8020dcc8:	8940a236 	bltu	r17,r5,8020df54 <_malloc_r+0x2d4>
8020dccc:	0216bfc0 	call	80216bfc <__malloc_lock>
8020dcd0:	00807dc4 	movi	r2,503
8020dcd4:	1441e92e 	bgeu	r2,r17,8020e47c <_malloc_r+0x7fc>
8020dcd8:	8804d27a 	srli	r2,r17,9
8020dcdc:	1000a126 	beq	r2,zero,8020df64 <_malloc_r+0x2e4>
8020dce0:	00c00104 	movi	r3,4
8020dce4:	18811e36 	bltu	r3,r2,8020e160 <_malloc_r+0x4e0>
8020dce8:	8804d1ba 	srli	r2,r17,6
8020dcec:	12000e44 	addi	r8,r2,57
8020dcf0:	11c00e04 	addi	r7,r2,56
8020dcf4:	4209883a 	add	r4,r8,r8
8020dcf8:	04e008b4 	movhi	r19,32802
8020dcfc:	2109883a 	add	r4,r4,r4
8020dd00:	9cf4df04 	addi	r19,r19,-11396
8020dd04:	2109883a 	add	r4,r4,r4
8020dd08:	9909883a 	add	r4,r19,r4
8020dd0c:	24000117 	ldw	r16,4(r4)
8020dd10:	213ffe04 	addi	r4,r4,-8
8020dd14:	24009726 	beq	r4,r16,8020df74 <_malloc_r+0x2f4>
8020dd18:	80800117 	ldw	r2,4(r16)
8020dd1c:	01bfff04 	movi	r6,-4
8020dd20:	014003c4 	movi	r5,15
8020dd24:	1184703a 	and	r2,r2,r6
8020dd28:	1447c83a 	sub	r3,r2,r17
8020dd2c:	28c00716 	blt	r5,r3,8020dd4c <_malloc_r+0xcc>
8020dd30:	1800920e 	bge	r3,zero,8020df7c <_malloc_r+0x2fc>
8020dd34:	84000317 	ldw	r16,12(r16)
8020dd38:	24008e26 	beq	r4,r16,8020df74 <_malloc_r+0x2f4>
8020dd3c:	80800117 	ldw	r2,4(r16)
8020dd40:	1184703a 	and	r2,r2,r6
8020dd44:	1447c83a 	sub	r3,r2,r17
8020dd48:	28fff90e 	bge	r5,r3,8020dd30 <__reset+0xfa1edd30>
8020dd4c:	3809883a 	mov	r4,r7
8020dd50:	01a008b4 	movhi	r6,32802
8020dd54:	9c000417 	ldw	r16,16(r19)
8020dd58:	31b4df04 	addi	r6,r6,-11396
8020dd5c:	32000204 	addi	r8,r6,8
8020dd60:	82013426 	beq	r16,r8,8020e234 <_malloc_r+0x5b4>
8020dd64:	80c00117 	ldw	r3,4(r16)
8020dd68:	00bfff04 	movi	r2,-4
8020dd6c:	188e703a 	and	r7,r3,r2
8020dd70:	3c45c83a 	sub	r2,r7,r17
8020dd74:	00c003c4 	movi	r3,15
8020dd78:	18811f16 	blt	r3,r2,8020e1f8 <_malloc_r+0x578>
8020dd7c:	32000515 	stw	r8,20(r6)
8020dd80:	32000415 	stw	r8,16(r6)
8020dd84:	10007f0e 	bge	r2,zero,8020df84 <_malloc_r+0x304>
8020dd88:	00807fc4 	movi	r2,511
8020dd8c:	11c0fd36 	bltu	r2,r7,8020e184 <_malloc_r+0x504>
8020dd90:	3806d0fa 	srli	r3,r7,3
8020dd94:	01c00044 	movi	r7,1
8020dd98:	30800117 	ldw	r2,4(r6)
8020dd9c:	19400044 	addi	r5,r3,1
8020dda0:	294b883a 	add	r5,r5,r5
8020dda4:	1807d0ba 	srai	r3,r3,2
8020dda8:	294b883a 	add	r5,r5,r5
8020ddac:	294b883a 	add	r5,r5,r5
8020ddb0:	298b883a 	add	r5,r5,r6
8020ddb4:	38c6983a 	sll	r3,r7,r3
8020ddb8:	29c00017 	ldw	r7,0(r5)
8020ddbc:	2a7ffe04 	addi	r9,r5,-8
8020ddc0:	1886b03a 	or	r3,r3,r2
8020ddc4:	82400315 	stw	r9,12(r16)
8020ddc8:	81c00215 	stw	r7,8(r16)
8020ddcc:	30c00115 	stw	r3,4(r6)
8020ddd0:	2c000015 	stw	r16,0(r5)
8020ddd4:	3c000315 	stw	r16,12(r7)
8020ddd8:	2005d0ba 	srai	r2,r4,2
8020dddc:	01400044 	movi	r5,1
8020dde0:	288a983a 	sll	r5,r5,r2
8020dde4:	19406f36 	bltu	r3,r5,8020dfa4 <_malloc_r+0x324>
8020dde8:	28c4703a 	and	r2,r5,r3
8020ddec:	10000a1e 	bne	r2,zero,8020de18 <_malloc_r+0x198>
8020ddf0:	00bfff04 	movi	r2,-4
8020ddf4:	294b883a 	add	r5,r5,r5
8020ddf8:	2088703a 	and	r4,r4,r2
8020ddfc:	28c4703a 	and	r2,r5,r3
8020de00:	21000104 	addi	r4,r4,4
8020de04:	1000041e 	bne	r2,zero,8020de18 <_malloc_r+0x198>
8020de08:	294b883a 	add	r5,r5,r5
8020de0c:	28c4703a 	and	r2,r5,r3
8020de10:	21000104 	addi	r4,r4,4
8020de14:	103ffc26 	beq	r2,zero,8020de08 <__reset+0xfa1ede08>
8020de18:	02bfff04 	movi	r10,-4
8020de1c:	024003c4 	movi	r9,15
8020de20:	21800044 	addi	r6,r4,1
8020de24:	318d883a 	add	r6,r6,r6
8020de28:	318d883a 	add	r6,r6,r6
8020de2c:	318d883a 	add	r6,r6,r6
8020de30:	998d883a 	add	r6,r19,r6
8020de34:	333ffe04 	addi	r12,r6,-8
8020de38:	2017883a 	mov	r11,r4
8020de3c:	31800104 	addi	r6,r6,4
8020de40:	34000017 	ldw	r16,0(r6)
8020de44:	31fffd04 	addi	r7,r6,-12
8020de48:	81c0041e 	bne	r16,r7,8020de5c <_malloc_r+0x1dc>
8020de4c:	0000fb06 	br	8020e23c <_malloc_r+0x5bc>
8020de50:	1801030e 	bge	r3,zero,8020e260 <_malloc_r+0x5e0>
8020de54:	84000317 	ldw	r16,12(r16)
8020de58:	81c0f826 	beq	r16,r7,8020e23c <_malloc_r+0x5bc>
8020de5c:	80800117 	ldw	r2,4(r16)
8020de60:	1284703a 	and	r2,r2,r10
8020de64:	1447c83a 	sub	r3,r2,r17
8020de68:	48fff90e 	bge	r9,r3,8020de50 <__reset+0xfa1ede50>
8020de6c:	80800317 	ldw	r2,12(r16)
8020de70:	81000217 	ldw	r4,8(r16)
8020de74:	89400054 	ori	r5,r17,1
8020de78:	81400115 	stw	r5,4(r16)
8020de7c:	20800315 	stw	r2,12(r4)
8020de80:	11000215 	stw	r4,8(r2)
8020de84:	8463883a 	add	r17,r16,r17
8020de88:	9c400515 	stw	r17,20(r19)
8020de8c:	9c400415 	stw	r17,16(r19)
8020de90:	18800054 	ori	r2,r3,1
8020de94:	88800115 	stw	r2,4(r17)
8020de98:	8a000315 	stw	r8,12(r17)
8020de9c:	8a000215 	stw	r8,8(r17)
8020dea0:	88e3883a 	add	r17,r17,r3
8020dea4:	88c00015 	stw	r3,0(r17)
8020dea8:	9009883a 	mov	r4,r18
8020deac:	0216c200 	call	80216c20 <__malloc_unlock>
8020deb0:	80800204 	addi	r2,r16,8
8020deb4:	00001b06 	br	8020df24 <_malloc_r+0x2a4>
8020deb8:	04400404 	movi	r17,16
8020debc:	89402536 	bltu	r17,r5,8020df54 <_malloc_r+0x2d4>
8020dec0:	0216bfc0 	call	80216bfc <__malloc_lock>
8020dec4:	00800184 	movi	r2,6
8020dec8:	01000084 	movi	r4,2
8020decc:	04e008b4 	movhi	r19,32802
8020ded0:	1085883a 	add	r2,r2,r2
8020ded4:	9cf4df04 	addi	r19,r19,-11396
8020ded8:	1085883a 	add	r2,r2,r2
8020dedc:	9885883a 	add	r2,r19,r2
8020dee0:	14000117 	ldw	r16,4(r2)
8020dee4:	10fffe04 	addi	r3,r2,-8
8020dee8:	80c0d926 	beq	r16,r3,8020e250 <_malloc_r+0x5d0>
8020deec:	80c00117 	ldw	r3,4(r16)
8020def0:	81000317 	ldw	r4,12(r16)
8020def4:	00bfff04 	movi	r2,-4
8020def8:	1884703a 	and	r2,r3,r2
8020defc:	81400217 	ldw	r5,8(r16)
8020df00:	8085883a 	add	r2,r16,r2
8020df04:	10c00117 	ldw	r3,4(r2)
8020df08:	29000315 	stw	r4,12(r5)
8020df0c:	21400215 	stw	r5,8(r4)
8020df10:	18c00054 	ori	r3,r3,1
8020df14:	10c00115 	stw	r3,4(r2)
8020df18:	9009883a 	mov	r4,r18
8020df1c:	0216c200 	call	80216c20 <__malloc_unlock>
8020df20:	80800204 	addi	r2,r16,8
8020df24:	dfc00a17 	ldw	ra,40(sp)
8020df28:	df000917 	ldw	fp,36(sp)
8020df2c:	ddc00817 	ldw	r23,32(sp)
8020df30:	dd800717 	ldw	r22,28(sp)
8020df34:	dd400617 	ldw	r21,24(sp)
8020df38:	dd000517 	ldw	r20,20(sp)
8020df3c:	dcc00417 	ldw	r19,16(sp)
8020df40:	dc800317 	ldw	r18,12(sp)
8020df44:	dc400217 	ldw	r17,8(sp)
8020df48:	dc000117 	ldw	r16,4(sp)
8020df4c:	dec00b04 	addi	sp,sp,44
8020df50:	f800283a 	ret
8020df54:	00800304 	movi	r2,12
8020df58:	90800015 	stw	r2,0(r18)
8020df5c:	0005883a 	mov	r2,zero
8020df60:	003ff006 	br	8020df24 <__reset+0xfa1edf24>
8020df64:	01002004 	movi	r4,128
8020df68:	02001004 	movi	r8,64
8020df6c:	01c00fc4 	movi	r7,63
8020df70:	003f6106 	br	8020dcf8 <__reset+0xfa1edcf8>
8020df74:	4009883a 	mov	r4,r8
8020df78:	003f7506 	br	8020dd50 <__reset+0xfa1edd50>
8020df7c:	81000317 	ldw	r4,12(r16)
8020df80:	003fde06 	br	8020defc <__reset+0xfa1edefc>
8020df84:	81c5883a 	add	r2,r16,r7
8020df88:	11400117 	ldw	r5,4(r2)
8020df8c:	9009883a 	mov	r4,r18
8020df90:	29400054 	ori	r5,r5,1
8020df94:	11400115 	stw	r5,4(r2)
8020df98:	0216c200 	call	80216c20 <__malloc_unlock>
8020df9c:	80800204 	addi	r2,r16,8
8020dfa0:	003fe006 	br	8020df24 <__reset+0xfa1edf24>
8020dfa4:	9c000217 	ldw	r16,8(r19)
8020dfa8:	00bfff04 	movi	r2,-4
8020dfac:	85800117 	ldw	r22,4(r16)
8020dfb0:	b0ac703a 	and	r22,r22,r2
8020dfb4:	b4400336 	bltu	r22,r17,8020dfc4 <_malloc_r+0x344>
8020dfb8:	b445c83a 	sub	r2,r22,r17
8020dfbc:	00c003c4 	movi	r3,15
8020dfc0:	18805d16 	blt	r3,r2,8020e138 <_malloc_r+0x4b8>
8020dfc4:	05e008b4 	movhi	r23,32802
8020dfc8:	00a008b4 	movhi	r2,32802
8020dfcc:	10baf304 	addi	r2,r2,-5172
8020dfd0:	bdfad704 	addi	r23,r23,-5284
8020dfd4:	15400017 	ldw	r21,0(r2)
8020dfd8:	b8c00017 	ldw	r3,0(r23)
8020dfdc:	00bfffc4 	movi	r2,-1
8020dfe0:	858d883a 	add	r6,r16,r22
8020dfe4:	8d6b883a 	add	r21,r17,r21
8020dfe8:	1880ea26 	beq	r3,r2,8020e394 <_malloc_r+0x714>
8020dfec:	ad4403c4 	addi	r21,r21,4111
8020dff0:	00bc0004 	movi	r2,-4096
8020dff4:	a8aa703a 	and	r21,r21,r2
8020dff8:	a80b883a 	mov	r5,r21
8020dffc:	9009883a 	mov	r4,r18
8020e000:	d9800015 	stw	r6,0(sp)
8020e004:	020fdc80 	call	8020fdc8 <_sbrk_r>
8020e008:	1029883a 	mov	r20,r2
8020e00c:	00bfffc4 	movi	r2,-1
8020e010:	d9800017 	ldw	r6,0(sp)
8020e014:	a080e826 	beq	r20,r2,8020e3b8 <_malloc_r+0x738>
8020e018:	a180a636 	bltu	r20,r6,8020e2b4 <_malloc_r+0x634>
8020e01c:	072008b4 	movhi	fp,32802
8020e020:	e73afc04 	addi	fp,fp,-5136
8020e024:	e0800017 	ldw	r2,0(fp)
8020e028:	a887883a 	add	r3,r21,r2
8020e02c:	e0c00015 	stw	r3,0(fp)
8020e030:	3500e626 	beq	r6,r20,8020e3cc <_malloc_r+0x74c>
8020e034:	b9000017 	ldw	r4,0(r23)
8020e038:	00bfffc4 	movi	r2,-1
8020e03c:	2080ee26 	beq	r4,r2,8020e3f8 <_malloc_r+0x778>
8020e040:	a185c83a 	sub	r2,r20,r6
8020e044:	10c5883a 	add	r2,r2,r3
8020e048:	e0800015 	stw	r2,0(fp)
8020e04c:	a0c001cc 	andi	r3,r20,7
8020e050:	1800bc26 	beq	r3,zero,8020e344 <_malloc_r+0x6c4>
8020e054:	a0e9c83a 	sub	r20,r20,r3
8020e058:	00840204 	movi	r2,4104
8020e05c:	a5000204 	addi	r20,r20,8
8020e060:	10c7c83a 	sub	r3,r2,r3
8020e064:	a545883a 	add	r2,r20,r21
8020e068:	1083ffcc 	andi	r2,r2,4095
8020e06c:	18abc83a 	sub	r21,r3,r2
8020e070:	a80b883a 	mov	r5,r21
8020e074:	9009883a 	mov	r4,r18
8020e078:	020fdc80 	call	8020fdc8 <_sbrk_r>
8020e07c:	00ffffc4 	movi	r3,-1
8020e080:	10c0e126 	beq	r2,r3,8020e408 <_malloc_r+0x788>
8020e084:	1505c83a 	sub	r2,r2,r20
8020e088:	1545883a 	add	r2,r2,r21
8020e08c:	10800054 	ori	r2,r2,1
8020e090:	e0c00017 	ldw	r3,0(fp)
8020e094:	9d000215 	stw	r20,8(r19)
8020e098:	a0800115 	stw	r2,4(r20)
8020e09c:	a8c7883a 	add	r3,r21,r3
8020e0a0:	e0c00015 	stw	r3,0(fp)
8020e0a4:	84c00e26 	beq	r16,r19,8020e0e0 <_malloc_r+0x460>
8020e0a8:	018003c4 	movi	r6,15
8020e0ac:	3580a72e 	bgeu	r6,r22,8020e34c <_malloc_r+0x6cc>
8020e0b0:	81400117 	ldw	r5,4(r16)
8020e0b4:	013ffe04 	movi	r4,-8
8020e0b8:	b0bffd04 	addi	r2,r22,-12
8020e0bc:	1104703a 	and	r2,r2,r4
8020e0c0:	2900004c 	andi	r4,r5,1
8020e0c4:	2088b03a 	or	r4,r4,r2
8020e0c8:	81000115 	stw	r4,4(r16)
8020e0cc:	01400144 	movi	r5,5
8020e0d0:	8089883a 	add	r4,r16,r2
8020e0d4:	21400115 	stw	r5,4(r4)
8020e0d8:	21400215 	stw	r5,8(r4)
8020e0dc:	3080cd36 	bltu	r6,r2,8020e414 <_malloc_r+0x794>
8020e0e0:	00a008b4 	movhi	r2,32802
8020e0e4:	10baf204 	addi	r2,r2,-5176
8020e0e8:	11000017 	ldw	r4,0(r2)
8020e0ec:	20c0012e 	bgeu	r4,r3,8020e0f4 <_malloc_r+0x474>
8020e0f0:	10c00015 	stw	r3,0(r2)
8020e0f4:	00a008b4 	movhi	r2,32802
8020e0f8:	10baf104 	addi	r2,r2,-5180
8020e0fc:	11000017 	ldw	r4,0(r2)
8020e100:	9c000217 	ldw	r16,8(r19)
8020e104:	20c0012e 	bgeu	r4,r3,8020e10c <_malloc_r+0x48c>
8020e108:	10c00015 	stw	r3,0(r2)
8020e10c:	80c00117 	ldw	r3,4(r16)
8020e110:	00bfff04 	movi	r2,-4
8020e114:	1886703a 	and	r3,r3,r2
8020e118:	1c45c83a 	sub	r2,r3,r17
8020e11c:	1c400236 	bltu	r3,r17,8020e128 <_malloc_r+0x4a8>
8020e120:	00c003c4 	movi	r3,15
8020e124:	18800416 	blt	r3,r2,8020e138 <_malloc_r+0x4b8>
8020e128:	9009883a 	mov	r4,r18
8020e12c:	0216c200 	call	80216c20 <__malloc_unlock>
8020e130:	0005883a 	mov	r2,zero
8020e134:	003f7b06 	br	8020df24 <__reset+0xfa1edf24>
8020e138:	88c00054 	ori	r3,r17,1
8020e13c:	80c00115 	stw	r3,4(r16)
8020e140:	8463883a 	add	r17,r16,r17
8020e144:	10800054 	ori	r2,r2,1
8020e148:	9c400215 	stw	r17,8(r19)
8020e14c:	88800115 	stw	r2,4(r17)
8020e150:	9009883a 	mov	r4,r18
8020e154:	0216c200 	call	80216c20 <__malloc_unlock>
8020e158:	80800204 	addi	r2,r16,8
8020e15c:	003f7106 	br	8020df24 <__reset+0xfa1edf24>
8020e160:	00c00504 	movi	r3,20
8020e164:	18804a2e 	bgeu	r3,r2,8020e290 <_malloc_r+0x610>
8020e168:	00c01504 	movi	r3,84
8020e16c:	18806e36 	bltu	r3,r2,8020e328 <_malloc_r+0x6a8>
8020e170:	8804d33a 	srli	r2,r17,12
8020e174:	12001bc4 	addi	r8,r2,111
8020e178:	11c01b84 	addi	r7,r2,110
8020e17c:	4209883a 	add	r4,r8,r8
8020e180:	003edd06 	br	8020dcf8 <__reset+0xfa1edcf8>
8020e184:	3804d27a 	srli	r2,r7,9
8020e188:	00c00104 	movi	r3,4
8020e18c:	1880442e 	bgeu	r3,r2,8020e2a0 <_malloc_r+0x620>
8020e190:	00c00504 	movi	r3,20
8020e194:	18808136 	bltu	r3,r2,8020e39c <_malloc_r+0x71c>
8020e198:	11401704 	addi	r5,r2,92
8020e19c:	10c016c4 	addi	r3,r2,91
8020e1a0:	294b883a 	add	r5,r5,r5
8020e1a4:	294b883a 	add	r5,r5,r5
8020e1a8:	294b883a 	add	r5,r5,r5
8020e1ac:	994b883a 	add	r5,r19,r5
8020e1b0:	28800017 	ldw	r2,0(r5)
8020e1b4:	01a008b4 	movhi	r6,32802
8020e1b8:	297ffe04 	addi	r5,r5,-8
8020e1bc:	31b4df04 	addi	r6,r6,-11396
8020e1c0:	28806526 	beq	r5,r2,8020e358 <_malloc_r+0x6d8>
8020e1c4:	01bfff04 	movi	r6,-4
8020e1c8:	10c00117 	ldw	r3,4(r2)
8020e1cc:	1986703a 	and	r3,r3,r6
8020e1d0:	38c0022e 	bgeu	r7,r3,8020e1dc <_malloc_r+0x55c>
8020e1d4:	10800217 	ldw	r2,8(r2)
8020e1d8:	28bffb1e 	bne	r5,r2,8020e1c8 <__reset+0xfa1ee1c8>
8020e1dc:	11400317 	ldw	r5,12(r2)
8020e1e0:	98c00117 	ldw	r3,4(r19)
8020e1e4:	81400315 	stw	r5,12(r16)
8020e1e8:	80800215 	stw	r2,8(r16)
8020e1ec:	2c000215 	stw	r16,8(r5)
8020e1f0:	14000315 	stw	r16,12(r2)
8020e1f4:	003ef806 	br	8020ddd8 <__reset+0xfa1eddd8>
8020e1f8:	88c00054 	ori	r3,r17,1
8020e1fc:	80c00115 	stw	r3,4(r16)
8020e200:	8463883a 	add	r17,r16,r17
8020e204:	34400515 	stw	r17,20(r6)
8020e208:	34400415 	stw	r17,16(r6)
8020e20c:	10c00054 	ori	r3,r2,1
8020e210:	8a000315 	stw	r8,12(r17)
8020e214:	8a000215 	stw	r8,8(r17)
8020e218:	88c00115 	stw	r3,4(r17)
8020e21c:	88a3883a 	add	r17,r17,r2
8020e220:	88800015 	stw	r2,0(r17)
8020e224:	9009883a 	mov	r4,r18
8020e228:	0216c200 	call	80216c20 <__malloc_unlock>
8020e22c:	80800204 	addi	r2,r16,8
8020e230:	003f3c06 	br	8020df24 <__reset+0xfa1edf24>
8020e234:	30c00117 	ldw	r3,4(r6)
8020e238:	003ee706 	br	8020ddd8 <__reset+0xfa1eddd8>
8020e23c:	5ac00044 	addi	r11,r11,1
8020e240:	588000cc 	andi	r2,r11,3
8020e244:	31800204 	addi	r6,r6,8
8020e248:	103efd1e 	bne	r2,zero,8020de40 <__reset+0xfa1ede40>
8020e24c:	00002406 	br	8020e2e0 <_malloc_r+0x660>
8020e250:	14000317 	ldw	r16,12(r2)
8020e254:	143f251e 	bne	r2,r16,8020deec <__reset+0xfa1edeec>
8020e258:	21000084 	addi	r4,r4,2
8020e25c:	003ebc06 	br	8020dd50 <__reset+0xfa1edd50>
8020e260:	8085883a 	add	r2,r16,r2
8020e264:	10c00117 	ldw	r3,4(r2)
8020e268:	81000317 	ldw	r4,12(r16)
8020e26c:	81400217 	ldw	r5,8(r16)
8020e270:	18c00054 	ori	r3,r3,1
8020e274:	10c00115 	stw	r3,4(r2)
8020e278:	29000315 	stw	r4,12(r5)
8020e27c:	21400215 	stw	r5,8(r4)
8020e280:	9009883a 	mov	r4,r18
8020e284:	0216c200 	call	80216c20 <__malloc_unlock>
8020e288:	80800204 	addi	r2,r16,8
8020e28c:	003f2506 	br	8020df24 <__reset+0xfa1edf24>
8020e290:	12001704 	addi	r8,r2,92
8020e294:	11c016c4 	addi	r7,r2,91
8020e298:	4209883a 	add	r4,r8,r8
8020e29c:	003e9606 	br	8020dcf8 <__reset+0xfa1edcf8>
8020e2a0:	3804d1ba 	srli	r2,r7,6
8020e2a4:	11400e44 	addi	r5,r2,57
8020e2a8:	10c00e04 	addi	r3,r2,56
8020e2ac:	294b883a 	add	r5,r5,r5
8020e2b0:	003fbc06 	br	8020e1a4 <__reset+0xfa1ee1a4>
8020e2b4:	84ff5926 	beq	r16,r19,8020e01c <__reset+0xfa1ee01c>
8020e2b8:	00a008b4 	movhi	r2,32802
8020e2bc:	10b4df04 	addi	r2,r2,-11396
8020e2c0:	14000217 	ldw	r16,8(r2)
8020e2c4:	00bfff04 	movi	r2,-4
8020e2c8:	80c00117 	ldw	r3,4(r16)
8020e2cc:	1886703a 	and	r3,r3,r2
8020e2d0:	003f9106 	br	8020e118 <__reset+0xfa1ee118>
8020e2d4:	60800217 	ldw	r2,8(r12)
8020e2d8:	213fffc4 	addi	r4,r4,-1
8020e2dc:	1300651e 	bne	r2,r12,8020e474 <_malloc_r+0x7f4>
8020e2e0:	208000cc 	andi	r2,r4,3
8020e2e4:	633ffe04 	addi	r12,r12,-8
8020e2e8:	103ffa1e 	bne	r2,zero,8020e2d4 <__reset+0xfa1ee2d4>
8020e2ec:	98800117 	ldw	r2,4(r19)
8020e2f0:	0146303a 	nor	r3,zero,r5
8020e2f4:	1884703a 	and	r2,r3,r2
8020e2f8:	98800115 	stw	r2,4(r19)
8020e2fc:	294b883a 	add	r5,r5,r5
8020e300:	117f2836 	bltu	r2,r5,8020dfa4 <__reset+0xfa1edfa4>
8020e304:	283f2726 	beq	r5,zero,8020dfa4 <__reset+0xfa1edfa4>
8020e308:	2886703a 	and	r3,r5,r2
8020e30c:	5809883a 	mov	r4,r11
8020e310:	183ec31e 	bne	r3,zero,8020de20 <__reset+0xfa1ede20>
8020e314:	294b883a 	add	r5,r5,r5
8020e318:	2886703a 	and	r3,r5,r2
8020e31c:	21000104 	addi	r4,r4,4
8020e320:	183ffc26 	beq	r3,zero,8020e314 <__reset+0xfa1ee314>
8020e324:	003ebe06 	br	8020de20 <__reset+0xfa1ede20>
8020e328:	00c05504 	movi	r3,340
8020e32c:	18801236 	bltu	r3,r2,8020e378 <_malloc_r+0x6f8>
8020e330:	8804d3fa 	srli	r2,r17,15
8020e334:	12001e04 	addi	r8,r2,120
8020e338:	11c01dc4 	addi	r7,r2,119
8020e33c:	4209883a 	add	r4,r8,r8
8020e340:	003e6d06 	br	8020dcf8 <__reset+0xfa1edcf8>
8020e344:	00c40004 	movi	r3,4096
8020e348:	003f4606 	br	8020e064 <__reset+0xfa1ee064>
8020e34c:	00800044 	movi	r2,1
8020e350:	a0800115 	stw	r2,4(r20)
8020e354:	003f7406 	br	8020e128 <__reset+0xfa1ee128>
8020e358:	1805d0ba 	srai	r2,r3,2
8020e35c:	01c00044 	movi	r7,1
8020e360:	30c00117 	ldw	r3,4(r6)
8020e364:	388e983a 	sll	r7,r7,r2
8020e368:	2805883a 	mov	r2,r5
8020e36c:	38c6b03a 	or	r3,r7,r3
8020e370:	30c00115 	stw	r3,4(r6)
8020e374:	003f9b06 	br	8020e1e4 <__reset+0xfa1ee1e4>
8020e378:	00c15504 	movi	r3,1364
8020e37c:	18801a36 	bltu	r3,r2,8020e3e8 <_malloc_r+0x768>
8020e380:	8804d4ba 	srli	r2,r17,18
8020e384:	12001f44 	addi	r8,r2,125
8020e388:	11c01f04 	addi	r7,r2,124
8020e38c:	4209883a 	add	r4,r8,r8
8020e390:	003e5906 	br	8020dcf8 <__reset+0xfa1edcf8>
8020e394:	ad400404 	addi	r21,r21,16
8020e398:	003f1706 	br	8020dff8 <__reset+0xfa1edff8>
8020e39c:	00c01504 	movi	r3,84
8020e3a0:	18802336 	bltu	r3,r2,8020e430 <_malloc_r+0x7b0>
8020e3a4:	3804d33a 	srli	r2,r7,12
8020e3a8:	11401bc4 	addi	r5,r2,111
8020e3ac:	10c01b84 	addi	r3,r2,110
8020e3b0:	294b883a 	add	r5,r5,r5
8020e3b4:	003f7b06 	br	8020e1a4 <__reset+0xfa1ee1a4>
8020e3b8:	9c000217 	ldw	r16,8(r19)
8020e3bc:	00bfff04 	movi	r2,-4
8020e3c0:	80c00117 	ldw	r3,4(r16)
8020e3c4:	1886703a 	and	r3,r3,r2
8020e3c8:	003f5306 	br	8020e118 <__reset+0xfa1ee118>
8020e3cc:	3083ffcc 	andi	r2,r6,4095
8020e3d0:	103f181e 	bne	r2,zero,8020e034 <__reset+0xfa1ee034>
8020e3d4:	99000217 	ldw	r4,8(r19)
8020e3d8:	b545883a 	add	r2,r22,r21
8020e3dc:	10800054 	ori	r2,r2,1
8020e3e0:	20800115 	stw	r2,4(r4)
8020e3e4:	003f3e06 	br	8020e0e0 <__reset+0xfa1ee0e0>
8020e3e8:	01003f84 	movi	r4,254
8020e3ec:	02001fc4 	movi	r8,127
8020e3f0:	01c01f84 	movi	r7,126
8020e3f4:	003e4006 	br	8020dcf8 <__reset+0xfa1edcf8>
8020e3f8:	00a008b4 	movhi	r2,32802
8020e3fc:	10bad704 	addi	r2,r2,-5284
8020e400:	15000015 	stw	r20,0(r2)
8020e404:	003f1106 	br	8020e04c <__reset+0xfa1ee04c>
8020e408:	00800044 	movi	r2,1
8020e40c:	002b883a 	mov	r21,zero
8020e410:	003f1f06 	br	8020e090 <__reset+0xfa1ee090>
8020e414:	81400204 	addi	r5,r16,8
8020e418:	9009883a 	mov	r4,r18
8020e41c:	020d0940 	call	8020d094 <_free_r>
8020e420:	00a008b4 	movhi	r2,32802
8020e424:	10bafc04 	addi	r2,r2,-5136
8020e428:	10c00017 	ldw	r3,0(r2)
8020e42c:	003f2c06 	br	8020e0e0 <__reset+0xfa1ee0e0>
8020e430:	00c05504 	movi	r3,340
8020e434:	18800536 	bltu	r3,r2,8020e44c <_malloc_r+0x7cc>
8020e438:	3804d3fa 	srli	r2,r7,15
8020e43c:	11401e04 	addi	r5,r2,120
8020e440:	10c01dc4 	addi	r3,r2,119
8020e444:	294b883a 	add	r5,r5,r5
8020e448:	003f5606 	br	8020e1a4 <__reset+0xfa1ee1a4>
8020e44c:	00c15504 	movi	r3,1364
8020e450:	18800536 	bltu	r3,r2,8020e468 <_malloc_r+0x7e8>
8020e454:	3804d4ba 	srli	r2,r7,18
8020e458:	11401f44 	addi	r5,r2,125
8020e45c:	10c01f04 	addi	r3,r2,124
8020e460:	294b883a 	add	r5,r5,r5
8020e464:	003f4f06 	br	8020e1a4 <__reset+0xfa1ee1a4>
8020e468:	01403f84 	movi	r5,254
8020e46c:	00c01f84 	movi	r3,126
8020e470:	003f4c06 	br	8020e1a4 <__reset+0xfa1ee1a4>
8020e474:	98800117 	ldw	r2,4(r19)
8020e478:	003fa006 	br	8020e2fc <__reset+0xfa1ee2fc>
8020e47c:	8808d0fa 	srli	r4,r17,3
8020e480:	20800044 	addi	r2,r4,1
8020e484:	1085883a 	add	r2,r2,r2
8020e488:	003e9006 	br	8020decc <__reset+0xfa1edecc>

8020e48c <memchr>:
8020e48c:	208000cc 	andi	r2,r4,3
8020e490:	280f883a 	mov	r7,r5
8020e494:	10003426 	beq	r2,zero,8020e568 <memchr+0xdc>
8020e498:	30bfffc4 	addi	r2,r6,-1
8020e49c:	30001a26 	beq	r6,zero,8020e508 <memchr+0x7c>
8020e4a0:	20c00003 	ldbu	r3,0(r4)
8020e4a4:	29803fcc 	andi	r6,r5,255
8020e4a8:	30c0051e 	bne	r6,r3,8020e4c0 <memchr+0x34>
8020e4ac:	00001806 	br	8020e510 <memchr+0x84>
8020e4b0:	10001526 	beq	r2,zero,8020e508 <memchr+0x7c>
8020e4b4:	20c00003 	ldbu	r3,0(r4)
8020e4b8:	10bfffc4 	addi	r2,r2,-1
8020e4bc:	30c01426 	beq	r6,r3,8020e510 <memchr+0x84>
8020e4c0:	21000044 	addi	r4,r4,1
8020e4c4:	20c000cc 	andi	r3,r4,3
8020e4c8:	183ff91e 	bne	r3,zero,8020e4b0 <__reset+0xfa1ee4b0>
8020e4cc:	020000c4 	movi	r8,3
8020e4d0:	40801136 	bltu	r8,r2,8020e518 <memchr+0x8c>
8020e4d4:	10000c26 	beq	r2,zero,8020e508 <memchr+0x7c>
8020e4d8:	20c00003 	ldbu	r3,0(r4)
8020e4dc:	29403fcc 	andi	r5,r5,255
8020e4e0:	28c00b26 	beq	r5,r3,8020e510 <memchr+0x84>
8020e4e4:	20c00044 	addi	r3,r4,1
8020e4e8:	39803fcc 	andi	r6,r7,255
8020e4ec:	2089883a 	add	r4,r4,r2
8020e4f0:	00000306 	br	8020e500 <memchr+0x74>
8020e4f4:	18c00044 	addi	r3,r3,1
8020e4f8:	197fffc3 	ldbu	r5,-1(r3)
8020e4fc:	31400526 	beq	r6,r5,8020e514 <memchr+0x88>
8020e500:	1805883a 	mov	r2,r3
8020e504:	20fffb1e 	bne	r4,r3,8020e4f4 <__reset+0xfa1ee4f4>
8020e508:	0005883a 	mov	r2,zero
8020e50c:	f800283a 	ret
8020e510:	2005883a 	mov	r2,r4
8020e514:	f800283a 	ret
8020e518:	28c03fcc 	andi	r3,r5,255
8020e51c:	1812923a 	slli	r9,r3,8
8020e520:	02ffbff4 	movhi	r11,65279
8020e524:	02a02074 	movhi	r10,32897
8020e528:	48d2b03a 	or	r9,r9,r3
8020e52c:	4806943a 	slli	r3,r9,16
8020e530:	5affbfc4 	addi	r11,r11,-257
8020e534:	52a02004 	addi	r10,r10,-32640
8020e538:	48d2b03a 	or	r9,r9,r3
8020e53c:	20c00017 	ldw	r3,0(r4)
8020e540:	48c6f03a 	xor	r3,r9,r3
8020e544:	1acd883a 	add	r6,r3,r11
8020e548:	00c6303a 	nor	r3,zero,r3
8020e54c:	30c6703a 	and	r3,r6,r3
8020e550:	1a86703a 	and	r3,r3,r10
8020e554:	183fe01e 	bne	r3,zero,8020e4d8 <__reset+0xfa1ee4d8>
8020e558:	10bfff04 	addi	r2,r2,-4
8020e55c:	21000104 	addi	r4,r4,4
8020e560:	40bff636 	bltu	r8,r2,8020e53c <__reset+0xfa1ee53c>
8020e564:	003fdb06 	br	8020e4d4 <__reset+0xfa1ee4d4>
8020e568:	3005883a 	mov	r2,r6
8020e56c:	003fd706 	br	8020e4cc <__reset+0xfa1ee4cc>

8020e570 <memmove>:
8020e570:	2005883a 	mov	r2,r4
8020e574:	29000b2e 	bgeu	r5,r4,8020e5a4 <memmove+0x34>
8020e578:	298f883a 	add	r7,r5,r6
8020e57c:	21c0092e 	bgeu	r4,r7,8020e5a4 <memmove+0x34>
8020e580:	2187883a 	add	r3,r4,r6
8020e584:	198bc83a 	sub	r5,r3,r6
8020e588:	30004826 	beq	r6,zero,8020e6ac <memmove+0x13c>
8020e58c:	39ffffc4 	addi	r7,r7,-1
8020e590:	39000003 	ldbu	r4,0(r7)
8020e594:	18ffffc4 	addi	r3,r3,-1
8020e598:	19000005 	stb	r4,0(r3)
8020e59c:	28fffb1e 	bne	r5,r3,8020e58c <__reset+0xfa1ee58c>
8020e5a0:	f800283a 	ret
8020e5a4:	00c003c4 	movi	r3,15
8020e5a8:	1980412e 	bgeu	r3,r6,8020e6b0 <memmove+0x140>
8020e5ac:	2886b03a 	or	r3,r5,r2
8020e5b0:	18c000cc 	andi	r3,r3,3
8020e5b4:	1800401e 	bne	r3,zero,8020e6b8 <memmove+0x148>
8020e5b8:	33fffc04 	addi	r15,r6,-16
8020e5bc:	781ed13a 	srli	r15,r15,4
8020e5c0:	28c00104 	addi	r3,r5,4
8020e5c4:	13400104 	addi	r13,r2,4
8020e5c8:	781c913a 	slli	r14,r15,4
8020e5cc:	2b000204 	addi	r12,r5,8
8020e5d0:	12c00204 	addi	r11,r2,8
8020e5d4:	73800504 	addi	r14,r14,20
8020e5d8:	2a800304 	addi	r10,r5,12
8020e5dc:	12400304 	addi	r9,r2,12
8020e5e0:	2b9d883a 	add	r14,r5,r14
8020e5e4:	2811883a 	mov	r8,r5
8020e5e8:	100f883a 	mov	r7,r2
8020e5ec:	41000017 	ldw	r4,0(r8)
8020e5f0:	39c00404 	addi	r7,r7,16
8020e5f4:	18c00404 	addi	r3,r3,16
8020e5f8:	393ffc15 	stw	r4,-16(r7)
8020e5fc:	193ffc17 	ldw	r4,-16(r3)
8020e600:	6b400404 	addi	r13,r13,16
8020e604:	5ac00404 	addi	r11,r11,16
8020e608:	693ffc15 	stw	r4,-16(r13)
8020e60c:	61000017 	ldw	r4,0(r12)
8020e610:	4a400404 	addi	r9,r9,16
8020e614:	42000404 	addi	r8,r8,16
8020e618:	593ffc15 	stw	r4,-16(r11)
8020e61c:	51000017 	ldw	r4,0(r10)
8020e620:	63000404 	addi	r12,r12,16
8020e624:	52800404 	addi	r10,r10,16
8020e628:	493ffc15 	stw	r4,-16(r9)
8020e62c:	1bbfef1e 	bne	r3,r14,8020e5ec <__reset+0xfa1ee5ec>
8020e630:	79000044 	addi	r4,r15,1
8020e634:	2008913a 	slli	r4,r4,4
8020e638:	328003cc 	andi	r10,r6,15
8020e63c:	02c000c4 	movi	r11,3
8020e640:	1107883a 	add	r3,r2,r4
8020e644:	290b883a 	add	r5,r5,r4
8020e648:	5a801e2e 	bgeu	r11,r10,8020e6c4 <memmove+0x154>
8020e64c:	1813883a 	mov	r9,r3
8020e650:	2811883a 	mov	r8,r5
8020e654:	500f883a 	mov	r7,r10
8020e658:	41000017 	ldw	r4,0(r8)
8020e65c:	4a400104 	addi	r9,r9,4
8020e660:	39ffff04 	addi	r7,r7,-4
8020e664:	493fff15 	stw	r4,-4(r9)
8020e668:	42000104 	addi	r8,r8,4
8020e66c:	59fffa36 	bltu	r11,r7,8020e658 <__reset+0xfa1ee658>
8020e670:	513fff04 	addi	r4,r10,-4
8020e674:	2008d0ba 	srli	r4,r4,2
8020e678:	318000cc 	andi	r6,r6,3
8020e67c:	21000044 	addi	r4,r4,1
8020e680:	2109883a 	add	r4,r4,r4
8020e684:	2109883a 	add	r4,r4,r4
8020e688:	1907883a 	add	r3,r3,r4
8020e68c:	290b883a 	add	r5,r5,r4
8020e690:	30000b26 	beq	r6,zero,8020e6c0 <memmove+0x150>
8020e694:	198d883a 	add	r6,r3,r6
8020e698:	29c00003 	ldbu	r7,0(r5)
8020e69c:	18c00044 	addi	r3,r3,1
8020e6a0:	29400044 	addi	r5,r5,1
8020e6a4:	19ffffc5 	stb	r7,-1(r3)
8020e6a8:	19bffb1e 	bne	r3,r6,8020e698 <__reset+0xfa1ee698>
8020e6ac:	f800283a 	ret
8020e6b0:	1007883a 	mov	r3,r2
8020e6b4:	003ff606 	br	8020e690 <__reset+0xfa1ee690>
8020e6b8:	1007883a 	mov	r3,r2
8020e6bc:	003ff506 	br	8020e694 <__reset+0xfa1ee694>
8020e6c0:	f800283a 	ret
8020e6c4:	500d883a 	mov	r6,r10
8020e6c8:	003ff106 	br	8020e690 <__reset+0xfa1ee690>

8020e6cc <memset>:
8020e6cc:	20c000cc 	andi	r3,r4,3
8020e6d0:	2005883a 	mov	r2,r4
8020e6d4:	18004426 	beq	r3,zero,8020e7e8 <memset+0x11c>
8020e6d8:	31ffffc4 	addi	r7,r6,-1
8020e6dc:	30004026 	beq	r6,zero,8020e7e0 <memset+0x114>
8020e6e0:	2813883a 	mov	r9,r5
8020e6e4:	200d883a 	mov	r6,r4
8020e6e8:	2007883a 	mov	r3,r4
8020e6ec:	00000406 	br	8020e700 <memset+0x34>
8020e6f0:	3a3fffc4 	addi	r8,r7,-1
8020e6f4:	31800044 	addi	r6,r6,1
8020e6f8:	38003926 	beq	r7,zero,8020e7e0 <memset+0x114>
8020e6fc:	400f883a 	mov	r7,r8
8020e700:	18c00044 	addi	r3,r3,1
8020e704:	32400005 	stb	r9,0(r6)
8020e708:	1a0000cc 	andi	r8,r3,3
8020e70c:	403ff81e 	bne	r8,zero,8020e6f0 <__reset+0xfa1ee6f0>
8020e710:	010000c4 	movi	r4,3
8020e714:	21c02d2e 	bgeu	r4,r7,8020e7cc <memset+0x100>
8020e718:	29003fcc 	andi	r4,r5,255
8020e71c:	200c923a 	slli	r6,r4,8
8020e720:	3108b03a 	or	r4,r6,r4
8020e724:	200c943a 	slli	r6,r4,16
8020e728:	218cb03a 	or	r6,r4,r6
8020e72c:	010003c4 	movi	r4,15
8020e730:	21c0182e 	bgeu	r4,r7,8020e794 <memset+0xc8>
8020e734:	3b3ffc04 	addi	r12,r7,-16
8020e738:	6018d13a 	srli	r12,r12,4
8020e73c:	1a000104 	addi	r8,r3,4
8020e740:	1ac00204 	addi	r11,r3,8
8020e744:	6008913a 	slli	r4,r12,4
8020e748:	1a800304 	addi	r10,r3,12
8020e74c:	1813883a 	mov	r9,r3
8020e750:	21000504 	addi	r4,r4,20
8020e754:	1909883a 	add	r4,r3,r4
8020e758:	49800015 	stw	r6,0(r9)
8020e75c:	41800015 	stw	r6,0(r8)
8020e760:	59800015 	stw	r6,0(r11)
8020e764:	51800015 	stw	r6,0(r10)
8020e768:	42000404 	addi	r8,r8,16
8020e76c:	4a400404 	addi	r9,r9,16
8020e770:	5ac00404 	addi	r11,r11,16
8020e774:	52800404 	addi	r10,r10,16
8020e778:	413ff71e 	bne	r8,r4,8020e758 <__reset+0xfa1ee758>
8020e77c:	63000044 	addi	r12,r12,1
8020e780:	6018913a 	slli	r12,r12,4
8020e784:	39c003cc 	andi	r7,r7,15
8020e788:	010000c4 	movi	r4,3
8020e78c:	1b07883a 	add	r3,r3,r12
8020e790:	21c00e2e 	bgeu	r4,r7,8020e7cc <memset+0x100>
8020e794:	1813883a 	mov	r9,r3
8020e798:	3811883a 	mov	r8,r7
8020e79c:	010000c4 	movi	r4,3
8020e7a0:	49800015 	stw	r6,0(r9)
8020e7a4:	423fff04 	addi	r8,r8,-4
8020e7a8:	4a400104 	addi	r9,r9,4
8020e7ac:	223ffc36 	bltu	r4,r8,8020e7a0 <__reset+0xfa1ee7a0>
8020e7b0:	393fff04 	addi	r4,r7,-4
8020e7b4:	2008d0ba 	srli	r4,r4,2
8020e7b8:	39c000cc 	andi	r7,r7,3
8020e7bc:	21000044 	addi	r4,r4,1
8020e7c0:	2109883a 	add	r4,r4,r4
8020e7c4:	2109883a 	add	r4,r4,r4
8020e7c8:	1907883a 	add	r3,r3,r4
8020e7cc:	38000526 	beq	r7,zero,8020e7e4 <memset+0x118>
8020e7d0:	19cf883a 	add	r7,r3,r7
8020e7d4:	19400005 	stb	r5,0(r3)
8020e7d8:	18c00044 	addi	r3,r3,1
8020e7dc:	38fffd1e 	bne	r7,r3,8020e7d4 <__reset+0xfa1ee7d4>
8020e7e0:	f800283a 	ret
8020e7e4:	f800283a 	ret
8020e7e8:	2007883a 	mov	r3,r4
8020e7ec:	300f883a 	mov	r7,r6
8020e7f0:	003fc706 	br	8020e710 <__reset+0xfa1ee710>

8020e7f4 <_Balloc>:
8020e7f4:	20801317 	ldw	r2,76(r4)
8020e7f8:	defffc04 	addi	sp,sp,-16
8020e7fc:	dc400115 	stw	r17,4(sp)
8020e800:	dc000015 	stw	r16,0(sp)
8020e804:	dfc00315 	stw	ra,12(sp)
8020e808:	dc800215 	stw	r18,8(sp)
8020e80c:	2023883a 	mov	r17,r4
8020e810:	2821883a 	mov	r16,r5
8020e814:	10000f26 	beq	r2,zero,8020e854 <_Balloc+0x60>
8020e818:	8407883a 	add	r3,r16,r16
8020e81c:	18c7883a 	add	r3,r3,r3
8020e820:	10c7883a 	add	r3,r2,r3
8020e824:	18800017 	ldw	r2,0(r3)
8020e828:	10001126 	beq	r2,zero,8020e870 <_Balloc+0x7c>
8020e82c:	11000017 	ldw	r4,0(r2)
8020e830:	19000015 	stw	r4,0(r3)
8020e834:	10000415 	stw	zero,16(r2)
8020e838:	10000315 	stw	zero,12(r2)
8020e83c:	dfc00317 	ldw	ra,12(sp)
8020e840:	dc800217 	ldw	r18,8(sp)
8020e844:	dc400117 	ldw	r17,4(sp)
8020e848:	dc000017 	ldw	r16,0(sp)
8020e84c:	dec00404 	addi	sp,sp,16
8020e850:	f800283a 	ret
8020e854:	01800844 	movi	r6,33
8020e858:	01400104 	movi	r5,4
8020e85c:	0212b3c0 	call	80212b3c <_calloc_r>
8020e860:	88801315 	stw	r2,76(r17)
8020e864:	103fec1e 	bne	r2,zero,8020e818 <__reset+0xfa1ee818>
8020e868:	0005883a 	mov	r2,zero
8020e86c:	003ff306 	br	8020e83c <__reset+0xfa1ee83c>
8020e870:	01400044 	movi	r5,1
8020e874:	2c24983a 	sll	r18,r5,r16
8020e878:	8809883a 	mov	r4,r17
8020e87c:	91800144 	addi	r6,r18,5
8020e880:	318d883a 	add	r6,r6,r6
8020e884:	318d883a 	add	r6,r6,r6
8020e888:	0212b3c0 	call	80212b3c <_calloc_r>
8020e88c:	103ff626 	beq	r2,zero,8020e868 <__reset+0xfa1ee868>
8020e890:	14000115 	stw	r16,4(r2)
8020e894:	14800215 	stw	r18,8(r2)
8020e898:	003fe606 	br	8020e834 <__reset+0xfa1ee834>

8020e89c <_Bfree>:
8020e89c:	28000826 	beq	r5,zero,8020e8c0 <_Bfree+0x24>
8020e8a0:	28c00117 	ldw	r3,4(r5)
8020e8a4:	20801317 	ldw	r2,76(r4)
8020e8a8:	18c7883a 	add	r3,r3,r3
8020e8ac:	18c7883a 	add	r3,r3,r3
8020e8b0:	10c5883a 	add	r2,r2,r3
8020e8b4:	10c00017 	ldw	r3,0(r2)
8020e8b8:	28c00015 	stw	r3,0(r5)
8020e8bc:	11400015 	stw	r5,0(r2)
8020e8c0:	f800283a 	ret

8020e8c4 <__multadd>:
8020e8c4:	defffa04 	addi	sp,sp,-24
8020e8c8:	dc800315 	stw	r18,12(sp)
8020e8cc:	dc400215 	stw	r17,8(sp)
8020e8d0:	dc000115 	stw	r16,4(sp)
8020e8d4:	2823883a 	mov	r17,r5
8020e8d8:	2c000417 	ldw	r16,16(r5)
8020e8dc:	dfc00515 	stw	ra,20(sp)
8020e8e0:	dcc00415 	stw	r19,16(sp)
8020e8e4:	2025883a 	mov	r18,r4
8020e8e8:	29400504 	addi	r5,r5,20
8020e8ec:	0011883a 	mov	r8,zero
8020e8f0:	28c00017 	ldw	r3,0(r5)
8020e8f4:	29400104 	addi	r5,r5,4
8020e8f8:	42000044 	addi	r8,r8,1
8020e8fc:	18bfffcc 	andi	r2,r3,65535
8020e900:	1185383a 	mul	r2,r2,r6
8020e904:	1806d43a 	srli	r3,r3,16
8020e908:	11cf883a 	add	r7,r2,r7
8020e90c:	3808d43a 	srli	r4,r7,16
8020e910:	1987383a 	mul	r3,r3,r6
8020e914:	38bfffcc 	andi	r2,r7,65535
8020e918:	1907883a 	add	r3,r3,r4
8020e91c:	1808943a 	slli	r4,r3,16
8020e920:	180ed43a 	srli	r7,r3,16
8020e924:	2085883a 	add	r2,r4,r2
8020e928:	28bfff15 	stw	r2,-4(r5)
8020e92c:	443ff016 	blt	r8,r16,8020e8f0 <__reset+0xfa1ee8f0>
8020e930:	38000926 	beq	r7,zero,8020e958 <__multadd+0x94>
8020e934:	88800217 	ldw	r2,8(r17)
8020e938:	80800f0e 	bge	r16,r2,8020e978 <__multadd+0xb4>
8020e93c:	80800144 	addi	r2,r16,5
8020e940:	1085883a 	add	r2,r2,r2
8020e944:	1085883a 	add	r2,r2,r2
8020e948:	8885883a 	add	r2,r17,r2
8020e94c:	11c00015 	stw	r7,0(r2)
8020e950:	84000044 	addi	r16,r16,1
8020e954:	8c000415 	stw	r16,16(r17)
8020e958:	8805883a 	mov	r2,r17
8020e95c:	dfc00517 	ldw	ra,20(sp)
8020e960:	dcc00417 	ldw	r19,16(sp)
8020e964:	dc800317 	ldw	r18,12(sp)
8020e968:	dc400217 	ldw	r17,8(sp)
8020e96c:	dc000117 	ldw	r16,4(sp)
8020e970:	dec00604 	addi	sp,sp,24
8020e974:	f800283a 	ret
8020e978:	89400117 	ldw	r5,4(r17)
8020e97c:	9009883a 	mov	r4,r18
8020e980:	d9c00015 	stw	r7,0(sp)
8020e984:	29400044 	addi	r5,r5,1
8020e988:	020e7f40 	call	8020e7f4 <_Balloc>
8020e98c:	89800417 	ldw	r6,16(r17)
8020e990:	89400304 	addi	r5,r17,12
8020e994:	11000304 	addi	r4,r2,12
8020e998:	31800084 	addi	r6,r6,2
8020e99c:	318d883a 	add	r6,r6,r6
8020e9a0:	318d883a 	add	r6,r6,r6
8020e9a4:	1027883a 	mov	r19,r2
8020e9a8:	02066c00 	call	802066c0 <memcpy>
8020e9ac:	d9c00017 	ldw	r7,0(sp)
8020e9b0:	88000a26 	beq	r17,zero,8020e9dc <__multadd+0x118>
8020e9b4:	88c00117 	ldw	r3,4(r17)
8020e9b8:	90801317 	ldw	r2,76(r18)
8020e9bc:	18c7883a 	add	r3,r3,r3
8020e9c0:	18c7883a 	add	r3,r3,r3
8020e9c4:	10c5883a 	add	r2,r2,r3
8020e9c8:	10c00017 	ldw	r3,0(r2)
8020e9cc:	88c00015 	stw	r3,0(r17)
8020e9d0:	14400015 	stw	r17,0(r2)
8020e9d4:	9823883a 	mov	r17,r19
8020e9d8:	003fd806 	br	8020e93c <__reset+0xfa1ee93c>
8020e9dc:	9823883a 	mov	r17,r19
8020e9e0:	003fd606 	br	8020e93c <__reset+0xfa1ee93c>

8020e9e4 <__s2b>:
8020e9e4:	defff904 	addi	sp,sp,-28
8020e9e8:	dc400115 	stw	r17,4(sp)
8020e9ec:	dc000015 	stw	r16,0(sp)
8020e9f0:	2023883a 	mov	r17,r4
8020e9f4:	2821883a 	mov	r16,r5
8020e9f8:	39000204 	addi	r4,r7,8
8020e9fc:	01400244 	movi	r5,9
8020ea00:	dcc00315 	stw	r19,12(sp)
8020ea04:	dc800215 	stw	r18,8(sp)
8020ea08:	dfc00615 	stw	ra,24(sp)
8020ea0c:	dd400515 	stw	r21,20(sp)
8020ea10:	dd000415 	stw	r20,16(sp)
8020ea14:	3825883a 	mov	r18,r7
8020ea18:	3027883a 	mov	r19,r6
8020ea1c:	0213e6c0 	call	80213e6c <__divsi3>
8020ea20:	00c00044 	movi	r3,1
8020ea24:	000b883a 	mov	r5,zero
8020ea28:	1880030e 	bge	r3,r2,8020ea38 <__s2b+0x54>
8020ea2c:	18c7883a 	add	r3,r3,r3
8020ea30:	29400044 	addi	r5,r5,1
8020ea34:	18bffd16 	blt	r3,r2,8020ea2c <__reset+0xfa1eea2c>
8020ea38:	8809883a 	mov	r4,r17
8020ea3c:	020e7f40 	call	8020e7f4 <_Balloc>
8020ea40:	d8c00717 	ldw	r3,28(sp)
8020ea44:	10c00515 	stw	r3,20(r2)
8020ea48:	00c00044 	movi	r3,1
8020ea4c:	10c00415 	stw	r3,16(r2)
8020ea50:	00c00244 	movi	r3,9
8020ea54:	1cc0210e 	bge	r3,r19,8020eadc <__s2b+0xf8>
8020ea58:	80eb883a 	add	r21,r16,r3
8020ea5c:	a829883a 	mov	r20,r21
8020ea60:	84e1883a 	add	r16,r16,r19
8020ea64:	a1c00007 	ldb	r7,0(r20)
8020ea68:	01800284 	movi	r6,10
8020ea6c:	a5000044 	addi	r20,r20,1
8020ea70:	100b883a 	mov	r5,r2
8020ea74:	39fff404 	addi	r7,r7,-48
8020ea78:	8809883a 	mov	r4,r17
8020ea7c:	020e8c40 	call	8020e8c4 <__multadd>
8020ea80:	a43ff81e 	bne	r20,r16,8020ea64 <__reset+0xfa1eea64>
8020ea84:	ace1883a 	add	r16,r21,r19
8020ea88:	843ffe04 	addi	r16,r16,-8
8020ea8c:	9c800a0e 	bge	r19,r18,8020eab8 <__s2b+0xd4>
8020ea90:	94e5c83a 	sub	r18,r18,r19
8020ea94:	84a5883a 	add	r18,r16,r18
8020ea98:	81c00007 	ldb	r7,0(r16)
8020ea9c:	01800284 	movi	r6,10
8020eaa0:	84000044 	addi	r16,r16,1
8020eaa4:	100b883a 	mov	r5,r2
8020eaa8:	39fff404 	addi	r7,r7,-48
8020eaac:	8809883a 	mov	r4,r17
8020eab0:	020e8c40 	call	8020e8c4 <__multadd>
8020eab4:	84bff81e 	bne	r16,r18,8020ea98 <__reset+0xfa1eea98>
8020eab8:	dfc00617 	ldw	ra,24(sp)
8020eabc:	dd400517 	ldw	r21,20(sp)
8020eac0:	dd000417 	ldw	r20,16(sp)
8020eac4:	dcc00317 	ldw	r19,12(sp)
8020eac8:	dc800217 	ldw	r18,8(sp)
8020eacc:	dc400117 	ldw	r17,4(sp)
8020ead0:	dc000017 	ldw	r16,0(sp)
8020ead4:	dec00704 	addi	sp,sp,28
8020ead8:	f800283a 	ret
8020eadc:	84000284 	addi	r16,r16,10
8020eae0:	1827883a 	mov	r19,r3
8020eae4:	003fe906 	br	8020ea8c <__reset+0xfa1eea8c>

8020eae8 <__hi0bits>:
8020eae8:	20bfffec 	andhi	r2,r4,65535
8020eaec:	1000141e 	bne	r2,zero,8020eb40 <__hi0bits+0x58>
8020eaf0:	2008943a 	slli	r4,r4,16
8020eaf4:	00800404 	movi	r2,16
8020eaf8:	20ffc02c 	andhi	r3,r4,65280
8020eafc:	1800021e 	bne	r3,zero,8020eb08 <__hi0bits+0x20>
8020eb00:	2008923a 	slli	r4,r4,8
8020eb04:	10800204 	addi	r2,r2,8
8020eb08:	20fc002c 	andhi	r3,r4,61440
8020eb0c:	1800021e 	bne	r3,zero,8020eb18 <__hi0bits+0x30>
8020eb10:	2008913a 	slli	r4,r4,4
8020eb14:	10800104 	addi	r2,r2,4
8020eb18:	20f0002c 	andhi	r3,r4,49152
8020eb1c:	1800031e 	bne	r3,zero,8020eb2c <__hi0bits+0x44>
8020eb20:	2109883a 	add	r4,r4,r4
8020eb24:	10800084 	addi	r2,r2,2
8020eb28:	2109883a 	add	r4,r4,r4
8020eb2c:	20000316 	blt	r4,zero,8020eb3c <__hi0bits+0x54>
8020eb30:	2110002c 	andhi	r4,r4,16384
8020eb34:	2000041e 	bne	r4,zero,8020eb48 <__hi0bits+0x60>
8020eb38:	00800804 	movi	r2,32
8020eb3c:	f800283a 	ret
8020eb40:	0005883a 	mov	r2,zero
8020eb44:	003fec06 	br	8020eaf8 <__reset+0xfa1eeaf8>
8020eb48:	10800044 	addi	r2,r2,1
8020eb4c:	f800283a 	ret

8020eb50 <__lo0bits>:
8020eb50:	20c00017 	ldw	r3,0(r4)
8020eb54:	188001cc 	andi	r2,r3,7
8020eb58:	10000826 	beq	r2,zero,8020eb7c <__lo0bits+0x2c>
8020eb5c:	1880004c 	andi	r2,r3,1
8020eb60:	1000211e 	bne	r2,zero,8020ebe8 <__lo0bits+0x98>
8020eb64:	1880008c 	andi	r2,r3,2
8020eb68:	1000211e 	bne	r2,zero,8020ebf0 <__lo0bits+0xa0>
8020eb6c:	1806d0ba 	srli	r3,r3,2
8020eb70:	00800084 	movi	r2,2
8020eb74:	20c00015 	stw	r3,0(r4)
8020eb78:	f800283a 	ret
8020eb7c:	18bfffcc 	andi	r2,r3,65535
8020eb80:	10001326 	beq	r2,zero,8020ebd0 <__lo0bits+0x80>
8020eb84:	0005883a 	mov	r2,zero
8020eb88:	19403fcc 	andi	r5,r3,255
8020eb8c:	2800021e 	bne	r5,zero,8020eb98 <__lo0bits+0x48>
8020eb90:	1806d23a 	srli	r3,r3,8
8020eb94:	10800204 	addi	r2,r2,8
8020eb98:	194003cc 	andi	r5,r3,15
8020eb9c:	2800021e 	bne	r5,zero,8020eba8 <__lo0bits+0x58>
8020eba0:	1806d13a 	srli	r3,r3,4
8020eba4:	10800104 	addi	r2,r2,4
8020eba8:	194000cc 	andi	r5,r3,3
8020ebac:	2800021e 	bne	r5,zero,8020ebb8 <__lo0bits+0x68>
8020ebb0:	1806d0ba 	srli	r3,r3,2
8020ebb4:	10800084 	addi	r2,r2,2
8020ebb8:	1940004c 	andi	r5,r3,1
8020ebbc:	2800081e 	bne	r5,zero,8020ebe0 <__lo0bits+0x90>
8020ebc0:	1806d07a 	srli	r3,r3,1
8020ebc4:	1800051e 	bne	r3,zero,8020ebdc <__lo0bits+0x8c>
8020ebc8:	00800804 	movi	r2,32
8020ebcc:	f800283a 	ret
8020ebd0:	1806d43a 	srli	r3,r3,16
8020ebd4:	00800404 	movi	r2,16
8020ebd8:	003feb06 	br	8020eb88 <__reset+0xfa1eeb88>
8020ebdc:	10800044 	addi	r2,r2,1
8020ebe0:	20c00015 	stw	r3,0(r4)
8020ebe4:	f800283a 	ret
8020ebe8:	0005883a 	mov	r2,zero
8020ebec:	f800283a 	ret
8020ebf0:	1806d07a 	srli	r3,r3,1
8020ebf4:	00800044 	movi	r2,1
8020ebf8:	20c00015 	stw	r3,0(r4)
8020ebfc:	f800283a 	ret

8020ec00 <__i2b>:
8020ec00:	defffd04 	addi	sp,sp,-12
8020ec04:	dc000015 	stw	r16,0(sp)
8020ec08:	04000044 	movi	r16,1
8020ec0c:	dc400115 	stw	r17,4(sp)
8020ec10:	2823883a 	mov	r17,r5
8020ec14:	800b883a 	mov	r5,r16
8020ec18:	dfc00215 	stw	ra,8(sp)
8020ec1c:	020e7f40 	call	8020e7f4 <_Balloc>
8020ec20:	14400515 	stw	r17,20(r2)
8020ec24:	14000415 	stw	r16,16(r2)
8020ec28:	dfc00217 	ldw	ra,8(sp)
8020ec2c:	dc400117 	ldw	r17,4(sp)
8020ec30:	dc000017 	ldw	r16,0(sp)
8020ec34:	dec00304 	addi	sp,sp,12
8020ec38:	f800283a 	ret

8020ec3c <__multiply>:
8020ec3c:	defffa04 	addi	sp,sp,-24
8020ec40:	dcc00315 	stw	r19,12(sp)
8020ec44:	dc800215 	stw	r18,8(sp)
8020ec48:	34c00417 	ldw	r19,16(r6)
8020ec4c:	2c800417 	ldw	r18,16(r5)
8020ec50:	dd000415 	stw	r20,16(sp)
8020ec54:	dc400115 	stw	r17,4(sp)
8020ec58:	dfc00515 	stw	ra,20(sp)
8020ec5c:	dc000015 	stw	r16,0(sp)
8020ec60:	2829883a 	mov	r20,r5
8020ec64:	3023883a 	mov	r17,r6
8020ec68:	94c0050e 	bge	r18,r19,8020ec80 <__multiply+0x44>
8020ec6c:	9007883a 	mov	r3,r18
8020ec70:	3029883a 	mov	r20,r6
8020ec74:	9825883a 	mov	r18,r19
8020ec78:	2823883a 	mov	r17,r5
8020ec7c:	1827883a 	mov	r19,r3
8020ec80:	a0800217 	ldw	r2,8(r20)
8020ec84:	94e1883a 	add	r16,r18,r19
8020ec88:	a1400117 	ldw	r5,4(r20)
8020ec8c:	1400010e 	bge	r2,r16,8020ec94 <__multiply+0x58>
8020ec90:	29400044 	addi	r5,r5,1
8020ec94:	020e7f40 	call	8020e7f4 <_Balloc>
8020ec98:	8415883a 	add	r10,r16,r16
8020ec9c:	12c00504 	addi	r11,r2,20
8020eca0:	5295883a 	add	r10,r10,r10
8020eca4:	5a95883a 	add	r10,r11,r10
8020eca8:	5807883a 	mov	r3,r11
8020ecac:	5a80032e 	bgeu	r11,r10,8020ecbc <__multiply+0x80>
8020ecb0:	18000015 	stw	zero,0(r3)
8020ecb4:	18c00104 	addi	r3,r3,4
8020ecb8:	1abffd36 	bltu	r3,r10,8020ecb0 <__reset+0xfa1eecb0>
8020ecbc:	9ce7883a 	add	r19,r19,r19
8020ecc0:	94a5883a 	add	r18,r18,r18
8020ecc4:	89800504 	addi	r6,r17,20
8020ecc8:	9ce7883a 	add	r19,r19,r19
8020eccc:	a3400504 	addi	r13,r20,20
8020ecd0:	94a5883a 	add	r18,r18,r18
8020ecd4:	34d9883a 	add	r12,r6,r19
8020ecd8:	6c93883a 	add	r9,r13,r18
8020ecdc:	3300422e 	bgeu	r6,r12,8020ede8 <__multiply+0x1ac>
8020ece0:	37c00017 	ldw	ra,0(r6)
8020ece4:	fbffffcc 	andi	r15,ra,65535
8020ece8:	78001b26 	beq	r15,zero,8020ed58 <__multiply+0x11c>
8020ecec:	5811883a 	mov	r8,r11
8020ecf0:	681d883a 	mov	r14,r13
8020ecf4:	000f883a 	mov	r7,zero
8020ecf8:	71000017 	ldw	r4,0(r14)
8020ecfc:	40c00017 	ldw	r3,0(r8)
8020ed00:	73800104 	addi	r14,r14,4
8020ed04:	217fffcc 	andi	r5,r4,65535
8020ed08:	2bcb383a 	mul	r5,r5,r15
8020ed0c:	2008d43a 	srli	r4,r4,16
8020ed10:	1c7fffcc 	andi	r17,r3,65535
8020ed14:	2c4b883a 	add	r5,r5,r17
8020ed18:	29cb883a 	add	r5,r5,r7
8020ed1c:	23c9383a 	mul	r4,r4,r15
8020ed20:	1806d43a 	srli	r3,r3,16
8020ed24:	280ed43a 	srli	r7,r5,16
8020ed28:	297fffcc 	andi	r5,r5,65535
8020ed2c:	20c7883a 	add	r3,r4,r3
8020ed30:	19c7883a 	add	r3,r3,r7
8020ed34:	1808943a 	slli	r4,r3,16
8020ed38:	4023883a 	mov	r17,r8
8020ed3c:	180ed43a 	srli	r7,r3,16
8020ed40:	214ab03a 	or	r5,r4,r5
8020ed44:	41400015 	stw	r5,0(r8)
8020ed48:	42000104 	addi	r8,r8,4
8020ed4c:	727fea36 	bltu	r14,r9,8020ecf8 <__reset+0xfa1eecf8>
8020ed50:	89c00115 	stw	r7,4(r17)
8020ed54:	37c00017 	ldw	ra,0(r6)
8020ed58:	f83ed43a 	srli	ra,ra,16
8020ed5c:	f8001f26 	beq	ra,zero,8020eddc <__multiply+0x1a0>
8020ed60:	58c00017 	ldw	r3,0(r11)
8020ed64:	681d883a 	mov	r14,r13
8020ed68:	581f883a 	mov	r15,r11
8020ed6c:	1811883a 	mov	r8,r3
8020ed70:	5825883a 	mov	r18,r11
8020ed74:	000f883a 	mov	r7,zero
8020ed78:	00000106 	br	8020ed80 <__multiply+0x144>
8020ed7c:	8825883a 	mov	r18,r17
8020ed80:	7140000b 	ldhu	r5,0(r14)
8020ed84:	4010d43a 	srli	r8,r8,16
8020ed88:	193fffcc 	andi	r4,r3,65535
8020ed8c:	2fcb383a 	mul	r5,r5,ra
8020ed90:	7bc00104 	addi	r15,r15,4
8020ed94:	73800104 	addi	r14,r14,4
8020ed98:	2a0b883a 	add	r5,r5,r8
8020ed9c:	29cb883a 	add	r5,r5,r7
8020eda0:	2806943a 	slli	r3,r5,16
8020eda4:	94400104 	addi	r17,r18,4
8020eda8:	280ad43a 	srli	r5,r5,16
8020edac:	1908b03a 	or	r4,r3,r4
8020edb0:	793fff15 	stw	r4,-4(r15)
8020edb4:	70ffff17 	ldw	r3,-4(r14)
8020edb8:	8a000017 	ldw	r8,0(r17)
8020edbc:	1806d43a 	srli	r3,r3,16
8020edc0:	413fffcc 	andi	r4,r8,65535
8020edc4:	1fc7383a 	mul	r3,r3,ra
8020edc8:	1907883a 	add	r3,r3,r4
8020edcc:	1947883a 	add	r3,r3,r5
8020edd0:	180ed43a 	srli	r7,r3,16
8020edd4:	727fe936 	bltu	r14,r9,8020ed7c <__reset+0xfa1eed7c>
8020edd8:	90c00115 	stw	r3,4(r18)
8020eddc:	31800104 	addi	r6,r6,4
8020ede0:	5ac00104 	addi	r11,r11,4
8020ede4:	333fbe36 	bltu	r6,r12,8020ece0 <__reset+0xfa1eece0>
8020ede8:	0400090e 	bge	zero,r16,8020ee10 <__multiply+0x1d4>
8020edec:	50ffff17 	ldw	r3,-4(r10)
8020edf0:	52bfff04 	addi	r10,r10,-4
8020edf4:	18000326 	beq	r3,zero,8020ee04 <__multiply+0x1c8>
8020edf8:	00000506 	br	8020ee10 <__multiply+0x1d4>
8020edfc:	50c00017 	ldw	r3,0(r10)
8020ee00:	1800031e 	bne	r3,zero,8020ee10 <__multiply+0x1d4>
8020ee04:	843fffc4 	addi	r16,r16,-1
8020ee08:	52bfff04 	addi	r10,r10,-4
8020ee0c:	803ffb1e 	bne	r16,zero,8020edfc <__reset+0xfa1eedfc>
8020ee10:	14000415 	stw	r16,16(r2)
8020ee14:	dfc00517 	ldw	ra,20(sp)
8020ee18:	dd000417 	ldw	r20,16(sp)
8020ee1c:	dcc00317 	ldw	r19,12(sp)
8020ee20:	dc800217 	ldw	r18,8(sp)
8020ee24:	dc400117 	ldw	r17,4(sp)
8020ee28:	dc000017 	ldw	r16,0(sp)
8020ee2c:	dec00604 	addi	sp,sp,24
8020ee30:	f800283a 	ret

8020ee34 <__pow5mult>:
8020ee34:	defffa04 	addi	sp,sp,-24
8020ee38:	dcc00315 	stw	r19,12(sp)
8020ee3c:	dc000015 	stw	r16,0(sp)
8020ee40:	dfc00515 	stw	ra,20(sp)
8020ee44:	dd000415 	stw	r20,16(sp)
8020ee48:	dc800215 	stw	r18,8(sp)
8020ee4c:	dc400115 	stw	r17,4(sp)
8020ee50:	308000cc 	andi	r2,r6,3
8020ee54:	3021883a 	mov	r16,r6
8020ee58:	2027883a 	mov	r19,r4
8020ee5c:	10002f1e 	bne	r2,zero,8020ef1c <__pow5mult+0xe8>
8020ee60:	2825883a 	mov	r18,r5
8020ee64:	8021d0ba 	srai	r16,r16,2
8020ee68:	80001a26 	beq	r16,zero,8020eed4 <__pow5mult+0xa0>
8020ee6c:	9c401217 	ldw	r17,72(r19)
8020ee70:	8800061e 	bne	r17,zero,8020ee8c <__pow5mult+0x58>
8020ee74:	00003406 	br	8020ef48 <__pow5mult+0x114>
8020ee78:	8021d07a 	srai	r16,r16,1
8020ee7c:	80001526 	beq	r16,zero,8020eed4 <__pow5mult+0xa0>
8020ee80:	88800017 	ldw	r2,0(r17)
8020ee84:	10001c26 	beq	r2,zero,8020eef8 <__pow5mult+0xc4>
8020ee88:	1023883a 	mov	r17,r2
8020ee8c:	8080004c 	andi	r2,r16,1
8020ee90:	103ff926 	beq	r2,zero,8020ee78 <__reset+0xfa1eee78>
8020ee94:	880d883a 	mov	r6,r17
8020ee98:	900b883a 	mov	r5,r18
8020ee9c:	9809883a 	mov	r4,r19
8020eea0:	020ec3c0 	call	8020ec3c <__multiply>
8020eea4:	90001b26 	beq	r18,zero,8020ef14 <__pow5mult+0xe0>
8020eea8:	91000117 	ldw	r4,4(r18)
8020eeac:	98c01317 	ldw	r3,76(r19)
8020eeb0:	8021d07a 	srai	r16,r16,1
8020eeb4:	2109883a 	add	r4,r4,r4
8020eeb8:	2109883a 	add	r4,r4,r4
8020eebc:	1907883a 	add	r3,r3,r4
8020eec0:	19000017 	ldw	r4,0(r3)
8020eec4:	91000015 	stw	r4,0(r18)
8020eec8:	1c800015 	stw	r18,0(r3)
8020eecc:	1025883a 	mov	r18,r2
8020eed0:	803feb1e 	bne	r16,zero,8020ee80 <__reset+0xfa1eee80>
8020eed4:	9005883a 	mov	r2,r18
8020eed8:	dfc00517 	ldw	ra,20(sp)
8020eedc:	dd000417 	ldw	r20,16(sp)
8020eee0:	dcc00317 	ldw	r19,12(sp)
8020eee4:	dc800217 	ldw	r18,8(sp)
8020eee8:	dc400117 	ldw	r17,4(sp)
8020eeec:	dc000017 	ldw	r16,0(sp)
8020eef0:	dec00604 	addi	sp,sp,24
8020eef4:	f800283a 	ret
8020eef8:	880d883a 	mov	r6,r17
8020eefc:	880b883a 	mov	r5,r17
8020ef00:	9809883a 	mov	r4,r19
8020ef04:	020ec3c0 	call	8020ec3c <__multiply>
8020ef08:	88800015 	stw	r2,0(r17)
8020ef0c:	10000015 	stw	zero,0(r2)
8020ef10:	003fdd06 	br	8020ee88 <__reset+0xfa1eee88>
8020ef14:	1025883a 	mov	r18,r2
8020ef18:	003fd706 	br	8020ee78 <__reset+0xfa1eee78>
8020ef1c:	10bfffc4 	addi	r2,r2,-1
8020ef20:	1085883a 	add	r2,r2,r2
8020ef24:	00e008b4 	movhi	r3,32802
8020ef28:	18f2b704 	addi	r3,r3,-13604
8020ef2c:	1085883a 	add	r2,r2,r2
8020ef30:	1885883a 	add	r2,r3,r2
8020ef34:	11800017 	ldw	r6,0(r2)
8020ef38:	000f883a 	mov	r7,zero
8020ef3c:	020e8c40 	call	8020e8c4 <__multadd>
8020ef40:	1025883a 	mov	r18,r2
8020ef44:	003fc706 	br	8020ee64 <__reset+0xfa1eee64>
8020ef48:	05000044 	movi	r20,1
8020ef4c:	a00b883a 	mov	r5,r20
8020ef50:	9809883a 	mov	r4,r19
8020ef54:	020e7f40 	call	8020e7f4 <_Balloc>
8020ef58:	1023883a 	mov	r17,r2
8020ef5c:	00809c44 	movi	r2,625
8020ef60:	88800515 	stw	r2,20(r17)
8020ef64:	8d000415 	stw	r20,16(r17)
8020ef68:	9c401215 	stw	r17,72(r19)
8020ef6c:	88000015 	stw	zero,0(r17)
8020ef70:	003fc606 	br	8020ee8c <__reset+0xfa1eee8c>

8020ef74 <__lshift>:
8020ef74:	defff904 	addi	sp,sp,-28
8020ef78:	dd400515 	stw	r21,20(sp)
8020ef7c:	dcc00315 	stw	r19,12(sp)
8020ef80:	302bd17a 	srai	r21,r6,5
8020ef84:	2cc00417 	ldw	r19,16(r5)
8020ef88:	28800217 	ldw	r2,8(r5)
8020ef8c:	dd000415 	stw	r20,16(sp)
8020ef90:	ace7883a 	add	r19,r21,r19
8020ef94:	dc800215 	stw	r18,8(sp)
8020ef98:	dc400115 	stw	r17,4(sp)
8020ef9c:	dc000015 	stw	r16,0(sp)
8020efa0:	dfc00615 	stw	ra,24(sp)
8020efa4:	9c000044 	addi	r16,r19,1
8020efa8:	2823883a 	mov	r17,r5
8020efac:	3029883a 	mov	r20,r6
8020efb0:	2025883a 	mov	r18,r4
8020efb4:	29400117 	ldw	r5,4(r5)
8020efb8:	1400030e 	bge	r2,r16,8020efc8 <__lshift+0x54>
8020efbc:	1085883a 	add	r2,r2,r2
8020efc0:	29400044 	addi	r5,r5,1
8020efc4:	143ffd16 	blt	r2,r16,8020efbc <__reset+0xfa1eefbc>
8020efc8:	9009883a 	mov	r4,r18
8020efcc:	020e7f40 	call	8020e7f4 <_Balloc>
8020efd0:	10c00504 	addi	r3,r2,20
8020efd4:	0540070e 	bge	zero,r21,8020eff4 <__lshift+0x80>
8020efd8:	ad6b883a 	add	r21,r21,r21
8020efdc:	ad6b883a 	add	r21,r21,r21
8020efe0:	1809883a 	mov	r4,r3
8020efe4:	1d47883a 	add	r3,r3,r21
8020efe8:	20000015 	stw	zero,0(r4)
8020efec:	21000104 	addi	r4,r4,4
8020eff0:	193ffd1e 	bne	r3,r4,8020efe8 <__reset+0xfa1eefe8>
8020eff4:	8a000417 	ldw	r8,16(r17)
8020eff8:	89000504 	addi	r4,r17,20
8020effc:	a18007cc 	andi	r6,r20,31
8020f000:	4211883a 	add	r8,r8,r8
8020f004:	4211883a 	add	r8,r8,r8
8020f008:	2211883a 	add	r8,r4,r8
8020f00c:	30002326 	beq	r6,zero,8020f09c <__lshift+0x128>
8020f010:	02400804 	movi	r9,32
8020f014:	4993c83a 	sub	r9,r9,r6
8020f018:	000b883a 	mov	r5,zero
8020f01c:	21c00017 	ldw	r7,0(r4)
8020f020:	1815883a 	mov	r10,r3
8020f024:	18c00104 	addi	r3,r3,4
8020f028:	398e983a 	sll	r7,r7,r6
8020f02c:	21000104 	addi	r4,r4,4
8020f030:	394ab03a 	or	r5,r7,r5
8020f034:	197fff15 	stw	r5,-4(r3)
8020f038:	217fff17 	ldw	r5,-4(r4)
8020f03c:	2a4ad83a 	srl	r5,r5,r9
8020f040:	223ff636 	bltu	r4,r8,8020f01c <__reset+0xfa1ef01c>
8020f044:	51400115 	stw	r5,4(r10)
8020f048:	28001a1e 	bne	r5,zero,8020f0b4 <__lshift+0x140>
8020f04c:	843fffc4 	addi	r16,r16,-1
8020f050:	14000415 	stw	r16,16(r2)
8020f054:	88000826 	beq	r17,zero,8020f078 <__lshift+0x104>
8020f058:	89000117 	ldw	r4,4(r17)
8020f05c:	90c01317 	ldw	r3,76(r18)
8020f060:	2109883a 	add	r4,r4,r4
8020f064:	2109883a 	add	r4,r4,r4
8020f068:	1907883a 	add	r3,r3,r4
8020f06c:	19000017 	ldw	r4,0(r3)
8020f070:	89000015 	stw	r4,0(r17)
8020f074:	1c400015 	stw	r17,0(r3)
8020f078:	dfc00617 	ldw	ra,24(sp)
8020f07c:	dd400517 	ldw	r21,20(sp)
8020f080:	dd000417 	ldw	r20,16(sp)
8020f084:	dcc00317 	ldw	r19,12(sp)
8020f088:	dc800217 	ldw	r18,8(sp)
8020f08c:	dc400117 	ldw	r17,4(sp)
8020f090:	dc000017 	ldw	r16,0(sp)
8020f094:	dec00704 	addi	sp,sp,28
8020f098:	f800283a 	ret
8020f09c:	21400017 	ldw	r5,0(r4)
8020f0a0:	18c00104 	addi	r3,r3,4
8020f0a4:	21000104 	addi	r4,r4,4
8020f0a8:	197fff15 	stw	r5,-4(r3)
8020f0ac:	223ffb36 	bltu	r4,r8,8020f09c <__reset+0xfa1ef09c>
8020f0b0:	003fe606 	br	8020f04c <__reset+0xfa1ef04c>
8020f0b4:	9c000084 	addi	r16,r19,2
8020f0b8:	003fe406 	br	8020f04c <__reset+0xfa1ef04c>

8020f0bc <__mcmp>:
8020f0bc:	20800417 	ldw	r2,16(r4)
8020f0c0:	28c00417 	ldw	r3,16(r5)
8020f0c4:	10c5c83a 	sub	r2,r2,r3
8020f0c8:	1000111e 	bne	r2,zero,8020f110 <__mcmp+0x54>
8020f0cc:	18c7883a 	add	r3,r3,r3
8020f0d0:	18c7883a 	add	r3,r3,r3
8020f0d4:	21000504 	addi	r4,r4,20
8020f0d8:	29400504 	addi	r5,r5,20
8020f0dc:	20c5883a 	add	r2,r4,r3
8020f0e0:	28cb883a 	add	r5,r5,r3
8020f0e4:	00000106 	br	8020f0ec <__mcmp+0x30>
8020f0e8:	20800a2e 	bgeu	r4,r2,8020f114 <__mcmp+0x58>
8020f0ec:	10bfff04 	addi	r2,r2,-4
8020f0f0:	297fff04 	addi	r5,r5,-4
8020f0f4:	11800017 	ldw	r6,0(r2)
8020f0f8:	28c00017 	ldw	r3,0(r5)
8020f0fc:	30fffa26 	beq	r6,r3,8020f0e8 <__reset+0xfa1ef0e8>
8020f100:	30c00236 	bltu	r6,r3,8020f10c <__mcmp+0x50>
8020f104:	00800044 	movi	r2,1
8020f108:	f800283a 	ret
8020f10c:	00bfffc4 	movi	r2,-1
8020f110:	f800283a 	ret
8020f114:	0005883a 	mov	r2,zero
8020f118:	f800283a 	ret

8020f11c <__mdiff>:
8020f11c:	28c00417 	ldw	r3,16(r5)
8020f120:	30800417 	ldw	r2,16(r6)
8020f124:	defffa04 	addi	sp,sp,-24
8020f128:	dcc00315 	stw	r19,12(sp)
8020f12c:	dc800215 	stw	r18,8(sp)
8020f130:	dfc00515 	stw	ra,20(sp)
8020f134:	dd000415 	stw	r20,16(sp)
8020f138:	dc400115 	stw	r17,4(sp)
8020f13c:	dc000015 	stw	r16,0(sp)
8020f140:	1887c83a 	sub	r3,r3,r2
8020f144:	2825883a 	mov	r18,r5
8020f148:	3027883a 	mov	r19,r6
8020f14c:	1800141e 	bne	r3,zero,8020f1a0 <__mdiff+0x84>
8020f150:	1085883a 	add	r2,r2,r2
8020f154:	1085883a 	add	r2,r2,r2
8020f158:	2a000504 	addi	r8,r5,20
8020f15c:	34000504 	addi	r16,r6,20
8020f160:	4087883a 	add	r3,r8,r2
8020f164:	8085883a 	add	r2,r16,r2
8020f168:	00000106 	br	8020f170 <__mdiff+0x54>
8020f16c:	40c0592e 	bgeu	r8,r3,8020f2d4 <__mdiff+0x1b8>
8020f170:	18ffff04 	addi	r3,r3,-4
8020f174:	10bfff04 	addi	r2,r2,-4
8020f178:	19c00017 	ldw	r7,0(r3)
8020f17c:	11400017 	ldw	r5,0(r2)
8020f180:	397ffa26 	beq	r7,r5,8020f16c <__reset+0xfa1ef16c>
8020f184:	3940592e 	bgeu	r7,r5,8020f2ec <__mdiff+0x1d0>
8020f188:	9005883a 	mov	r2,r18
8020f18c:	4023883a 	mov	r17,r8
8020f190:	9825883a 	mov	r18,r19
8020f194:	05000044 	movi	r20,1
8020f198:	1027883a 	mov	r19,r2
8020f19c:	00000406 	br	8020f1b0 <__mdiff+0x94>
8020f1a0:	18005616 	blt	r3,zero,8020f2fc <__mdiff+0x1e0>
8020f1a4:	34400504 	addi	r17,r6,20
8020f1a8:	2c000504 	addi	r16,r5,20
8020f1ac:	0029883a 	mov	r20,zero
8020f1b0:	91400117 	ldw	r5,4(r18)
8020f1b4:	020e7f40 	call	8020e7f4 <_Balloc>
8020f1b8:	92400417 	ldw	r9,16(r18)
8020f1bc:	9b000417 	ldw	r12,16(r19)
8020f1c0:	12c00504 	addi	r11,r2,20
8020f1c4:	4a51883a 	add	r8,r9,r9
8020f1c8:	6319883a 	add	r12,r12,r12
8020f1cc:	4211883a 	add	r8,r8,r8
8020f1d0:	6319883a 	add	r12,r12,r12
8020f1d4:	15000315 	stw	r20,12(r2)
8020f1d8:	8211883a 	add	r8,r16,r8
8020f1dc:	8b19883a 	add	r12,r17,r12
8020f1e0:	0007883a 	mov	r3,zero
8020f1e4:	81400017 	ldw	r5,0(r16)
8020f1e8:	89c00017 	ldw	r7,0(r17)
8020f1ec:	59800104 	addi	r6,r11,4
8020f1f0:	293fffcc 	andi	r4,r5,65535
8020f1f4:	20c7883a 	add	r3,r4,r3
8020f1f8:	393fffcc 	andi	r4,r7,65535
8020f1fc:	1909c83a 	sub	r4,r3,r4
8020f200:	280ad43a 	srli	r5,r5,16
8020f204:	380ed43a 	srli	r7,r7,16
8020f208:	2007d43a 	srai	r3,r4,16
8020f20c:	213fffcc 	andi	r4,r4,65535
8020f210:	29cbc83a 	sub	r5,r5,r7
8020f214:	28c7883a 	add	r3,r5,r3
8020f218:	180a943a 	slli	r5,r3,16
8020f21c:	8c400104 	addi	r17,r17,4
8020f220:	84000104 	addi	r16,r16,4
8020f224:	2908b03a 	or	r4,r5,r4
8020f228:	59000015 	stw	r4,0(r11)
8020f22c:	1807d43a 	srai	r3,r3,16
8020f230:	3015883a 	mov	r10,r6
8020f234:	3017883a 	mov	r11,r6
8020f238:	8b3fea36 	bltu	r17,r12,8020f1e4 <__reset+0xfa1ef1e4>
8020f23c:	8200162e 	bgeu	r16,r8,8020f298 <__mdiff+0x17c>
8020f240:	8017883a 	mov	r11,r16
8020f244:	59400017 	ldw	r5,0(r11)
8020f248:	31800104 	addi	r6,r6,4
8020f24c:	5ac00104 	addi	r11,r11,4
8020f250:	293fffcc 	andi	r4,r5,65535
8020f254:	20c7883a 	add	r3,r4,r3
8020f258:	280ed43a 	srli	r7,r5,16
8020f25c:	180bd43a 	srai	r5,r3,16
8020f260:	193fffcc 	andi	r4,r3,65535
8020f264:	3947883a 	add	r3,r7,r5
8020f268:	180a943a 	slli	r5,r3,16
8020f26c:	1807d43a 	srai	r3,r3,16
8020f270:	2908b03a 	or	r4,r5,r4
8020f274:	313fff15 	stw	r4,-4(r6)
8020f278:	5a3ff236 	bltu	r11,r8,8020f244 <__reset+0xfa1ef244>
8020f27c:	0406303a 	nor	r3,zero,r16
8020f280:	1a07883a 	add	r3,r3,r8
8020f284:	1806d0ba 	srli	r3,r3,2
8020f288:	18c00044 	addi	r3,r3,1
8020f28c:	18c7883a 	add	r3,r3,r3
8020f290:	18c7883a 	add	r3,r3,r3
8020f294:	50d5883a 	add	r10,r10,r3
8020f298:	50ffff04 	addi	r3,r10,-4
8020f29c:	2000041e 	bne	r4,zero,8020f2b0 <__mdiff+0x194>
8020f2a0:	18ffff04 	addi	r3,r3,-4
8020f2a4:	19000017 	ldw	r4,0(r3)
8020f2a8:	4a7fffc4 	addi	r9,r9,-1
8020f2ac:	203ffc26 	beq	r4,zero,8020f2a0 <__reset+0xfa1ef2a0>
8020f2b0:	12400415 	stw	r9,16(r2)
8020f2b4:	dfc00517 	ldw	ra,20(sp)
8020f2b8:	dd000417 	ldw	r20,16(sp)
8020f2bc:	dcc00317 	ldw	r19,12(sp)
8020f2c0:	dc800217 	ldw	r18,8(sp)
8020f2c4:	dc400117 	ldw	r17,4(sp)
8020f2c8:	dc000017 	ldw	r16,0(sp)
8020f2cc:	dec00604 	addi	sp,sp,24
8020f2d0:	f800283a 	ret
8020f2d4:	000b883a 	mov	r5,zero
8020f2d8:	020e7f40 	call	8020e7f4 <_Balloc>
8020f2dc:	00c00044 	movi	r3,1
8020f2e0:	10c00415 	stw	r3,16(r2)
8020f2e4:	10000515 	stw	zero,20(r2)
8020f2e8:	003ff206 	br	8020f2b4 <__reset+0xfa1ef2b4>
8020f2ec:	8023883a 	mov	r17,r16
8020f2f0:	0029883a 	mov	r20,zero
8020f2f4:	4021883a 	mov	r16,r8
8020f2f8:	003fad06 	br	8020f1b0 <__reset+0xfa1ef1b0>
8020f2fc:	9005883a 	mov	r2,r18
8020f300:	94400504 	addi	r17,r18,20
8020f304:	9c000504 	addi	r16,r19,20
8020f308:	9825883a 	mov	r18,r19
8020f30c:	05000044 	movi	r20,1
8020f310:	1027883a 	mov	r19,r2
8020f314:	003fa606 	br	8020f1b0 <__reset+0xfa1ef1b0>

8020f318 <__ulp>:
8020f318:	295ffc2c 	andhi	r5,r5,32752
8020f31c:	00bf3034 	movhi	r2,64704
8020f320:	2887883a 	add	r3,r5,r2
8020f324:	00c0020e 	bge	zero,r3,8020f330 <__ulp+0x18>
8020f328:	0005883a 	mov	r2,zero
8020f32c:	f800283a 	ret
8020f330:	00c7c83a 	sub	r3,zero,r3
8020f334:	1807d53a 	srai	r3,r3,20
8020f338:	008004c4 	movi	r2,19
8020f33c:	10c00b0e 	bge	r2,r3,8020f36c <__ulp+0x54>
8020f340:	18bffb04 	addi	r2,r3,-20
8020f344:	01000784 	movi	r4,30
8020f348:	0007883a 	mov	r3,zero
8020f34c:	20800516 	blt	r4,r2,8020f364 <__ulp+0x4c>
8020f350:	010007c4 	movi	r4,31
8020f354:	2089c83a 	sub	r4,r4,r2
8020f358:	00800044 	movi	r2,1
8020f35c:	1104983a 	sll	r2,r2,r4
8020f360:	f800283a 	ret
8020f364:	00800044 	movi	r2,1
8020f368:	f800283a 	ret
8020f36c:	01400234 	movhi	r5,8
8020f370:	28c7d83a 	sra	r3,r5,r3
8020f374:	0005883a 	mov	r2,zero
8020f378:	f800283a 	ret

8020f37c <__b2d>:
8020f37c:	defffa04 	addi	sp,sp,-24
8020f380:	dc000015 	stw	r16,0(sp)
8020f384:	24000417 	ldw	r16,16(r4)
8020f388:	dc400115 	stw	r17,4(sp)
8020f38c:	24400504 	addi	r17,r4,20
8020f390:	8421883a 	add	r16,r16,r16
8020f394:	8421883a 	add	r16,r16,r16
8020f398:	8c21883a 	add	r16,r17,r16
8020f39c:	dc800215 	stw	r18,8(sp)
8020f3a0:	84bfff17 	ldw	r18,-4(r16)
8020f3a4:	dd000415 	stw	r20,16(sp)
8020f3a8:	dcc00315 	stw	r19,12(sp)
8020f3ac:	9009883a 	mov	r4,r18
8020f3b0:	2829883a 	mov	r20,r5
8020f3b4:	dfc00515 	stw	ra,20(sp)
8020f3b8:	020eae80 	call	8020eae8 <__hi0bits>
8020f3bc:	00c00804 	movi	r3,32
8020f3c0:	1889c83a 	sub	r4,r3,r2
8020f3c4:	a1000015 	stw	r4,0(r20)
8020f3c8:	01000284 	movi	r4,10
8020f3cc:	84ffff04 	addi	r19,r16,-4
8020f3d0:	20801216 	blt	r4,r2,8020f41c <__b2d+0xa0>
8020f3d4:	018002c4 	movi	r6,11
8020f3d8:	308dc83a 	sub	r6,r6,r2
8020f3dc:	9186d83a 	srl	r3,r18,r6
8020f3e0:	18cffc34 	orhi	r3,r3,16368
8020f3e4:	8cc0212e 	bgeu	r17,r19,8020f46c <__b2d+0xf0>
8020f3e8:	813ffe17 	ldw	r4,-8(r16)
8020f3ec:	218cd83a 	srl	r6,r4,r6
8020f3f0:	10800544 	addi	r2,r2,21
8020f3f4:	9084983a 	sll	r2,r18,r2
8020f3f8:	1184b03a 	or	r2,r2,r6
8020f3fc:	dfc00517 	ldw	ra,20(sp)
8020f400:	dd000417 	ldw	r20,16(sp)
8020f404:	dcc00317 	ldw	r19,12(sp)
8020f408:	dc800217 	ldw	r18,8(sp)
8020f40c:	dc400117 	ldw	r17,4(sp)
8020f410:	dc000017 	ldw	r16,0(sp)
8020f414:	dec00604 	addi	sp,sp,24
8020f418:	f800283a 	ret
8020f41c:	8cc00f2e 	bgeu	r17,r19,8020f45c <__b2d+0xe0>
8020f420:	117ffd44 	addi	r5,r2,-11
8020f424:	80bffe17 	ldw	r2,-8(r16)
8020f428:	28000e26 	beq	r5,zero,8020f464 <__b2d+0xe8>
8020f42c:	1949c83a 	sub	r4,r3,r5
8020f430:	9164983a 	sll	r18,r18,r5
8020f434:	1106d83a 	srl	r3,r2,r4
8020f438:	81bffe04 	addi	r6,r16,-8
8020f43c:	948ffc34 	orhi	r18,r18,16368
8020f440:	90c6b03a 	or	r3,r18,r3
8020f444:	89800e2e 	bgeu	r17,r6,8020f480 <__b2d+0x104>
8020f448:	81bffd17 	ldw	r6,-12(r16)
8020f44c:	1144983a 	sll	r2,r2,r5
8020f450:	310ad83a 	srl	r5,r6,r4
8020f454:	2884b03a 	or	r2,r5,r2
8020f458:	003fe806 	br	8020f3fc <__reset+0xfa1ef3fc>
8020f45c:	10bffd44 	addi	r2,r2,-11
8020f460:	1000041e 	bne	r2,zero,8020f474 <__b2d+0xf8>
8020f464:	90cffc34 	orhi	r3,r18,16368
8020f468:	003fe406 	br	8020f3fc <__reset+0xfa1ef3fc>
8020f46c:	000d883a 	mov	r6,zero
8020f470:	003fdf06 	br	8020f3f0 <__reset+0xfa1ef3f0>
8020f474:	90a4983a 	sll	r18,r18,r2
8020f478:	0005883a 	mov	r2,zero
8020f47c:	003ff906 	br	8020f464 <__reset+0xfa1ef464>
8020f480:	1144983a 	sll	r2,r2,r5
8020f484:	003fdd06 	br	8020f3fc <__reset+0xfa1ef3fc>

8020f488 <__d2b>:
8020f488:	defff804 	addi	sp,sp,-32
8020f48c:	dc000215 	stw	r16,8(sp)
8020f490:	3021883a 	mov	r16,r6
8020f494:	dc400315 	stw	r17,12(sp)
8020f498:	8022907a 	slli	r17,r16,1
8020f49c:	dd000615 	stw	r20,24(sp)
8020f4a0:	2829883a 	mov	r20,r5
8020f4a4:	01400044 	movi	r5,1
8020f4a8:	dcc00515 	stw	r19,20(sp)
8020f4ac:	dc800415 	stw	r18,16(sp)
8020f4b0:	dfc00715 	stw	ra,28(sp)
8020f4b4:	3825883a 	mov	r18,r7
8020f4b8:	8822d57a 	srli	r17,r17,21
8020f4bc:	020e7f40 	call	8020e7f4 <_Balloc>
8020f4c0:	1027883a 	mov	r19,r2
8020f4c4:	00800434 	movhi	r2,16
8020f4c8:	10bfffc4 	addi	r2,r2,-1
8020f4cc:	808c703a 	and	r6,r16,r2
8020f4d0:	88000126 	beq	r17,zero,8020f4d8 <__d2b+0x50>
8020f4d4:	31800434 	orhi	r6,r6,16
8020f4d8:	d9800015 	stw	r6,0(sp)
8020f4dc:	a0002426 	beq	r20,zero,8020f570 <__d2b+0xe8>
8020f4e0:	d9000104 	addi	r4,sp,4
8020f4e4:	dd000115 	stw	r20,4(sp)
8020f4e8:	020eb500 	call	8020eb50 <__lo0bits>
8020f4ec:	d8c00017 	ldw	r3,0(sp)
8020f4f0:	10002f1e 	bne	r2,zero,8020f5b0 <__d2b+0x128>
8020f4f4:	d9000117 	ldw	r4,4(sp)
8020f4f8:	99000515 	stw	r4,20(r19)
8020f4fc:	1821003a 	cmpeq	r16,r3,zero
8020f500:	01000084 	movi	r4,2
8020f504:	2421c83a 	sub	r16,r4,r16
8020f508:	98c00615 	stw	r3,24(r19)
8020f50c:	9c000415 	stw	r16,16(r19)
8020f510:	88001f1e 	bne	r17,zero,8020f590 <__d2b+0x108>
8020f514:	10bef384 	addi	r2,r2,-1074
8020f518:	90800015 	stw	r2,0(r18)
8020f51c:	00900034 	movhi	r2,16384
8020f520:	10bfffc4 	addi	r2,r2,-1
8020f524:	8085883a 	add	r2,r16,r2
8020f528:	1085883a 	add	r2,r2,r2
8020f52c:	1085883a 	add	r2,r2,r2
8020f530:	9885883a 	add	r2,r19,r2
8020f534:	11000517 	ldw	r4,20(r2)
8020f538:	8020917a 	slli	r16,r16,5
8020f53c:	020eae80 	call	8020eae8 <__hi0bits>
8020f540:	d8c00817 	ldw	r3,32(sp)
8020f544:	8085c83a 	sub	r2,r16,r2
8020f548:	18800015 	stw	r2,0(r3)
8020f54c:	9805883a 	mov	r2,r19
8020f550:	dfc00717 	ldw	ra,28(sp)
8020f554:	dd000617 	ldw	r20,24(sp)
8020f558:	dcc00517 	ldw	r19,20(sp)
8020f55c:	dc800417 	ldw	r18,16(sp)
8020f560:	dc400317 	ldw	r17,12(sp)
8020f564:	dc000217 	ldw	r16,8(sp)
8020f568:	dec00804 	addi	sp,sp,32
8020f56c:	f800283a 	ret
8020f570:	d809883a 	mov	r4,sp
8020f574:	020eb500 	call	8020eb50 <__lo0bits>
8020f578:	d8c00017 	ldw	r3,0(sp)
8020f57c:	04000044 	movi	r16,1
8020f580:	9c000415 	stw	r16,16(r19)
8020f584:	98c00515 	stw	r3,20(r19)
8020f588:	10800804 	addi	r2,r2,32
8020f58c:	883fe126 	beq	r17,zero,8020f514 <__reset+0xfa1ef514>
8020f590:	00c00d44 	movi	r3,53
8020f594:	8c7ef344 	addi	r17,r17,-1075
8020f598:	88a3883a 	add	r17,r17,r2
8020f59c:	1885c83a 	sub	r2,r3,r2
8020f5a0:	d8c00817 	ldw	r3,32(sp)
8020f5a4:	94400015 	stw	r17,0(r18)
8020f5a8:	18800015 	stw	r2,0(r3)
8020f5ac:	003fe706 	br	8020f54c <__reset+0xfa1ef54c>
8020f5b0:	01000804 	movi	r4,32
8020f5b4:	2089c83a 	sub	r4,r4,r2
8020f5b8:	1908983a 	sll	r4,r3,r4
8020f5bc:	d9400117 	ldw	r5,4(sp)
8020f5c0:	1886d83a 	srl	r3,r3,r2
8020f5c4:	2148b03a 	or	r4,r4,r5
8020f5c8:	99000515 	stw	r4,20(r19)
8020f5cc:	d8c00015 	stw	r3,0(sp)
8020f5d0:	003fca06 	br	8020f4fc <__reset+0xfa1ef4fc>

8020f5d4 <__ratio>:
8020f5d4:	defff904 	addi	sp,sp,-28
8020f5d8:	dc400315 	stw	r17,12(sp)
8020f5dc:	2823883a 	mov	r17,r5
8020f5e0:	d9400104 	addi	r5,sp,4
8020f5e4:	dfc00615 	stw	ra,24(sp)
8020f5e8:	dcc00515 	stw	r19,20(sp)
8020f5ec:	dc800415 	stw	r18,16(sp)
8020f5f0:	2027883a 	mov	r19,r4
8020f5f4:	dc000215 	stw	r16,8(sp)
8020f5f8:	020f37c0 	call	8020f37c <__b2d>
8020f5fc:	d80b883a 	mov	r5,sp
8020f600:	8809883a 	mov	r4,r17
8020f604:	1025883a 	mov	r18,r2
8020f608:	1821883a 	mov	r16,r3
8020f60c:	020f37c0 	call	8020f37c <__b2d>
8020f610:	8a000417 	ldw	r8,16(r17)
8020f614:	99000417 	ldw	r4,16(r19)
8020f618:	d9400117 	ldw	r5,4(sp)
8020f61c:	2209c83a 	sub	r4,r4,r8
8020f620:	2010917a 	slli	r8,r4,5
8020f624:	d9000017 	ldw	r4,0(sp)
8020f628:	2909c83a 	sub	r4,r5,r4
8020f62c:	4109883a 	add	r4,r8,r4
8020f630:	01000e0e 	bge	zero,r4,8020f66c <__ratio+0x98>
8020f634:	2008953a 	slli	r4,r4,20
8020f638:	2421883a 	add	r16,r4,r16
8020f63c:	100d883a 	mov	r6,r2
8020f640:	180f883a 	mov	r7,r3
8020f644:	9009883a 	mov	r4,r18
8020f648:	800b883a 	mov	r5,r16
8020f64c:	02148cc0 	call	802148cc <__divdf3>
8020f650:	dfc00617 	ldw	ra,24(sp)
8020f654:	dcc00517 	ldw	r19,20(sp)
8020f658:	dc800417 	ldw	r18,16(sp)
8020f65c:	dc400317 	ldw	r17,12(sp)
8020f660:	dc000217 	ldw	r16,8(sp)
8020f664:	dec00704 	addi	sp,sp,28
8020f668:	f800283a 	ret
8020f66c:	2008953a 	slli	r4,r4,20
8020f670:	1907c83a 	sub	r3,r3,r4
8020f674:	003ff106 	br	8020f63c <__reset+0xfa1ef63c>

8020f678 <_mprec_log10>:
8020f678:	defffe04 	addi	sp,sp,-8
8020f67c:	dc000015 	stw	r16,0(sp)
8020f680:	dfc00115 	stw	ra,4(sp)
8020f684:	008005c4 	movi	r2,23
8020f688:	2021883a 	mov	r16,r4
8020f68c:	11000d0e 	bge	r2,r4,8020f6c4 <_mprec_log10+0x4c>
8020f690:	0005883a 	mov	r2,zero
8020f694:	00cffc34 	movhi	r3,16368
8020f698:	843fffc4 	addi	r16,r16,-1
8020f69c:	000d883a 	mov	r6,zero
8020f6a0:	01d00934 	movhi	r7,16420
8020f6a4:	1009883a 	mov	r4,r2
8020f6a8:	180b883a 	mov	r5,r3
8020f6ac:	021540c0 	call	8021540c <__muldf3>
8020f6b0:	803ff91e 	bne	r16,zero,8020f698 <__reset+0xfa1ef698>
8020f6b4:	dfc00117 	ldw	ra,4(sp)
8020f6b8:	dc000017 	ldw	r16,0(sp)
8020f6bc:	dec00204 	addi	sp,sp,8
8020f6c0:	f800283a 	ret
8020f6c4:	202090fa 	slli	r16,r4,3
8020f6c8:	00a008b4 	movhi	r2,32802
8020f6cc:	10b2ce04 	addi	r2,r2,-13512
8020f6d0:	1421883a 	add	r16,r2,r16
8020f6d4:	80800017 	ldw	r2,0(r16)
8020f6d8:	80c00117 	ldw	r3,4(r16)
8020f6dc:	dfc00117 	ldw	ra,4(sp)
8020f6e0:	dc000017 	ldw	r16,0(sp)
8020f6e4:	dec00204 	addi	sp,sp,8
8020f6e8:	f800283a 	ret

8020f6ec <__copybits>:
8020f6ec:	297fffc4 	addi	r5,r5,-1
8020f6f0:	280fd17a 	srai	r7,r5,5
8020f6f4:	30c00417 	ldw	r3,16(r6)
8020f6f8:	30800504 	addi	r2,r6,20
8020f6fc:	39c00044 	addi	r7,r7,1
8020f700:	18c7883a 	add	r3,r3,r3
8020f704:	39cf883a 	add	r7,r7,r7
8020f708:	18c7883a 	add	r3,r3,r3
8020f70c:	39cf883a 	add	r7,r7,r7
8020f710:	10c7883a 	add	r3,r2,r3
8020f714:	21cf883a 	add	r7,r4,r7
8020f718:	10c00d2e 	bgeu	r2,r3,8020f750 <__copybits+0x64>
8020f71c:	200b883a 	mov	r5,r4
8020f720:	12000017 	ldw	r8,0(r2)
8020f724:	29400104 	addi	r5,r5,4
8020f728:	10800104 	addi	r2,r2,4
8020f72c:	2a3fff15 	stw	r8,-4(r5)
8020f730:	10fffb36 	bltu	r2,r3,8020f720 <__reset+0xfa1ef720>
8020f734:	1985c83a 	sub	r2,r3,r6
8020f738:	10bffac4 	addi	r2,r2,-21
8020f73c:	1004d0ba 	srli	r2,r2,2
8020f740:	10800044 	addi	r2,r2,1
8020f744:	1085883a 	add	r2,r2,r2
8020f748:	1085883a 	add	r2,r2,r2
8020f74c:	2089883a 	add	r4,r4,r2
8020f750:	21c0032e 	bgeu	r4,r7,8020f760 <__copybits+0x74>
8020f754:	20000015 	stw	zero,0(r4)
8020f758:	21000104 	addi	r4,r4,4
8020f75c:	21fffd36 	bltu	r4,r7,8020f754 <__reset+0xfa1ef754>
8020f760:	f800283a 	ret

8020f764 <__any_on>:
8020f764:	20c00417 	ldw	r3,16(r4)
8020f768:	2805d17a 	srai	r2,r5,5
8020f76c:	21000504 	addi	r4,r4,20
8020f770:	18800d0e 	bge	r3,r2,8020f7a8 <__any_on+0x44>
8020f774:	18c7883a 	add	r3,r3,r3
8020f778:	18c7883a 	add	r3,r3,r3
8020f77c:	20c7883a 	add	r3,r4,r3
8020f780:	20c0192e 	bgeu	r4,r3,8020f7e8 <__any_on+0x84>
8020f784:	18bfff17 	ldw	r2,-4(r3)
8020f788:	18ffff04 	addi	r3,r3,-4
8020f78c:	1000041e 	bne	r2,zero,8020f7a0 <__any_on+0x3c>
8020f790:	20c0142e 	bgeu	r4,r3,8020f7e4 <__any_on+0x80>
8020f794:	18ffff04 	addi	r3,r3,-4
8020f798:	19400017 	ldw	r5,0(r3)
8020f79c:	283ffc26 	beq	r5,zero,8020f790 <__reset+0xfa1ef790>
8020f7a0:	00800044 	movi	r2,1
8020f7a4:	f800283a 	ret
8020f7a8:	10c00a0e 	bge	r2,r3,8020f7d4 <__any_on+0x70>
8020f7ac:	1085883a 	add	r2,r2,r2
8020f7b0:	1085883a 	add	r2,r2,r2
8020f7b4:	294007cc 	andi	r5,r5,31
8020f7b8:	2087883a 	add	r3,r4,r2
8020f7bc:	283ff026 	beq	r5,zero,8020f780 <__reset+0xfa1ef780>
8020f7c0:	19800017 	ldw	r6,0(r3)
8020f7c4:	3144d83a 	srl	r2,r6,r5
8020f7c8:	114a983a 	sll	r5,r2,r5
8020f7cc:	317ff41e 	bne	r6,r5,8020f7a0 <__reset+0xfa1ef7a0>
8020f7d0:	003feb06 	br	8020f780 <__reset+0xfa1ef780>
8020f7d4:	1085883a 	add	r2,r2,r2
8020f7d8:	1085883a 	add	r2,r2,r2
8020f7dc:	2087883a 	add	r3,r4,r2
8020f7e0:	003fe706 	br	8020f780 <__reset+0xfa1ef780>
8020f7e4:	f800283a 	ret
8020f7e8:	0005883a 	mov	r2,zero
8020f7ec:	f800283a 	ret

8020f7f0 <_realloc_r>:
8020f7f0:	defff604 	addi	sp,sp,-40
8020f7f4:	dc800215 	stw	r18,8(sp)
8020f7f8:	dfc00915 	stw	ra,36(sp)
8020f7fc:	df000815 	stw	fp,32(sp)
8020f800:	ddc00715 	stw	r23,28(sp)
8020f804:	dd800615 	stw	r22,24(sp)
8020f808:	dd400515 	stw	r21,20(sp)
8020f80c:	dd000415 	stw	r20,16(sp)
8020f810:	dcc00315 	stw	r19,12(sp)
8020f814:	dc400115 	stw	r17,4(sp)
8020f818:	dc000015 	stw	r16,0(sp)
8020f81c:	3025883a 	mov	r18,r6
8020f820:	2800b726 	beq	r5,zero,8020fb00 <_realloc_r+0x310>
8020f824:	282b883a 	mov	r21,r5
8020f828:	2029883a 	mov	r20,r4
8020f82c:	0216bfc0 	call	80216bfc <__malloc_lock>
8020f830:	a8bfff17 	ldw	r2,-4(r21)
8020f834:	043fff04 	movi	r16,-4
8020f838:	90c002c4 	addi	r3,r18,11
8020f83c:	01000584 	movi	r4,22
8020f840:	acfffe04 	addi	r19,r21,-8
8020f844:	1420703a 	and	r16,r2,r16
8020f848:	20c0332e 	bgeu	r4,r3,8020f918 <_realloc_r+0x128>
8020f84c:	047ffe04 	movi	r17,-8
8020f850:	1c62703a 	and	r17,r3,r17
8020f854:	8807883a 	mov	r3,r17
8020f858:	88005816 	blt	r17,zero,8020f9bc <_realloc_r+0x1cc>
8020f85c:	8c805736 	bltu	r17,r18,8020f9bc <_realloc_r+0x1cc>
8020f860:	80c0300e 	bge	r16,r3,8020f924 <_realloc_r+0x134>
8020f864:	072008b4 	movhi	fp,32802
8020f868:	e734df04 	addi	fp,fp,-11396
8020f86c:	e1c00217 	ldw	r7,8(fp)
8020f870:	9c09883a 	add	r4,r19,r16
8020f874:	22000117 	ldw	r8,4(r4)
8020f878:	21c06326 	beq	r4,r7,8020fa08 <_realloc_r+0x218>
8020f87c:	017fff84 	movi	r5,-2
8020f880:	414a703a 	and	r5,r8,r5
8020f884:	214b883a 	add	r5,r4,r5
8020f888:	29800117 	ldw	r6,4(r5)
8020f88c:	3180004c 	andi	r6,r6,1
8020f890:	30003f26 	beq	r6,zero,8020f990 <_realloc_r+0x1a0>
8020f894:	1080004c 	andi	r2,r2,1
8020f898:	10008326 	beq	r2,zero,8020faa8 <_realloc_r+0x2b8>
8020f89c:	900b883a 	mov	r5,r18
8020f8a0:	a009883a 	mov	r4,r20
8020f8a4:	020dc800 	call	8020dc80 <_malloc_r>
8020f8a8:	1025883a 	mov	r18,r2
8020f8ac:	10011e26 	beq	r2,zero,8020fd28 <_realloc_r+0x538>
8020f8b0:	a93fff17 	ldw	r4,-4(r21)
8020f8b4:	10fffe04 	addi	r3,r2,-8
8020f8b8:	00bfff84 	movi	r2,-2
8020f8bc:	2084703a 	and	r2,r4,r2
8020f8c0:	9885883a 	add	r2,r19,r2
8020f8c4:	1880ee26 	beq	r3,r2,8020fc80 <_realloc_r+0x490>
8020f8c8:	81bfff04 	addi	r6,r16,-4
8020f8cc:	00800904 	movi	r2,36
8020f8d0:	1180b836 	bltu	r2,r6,8020fbb4 <_realloc_r+0x3c4>
8020f8d4:	00c004c4 	movi	r3,19
8020f8d8:	19809636 	bltu	r3,r6,8020fb34 <_realloc_r+0x344>
8020f8dc:	9005883a 	mov	r2,r18
8020f8e0:	a807883a 	mov	r3,r21
8020f8e4:	19000017 	ldw	r4,0(r3)
8020f8e8:	11000015 	stw	r4,0(r2)
8020f8ec:	19000117 	ldw	r4,4(r3)
8020f8f0:	11000115 	stw	r4,4(r2)
8020f8f4:	18c00217 	ldw	r3,8(r3)
8020f8f8:	10c00215 	stw	r3,8(r2)
8020f8fc:	a80b883a 	mov	r5,r21
8020f900:	a009883a 	mov	r4,r20
8020f904:	020d0940 	call	8020d094 <_free_r>
8020f908:	a009883a 	mov	r4,r20
8020f90c:	0216c200 	call	80216c20 <__malloc_unlock>
8020f910:	9005883a 	mov	r2,r18
8020f914:	00001206 	br	8020f960 <_realloc_r+0x170>
8020f918:	00c00404 	movi	r3,16
8020f91c:	1823883a 	mov	r17,r3
8020f920:	003fce06 	br	8020f85c <__reset+0xfa1ef85c>
8020f924:	a825883a 	mov	r18,r21
8020f928:	8445c83a 	sub	r2,r16,r17
8020f92c:	00c003c4 	movi	r3,15
8020f930:	18802636 	bltu	r3,r2,8020f9cc <_realloc_r+0x1dc>
8020f934:	99800117 	ldw	r6,4(r19)
8020f938:	9c07883a 	add	r3,r19,r16
8020f93c:	3180004c 	andi	r6,r6,1
8020f940:	3420b03a 	or	r16,r6,r16
8020f944:	9c000115 	stw	r16,4(r19)
8020f948:	18800117 	ldw	r2,4(r3)
8020f94c:	10800054 	ori	r2,r2,1
8020f950:	18800115 	stw	r2,4(r3)
8020f954:	a009883a 	mov	r4,r20
8020f958:	0216c200 	call	80216c20 <__malloc_unlock>
8020f95c:	9005883a 	mov	r2,r18
8020f960:	dfc00917 	ldw	ra,36(sp)
8020f964:	df000817 	ldw	fp,32(sp)
8020f968:	ddc00717 	ldw	r23,28(sp)
8020f96c:	dd800617 	ldw	r22,24(sp)
8020f970:	dd400517 	ldw	r21,20(sp)
8020f974:	dd000417 	ldw	r20,16(sp)
8020f978:	dcc00317 	ldw	r19,12(sp)
8020f97c:	dc800217 	ldw	r18,8(sp)
8020f980:	dc400117 	ldw	r17,4(sp)
8020f984:	dc000017 	ldw	r16,0(sp)
8020f988:	dec00a04 	addi	sp,sp,40
8020f98c:	f800283a 	ret
8020f990:	017fff04 	movi	r5,-4
8020f994:	414a703a 	and	r5,r8,r5
8020f998:	814d883a 	add	r6,r16,r5
8020f99c:	30c01f16 	blt	r6,r3,8020fa1c <_realloc_r+0x22c>
8020f9a0:	20800317 	ldw	r2,12(r4)
8020f9a4:	20c00217 	ldw	r3,8(r4)
8020f9a8:	a825883a 	mov	r18,r21
8020f9ac:	3021883a 	mov	r16,r6
8020f9b0:	18800315 	stw	r2,12(r3)
8020f9b4:	10c00215 	stw	r3,8(r2)
8020f9b8:	003fdb06 	br	8020f928 <__reset+0xfa1ef928>
8020f9bc:	00800304 	movi	r2,12
8020f9c0:	a0800015 	stw	r2,0(r20)
8020f9c4:	0005883a 	mov	r2,zero
8020f9c8:	003fe506 	br	8020f960 <__reset+0xfa1ef960>
8020f9cc:	98c00117 	ldw	r3,4(r19)
8020f9d0:	9c4b883a 	add	r5,r19,r17
8020f9d4:	11000054 	ori	r4,r2,1
8020f9d8:	18c0004c 	andi	r3,r3,1
8020f9dc:	1c62b03a 	or	r17,r3,r17
8020f9e0:	9c400115 	stw	r17,4(r19)
8020f9e4:	29000115 	stw	r4,4(r5)
8020f9e8:	2885883a 	add	r2,r5,r2
8020f9ec:	10c00117 	ldw	r3,4(r2)
8020f9f0:	29400204 	addi	r5,r5,8
8020f9f4:	a009883a 	mov	r4,r20
8020f9f8:	18c00054 	ori	r3,r3,1
8020f9fc:	10c00115 	stw	r3,4(r2)
8020fa00:	020d0940 	call	8020d094 <_free_r>
8020fa04:	003fd306 	br	8020f954 <__reset+0xfa1ef954>
8020fa08:	017fff04 	movi	r5,-4
8020fa0c:	414a703a 	and	r5,r8,r5
8020fa10:	89800404 	addi	r6,r17,16
8020fa14:	8151883a 	add	r8,r16,r5
8020fa18:	4180590e 	bge	r8,r6,8020fb80 <_realloc_r+0x390>
8020fa1c:	1080004c 	andi	r2,r2,1
8020fa20:	103f9e1e 	bne	r2,zero,8020f89c <__reset+0xfa1ef89c>
8020fa24:	adbffe17 	ldw	r22,-8(r21)
8020fa28:	00bfff04 	movi	r2,-4
8020fa2c:	9dadc83a 	sub	r22,r19,r22
8020fa30:	b1800117 	ldw	r6,4(r22)
8020fa34:	3084703a 	and	r2,r6,r2
8020fa38:	20002026 	beq	r4,zero,8020fabc <_realloc_r+0x2cc>
8020fa3c:	80af883a 	add	r23,r16,r2
8020fa40:	b96f883a 	add	r23,r23,r5
8020fa44:	21c05f26 	beq	r4,r7,8020fbc4 <_realloc_r+0x3d4>
8020fa48:	b8c01c16 	blt	r23,r3,8020fabc <_realloc_r+0x2cc>
8020fa4c:	20800317 	ldw	r2,12(r4)
8020fa50:	20c00217 	ldw	r3,8(r4)
8020fa54:	81bfff04 	addi	r6,r16,-4
8020fa58:	01000904 	movi	r4,36
8020fa5c:	18800315 	stw	r2,12(r3)
8020fa60:	10c00215 	stw	r3,8(r2)
8020fa64:	b0c00217 	ldw	r3,8(r22)
8020fa68:	b0800317 	ldw	r2,12(r22)
8020fa6c:	b4800204 	addi	r18,r22,8
8020fa70:	18800315 	stw	r2,12(r3)
8020fa74:	10c00215 	stw	r3,8(r2)
8020fa78:	21801b36 	bltu	r4,r6,8020fae8 <_realloc_r+0x2f8>
8020fa7c:	008004c4 	movi	r2,19
8020fa80:	1180352e 	bgeu	r2,r6,8020fb58 <_realloc_r+0x368>
8020fa84:	a8800017 	ldw	r2,0(r21)
8020fa88:	b0800215 	stw	r2,8(r22)
8020fa8c:	a8800117 	ldw	r2,4(r21)
8020fa90:	b0800315 	stw	r2,12(r22)
8020fa94:	008006c4 	movi	r2,27
8020fa98:	11807f36 	bltu	r2,r6,8020fc98 <_realloc_r+0x4a8>
8020fa9c:	b0800404 	addi	r2,r22,16
8020faa0:	ad400204 	addi	r21,r21,8
8020faa4:	00002d06 	br	8020fb5c <_realloc_r+0x36c>
8020faa8:	adbffe17 	ldw	r22,-8(r21)
8020faac:	00bfff04 	movi	r2,-4
8020fab0:	9dadc83a 	sub	r22,r19,r22
8020fab4:	b1000117 	ldw	r4,4(r22)
8020fab8:	2084703a 	and	r2,r4,r2
8020fabc:	b03f7726 	beq	r22,zero,8020f89c <__reset+0xfa1ef89c>
8020fac0:	80af883a 	add	r23,r16,r2
8020fac4:	b8ff7516 	blt	r23,r3,8020f89c <__reset+0xfa1ef89c>
8020fac8:	b0800317 	ldw	r2,12(r22)
8020facc:	b0c00217 	ldw	r3,8(r22)
8020fad0:	81bfff04 	addi	r6,r16,-4
8020fad4:	01000904 	movi	r4,36
8020fad8:	18800315 	stw	r2,12(r3)
8020fadc:	10c00215 	stw	r3,8(r2)
8020fae0:	b4800204 	addi	r18,r22,8
8020fae4:	21bfe52e 	bgeu	r4,r6,8020fa7c <__reset+0xfa1efa7c>
8020fae8:	a80b883a 	mov	r5,r21
8020faec:	9009883a 	mov	r4,r18
8020faf0:	020e5700 	call	8020e570 <memmove>
8020faf4:	b821883a 	mov	r16,r23
8020faf8:	b027883a 	mov	r19,r22
8020fafc:	003f8a06 	br	8020f928 <__reset+0xfa1ef928>
8020fb00:	300b883a 	mov	r5,r6
8020fb04:	dfc00917 	ldw	ra,36(sp)
8020fb08:	df000817 	ldw	fp,32(sp)
8020fb0c:	ddc00717 	ldw	r23,28(sp)
8020fb10:	dd800617 	ldw	r22,24(sp)
8020fb14:	dd400517 	ldw	r21,20(sp)
8020fb18:	dd000417 	ldw	r20,16(sp)
8020fb1c:	dcc00317 	ldw	r19,12(sp)
8020fb20:	dc800217 	ldw	r18,8(sp)
8020fb24:	dc400117 	ldw	r17,4(sp)
8020fb28:	dc000017 	ldw	r16,0(sp)
8020fb2c:	dec00a04 	addi	sp,sp,40
8020fb30:	020dc801 	jmpi	8020dc80 <_malloc_r>
8020fb34:	a8c00017 	ldw	r3,0(r21)
8020fb38:	90c00015 	stw	r3,0(r18)
8020fb3c:	a8c00117 	ldw	r3,4(r21)
8020fb40:	90c00115 	stw	r3,4(r18)
8020fb44:	00c006c4 	movi	r3,27
8020fb48:	19804536 	bltu	r3,r6,8020fc60 <_realloc_r+0x470>
8020fb4c:	90800204 	addi	r2,r18,8
8020fb50:	a8c00204 	addi	r3,r21,8
8020fb54:	003f6306 	br	8020f8e4 <__reset+0xfa1ef8e4>
8020fb58:	9005883a 	mov	r2,r18
8020fb5c:	a8c00017 	ldw	r3,0(r21)
8020fb60:	b821883a 	mov	r16,r23
8020fb64:	b027883a 	mov	r19,r22
8020fb68:	10c00015 	stw	r3,0(r2)
8020fb6c:	a8c00117 	ldw	r3,4(r21)
8020fb70:	10c00115 	stw	r3,4(r2)
8020fb74:	a8c00217 	ldw	r3,8(r21)
8020fb78:	10c00215 	stw	r3,8(r2)
8020fb7c:	003f6a06 	br	8020f928 <__reset+0xfa1ef928>
8020fb80:	9c67883a 	add	r19,r19,r17
8020fb84:	4445c83a 	sub	r2,r8,r17
8020fb88:	e4c00215 	stw	r19,8(fp)
8020fb8c:	10800054 	ori	r2,r2,1
8020fb90:	98800115 	stw	r2,4(r19)
8020fb94:	a8bfff17 	ldw	r2,-4(r21)
8020fb98:	a009883a 	mov	r4,r20
8020fb9c:	1080004c 	andi	r2,r2,1
8020fba0:	1462b03a 	or	r17,r2,r17
8020fba4:	ac7fff15 	stw	r17,-4(r21)
8020fba8:	0216c200 	call	80216c20 <__malloc_unlock>
8020fbac:	a805883a 	mov	r2,r21
8020fbb0:	003f6b06 	br	8020f960 <__reset+0xfa1ef960>
8020fbb4:	a80b883a 	mov	r5,r21
8020fbb8:	9009883a 	mov	r4,r18
8020fbbc:	020e5700 	call	8020e570 <memmove>
8020fbc0:	003f4e06 	br	8020f8fc <__reset+0xfa1ef8fc>
8020fbc4:	89000404 	addi	r4,r17,16
8020fbc8:	b93fbc16 	blt	r23,r4,8020fabc <__reset+0xfa1efabc>
8020fbcc:	b0800317 	ldw	r2,12(r22)
8020fbd0:	b0c00217 	ldw	r3,8(r22)
8020fbd4:	81bfff04 	addi	r6,r16,-4
8020fbd8:	01000904 	movi	r4,36
8020fbdc:	18800315 	stw	r2,12(r3)
8020fbe0:	10c00215 	stw	r3,8(r2)
8020fbe4:	b4800204 	addi	r18,r22,8
8020fbe8:	21804336 	bltu	r4,r6,8020fcf8 <_realloc_r+0x508>
8020fbec:	008004c4 	movi	r2,19
8020fbf0:	11803f2e 	bgeu	r2,r6,8020fcf0 <_realloc_r+0x500>
8020fbf4:	a8800017 	ldw	r2,0(r21)
8020fbf8:	b0800215 	stw	r2,8(r22)
8020fbfc:	a8800117 	ldw	r2,4(r21)
8020fc00:	b0800315 	stw	r2,12(r22)
8020fc04:	008006c4 	movi	r2,27
8020fc08:	11803f36 	bltu	r2,r6,8020fd08 <_realloc_r+0x518>
8020fc0c:	b0800404 	addi	r2,r22,16
8020fc10:	ad400204 	addi	r21,r21,8
8020fc14:	a8c00017 	ldw	r3,0(r21)
8020fc18:	10c00015 	stw	r3,0(r2)
8020fc1c:	a8c00117 	ldw	r3,4(r21)
8020fc20:	10c00115 	stw	r3,4(r2)
8020fc24:	a8c00217 	ldw	r3,8(r21)
8020fc28:	10c00215 	stw	r3,8(r2)
8020fc2c:	b447883a 	add	r3,r22,r17
8020fc30:	bc45c83a 	sub	r2,r23,r17
8020fc34:	e0c00215 	stw	r3,8(fp)
8020fc38:	10800054 	ori	r2,r2,1
8020fc3c:	18800115 	stw	r2,4(r3)
8020fc40:	b0800117 	ldw	r2,4(r22)
8020fc44:	a009883a 	mov	r4,r20
8020fc48:	1080004c 	andi	r2,r2,1
8020fc4c:	1462b03a 	or	r17,r2,r17
8020fc50:	b4400115 	stw	r17,4(r22)
8020fc54:	0216c200 	call	80216c20 <__malloc_unlock>
8020fc58:	9005883a 	mov	r2,r18
8020fc5c:	003f4006 	br	8020f960 <__reset+0xfa1ef960>
8020fc60:	a8c00217 	ldw	r3,8(r21)
8020fc64:	90c00215 	stw	r3,8(r18)
8020fc68:	a8c00317 	ldw	r3,12(r21)
8020fc6c:	90c00315 	stw	r3,12(r18)
8020fc70:	30801126 	beq	r6,r2,8020fcb8 <_realloc_r+0x4c8>
8020fc74:	90800404 	addi	r2,r18,16
8020fc78:	a8c00404 	addi	r3,r21,16
8020fc7c:	003f1906 	br	8020f8e4 <__reset+0xfa1ef8e4>
8020fc80:	90ffff17 	ldw	r3,-4(r18)
8020fc84:	00bfff04 	movi	r2,-4
8020fc88:	a825883a 	mov	r18,r21
8020fc8c:	1884703a 	and	r2,r3,r2
8020fc90:	80a1883a 	add	r16,r16,r2
8020fc94:	003f2406 	br	8020f928 <__reset+0xfa1ef928>
8020fc98:	a8800217 	ldw	r2,8(r21)
8020fc9c:	b0800415 	stw	r2,16(r22)
8020fca0:	a8800317 	ldw	r2,12(r21)
8020fca4:	b0800515 	stw	r2,20(r22)
8020fca8:	31000a26 	beq	r6,r4,8020fcd4 <_realloc_r+0x4e4>
8020fcac:	b0800604 	addi	r2,r22,24
8020fcb0:	ad400404 	addi	r21,r21,16
8020fcb4:	003fa906 	br	8020fb5c <__reset+0xfa1efb5c>
8020fcb8:	a9000417 	ldw	r4,16(r21)
8020fcbc:	90800604 	addi	r2,r18,24
8020fcc0:	a8c00604 	addi	r3,r21,24
8020fcc4:	91000415 	stw	r4,16(r18)
8020fcc8:	a9000517 	ldw	r4,20(r21)
8020fccc:	91000515 	stw	r4,20(r18)
8020fcd0:	003f0406 	br	8020f8e4 <__reset+0xfa1ef8e4>
8020fcd4:	a8c00417 	ldw	r3,16(r21)
8020fcd8:	ad400604 	addi	r21,r21,24
8020fcdc:	b0800804 	addi	r2,r22,32
8020fce0:	b0c00615 	stw	r3,24(r22)
8020fce4:	a8ffff17 	ldw	r3,-4(r21)
8020fce8:	b0c00715 	stw	r3,28(r22)
8020fcec:	003f9b06 	br	8020fb5c <__reset+0xfa1efb5c>
8020fcf0:	9005883a 	mov	r2,r18
8020fcf4:	003fc706 	br	8020fc14 <__reset+0xfa1efc14>
8020fcf8:	a80b883a 	mov	r5,r21
8020fcfc:	9009883a 	mov	r4,r18
8020fd00:	020e5700 	call	8020e570 <memmove>
8020fd04:	003fc906 	br	8020fc2c <__reset+0xfa1efc2c>
8020fd08:	a8800217 	ldw	r2,8(r21)
8020fd0c:	b0800415 	stw	r2,16(r22)
8020fd10:	a8800317 	ldw	r2,12(r21)
8020fd14:	b0800515 	stw	r2,20(r22)
8020fd18:	31000726 	beq	r6,r4,8020fd38 <_realloc_r+0x548>
8020fd1c:	b0800604 	addi	r2,r22,24
8020fd20:	ad400404 	addi	r21,r21,16
8020fd24:	003fbb06 	br	8020fc14 <__reset+0xfa1efc14>
8020fd28:	a009883a 	mov	r4,r20
8020fd2c:	0216c200 	call	80216c20 <__malloc_unlock>
8020fd30:	0005883a 	mov	r2,zero
8020fd34:	003f0a06 	br	8020f960 <__reset+0xfa1ef960>
8020fd38:	a8c00417 	ldw	r3,16(r21)
8020fd3c:	ad400604 	addi	r21,r21,24
8020fd40:	b0800804 	addi	r2,r22,32
8020fd44:	b0c00615 	stw	r3,24(r22)
8020fd48:	a8ffff17 	ldw	r3,-4(r21)
8020fd4c:	b0c00715 	stw	r3,28(r22)
8020fd50:	003fb006 	br	8020fc14 <__reset+0xfa1efc14>

8020fd54 <__fpclassifyd>:
8020fd54:	00a00034 	movhi	r2,32768
8020fd58:	10bfffc4 	addi	r2,r2,-1
8020fd5c:	2884703a 	and	r2,r5,r2
8020fd60:	10000726 	beq	r2,zero,8020fd80 <__fpclassifyd+0x2c>
8020fd64:	00fffc34 	movhi	r3,65520
8020fd68:	019ff834 	movhi	r6,32736
8020fd6c:	28c7883a 	add	r3,r5,r3
8020fd70:	31bfffc4 	addi	r6,r6,-1
8020fd74:	30c00536 	bltu	r6,r3,8020fd8c <__fpclassifyd+0x38>
8020fd78:	00800104 	movi	r2,4
8020fd7c:	f800283a 	ret
8020fd80:	2000021e 	bne	r4,zero,8020fd8c <__fpclassifyd+0x38>
8020fd84:	00800084 	movi	r2,2
8020fd88:	f800283a 	ret
8020fd8c:	00dffc34 	movhi	r3,32752
8020fd90:	019ff834 	movhi	r6,32736
8020fd94:	28cb883a 	add	r5,r5,r3
8020fd98:	31bfffc4 	addi	r6,r6,-1
8020fd9c:	317ff62e 	bgeu	r6,r5,8020fd78 <__reset+0xfa1efd78>
8020fda0:	01400434 	movhi	r5,16
8020fda4:	297fffc4 	addi	r5,r5,-1
8020fda8:	28800236 	bltu	r5,r2,8020fdb4 <__fpclassifyd+0x60>
8020fdac:	008000c4 	movi	r2,3
8020fdb0:	f800283a 	ret
8020fdb4:	10c00226 	beq	r2,r3,8020fdc0 <__fpclassifyd+0x6c>
8020fdb8:	0005883a 	mov	r2,zero
8020fdbc:	f800283a 	ret
8020fdc0:	2005003a 	cmpeq	r2,r4,zero
8020fdc4:	f800283a 	ret

8020fdc8 <_sbrk_r>:
8020fdc8:	defffd04 	addi	sp,sp,-12
8020fdcc:	dc000015 	stw	r16,0(sp)
8020fdd0:	042008b4 	movhi	r16,32802
8020fdd4:	dc400115 	stw	r17,4(sp)
8020fdd8:	843af404 	addi	r16,r16,-5168
8020fddc:	2023883a 	mov	r17,r4
8020fde0:	2809883a 	mov	r4,r5
8020fde4:	dfc00215 	stw	ra,8(sp)
8020fde8:	80000015 	stw	zero,0(r16)
8020fdec:	0216de00 	call	80216de0 <sbrk>
8020fdf0:	00ffffc4 	movi	r3,-1
8020fdf4:	10c00526 	beq	r2,r3,8020fe0c <_sbrk_r+0x44>
8020fdf8:	dfc00217 	ldw	ra,8(sp)
8020fdfc:	dc400117 	ldw	r17,4(sp)
8020fe00:	dc000017 	ldw	r16,0(sp)
8020fe04:	dec00304 	addi	sp,sp,12
8020fe08:	f800283a 	ret
8020fe0c:	80c00017 	ldw	r3,0(r16)
8020fe10:	183ff926 	beq	r3,zero,8020fdf8 <__reset+0xfa1efdf8>
8020fe14:	88c00015 	stw	r3,0(r17)
8020fe18:	003ff706 	br	8020fdf8 <__reset+0xfa1efdf8>

8020fe1c <__sread>:
8020fe1c:	defffe04 	addi	sp,sp,-8
8020fe20:	dc000015 	stw	r16,0(sp)
8020fe24:	2821883a 	mov	r16,r5
8020fe28:	2940038f 	ldh	r5,14(r5)
8020fe2c:	dfc00115 	stw	ra,4(sp)
8020fe30:	021301c0 	call	8021301c <_read_r>
8020fe34:	10000716 	blt	r2,zero,8020fe54 <__sread+0x38>
8020fe38:	80c01417 	ldw	r3,80(r16)
8020fe3c:	1887883a 	add	r3,r3,r2
8020fe40:	80c01415 	stw	r3,80(r16)
8020fe44:	dfc00117 	ldw	ra,4(sp)
8020fe48:	dc000017 	ldw	r16,0(sp)
8020fe4c:	dec00204 	addi	sp,sp,8
8020fe50:	f800283a 	ret
8020fe54:	80c0030b 	ldhu	r3,12(r16)
8020fe58:	18fbffcc 	andi	r3,r3,61439
8020fe5c:	80c0030d 	sth	r3,12(r16)
8020fe60:	dfc00117 	ldw	ra,4(sp)
8020fe64:	dc000017 	ldw	r16,0(sp)
8020fe68:	dec00204 	addi	sp,sp,8
8020fe6c:	f800283a 	ret

8020fe70 <__seofread>:
8020fe70:	0005883a 	mov	r2,zero
8020fe74:	f800283a 	ret

8020fe78 <__swrite>:
8020fe78:	2880030b 	ldhu	r2,12(r5)
8020fe7c:	defffb04 	addi	sp,sp,-20
8020fe80:	dcc00315 	stw	r19,12(sp)
8020fe84:	dc800215 	stw	r18,8(sp)
8020fe88:	dc400115 	stw	r17,4(sp)
8020fe8c:	dc000015 	stw	r16,0(sp)
8020fe90:	dfc00415 	stw	ra,16(sp)
8020fe94:	10c0400c 	andi	r3,r2,256
8020fe98:	2821883a 	mov	r16,r5
8020fe9c:	2023883a 	mov	r17,r4
8020fea0:	3025883a 	mov	r18,r6
8020fea4:	3827883a 	mov	r19,r7
8020fea8:	18000526 	beq	r3,zero,8020fec0 <__swrite+0x48>
8020feac:	2940038f 	ldh	r5,14(r5)
8020feb0:	01c00084 	movi	r7,2
8020feb4:	000d883a 	mov	r6,zero
8020feb8:	0212fbc0 	call	80212fbc <_lseek_r>
8020febc:	8080030b 	ldhu	r2,12(r16)
8020fec0:	8140038f 	ldh	r5,14(r16)
8020fec4:	10bbffcc 	andi	r2,r2,61439
8020fec8:	980f883a 	mov	r7,r19
8020fecc:	900d883a 	mov	r6,r18
8020fed0:	8809883a 	mov	r4,r17
8020fed4:	8080030d 	sth	r2,12(r16)
8020fed8:	dfc00417 	ldw	ra,16(sp)
8020fedc:	dcc00317 	ldw	r19,12(sp)
8020fee0:	dc800217 	ldw	r18,8(sp)
8020fee4:	dc400117 	ldw	r17,4(sp)
8020fee8:	dc000017 	ldw	r16,0(sp)
8020feec:	dec00504 	addi	sp,sp,20
8020fef0:	0212a881 	jmpi	80212a88 <_write_r>

8020fef4 <__sseek>:
8020fef4:	defffe04 	addi	sp,sp,-8
8020fef8:	dc000015 	stw	r16,0(sp)
8020fefc:	2821883a 	mov	r16,r5
8020ff00:	2940038f 	ldh	r5,14(r5)
8020ff04:	dfc00115 	stw	ra,4(sp)
8020ff08:	0212fbc0 	call	80212fbc <_lseek_r>
8020ff0c:	00ffffc4 	movi	r3,-1
8020ff10:	10c00826 	beq	r2,r3,8020ff34 <__sseek+0x40>
8020ff14:	80c0030b 	ldhu	r3,12(r16)
8020ff18:	80801415 	stw	r2,80(r16)
8020ff1c:	18c40014 	ori	r3,r3,4096
8020ff20:	80c0030d 	sth	r3,12(r16)
8020ff24:	dfc00117 	ldw	ra,4(sp)
8020ff28:	dc000017 	ldw	r16,0(sp)
8020ff2c:	dec00204 	addi	sp,sp,8
8020ff30:	f800283a 	ret
8020ff34:	80c0030b 	ldhu	r3,12(r16)
8020ff38:	18fbffcc 	andi	r3,r3,61439
8020ff3c:	80c0030d 	sth	r3,12(r16)
8020ff40:	dfc00117 	ldw	ra,4(sp)
8020ff44:	dc000017 	ldw	r16,0(sp)
8020ff48:	dec00204 	addi	sp,sp,8
8020ff4c:	f800283a 	ret

8020ff50 <__sclose>:
8020ff50:	2940038f 	ldh	r5,14(r5)
8020ff54:	0212ae81 	jmpi	80212ae8 <_close_r>

8020ff58 <strcmp>:
8020ff58:	2144b03a 	or	r2,r4,r5
8020ff5c:	108000cc 	andi	r2,r2,3
8020ff60:	1000171e 	bne	r2,zero,8020ffc0 <strcmp+0x68>
8020ff64:	20800017 	ldw	r2,0(r4)
8020ff68:	28c00017 	ldw	r3,0(r5)
8020ff6c:	10c0141e 	bne	r2,r3,8020ffc0 <strcmp+0x68>
8020ff70:	027fbff4 	movhi	r9,65279
8020ff74:	4a7fbfc4 	addi	r9,r9,-257
8020ff78:	0086303a 	nor	r3,zero,r2
8020ff7c:	02202074 	movhi	r8,32897
8020ff80:	1245883a 	add	r2,r2,r9
8020ff84:	42202004 	addi	r8,r8,-32640
8020ff88:	10c4703a 	and	r2,r2,r3
8020ff8c:	1204703a 	and	r2,r2,r8
8020ff90:	10000226 	beq	r2,zero,8020ff9c <strcmp+0x44>
8020ff94:	00002306 	br	80210024 <strcmp+0xcc>
8020ff98:	1000221e 	bne	r2,zero,80210024 <strcmp+0xcc>
8020ff9c:	21000104 	addi	r4,r4,4
8020ffa0:	20c00017 	ldw	r3,0(r4)
8020ffa4:	29400104 	addi	r5,r5,4
8020ffa8:	29800017 	ldw	r6,0(r5)
8020ffac:	1a4f883a 	add	r7,r3,r9
8020ffb0:	00c4303a 	nor	r2,zero,r3
8020ffb4:	3884703a 	and	r2,r7,r2
8020ffb8:	1204703a 	and	r2,r2,r8
8020ffbc:	19bff626 	beq	r3,r6,8020ff98 <__reset+0xfa1eff98>
8020ffc0:	20800003 	ldbu	r2,0(r4)
8020ffc4:	10c03fcc 	andi	r3,r2,255
8020ffc8:	18c0201c 	xori	r3,r3,128
8020ffcc:	18ffe004 	addi	r3,r3,-128
8020ffd0:	18000c26 	beq	r3,zero,80210004 <strcmp+0xac>
8020ffd4:	29800007 	ldb	r6,0(r5)
8020ffd8:	19800326 	beq	r3,r6,8020ffe8 <strcmp+0x90>
8020ffdc:	00001306 	br	8021002c <strcmp+0xd4>
8020ffe0:	29800007 	ldb	r6,0(r5)
8020ffe4:	11800b1e 	bne	r2,r6,80210014 <strcmp+0xbc>
8020ffe8:	21000044 	addi	r4,r4,1
8020ffec:	20c00003 	ldbu	r3,0(r4)
8020fff0:	29400044 	addi	r5,r5,1
8020fff4:	18803fcc 	andi	r2,r3,255
8020fff8:	1080201c 	xori	r2,r2,128
8020fffc:	10bfe004 	addi	r2,r2,-128
80210000:	103ff71e 	bne	r2,zero,8020ffe0 <__reset+0xfa1effe0>
80210004:	0007883a 	mov	r3,zero
80210008:	28800003 	ldbu	r2,0(r5)
8021000c:	1885c83a 	sub	r2,r3,r2
80210010:	f800283a 	ret
80210014:	28800003 	ldbu	r2,0(r5)
80210018:	18c03fcc 	andi	r3,r3,255
8021001c:	1885c83a 	sub	r2,r3,r2
80210020:	f800283a 	ret
80210024:	0005883a 	mov	r2,zero
80210028:	f800283a 	ret
8021002c:	10c03fcc 	andi	r3,r2,255
80210030:	003ff506 	br	80210008 <__reset+0xfa1f0008>

80210034 <__ssprint_r>:
80210034:	30800217 	ldw	r2,8(r6)
80210038:	defff604 	addi	sp,sp,-40
8021003c:	dc800215 	stw	r18,8(sp)
80210040:	dfc00915 	stw	ra,36(sp)
80210044:	df000815 	stw	fp,32(sp)
80210048:	ddc00715 	stw	r23,28(sp)
8021004c:	dd800615 	stw	r22,24(sp)
80210050:	dd400515 	stw	r21,20(sp)
80210054:	dd000415 	stw	r20,16(sp)
80210058:	dcc00315 	stw	r19,12(sp)
8021005c:	dc400115 	stw	r17,4(sp)
80210060:	dc000015 	stw	r16,0(sp)
80210064:	3025883a 	mov	r18,r6
80210068:	10005826 	beq	r2,zero,802101cc <__ssprint_r+0x198>
8021006c:	2027883a 	mov	r19,r4
80210070:	35c00017 	ldw	r23,0(r6)
80210074:	29000017 	ldw	r4,0(r5)
80210078:	28800217 	ldw	r2,8(r5)
8021007c:	2823883a 	mov	r17,r5
80210080:	0039883a 	mov	fp,zero
80210084:	0021883a 	mov	r16,zero
80210088:	80003926 	beq	r16,zero,80210170 <__ssprint_r+0x13c>
8021008c:	102b883a 	mov	r21,r2
80210090:	102d883a 	mov	r22,r2
80210094:	80803a36 	bltu	r16,r2,80210180 <__ssprint_r+0x14c>
80210098:	88c0030b 	ldhu	r3,12(r17)
8021009c:	1881200c 	andi	r2,r3,1152
802100a0:	10002626 	beq	r2,zero,8021013c <__ssprint_r+0x108>
802100a4:	88800517 	ldw	r2,20(r17)
802100a8:	89400417 	ldw	r5,16(r17)
802100ac:	81800044 	addi	r6,r16,1
802100b0:	108f883a 	add	r7,r2,r2
802100b4:	3885883a 	add	r2,r7,r2
802100b8:	100ed7fa 	srli	r7,r2,31
802100bc:	216dc83a 	sub	r22,r4,r5
802100c0:	3589883a 	add	r4,r6,r22
802100c4:	3885883a 	add	r2,r7,r2
802100c8:	102bd07a 	srai	r21,r2,1
802100cc:	a80d883a 	mov	r6,r21
802100d0:	a900022e 	bgeu	r21,r4,802100dc <__ssprint_r+0xa8>
802100d4:	202b883a 	mov	r21,r4
802100d8:	200d883a 	mov	r6,r4
802100dc:	18c1000c 	andi	r3,r3,1024
802100e0:	18002a26 	beq	r3,zero,8021018c <__ssprint_r+0x158>
802100e4:	300b883a 	mov	r5,r6
802100e8:	9809883a 	mov	r4,r19
802100ec:	020dc800 	call	8020dc80 <_malloc_r>
802100f0:	1029883a 	mov	r20,r2
802100f4:	10002c26 	beq	r2,zero,802101a8 <__ssprint_r+0x174>
802100f8:	89400417 	ldw	r5,16(r17)
802100fc:	b00d883a 	mov	r6,r22
80210100:	1009883a 	mov	r4,r2
80210104:	02066c00 	call	802066c0 <memcpy>
80210108:	8880030b 	ldhu	r2,12(r17)
8021010c:	00fedfc4 	movi	r3,-1153
80210110:	10c4703a 	and	r2,r2,r3
80210114:	10802014 	ori	r2,r2,128
80210118:	8880030d 	sth	r2,12(r17)
8021011c:	a589883a 	add	r4,r20,r22
80210120:	adadc83a 	sub	r22,r21,r22
80210124:	8d400515 	stw	r21,20(r17)
80210128:	8d800215 	stw	r22,8(r17)
8021012c:	8d000415 	stw	r20,16(r17)
80210130:	89000015 	stw	r4,0(r17)
80210134:	802b883a 	mov	r21,r16
80210138:	802d883a 	mov	r22,r16
8021013c:	b00d883a 	mov	r6,r22
80210140:	e00b883a 	mov	r5,fp
80210144:	020e5700 	call	8020e570 <memmove>
80210148:	88800217 	ldw	r2,8(r17)
8021014c:	89000017 	ldw	r4,0(r17)
80210150:	90c00217 	ldw	r3,8(r18)
80210154:	1545c83a 	sub	r2,r2,r21
80210158:	2589883a 	add	r4,r4,r22
8021015c:	88800215 	stw	r2,8(r17)
80210160:	89000015 	stw	r4,0(r17)
80210164:	1c21c83a 	sub	r16,r3,r16
80210168:	94000215 	stw	r16,8(r18)
8021016c:	80001726 	beq	r16,zero,802101cc <__ssprint_r+0x198>
80210170:	bf000017 	ldw	fp,0(r23)
80210174:	bc000117 	ldw	r16,4(r23)
80210178:	bdc00204 	addi	r23,r23,8
8021017c:	003fc206 	br	80210088 <__reset+0xfa1f0088>
80210180:	802b883a 	mov	r21,r16
80210184:	802d883a 	mov	r22,r16
80210188:	003fec06 	br	8021013c <__reset+0xfa1f013c>
8021018c:	9809883a 	mov	r4,r19
80210190:	020f7f00 	call	8020f7f0 <_realloc_r>
80210194:	1029883a 	mov	r20,r2
80210198:	103fe01e 	bne	r2,zero,8021011c <__reset+0xfa1f011c>
8021019c:	89400417 	ldw	r5,16(r17)
802101a0:	9809883a 	mov	r4,r19
802101a4:	020d0940 	call	8020d094 <_free_r>
802101a8:	88c0030b 	ldhu	r3,12(r17)
802101ac:	00800304 	movi	r2,12
802101b0:	98800015 	stw	r2,0(r19)
802101b4:	18c01014 	ori	r3,r3,64
802101b8:	88c0030d 	sth	r3,12(r17)
802101bc:	00bfffc4 	movi	r2,-1
802101c0:	90000215 	stw	zero,8(r18)
802101c4:	90000115 	stw	zero,4(r18)
802101c8:	00000206 	br	802101d4 <__ssprint_r+0x1a0>
802101cc:	90000115 	stw	zero,4(r18)
802101d0:	0005883a 	mov	r2,zero
802101d4:	dfc00917 	ldw	ra,36(sp)
802101d8:	df000817 	ldw	fp,32(sp)
802101dc:	ddc00717 	ldw	r23,28(sp)
802101e0:	dd800617 	ldw	r22,24(sp)
802101e4:	dd400517 	ldw	r21,20(sp)
802101e8:	dd000417 	ldw	r20,16(sp)
802101ec:	dcc00317 	ldw	r19,12(sp)
802101f0:	dc800217 	ldw	r18,8(sp)
802101f4:	dc400117 	ldw	r17,4(sp)
802101f8:	dc000017 	ldw	r16,0(sp)
802101fc:	dec00a04 	addi	sp,sp,40
80210200:	f800283a 	ret

80210204 <___svfiprintf_internal_r>:
80210204:	2880030b 	ldhu	r2,12(r5)
80210208:	deffc804 	addi	sp,sp,-224
8021020c:	dcc03115 	stw	r19,196(sp)
80210210:	dfc03715 	stw	ra,220(sp)
80210214:	df003615 	stw	fp,216(sp)
80210218:	ddc03515 	stw	r23,212(sp)
8021021c:	dd803415 	stw	r22,208(sp)
80210220:	dd403315 	stw	r21,204(sp)
80210224:	dd003215 	stw	r20,200(sp)
80210228:	dc803015 	stw	r18,192(sp)
8021022c:	dc402f15 	stw	r17,188(sp)
80210230:	dc002e15 	stw	r16,184(sp)
80210234:	d9402715 	stw	r5,156(sp)
80210238:	d9002a15 	stw	r4,168(sp)
8021023c:	1080200c 	andi	r2,r2,128
80210240:	d9c02315 	stw	r7,140(sp)
80210244:	3027883a 	mov	r19,r6
80210248:	10000226 	beq	r2,zero,80210254 <___svfiprintf_internal_r+0x50>
8021024c:	28800417 	ldw	r2,16(r5)
80210250:	10041d26 	beq	r2,zero,802112c8 <___svfiprintf_internal_r+0x10c4>
80210254:	dac01a04 	addi	r11,sp,104
80210258:	dac01e15 	stw	r11,120(sp)
8021025c:	d8801e17 	ldw	r2,120(sp)
80210260:	dac019c4 	addi	r11,sp,103
80210264:	dd402a17 	ldw	r21,168(sp)
80210268:	ddc02717 	ldw	r23,156(sp)
8021026c:	05a008b4 	movhi	r22,32802
80210270:	052008b4 	movhi	r20,32802
80210274:	dac01f15 	stw	r11,124(sp)
80210278:	12d7c83a 	sub	r11,r2,r11
8021027c:	b5b30404 	addi	r22,r22,-13296
80210280:	a5330004 	addi	r20,r20,-13312
80210284:	dec01a15 	stw	sp,104(sp)
80210288:	d8001c15 	stw	zero,112(sp)
8021028c:	d8001b15 	stw	zero,108(sp)
80210290:	d811883a 	mov	r8,sp
80210294:	d8002915 	stw	zero,164(sp)
80210298:	d8002515 	stw	zero,148(sp)
8021029c:	dac02b15 	stw	r11,172(sp)
802102a0:	98800007 	ldb	r2,0(r19)
802102a4:	1002dd26 	beq	r2,zero,80210e1c <___svfiprintf_internal_r+0xc18>
802102a8:	00c00944 	movi	r3,37
802102ac:	9823883a 	mov	r17,r19
802102b0:	10c0021e 	bne	r2,r3,802102bc <___svfiprintf_internal_r+0xb8>
802102b4:	00001406 	br	80210308 <___svfiprintf_internal_r+0x104>
802102b8:	10c00326 	beq	r2,r3,802102c8 <___svfiprintf_internal_r+0xc4>
802102bc:	8c400044 	addi	r17,r17,1
802102c0:	88800007 	ldb	r2,0(r17)
802102c4:	103ffc1e 	bne	r2,zero,802102b8 <__reset+0xfa1f02b8>
802102c8:	8ce1c83a 	sub	r16,r17,r19
802102cc:	80000e26 	beq	r16,zero,80210308 <___svfiprintf_internal_r+0x104>
802102d0:	d8c01c17 	ldw	r3,112(sp)
802102d4:	d8801b17 	ldw	r2,108(sp)
802102d8:	44c00015 	stw	r19,0(r8)
802102dc:	1c07883a 	add	r3,r3,r16
802102e0:	10800044 	addi	r2,r2,1
802102e4:	d8c01c15 	stw	r3,112(sp)
802102e8:	44000115 	stw	r16,4(r8)
802102ec:	d8801b15 	stw	r2,108(sp)
802102f0:	00c001c4 	movi	r3,7
802102f4:	18831e16 	blt	r3,r2,80210f70 <___svfiprintf_internal_r+0xd6c>
802102f8:	42000204 	addi	r8,r8,8
802102fc:	dac02517 	ldw	r11,148(sp)
80210300:	5c17883a 	add	r11,r11,r16
80210304:	dac02515 	stw	r11,148(sp)
80210308:	88800007 	ldb	r2,0(r17)
8021030c:	1002c526 	beq	r2,zero,80210e24 <___svfiprintf_internal_r+0xc20>
80210310:	88c00047 	ldb	r3,1(r17)
80210314:	8cc00044 	addi	r19,r17,1
80210318:	d8001d85 	stb	zero,118(sp)
8021031c:	0009883a 	mov	r4,zero
80210320:	000f883a 	mov	r7,zero
80210324:	043fffc4 	movi	r16,-1
80210328:	d8002415 	stw	zero,144(sp)
8021032c:	0025883a 	mov	r18,zero
80210330:	01401604 	movi	r5,88
80210334:	01800244 	movi	r6,9
80210338:	02800a84 	movi	r10,42
8021033c:	02401b04 	movi	r9,108
80210340:	9cc00044 	addi	r19,r19,1
80210344:	18bff804 	addi	r2,r3,-32
80210348:	2881dd36 	bltu	r5,r2,80210ac0 <___svfiprintf_internal_r+0x8bc>
8021034c:	100490ba 	slli	r2,r2,2
80210350:	02e00874 	movhi	r11,32801
80210354:	5ac0d904 	addi	r11,r11,868
80210358:	12c5883a 	add	r2,r2,r11
8021035c:	10800017 	ldw	r2,0(r2)
80210360:	1000683a 	jmp	r2
80210364:	80210560 	cmpeqi	zero,r16,-31723
80210368:	80210ac0 	call	880210ac <__reset+0x20010ac>
8021036c:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210370:	80210554 	ori	zero,r16,33813
80210374:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210378:	80210ac0 	call	880210ac <__reset+0x20010ac>
8021037c:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210380:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210384:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210388:	80210ac0 	call	880210ac <__reset+0x20010ac>
8021038c:	802104c8 	cmpgei	zero,r16,-31725
80210390:	802106a4 	muli	zero,r16,-31718
80210394:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210398:	802104f4 	orhi	zero,r16,33811
8021039c:	80210af4 	orhi	zero,r16,33835
802103a0:	80210ac0 	call	880210ac <__reset+0x20010ac>
802103a4:	80210ae8 	cmpgeui	zero,r16,33835
802103a8:	80210a88 	cmpgei	zero,r16,-31702
802103ac:	80210a88 	cmpgei	zero,r16,-31702
802103b0:	80210a88 	cmpgei	zero,r16,-31702
802103b4:	80210a88 	cmpgei	zero,r16,-31702
802103b8:	80210a88 	cmpgei	zero,r16,-31702
802103bc:	80210a88 	cmpgei	zero,r16,-31702
802103c0:	80210a88 	cmpgei	zero,r16,-31702
802103c4:	80210a88 	cmpgei	zero,r16,-31702
802103c8:	80210a88 	cmpgei	zero,r16,-31702
802103cc:	80210ac0 	call	880210ac <__reset+0x20010ac>
802103d0:	80210ac0 	call	880210ac <__reset+0x20010ac>
802103d4:	80210ac0 	call	880210ac <__reset+0x20010ac>
802103d8:	80210ac0 	call	880210ac <__reset+0x20010ac>
802103dc:	80210ac0 	call	880210ac <__reset+0x20010ac>
802103e0:	80210ac0 	call	880210ac <__reset+0x20010ac>
802103e4:	80210ac0 	call	880210ac <__reset+0x20010ac>
802103e8:	80210ac0 	call	880210ac <__reset+0x20010ac>
802103ec:	80210ac0 	call	880210ac <__reset+0x20010ac>
802103f0:	80210ac0 	call	880210ac <__reset+0x20010ac>
802103f4:	80210a24 	muli	zero,r16,-31704
802103f8:	80210ac0 	call	880210ac <__reset+0x20010ac>
802103fc:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210400:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210404:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210408:	80210ac0 	call	880210ac <__reset+0x20010ac>
8021040c:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210410:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210414:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210418:	80210ac0 	call	880210ac <__reset+0x20010ac>
8021041c:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210420:	80210b9c 	xori	zero,r16,33838
80210424:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210428:	80210ac0 	call	880210ac <__reset+0x20010ac>
8021042c:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210430:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210434:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210438:	80210b34 	orhi	zero,r16,33836
8021043c:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210440:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210444:	80210868 	cmpgeui	zero,r16,33825
80210448:	80210ac0 	call	880210ac <__reset+0x20010ac>
8021044c:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210450:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210454:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210458:	80210ac0 	call	880210ac <__reset+0x20010ac>
8021045c:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210460:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210464:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210468:	80210ac0 	call	880210ac <__reset+0x20010ac>
8021046c:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210470:	80210758 	cmpnei	zero,r16,-31715
80210474:	80210904 	addi	zero,r16,-31708
80210478:	80210ac0 	call	880210ac <__reset+0x20010ac>
8021047c:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210480:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210484:	802108f8 	rdprs	zero,r16,-31709
80210488:	80210904 	addi	zero,r16,-31708
8021048c:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210490:	80210ac0 	call	880210ac <__reset+0x20010ac>
80210494:	802108e8 	cmpgeui	zero,r16,33827
80210498:	80210ac0 	call	880210ac <__reset+0x20010ac>
8021049c:	802108ac 	andhi	zero,r16,33826
802104a0:	802106b4 	orhi	zero,r16,33818
802104a4:	80210500 	call	88021050 <__reset+0x2001050>
802104a8:	80210a18 	cmpnei	zero,r16,-31704
802104ac:	80210ac0 	call	880210ac <__reset+0x20010ac>
802104b0:	802109cc 	andi	zero,r16,33831
802104b4:	80210ac0 	call	880210ac <__reset+0x20010ac>
802104b8:	80210624 	muli	zero,r16,-31720
802104bc:	80210ac0 	call	880210ac <__reset+0x20010ac>
802104c0:	80210ac0 	call	880210ac <__reset+0x20010ac>
802104c4:	80210580 	call	88021058 <__reset+0x2001058>
802104c8:	dac02317 	ldw	r11,140(sp)
802104cc:	5ac00017 	ldw	r11,0(r11)
802104d0:	dac02415 	stw	r11,144(sp)
802104d4:	dac02317 	ldw	r11,140(sp)
802104d8:	58800104 	addi	r2,r11,4
802104dc:	dac02417 	ldw	r11,144(sp)
802104e0:	5802e90e 	bge	r11,zero,80211088 <___svfiprintf_internal_r+0xe84>
802104e4:	dac02417 	ldw	r11,144(sp)
802104e8:	d8802315 	stw	r2,140(sp)
802104ec:	02d7c83a 	sub	r11,zero,r11
802104f0:	dac02415 	stw	r11,144(sp)
802104f4:	94800114 	ori	r18,r18,4
802104f8:	98c00007 	ldb	r3,0(r19)
802104fc:	003f9006 	br	80210340 <__reset+0xfa1f0340>
80210500:	00800c04 	movi	r2,48
80210504:	dac02317 	ldw	r11,140(sp)
80210508:	d8801d05 	stb	r2,116(sp)
8021050c:	00801e04 	movi	r2,120
80210510:	d8801d45 	stb	r2,117(sp)
80210514:	d8001d85 	stb	zero,118(sp)
80210518:	58c00104 	addi	r3,r11,4
8021051c:	5f000017 	ldw	fp,0(r11)
80210520:	0013883a 	mov	r9,zero
80210524:	90800094 	ori	r2,r18,2
80210528:	80032b16 	blt	r16,zero,802111d8 <___svfiprintf_internal_r+0xfd4>
8021052c:	00bfdfc4 	movi	r2,-129
80210530:	90a4703a 	and	r18,r18,r2
80210534:	d8c02315 	stw	r3,140(sp)
80210538:	94800094 	ori	r18,r18,2
8021053c:	e002dc26 	beq	fp,zero,802110b0 <___svfiprintf_internal_r+0xeac>
80210540:	012008b4 	movhi	r4,32802
80210544:	21329804 	addi	r4,r4,-13728
80210548:	0015883a 	mov	r10,zero
8021054c:	d9002915 	stw	r4,164(sp)
80210550:	00002306 	br	802105e0 <___svfiprintf_internal_r+0x3dc>
80210554:	94800054 	ori	r18,r18,1
80210558:	98c00007 	ldb	r3,0(r19)
8021055c:	003f7806 	br	80210340 <__reset+0xfa1f0340>
80210560:	38803fcc 	andi	r2,r7,255
80210564:	1080201c 	xori	r2,r2,128
80210568:	10bfe004 	addi	r2,r2,-128
8021056c:	1002f31e 	bne	r2,zero,8021113c <___svfiprintf_internal_r+0xf38>
80210570:	01000044 	movi	r4,1
80210574:	01c00804 	movi	r7,32
80210578:	98c00007 	ldb	r3,0(r19)
8021057c:	003f7006 	br	80210340 <__reset+0xfa1f0340>
80210580:	21003fcc 	andi	r4,r4,255
80210584:	2003aa1e 	bne	r4,zero,80211430 <___svfiprintf_internal_r+0x122c>
80210588:	00a008b4 	movhi	r2,32802
8021058c:	10b29804 	addi	r2,r2,-13728
80210590:	d8802915 	stw	r2,164(sp)
80210594:	9080080c 	andi	r2,r18,32
80210598:	1000ba26 	beq	r2,zero,80210884 <___svfiprintf_internal_r+0x680>
8021059c:	dac02317 	ldw	r11,140(sp)
802105a0:	5f000017 	ldw	fp,0(r11)
802105a4:	5a400117 	ldw	r9,4(r11)
802105a8:	5ac00204 	addi	r11,r11,8
802105ac:	dac02315 	stw	r11,140(sp)
802105b0:	9080004c 	andi	r2,r18,1
802105b4:	10029026 	beq	r2,zero,80210ff8 <___svfiprintf_internal_r+0xdf4>
802105b8:	e244b03a 	or	r2,fp,r9
802105bc:	1002d41e 	bne	r2,zero,80211110 <___svfiprintf_internal_r+0xf0c>
802105c0:	d8001d85 	stb	zero,118(sp)
802105c4:	80030b16 	blt	r16,zero,802111f4 <___svfiprintf_internal_r+0xff0>
802105c8:	00bfdfc4 	movi	r2,-129
802105cc:	90a4703a 	and	r18,r18,r2
802105d0:	0015883a 	mov	r10,zero
802105d4:	80002426 	beq	r16,zero,80210668 <___svfiprintf_internal_r+0x464>
802105d8:	0039883a 	mov	fp,zero
802105dc:	0013883a 	mov	r9,zero
802105e0:	d9002917 	ldw	r4,164(sp)
802105e4:	dc401a04 	addi	r17,sp,104
802105e8:	e08003cc 	andi	r2,fp,15
802105ec:	4806973a 	slli	r3,r9,28
802105f0:	2085883a 	add	r2,r4,r2
802105f4:	e038d13a 	srli	fp,fp,4
802105f8:	10800003 	ldbu	r2,0(r2)
802105fc:	4812d13a 	srli	r9,r9,4
80210600:	8c7fffc4 	addi	r17,r17,-1
80210604:	1f38b03a 	or	fp,r3,fp
80210608:	88800005 	stb	r2,0(r17)
8021060c:	e244b03a 	or	r2,fp,r9
80210610:	103ff51e 	bne	r2,zero,802105e8 <__reset+0xfa1f05e8>
80210614:	dac01e17 	ldw	r11,120(sp)
80210618:	5c57c83a 	sub	r11,r11,r17
8021061c:	dac02115 	stw	r11,132(sp)
80210620:	00001406 	br	80210674 <___svfiprintf_internal_r+0x470>
80210624:	21003fcc 	andi	r4,r4,255
80210628:	2003741e 	bne	r4,zero,802113fc <___svfiprintf_internal_r+0x11f8>
8021062c:	9080080c 	andi	r2,r18,32
80210630:	10014526 	beq	r2,zero,80210b48 <___svfiprintf_internal_r+0x944>
80210634:	dac02317 	ldw	r11,140(sp)
80210638:	d8001d85 	stb	zero,118(sp)
8021063c:	58c00204 	addi	r3,r11,8
80210640:	5f000017 	ldw	fp,0(r11)
80210644:	5a400117 	ldw	r9,4(r11)
80210648:	8002d916 	blt	r16,zero,802111b0 <___svfiprintf_internal_r+0xfac>
8021064c:	013fdfc4 	movi	r4,-129
80210650:	e244b03a 	or	r2,fp,r9
80210654:	d8c02315 	stw	r3,140(sp)
80210658:	9124703a 	and	r18,r18,r4
8021065c:	0015883a 	mov	r10,zero
80210660:	1000b91e 	bne	r2,zero,80210948 <___svfiprintf_internal_r+0x744>
80210664:	8002e61e 	bne	r16,zero,80211200 <___svfiprintf_internal_r+0xffc>
80210668:	0021883a 	mov	r16,zero
8021066c:	d8002115 	stw	zero,132(sp)
80210670:	dc401a04 	addi	r17,sp,104
80210674:	d8c02117 	ldw	r3,132(sp)
80210678:	dc002015 	stw	r16,128(sp)
8021067c:	80c0010e 	bge	r16,r3,80210684 <___svfiprintf_internal_r+0x480>
80210680:	d8c02015 	stw	r3,128(sp)
80210684:	52803fcc 	andi	r10,r10,255
80210688:	5280201c 	xori	r10,r10,128
8021068c:	52bfe004 	addi	r10,r10,-128
80210690:	50003c26 	beq	r10,zero,80210784 <___svfiprintf_internal_r+0x580>
80210694:	dac02017 	ldw	r11,128(sp)
80210698:	5ac00044 	addi	r11,r11,1
8021069c:	dac02015 	stw	r11,128(sp)
802106a0:	00003806 	br	80210784 <___svfiprintf_internal_r+0x580>
802106a4:	01000044 	movi	r4,1
802106a8:	01c00ac4 	movi	r7,43
802106ac:	98c00007 	ldb	r3,0(r19)
802106b0:	003f2306 	br	80210340 <__reset+0xfa1f0340>
802106b4:	21003fcc 	andi	r4,r4,255
802106b8:	2003481e 	bne	r4,zero,802113dc <___svfiprintf_internal_r+0x11d8>
802106bc:	9080080c 	andi	r2,r18,32
802106c0:	10013b26 	beq	r2,zero,80210bb0 <___svfiprintf_internal_r+0x9ac>
802106c4:	dac02317 	ldw	r11,140(sp)
802106c8:	d8001d85 	stb	zero,118(sp)
802106cc:	58800204 	addi	r2,r11,8
802106d0:	5f000017 	ldw	fp,0(r11)
802106d4:	5a400117 	ldw	r9,4(r11)
802106d8:	8002a816 	blt	r16,zero,8021117c <___svfiprintf_internal_r+0xf78>
802106dc:	013fdfc4 	movi	r4,-129
802106e0:	e246b03a 	or	r3,fp,r9
802106e4:	d8802315 	stw	r2,140(sp)
802106e8:	9124703a 	and	r18,r18,r4
802106ec:	18013c26 	beq	r3,zero,80210be0 <___svfiprintf_internal_r+0x9dc>
802106f0:	0015883a 	mov	r10,zero
802106f4:	dc401a04 	addi	r17,sp,104
802106f8:	e006d0fa 	srli	r3,fp,3
802106fc:	4808977a 	slli	r4,r9,29
80210700:	4812d0fa 	srli	r9,r9,3
80210704:	e70001cc 	andi	fp,fp,7
80210708:	e0800c04 	addi	r2,fp,48
8021070c:	8c7fffc4 	addi	r17,r17,-1
80210710:	20f8b03a 	or	fp,r4,r3
80210714:	88800005 	stb	r2,0(r17)
80210718:	e246b03a 	or	r3,fp,r9
8021071c:	183ff61e 	bne	r3,zero,802106f8 <__reset+0xfa1f06f8>
80210720:	90c0004c 	andi	r3,r18,1
80210724:	1800a526 	beq	r3,zero,802109bc <___svfiprintf_internal_r+0x7b8>
80210728:	10803fcc 	andi	r2,r2,255
8021072c:	1080201c 	xori	r2,r2,128
80210730:	10bfe004 	addi	r2,r2,-128
80210734:	00c00c04 	movi	r3,48
80210738:	10ffb626 	beq	r2,r3,80210614 <__reset+0xfa1f0614>
8021073c:	88ffffc5 	stb	r3,-1(r17)
80210740:	d8c01e17 	ldw	r3,120(sp)
80210744:	88bfffc4 	addi	r2,r17,-1
80210748:	1023883a 	mov	r17,r2
8021074c:	1887c83a 	sub	r3,r3,r2
80210750:	d8c02115 	stw	r3,132(sp)
80210754:	003fc706 	br	80210674 <__reset+0xfa1f0674>
80210758:	dac02317 	ldw	r11,140(sp)
8021075c:	00c00044 	movi	r3,1
80210760:	d8c02015 	stw	r3,128(sp)
80210764:	58800017 	ldw	r2,0(r11)
80210768:	5ac00104 	addi	r11,r11,4
8021076c:	d8001d85 	stb	zero,118(sp)
80210770:	d8801005 	stb	r2,64(sp)
80210774:	dac02315 	stw	r11,140(sp)
80210778:	d8c02115 	stw	r3,132(sp)
8021077c:	dc401004 	addi	r17,sp,64
80210780:	0021883a 	mov	r16,zero
80210784:	90c0008c 	andi	r3,r18,2
80210788:	d8c02215 	stw	r3,136(sp)
8021078c:	18000326 	beq	r3,zero,8021079c <___svfiprintf_internal_r+0x598>
80210790:	dac02017 	ldw	r11,128(sp)
80210794:	5ac00084 	addi	r11,r11,2
80210798:	dac02015 	stw	r11,128(sp)
8021079c:	90c0210c 	andi	r3,r18,132
802107a0:	d8c02615 	stw	r3,152(sp)
802107a4:	1801131e 	bne	r3,zero,80210bf4 <___svfiprintf_internal_r+0x9f0>
802107a8:	dac02417 	ldw	r11,144(sp)
802107ac:	d8c02017 	ldw	r3,128(sp)
802107b0:	58f9c83a 	sub	fp,r11,r3
802107b4:	07010f0e 	bge	zero,fp,80210bf4 <___svfiprintf_internal_r+0x9f0>
802107b8:	02400404 	movi	r9,16
802107bc:	d8c01c17 	ldw	r3,112(sp)
802107c0:	d8801b17 	ldw	r2,108(sp)
802107c4:	4f02d60e 	bge	r9,fp,80211320 <___svfiprintf_internal_r+0x111c>
802107c8:	016008b4 	movhi	r5,32802
802107cc:	29730404 	addi	r5,r5,-13296
802107d0:	d9402815 	stw	r5,160(sp)
802107d4:	028001c4 	movi	r10,7
802107d8:	00000306 	br	802107e8 <___svfiprintf_internal_r+0x5e4>
802107dc:	e73ffc04 	addi	fp,fp,-16
802107e0:	42000204 	addi	r8,r8,8
802107e4:	4f00150e 	bge	r9,fp,8021083c <___svfiprintf_internal_r+0x638>
802107e8:	18c00404 	addi	r3,r3,16
802107ec:	10800044 	addi	r2,r2,1
802107f0:	45800015 	stw	r22,0(r8)
802107f4:	42400115 	stw	r9,4(r8)
802107f8:	d8c01c15 	stw	r3,112(sp)
802107fc:	d8801b15 	stw	r2,108(sp)
80210800:	50bff60e 	bge	r10,r2,802107dc <__reset+0xfa1f07dc>
80210804:	d9801a04 	addi	r6,sp,104
80210808:	b80b883a 	mov	r5,r23
8021080c:	a809883a 	mov	r4,r21
80210810:	da402c15 	stw	r9,176(sp)
80210814:	da802d15 	stw	r10,180(sp)
80210818:	02100340 	call	80210034 <__ssprint_r>
8021081c:	da402c17 	ldw	r9,176(sp)
80210820:	da802d17 	ldw	r10,180(sp)
80210824:	1001851e 	bne	r2,zero,80210e3c <___svfiprintf_internal_r+0xc38>
80210828:	e73ffc04 	addi	fp,fp,-16
8021082c:	d8c01c17 	ldw	r3,112(sp)
80210830:	d8801b17 	ldw	r2,108(sp)
80210834:	d811883a 	mov	r8,sp
80210838:	4f3feb16 	blt	r9,fp,802107e8 <__reset+0xfa1f07e8>
8021083c:	dac02817 	ldw	r11,160(sp)
80210840:	e0c7883a 	add	r3,fp,r3
80210844:	10800044 	addi	r2,r2,1
80210848:	42c00015 	stw	r11,0(r8)
8021084c:	47000115 	stw	fp,4(r8)
80210850:	d8c01c15 	stw	r3,112(sp)
80210854:	d8801b15 	stw	r2,108(sp)
80210858:	010001c4 	movi	r4,7
8021085c:	2081ee16 	blt	r4,r2,80211018 <___svfiprintf_internal_r+0xe14>
80210860:	42000204 	addi	r8,r8,8
80210864:	0000e506 	br	80210bfc <___svfiprintf_internal_r+0x9f8>
80210868:	21003fcc 	andi	r4,r4,255
8021086c:	2002dd1e 	bne	r4,zero,802113e4 <___svfiprintf_internal_r+0x11e0>
80210870:	00a008b4 	movhi	r2,32802
80210874:	10b29304 	addi	r2,r2,-13748
80210878:	d8802915 	stw	r2,164(sp)
8021087c:	9080080c 	andi	r2,r18,32
80210880:	103f461e 	bne	r2,zero,8021059c <__reset+0xfa1f059c>
80210884:	9080040c 	andi	r2,r18,16
80210888:	10022e1e 	bne	r2,zero,80211144 <___svfiprintf_internal_r+0xf40>
8021088c:	9080100c 	andi	r2,r18,64
80210890:	dac02317 	ldw	r11,140(sp)
80210894:	10027326 	beq	r2,zero,80211264 <___svfiprintf_internal_r+0x1060>
80210898:	5f00000b 	ldhu	fp,0(r11)
8021089c:	5ac00104 	addi	r11,r11,4
802108a0:	0013883a 	mov	r9,zero
802108a4:	dac02315 	stw	r11,140(sp)
802108a8:	003f4106 	br	802105b0 <__reset+0xfa1f05b0>
802108ac:	21003fcc 	andi	r4,r4,255
802108b0:	2002e11e 	bne	r4,zero,80211438 <___svfiprintf_internal_r+0x1234>
802108b4:	9080080c 	andi	r2,r18,32
802108b8:	1002011e 	bne	r2,zero,802110c0 <___svfiprintf_internal_r+0xebc>
802108bc:	9080040c 	andi	r2,r18,16
802108c0:	10023e1e 	bne	r2,zero,802111bc <___svfiprintf_internal_r+0xfb8>
802108c4:	9480100c 	andi	r18,r18,64
802108c8:	90023c26 	beq	r18,zero,802111bc <___svfiprintf_internal_r+0xfb8>
802108cc:	dac02317 	ldw	r11,140(sp)
802108d0:	58800017 	ldw	r2,0(r11)
802108d4:	5ac00104 	addi	r11,r11,4
802108d8:	dac02315 	stw	r11,140(sp)
802108dc:	dac02517 	ldw	r11,148(sp)
802108e0:	12c0000d 	sth	r11,0(r2)
802108e4:	003e6e06 	br	802102a0 <__reset+0xfa1f02a0>
802108e8:	98c00007 	ldb	r3,0(r19)
802108ec:	1a422926 	beq	r3,r9,80211194 <___svfiprintf_internal_r+0xf90>
802108f0:	94800414 	ori	r18,r18,16
802108f4:	003e9206 	br	80210340 <__reset+0xfa1f0340>
802108f8:	94801014 	ori	r18,r18,64
802108fc:	98c00007 	ldb	r3,0(r19)
80210900:	003e8f06 	br	80210340 <__reset+0xfa1f0340>
80210904:	21003fcc 	andi	r4,r4,255
80210908:	2002c71e 	bne	r4,zero,80211428 <___svfiprintf_internal_r+0x1224>
8021090c:	9080080c 	andi	r2,r18,32
80210910:	10004926 	beq	r2,zero,80210a38 <___svfiprintf_internal_r+0x834>
80210914:	dac02317 	ldw	r11,140(sp)
80210918:	58800117 	ldw	r2,4(r11)
8021091c:	5f000017 	ldw	fp,0(r11)
80210920:	5ac00204 	addi	r11,r11,8
80210924:	dac02315 	stw	r11,140(sp)
80210928:	1013883a 	mov	r9,r2
8021092c:	10004b16 	blt	r2,zero,80210a5c <___svfiprintf_internal_r+0x858>
80210930:	da801d83 	ldbu	r10,118(sp)
80210934:	8001cb16 	blt	r16,zero,80211064 <___svfiprintf_internal_r+0xe60>
80210938:	00ffdfc4 	movi	r3,-129
8021093c:	e244b03a 	or	r2,fp,r9
80210940:	90e4703a 	and	r18,r18,r3
80210944:	103f4726 	beq	r2,zero,80210664 <__reset+0xfa1f0664>
80210948:	48008c26 	beq	r9,zero,80210b7c <___svfiprintf_internal_r+0x978>
8021094c:	dc802015 	stw	r18,128(sp)
80210950:	dc002115 	stw	r16,132(sp)
80210954:	dc401a04 	addi	r17,sp,104
80210958:	e021883a 	mov	r16,fp
8021095c:	da002215 	stw	r8,136(sp)
80210960:	5039883a 	mov	fp,r10
80210964:	4825883a 	mov	r18,r9
80210968:	8009883a 	mov	r4,r16
8021096c:	900b883a 	mov	r5,r18
80210970:	01800284 	movi	r6,10
80210974:	000f883a 	mov	r7,zero
80210978:	02139340 	call	80213934 <__umoddi3>
8021097c:	10800c04 	addi	r2,r2,48
80210980:	8c7fffc4 	addi	r17,r17,-1
80210984:	8009883a 	mov	r4,r16
80210988:	900b883a 	mov	r5,r18
8021098c:	88800005 	stb	r2,0(r17)
80210990:	01800284 	movi	r6,10
80210994:	000f883a 	mov	r7,zero
80210998:	02133bc0 	call	802133bc <__udivdi3>
8021099c:	1021883a 	mov	r16,r2
802109a0:	10c4b03a 	or	r2,r2,r3
802109a4:	1825883a 	mov	r18,r3
802109a8:	103fef1e 	bne	r2,zero,80210968 <__reset+0xfa1f0968>
802109ac:	dc802017 	ldw	r18,128(sp)
802109b0:	dc002117 	ldw	r16,132(sp)
802109b4:	da002217 	ldw	r8,136(sp)
802109b8:	e015883a 	mov	r10,fp
802109bc:	d8c01e17 	ldw	r3,120(sp)
802109c0:	1c47c83a 	sub	r3,r3,r17
802109c4:	d8c02115 	stw	r3,132(sp)
802109c8:	003f2a06 	br	80210674 <__reset+0xfa1f0674>
802109cc:	dac02317 	ldw	r11,140(sp)
802109d0:	d8001d85 	stb	zero,118(sp)
802109d4:	5c400017 	ldw	r17,0(r11)
802109d8:	5f000104 	addi	fp,r11,4
802109dc:	88022f26 	beq	r17,zero,8021129c <___svfiprintf_internal_r+0x1098>
802109e0:	80022516 	blt	r16,zero,80211278 <___svfiprintf_internal_r+0x1074>
802109e4:	800d883a 	mov	r6,r16
802109e8:	000b883a 	mov	r5,zero
802109ec:	8809883a 	mov	r4,r17
802109f0:	da002c15 	stw	r8,176(sp)
802109f4:	020e48c0 	call	8020e48c <memchr>
802109f8:	da002c17 	ldw	r8,176(sp)
802109fc:	10026426 	beq	r2,zero,80211390 <___svfiprintf_internal_r+0x118c>
80210a00:	1445c83a 	sub	r2,r2,r17
80210a04:	d8802115 	stw	r2,132(sp)
80210a08:	da801d83 	ldbu	r10,118(sp)
80210a0c:	df002315 	stw	fp,140(sp)
80210a10:	0021883a 	mov	r16,zero
80210a14:	003f1706 	br	80210674 <__reset+0xfa1f0674>
80210a18:	94800814 	ori	r18,r18,32
80210a1c:	98c00007 	ldb	r3,0(r19)
80210a20:	003e4706 	br	80210340 <__reset+0xfa1f0340>
80210a24:	21003fcc 	andi	r4,r4,255
80210a28:	2002701e 	bne	r4,zero,802113ec <___svfiprintf_internal_r+0x11e8>
80210a2c:	94800414 	ori	r18,r18,16
80210a30:	9080080c 	andi	r2,r18,32
80210a34:	103fb71e 	bne	r2,zero,80210914 <__reset+0xfa1f0914>
80210a38:	9080040c 	andi	r2,r18,16
80210a3c:	1001ab26 	beq	r2,zero,802110ec <___svfiprintf_internal_r+0xee8>
80210a40:	dac02317 	ldw	r11,140(sp)
80210a44:	5f000017 	ldw	fp,0(r11)
80210a48:	5ac00104 	addi	r11,r11,4
80210a4c:	dac02315 	stw	r11,140(sp)
80210a50:	e013d7fa 	srai	r9,fp,31
80210a54:	4805883a 	mov	r2,r9
80210a58:	103fb50e 	bge	r2,zero,80210930 <__reset+0xfa1f0930>
80210a5c:	0739c83a 	sub	fp,zero,fp
80210a60:	02800b44 	movi	r10,45
80210a64:	e004c03a 	cmpne	r2,fp,zero
80210a68:	0253c83a 	sub	r9,zero,r9
80210a6c:	da801d85 	stb	r10,118(sp)
80210a70:	4893c83a 	sub	r9,r9,r2
80210a74:	80023016 	blt	r16,zero,80211338 <___svfiprintf_internal_r+0x1134>
80210a78:	00bfdfc4 	movi	r2,-129
80210a7c:	90a4703a 	and	r18,r18,r2
80210a80:	483fb21e 	bne	r9,zero,8021094c <__reset+0xfa1f094c>
80210a84:	00003d06 	br	80210b7c <___svfiprintf_internal_r+0x978>
80210a88:	9817883a 	mov	r11,r19
80210a8c:	d8002415 	stw	zero,144(sp)
80210a90:	18bff404 	addi	r2,r3,-48
80210a94:	0019883a 	mov	r12,zero
80210a98:	58c00007 	ldb	r3,0(r11)
80210a9c:	630002a4 	muli	r12,r12,10
80210aa0:	9cc00044 	addi	r19,r19,1
80210aa4:	9817883a 	mov	r11,r19
80210aa8:	1319883a 	add	r12,r2,r12
80210aac:	18bff404 	addi	r2,r3,-48
80210ab0:	30bff92e 	bgeu	r6,r2,80210a98 <__reset+0xfa1f0a98>
80210ab4:	db002415 	stw	r12,144(sp)
80210ab8:	18bff804 	addi	r2,r3,-32
80210abc:	28be232e 	bgeu	r5,r2,8021034c <__reset+0xfa1f034c>
80210ac0:	21003fcc 	andi	r4,r4,255
80210ac4:	20024b1e 	bne	r4,zero,802113f4 <___svfiprintf_internal_r+0x11f0>
80210ac8:	1800d626 	beq	r3,zero,80210e24 <___svfiprintf_internal_r+0xc20>
80210acc:	02c00044 	movi	r11,1
80210ad0:	dac02015 	stw	r11,128(sp)
80210ad4:	d8c01005 	stb	r3,64(sp)
80210ad8:	d8001d85 	stb	zero,118(sp)
80210adc:	dac02115 	stw	r11,132(sp)
80210ae0:	dc401004 	addi	r17,sp,64
80210ae4:	003f2606 	br	80210780 <__reset+0xfa1f0780>
80210ae8:	94802014 	ori	r18,r18,128
80210aec:	98c00007 	ldb	r3,0(r19)
80210af0:	003e1306 	br	80210340 <__reset+0xfa1f0340>
80210af4:	98c00007 	ldb	r3,0(r19)
80210af8:	9ac00044 	addi	r11,r19,1
80210afc:	1a822b26 	beq	r3,r10,802113ac <___svfiprintf_internal_r+0x11a8>
80210b00:	18bff404 	addi	r2,r3,-48
80210b04:	0021883a 	mov	r16,zero
80210b08:	30821e36 	bltu	r6,r2,80211384 <___svfiprintf_internal_r+0x1180>
80210b0c:	58c00007 	ldb	r3,0(r11)
80210b10:	840002a4 	muli	r16,r16,10
80210b14:	5cc00044 	addi	r19,r11,1
80210b18:	9817883a 	mov	r11,r19
80210b1c:	80a1883a 	add	r16,r16,r2
80210b20:	18bff404 	addi	r2,r3,-48
80210b24:	30bff92e 	bgeu	r6,r2,80210b0c <__reset+0xfa1f0b0c>
80210b28:	803e060e 	bge	r16,zero,80210344 <__reset+0xfa1f0344>
80210b2c:	043fffc4 	movi	r16,-1
80210b30:	003e0406 	br	80210344 <__reset+0xfa1f0344>
80210b34:	21003fcc 	andi	r4,r4,255
80210b38:	2002371e 	bne	r4,zero,80211418 <___svfiprintf_internal_r+0x1214>
80210b3c:	94800414 	ori	r18,r18,16
80210b40:	9080080c 	andi	r2,r18,32
80210b44:	103ebb1e 	bne	r2,zero,80210634 <__reset+0xfa1f0634>
80210b48:	9080040c 	andi	r2,r18,16
80210b4c:	10013b26 	beq	r2,zero,8021103c <___svfiprintf_internal_r+0xe38>
80210b50:	dac02317 	ldw	r11,140(sp)
80210b54:	d8001d85 	stb	zero,118(sp)
80210b58:	0013883a 	mov	r9,zero
80210b5c:	58800104 	addi	r2,r11,4
80210b60:	5f000017 	ldw	fp,0(r11)
80210b64:	80013d16 	blt	r16,zero,8021105c <___svfiprintf_internal_r+0xe58>
80210b68:	00ffdfc4 	movi	r3,-129
80210b6c:	d8802315 	stw	r2,140(sp)
80210b70:	90e4703a 	and	r18,r18,r3
80210b74:	0015883a 	mov	r10,zero
80210b78:	e03eba26 	beq	fp,zero,80210664 <__reset+0xfa1f0664>
80210b7c:	00800244 	movi	r2,9
80210b80:	173f7236 	bltu	r2,fp,8021094c <__reset+0xfa1f094c>
80210b84:	dac02b17 	ldw	r11,172(sp)
80210b88:	e7000c04 	addi	fp,fp,48
80210b8c:	df0019c5 	stb	fp,103(sp)
80210b90:	dac02115 	stw	r11,132(sp)
80210b94:	dc4019c4 	addi	r17,sp,103
80210b98:	003eb606 	br	80210674 <__reset+0xfa1f0674>
80210b9c:	21003fcc 	andi	r4,r4,255
80210ba0:	20021f1e 	bne	r4,zero,80211420 <___svfiprintf_internal_r+0x121c>
80210ba4:	94800414 	ori	r18,r18,16
80210ba8:	9080080c 	andi	r2,r18,32
80210bac:	103ec51e 	bne	r2,zero,802106c4 <__reset+0xfa1f06c4>
80210bb0:	9080040c 	andi	r2,r18,16
80210bb4:	10016926 	beq	r2,zero,8021115c <___svfiprintf_internal_r+0xf58>
80210bb8:	dac02317 	ldw	r11,140(sp)
80210bbc:	d8001d85 	stb	zero,118(sp)
80210bc0:	0013883a 	mov	r9,zero
80210bc4:	58800104 	addi	r2,r11,4
80210bc8:	5f000017 	ldw	fp,0(r11)
80210bcc:	80016b16 	blt	r16,zero,8021117c <___svfiprintf_internal_r+0xf78>
80210bd0:	00ffdfc4 	movi	r3,-129
80210bd4:	d8802315 	stw	r2,140(sp)
80210bd8:	90e4703a 	and	r18,r18,r3
80210bdc:	e03ec41e 	bne	fp,zero,802106f0 <__reset+0xfa1f06f0>
80210be0:	0015883a 	mov	r10,zero
80210be4:	8001c226 	beq	r16,zero,802112f0 <___svfiprintf_internal_r+0x10ec>
80210be8:	0039883a 	mov	fp,zero
80210bec:	0013883a 	mov	r9,zero
80210bf0:	003ec006 	br	802106f4 <__reset+0xfa1f06f4>
80210bf4:	d8c01c17 	ldw	r3,112(sp)
80210bf8:	d8801b17 	ldw	r2,108(sp)
80210bfc:	d9001d87 	ldb	r4,118(sp)
80210c00:	20000b26 	beq	r4,zero,80210c30 <___svfiprintf_internal_r+0xa2c>
80210c04:	d9001d84 	addi	r4,sp,118
80210c08:	18c00044 	addi	r3,r3,1
80210c0c:	10800044 	addi	r2,r2,1
80210c10:	41000015 	stw	r4,0(r8)
80210c14:	01000044 	movi	r4,1
80210c18:	41000115 	stw	r4,4(r8)
80210c1c:	d8c01c15 	stw	r3,112(sp)
80210c20:	d8801b15 	stw	r2,108(sp)
80210c24:	010001c4 	movi	r4,7
80210c28:	2080e116 	blt	r4,r2,80210fb0 <___svfiprintf_internal_r+0xdac>
80210c2c:	42000204 	addi	r8,r8,8
80210c30:	dac02217 	ldw	r11,136(sp)
80210c34:	58000b26 	beq	r11,zero,80210c64 <___svfiprintf_internal_r+0xa60>
80210c38:	d9001d04 	addi	r4,sp,116
80210c3c:	18c00084 	addi	r3,r3,2
80210c40:	10800044 	addi	r2,r2,1
80210c44:	41000015 	stw	r4,0(r8)
80210c48:	01000084 	movi	r4,2
80210c4c:	41000115 	stw	r4,4(r8)
80210c50:	d8c01c15 	stw	r3,112(sp)
80210c54:	d8801b15 	stw	r2,108(sp)
80210c58:	010001c4 	movi	r4,7
80210c5c:	2080dd16 	blt	r4,r2,80210fd4 <___svfiprintf_internal_r+0xdd0>
80210c60:	42000204 	addi	r8,r8,8
80210c64:	dac02617 	ldw	r11,152(sp)
80210c68:	01002004 	movi	r4,128
80210c6c:	59008426 	beq	r11,r4,80210e80 <___svfiprintf_internal_r+0xc7c>
80210c70:	dac02117 	ldw	r11,132(sp)
80210c74:	82e1c83a 	sub	r16,r16,r11
80210c78:	0400270e 	bge	zero,r16,80210d18 <___svfiprintf_internal_r+0xb14>
80210c7c:	01c00404 	movi	r7,16
80210c80:	3c016a0e 	bge	r7,r16,8021122c <___svfiprintf_internal_r+0x1028>
80210c84:	016008b4 	movhi	r5,32802
80210c88:	29730004 	addi	r5,r5,-13312
80210c8c:	d9402215 	stw	r5,136(sp)
80210c90:	070001c4 	movi	fp,7
80210c94:	00000306 	br	80210ca4 <___svfiprintf_internal_r+0xaa0>
80210c98:	843ffc04 	addi	r16,r16,-16
80210c9c:	42000204 	addi	r8,r8,8
80210ca0:	3c00130e 	bge	r7,r16,80210cf0 <___svfiprintf_internal_r+0xaec>
80210ca4:	18c00404 	addi	r3,r3,16
80210ca8:	10800044 	addi	r2,r2,1
80210cac:	45000015 	stw	r20,0(r8)
80210cb0:	41c00115 	stw	r7,4(r8)
80210cb4:	d8c01c15 	stw	r3,112(sp)
80210cb8:	d8801b15 	stw	r2,108(sp)
80210cbc:	e0bff60e 	bge	fp,r2,80210c98 <__reset+0xfa1f0c98>
80210cc0:	d9801a04 	addi	r6,sp,104
80210cc4:	b80b883a 	mov	r5,r23
80210cc8:	a809883a 	mov	r4,r21
80210ccc:	d9c02c15 	stw	r7,176(sp)
80210cd0:	02100340 	call	80210034 <__ssprint_r>
80210cd4:	d9c02c17 	ldw	r7,176(sp)
80210cd8:	1000581e 	bne	r2,zero,80210e3c <___svfiprintf_internal_r+0xc38>
80210cdc:	843ffc04 	addi	r16,r16,-16
80210ce0:	d8c01c17 	ldw	r3,112(sp)
80210ce4:	d8801b17 	ldw	r2,108(sp)
80210ce8:	d811883a 	mov	r8,sp
80210cec:	3c3fed16 	blt	r7,r16,80210ca4 <__reset+0xfa1f0ca4>
80210cf0:	dac02217 	ldw	r11,136(sp)
80210cf4:	1c07883a 	add	r3,r3,r16
80210cf8:	10800044 	addi	r2,r2,1
80210cfc:	42c00015 	stw	r11,0(r8)
80210d00:	44000115 	stw	r16,4(r8)
80210d04:	d8c01c15 	stw	r3,112(sp)
80210d08:	d8801b15 	stw	r2,108(sp)
80210d0c:	010001c4 	movi	r4,7
80210d10:	20809e16 	blt	r4,r2,80210f8c <___svfiprintf_internal_r+0xd88>
80210d14:	42000204 	addi	r8,r8,8
80210d18:	dac02117 	ldw	r11,132(sp)
80210d1c:	10800044 	addi	r2,r2,1
80210d20:	44400015 	stw	r17,0(r8)
80210d24:	58c7883a 	add	r3,r11,r3
80210d28:	42c00115 	stw	r11,4(r8)
80210d2c:	d8c01c15 	stw	r3,112(sp)
80210d30:	d8801b15 	stw	r2,108(sp)
80210d34:	010001c4 	movi	r4,7
80210d38:	20807f16 	blt	r4,r2,80210f38 <___svfiprintf_internal_r+0xd34>
80210d3c:	42000204 	addi	r8,r8,8
80210d40:	9480010c 	andi	r18,r18,4
80210d44:	90002926 	beq	r18,zero,80210dec <___svfiprintf_internal_r+0xbe8>
80210d48:	dac02417 	ldw	r11,144(sp)
80210d4c:	d8802017 	ldw	r2,128(sp)
80210d50:	58a1c83a 	sub	r16,r11,r2
80210d54:	0400250e 	bge	zero,r16,80210dec <___svfiprintf_internal_r+0xbe8>
80210d58:	04400404 	movi	r17,16
80210d5c:	d8801b17 	ldw	r2,108(sp)
80210d60:	8c017c0e 	bge	r17,r16,80211354 <___svfiprintf_internal_r+0x1150>
80210d64:	016008b4 	movhi	r5,32802
80210d68:	29730404 	addi	r5,r5,-13296
80210d6c:	d9402815 	stw	r5,160(sp)
80210d70:	048001c4 	movi	r18,7
80210d74:	00000306 	br	80210d84 <___svfiprintf_internal_r+0xb80>
80210d78:	843ffc04 	addi	r16,r16,-16
80210d7c:	42000204 	addi	r8,r8,8
80210d80:	8c00110e 	bge	r17,r16,80210dc8 <___svfiprintf_internal_r+0xbc4>
80210d84:	18c00404 	addi	r3,r3,16
80210d88:	10800044 	addi	r2,r2,1
80210d8c:	45800015 	stw	r22,0(r8)
80210d90:	44400115 	stw	r17,4(r8)
80210d94:	d8c01c15 	stw	r3,112(sp)
80210d98:	d8801b15 	stw	r2,108(sp)
80210d9c:	90bff60e 	bge	r18,r2,80210d78 <__reset+0xfa1f0d78>
80210da0:	d9801a04 	addi	r6,sp,104
80210da4:	b80b883a 	mov	r5,r23
80210da8:	a809883a 	mov	r4,r21
80210dac:	02100340 	call	80210034 <__ssprint_r>
80210db0:	1000221e 	bne	r2,zero,80210e3c <___svfiprintf_internal_r+0xc38>
80210db4:	843ffc04 	addi	r16,r16,-16
80210db8:	d8c01c17 	ldw	r3,112(sp)
80210dbc:	d8801b17 	ldw	r2,108(sp)
80210dc0:	d811883a 	mov	r8,sp
80210dc4:	8c3fef16 	blt	r17,r16,80210d84 <__reset+0xfa1f0d84>
80210dc8:	dac02817 	ldw	r11,160(sp)
80210dcc:	1c07883a 	add	r3,r3,r16
80210dd0:	10800044 	addi	r2,r2,1
80210dd4:	42c00015 	stw	r11,0(r8)
80210dd8:	44000115 	stw	r16,4(r8)
80210ddc:	d8c01c15 	stw	r3,112(sp)
80210de0:	d8801b15 	stw	r2,108(sp)
80210de4:	010001c4 	movi	r4,7
80210de8:	2080aa16 	blt	r4,r2,80211094 <___svfiprintf_internal_r+0xe90>
80210dec:	d8802417 	ldw	r2,144(sp)
80210df0:	dac02017 	ldw	r11,128(sp)
80210df4:	12c0010e 	bge	r2,r11,80210dfc <___svfiprintf_internal_r+0xbf8>
80210df8:	5805883a 	mov	r2,r11
80210dfc:	dac02517 	ldw	r11,148(sp)
80210e00:	5897883a 	add	r11,r11,r2
80210e04:	dac02515 	stw	r11,148(sp)
80210e08:	1800531e 	bne	r3,zero,80210f58 <___svfiprintf_internal_r+0xd54>
80210e0c:	98800007 	ldb	r2,0(r19)
80210e10:	d8001b15 	stw	zero,108(sp)
80210e14:	d811883a 	mov	r8,sp
80210e18:	103d231e 	bne	r2,zero,802102a8 <__reset+0xfa1f02a8>
80210e1c:	9823883a 	mov	r17,r19
80210e20:	003d3906 	br	80210308 <__reset+0xfa1f0308>
80210e24:	d8801c17 	ldw	r2,112(sp)
80210e28:	10000426 	beq	r2,zero,80210e3c <___svfiprintf_internal_r+0xc38>
80210e2c:	d9402717 	ldw	r5,156(sp)
80210e30:	d9002a17 	ldw	r4,168(sp)
80210e34:	d9801a04 	addi	r6,sp,104
80210e38:	02100340 	call	80210034 <__ssprint_r>
80210e3c:	dac02717 	ldw	r11,156(sp)
80210e40:	d8802517 	ldw	r2,148(sp)
80210e44:	58c0030b 	ldhu	r3,12(r11)
80210e48:	18c0100c 	andi	r3,r3,64
80210e4c:	1801381e 	bne	r3,zero,80211330 <___svfiprintf_internal_r+0x112c>
80210e50:	dfc03717 	ldw	ra,220(sp)
80210e54:	df003617 	ldw	fp,216(sp)
80210e58:	ddc03517 	ldw	r23,212(sp)
80210e5c:	dd803417 	ldw	r22,208(sp)
80210e60:	dd403317 	ldw	r21,204(sp)
80210e64:	dd003217 	ldw	r20,200(sp)
80210e68:	dcc03117 	ldw	r19,196(sp)
80210e6c:	dc803017 	ldw	r18,192(sp)
80210e70:	dc402f17 	ldw	r17,188(sp)
80210e74:	dc002e17 	ldw	r16,184(sp)
80210e78:	dec03804 	addi	sp,sp,224
80210e7c:	f800283a 	ret
80210e80:	dac02417 	ldw	r11,144(sp)
80210e84:	d9002017 	ldw	r4,128(sp)
80210e88:	5939c83a 	sub	fp,r11,r4
80210e8c:	073f780e 	bge	zero,fp,80210c70 <__reset+0xfa1f0c70>
80210e90:	02400404 	movi	r9,16
80210e94:	4f01370e 	bge	r9,fp,80211374 <___svfiprintf_internal_r+0x1170>
80210e98:	02e008b4 	movhi	r11,32802
80210e9c:	5af30004 	addi	r11,r11,-13312
80210ea0:	dac02215 	stw	r11,136(sp)
80210ea4:	028001c4 	movi	r10,7
80210ea8:	00000306 	br	80210eb8 <___svfiprintf_internal_r+0xcb4>
80210eac:	e73ffc04 	addi	fp,fp,-16
80210eb0:	42000204 	addi	r8,r8,8
80210eb4:	4f00150e 	bge	r9,fp,80210f0c <___svfiprintf_internal_r+0xd08>
80210eb8:	18c00404 	addi	r3,r3,16
80210ebc:	10800044 	addi	r2,r2,1
80210ec0:	45000015 	stw	r20,0(r8)
80210ec4:	42400115 	stw	r9,4(r8)
80210ec8:	d8c01c15 	stw	r3,112(sp)
80210ecc:	d8801b15 	stw	r2,108(sp)
80210ed0:	50bff60e 	bge	r10,r2,80210eac <__reset+0xfa1f0eac>
80210ed4:	d9801a04 	addi	r6,sp,104
80210ed8:	b80b883a 	mov	r5,r23
80210edc:	a809883a 	mov	r4,r21
80210ee0:	da402c15 	stw	r9,176(sp)
80210ee4:	da802d15 	stw	r10,180(sp)
80210ee8:	02100340 	call	80210034 <__ssprint_r>
80210eec:	da402c17 	ldw	r9,176(sp)
80210ef0:	da802d17 	ldw	r10,180(sp)
80210ef4:	103fd11e 	bne	r2,zero,80210e3c <__reset+0xfa1f0e3c>
80210ef8:	e73ffc04 	addi	fp,fp,-16
80210efc:	d8c01c17 	ldw	r3,112(sp)
80210f00:	d8801b17 	ldw	r2,108(sp)
80210f04:	d811883a 	mov	r8,sp
80210f08:	4f3feb16 	blt	r9,fp,80210eb8 <__reset+0xfa1f0eb8>
80210f0c:	dac02217 	ldw	r11,136(sp)
80210f10:	1f07883a 	add	r3,r3,fp
80210f14:	10800044 	addi	r2,r2,1
80210f18:	42c00015 	stw	r11,0(r8)
80210f1c:	47000115 	stw	fp,4(r8)
80210f20:	d8c01c15 	stw	r3,112(sp)
80210f24:	d8801b15 	stw	r2,108(sp)
80210f28:	010001c4 	movi	r4,7
80210f2c:	2080b616 	blt	r4,r2,80211208 <___svfiprintf_internal_r+0x1004>
80210f30:	42000204 	addi	r8,r8,8
80210f34:	003f4e06 	br	80210c70 <__reset+0xfa1f0c70>
80210f38:	d9801a04 	addi	r6,sp,104
80210f3c:	b80b883a 	mov	r5,r23
80210f40:	a809883a 	mov	r4,r21
80210f44:	02100340 	call	80210034 <__ssprint_r>
80210f48:	103fbc1e 	bne	r2,zero,80210e3c <__reset+0xfa1f0e3c>
80210f4c:	d8c01c17 	ldw	r3,112(sp)
80210f50:	d811883a 	mov	r8,sp
80210f54:	003f7a06 	br	80210d40 <__reset+0xfa1f0d40>
80210f58:	d9801a04 	addi	r6,sp,104
80210f5c:	b80b883a 	mov	r5,r23
80210f60:	a809883a 	mov	r4,r21
80210f64:	02100340 	call	80210034 <__ssprint_r>
80210f68:	103fa826 	beq	r2,zero,80210e0c <__reset+0xfa1f0e0c>
80210f6c:	003fb306 	br	80210e3c <__reset+0xfa1f0e3c>
80210f70:	d9801a04 	addi	r6,sp,104
80210f74:	b80b883a 	mov	r5,r23
80210f78:	a809883a 	mov	r4,r21
80210f7c:	02100340 	call	80210034 <__ssprint_r>
80210f80:	103fae1e 	bne	r2,zero,80210e3c <__reset+0xfa1f0e3c>
80210f84:	d811883a 	mov	r8,sp
80210f88:	003cdc06 	br	802102fc <__reset+0xfa1f02fc>
80210f8c:	d9801a04 	addi	r6,sp,104
80210f90:	b80b883a 	mov	r5,r23
80210f94:	a809883a 	mov	r4,r21
80210f98:	02100340 	call	80210034 <__ssprint_r>
80210f9c:	103fa71e 	bne	r2,zero,80210e3c <__reset+0xfa1f0e3c>
80210fa0:	d8c01c17 	ldw	r3,112(sp)
80210fa4:	d8801b17 	ldw	r2,108(sp)
80210fa8:	d811883a 	mov	r8,sp
80210fac:	003f5a06 	br	80210d18 <__reset+0xfa1f0d18>
80210fb0:	d9801a04 	addi	r6,sp,104
80210fb4:	b80b883a 	mov	r5,r23
80210fb8:	a809883a 	mov	r4,r21
80210fbc:	02100340 	call	80210034 <__ssprint_r>
80210fc0:	103f9e1e 	bne	r2,zero,80210e3c <__reset+0xfa1f0e3c>
80210fc4:	d8c01c17 	ldw	r3,112(sp)
80210fc8:	d8801b17 	ldw	r2,108(sp)
80210fcc:	d811883a 	mov	r8,sp
80210fd0:	003f1706 	br	80210c30 <__reset+0xfa1f0c30>
80210fd4:	d9801a04 	addi	r6,sp,104
80210fd8:	b80b883a 	mov	r5,r23
80210fdc:	a809883a 	mov	r4,r21
80210fe0:	02100340 	call	80210034 <__ssprint_r>
80210fe4:	103f951e 	bne	r2,zero,80210e3c <__reset+0xfa1f0e3c>
80210fe8:	d8c01c17 	ldw	r3,112(sp)
80210fec:	d8801b17 	ldw	r2,108(sp)
80210ff0:	d811883a 	mov	r8,sp
80210ff4:	003f1b06 	br	80210c64 <__reset+0xfa1f0c64>
80210ff8:	d8001d85 	stb	zero,118(sp)
80210ffc:	80007b16 	blt	r16,zero,802111ec <___svfiprintf_internal_r+0xfe8>
80211000:	00ffdfc4 	movi	r3,-129
80211004:	e244b03a 	or	r2,fp,r9
80211008:	90e4703a 	and	r18,r18,r3
8021100c:	103d7026 	beq	r2,zero,802105d0 <__reset+0xfa1f05d0>
80211010:	0015883a 	mov	r10,zero
80211014:	003d7206 	br	802105e0 <__reset+0xfa1f05e0>
80211018:	d9801a04 	addi	r6,sp,104
8021101c:	b80b883a 	mov	r5,r23
80211020:	a809883a 	mov	r4,r21
80211024:	02100340 	call	80210034 <__ssprint_r>
80211028:	103f841e 	bne	r2,zero,80210e3c <__reset+0xfa1f0e3c>
8021102c:	d8c01c17 	ldw	r3,112(sp)
80211030:	d8801b17 	ldw	r2,108(sp)
80211034:	d811883a 	mov	r8,sp
80211038:	003ef006 	br	80210bfc <__reset+0xfa1f0bfc>
8021103c:	9080100c 	andi	r2,r18,64
80211040:	d8001d85 	stb	zero,118(sp)
80211044:	dac02317 	ldw	r11,140(sp)
80211048:	10008126 	beq	r2,zero,80211250 <___svfiprintf_internal_r+0x104c>
8021104c:	58800104 	addi	r2,r11,4
80211050:	5f00000b 	ldhu	fp,0(r11)
80211054:	0013883a 	mov	r9,zero
80211058:	803ec30e 	bge	r16,zero,80210b68 <__reset+0xfa1f0b68>
8021105c:	d8802315 	stw	r2,140(sp)
80211060:	0015883a 	mov	r10,zero
80211064:	e244b03a 	or	r2,fp,r9
80211068:	103e371e 	bne	r2,zero,80210948 <__reset+0xfa1f0948>
8021106c:	00800044 	movi	r2,1
80211070:	10803fcc 	andi	r2,r2,255
80211074:	00c00044 	movi	r3,1
80211078:	10c06126 	beq	r2,r3,80211200 <___svfiprintf_internal_r+0xffc>
8021107c:	00c00084 	movi	r3,2
80211080:	10fd5526 	beq	r2,r3,802105d8 <__reset+0xfa1f05d8>
80211084:	003ed806 	br	80210be8 <__reset+0xfa1f0be8>
80211088:	d8802315 	stw	r2,140(sp)
8021108c:	98c00007 	ldb	r3,0(r19)
80211090:	003cab06 	br	80210340 <__reset+0xfa1f0340>
80211094:	d9801a04 	addi	r6,sp,104
80211098:	b80b883a 	mov	r5,r23
8021109c:	a809883a 	mov	r4,r21
802110a0:	02100340 	call	80210034 <__ssprint_r>
802110a4:	103f651e 	bne	r2,zero,80210e3c <__reset+0xfa1f0e3c>
802110a8:	d8c01c17 	ldw	r3,112(sp)
802110ac:	003f4f06 	br	80210dec <__reset+0xfa1f0dec>
802110b0:	00a008b4 	movhi	r2,32802
802110b4:	10b29804 	addi	r2,r2,-13728
802110b8:	d8802915 	stw	r2,164(sp)
802110bc:	003d4406 	br	802105d0 <__reset+0xfa1f05d0>
802110c0:	dac02317 	ldw	r11,140(sp)
802110c4:	58800017 	ldw	r2,0(r11)
802110c8:	dac02517 	ldw	r11,148(sp)
802110cc:	5807d7fa 	srai	r3,r11,31
802110d0:	dac02317 	ldw	r11,140(sp)
802110d4:	10c00115 	stw	r3,4(r2)
802110d8:	5ac00104 	addi	r11,r11,4
802110dc:	dac02315 	stw	r11,140(sp)
802110e0:	dac02517 	ldw	r11,148(sp)
802110e4:	12c00015 	stw	r11,0(r2)
802110e8:	003c6d06 	br	802102a0 <__reset+0xfa1f02a0>
802110ec:	9080100c 	andi	r2,r18,64
802110f0:	dac02317 	ldw	r11,140(sp)
802110f4:	103e5326 	beq	r2,zero,80210a44 <__reset+0xfa1f0a44>
802110f8:	5f00000f 	ldh	fp,0(r11)
802110fc:	5ac00104 	addi	r11,r11,4
80211100:	dac02315 	stw	r11,140(sp)
80211104:	e013d7fa 	srai	r9,fp,31
80211108:	4805883a 	mov	r2,r9
8021110c:	003e0706 	br	8021092c <__reset+0xfa1f092c>
80211110:	00800c04 	movi	r2,48
80211114:	d8801d05 	stb	r2,116(sp)
80211118:	d8c01d45 	stb	r3,117(sp)
8021111c:	d8001d85 	stb	zero,118(sp)
80211120:	90800094 	ori	r2,r18,2
80211124:	80008f16 	blt	r16,zero,80211364 <___svfiprintf_internal_r+0x1160>
80211128:	00bfdfc4 	movi	r2,-129
8021112c:	90a4703a 	and	r18,r18,r2
80211130:	94800094 	ori	r18,r18,2
80211134:	0015883a 	mov	r10,zero
80211138:	003d2906 	br	802105e0 <__reset+0xfa1f05e0>
8021113c:	98c00007 	ldb	r3,0(r19)
80211140:	003c7f06 	br	80210340 <__reset+0xfa1f0340>
80211144:	dac02317 	ldw	r11,140(sp)
80211148:	0013883a 	mov	r9,zero
8021114c:	5f000017 	ldw	fp,0(r11)
80211150:	5ac00104 	addi	r11,r11,4
80211154:	dac02315 	stw	r11,140(sp)
80211158:	003d1506 	br	802105b0 <__reset+0xfa1f05b0>
8021115c:	9080100c 	andi	r2,r18,64
80211160:	d8001d85 	stb	zero,118(sp)
80211164:	dac02317 	ldw	r11,140(sp)
80211168:	10003426 	beq	r2,zero,8021123c <___svfiprintf_internal_r+0x1038>
8021116c:	58800104 	addi	r2,r11,4
80211170:	5f00000b 	ldhu	fp,0(r11)
80211174:	0013883a 	mov	r9,zero
80211178:	803e950e 	bge	r16,zero,80210bd0 <__reset+0xfa1f0bd0>
8021117c:	e246b03a 	or	r3,fp,r9
80211180:	d8802315 	stw	r2,140(sp)
80211184:	183d5a1e 	bne	r3,zero,802106f0 <__reset+0xfa1f06f0>
80211188:	0015883a 	mov	r10,zero
8021118c:	0005883a 	mov	r2,zero
80211190:	003fb706 	br	80211070 <__reset+0xfa1f1070>
80211194:	98c00043 	ldbu	r3,1(r19)
80211198:	94800814 	ori	r18,r18,32
8021119c:	9cc00044 	addi	r19,r19,1
802111a0:	18c03fcc 	andi	r3,r3,255
802111a4:	18c0201c 	xori	r3,r3,128
802111a8:	18ffe004 	addi	r3,r3,-128
802111ac:	003c6406 	br	80210340 <__reset+0xfa1f0340>
802111b0:	d8c02315 	stw	r3,140(sp)
802111b4:	0015883a 	mov	r10,zero
802111b8:	003faa06 	br	80211064 <__reset+0xfa1f1064>
802111bc:	dac02317 	ldw	r11,140(sp)
802111c0:	58800017 	ldw	r2,0(r11)
802111c4:	5ac00104 	addi	r11,r11,4
802111c8:	dac02315 	stw	r11,140(sp)
802111cc:	dac02517 	ldw	r11,148(sp)
802111d0:	12c00015 	stw	r11,0(r2)
802111d4:	003c3206 	br	802102a0 <__reset+0xfa1f02a0>
802111d8:	012008b4 	movhi	r4,32802
802111dc:	21329804 	addi	r4,r4,-13728
802111e0:	d9002915 	stw	r4,164(sp)
802111e4:	d8c02315 	stw	r3,140(sp)
802111e8:	1025883a 	mov	r18,r2
802111ec:	e244b03a 	or	r2,fp,r9
802111f0:	103f871e 	bne	r2,zero,80211010 <__reset+0xfa1f1010>
802111f4:	0015883a 	mov	r10,zero
802111f8:	00800084 	movi	r2,2
802111fc:	003f9c06 	br	80211070 <__reset+0xfa1f1070>
80211200:	0039883a 	mov	fp,zero
80211204:	003e5f06 	br	80210b84 <__reset+0xfa1f0b84>
80211208:	d9801a04 	addi	r6,sp,104
8021120c:	b80b883a 	mov	r5,r23
80211210:	a809883a 	mov	r4,r21
80211214:	02100340 	call	80210034 <__ssprint_r>
80211218:	103f081e 	bne	r2,zero,80210e3c <__reset+0xfa1f0e3c>
8021121c:	d8c01c17 	ldw	r3,112(sp)
80211220:	d8801b17 	ldw	r2,108(sp)
80211224:	d811883a 	mov	r8,sp
80211228:	003e9106 	br	80210c70 <__reset+0xfa1f0c70>
8021122c:	012008b4 	movhi	r4,32802
80211230:	21330004 	addi	r4,r4,-13312
80211234:	d9002215 	stw	r4,136(sp)
80211238:	003ead06 	br	80210cf0 <__reset+0xfa1f0cf0>
8021123c:	58800104 	addi	r2,r11,4
80211240:	5f000017 	ldw	fp,0(r11)
80211244:	0013883a 	mov	r9,zero
80211248:	803e610e 	bge	r16,zero,80210bd0 <__reset+0xfa1f0bd0>
8021124c:	003fcb06 	br	8021117c <__reset+0xfa1f117c>
80211250:	58800104 	addi	r2,r11,4
80211254:	5f000017 	ldw	fp,0(r11)
80211258:	0013883a 	mov	r9,zero
8021125c:	803e420e 	bge	r16,zero,80210b68 <__reset+0xfa1f0b68>
80211260:	003f7e06 	br	8021105c <__reset+0xfa1f105c>
80211264:	5f000017 	ldw	fp,0(r11)
80211268:	5ac00104 	addi	r11,r11,4
8021126c:	0013883a 	mov	r9,zero
80211270:	dac02315 	stw	r11,140(sp)
80211274:	003cce06 	br	802105b0 <__reset+0xfa1f05b0>
80211278:	8809883a 	mov	r4,r17
8021127c:	da002c15 	stw	r8,176(sp)
80211280:	0206a0c0 	call	80206a0c <strlen>
80211284:	d8802115 	stw	r2,132(sp)
80211288:	da801d83 	ldbu	r10,118(sp)
8021128c:	df002315 	stw	fp,140(sp)
80211290:	0021883a 	mov	r16,zero
80211294:	da002c17 	ldw	r8,176(sp)
80211298:	003cf606 	br	80210674 <__reset+0xfa1f0674>
8021129c:	00800184 	movi	r2,6
802112a0:	1400012e 	bgeu	r2,r16,802112a8 <___svfiprintf_internal_r+0x10a4>
802112a4:	1021883a 	mov	r16,r2
802112a8:	dc002115 	stw	r16,132(sp)
802112ac:	8005883a 	mov	r2,r16
802112b0:	80003c16 	blt	r16,zero,802113a4 <___svfiprintf_internal_r+0x11a0>
802112b4:	046008b4 	movhi	r17,32802
802112b8:	d8802015 	stw	r2,128(sp)
802112bc:	df002315 	stw	fp,140(sp)
802112c0:	8c729d04 	addi	r17,r17,-13708
802112c4:	003d2e06 	br	80210780 <__reset+0xfa1f0780>
802112c8:	04001004 	movi	r16,64
802112cc:	800b883a 	mov	r5,r16
802112d0:	020dc800 	call	8020dc80 <_malloc_r>
802112d4:	dac02717 	ldw	r11,156(sp)
802112d8:	58800015 	stw	r2,0(r11)
802112dc:	58800415 	stw	r2,16(r11)
802112e0:	10004826 	beq	r2,zero,80211404 <___svfiprintf_internal_r+0x1200>
802112e4:	dac02717 	ldw	r11,156(sp)
802112e8:	5c000515 	stw	r16,20(r11)
802112ec:	003bd906 	br	80210254 <__reset+0xfa1f0254>
802112f0:	9080004c 	andi	r2,r18,1
802112f4:	0015883a 	mov	r10,zero
802112f8:	10000626 	beq	r2,zero,80211314 <___svfiprintf_internal_r+0x1110>
802112fc:	dac02b17 	ldw	r11,172(sp)
80211300:	00800c04 	movi	r2,48
80211304:	d88019c5 	stb	r2,103(sp)
80211308:	dac02115 	stw	r11,132(sp)
8021130c:	dc4019c4 	addi	r17,sp,103
80211310:	003cd806 	br	80210674 <__reset+0xfa1f0674>
80211314:	d8002115 	stw	zero,132(sp)
80211318:	dc401a04 	addi	r17,sp,104
8021131c:	003cd506 	br	80210674 <__reset+0xfa1f0674>
80211320:	012008b4 	movhi	r4,32802
80211324:	21330404 	addi	r4,r4,-13296
80211328:	d9002815 	stw	r4,160(sp)
8021132c:	003d4306 	br	8021083c <__reset+0xfa1f083c>
80211330:	00bfffc4 	movi	r2,-1
80211334:	003ec606 	br	80210e50 <__reset+0xfa1f0e50>
80211338:	00800044 	movi	r2,1
8021133c:	10803fcc 	andi	r2,r2,255
80211340:	00c00044 	movi	r3,1
80211344:	10fd8026 	beq	r2,r3,80210948 <__reset+0xfa1f0948>
80211348:	00c00084 	movi	r3,2
8021134c:	10fca426 	beq	r2,r3,802105e0 <__reset+0xfa1f05e0>
80211350:	003ce806 	br	802106f4 <__reset+0xfa1f06f4>
80211354:	012008b4 	movhi	r4,32802
80211358:	21330404 	addi	r4,r4,-13296
8021135c:	d9002815 	stw	r4,160(sp)
80211360:	003e9906 	br	80210dc8 <__reset+0xfa1f0dc8>
80211364:	1025883a 	mov	r18,r2
80211368:	0015883a 	mov	r10,zero
8021136c:	00800084 	movi	r2,2
80211370:	003ff206 	br	8021133c <__reset+0xfa1f133c>
80211374:	016008b4 	movhi	r5,32802
80211378:	29730004 	addi	r5,r5,-13312
8021137c:	d9402215 	stw	r5,136(sp)
80211380:	003ee206 	br	80210f0c <__reset+0xfa1f0f0c>
80211384:	5827883a 	mov	r19,r11
80211388:	0021883a 	mov	r16,zero
8021138c:	003bed06 	br	80210344 <__reset+0xfa1f0344>
80211390:	dc002115 	stw	r16,132(sp)
80211394:	da801d83 	ldbu	r10,118(sp)
80211398:	df002315 	stw	fp,140(sp)
8021139c:	0021883a 	mov	r16,zero
802113a0:	003cb406 	br	80210674 <__reset+0xfa1f0674>
802113a4:	0005883a 	mov	r2,zero
802113a8:	003fc206 	br	802112b4 <__reset+0xfa1f12b4>
802113ac:	d8802317 	ldw	r2,140(sp)
802113b0:	98c00043 	ldbu	r3,1(r19)
802113b4:	5827883a 	mov	r19,r11
802113b8:	14000017 	ldw	r16,0(r2)
802113bc:	10800104 	addi	r2,r2,4
802113c0:	d8802315 	stw	r2,140(sp)
802113c4:	803f760e 	bge	r16,zero,802111a0 <__reset+0xfa1f11a0>
802113c8:	18c03fcc 	andi	r3,r3,255
802113cc:	18c0201c 	xori	r3,r3,128
802113d0:	043fffc4 	movi	r16,-1
802113d4:	18ffe004 	addi	r3,r3,-128
802113d8:	003bd906 	br	80210340 <__reset+0xfa1f0340>
802113dc:	d9c01d85 	stb	r7,118(sp)
802113e0:	003cb606 	br	802106bc <__reset+0xfa1f06bc>
802113e4:	d9c01d85 	stb	r7,118(sp)
802113e8:	003d2106 	br	80210870 <__reset+0xfa1f0870>
802113ec:	d9c01d85 	stb	r7,118(sp)
802113f0:	003d8e06 	br	80210a2c <__reset+0xfa1f0a2c>
802113f4:	d9c01d85 	stb	r7,118(sp)
802113f8:	003db306 	br	80210ac8 <__reset+0xfa1f0ac8>
802113fc:	d9c01d85 	stb	r7,118(sp)
80211400:	003c8a06 	br	8021062c <__reset+0xfa1f062c>
80211404:	dac02a17 	ldw	r11,168(sp)
80211408:	00800304 	movi	r2,12
8021140c:	58800015 	stw	r2,0(r11)
80211410:	00bfffc4 	movi	r2,-1
80211414:	003e8e06 	br	80210e50 <__reset+0xfa1f0e50>
80211418:	d9c01d85 	stb	r7,118(sp)
8021141c:	003dc706 	br	80210b3c <__reset+0xfa1f0b3c>
80211420:	d9c01d85 	stb	r7,118(sp)
80211424:	003ddf06 	br	80210ba4 <__reset+0xfa1f0ba4>
80211428:	d9c01d85 	stb	r7,118(sp)
8021142c:	003d3706 	br	8021090c <__reset+0xfa1f090c>
80211430:	d9c01d85 	stb	r7,118(sp)
80211434:	003c5406 	br	80210588 <__reset+0xfa1f0588>
80211438:	d9c01d85 	stb	r7,118(sp)
8021143c:	003d1d06 	br	802108b4 <__reset+0xfa1f08b4>

80211440 <__sprint_r.part.0>:
80211440:	28801917 	ldw	r2,100(r5)
80211444:	defff604 	addi	sp,sp,-40
80211448:	dd400515 	stw	r21,20(sp)
8021144c:	dfc00915 	stw	ra,36(sp)
80211450:	df000815 	stw	fp,32(sp)
80211454:	ddc00715 	stw	r23,28(sp)
80211458:	dd800615 	stw	r22,24(sp)
8021145c:	dd000415 	stw	r20,16(sp)
80211460:	dcc00315 	stw	r19,12(sp)
80211464:	dc800215 	stw	r18,8(sp)
80211468:	dc400115 	stw	r17,4(sp)
8021146c:	dc000015 	stw	r16,0(sp)
80211470:	1088000c 	andi	r2,r2,8192
80211474:	302b883a 	mov	r21,r6
80211478:	10002e26 	beq	r2,zero,80211534 <__sprint_r.part.0+0xf4>
8021147c:	30800217 	ldw	r2,8(r6)
80211480:	35800017 	ldw	r22,0(r6)
80211484:	10002926 	beq	r2,zero,8021152c <__sprint_r.part.0+0xec>
80211488:	2827883a 	mov	r19,r5
8021148c:	2029883a 	mov	r20,r4
80211490:	b5c00104 	addi	r23,r22,4
80211494:	04bfffc4 	movi	r18,-1
80211498:	bc400017 	ldw	r17,0(r23)
8021149c:	b4000017 	ldw	r16,0(r22)
802114a0:	0039883a 	mov	fp,zero
802114a4:	8822d0ba 	srli	r17,r17,2
802114a8:	8800031e 	bne	r17,zero,802114b8 <__sprint_r.part.0+0x78>
802114ac:	00001806 	br	80211510 <__sprint_r.part.0+0xd0>
802114b0:	84000104 	addi	r16,r16,4
802114b4:	8f001526 	beq	r17,fp,8021150c <__sprint_r.part.0+0xcc>
802114b8:	81400017 	ldw	r5,0(r16)
802114bc:	980d883a 	mov	r6,r19
802114c0:	a009883a 	mov	r4,r20
802114c4:	0212e680 	call	80212e68 <_fputwc_r>
802114c8:	e7000044 	addi	fp,fp,1
802114cc:	14bff81e 	bne	r2,r18,802114b0 <__reset+0xfa1f14b0>
802114d0:	9005883a 	mov	r2,r18
802114d4:	a8000215 	stw	zero,8(r21)
802114d8:	a8000115 	stw	zero,4(r21)
802114dc:	dfc00917 	ldw	ra,36(sp)
802114e0:	df000817 	ldw	fp,32(sp)
802114e4:	ddc00717 	ldw	r23,28(sp)
802114e8:	dd800617 	ldw	r22,24(sp)
802114ec:	dd400517 	ldw	r21,20(sp)
802114f0:	dd000417 	ldw	r20,16(sp)
802114f4:	dcc00317 	ldw	r19,12(sp)
802114f8:	dc800217 	ldw	r18,8(sp)
802114fc:	dc400117 	ldw	r17,4(sp)
80211500:	dc000017 	ldw	r16,0(sp)
80211504:	dec00a04 	addi	sp,sp,40
80211508:	f800283a 	ret
8021150c:	a8800217 	ldw	r2,8(r21)
80211510:	8c63883a 	add	r17,r17,r17
80211514:	8c63883a 	add	r17,r17,r17
80211518:	1445c83a 	sub	r2,r2,r17
8021151c:	a8800215 	stw	r2,8(r21)
80211520:	b5800204 	addi	r22,r22,8
80211524:	bdc00204 	addi	r23,r23,8
80211528:	103fdb1e 	bne	r2,zero,80211498 <__reset+0xfa1f1498>
8021152c:	0005883a 	mov	r2,zero
80211530:	003fe806 	br	802114d4 <__reset+0xfa1f14d4>
80211534:	020d3a40 	call	8020d3a4 <__sfvwrite_r>
80211538:	003fe606 	br	802114d4 <__reset+0xfa1f14d4>

8021153c <__sprint_r>:
8021153c:	30c00217 	ldw	r3,8(r6)
80211540:	18000126 	beq	r3,zero,80211548 <__sprint_r+0xc>
80211544:	02114401 	jmpi	80211440 <__sprint_r.part.0>
80211548:	30000115 	stw	zero,4(r6)
8021154c:	0005883a 	mov	r2,zero
80211550:	f800283a 	ret

80211554 <___vfiprintf_internal_r>:
80211554:	deffc904 	addi	sp,sp,-220
80211558:	df003515 	stw	fp,212(sp)
8021155c:	dd003115 	stw	r20,196(sp)
80211560:	dfc03615 	stw	ra,216(sp)
80211564:	ddc03415 	stw	r23,208(sp)
80211568:	dd803315 	stw	r22,204(sp)
8021156c:	dd403215 	stw	r21,200(sp)
80211570:	dcc03015 	stw	r19,192(sp)
80211574:	dc802f15 	stw	r18,188(sp)
80211578:	dc402e15 	stw	r17,184(sp)
8021157c:	dc002d15 	stw	r16,180(sp)
80211580:	d9002015 	stw	r4,128(sp)
80211584:	d9c02215 	stw	r7,136(sp)
80211588:	2829883a 	mov	r20,r5
8021158c:	3039883a 	mov	fp,r6
80211590:	20000226 	beq	r4,zero,8021159c <___vfiprintf_internal_r+0x48>
80211594:	20800e17 	ldw	r2,56(r4)
80211598:	1000cf26 	beq	r2,zero,802118d8 <___vfiprintf_internal_r+0x384>
8021159c:	a080030b 	ldhu	r2,12(r20)
802115a0:	10c8000c 	andi	r3,r2,8192
802115a4:	1800061e 	bne	r3,zero,802115c0 <___vfiprintf_internal_r+0x6c>
802115a8:	a1001917 	ldw	r4,100(r20)
802115ac:	00f7ffc4 	movi	r3,-8193
802115b0:	10880014 	ori	r2,r2,8192
802115b4:	20c6703a 	and	r3,r4,r3
802115b8:	a080030d 	sth	r2,12(r20)
802115bc:	a0c01915 	stw	r3,100(r20)
802115c0:	10c0020c 	andi	r3,r2,8
802115c4:	1800a926 	beq	r3,zero,8021186c <___vfiprintf_internal_r+0x318>
802115c8:	a0c00417 	ldw	r3,16(r20)
802115cc:	1800a726 	beq	r3,zero,8021186c <___vfiprintf_internal_r+0x318>
802115d0:	1080068c 	andi	r2,r2,26
802115d4:	00c00284 	movi	r3,10
802115d8:	10c0ac26 	beq	r2,r3,8021188c <___vfiprintf_internal_r+0x338>
802115dc:	da801a04 	addi	r10,sp,104
802115e0:	da801e15 	stw	r10,120(sp)
802115e4:	d8801e17 	ldw	r2,120(sp)
802115e8:	da8019c4 	addi	r10,sp,103
802115ec:	05a008b4 	movhi	r22,32802
802115f0:	05e008b4 	movhi	r23,32802
802115f4:	da801f15 	stw	r10,124(sp)
802115f8:	1295c83a 	sub	r10,r2,r10
802115fc:	b5b30c04 	addi	r22,r22,-13264
80211600:	bdf30804 	addi	r23,r23,-13280
80211604:	dec01a15 	stw	sp,104(sp)
80211608:	d8001c15 	stw	zero,112(sp)
8021160c:	d8001b15 	stw	zero,108(sp)
80211610:	d8002615 	stw	zero,152(sp)
80211614:	d8002315 	stw	zero,140(sp)
80211618:	da802715 	stw	r10,156(sp)
8021161c:	d811883a 	mov	r8,sp
80211620:	dd002115 	stw	r20,132(sp)
80211624:	e021883a 	mov	r16,fp
80211628:	80800007 	ldb	r2,0(r16)
8021162c:	1003ea26 	beq	r2,zero,802125d8 <___vfiprintf_internal_r+0x1084>
80211630:	00c00944 	movi	r3,37
80211634:	8025883a 	mov	r18,r16
80211638:	10c0021e 	bne	r2,r3,80211644 <___vfiprintf_internal_r+0xf0>
8021163c:	00001606 	br	80211698 <___vfiprintf_internal_r+0x144>
80211640:	10c00326 	beq	r2,r3,80211650 <___vfiprintf_internal_r+0xfc>
80211644:	94800044 	addi	r18,r18,1
80211648:	90800007 	ldb	r2,0(r18)
8021164c:	103ffc1e 	bne	r2,zero,80211640 <__reset+0xfa1f1640>
80211650:	9423c83a 	sub	r17,r18,r16
80211654:	88001026 	beq	r17,zero,80211698 <___vfiprintf_internal_r+0x144>
80211658:	d8c01c17 	ldw	r3,112(sp)
8021165c:	d8801b17 	ldw	r2,108(sp)
80211660:	44000015 	stw	r16,0(r8)
80211664:	88c7883a 	add	r3,r17,r3
80211668:	10800044 	addi	r2,r2,1
8021166c:	44400115 	stw	r17,4(r8)
80211670:	d8c01c15 	stw	r3,112(sp)
80211674:	d8801b15 	stw	r2,108(sp)
80211678:	010001c4 	movi	r4,7
8021167c:	2080760e 	bge	r4,r2,80211858 <___vfiprintf_internal_r+0x304>
80211680:	1803821e 	bne	r3,zero,8021248c <___vfiprintf_internal_r+0xf38>
80211684:	da802317 	ldw	r10,140(sp)
80211688:	d8001b15 	stw	zero,108(sp)
8021168c:	d811883a 	mov	r8,sp
80211690:	5455883a 	add	r10,r10,r17
80211694:	da802315 	stw	r10,140(sp)
80211698:	90800007 	ldb	r2,0(r18)
8021169c:	10044626 	beq	r2,zero,802127b8 <___vfiprintf_internal_r+0x1264>
802116a0:	90c00047 	ldb	r3,1(r18)
802116a4:	94000044 	addi	r16,r18,1
802116a8:	d8001d85 	stb	zero,118(sp)
802116ac:	0009883a 	mov	r4,zero
802116b0:	000f883a 	mov	r7,zero
802116b4:	027fffc4 	movi	r9,-1
802116b8:	0023883a 	mov	r17,zero
802116bc:	0029883a 	mov	r20,zero
802116c0:	01401604 	movi	r5,88
802116c4:	01800244 	movi	r6,9
802116c8:	03400a84 	movi	r13,42
802116cc:	03001b04 	movi	r12,108
802116d0:	84000044 	addi	r16,r16,1
802116d4:	18bff804 	addi	r2,r3,-32
802116d8:	28827336 	bltu	r5,r2,802120a8 <___vfiprintf_internal_r+0xb54>
802116dc:	100490ba 	slli	r2,r2,2
802116e0:	02a00874 	movhi	r10,32801
802116e4:	5285bd04 	addi	r10,r10,5876
802116e8:	1285883a 	add	r2,r2,r10
802116ec:	10800017 	ldw	r2,0(r2)
802116f0:	1000683a 	jmp	r2
802116f4:	80211ddc 	xori	zero,r16,33911
802116f8:	802120a8 	cmpgeui	zero,r16,33922
802116fc:	802120a8 	cmpgeui	zero,r16,33922
80211700:	80211dfc 	xorhi	zero,r16,33911
80211704:	802120a8 	cmpgeui	zero,r16,33922
80211708:	802120a8 	cmpgeui	zero,r16,33922
8021170c:	802120a8 	cmpgeui	zero,r16,33922
80211710:	802120a8 	cmpgeui	zero,r16,33922
80211714:	802120a8 	cmpgeui	zero,r16,33922
80211718:	802120a8 	cmpgeui	zero,r16,33922
8021171c:	80211fe4 	muli	zero,r16,-31617
80211720:	80212000 	call	88021200 <__reset+0x2001200>
80211724:	802120a8 	cmpgeui	zero,r16,33922
80211728:	802118e8 	cmpgeui	zero,r16,33891
8021172c:	80212010 	cmplti	zero,r16,-31616
80211730:	802120a8 	cmpgeui	zero,r16,33922
80211734:	80211e08 	cmpgei	zero,r16,-31624
80211738:	80211e14 	ori	zero,r16,33912
8021173c:	80211e14 	ori	zero,r16,33912
80211740:	80211e14 	ori	zero,r16,33912
80211744:	80211e14 	ori	zero,r16,33912
80211748:	80211e14 	ori	zero,r16,33912
8021174c:	80211e14 	ori	zero,r16,33912
80211750:	80211e14 	ori	zero,r16,33912
80211754:	80211e14 	ori	zero,r16,33912
80211758:	80211e14 	ori	zero,r16,33912
8021175c:	802120a8 	cmpgeui	zero,r16,33922
80211760:	802120a8 	cmpgeui	zero,r16,33922
80211764:	802120a8 	cmpgeui	zero,r16,33922
80211768:	802120a8 	cmpgeui	zero,r16,33922
8021176c:	802120a8 	cmpgeui	zero,r16,33922
80211770:	802120a8 	cmpgeui	zero,r16,33922
80211774:	802120a8 	cmpgeui	zero,r16,33922
80211778:	802120a8 	cmpgeui	zero,r16,33922
8021177c:	802120a8 	cmpgeui	zero,r16,33922
80211780:	802120a8 	cmpgeui	zero,r16,33922
80211784:	80211e40 	call	880211e4 <__reset+0x20011e4>
80211788:	802120a8 	cmpgeui	zero,r16,33922
8021178c:	802120a8 	cmpgeui	zero,r16,33922
80211790:	802120a8 	cmpgeui	zero,r16,33922
80211794:	802120a8 	cmpgeui	zero,r16,33922
80211798:	802120a8 	cmpgeui	zero,r16,33922
8021179c:	802120a8 	cmpgeui	zero,r16,33922
802117a0:	802120a8 	cmpgeui	zero,r16,33922
802117a4:	802120a8 	cmpgeui	zero,r16,33922
802117a8:	802120a8 	cmpgeui	zero,r16,33922
802117ac:	802120a8 	cmpgeui	zero,r16,33922
802117b0:	80211e78 	rdprs	zero,r16,-31623
802117b4:	802120a8 	cmpgeui	zero,r16,33922
802117b8:	802120a8 	cmpgeui	zero,r16,33922
802117bc:	802120a8 	cmpgeui	zero,r16,33922
802117c0:	802120a8 	cmpgeui	zero,r16,33922
802117c4:	802120a8 	cmpgeui	zero,r16,33922
802117c8:	80211ed0 	cmplti	zero,r16,-31621
802117cc:	802120a8 	cmpgeui	zero,r16,33922
802117d0:	802120a8 	cmpgeui	zero,r16,33922
802117d4:	80211f40 	call	880211f4 <__reset+0x20011f4>
802117d8:	802120a8 	cmpgeui	zero,r16,33922
802117dc:	802120a8 	cmpgeui	zero,r16,33922
802117e0:	802120a8 	cmpgeui	zero,r16,33922
802117e4:	802120a8 	cmpgeui	zero,r16,33922
802117e8:	802120a8 	cmpgeui	zero,r16,33922
802117ec:	802120a8 	cmpgeui	zero,r16,33922
802117f0:	802120a8 	cmpgeui	zero,r16,33922
802117f4:	802120a8 	cmpgeui	zero,r16,33922
802117f8:	802120a8 	cmpgeui	zero,r16,33922
802117fc:	802120a8 	cmpgeui	zero,r16,33922
80211800:	80211cec 	andhi	zero,r16,33907
80211804:	80211d18 	cmpnei	zero,r16,-31628
80211808:	802120a8 	cmpgeui	zero,r16,33922
8021180c:	802120a8 	cmpgeui	zero,r16,33922
80211810:	802120a8 	cmpgeui	zero,r16,33922
80211814:	80212050 	cmplti	zero,r16,-31615
80211818:	80211d18 	cmpnei	zero,r16,-31628
8021181c:	802120a8 	cmpgeui	zero,r16,33922
80211820:	802120a8 	cmpgeui	zero,r16,33922
80211824:	80211bac 	andhi	zero,r16,33902
80211828:	802120a8 	cmpgeui	zero,r16,33922
8021182c:	80211bbc 	xorhi	zero,r16,33902
80211830:	80211bf8 	rdprs	zero,r16,-31633
80211834:	802118f4 	orhi	zero,r16,33891
80211838:	80211ba0 	cmpeqi	zero,r16,-31634
8021183c:	802120a8 	cmpgeui	zero,r16,33922
80211840:	80211f7c 	xorhi	zero,r16,33917
80211844:	802120a8 	cmpgeui	zero,r16,33922
80211848:	80211fd4 	ori	zero,r16,33919
8021184c:	802120a8 	cmpgeui	zero,r16,33922
80211850:	802120a8 	cmpgeui	zero,r16,33922
80211854:	80211c98 	cmpnei	zero,r16,-31630
80211858:	42000204 	addi	r8,r8,8
8021185c:	da802317 	ldw	r10,140(sp)
80211860:	5455883a 	add	r10,r10,r17
80211864:	da802315 	stw	r10,140(sp)
80211868:	003f8b06 	br	80211698 <__reset+0xfa1f1698>
8021186c:	d9002017 	ldw	r4,128(sp)
80211870:	a00b883a 	mov	r5,r20
80211874:	020af4c0 	call	8020af4c <__swsetup_r>
80211878:	1003b11e 	bne	r2,zero,80212740 <___vfiprintf_internal_r+0x11ec>
8021187c:	a080030b 	ldhu	r2,12(r20)
80211880:	00c00284 	movi	r3,10
80211884:	1080068c 	andi	r2,r2,26
80211888:	10ff541e 	bne	r2,r3,802115dc <__reset+0xfa1f15dc>
8021188c:	a080038f 	ldh	r2,14(r20)
80211890:	103f5216 	blt	r2,zero,802115dc <__reset+0xfa1f15dc>
80211894:	d9c02217 	ldw	r7,136(sp)
80211898:	d9002017 	ldw	r4,128(sp)
8021189c:	e00d883a 	mov	r6,fp
802118a0:	a00b883a 	mov	r5,r20
802118a4:	02129cc0 	call	802129cc <__sbprintf>
802118a8:	dfc03617 	ldw	ra,216(sp)
802118ac:	df003517 	ldw	fp,212(sp)
802118b0:	ddc03417 	ldw	r23,208(sp)
802118b4:	dd803317 	ldw	r22,204(sp)
802118b8:	dd403217 	ldw	r21,200(sp)
802118bc:	dd003117 	ldw	r20,196(sp)
802118c0:	dcc03017 	ldw	r19,192(sp)
802118c4:	dc802f17 	ldw	r18,188(sp)
802118c8:	dc402e17 	ldw	r17,184(sp)
802118cc:	dc002d17 	ldw	r16,180(sp)
802118d0:	dec03704 	addi	sp,sp,220
802118d4:	f800283a 	ret
802118d8:	020cf200 	call	8020cf20 <__sinit>
802118dc:	003f2f06 	br	8021159c <__reset+0xfa1f159c>
802118e0:	0463c83a 	sub	r17,zero,r17
802118e4:	d8802215 	stw	r2,136(sp)
802118e8:	a5000114 	ori	r20,r20,4
802118ec:	80c00007 	ldb	r3,0(r16)
802118f0:	003f7706 	br	802116d0 <__reset+0xfa1f16d0>
802118f4:	00800c04 	movi	r2,48
802118f8:	da802217 	ldw	r10,136(sp)
802118fc:	d8801d05 	stb	r2,116(sp)
80211900:	00801e04 	movi	r2,120
80211904:	d8801d45 	stb	r2,117(sp)
80211908:	d8001d85 	stb	zero,118(sp)
8021190c:	50c00104 	addi	r3,r10,4
80211910:	54800017 	ldw	r18,0(r10)
80211914:	0027883a 	mov	r19,zero
80211918:	a0800094 	ori	r2,r20,2
8021191c:	48030b16 	blt	r9,zero,8021254c <___vfiprintf_internal_r+0xff8>
80211920:	00bfdfc4 	movi	r2,-129
80211924:	a096703a 	and	r11,r20,r2
80211928:	d8c02215 	stw	r3,136(sp)
8021192c:	5d000094 	ori	r20,r11,2
80211930:	90032b1e 	bne	r18,zero,802125e0 <___vfiprintf_internal_r+0x108c>
80211934:	00a008b4 	movhi	r2,32802
80211938:	10b29804 	addi	r2,r2,-13728
8021193c:	d8802615 	stw	r2,152(sp)
80211940:	0039883a 	mov	fp,zero
80211944:	48017b1e 	bne	r9,zero,80211f34 <___vfiprintf_internal_r+0x9e0>
80211948:	0013883a 	mov	r9,zero
8021194c:	0027883a 	mov	r19,zero
80211950:	dd401a04 	addi	r21,sp,104
80211954:	4825883a 	mov	r18,r9
80211958:	4cc0010e 	bge	r9,r19,80211960 <___vfiprintf_internal_r+0x40c>
8021195c:	9825883a 	mov	r18,r19
80211960:	e7003fcc 	andi	fp,fp,255
80211964:	e700201c 	xori	fp,fp,128
80211968:	e73fe004 	addi	fp,fp,-128
8021196c:	e0000126 	beq	fp,zero,80211974 <___vfiprintf_internal_r+0x420>
80211970:	94800044 	addi	r18,r18,1
80211974:	a380008c 	andi	r14,r20,2
80211978:	70000126 	beq	r14,zero,80211980 <___vfiprintf_internal_r+0x42c>
8021197c:	94800084 	addi	r18,r18,2
80211980:	a700210c 	andi	fp,r20,132
80211984:	e001df1e 	bne	fp,zero,80212104 <___vfiprintf_internal_r+0xbb0>
80211988:	8c87c83a 	sub	r3,r17,r18
8021198c:	00c1dd0e 	bge	zero,r3,80212104 <___vfiprintf_internal_r+0xbb0>
80211990:	01c00404 	movi	r7,16
80211994:	d8801c17 	ldw	r2,112(sp)
80211998:	38c3ad0e 	bge	r7,r3,80212850 <___vfiprintf_internal_r+0x12fc>
8021199c:	02a008b4 	movhi	r10,32802
802119a0:	52b30c04 	addi	r10,r10,-13264
802119a4:	dc002915 	stw	r16,164(sp)
802119a8:	d9801b17 	ldw	r6,108(sp)
802119ac:	da802415 	stw	r10,144(sp)
802119b0:	03c001c4 	movi	r15,7
802119b4:	da402515 	stw	r9,148(sp)
802119b8:	db802815 	stw	r14,160(sp)
802119bc:	1821883a 	mov	r16,r3
802119c0:	00000506 	br	802119d8 <___vfiprintf_internal_r+0x484>
802119c4:	31400084 	addi	r5,r6,2
802119c8:	42000204 	addi	r8,r8,8
802119cc:	200d883a 	mov	r6,r4
802119d0:	843ffc04 	addi	r16,r16,-16
802119d4:	3c000d0e 	bge	r7,r16,80211a0c <___vfiprintf_internal_r+0x4b8>
802119d8:	10800404 	addi	r2,r2,16
802119dc:	31000044 	addi	r4,r6,1
802119e0:	45800015 	stw	r22,0(r8)
802119e4:	41c00115 	stw	r7,4(r8)
802119e8:	d8801c15 	stw	r2,112(sp)
802119ec:	d9001b15 	stw	r4,108(sp)
802119f0:	793ff40e 	bge	r15,r4,802119c4 <__reset+0xfa1f19c4>
802119f4:	1001b51e 	bne	r2,zero,802120cc <___vfiprintf_internal_r+0xb78>
802119f8:	843ffc04 	addi	r16,r16,-16
802119fc:	000d883a 	mov	r6,zero
80211a00:	01400044 	movi	r5,1
80211a04:	d811883a 	mov	r8,sp
80211a08:	3c3ff316 	blt	r7,r16,802119d8 <__reset+0xfa1f19d8>
80211a0c:	8007883a 	mov	r3,r16
80211a10:	da402517 	ldw	r9,148(sp)
80211a14:	db802817 	ldw	r14,160(sp)
80211a18:	dc002917 	ldw	r16,164(sp)
80211a1c:	da802417 	ldw	r10,144(sp)
80211a20:	1885883a 	add	r2,r3,r2
80211a24:	40c00115 	stw	r3,4(r8)
80211a28:	42800015 	stw	r10,0(r8)
80211a2c:	d8801c15 	stw	r2,112(sp)
80211a30:	d9401b15 	stw	r5,108(sp)
80211a34:	00c001c4 	movi	r3,7
80211a38:	19426016 	blt	r3,r5,802123bc <___vfiprintf_internal_r+0xe68>
80211a3c:	d8c01d87 	ldb	r3,118(sp)
80211a40:	42000204 	addi	r8,r8,8
80211a44:	29000044 	addi	r4,r5,1
80211a48:	1801b31e 	bne	r3,zero,80212118 <___vfiprintf_internal_r+0xbc4>
80211a4c:	7001c026 	beq	r14,zero,80212150 <___vfiprintf_internal_r+0xbfc>
80211a50:	d8c01d04 	addi	r3,sp,116
80211a54:	10800084 	addi	r2,r2,2
80211a58:	40c00015 	stw	r3,0(r8)
80211a5c:	00c00084 	movi	r3,2
80211a60:	40c00115 	stw	r3,4(r8)
80211a64:	d8801c15 	stw	r2,112(sp)
80211a68:	d9001b15 	stw	r4,108(sp)
80211a6c:	00c001c4 	movi	r3,7
80211a70:	1902650e 	bge	r3,r4,80212408 <___vfiprintf_internal_r+0xeb4>
80211a74:	10029a1e 	bne	r2,zero,802124e0 <___vfiprintf_internal_r+0xf8c>
80211a78:	00c02004 	movi	r3,128
80211a7c:	01000044 	movi	r4,1
80211a80:	000b883a 	mov	r5,zero
80211a84:	d811883a 	mov	r8,sp
80211a88:	e0c1b31e 	bne	fp,r3,80212158 <___vfiprintf_internal_r+0xc04>
80211a8c:	8cb9c83a 	sub	fp,r17,r18
80211a90:	0701b10e 	bge	zero,fp,80212158 <___vfiprintf_internal_r+0xc04>
80211a94:	01c00404 	movi	r7,16
80211a98:	3f03890e 	bge	r7,fp,802128c0 <___vfiprintf_internal_r+0x136c>
80211a9c:	00e008b4 	movhi	r3,32802
80211aa0:	18f30804 	addi	r3,r3,-13280
80211aa4:	d8c02415 	stw	r3,144(sp)
80211aa8:	8007883a 	mov	r3,r16
80211aac:	034001c4 	movi	r13,7
80211ab0:	e021883a 	mov	r16,fp
80211ab4:	da402515 	stw	r9,148(sp)
80211ab8:	1839883a 	mov	fp,r3
80211abc:	00000506 	br	80211ad4 <___vfiprintf_internal_r+0x580>
80211ac0:	29800084 	addi	r6,r5,2
80211ac4:	42000204 	addi	r8,r8,8
80211ac8:	180b883a 	mov	r5,r3
80211acc:	843ffc04 	addi	r16,r16,-16
80211ad0:	3c000d0e 	bge	r7,r16,80211b08 <___vfiprintf_internal_r+0x5b4>
80211ad4:	10800404 	addi	r2,r2,16
80211ad8:	28c00044 	addi	r3,r5,1
80211adc:	45c00015 	stw	r23,0(r8)
80211ae0:	41c00115 	stw	r7,4(r8)
80211ae4:	d8801c15 	stw	r2,112(sp)
80211ae8:	d8c01b15 	stw	r3,108(sp)
80211aec:	68fff40e 	bge	r13,r3,80211ac0 <__reset+0xfa1f1ac0>
80211af0:	1002241e 	bne	r2,zero,80212384 <___vfiprintf_internal_r+0xe30>
80211af4:	843ffc04 	addi	r16,r16,-16
80211af8:	01800044 	movi	r6,1
80211afc:	000b883a 	mov	r5,zero
80211b00:	d811883a 	mov	r8,sp
80211b04:	3c3ff316 	blt	r7,r16,80211ad4 <__reset+0xfa1f1ad4>
80211b08:	da402517 	ldw	r9,148(sp)
80211b0c:	e007883a 	mov	r3,fp
80211b10:	8039883a 	mov	fp,r16
80211b14:	1821883a 	mov	r16,r3
80211b18:	d8c02417 	ldw	r3,144(sp)
80211b1c:	1705883a 	add	r2,r2,fp
80211b20:	47000115 	stw	fp,4(r8)
80211b24:	40c00015 	stw	r3,0(r8)
80211b28:	d8801c15 	stw	r2,112(sp)
80211b2c:	d9801b15 	stw	r6,108(sp)
80211b30:	00c001c4 	movi	r3,7
80211b34:	19827616 	blt	r3,r6,80212510 <___vfiprintf_internal_r+0xfbc>
80211b38:	4cf9c83a 	sub	fp,r9,r19
80211b3c:	42000204 	addi	r8,r8,8
80211b40:	31000044 	addi	r4,r6,1
80211b44:	300b883a 	mov	r5,r6
80211b48:	07018516 	blt	zero,fp,80212160 <___vfiprintf_internal_r+0xc0c>
80211b4c:	9885883a 	add	r2,r19,r2
80211b50:	45400015 	stw	r21,0(r8)
80211b54:	44c00115 	stw	r19,4(r8)
80211b58:	d8801c15 	stw	r2,112(sp)
80211b5c:	d9001b15 	stw	r4,108(sp)
80211b60:	00c001c4 	movi	r3,7
80211b64:	1901dd0e 	bge	r3,r4,802122dc <___vfiprintf_internal_r+0xd88>
80211b68:	1002401e 	bne	r2,zero,8021246c <___vfiprintf_internal_r+0xf18>
80211b6c:	d8001b15 	stw	zero,108(sp)
80211b70:	a2c0010c 	andi	r11,r20,4
80211b74:	58000226 	beq	r11,zero,80211b80 <___vfiprintf_internal_r+0x62c>
80211b78:	8ca7c83a 	sub	r19,r17,r18
80211b7c:	04c2f216 	blt	zero,r19,80212748 <___vfiprintf_internal_r+0x11f4>
80211b80:	8c80010e 	bge	r17,r18,80211b88 <___vfiprintf_internal_r+0x634>
80211b84:	9023883a 	mov	r17,r18
80211b88:	da802317 	ldw	r10,140(sp)
80211b8c:	5455883a 	add	r10,r10,r17
80211b90:	da802315 	stw	r10,140(sp)
80211b94:	d8001b15 	stw	zero,108(sp)
80211b98:	d811883a 	mov	r8,sp
80211b9c:	003ea206 	br	80211628 <__reset+0xfa1f1628>
80211ba0:	a5000814 	ori	r20,r20,32
80211ba4:	80c00007 	ldb	r3,0(r16)
80211ba8:	003ec906 	br	802116d0 <__reset+0xfa1f16d0>
80211bac:	80c00007 	ldb	r3,0(r16)
80211bb0:	1b030926 	beq	r3,r12,802127d8 <___vfiprintf_internal_r+0x1284>
80211bb4:	a5000414 	ori	r20,r20,16
80211bb8:	003ec506 	br	802116d0 <__reset+0xfa1f16d0>
80211bbc:	21003fcc 	andi	r4,r4,255
80211bc0:	20035e1e 	bne	r4,zero,8021293c <___vfiprintf_internal_r+0x13e8>
80211bc4:	a080080c 	andi	r2,r20,32
80211bc8:	1002a526 	beq	r2,zero,80212660 <___vfiprintf_internal_r+0x110c>
80211bcc:	da802217 	ldw	r10,136(sp)
80211bd0:	50800017 	ldw	r2,0(r10)
80211bd4:	da802317 	ldw	r10,140(sp)
80211bd8:	5007d7fa 	srai	r3,r10,31
80211bdc:	da802217 	ldw	r10,136(sp)
80211be0:	10c00115 	stw	r3,4(r2)
80211be4:	52800104 	addi	r10,r10,4
80211be8:	da802215 	stw	r10,136(sp)
80211bec:	da802317 	ldw	r10,140(sp)
80211bf0:	12800015 	stw	r10,0(r2)
80211bf4:	003e8c06 	br	80211628 <__reset+0xfa1f1628>
80211bf8:	21003fcc 	andi	r4,r4,255
80211bfc:	2003511e 	bne	r4,zero,80212944 <___vfiprintf_internal_r+0x13f0>
80211c00:	a080080c 	andi	r2,r20,32
80211c04:	1000a126 	beq	r2,zero,80211e8c <___vfiprintf_internal_r+0x938>
80211c08:	da802217 	ldw	r10,136(sp)
80211c0c:	d8001d85 	stb	zero,118(sp)
80211c10:	50800204 	addi	r2,r10,8
80211c14:	54800017 	ldw	r18,0(r10)
80211c18:	54c00117 	ldw	r19,4(r10)
80211c1c:	4802b416 	blt	r9,zero,802126f0 <___vfiprintf_internal_r+0x119c>
80211c20:	013fdfc4 	movi	r4,-129
80211c24:	94c6b03a 	or	r3,r18,r19
80211c28:	d8802215 	stw	r2,136(sp)
80211c2c:	a128703a 	and	r20,r20,r4
80211c30:	1800a226 	beq	r3,zero,80211ebc <___vfiprintf_internal_r+0x968>
80211c34:	0039883a 	mov	fp,zero
80211c38:	dd401a04 	addi	r21,sp,104
80211c3c:	9006d0fa 	srli	r3,r18,3
80211c40:	9808977a 	slli	r4,r19,29
80211c44:	9826d0fa 	srli	r19,r19,3
80211c48:	948001cc 	andi	r18,r18,7
80211c4c:	90800c04 	addi	r2,r18,48
80211c50:	ad7fffc4 	addi	r21,r21,-1
80211c54:	20e4b03a 	or	r18,r4,r3
80211c58:	a8800005 	stb	r2,0(r21)
80211c5c:	94c6b03a 	or	r3,r18,r19
80211c60:	183ff61e 	bne	r3,zero,80211c3c <__reset+0xfa1f1c3c>
80211c64:	a0c0004c 	andi	r3,r20,1
80211c68:	18005926 	beq	r3,zero,80211dd0 <___vfiprintf_internal_r+0x87c>
80211c6c:	10803fcc 	andi	r2,r2,255
80211c70:	1080201c 	xori	r2,r2,128
80211c74:	10bfe004 	addi	r2,r2,-128
80211c78:	00c00c04 	movi	r3,48
80211c7c:	10c05426 	beq	r2,r3,80211dd0 <___vfiprintf_internal_r+0x87c>
80211c80:	da801e17 	ldw	r10,120(sp)
80211c84:	a8bfffc4 	addi	r2,r21,-1
80211c88:	a8ffffc5 	stb	r3,-1(r21)
80211c8c:	50a7c83a 	sub	r19,r10,r2
80211c90:	102b883a 	mov	r21,r2
80211c94:	003f2f06 	br	80211954 <__reset+0xfa1f1954>
80211c98:	21003fcc 	andi	r4,r4,255
80211c9c:	2003421e 	bne	r4,zero,802129a8 <___vfiprintf_internal_r+0x1454>
80211ca0:	00a008b4 	movhi	r2,32802
80211ca4:	10b29804 	addi	r2,r2,-13728
80211ca8:	d8802615 	stw	r2,152(sp)
80211cac:	a080080c 	andi	r2,r20,32
80211cb0:	1000aa26 	beq	r2,zero,80211f5c <___vfiprintf_internal_r+0xa08>
80211cb4:	da802217 	ldw	r10,136(sp)
80211cb8:	54800017 	ldw	r18,0(r10)
80211cbc:	54c00117 	ldw	r19,4(r10)
80211cc0:	52800204 	addi	r10,r10,8
80211cc4:	da802215 	stw	r10,136(sp)
80211cc8:	a080004c 	andi	r2,r20,1
80211ccc:	1001d226 	beq	r2,zero,80212418 <___vfiprintf_internal_r+0xec4>
80211cd0:	94c4b03a 	or	r2,r18,r19
80211cd4:	1002351e 	bne	r2,zero,802125ac <___vfiprintf_internal_r+0x1058>
80211cd8:	d8001d85 	stb	zero,118(sp)
80211cdc:	48022216 	blt	r9,zero,80212568 <___vfiprintf_internal_r+0x1014>
80211ce0:	00bfdfc4 	movi	r2,-129
80211ce4:	a0a8703a 	and	r20,r20,r2
80211ce8:	003f1506 	br	80211940 <__reset+0xfa1f1940>
80211cec:	da802217 	ldw	r10,136(sp)
80211cf0:	04800044 	movi	r18,1
80211cf4:	d8001d85 	stb	zero,118(sp)
80211cf8:	50800017 	ldw	r2,0(r10)
80211cfc:	52800104 	addi	r10,r10,4
80211d00:	da802215 	stw	r10,136(sp)
80211d04:	d8801005 	stb	r2,64(sp)
80211d08:	9027883a 	mov	r19,r18
80211d0c:	dd401004 	addi	r21,sp,64
80211d10:	0013883a 	mov	r9,zero
80211d14:	003f1706 	br	80211974 <__reset+0xfa1f1974>
80211d18:	21003fcc 	andi	r4,r4,255
80211d1c:	2003201e 	bne	r4,zero,802129a0 <___vfiprintf_internal_r+0x144c>
80211d20:	a080080c 	andi	r2,r20,32
80211d24:	10004b26 	beq	r2,zero,80211e54 <___vfiprintf_internal_r+0x900>
80211d28:	da802217 	ldw	r10,136(sp)
80211d2c:	50800117 	ldw	r2,4(r10)
80211d30:	54800017 	ldw	r18,0(r10)
80211d34:	52800204 	addi	r10,r10,8
80211d38:	da802215 	stw	r10,136(sp)
80211d3c:	1027883a 	mov	r19,r2
80211d40:	10022c16 	blt	r2,zero,802125f4 <___vfiprintf_internal_r+0x10a0>
80211d44:	df001d83 	ldbu	fp,118(sp)
80211d48:	48007216 	blt	r9,zero,80211f14 <___vfiprintf_internal_r+0x9c0>
80211d4c:	00ffdfc4 	movi	r3,-129
80211d50:	94c4b03a 	or	r2,r18,r19
80211d54:	a0e8703a 	and	r20,r20,r3
80211d58:	1000cc26 	beq	r2,zero,8021208c <___vfiprintf_internal_r+0xb38>
80211d5c:	98021026 	beq	r19,zero,802125a0 <___vfiprintf_internal_r+0x104c>
80211d60:	dc402415 	stw	r17,144(sp)
80211d64:	dc002515 	stw	r16,148(sp)
80211d68:	9823883a 	mov	r17,r19
80211d6c:	9021883a 	mov	r16,r18
80211d70:	dd401a04 	addi	r21,sp,104
80211d74:	4825883a 	mov	r18,r9
80211d78:	4027883a 	mov	r19,r8
80211d7c:	8009883a 	mov	r4,r16
80211d80:	880b883a 	mov	r5,r17
80211d84:	01800284 	movi	r6,10
80211d88:	000f883a 	mov	r7,zero
80211d8c:	02139340 	call	80213934 <__umoddi3>
80211d90:	10800c04 	addi	r2,r2,48
80211d94:	ad7fffc4 	addi	r21,r21,-1
80211d98:	8009883a 	mov	r4,r16
80211d9c:	880b883a 	mov	r5,r17
80211da0:	a8800005 	stb	r2,0(r21)
80211da4:	01800284 	movi	r6,10
80211da8:	000f883a 	mov	r7,zero
80211dac:	02133bc0 	call	802133bc <__udivdi3>
80211db0:	1021883a 	mov	r16,r2
80211db4:	10c4b03a 	or	r2,r2,r3
80211db8:	1823883a 	mov	r17,r3
80211dbc:	103fef1e 	bne	r2,zero,80211d7c <__reset+0xfa1f1d7c>
80211dc0:	dc402417 	ldw	r17,144(sp)
80211dc4:	dc002517 	ldw	r16,148(sp)
80211dc8:	9013883a 	mov	r9,r18
80211dcc:	9811883a 	mov	r8,r19
80211dd0:	da801e17 	ldw	r10,120(sp)
80211dd4:	5567c83a 	sub	r19,r10,r21
80211dd8:	003ede06 	br	80211954 <__reset+0xfa1f1954>
80211ddc:	38803fcc 	andi	r2,r7,255
80211de0:	1080201c 	xori	r2,r2,128
80211de4:	10bfe004 	addi	r2,r2,-128
80211de8:	1002371e 	bne	r2,zero,802126c8 <___vfiprintf_internal_r+0x1174>
80211dec:	01000044 	movi	r4,1
80211df0:	01c00804 	movi	r7,32
80211df4:	80c00007 	ldb	r3,0(r16)
80211df8:	003e3506 	br	802116d0 <__reset+0xfa1f16d0>
80211dfc:	a5000054 	ori	r20,r20,1
80211e00:	80c00007 	ldb	r3,0(r16)
80211e04:	003e3206 	br	802116d0 <__reset+0xfa1f16d0>
80211e08:	a5002014 	ori	r20,r20,128
80211e0c:	80c00007 	ldb	r3,0(r16)
80211e10:	003e2f06 	br	802116d0 <__reset+0xfa1f16d0>
80211e14:	8015883a 	mov	r10,r16
80211e18:	0023883a 	mov	r17,zero
80211e1c:	18bff404 	addi	r2,r3,-48
80211e20:	50c00007 	ldb	r3,0(r10)
80211e24:	8c4002a4 	muli	r17,r17,10
80211e28:	84000044 	addi	r16,r16,1
80211e2c:	8015883a 	mov	r10,r16
80211e30:	1463883a 	add	r17,r2,r17
80211e34:	18bff404 	addi	r2,r3,-48
80211e38:	30bff92e 	bgeu	r6,r2,80211e20 <__reset+0xfa1f1e20>
80211e3c:	003e2506 	br	802116d4 <__reset+0xfa1f16d4>
80211e40:	21003fcc 	andi	r4,r4,255
80211e44:	2002d41e 	bne	r4,zero,80212998 <___vfiprintf_internal_r+0x1444>
80211e48:	a5000414 	ori	r20,r20,16
80211e4c:	a080080c 	andi	r2,r20,32
80211e50:	103fb51e 	bne	r2,zero,80211d28 <__reset+0xfa1f1d28>
80211e54:	a080040c 	andi	r2,r20,16
80211e58:	1001f826 	beq	r2,zero,8021263c <___vfiprintf_internal_r+0x10e8>
80211e5c:	da802217 	ldw	r10,136(sp)
80211e60:	54800017 	ldw	r18,0(r10)
80211e64:	52800104 	addi	r10,r10,4
80211e68:	da802215 	stw	r10,136(sp)
80211e6c:	9027d7fa 	srai	r19,r18,31
80211e70:	9805883a 	mov	r2,r19
80211e74:	003fb206 	br	80211d40 <__reset+0xfa1f1d40>
80211e78:	21003fcc 	andi	r4,r4,255
80211e7c:	2002c41e 	bne	r4,zero,80212990 <___vfiprintf_internal_r+0x143c>
80211e80:	a5000414 	ori	r20,r20,16
80211e84:	a080080c 	andi	r2,r20,32
80211e88:	103f5f1e 	bne	r2,zero,80211c08 <__reset+0xfa1f1c08>
80211e8c:	a080040c 	andi	r2,r20,16
80211e90:	10020f26 	beq	r2,zero,802126d0 <___vfiprintf_internal_r+0x117c>
80211e94:	da802217 	ldw	r10,136(sp)
80211e98:	d8001d85 	stb	zero,118(sp)
80211e9c:	0027883a 	mov	r19,zero
80211ea0:	50800104 	addi	r2,r10,4
80211ea4:	54800017 	ldw	r18,0(r10)
80211ea8:	48021116 	blt	r9,zero,802126f0 <___vfiprintf_internal_r+0x119c>
80211eac:	00ffdfc4 	movi	r3,-129
80211eb0:	d8802215 	stw	r2,136(sp)
80211eb4:	a0e8703a 	and	r20,r20,r3
80211eb8:	903f5e1e 	bne	r18,zero,80211c34 <__reset+0xfa1f1c34>
80211ebc:	0039883a 	mov	fp,zero
80211ec0:	4802a626 	beq	r9,zero,8021295c <___vfiprintf_internal_r+0x1408>
80211ec4:	0025883a 	mov	r18,zero
80211ec8:	0027883a 	mov	r19,zero
80211ecc:	003f5a06 	br	80211c38 <__reset+0xfa1f1c38>
80211ed0:	21003fcc 	andi	r4,r4,255
80211ed4:	20029f1e 	bne	r4,zero,80212954 <___vfiprintf_internal_r+0x1400>
80211ed8:	a5000414 	ori	r20,r20,16
80211edc:	a080080c 	andi	r2,r20,32
80211ee0:	10005e1e 	bne	r2,zero,8021205c <___vfiprintf_internal_r+0xb08>
80211ee4:	a080040c 	andi	r2,r20,16
80211ee8:	1001a21e 	bne	r2,zero,80212574 <___vfiprintf_internal_r+0x1020>
80211eec:	a080100c 	andi	r2,r20,64
80211ef0:	d8001d85 	stb	zero,118(sp)
80211ef4:	da802217 	ldw	r10,136(sp)
80211ef8:	1002231e 	bne	r2,zero,80212788 <___vfiprintf_internal_r+0x1234>
80211efc:	50800104 	addi	r2,r10,4
80211f00:	54800017 	ldw	r18,0(r10)
80211f04:	0027883a 	mov	r19,zero
80211f08:	4801a00e 	bge	r9,zero,8021258c <___vfiprintf_internal_r+0x1038>
80211f0c:	d8802215 	stw	r2,136(sp)
80211f10:	0039883a 	mov	fp,zero
80211f14:	94c4b03a 	or	r2,r18,r19
80211f18:	103f901e 	bne	r2,zero,80211d5c <__reset+0xfa1f1d5c>
80211f1c:	00800044 	movi	r2,1
80211f20:	10803fcc 	andi	r2,r2,255
80211f24:	00c00044 	movi	r3,1
80211f28:	10c05926 	beq	r2,r3,80212090 <___vfiprintf_internal_r+0xb3c>
80211f2c:	00c00084 	movi	r3,2
80211f30:	10ffe41e 	bne	r2,r3,80211ec4 <__reset+0xfa1f1ec4>
80211f34:	0025883a 	mov	r18,zero
80211f38:	0027883a 	mov	r19,zero
80211f3c:	00013d06 	br	80212434 <___vfiprintf_internal_r+0xee0>
80211f40:	21003fcc 	andi	r4,r4,255
80211f44:	2002811e 	bne	r4,zero,8021294c <___vfiprintf_internal_r+0x13f8>
80211f48:	00a008b4 	movhi	r2,32802
80211f4c:	10b29304 	addi	r2,r2,-13748
80211f50:	d8802615 	stw	r2,152(sp)
80211f54:	a080080c 	andi	r2,r20,32
80211f58:	103f561e 	bne	r2,zero,80211cb4 <__reset+0xfa1f1cb4>
80211f5c:	a080040c 	andi	r2,r20,16
80211f60:	1001d126 	beq	r2,zero,802126a8 <___vfiprintf_internal_r+0x1154>
80211f64:	da802217 	ldw	r10,136(sp)
80211f68:	0027883a 	mov	r19,zero
80211f6c:	54800017 	ldw	r18,0(r10)
80211f70:	52800104 	addi	r10,r10,4
80211f74:	da802215 	stw	r10,136(sp)
80211f78:	003f5306 	br	80211cc8 <__reset+0xfa1f1cc8>
80211f7c:	da802217 	ldw	r10,136(sp)
80211f80:	d8001d85 	stb	zero,118(sp)
80211f84:	55400017 	ldw	r21,0(r10)
80211f88:	50c00104 	addi	r3,r10,4
80211f8c:	a8024226 	beq	r21,zero,80212898 <___vfiprintf_internal_r+0x1344>
80211f90:	48021816 	blt	r9,zero,802127f4 <___vfiprintf_internal_r+0x12a0>
80211f94:	480d883a 	mov	r6,r9
80211f98:	000b883a 	mov	r5,zero
80211f9c:	a809883a 	mov	r4,r21
80211fa0:	d8c02a15 	stw	r3,168(sp)
80211fa4:	da002b15 	stw	r8,172(sp)
80211fa8:	da402c15 	stw	r9,176(sp)
80211fac:	020e48c0 	call	8020e48c <memchr>
80211fb0:	d8c02a17 	ldw	r3,168(sp)
80211fb4:	da002b17 	ldw	r8,172(sp)
80211fb8:	da402c17 	ldw	r9,176(sp)
80211fbc:	10024826 	beq	r2,zero,802128e0 <___vfiprintf_internal_r+0x138c>
80211fc0:	1567c83a 	sub	r19,r2,r21
80211fc4:	df001d83 	ldbu	fp,118(sp)
80211fc8:	d8c02215 	stw	r3,136(sp)
80211fcc:	0013883a 	mov	r9,zero
80211fd0:	003e6006 	br	80211954 <__reset+0xfa1f1954>
80211fd4:	21003fcc 	andi	r4,r4,255
80211fd8:	203fc026 	beq	r4,zero,80211edc <__reset+0xfa1f1edc>
80211fdc:	d9c01d85 	stb	r7,118(sp)
80211fe0:	003fbe06 	br	80211edc <__reset+0xfa1f1edc>
80211fe4:	da802217 	ldw	r10,136(sp)
80211fe8:	54400017 	ldw	r17,0(r10)
80211fec:	50800104 	addi	r2,r10,4
80211ff0:	883e3b16 	blt	r17,zero,802118e0 <__reset+0xfa1f18e0>
80211ff4:	d8802215 	stw	r2,136(sp)
80211ff8:	80c00007 	ldb	r3,0(r16)
80211ffc:	003db406 	br	802116d0 <__reset+0xfa1f16d0>
80212000:	01000044 	movi	r4,1
80212004:	01c00ac4 	movi	r7,43
80212008:	80c00007 	ldb	r3,0(r16)
8021200c:	003db006 	br	802116d0 <__reset+0xfa1f16d0>
80212010:	80c00007 	ldb	r3,0(r16)
80212014:	82800044 	addi	r10,r16,1
80212018:	1b423c26 	beq	r3,r13,8021290c <___vfiprintf_internal_r+0x13b8>
8021201c:	18bff404 	addi	r2,r3,-48
80212020:	0013883a 	mov	r9,zero
80212024:	30822b36 	bltu	r6,r2,802128d4 <___vfiprintf_internal_r+0x1380>
80212028:	50c00007 	ldb	r3,0(r10)
8021202c:	4a4002a4 	muli	r9,r9,10
80212030:	54000044 	addi	r16,r10,1
80212034:	8015883a 	mov	r10,r16
80212038:	4893883a 	add	r9,r9,r2
8021203c:	18bff404 	addi	r2,r3,-48
80212040:	30bff92e 	bgeu	r6,r2,80212028 <__reset+0xfa1f2028>
80212044:	483da30e 	bge	r9,zero,802116d4 <__reset+0xfa1f16d4>
80212048:	027fffc4 	movi	r9,-1
8021204c:	003da106 	br	802116d4 <__reset+0xfa1f16d4>
80212050:	a5001014 	ori	r20,r20,64
80212054:	80c00007 	ldb	r3,0(r16)
80212058:	003d9d06 	br	802116d0 <__reset+0xfa1f16d0>
8021205c:	da802217 	ldw	r10,136(sp)
80212060:	d8001d85 	stb	zero,118(sp)
80212064:	50c00204 	addi	r3,r10,8
80212068:	54800017 	ldw	r18,0(r10)
8021206c:	54c00117 	ldw	r19,4(r10)
80212070:	4801ca16 	blt	r9,zero,8021279c <___vfiprintf_internal_r+0x1248>
80212074:	013fdfc4 	movi	r4,-129
80212078:	94c4b03a 	or	r2,r18,r19
8021207c:	d8c02215 	stw	r3,136(sp)
80212080:	a128703a 	and	r20,r20,r4
80212084:	0039883a 	mov	fp,zero
80212088:	103f341e 	bne	r2,zero,80211d5c <__reset+0xfa1f1d5c>
8021208c:	483e2e26 	beq	r9,zero,80211948 <__reset+0xfa1f1948>
80212090:	0025883a 	mov	r18,zero
80212094:	94800c04 	addi	r18,r18,48
80212098:	dc8019c5 	stb	r18,103(sp)
8021209c:	dcc02717 	ldw	r19,156(sp)
802120a0:	dd4019c4 	addi	r21,sp,103
802120a4:	003e2b06 	br	80211954 <__reset+0xfa1f1954>
802120a8:	21003fcc 	andi	r4,r4,255
802120ac:	2002361e 	bne	r4,zero,80212988 <___vfiprintf_internal_r+0x1434>
802120b0:	1801c126 	beq	r3,zero,802127b8 <___vfiprintf_internal_r+0x1264>
802120b4:	04800044 	movi	r18,1
802120b8:	d8c01005 	stb	r3,64(sp)
802120bc:	d8001d85 	stb	zero,118(sp)
802120c0:	9027883a 	mov	r19,r18
802120c4:	dd401004 	addi	r21,sp,64
802120c8:	003f1106 	br	80211d10 <__reset+0xfa1f1d10>
802120cc:	d9402117 	ldw	r5,132(sp)
802120d0:	d9002017 	ldw	r4,128(sp)
802120d4:	d9801a04 	addi	r6,sp,104
802120d8:	d9c02b15 	stw	r7,172(sp)
802120dc:	dbc02a15 	stw	r15,168(sp)
802120e0:	02114400 	call	80211440 <__sprint_r.part.0>
802120e4:	d9c02b17 	ldw	r7,172(sp)
802120e8:	dbc02a17 	ldw	r15,168(sp)
802120ec:	10006d1e 	bne	r2,zero,802122a4 <___vfiprintf_internal_r+0xd50>
802120f0:	d9801b17 	ldw	r6,108(sp)
802120f4:	d8801c17 	ldw	r2,112(sp)
802120f8:	d811883a 	mov	r8,sp
802120fc:	31400044 	addi	r5,r6,1
80212100:	003e3306 	br	802119d0 <__reset+0xfa1f19d0>
80212104:	d9401b17 	ldw	r5,108(sp)
80212108:	d8801c17 	ldw	r2,112(sp)
8021210c:	29000044 	addi	r4,r5,1
80212110:	d8c01d87 	ldb	r3,118(sp)
80212114:	183e4d26 	beq	r3,zero,80211a4c <__reset+0xfa1f1a4c>
80212118:	00c00044 	movi	r3,1
8021211c:	d9401d84 	addi	r5,sp,118
80212120:	10c5883a 	add	r2,r2,r3
80212124:	41400015 	stw	r5,0(r8)
80212128:	40c00115 	stw	r3,4(r8)
8021212c:	d8801c15 	stw	r2,112(sp)
80212130:	d9001b15 	stw	r4,108(sp)
80212134:	014001c4 	movi	r5,7
80212138:	2900a90e 	bge	r5,r4,802123e0 <___vfiprintf_internal_r+0xe8c>
8021213c:	1000da1e 	bne	r2,zero,802124a8 <___vfiprintf_internal_r+0xf54>
80212140:	7000ab1e 	bne	r14,zero,802123f0 <___vfiprintf_internal_r+0xe9c>
80212144:	000b883a 	mov	r5,zero
80212148:	1809883a 	mov	r4,r3
8021214c:	d811883a 	mov	r8,sp
80212150:	00c02004 	movi	r3,128
80212154:	e0fe4d26 	beq	fp,r3,80211a8c <__reset+0xfa1f1a8c>
80212158:	4cf9c83a 	sub	fp,r9,r19
8021215c:	073e7b0e 	bge	zero,fp,80211b4c <__reset+0xfa1f1b4c>
80212160:	01c00404 	movi	r7,16
80212164:	3f01900e 	bge	r7,fp,802127a8 <___vfiprintf_internal_r+0x1254>
80212168:	00e008b4 	movhi	r3,32802
8021216c:	18f30804 	addi	r3,r3,-13280
80212170:	d8c02415 	stw	r3,144(sp)
80212174:	034001c4 	movi	r13,7
80212178:	00000506 	br	80212190 <___vfiprintf_internal_r+0xc3c>
8021217c:	29000084 	addi	r4,r5,2
80212180:	42000204 	addi	r8,r8,8
80212184:	180b883a 	mov	r5,r3
80212188:	e73ffc04 	addi	fp,fp,-16
8021218c:	3f000d0e 	bge	r7,fp,802121c4 <___vfiprintf_internal_r+0xc70>
80212190:	10800404 	addi	r2,r2,16
80212194:	28c00044 	addi	r3,r5,1
80212198:	45c00015 	stw	r23,0(r8)
8021219c:	41c00115 	stw	r7,4(r8)
802121a0:	d8801c15 	stw	r2,112(sp)
802121a4:	d8c01b15 	stw	r3,108(sp)
802121a8:	68fff40e 	bge	r13,r3,8021217c <__reset+0xfa1f217c>
802121ac:	1000101e 	bne	r2,zero,802121f0 <___vfiprintf_internal_r+0xc9c>
802121b0:	e73ffc04 	addi	fp,fp,-16
802121b4:	01000044 	movi	r4,1
802121b8:	000b883a 	mov	r5,zero
802121bc:	d811883a 	mov	r8,sp
802121c0:	3f3ff316 	blt	r7,fp,80212190 <__reset+0xfa1f2190>
802121c4:	da802417 	ldw	r10,144(sp)
802121c8:	1705883a 	add	r2,r2,fp
802121cc:	47000115 	stw	fp,4(r8)
802121d0:	42800015 	stw	r10,0(r8)
802121d4:	d8801c15 	stw	r2,112(sp)
802121d8:	d9001b15 	stw	r4,108(sp)
802121dc:	00c001c4 	movi	r3,7
802121e0:	19003616 	blt	r3,r4,802122bc <___vfiprintf_internal_r+0xd68>
802121e4:	42000204 	addi	r8,r8,8
802121e8:	21000044 	addi	r4,r4,1
802121ec:	003e5706 	br	80211b4c <__reset+0xfa1f1b4c>
802121f0:	d9402117 	ldw	r5,132(sp)
802121f4:	d9002017 	ldw	r4,128(sp)
802121f8:	d9801a04 	addi	r6,sp,104
802121fc:	d9c02b15 	stw	r7,172(sp)
80212200:	db402a15 	stw	r13,168(sp)
80212204:	02114400 	call	80211440 <__sprint_r.part.0>
80212208:	d9c02b17 	ldw	r7,172(sp)
8021220c:	db402a17 	ldw	r13,168(sp)
80212210:	1000241e 	bne	r2,zero,802122a4 <___vfiprintf_internal_r+0xd50>
80212214:	d9401b17 	ldw	r5,108(sp)
80212218:	d8801c17 	ldw	r2,112(sp)
8021221c:	d811883a 	mov	r8,sp
80212220:	29000044 	addi	r4,r5,1
80212224:	003fd806 	br	80212188 <__reset+0xfa1f2188>
80212228:	d9401b17 	ldw	r5,108(sp)
8021222c:	00e008b4 	movhi	r3,32802
80212230:	18f30c04 	addi	r3,r3,-13264
80212234:	d8c02415 	stw	r3,144(sp)
80212238:	29400044 	addi	r5,r5,1
8021223c:	d8c02417 	ldw	r3,144(sp)
80212240:	14c5883a 	add	r2,r2,r19
80212244:	44c00115 	stw	r19,4(r8)
80212248:	40c00015 	stw	r3,0(r8)
8021224c:	d8801c15 	stw	r2,112(sp)
80212250:	d9401b15 	stw	r5,108(sp)
80212254:	00c001c4 	movi	r3,7
80212258:	1940070e 	bge	r3,r5,80212278 <___vfiprintf_internal_r+0xd24>
8021225c:	103e4826 	beq	r2,zero,80211b80 <__reset+0xfa1f1b80>
80212260:	d9402117 	ldw	r5,132(sp)
80212264:	d9002017 	ldw	r4,128(sp)
80212268:	d9801a04 	addi	r6,sp,104
8021226c:	02114400 	call	80211440 <__sprint_r.part.0>
80212270:	10000c1e 	bne	r2,zero,802122a4 <___vfiprintf_internal_r+0xd50>
80212274:	d8801c17 	ldw	r2,112(sp)
80212278:	8c80010e 	bge	r17,r18,80212280 <___vfiprintf_internal_r+0xd2c>
8021227c:	9023883a 	mov	r17,r18
80212280:	da802317 	ldw	r10,140(sp)
80212284:	5455883a 	add	r10,r10,r17
80212288:	da802315 	stw	r10,140(sp)
8021228c:	103e4126 	beq	r2,zero,80211b94 <__reset+0xfa1f1b94>
80212290:	d9402117 	ldw	r5,132(sp)
80212294:	d9002017 	ldw	r4,128(sp)
80212298:	d9801a04 	addi	r6,sp,104
8021229c:	02114400 	call	80211440 <__sprint_r.part.0>
802122a0:	103e3c26 	beq	r2,zero,80211b94 <__reset+0xfa1f1b94>
802122a4:	dd002117 	ldw	r20,132(sp)
802122a8:	a080030b 	ldhu	r2,12(r20)
802122ac:	1080100c 	andi	r2,r2,64
802122b0:	1001231e 	bne	r2,zero,80212740 <___vfiprintf_internal_r+0x11ec>
802122b4:	d8802317 	ldw	r2,140(sp)
802122b8:	003d7b06 	br	802118a8 <__reset+0xfa1f18a8>
802122bc:	1000991e 	bne	r2,zero,80212524 <___vfiprintf_internal_r+0xfd0>
802122c0:	00c00044 	movi	r3,1
802122c4:	9805883a 	mov	r2,r19
802122c8:	dd400015 	stw	r21,0(sp)
802122cc:	dcc00115 	stw	r19,4(sp)
802122d0:	dcc01c15 	stw	r19,112(sp)
802122d4:	d8c01b15 	stw	r3,108(sp)
802122d8:	d811883a 	mov	r8,sp
802122dc:	42000204 	addi	r8,r8,8
802122e0:	a2c0010c 	andi	r11,r20,4
802122e4:	583fe426 	beq	r11,zero,80212278 <__reset+0xfa1f2278>
802122e8:	8ca7c83a 	sub	r19,r17,r18
802122ec:	04ffe20e 	bge	zero,r19,80212278 <__reset+0xfa1f2278>
802122f0:	01c00404 	movi	r7,16
802122f4:	3cffcc0e 	bge	r7,r19,80212228 <__reset+0xfa1f2228>
802122f8:	02a008b4 	movhi	r10,32802
802122fc:	52b30c04 	addi	r10,r10,-13264
80212300:	d9001b17 	ldw	r4,108(sp)
80212304:	da802415 	stw	r10,144(sp)
80212308:	382b883a 	mov	r21,r7
8021230c:	050001c4 	movi	r20,7
80212310:	df002017 	ldw	fp,128(sp)
80212314:	00000506 	br	8021232c <___vfiprintf_internal_r+0xdd8>
80212318:	21400084 	addi	r5,r4,2
8021231c:	42000204 	addi	r8,r8,8
80212320:	1809883a 	mov	r4,r3
80212324:	9cfffc04 	addi	r19,r19,-16
80212328:	acffc40e 	bge	r21,r19,8021223c <__reset+0xfa1f223c>
8021232c:	10800404 	addi	r2,r2,16
80212330:	20c00044 	addi	r3,r4,1
80212334:	45800015 	stw	r22,0(r8)
80212338:	45400115 	stw	r21,4(r8)
8021233c:	d8801c15 	stw	r2,112(sp)
80212340:	d8c01b15 	stw	r3,108(sp)
80212344:	a0fff40e 	bge	r20,r3,80212318 <__reset+0xfa1f2318>
80212348:	1000041e 	bne	r2,zero,8021235c <___vfiprintf_internal_r+0xe08>
8021234c:	01400044 	movi	r5,1
80212350:	0009883a 	mov	r4,zero
80212354:	d811883a 	mov	r8,sp
80212358:	003ff206 	br	80212324 <__reset+0xfa1f2324>
8021235c:	d9402117 	ldw	r5,132(sp)
80212360:	d9801a04 	addi	r6,sp,104
80212364:	e009883a 	mov	r4,fp
80212368:	02114400 	call	80211440 <__sprint_r.part.0>
8021236c:	103fcd1e 	bne	r2,zero,802122a4 <__reset+0xfa1f22a4>
80212370:	d9001b17 	ldw	r4,108(sp)
80212374:	d8801c17 	ldw	r2,112(sp)
80212378:	d811883a 	mov	r8,sp
8021237c:	21400044 	addi	r5,r4,1
80212380:	003fe806 	br	80212324 <__reset+0xfa1f2324>
80212384:	d9402117 	ldw	r5,132(sp)
80212388:	d9002017 	ldw	r4,128(sp)
8021238c:	d9801a04 	addi	r6,sp,104
80212390:	d9c02b15 	stw	r7,172(sp)
80212394:	db402a15 	stw	r13,168(sp)
80212398:	02114400 	call	80211440 <__sprint_r.part.0>
8021239c:	d9c02b17 	ldw	r7,172(sp)
802123a0:	db402a17 	ldw	r13,168(sp)
802123a4:	103fbf1e 	bne	r2,zero,802122a4 <__reset+0xfa1f22a4>
802123a8:	d9401b17 	ldw	r5,108(sp)
802123ac:	d8801c17 	ldw	r2,112(sp)
802123b0:	d811883a 	mov	r8,sp
802123b4:	29800044 	addi	r6,r5,1
802123b8:	003dc406 	br	80211acc <__reset+0xfa1f1acc>
802123bc:	1000d21e 	bne	r2,zero,80212708 <___vfiprintf_internal_r+0x11b4>
802123c0:	d8c01d87 	ldb	r3,118(sp)
802123c4:	18009526 	beq	r3,zero,8021261c <___vfiprintf_internal_r+0x10c8>
802123c8:	00800044 	movi	r2,1
802123cc:	d8c01d84 	addi	r3,sp,118
802123d0:	1009883a 	mov	r4,r2
802123d4:	d8c00015 	stw	r3,0(sp)
802123d8:	d8800115 	stw	r2,4(sp)
802123dc:	d811883a 	mov	r8,sp
802123e0:	200b883a 	mov	r5,r4
802123e4:	42000204 	addi	r8,r8,8
802123e8:	21000044 	addi	r4,r4,1
802123ec:	003d9706 	br	80211a4c <__reset+0xfa1f1a4c>
802123f0:	d9001d04 	addi	r4,sp,116
802123f4:	00800084 	movi	r2,2
802123f8:	d9000015 	stw	r4,0(sp)
802123fc:	d8800115 	stw	r2,4(sp)
80212400:	1809883a 	mov	r4,r3
80212404:	d811883a 	mov	r8,sp
80212408:	200b883a 	mov	r5,r4
8021240c:	42000204 	addi	r8,r8,8
80212410:	21000044 	addi	r4,r4,1
80212414:	003f4e06 	br	80212150 <__reset+0xfa1f2150>
80212418:	d8001d85 	stb	zero,118(sp)
8021241c:	48005016 	blt	r9,zero,80212560 <___vfiprintf_internal_r+0x100c>
80212420:	00ffdfc4 	movi	r3,-129
80212424:	94c4b03a 	or	r2,r18,r19
80212428:	a0e8703a 	and	r20,r20,r3
8021242c:	103d4426 	beq	r2,zero,80211940 <__reset+0xfa1f1940>
80212430:	0039883a 	mov	fp,zero
80212434:	d9002617 	ldw	r4,152(sp)
80212438:	dd401a04 	addi	r21,sp,104
8021243c:	908003cc 	andi	r2,r18,15
80212440:	9806973a 	slli	r3,r19,28
80212444:	2085883a 	add	r2,r4,r2
80212448:	9024d13a 	srli	r18,r18,4
8021244c:	10800003 	ldbu	r2,0(r2)
80212450:	9826d13a 	srli	r19,r19,4
80212454:	ad7fffc4 	addi	r21,r21,-1
80212458:	1ca4b03a 	or	r18,r3,r18
8021245c:	a8800005 	stb	r2,0(r21)
80212460:	94c4b03a 	or	r2,r18,r19
80212464:	103ff51e 	bne	r2,zero,8021243c <__reset+0xfa1f243c>
80212468:	003e5906 	br	80211dd0 <__reset+0xfa1f1dd0>
8021246c:	d9402117 	ldw	r5,132(sp)
80212470:	d9002017 	ldw	r4,128(sp)
80212474:	d9801a04 	addi	r6,sp,104
80212478:	02114400 	call	80211440 <__sprint_r.part.0>
8021247c:	103f891e 	bne	r2,zero,802122a4 <__reset+0xfa1f22a4>
80212480:	d8801c17 	ldw	r2,112(sp)
80212484:	d811883a 	mov	r8,sp
80212488:	003f9506 	br	802122e0 <__reset+0xfa1f22e0>
8021248c:	d9402117 	ldw	r5,132(sp)
80212490:	d9002017 	ldw	r4,128(sp)
80212494:	d9801a04 	addi	r6,sp,104
80212498:	02114400 	call	80211440 <__sprint_r.part.0>
8021249c:	103f811e 	bne	r2,zero,802122a4 <__reset+0xfa1f22a4>
802124a0:	d811883a 	mov	r8,sp
802124a4:	003ced06 	br	8021185c <__reset+0xfa1f185c>
802124a8:	d9402117 	ldw	r5,132(sp)
802124ac:	d9002017 	ldw	r4,128(sp)
802124b0:	d9801a04 	addi	r6,sp,104
802124b4:	da402c15 	stw	r9,176(sp)
802124b8:	db802a15 	stw	r14,168(sp)
802124bc:	02114400 	call	80211440 <__sprint_r.part.0>
802124c0:	da402c17 	ldw	r9,176(sp)
802124c4:	db802a17 	ldw	r14,168(sp)
802124c8:	103f761e 	bne	r2,zero,802122a4 <__reset+0xfa1f22a4>
802124cc:	d9401b17 	ldw	r5,108(sp)
802124d0:	d8801c17 	ldw	r2,112(sp)
802124d4:	d811883a 	mov	r8,sp
802124d8:	29000044 	addi	r4,r5,1
802124dc:	003d5b06 	br	80211a4c <__reset+0xfa1f1a4c>
802124e0:	d9402117 	ldw	r5,132(sp)
802124e4:	d9002017 	ldw	r4,128(sp)
802124e8:	d9801a04 	addi	r6,sp,104
802124ec:	da402c15 	stw	r9,176(sp)
802124f0:	02114400 	call	80211440 <__sprint_r.part.0>
802124f4:	da402c17 	ldw	r9,176(sp)
802124f8:	103f6a1e 	bne	r2,zero,802122a4 <__reset+0xfa1f22a4>
802124fc:	d9401b17 	ldw	r5,108(sp)
80212500:	d8801c17 	ldw	r2,112(sp)
80212504:	d811883a 	mov	r8,sp
80212508:	29000044 	addi	r4,r5,1
8021250c:	003f1006 	br	80212150 <__reset+0xfa1f2150>
80212510:	1000c31e 	bne	r2,zero,80212820 <___vfiprintf_internal_r+0x12cc>
80212514:	01000044 	movi	r4,1
80212518:	000b883a 	mov	r5,zero
8021251c:	d811883a 	mov	r8,sp
80212520:	003f0d06 	br	80212158 <__reset+0xfa1f2158>
80212524:	d9402117 	ldw	r5,132(sp)
80212528:	d9002017 	ldw	r4,128(sp)
8021252c:	d9801a04 	addi	r6,sp,104
80212530:	02114400 	call	80211440 <__sprint_r.part.0>
80212534:	103f5b1e 	bne	r2,zero,802122a4 <__reset+0xfa1f22a4>
80212538:	d9001b17 	ldw	r4,108(sp)
8021253c:	d8801c17 	ldw	r2,112(sp)
80212540:	d811883a 	mov	r8,sp
80212544:	21000044 	addi	r4,r4,1
80212548:	003d8006 	br	80211b4c <__reset+0xfa1f1b4c>
8021254c:	012008b4 	movhi	r4,32802
80212550:	21329804 	addi	r4,r4,-13728
80212554:	d9002615 	stw	r4,152(sp)
80212558:	d8c02215 	stw	r3,136(sp)
8021255c:	1029883a 	mov	r20,r2
80212560:	94c4b03a 	or	r2,r18,r19
80212564:	103fb21e 	bne	r2,zero,80212430 <__reset+0xfa1f2430>
80212568:	0039883a 	mov	fp,zero
8021256c:	00800084 	movi	r2,2
80212570:	003e6b06 	br	80211f20 <__reset+0xfa1f1f20>
80212574:	da802217 	ldw	r10,136(sp)
80212578:	d8001d85 	stb	zero,118(sp)
8021257c:	0027883a 	mov	r19,zero
80212580:	50800104 	addi	r2,r10,4
80212584:	54800017 	ldw	r18,0(r10)
80212588:	483e6016 	blt	r9,zero,80211f0c <__reset+0xfa1f1f0c>
8021258c:	00ffdfc4 	movi	r3,-129
80212590:	d8802215 	stw	r2,136(sp)
80212594:	a0e8703a 	and	r20,r20,r3
80212598:	0039883a 	mov	fp,zero
8021259c:	903ebb26 	beq	r18,zero,8021208c <__reset+0xfa1f208c>
802125a0:	00800244 	movi	r2,9
802125a4:	14bdee36 	bltu	r2,r18,80211d60 <__reset+0xfa1f1d60>
802125a8:	003eba06 	br	80212094 <__reset+0xfa1f2094>
802125ac:	00800c04 	movi	r2,48
802125b0:	d8c01d45 	stb	r3,117(sp)
802125b4:	d8801d05 	stb	r2,116(sp)
802125b8:	d8001d85 	stb	zero,118(sp)
802125bc:	a0c00094 	ori	r3,r20,2
802125c0:	4800a916 	blt	r9,zero,80212868 <___vfiprintf_internal_r+0x1314>
802125c4:	00bfdfc4 	movi	r2,-129
802125c8:	a096703a 	and	r11,r20,r2
802125cc:	5d000094 	ori	r20,r11,2
802125d0:	0039883a 	mov	fp,zero
802125d4:	003f9706 	br	80212434 <__reset+0xfa1f2434>
802125d8:	8025883a 	mov	r18,r16
802125dc:	003c2e06 	br	80211698 <__reset+0xfa1f1698>
802125e0:	00a008b4 	movhi	r2,32802
802125e4:	10b29804 	addi	r2,r2,-13728
802125e8:	0039883a 	mov	fp,zero
802125ec:	d8802615 	stw	r2,152(sp)
802125f0:	003f9006 	br	80212434 <__reset+0xfa1f2434>
802125f4:	04a5c83a 	sub	r18,zero,r18
802125f8:	07000b44 	movi	fp,45
802125fc:	9004c03a 	cmpne	r2,r18,zero
80212600:	04e7c83a 	sub	r19,zero,r19
80212604:	df001d85 	stb	fp,118(sp)
80212608:	98a7c83a 	sub	r19,r19,r2
8021260c:	48009f16 	blt	r9,zero,8021288c <___vfiprintf_internal_r+0x1338>
80212610:	00bfdfc4 	movi	r2,-129
80212614:	a0a8703a 	and	r20,r20,r2
80212618:	003dd006 	br	80211d5c <__reset+0xfa1f1d5c>
8021261c:	70004c26 	beq	r14,zero,80212750 <___vfiprintf_internal_r+0x11fc>
80212620:	00800084 	movi	r2,2
80212624:	d8c01d04 	addi	r3,sp,116
80212628:	d8c00015 	stw	r3,0(sp)
8021262c:	d8800115 	stw	r2,4(sp)
80212630:	01000044 	movi	r4,1
80212634:	d811883a 	mov	r8,sp
80212638:	003f7306 	br	80212408 <__reset+0xfa1f2408>
8021263c:	a080100c 	andi	r2,r20,64
80212640:	da802217 	ldw	r10,136(sp)
80212644:	103e0626 	beq	r2,zero,80211e60 <__reset+0xfa1f1e60>
80212648:	5480000f 	ldh	r18,0(r10)
8021264c:	52800104 	addi	r10,r10,4
80212650:	da802215 	stw	r10,136(sp)
80212654:	9027d7fa 	srai	r19,r18,31
80212658:	9805883a 	mov	r2,r19
8021265c:	003db806 	br	80211d40 <__reset+0xfa1f1d40>
80212660:	a080040c 	andi	r2,r20,16
80212664:	1000091e 	bne	r2,zero,8021268c <___vfiprintf_internal_r+0x1138>
80212668:	a2c0100c 	andi	r11,r20,64
8021266c:	58000726 	beq	r11,zero,8021268c <___vfiprintf_internal_r+0x1138>
80212670:	da802217 	ldw	r10,136(sp)
80212674:	50800017 	ldw	r2,0(r10)
80212678:	52800104 	addi	r10,r10,4
8021267c:	da802215 	stw	r10,136(sp)
80212680:	da802317 	ldw	r10,140(sp)
80212684:	1280000d 	sth	r10,0(r2)
80212688:	003be706 	br	80211628 <__reset+0xfa1f1628>
8021268c:	da802217 	ldw	r10,136(sp)
80212690:	50800017 	ldw	r2,0(r10)
80212694:	52800104 	addi	r10,r10,4
80212698:	da802215 	stw	r10,136(sp)
8021269c:	da802317 	ldw	r10,140(sp)
802126a0:	12800015 	stw	r10,0(r2)
802126a4:	003be006 	br	80211628 <__reset+0xfa1f1628>
802126a8:	a080100c 	andi	r2,r20,64
802126ac:	da802217 	ldw	r10,136(sp)
802126b0:	10003026 	beq	r2,zero,80212774 <___vfiprintf_internal_r+0x1220>
802126b4:	5480000b 	ldhu	r18,0(r10)
802126b8:	52800104 	addi	r10,r10,4
802126bc:	0027883a 	mov	r19,zero
802126c0:	da802215 	stw	r10,136(sp)
802126c4:	003d8006 	br	80211cc8 <__reset+0xfa1f1cc8>
802126c8:	80c00007 	ldb	r3,0(r16)
802126cc:	003c0006 	br	802116d0 <__reset+0xfa1f16d0>
802126d0:	a080100c 	andi	r2,r20,64
802126d4:	d8001d85 	stb	zero,118(sp)
802126d8:	da802217 	ldw	r10,136(sp)
802126dc:	1000201e 	bne	r2,zero,80212760 <___vfiprintf_internal_r+0x120c>
802126e0:	50800104 	addi	r2,r10,4
802126e4:	54800017 	ldw	r18,0(r10)
802126e8:	0027883a 	mov	r19,zero
802126ec:	483def0e 	bge	r9,zero,80211eac <__reset+0xfa1f1eac>
802126f0:	94c6b03a 	or	r3,r18,r19
802126f4:	d8802215 	stw	r2,136(sp)
802126f8:	183d4e1e 	bne	r3,zero,80211c34 <__reset+0xfa1f1c34>
802126fc:	0039883a 	mov	fp,zero
80212700:	0005883a 	mov	r2,zero
80212704:	003e0606 	br	80211f20 <__reset+0xfa1f1f20>
80212708:	d9402117 	ldw	r5,132(sp)
8021270c:	d9002017 	ldw	r4,128(sp)
80212710:	d9801a04 	addi	r6,sp,104
80212714:	da402c15 	stw	r9,176(sp)
80212718:	db802a15 	stw	r14,168(sp)
8021271c:	02114400 	call	80211440 <__sprint_r.part.0>
80212720:	da402c17 	ldw	r9,176(sp)
80212724:	db802a17 	ldw	r14,168(sp)
80212728:	103ede1e 	bne	r2,zero,802122a4 <__reset+0xfa1f22a4>
8021272c:	d9401b17 	ldw	r5,108(sp)
80212730:	d8801c17 	ldw	r2,112(sp)
80212734:	d811883a 	mov	r8,sp
80212738:	29000044 	addi	r4,r5,1
8021273c:	003e7406 	br	80212110 <__reset+0xfa1f2110>
80212740:	00bfffc4 	movi	r2,-1
80212744:	003c5806 	br	802118a8 <__reset+0xfa1f18a8>
80212748:	d811883a 	mov	r8,sp
8021274c:	003ee806 	br	802122f0 <__reset+0xfa1f22f0>
80212750:	000b883a 	mov	r5,zero
80212754:	01000044 	movi	r4,1
80212758:	d811883a 	mov	r8,sp
8021275c:	003e7c06 	br	80212150 <__reset+0xfa1f2150>
80212760:	50800104 	addi	r2,r10,4
80212764:	5480000b 	ldhu	r18,0(r10)
80212768:	0027883a 	mov	r19,zero
8021276c:	483dcf0e 	bge	r9,zero,80211eac <__reset+0xfa1f1eac>
80212770:	003fdf06 	br	802126f0 <__reset+0xfa1f26f0>
80212774:	54800017 	ldw	r18,0(r10)
80212778:	52800104 	addi	r10,r10,4
8021277c:	0027883a 	mov	r19,zero
80212780:	da802215 	stw	r10,136(sp)
80212784:	003d5006 	br	80211cc8 <__reset+0xfa1f1cc8>
80212788:	50800104 	addi	r2,r10,4
8021278c:	5480000b 	ldhu	r18,0(r10)
80212790:	0027883a 	mov	r19,zero
80212794:	483f7d0e 	bge	r9,zero,8021258c <__reset+0xfa1f258c>
80212798:	003ddc06 	br	80211f0c <__reset+0xfa1f1f0c>
8021279c:	d8c02215 	stw	r3,136(sp)
802127a0:	0039883a 	mov	fp,zero
802127a4:	003ddb06 	br	80211f14 <__reset+0xfa1f1f14>
802127a8:	02a008b4 	movhi	r10,32802
802127ac:	52b30804 	addi	r10,r10,-13280
802127b0:	da802415 	stw	r10,144(sp)
802127b4:	003e8306 	br	802121c4 <__reset+0xfa1f21c4>
802127b8:	d8801c17 	ldw	r2,112(sp)
802127bc:	dd002117 	ldw	r20,132(sp)
802127c0:	103eb926 	beq	r2,zero,802122a8 <__reset+0xfa1f22a8>
802127c4:	d9002017 	ldw	r4,128(sp)
802127c8:	d9801a04 	addi	r6,sp,104
802127cc:	a00b883a 	mov	r5,r20
802127d0:	02114400 	call	80211440 <__sprint_r.part.0>
802127d4:	003eb406 	br	802122a8 <__reset+0xfa1f22a8>
802127d8:	80c00043 	ldbu	r3,1(r16)
802127dc:	a5000814 	ori	r20,r20,32
802127e0:	84000044 	addi	r16,r16,1
802127e4:	18c03fcc 	andi	r3,r3,255
802127e8:	18c0201c 	xori	r3,r3,128
802127ec:	18ffe004 	addi	r3,r3,-128
802127f0:	003bb706 	br	802116d0 <__reset+0xfa1f16d0>
802127f4:	a809883a 	mov	r4,r21
802127f8:	d8c02a15 	stw	r3,168(sp)
802127fc:	da002b15 	stw	r8,172(sp)
80212800:	0206a0c0 	call	80206a0c <strlen>
80212804:	d8c02a17 	ldw	r3,168(sp)
80212808:	1027883a 	mov	r19,r2
8021280c:	df001d83 	ldbu	fp,118(sp)
80212810:	d8c02215 	stw	r3,136(sp)
80212814:	0013883a 	mov	r9,zero
80212818:	da002b17 	ldw	r8,172(sp)
8021281c:	003c4d06 	br	80211954 <__reset+0xfa1f1954>
80212820:	d9402117 	ldw	r5,132(sp)
80212824:	d9002017 	ldw	r4,128(sp)
80212828:	d9801a04 	addi	r6,sp,104
8021282c:	da402c15 	stw	r9,176(sp)
80212830:	02114400 	call	80211440 <__sprint_r.part.0>
80212834:	da402c17 	ldw	r9,176(sp)
80212838:	103e9a1e 	bne	r2,zero,802122a4 <__reset+0xfa1f22a4>
8021283c:	d9401b17 	ldw	r5,108(sp)
80212840:	d8801c17 	ldw	r2,112(sp)
80212844:	d811883a 	mov	r8,sp
80212848:	29000044 	addi	r4,r5,1
8021284c:	003e4206 	br	80212158 <__reset+0xfa1f2158>
80212850:	d9401b17 	ldw	r5,108(sp)
80212854:	012008b4 	movhi	r4,32802
80212858:	21330c04 	addi	r4,r4,-13264
8021285c:	d9002415 	stw	r4,144(sp)
80212860:	29400044 	addi	r5,r5,1
80212864:	003c6d06 	br	80211a1c <__reset+0xfa1f1a1c>
80212868:	0039883a 	mov	fp,zero
8021286c:	00800084 	movi	r2,2
80212870:	10803fcc 	andi	r2,r2,255
80212874:	01000044 	movi	r4,1
80212878:	11001e26 	beq	r2,r4,802128f4 <___vfiprintf_internal_r+0x13a0>
8021287c:	01000084 	movi	r4,2
80212880:	11001e1e 	bne	r2,r4,802128fc <___vfiprintf_internal_r+0x13a8>
80212884:	1829883a 	mov	r20,r3
80212888:	003eea06 	br	80212434 <__reset+0xfa1f2434>
8021288c:	a007883a 	mov	r3,r20
80212890:	00800044 	movi	r2,1
80212894:	003ff606 	br	80212870 <__reset+0xfa1f2870>
80212898:	00800184 	movi	r2,6
8021289c:	1240012e 	bgeu	r2,r9,802128a4 <___vfiprintf_internal_r+0x1350>
802128a0:	1013883a 	mov	r9,r2
802128a4:	4827883a 	mov	r19,r9
802128a8:	4825883a 	mov	r18,r9
802128ac:	48001516 	blt	r9,zero,80212904 <___vfiprintf_internal_r+0x13b0>
802128b0:	056008b4 	movhi	r21,32802
802128b4:	d8c02215 	stw	r3,136(sp)
802128b8:	ad729d04 	addi	r21,r21,-13708
802128bc:	003d1406 	br	80211d10 <__reset+0xfa1f1d10>
802128c0:	02a008b4 	movhi	r10,32802
802128c4:	52b30804 	addi	r10,r10,-13280
802128c8:	da802415 	stw	r10,144(sp)
802128cc:	200d883a 	mov	r6,r4
802128d0:	003c9106 	br	80211b18 <__reset+0xfa1f1b18>
802128d4:	5021883a 	mov	r16,r10
802128d8:	0013883a 	mov	r9,zero
802128dc:	003b7d06 	br	802116d4 <__reset+0xfa1f16d4>
802128e0:	4827883a 	mov	r19,r9
802128e4:	df001d83 	ldbu	fp,118(sp)
802128e8:	d8c02215 	stw	r3,136(sp)
802128ec:	0013883a 	mov	r9,zero
802128f0:	003c1806 	br	80211954 <__reset+0xfa1f1954>
802128f4:	1829883a 	mov	r20,r3
802128f8:	003d1806 	br	80211d5c <__reset+0xfa1f1d5c>
802128fc:	1829883a 	mov	r20,r3
80212900:	003ccd06 	br	80211c38 <__reset+0xfa1f1c38>
80212904:	0025883a 	mov	r18,zero
80212908:	003fe906 	br	802128b0 <__reset+0xfa1f28b0>
8021290c:	d8802217 	ldw	r2,136(sp)
80212910:	80c00043 	ldbu	r3,1(r16)
80212914:	5021883a 	mov	r16,r10
80212918:	12400017 	ldw	r9,0(r2)
8021291c:	10800104 	addi	r2,r2,4
80212920:	d8802215 	stw	r2,136(sp)
80212924:	483faf0e 	bge	r9,zero,802127e4 <__reset+0xfa1f27e4>
80212928:	18c03fcc 	andi	r3,r3,255
8021292c:	18c0201c 	xori	r3,r3,128
80212930:	027fffc4 	movi	r9,-1
80212934:	18ffe004 	addi	r3,r3,-128
80212938:	003b6506 	br	802116d0 <__reset+0xfa1f16d0>
8021293c:	d9c01d85 	stb	r7,118(sp)
80212940:	003ca006 	br	80211bc4 <__reset+0xfa1f1bc4>
80212944:	d9c01d85 	stb	r7,118(sp)
80212948:	003cad06 	br	80211c00 <__reset+0xfa1f1c00>
8021294c:	d9c01d85 	stb	r7,118(sp)
80212950:	003d7d06 	br	80211f48 <__reset+0xfa1f1f48>
80212954:	d9c01d85 	stb	r7,118(sp)
80212958:	003d5f06 	br	80211ed8 <__reset+0xfa1f1ed8>
8021295c:	a080004c 	andi	r2,r20,1
80212960:	0039883a 	mov	fp,zero
80212964:	10000526 	beq	r2,zero,8021297c <___vfiprintf_internal_r+0x1428>
80212968:	00800c04 	movi	r2,48
8021296c:	d88019c5 	stb	r2,103(sp)
80212970:	dcc02717 	ldw	r19,156(sp)
80212974:	dd4019c4 	addi	r21,sp,103
80212978:	003bf606 	br	80211954 <__reset+0xfa1f1954>
8021297c:	0027883a 	mov	r19,zero
80212980:	dd401a04 	addi	r21,sp,104
80212984:	003bf306 	br	80211954 <__reset+0xfa1f1954>
80212988:	d9c01d85 	stb	r7,118(sp)
8021298c:	003dc806 	br	802120b0 <__reset+0xfa1f20b0>
80212990:	d9c01d85 	stb	r7,118(sp)
80212994:	003d3a06 	br	80211e80 <__reset+0xfa1f1e80>
80212998:	d9c01d85 	stb	r7,118(sp)
8021299c:	003d2a06 	br	80211e48 <__reset+0xfa1f1e48>
802129a0:	d9c01d85 	stb	r7,118(sp)
802129a4:	003cde06 	br	80211d20 <__reset+0xfa1f1d20>
802129a8:	d9c01d85 	stb	r7,118(sp)
802129ac:	003cbc06 	br	80211ca0 <__reset+0xfa1f1ca0>

802129b0 <__vfiprintf_internal>:
802129b0:	00a008b4 	movhi	r2,32802
802129b4:	10bad504 	addi	r2,r2,-5292
802129b8:	300f883a 	mov	r7,r6
802129bc:	280d883a 	mov	r6,r5
802129c0:	200b883a 	mov	r5,r4
802129c4:	11000017 	ldw	r4,0(r2)
802129c8:	02115541 	jmpi	80211554 <___vfiprintf_internal_r>

802129cc <__sbprintf>:
802129cc:	2880030b 	ldhu	r2,12(r5)
802129d0:	2ac01917 	ldw	r11,100(r5)
802129d4:	2a80038b 	ldhu	r10,14(r5)
802129d8:	2a400717 	ldw	r9,28(r5)
802129dc:	2a000917 	ldw	r8,36(r5)
802129e0:	defee204 	addi	sp,sp,-1144
802129e4:	00c10004 	movi	r3,1024
802129e8:	dc011a15 	stw	r16,1128(sp)
802129ec:	10bfff4c 	andi	r2,r2,65533
802129f0:	2821883a 	mov	r16,r5
802129f4:	d8cb883a 	add	r5,sp,r3
802129f8:	dc811c15 	stw	r18,1136(sp)
802129fc:	dc411b15 	stw	r17,1132(sp)
80212a00:	dfc11d15 	stw	ra,1140(sp)
80212a04:	2025883a 	mov	r18,r4
80212a08:	d881030d 	sth	r2,1036(sp)
80212a0c:	dac11915 	stw	r11,1124(sp)
80212a10:	da81038d 	sth	r10,1038(sp)
80212a14:	da410715 	stw	r9,1052(sp)
80212a18:	da010915 	stw	r8,1060(sp)
80212a1c:	dec10015 	stw	sp,1024(sp)
80212a20:	dec10415 	stw	sp,1040(sp)
80212a24:	d8c10215 	stw	r3,1032(sp)
80212a28:	d8c10515 	stw	r3,1044(sp)
80212a2c:	d8010615 	stw	zero,1048(sp)
80212a30:	02115540 	call	80211554 <___vfiprintf_internal_r>
80212a34:	1023883a 	mov	r17,r2
80212a38:	10000416 	blt	r2,zero,80212a4c <__sbprintf+0x80>
80212a3c:	d9410004 	addi	r5,sp,1024
80212a40:	9009883a 	mov	r4,r18
80212a44:	020cb440 	call	8020cb44 <_fflush_r>
80212a48:	10000d1e 	bne	r2,zero,80212a80 <__sbprintf+0xb4>
80212a4c:	d881030b 	ldhu	r2,1036(sp)
80212a50:	1080100c 	andi	r2,r2,64
80212a54:	10000326 	beq	r2,zero,80212a64 <__sbprintf+0x98>
80212a58:	8080030b 	ldhu	r2,12(r16)
80212a5c:	10801014 	ori	r2,r2,64
80212a60:	8080030d 	sth	r2,12(r16)
80212a64:	8805883a 	mov	r2,r17
80212a68:	dfc11d17 	ldw	ra,1140(sp)
80212a6c:	dc811c17 	ldw	r18,1136(sp)
80212a70:	dc411b17 	ldw	r17,1132(sp)
80212a74:	dc011a17 	ldw	r16,1128(sp)
80212a78:	dec11e04 	addi	sp,sp,1144
80212a7c:	f800283a 	ret
80212a80:	047fffc4 	movi	r17,-1
80212a84:	003ff106 	br	80212a4c <__reset+0xfa1f2a4c>

80212a88 <_write_r>:
80212a88:	defffd04 	addi	sp,sp,-12
80212a8c:	2805883a 	mov	r2,r5
80212a90:	dc000015 	stw	r16,0(sp)
80212a94:	042008b4 	movhi	r16,32802
80212a98:	dc400115 	stw	r17,4(sp)
80212a9c:	300b883a 	mov	r5,r6
80212aa0:	843af404 	addi	r16,r16,-5168
80212aa4:	2023883a 	mov	r17,r4
80212aa8:	380d883a 	mov	r6,r7
80212aac:	1009883a 	mov	r4,r2
80212ab0:	dfc00215 	stw	ra,8(sp)
80212ab4:	80000015 	stw	zero,0(r16)
80212ab8:	02170a00 	call	802170a0 <write>
80212abc:	00ffffc4 	movi	r3,-1
80212ac0:	10c00526 	beq	r2,r3,80212ad8 <_write_r+0x50>
80212ac4:	dfc00217 	ldw	ra,8(sp)
80212ac8:	dc400117 	ldw	r17,4(sp)
80212acc:	dc000017 	ldw	r16,0(sp)
80212ad0:	dec00304 	addi	sp,sp,12
80212ad4:	f800283a 	ret
80212ad8:	80c00017 	ldw	r3,0(r16)
80212adc:	183ff926 	beq	r3,zero,80212ac4 <__reset+0xfa1f2ac4>
80212ae0:	88c00015 	stw	r3,0(r17)
80212ae4:	003ff706 	br	80212ac4 <__reset+0xfa1f2ac4>

80212ae8 <_close_r>:
80212ae8:	defffd04 	addi	sp,sp,-12
80212aec:	dc000015 	stw	r16,0(sp)
80212af0:	042008b4 	movhi	r16,32802
80212af4:	dc400115 	stw	r17,4(sp)
80212af8:	843af404 	addi	r16,r16,-5168
80212afc:	2023883a 	mov	r17,r4
80212b00:	2809883a 	mov	r4,r5
80212b04:	dfc00215 	stw	ra,8(sp)
80212b08:	80000015 	stw	zero,0(r16)
80212b0c:	02167880 	call	80216788 <close>
80212b10:	00ffffc4 	movi	r3,-1
80212b14:	10c00526 	beq	r2,r3,80212b2c <_close_r+0x44>
80212b18:	dfc00217 	ldw	ra,8(sp)
80212b1c:	dc400117 	ldw	r17,4(sp)
80212b20:	dc000017 	ldw	r16,0(sp)
80212b24:	dec00304 	addi	sp,sp,12
80212b28:	f800283a 	ret
80212b2c:	80c00017 	ldw	r3,0(r16)
80212b30:	183ff926 	beq	r3,zero,80212b18 <__reset+0xfa1f2b18>
80212b34:	88c00015 	stw	r3,0(r17)
80212b38:	003ff706 	br	80212b18 <__reset+0xfa1f2b18>

80212b3c <_calloc_r>:
80212b3c:	298b383a 	mul	r5,r5,r6
80212b40:	defffe04 	addi	sp,sp,-8
80212b44:	dfc00115 	stw	ra,4(sp)
80212b48:	dc000015 	stw	r16,0(sp)
80212b4c:	020dc800 	call	8020dc80 <_malloc_r>
80212b50:	10002926 	beq	r2,zero,80212bf8 <_calloc_r+0xbc>
80212b54:	11bfff17 	ldw	r6,-4(r2)
80212b58:	1021883a 	mov	r16,r2
80212b5c:	00bfff04 	movi	r2,-4
80212b60:	308c703a 	and	r6,r6,r2
80212b64:	00c00904 	movi	r3,36
80212b68:	308d883a 	add	r6,r6,r2
80212b6c:	19801636 	bltu	r3,r6,80212bc8 <_calloc_r+0x8c>
80212b70:	008004c4 	movi	r2,19
80212b74:	11800b2e 	bgeu	r2,r6,80212ba4 <_calloc_r+0x68>
80212b78:	80000015 	stw	zero,0(r16)
80212b7c:	80000115 	stw	zero,4(r16)
80212b80:	008006c4 	movi	r2,27
80212b84:	11801a2e 	bgeu	r2,r6,80212bf0 <_calloc_r+0xb4>
80212b88:	80000215 	stw	zero,8(r16)
80212b8c:	80000315 	stw	zero,12(r16)
80212b90:	30c0151e 	bne	r6,r3,80212be8 <_calloc_r+0xac>
80212b94:	80000415 	stw	zero,16(r16)
80212b98:	80800604 	addi	r2,r16,24
80212b9c:	80000515 	stw	zero,20(r16)
80212ba0:	00000106 	br	80212ba8 <_calloc_r+0x6c>
80212ba4:	8005883a 	mov	r2,r16
80212ba8:	10000015 	stw	zero,0(r2)
80212bac:	10000115 	stw	zero,4(r2)
80212bb0:	10000215 	stw	zero,8(r2)
80212bb4:	8005883a 	mov	r2,r16
80212bb8:	dfc00117 	ldw	ra,4(sp)
80212bbc:	dc000017 	ldw	r16,0(sp)
80212bc0:	dec00204 	addi	sp,sp,8
80212bc4:	f800283a 	ret
80212bc8:	000b883a 	mov	r5,zero
80212bcc:	8009883a 	mov	r4,r16
80212bd0:	020e6cc0 	call	8020e6cc <memset>
80212bd4:	8005883a 	mov	r2,r16
80212bd8:	dfc00117 	ldw	ra,4(sp)
80212bdc:	dc000017 	ldw	r16,0(sp)
80212be0:	dec00204 	addi	sp,sp,8
80212be4:	f800283a 	ret
80212be8:	80800404 	addi	r2,r16,16
80212bec:	003fee06 	br	80212ba8 <__reset+0xfa1f2ba8>
80212bf0:	80800204 	addi	r2,r16,8
80212bf4:	003fec06 	br	80212ba8 <__reset+0xfa1f2ba8>
80212bf8:	0005883a 	mov	r2,zero
80212bfc:	003fee06 	br	80212bb8 <__reset+0xfa1f2bb8>

80212c00 <_fclose_r>:
80212c00:	28003926 	beq	r5,zero,80212ce8 <_fclose_r+0xe8>
80212c04:	defffc04 	addi	sp,sp,-16
80212c08:	dc400115 	stw	r17,4(sp)
80212c0c:	dc000015 	stw	r16,0(sp)
80212c10:	dfc00315 	stw	ra,12(sp)
80212c14:	dc800215 	stw	r18,8(sp)
80212c18:	2023883a 	mov	r17,r4
80212c1c:	2821883a 	mov	r16,r5
80212c20:	20000226 	beq	r4,zero,80212c2c <_fclose_r+0x2c>
80212c24:	20800e17 	ldw	r2,56(r4)
80212c28:	10002726 	beq	r2,zero,80212cc8 <_fclose_r+0xc8>
80212c2c:	8080030f 	ldh	r2,12(r16)
80212c30:	1000071e 	bne	r2,zero,80212c50 <_fclose_r+0x50>
80212c34:	0005883a 	mov	r2,zero
80212c38:	dfc00317 	ldw	ra,12(sp)
80212c3c:	dc800217 	ldw	r18,8(sp)
80212c40:	dc400117 	ldw	r17,4(sp)
80212c44:	dc000017 	ldw	r16,0(sp)
80212c48:	dec00404 	addi	sp,sp,16
80212c4c:	f800283a 	ret
80212c50:	800b883a 	mov	r5,r16
80212c54:	8809883a 	mov	r4,r17
80212c58:	020c9280 	call	8020c928 <__sflush_r>
80212c5c:	1025883a 	mov	r18,r2
80212c60:	80800b17 	ldw	r2,44(r16)
80212c64:	10000426 	beq	r2,zero,80212c78 <_fclose_r+0x78>
80212c68:	81400717 	ldw	r5,28(r16)
80212c6c:	8809883a 	mov	r4,r17
80212c70:	103ee83a 	callr	r2
80212c74:	10001616 	blt	r2,zero,80212cd0 <_fclose_r+0xd0>
80212c78:	8080030b 	ldhu	r2,12(r16)
80212c7c:	1080200c 	andi	r2,r2,128
80212c80:	1000151e 	bne	r2,zero,80212cd8 <_fclose_r+0xd8>
80212c84:	81400c17 	ldw	r5,48(r16)
80212c88:	28000526 	beq	r5,zero,80212ca0 <_fclose_r+0xa0>
80212c8c:	80801004 	addi	r2,r16,64
80212c90:	28800226 	beq	r5,r2,80212c9c <_fclose_r+0x9c>
80212c94:	8809883a 	mov	r4,r17
80212c98:	020d0940 	call	8020d094 <_free_r>
80212c9c:	80000c15 	stw	zero,48(r16)
80212ca0:	81401117 	ldw	r5,68(r16)
80212ca4:	28000326 	beq	r5,zero,80212cb4 <_fclose_r+0xb4>
80212ca8:	8809883a 	mov	r4,r17
80212cac:	020d0940 	call	8020d094 <_free_r>
80212cb0:	80001115 	stw	zero,68(r16)
80212cb4:	020cf300 	call	8020cf30 <__sfp_lock_acquire>
80212cb8:	8000030d 	sth	zero,12(r16)
80212cbc:	020cf340 	call	8020cf34 <__sfp_lock_release>
80212cc0:	9005883a 	mov	r2,r18
80212cc4:	003fdc06 	br	80212c38 <__reset+0xfa1f2c38>
80212cc8:	020cf200 	call	8020cf20 <__sinit>
80212ccc:	003fd706 	br	80212c2c <__reset+0xfa1f2c2c>
80212cd0:	04bfffc4 	movi	r18,-1
80212cd4:	003fe806 	br	80212c78 <__reset+0xfa1f2c78>
80212cd8:	81400417 	ldw	r5,16(r16)
80212cdc:	8809883a 	mov	r4,r17
80212ce0:	020d0940 	call	8020d094 <_free_r>
80212ce4:	003fe706 	br	80212c84 <__reset+0xfa1f2c84>
80212ce8:	0005883a 	mov	r2,zero
80212cec:	f800283a 	ret

80212cf0 <fclose>:
80212cf0:	00a008b4 	movhi	r2,32802
80212cf4:	10bad504 	addi	r2,r2,-5292
80212cf8:	200b883a 	mov	r5,r4
80212cfc:	11000017 	ldw	r4,0(r2)
80212d00:	0212c001 	jmpi	80212c00 <_fclose_r>

80212d04 <__fputwc>:
80212d04:	defff804 	addi	sp,sp,-32
80212d08:	dcc00415 	stw	r19,16(sp)
80212d0c:	dc800315 	stw	r18,12(sp)
80212d10:	dc000115 	stw	r16,4(sp)
80212d14:	dfc00715 	stw	ra,28(sp)
80212d18:	dd400615 	stw	r21,24(sp)
80212d1c:	dd000515 	stw	r20,20(sp)
80212d20:	dc400215 	stw	r17,8(sp)
80212d24:	2027883a 	mov	r19,r4
80212d28:	2825883a 	mov	r18,r5
80212d2c:	3021883a 	mov	r16,r6
80212d30:	020da700 	call	8020da70 <__locale_mb_cur_max>
80212d34:	00c00044 	movi	r3,1
80212d38:	10c03e26 	beq	r2,r3,80212e34 <__fputwc+0x130>
80212d3c:	81c01704 	addi	r7,r16,92
80212d40:	900d883a 	mov	r6,r18
80212d44:	d80b883a 	mov	r5,sp
80212d48:	9809883a 	mov	r4,r19
80212d4c:	02131d40 	call	802131d4 <_wcrtomb_r>
80212d50:	1029883a 	mov	r20,r2
80212d54:	00bfffc4 	movi	r2,-1
80212d58:	a0802026 	beq	r20,r2,80212ddc <__fputwc+0xd8>
80212d5c:	d9400003 	ldbu	r5,0(sp)
80212d60:	a0001c26 	beq	r20,zero,80212dd4 <__fputwc+0xd0>
80212d64:	0023883a 	mov	r17,zero
80212d68:	05400284 	movi	r21,10
80212d6c:	00000906 	br	80212d94 <__fputwc+0x90>
80212d70:	80800017 	ldw	r2,0(r16)
80212d74:	11400005 	stb	r5,0(r2)
80212d78:	80c00017 	ldw	r3,0(r16)
80212d7c:	18c00044 	addi	r3,r3,1
80212d80:	80c00015 	stw	r3,0(r16)
80212d84:	8c400044 	addi	r17,r17,1
80212d88:	dc45883a 	add	r2,sp,r17
80212d8c:	8d00112e 	bgeu	r17,r20,80212dd4 <__fputwc+0xd0>
80212d90:	11400003 	ldbu	r5,0(r2)
80212d94:	80c00217 	ldw	r3,8(r16)
80212d98:	18ffffc4 	addi	r3,r3,-1
80212d9c:	80c00215 	stw	r3,8(r16)
80212da0:	183ff30e 	bge	r3,zero,80212d70 <__reset+0xfa1f2d70>
80212da4:	80800617 	ldw	r2,24(r16)
80212da8:	18801916 	blt	r3,r2,80212e10 <__fputwc+0x10c>
80212dac:	80800017 	ldw	r2,0(r16)
80212db0:	11400005 	stb	r5,0(r2)
80212db4:	80800017 	ldw	r2,0(r16)
80212db8:	10c00003 	ldbu	r3,0(r2)
80212dbc:	10800044 	addi	r2,r2,1
80212dc0:	1d402326 	beq	r3,r21,80212e50 <__fputwc+0x14c>
80212dc4:	80800015 	stw	r2,0(r16)
80212dc8:	8c400044 	addi	r17,r17,1
80212dcc:	dc45883a 	add	r2,sp,r17
80212dd0:	8d3fef36 	bltu	r17,r20,80212d90 <__reset+0xfa1f2d90>
80212dd4:	9005883a 	mov	r2,r18
80212dd8:	00000406 	br	80212dec <__fputwc+0xe8>
80212ddc:	80c0030b 	ldhu	r3,12(r16)
80212de0:	a005883a 	mov	r2,r20
80212de4:	18c01014 	ori	r3,r3,64
80212de8:	80c0030d 	sth	r3,12(r16)
80212dec:	dfc00717 	ldw	ra,28(sp)
80212df0:	dd400617 	ldw	r21,24(sp)
80212df4:	dd000517 	ldw	r20,20(sp)
80212df8:	dcc00417 	ldw	r19,16(sp)
80212dfc:	dc800317 	ldw	r18,12(sp)
80212e00:	dc400217 	ldw	r17,8(sp)
80212e04:	dc000117 	ldw	r16,4(sp)
80212e08:	dec00804 	addi	sp,sp,32
80212e0c:	f800283a 	ret
80212e10:	800d883a 	mov	r6,r16
80212e14:	29403fcc 	andi	r5,r5,255
80212e18:	9809883a 	mov	r4,r19
80212e1c:	021307c0 	call	8021307c <__swbuf_r>
80212e20:	10bfffe0 	cmpeqi	r2,r2,-1
80212e24:	10803fcc 	andi	r2,r2,255
80212e28:	103fd626 	beq	r2,zero,80212d84 <__reset+0xfa1f2d84>
80212e2c:	00bfffc4 	movi	r2,-1
80212e30:	003fee06 	br	80212dec <__reset+0xfa1f2dec>
80212e34:	90ffffc4 	addi	r3,r18,-1
80212e38:	01003f84 	movi	r4,254
80212e3c:	20ffbf36 	bltu	r4,r3,80212d3c <__reset+0xfa1f2d3c>
80212e40:	900b883a 	mov	r5,r18
80212e44:	dc800005 	stb	r18,0(sp)
80212e48:	1029883a 	mov	r20,r2
80212e4c:	003fc506 	br	80212d64 <__reset+0xfa1f2d64>
80212e50:	800d883a 	mov	r6,r16
80212e54:	a80b883a 	mov	r5,r21
80212e58:	9809883a 	mov	r4,r19
80212e5c:	021307c0 	call	8021307c <__swbuf_r>
80212e60:	10bfffe0 	cmpeqi	r2,r2,-1
80212e64:	003fef06 	br	80212e24 <__reset+0xfa1f2e24>

80212e68 <_fputwc_r>:
80212e68:	3080030b 	ldhu	r2,12(r6)
80212e6c:	10c8000c 	andi	r3,r2,8192
80212e70:	1800051e 	bne	r3,zero,80212e88 <_fputwc_r+0x20>
80212e74:	30c01917 	ldw	r3,100(r6)
80212e78:	10880014 	ori	r2,r2,8192
80212e7c:	3080030d 	sth	r2,12(r6)
80212e80:	18880014 	ori	r2,r3,8192
80212e84:	30801915 	stw	r2,100(r6)
80212e88:	0212d041 	jmpi	80212d04 <__fputwc>

80212e8c <fputwc>:
80212e8c:	00a008b4 	movhi	r2,32802
80212e90:	defffc04 	addi	sp,sp,-16
80212e94:	10bad504 	addi	r2,r2,-5292
80212e98:	dc000115 	stw	r16,4(sp)
80212e9c:	14000017 	ldw	r16,0(r2)
80212ea0:	dc400215 	stw	r17,8(sp)
80212ea4:	dfc00315 	stw	ra,12(sp)
80212ea8:	2023883a 	mov	r17,r4
80212eac:	80000226 	beq	r16,zero,80212eb8 <fputwc+0x2c>
80212eb0:	80800e17 	ldw	r2,56(r16)
80212eb4:	10001026 	beq	r2,zero,80212ef8 <fputwc+0x6c>
80212eb8:	2880030b 	ldhu	r2,12(r5)
80212ebc:	10c8000c 	andi	r3,r2,8192
80212ec0:	1800051e 	bne	r3,zero,80212ed8 <fputwc+0x4c>
80212ec4:	28c01917 	ldw	r3,100(r5)
80212ec8:	10880014 	ori	r2,r2,8192
80212ecc:	2880030d 	sth	r2,12(r5)
80212ed0:	18880014 	ori	r2,r3,8192
80212ed4:	28801915 	stw	r2,100(r5)
80212ed8:	280d883a 	mov	r6,r5
80212edc:	8009883a 	mov	r4,r16
80212ee0:	880b883a 	mov	r5,r17
80212ee4:	dfc00317 	ldw	ra,12(sp)
80212ee8:	dc400217 	ldw	r17,8(sp)
80212eec:	dc000117 	ldw	r16,4(sp)
80212ef0:	dec00404 	addi	sp,sp,16
80212ef4:	0212d041 	jmpi	80212d04 <__fputwc>
80212ef8:	8009883a 	mov	r4,r16
80212efc:	d9400015 	stw	r5,0(sp)
80212f00:	020cf200 	call	8020cf20 <__sinit>
80212f04:	d9400017 	ldw	r5,0(sp)
80212f08:	003feb06 	br	80212eb8 <__reset+0xfa1f2eb8>

80212f0c <_fstat_r>:
80212f0c:	defffd04 	addi	sp,sp,-12
80212f10:	2805883a 	mov	r2,r5
80212f14:	dc000015 	stw	r16,0(sp)
80212f18:	042008b4 	movhi	r16,32802
80212f1c:	dc400115 	stw	r17,4(sp)
80212f20:	843af404 	addi	r16,r16,-5168
80212f24:	2023883a 	mov	r17,r4
80212f28:	300b883a 	mov	r5,r6
80212f2c:	1009883a 	mov	r4,r2
80212f30:	dfc00215 	stw	ra,8(sp)
80212f34:	80000015 	stw	zero,0(r16)
80212f38:	02168e00 	call	802168e0 <fstat>
80212f3c:	00ffffc4 	movi	r3,-1
80212f40:	10c00526 	beq	r2,r3,80212f58 <_fstat_r+0x4c>
80212f44:	dfc00217 	ldw	ra,8(sp)
80212f48:	dc400117 	ldw	r17,4(sp)
80212f4c:	dc000017 	ldw	r16,0(sp)
80212f50:	dec00304 	addi	sp,sp,12
80212f54:	f800283a 	ret
80212f58:	80c00017 	ldw	r3,0(r16)
80212f5c:	183ff926 	beq	r3,zero,80212f44 <__reset+0xfa1f2f44>
80212f60:	88c00015 	stw	r3,0(r17)
80212f64:	003ff706 	br	80212f44 <__reset+0xfa1f2f44>

80212f68 <_isatty_r>:
80212f68:	defffd04 	addi	sp,sp,-12
80212f6c:	dc000015 	stw	r16,0(sp)
80212f70:	042008b4 	movhi	r16,32802
80212f74:	dc400115 	stw	r17,4(sp)
80212f78:	843af404 	addi	r16,r16,-5168
80212f7c:	2023883a 	mov	r17,r4
80212f80:	2809883a 	mov	r4,r5
80212f84:	dfc00215 	stw	ra,8(sp)
80212f88:	80000015 	stw	zero,0(r16)
80212f8c:	02169cc0 	call	802169cc <isatty>
80212f90:	00ffffc4 	movi	r3,-1
80212f94:	10c00526 	beq	r2,r3,80212fac <_isatty_r+0x44>
80212f98:	dfc00217 	ldw	ra,8(sp)
80212f9c:	dc400117 	ldw	r17,4(sp)
80212fa0:	dc000017 	ldw	r16,0(sp)
80212fa4:	dec00304 	addi	sp,sp,12
80212fa8:	f800283a 	ret
80212fac:	80c00017 	ldw	r3,0(r16)
80212fb0:	183ff926 	beq	r3,zero,80212f98 <__reset+0xfa1f2f98>
80212fb4:	88c00015 	stw	r3,0(r17)
80212fb8:	003ff706 	br	80212f98 <__reset+0xfa1f2f98>

80212fbc <_lseek_r>:
80212fbc:	defffd04 	addi	sp,sp,-12
80212fc0:	2805883a 	mov	r2,r5
80212fc4:	dc000015 	stw	r16,0(sp)
80212fc8:	042008b4 	movhi	r16,32802
80212fcc:	dc400115 	stw	r17,4(sp)
80212fd0:	300b883a 	mov	r5,r6
80212fd4:	843af404 	addi	r16,r16,-5168
80212fd8:	2023883a 	mov	r17,r4
80212fdc:	380d883a 	mov	r6,r7
80212fe0:	1009883a 	mov	r4,r2
80212fe4:	dfc00215 	stw	ra,8(sp)
80212fe8:	80000015 	stw	zero,0(r16)
80212fec:	0216aac0 	call	80216aac <lseek>
80212ff0:	00ffffc4 	movi	r3,-1
80212ff4:	10c00526 	beq	r2,r3,8021300c <_lseek_r+0x50>
80212ff8:	dfc00217 	ldw	ra,8(sp)
80212ffc:	dc400117 	ldw	r17,4(sp)
80213000:	dc000017 	ldw	r16,0(sp)
80213004:	dec00304 	addi	sp,sp,12
80213008:	f800283a 	ret
8021300c:	80c00017 	ldw	r3,0(r16)
80213010:	183ff926 	beq	r3,zero,80212ff8 <__reset+0xfa1f2ff8>
80213014:	88c00015 	stw	r3,0(r17)
80213018:	003ff706 	br	80212ff8 <__reset+0xfa1f2ff8>

8021301c <_read_r>:
8021301c:	defffd04 	addi	sp,sp,-12
80213020:	2805883a 	mov	r2,r5
80213024:	dc000015 	stw	r16,0(sp)
80213028:	042008b4 	movhi	r16,32802
8021302c:	dc400115 	stw	r17,4(sp)
80213030:	300b883a 	mov	r5,r6
80213034:	843af404 	addi	r16,r16,-5168
80213038:	2023883a 	mov	r17,r4
8021303c:	380d883a 	mov	r6,r7
80213040:	1009883a 	mov	r4,r2
80213044:	dfc00215 	stw	ra,8(sp)
80213048:	80000015 	stw	zero,0(r16)
8021304c:	0216c800 	call	80216c80 <read>
80213050:	00ffffc4 	movi	r3,-1
80213054:	10c00526 	beq	r2,r3,8021306c <_read_r+0x50>
80213058:	dfc00217 	ldw	ra,8(sp)
8021305c:	dc400117 	ldw	r17,4(sp)
80213060:	dc000017 	ldw	r16,0(sp)
80213064:	dec00304 	addi	sp,sp,12
80213068:	f800283a 	ret
8021306c:	80c00017 	ldw	r3,0(r16)
80213070:	183ff926 	beq	r3,zero,80213058 <__reset+0xfa1f3058>
80213074:	88c00015 	stw	r3,0(r17)
80213078:	003ff706 	br	80213058 <__reset+0xfa1f3058>

8021307c <__swbuf_r>:
8021307c:	defffb04 	addi	sp,sp,-20
80213080:	dcc00315 	stw	r19,12(sp)
80213084:	dc800215 	stw	r18,8(sp)
80213088:	dc000015 	stw	r16,0(sp)
8021308c:	dfc00415 	stw	ra,16(sp)
80213090:	dc400115 	stw	r17,4(sp)
80213094:	2025883a 	mov	r18,r4
80213098:	2827883a 	mov	r19,r5
8021309c:	3021883a 	mov	r16,r6
802130a0:	20000226 	beq	r4,zero,802130ac <__swbuf_r+0x30>
802130a4:	20800e17 	ldw	r2,56(r4)
802130a8:	10004226 	beq	r2,zero,802131b4 <__swbuf_r+0x138>
802130ac:	80800617 	ldw	r2,24(r16)
802130b0:	8100030b 	ldhu	r4,12(r16)
802130b4:	80800215 	stw	r2,8(r16)
802130b8:	2080020c 	andi	r2,r4,8
802130bc:	10003626 	beq	r2,zero,80213198 <__swbuf_r+0x11c>
802130c0:	80c00417 	ldw	r3,16(r16)
802130c4:	18003426 	beq	r3,zero,80213198 <__swbuf_r+0x11c>
802130c8:	2088000c 	andi	r2,r4,8192
802130cc:	9c403fcc 	andi	r17,r19,255
802130d0:	10001a26 	beq	r2,zero,8021313c <__swbuf_r+0xc0>
802130d4:	80800017 	ldw	r2,0(r16)
802130d8:	81000517 	ldw	r4,20(r16)
802130dc:	10c7c83a 	sub	r3,r2,r3
802130e0:	1900200e 	bge	r3,r4,80213164 <__swbuf_r+0xe8>
802130e4:	18c00044 	addi	r3,r3,1
802130e8:	81000217 	ldw	r4,8(r16)
802130ec:	11400044 	addi	r5,r2,1
802130f0:	81400015 	stw	r5,0(r16)
802130f4:	213fffc4 	addi	r4,r4,-1
802130f8:	81000215 	stw	r4,8(r16)
802130fc:	14c00005 	stb	r19,0(r2)
80213100:	80800517 	ldw	r2,20(r16)
80213104:	10c01e26 	beq	r2,r3,80213180 <__swbuf_r+0x104>
80213108:	8080030b 	ldhu	r2,12(r16)
8021310c:	1080004c 	andi	r2,r2,1
80213110:	10000226 	beq	r2,zero,8021311c <__swbuf_r+0xa0>
80213114:	00800284 	movi	r2,10
80213118:	88801926 	beq	r17,r2,80213180 <__swbuf_r+0x104>
8021311c:	8805883a 	mov	r2,r17
80213120:	dfc00417 	ldw	ra,16(sp)
80213124:	dcc00317 	ldw	r19,12(sp)
80213128:	dc800217 	ldw	r18,8(sp)
8021312c:	dc400117 	ldw	r17,4(sp)
80213130:	dc000017 	ldw	r16,0(sp)
80213134:	dec00504 	addi	sp,sp,20
80213138:	f800283a 	ret
8021313c:	81401917 	ldw	r5,100(r16)
80213140:	00b7ffc4 	movi	r2,-8193
80213144:	21080014 	ori	r4,r4,8192
80213148:	2884703a 	and	r2,r5,r2
8021314c:	80801915 	stw	r2,100(r16)
80213150:	80800017 	ldw	r2,0(r16)
80213154:	8100030d 	sth	r4,12(r16)
80213158:	81000517 	ldw	r4,20(r16)
8021315c:	10c7c83a 	sub	r3,r2,r3
80213160:	193fe016 	blt	r3,r4,802130e4 <__reset+0xfa1f30e4>
80213164:	800b883a 	mov	r5,r16
80213168:	9009883a 	mov	r4,r18
8021316c:	020cb440 	call	8020cb44 <_fflush_r>
80213170:	1000071e 	bne	r2,zero,80213190 <__swbuf_r+0x114>
80213174:	80800017 	ldw	r2,0(r16)
80213178:	00c00044 	movi	r3,1
8021317c:	003fda06 	br	802130e8 <__reset+0xfa1f30e8>
80213180:	800b883a 	mov	r5,r16
80213184:	9009883a 	mov	r4,r18
80213188:	020cb440 	call	8020cb44 <_fflush_r>
8021318c:	103fe326 	beq	r2,zero,8021311c <__reset+0xfa1f311c>
80213190:	00bfffc4 	movi	r2,-1
80213194:	003fe206 	br	80213120 <__reset+0xfa1f3120>
80213198:	800b883a 	mov	r5,r16
8021319c:	9009883a 	mov	r4,r18
802131a0:	020af4c0 	call	8020af4c <__swsetup_r>
802131a4:	103ffa1e 	bne	r2,zero,80213190 <__reset+0xfa1f3190>
802131a8:	8100030b 	ldhu	r4,12(r16)
802131ac:	80c00417 	ldw	r3,16(r16)
802131b0:	003fc506 	br	802130c8 <__reset+0xfa1f30c8>
802131b4:	020cf200 	call	8020cf20 <__sinit>
802131b8:	003fbc06 	br	802130ac <__reset+0xfa1f30ac>

802131bc <__swbuf>:
802131bc:	00a008b4 	movhi	r2,32802
802131c0:	10bad504 	addi	r2,r2,-5292
802131c4:	280d883a 	mov	r6,r5
802131c8:	200b883a 	mov	r5,r4
802131cc:	11000017 	ldw	r4,0(r2)
802131d0:	021307c1 	jmpi	8021307c <__swbuf_r>

802131d4 <_wcrtomb_r>:
802131d4:	defff604 	addi	sp,sp,-40
802131d8:	00a008b4 	movhi	r2,32802
802131dc:	dc800815 	stw	r18,32(sp)
802131e0:	dc400715 	stw	r17,28(sp)
802131e4:	dc000615 	stw	r16,24(sp)
802131e8:	10bad904 	addi	r2,r2,-5276
802131ec:	dfc00915 	stw	ra,36(sp)
802131f0:	2021883a 	mov	r16,r4
802131f4:	3823883a 	mov	r17,r7
802131f8:	14800017 	ldw	r18,0(r2)
802131fc:	28001426 	beq	r5,zero,80213250 <_wcrtomb_r+0x7c>
80213200:	d9400415 	stw	r5,16(sp)
80213204:	d9800515 	stw	r6,20(sp)
80213208:	020da640 	call	8020da64 <__locale_charset>
8021320c:	d9800517 	ldw	r6,20(sp)
80213210:	d9400417 	ldw	r5,16(sp)
80213214:	100f883a 	mov	r7,r2
80213218:	dc400015 	stw	r17,0(sp)
8021321c:	8009883a 	mov	r4,r16
80213220:	903ee83a 	callr	r18
80213224:	00ffffc4 	movi	r3,-1
80213228:	10c0031e 	bne	r2,r3,80213238 <_wcrtomb_r+0x64>
8021322c:	88000015 	stw	zero,0(r17)
80213230:	00c02284 	movi	r3,138
80213234:	80c00015 	stw	r3,0(r16)
80213238:	dfc00917 	ldw	ra,36(sp)
8021323c:	dc800817 	ldw	r18,32(sp)
80213240:	dc400717 	ldw	r17,28(sp)
80213244:	dc000617 	ldw	r16,24(sp)
80213248:	dec00a04 	addi	sp,sp,40
8021324c:	f800283a 	ret
80213250:	020da640 	call	8020da64 <__locale_charset>
80213254:	100f883a 	mov	r7,r2
80213258:	dc400015 	stw	r17,0(sp)
8021325c:	000d883a 	mov	r6,zero
80213260:	d9400104 	addi	r5,sp,4
80213264:	8009883a 	mov	r4,r16
80213268:	903ee83a 	callr	r18
8021326c:	003fed06 	br	80213224 <__reset+0xfa1f3224>

80213270 <wcrtomb>:
80213270:	defff604 	addi	sp,sp,-40
80213274:	00a008b4 	movhi	r2,32802
80213278:	dc800615 	stw	r18,24(sp)
8021327c:	dc400515 	stw	r17,20(sp)
80213280:	10bad504 	addi	r2,r2,-5292
80213284:	dfc00915 	stw	ra,36(sp)
80213288:	dd000815 	stw	r20,32(sp)
8021328c:	dcc00715 	stw	r19,28(sp)
80213290:	dc000415 	stw	r16,16(sp)
80213294:	3025883a 	mov	r18,r6
80213298:	14400017 	ldw	r17,0(r2)
8021329c:	20001926 	beq	r4,zero,80213304 <wcrtomb+0x94>
802132a0:	00a008b4 	movhi	r2,32802
802132a4:	10bad904 	addi	r2,r2,-5276
802132a8:	15000017 	ldw	r20,0(r2)
802132ac:	2021883a 	mov	r16,r4
802132b0:	2827883a 	mov	r19,r5
802132b4:	020da640 	call	8020da64 <__locale_charset>
802132b8:	100f883a 	mov	r7,r2
802132bc:	dc800015 	stw	r18,0(sp)
802132c0:	980d883a 	mov	r6,r19
802132c4:	800b883a 	mov	r5,r16
802132c8:	8809883a 	mov	r4,r17
802132cc:	a03ee83a 	callr	r20
802132d0:	00ffffc4 	movi	r3,-1
802132d4:	10c0031e 	bne	r2,r3,802132e4 <wcrtomb+0x74>
802132d8:	90000015 	stw	zero,0(r18)
802132dc:	00c02284 	movi	r3,138
802132e0:	88c00015 	stw	r3,0(r17)
802132e4:	dfc00917 	ldw	ra,36(sp)
802132e8:	dd000817 	ldw	r20,32(sp)
802132ec:	dcc00717 	ldw	r19,28(sp)
802132f0:	dc800617 	ldw	r18,24(sp)
802132f4:	dc400517 	ldw	r17,20(sp)
802132f8:	dc000417 	ldw	r16,16(sp)
802132fc:	dec00a04 	addi	sp,sp,40
80213300:	f800283a 	ret
80213304:	00a008b4 	movhi	r2,32802
80213308:	10bad904 	addi	r2,r2,-5276
8021330c:	14000017 	ldw	r16,0(r2)
80213310:	020da640 	call	8020da64 <__locale_charset>
80213314:	100f883a 	mov	r7,r2
80213318:	dc800015 	stw	r18,0(sp)
8021331c:	000d883a 	mov	r6,zero
80213320:	d9400104 	addi	r5,sp,4
80213324:	8809883a 	mov	r4,r17
80213328:	803ee83a 	callr	r16
8021332c:	003fe806 	br	802132d0 <__reset+0xfa1f32d0>

80213330 <__ascii_wctomb>:
80213330:	28000526 	beq	r5,zero,80213348 <__ascii_wctomb+0x18>
80213334:	00803fc4 	movi	r2,255
80213338:	11800536 	bltu	r2,r6,80213350 <__ascii_wctomb+0x20>
8021333c:	29800005 	stb	r6,0(r5)
80213340:	00800044 	movi	r2,1
80213344:	f800283a 	ret
80213348:	0005883a 	mov	r2,zero
8021334c:	f800283a 	ret
80213350:	00802284 	movi	r2,138
80213354:	20800015 	stw	r2,0(r4)
80213358:	00bfffc4 	movi	r2,-1
8021335c:	f800283a 	ret

80213360 <_wctomb_r>:
80213360:	00a008b4 	movhi	r2,32802
80213364:	defff904 	addi	sp,sp,-28
80213368:	10bad904 	addi	r2,r2,-5276
8021336c:	dfc00615 	stw	ra,24(sp)
80213370:	dc400515 	stw	r17,20(sp)
80213374:	dc000415 	stw	r16,16(sp)
80213378:	3823883a 	mov	r17,r7
8021337c:	14000017 	ldw	r16,0(r2)
80213380:	d9000115 	stw	r4,4(sp)
80213384:	d9400215 	stw	r5,8(sp)
80213388:	d9800315 	stw	r6,12(sp)
8021338c:	020da640 	call	8020da64 <__locale_charset>
80213390:	d9800317 	ldw	r6,12(sp)
80213394:	d9400217 	ldw	r5,8(sp)
80213398:	d9000117 	ldw	r4,4(sp)
8021339c:	100f883a 	mov	r7,r2
802133a0:	dc400015 	stw	r17,0(sp)
802133a4:	803ee83a 	callr	r16
802133a8:	dfc00617 	ldw	ra,24(sp)
802133ac:	dc400517 	ldw	r17,20(sp)
802133b0:	dc000417 	ldw	r16,16(sp)
802133b4:	dec00704 	addi	sp,sp,28
802133b8:	f800283a 	ret

802133bc <__udivdi3>:
802133bc:	defff504 	addi	sp,sp,-44
802133c0:	dcc00415 	stw	r19,16(sp)
802133c4:	dc000115 	stw	r16,4(sp)
802133c8:	dfc00a15 	stw	ra,40(sp)
802133cc:	df000915 	stw	fp,36(sp)
802133d0:	ddc00815 	stw	r23,32(sp)
802133d4:	dd800715 	stw	r22,28(sp)
802133d8:	dd400615 	stw	r21,24(sp)
802133dc:	dd000515 	stw	r20,20(sp)
802133e0:	dc800315 	stw	r18,12(sp)
802133e4:	dc400215 	stw	r17,8(sp)
802133e8:	2027883a 	mov	r19,r4
802133ec:	2821883a 	mov	r16,r5
802133f0:	3800411e 	bne	r7,zero,802134f8 <__udivdi3+0x13c>
802133f4:	3023883a 	mov	r17,r6
802133f8:	2025883a 	mov	r18,r4
802133fc:	2980522e 	bgeu	r5,r6,80213548 <__udivdi3+0x18c>
80213400:	00bfffd4 	movui	r2,65535
80213404:	282d883a 	mov	r22,r5
80213408:	1180a836 	bltu	r2,r6,802136ac <__udivdi3+0x2f0>
8021340c:	00803fc4 	movi	r2,255
80213410:	1185803a 	cmpltu	r2,r2,r6
80213414:	100490fa 	slli	r2,r2,3
80213418:	3086d83a 	srl	r3,r6,r2
8021341c:	012008b4 	movhi	r4,32802
80213420:	21324c44 	addi	r4,r4,-14031
80213424:	20c7883a 	add	r3,r4,r3
80213428:	18c00003 	ldbu	r3,0(r3)
8021342c:	1885883a 	add	r2,r3,r2
80213430:	00c00804 	movi	r3,32
80213434:	1887c83a 	sub	r3,r3,r2
80213438:	18000526 	beq	r3,zero,80213450 <__udivdi3+0x94>
8021343c:	80e0983a 	sll	r16,r16,r3
80213440:	9884d83a 	srl	r2,r19,r2
80213444:	30e2983a 	sll	r17,r6,r3
80213448:	98e4983a 	sll	r18,r19,r3
8021344c:	142cb03a 	or	r22,r2,r16
80213450:	882ad43a 	srli	r21,r17,16
80213454:	b009883a 	mov	r4,r22
80213458:	8d3fffcc 	andi	r20,r17,65535
8021345c:	a80b883a 	mov	r5,r21
80213460:	0213fc80 	call	80213fc8 <__umodsi3>
80213464:	b009883a 	mov	r4,r22
80213468:	a80b883a 	mov	r5,r21
8021346c:	1027883a 	mov	r19,r2
80213470:	0213f640 	call	80213f64 <__udivsi3>
80213474:	102d883a 	mov	r22,r2
80213478:	9826943a 	slli	r19,r19,16
8021347c:	9004d43a 	srli	r2,r18,16
80213480:	a5a1383a 	mul	r16,r20,r22
80213484:	14c4b03a 	or	r2,r2,r19
80213488:	1400052e 	bgeu	r2,r16,802134a0 <__udivdi3+0xe4>
8021348c:	1445883a 	add	r2,r2,r17
80213490:	b0ffffc4 	addi	r3,r22,-1
80213494:	14400136 	bltu	r2,r17,8021349c <__udivdi3+0xe0>
80213498:	14012336 	bltu	r2,r16,80213928 <__udivdi3+0x56c>
8021349c:	182d883a 	mov	r22,r3
802134a0:	1421c83a 	sub	r16,r2,r16
802134a4:	a80b883a 	mov	r5,r21
802134a8:	8009883a 	mov	r4,r16
802134ac:	0213fc80 	call	80213fc8 <__umodsi3>
802134b0:	1027883a 	mov	r19,r2
802134b4:	a80b883a 	mov	r5,r21
802134b8:	8009883a 	mov	r4,r16
802134bc:	0213f640 	call	80213f64 <__udivsi3>
802134c0:	9826943a 	slli	r19,r19,16
802134c4:	a0a9383a 	mul	r20,r20,r2
802134c8:	94bfffcc 	andi	r18,r18,65535
802134cc:	94e4b03a 	or	r18,r18,r19
802134d0:	9500052e 	bgeu	r18,r20,802134e8 <__udivdi3+0x12c>
802134d4:	8ca5883a 	add	r18,r17,r18
802134d8:	10ffffc4 	addi	r3,r2,-1
802134dc:	9440f136 	bltu	r18,r17,802138a4 <__udivdi3+0x4e8>
802134e0:	9500f02e 	bgeu	r18,r20,802138a4 <__udivdi3+0x4e8>
802134e4:	10bfff84 	addi	r2,r2,-2
802134e8:	b00c943a 	slli	r6,r22,16
802134ec:	0007883a 	mov	r3,zero
802134f0:	3084b03a 	or	r2,r6,r2
802134f4:	00005906 	br	8021365c <__udivdi3+0x2a0>
802134f8:	29c05636 	bltu	r5,r7,80213654 <__udivdi3+0x298>
802134fc:	00bfffd4 	movui	r2,65535
80213500:	11c0622e 	bgeu	r2,r7,8021368c <__udivdi3+0x2d0>
80213504:	00804034 	movhi	r2,256
80213508:	10bfffc4 	addi	r2,r2,-1
8021350c:	11c0ee36 	bltu	r2,r7,802138c8 <__udivdi3+0x50c>
80213510:	00800404 	movi	r2,16
80213514:	3886d83a 	srl	r3,r7,r2
80213518:	012008b4 	movhi	r4,32802
8021351c:	21324c44 	addi	r4,r4,-14031
80213520:	20c7883a 	add	r3,r4,r3
80213524:	18c00003 	ldbu	r3,0(r3)
80213528:	05400804 	movi	r21,32
8021352c:	1885883a 	add	r2,r3,r2
80213530:	a8abc83a 	sub	r21,r21,r2
80213534:	a800621e 	bne	r21,zero,802136c0 <__udivdi3+0x304>
80213538:	3c00e936 	bltu	r7,r16,802138e0 <__udivdi3+0x524>
8021353c:	9985403a 	cmpgeu	r2,r19,r6
80213540:	0007883a 	mov	r3,zero
80213544:	00004506 	br	8021365c <__udivdi3+0x2a0>
80213548:	3000041e 	bne	r6,zero,8021355c <__udivdi3+0x1a0>
8021354c:	000b883a 	mov	r5,zero
80213550:	01000044 	movi	r4,1
80213554:	0213f640 	call	80213f64 <__udivsi3>
80213558:	1023883a 	mov	r17,r2
8021355c:	00bfffd4 	movui	r2,65535
80213560:	14404e2e 	bgeu	r2,r17,8021369c <__udivdi3+0x2e0>
80213564:	00804034 	movhi	r2,256
80213568:	10bfffc4 	addi	r2,r2,-1
8021356c:	1440d836 	bltu	r2,r17,802138d0 <__udivdi3+0x514>
80213570:	00800404 	movi	r2,16
80213574:	8886d83a 	srl	r3,r17,r2
80213578:	012008b4 	movhi	r4,32802
8021357c:	21324c44 	addi	r4,r4,-14031
80213580:	20c7883a 	add	r3,r4,r3
80213584:	18c00003 	ldbu	r3,0(r3)
80213588:	1885883a 	add	r2,r3,r2
8021358c:	00c00804 	movi	r3,32
80213590:	1887c83a 	sub	r3,r3,r2
80213594:	18008f1e 	bne	r3,zero,802137d4 <__udivdi3+0x418>
80213598:	882ad43a 	srli	r21,r17,16
8021359c:	8461c83a 	sub	r16,r16,r17
802135a0:	8d3fffcc 	andi	r20,r17,65535
802135a4:	00c00044 	movi	r3,1
802135a8:	8009883a 	mov	r4,r16
802135ac:	a80b883a 	mov	r5,r21
802135b0:	d8c00015 	stw	r3,0(sp)
802135b4:	0213fc80 	call	80213fc8 <__umodsi3>
802135b8:	8009883a 	mov	r4,r16
802135bc:	a80b883a 	mov	r5,r21
802135c0:	1027883a 	mov	r19,r2
802135c4:	0213f640 	call	80213f64 <__udivsi3>
802135c8:	9826943a 	slli	r19,r19,16
802135cc:	9008d43a 	srli	r4,r18,16
802135d0:	1521383a 	mul	r16,r2,r20
802135d4:	102d883a 	mov	r22,r2
802135d8:	24c8b03a 	or	r4,r4,r19
802135dc:	d8c00017 	ldw	r3,0(sp)
802135e0:	2400052e 	bgeu	r4,r16,802135f8 <__udivdi3+0x23c>
802135e4:	2449883a 	add	r4,r4,r17
802135e8:	b0bfffc4 	addi	r2,r22,-1
802135ec:	24400136 	bltu	r4,r17,802135f4 <__udivdi3+0x238>
802135f0:	2400ca36 	bltu	r4,r16,8021391c <__udivdi3+0x560>
802135f4:	102d883a 	mov	r22,r2
802135f8:	2421c83a 	sub	r16,r4,r16
802135fc:	a80b883a 	mov	r5,r21
80213600:	8009883a 	mov	r4,r16
80213604:	d8c00015 	stw	r3,0(sp)
80213608:	0213fc80 	call	80213fc8 <__umodsi3>
8021360c:	1027883a 	mov	r19,r2
80213610:	a80b883a 	mov	r5,r21
80213614:	8009883a 	mov	r4,r16
80213618:	0213f640 	call	80213f64 <__udivsi3>
8021361c:	9826943a 	slli	r19,r19,16
80213620:	1529383a 	mul	r20,r2,r20
80213624:	94bfffcc 	andi	r18,r18,65535
80213628:	94e4b03a 	or	r18,r18,r19
8021362c:	d8c00017 	ldw	r3,0(sp)
80213630:	9500052e 	bgeu	r18,r20,80213648 <__udivdi3+0x28c>
80213634:	8ca5883a 	add	r18,r17,r18
80213638:	113fffc4 	addi	r4,r2,-1
8021363c:	94409736 	bltu	r18,r17,8021389c <__udivdi3+0x4e0>
80213640:	9500962e 	bgeu	r18,r20,8021389c <__udivdi3+0x4e0>
80213644:	10bfff84 	addi	r2,r2,-2
80213648:	b00c943a 	slli	r6,r22,16
8021364c:	3084b03a 	or	r2,r6,r2
80213650:	00000206 	br	8021365c <__udivdi3+0x2a0>
80213654:	0007883a 	mov	r3,zero
80213658:	0005883a 	mov	r2,zero
8021365c:	dfc00a17 	ldw	ra,40(sp)
80213660:	df000917 	ldw	fp,36(sp)
80213664:	ddc00817 	ldw	r23,32(sp)
80213668:	dd800717 	ldw	r22,28(sp)
8021366c:	dd400617 	ldw	r21,24(sp)
80213670:	dd000517 	ldw	r20,20(sp)
80213674:	dcc00417 	ldw	r19,16(sp)
80213678:	dc800317 	ldw	r18,12(sp)
8021367c:	dc400217 	ldw	r17,8(sp)
80213680:	dc000117 	ldw	r16,4(sp)
80213684:	dec00b04 	addi	sp,sp,44
80213688:	f800283a 	ret
8021368c:	00803fc4 	movi	r2,255
80213690:	11c5803a 	cmpltu	r2,r2,r7
80213694:	100490fa 	slli	r2,r2,3
80213698:	003f9e06 	br	80213514 <__reset+0xfa1f3514>
8021369c:	00803fc4 	movi	r2,255
802136a0:	1445803a 	cmpltu	r2,r2,r17
802136a4:	100490fa 	slli	r2,r2,3
802136a8:	003fb206 	br	80213574 <__reset+0xfa1f3574>
802136ac:	00804034 	movhi	r2,256
802136b0:	10bfffc4 	addi	r2,r2,-1
802136b4:	11808836 	bltu	r2,r6,802138d8 <__udivdi3+0x51c>
802136b8:	00800404 	movi	r2,16
802136bc:	003f5606 	br	80213418 <__reset+0xfa1f3418>
802136c0:	30aed83a 	srl	r23,r6,r2
802136c4:	3d4e983a 	sll	r7,r7,r21
802136c8:	80acd83a 	srl	r22,r16,r2
802136cc:	9884d83a 	srl	r2,r19,r2
802136d0:	3deeb03a 	or	r23,r7,r23
802136d4:	b824d43a 	srli	r18,r23,16
802136d8:	8560983a 	sll	r16,r16,r21
802136dc:	b009883a 	mov	r4,r22
802136e0:	900b883a 	mov	r5,r18
802136e4:	3568983a 	sll	r20,r6,r21
802136e8:	1420b03a 	or	r16,r2,r16
802136ec:	0213fc80 	call	80213fc8 <__umodsi3>
802136f0:	b009883a 	mov	r4,r22
802136f4:	900b883a 	mov	r5,r18
802136f8:	1023883a 	mov	r17,r2
802136fc:	0213f640 	call	80213f64 <__udivsi3>
80213700:	8808943a 	slli	r4,r17,16
80213704:	bf3fffcc 	andi	fp,r23,65535
80213708:	8006d43a 	srli	r3,r16,16
8021370c:	e0a3383a 	mul	r17,fp,r2
80213710:	100d883a 	mov	r6,r2
80213714:	1906b03a 	or	r3,r3,r4
80213718:	1c40042e 	bgeu	r3,r17,8021372c <__udivdi3+0x370>
8021371c:	1dc7883a 	add	r3,r3,r23
80213720:	10bfffc4 	addi	r2,r2,-1
80213724:	1dc0752e 	bgeu	r3,r23,802138fc <__udivdi3+0x540>
80213728:	100d883a 	mov	r6,r2
8021372c:	1c63c83a 	sub	r17,r3,r17
80213730:	900b883a 	mov	r5,r18
80213734:	8809883a 	mov	r4,r17
80213738:	d9800015 	stw	r6,0(sp)
8021373c:	0213fc80 	call	80213fc8 <__umodsi3>
80213740:	102d883a 	mov	r22,r2
80213744:	8809883a 	mov	r4,r17
80213748:	900b883a 	mov	r5,r18
8021374c:	0213f640 	call	80213f64 <__udivsi3>
80213750:	b02c943a 	slli	r22,r22,16
80213754:	e089383a 	mul	r4,fp,r2
80213758:	843fffcc 	andi	r16,r16,65535
8021375c:	85a0b03a 	or	r16,r16,r22
80213760:	d9800017 	ldw	r6,0(sp)
80213764:	8100042e 	bgeu	r16,r4,80213778 <__udivdi3+0x3bc>
80213768:	85e1883a 	add	r16,r16,r23
8021376c:	10ffffc4 	addi	r3,r2,-1
80213770:	85c05e2e 	bgeu	r16,r23,802138ec <__udivdi3+0x530>
80213774:	1805883a 	mov	r2,r3
80213778:	300c943a 	slli	r6,r6,16
8021377c:	a17fffcc 	andi	r5,r20,65535
80213780:	a028d43a 	srli	r20,r20,16
80213784:	3084b03a 	or	r2,r6,r2
80213788:	10ffffcc 	andi	r3,r2,65535
8021378c:	100cd43a 	srli	r6,r2,16
80213790:	194f383a 	mul	r7,r3,r5
80213794:	1d07383a 	mul	r3,r3,r20
80213798:	314b383a 	mul	r5,r6,r5
8021379c:	3810d43a 	srli	r8,r7,16
802137a0:	8121c83a 	sub	r16,r16,r4
802137a4:	1947883a 	add	r3,r3,r5
802137a8:	40c7883a 	add	r3,r8,r3
802137ac:	350d383a 	mul	r6,r6,r20
802137b0:	1940022e 	bgeu	r3,r5,802137bc <__udivdi3+0x400>
802137b4:	01000074 	movhi	r4,1
802137b8:	310d883a 	add	r6,r6,r4
802137bc:	1828d43a 	srli	r20,r3,16
802137c0:	a18d883a 	add	r6,r20,r6
802137c4:	81803e36 	bltu	r16,r6,802138c0 <__udivdi3+0x504>
802137c8:	81803826 	beq	r16,r6,802138ac <__udivdi3+0x4f0>
802137cc:	0007883a 	mov	r3,zero
802137d0:	003fa206 	br	8021365c <__reset+0xfa1f365c>
802137d4:	88e2983a 	sll	r17,r17,r3
802137d8:	80a8d83a 	srl	r20,r16,r2
802137dc:	80e0983a 	sll	r16,r16,r3
802137e0:	882ad43a 	srli	r21,r17,16
802137e4:	9884d83a 	srl	r2,r19,r2
802137e8:	a009883a 	mov	r4,r20
802137ec:	a80b883a 	mov	r5,r21
802137f0:	142eb03a 	or	r23,r2,r16
802137f4:	98e4983a 	sll	r18,r19,r3
802137f8:	0213fc80 	call	80213fc8 <__umodsi3>
802137fc:	a009883a 	mov	r4,r20
80213800:	a80b883a 	mov	r5,r21
80213804:	1021883a 	mov	r16,r2
80213808:	0213f640 	call	80213f64 <__udivsi3>
8021380c:	1039883a 	mov	fp,r2
80213810:	8d3fffcc 	andi	r20,r17,65535
80213814:	8020943a 	slli	r16,r16,16
80213818:	b804d43a 	srli	r2,r23,16
8021381c:	a72d383a 	mul	r22,r20,fp
80213820:	1404b03a 	or	r2,r2,r16
80213824:	1580062e 	bgeu	r2,r22,80213840 <__udivdi3+0x484>
80213828:	1445883a 	add	r2,r2,r17
8021382c:	e0ffffc4 	addi	r3,fp,-1
80213830:	14403836 	bltu	r2,r17,80213914 <__udivdi3+0x558>
80213834:	1580372e 	bgeu	r2,r22,80213914 <__udivdi3+0x558>
80213838:	e73fff84 	addi	fp,fp,-2
8021383c:	1445883a 	add	r2,r2,r17
80213840:	15adc83a 	sub	r22,r2,r22
80213844:	a80b883a 	mov	r5,r21
80213848:	b009883a 	mov	r4,r22
8021384c:	0213fc80 	call	80213fc8 <__umodsi3>
80213850:	1027883a 	mov	r19,r2
80213854:	b009883a 	mov	r4,r22
80213858:	a80b883a 	mov	r5,r21
8021385c:	0213f640 	call	80213f64 <__udivsi3>
80213860:	9826943a 	slli	r19,r19,16
80213864:	a0a1383a 	mul	r16,r20,r2
80213868:	b93fffcc 	andi	r4,r23,65535
8021386c:	24c8b03a 	or	r4,r4,r19
80213870:	2400062e 	bgeu	r4,r16,8021388c <__udivdi3+0x4d0>
80213874:	2449883a 	add	r4,r4,r17
80213878:	10ffffc4 	addi	r3,r2,-1
8021387c:	24402336 	bltu	r4,r17,8021390c <__udivdi3+0x550>
80213880:	2400222e 	bgeu	r4,r16,8021390c <__udivdi3+0x550>
80213884:	10bfff84 	addi	r2,r2,-2
80213888:	2449883a 	add	r4,r4,r17
8021388c:	e038943a 	slli	fp,fp,16
80213890:	2421c83a 	sub	r16,r4,r16
80213894:	e086b03a 	or	r3,fp,r2
80213898:	003f4306 	br	802135a8 <__reset+0xfa1f35a8>
8021389c:	2005883a 	mov	r2,r4
802138a0:	003f6906 	br	80213648 <__reset+0xfa1f3648>
802138a4:	1805883a 	mov	r2,r3
802138a8:	003f0f06 	br	802134e8 <__reset+0xfa1f34e8>
802138ac:	1806943a 	slli	r3,r3,16
802138b0:	9d66983a 	sll	r19,r19,r21
802138b4:	39ffffcc 	andi	r7,r7,65535
802138b8:	19c7883a 	add	r3,r3,r7
802138bc:	98ffc32e 	bgeu	r19,r3,802137cc <__reset+0xfa1f37cc>
802138c0:	10bfffc4 	addi	r2,r2,-1
802138c4:	003fc106 	br	802137cc <__reset+0xfa1f37cc>
802138c8:	00800604 	movi	r2,24
802138cc:	003f1106 	br	80213514 <__reset+0xfa1f3514>
802138d0:	00800604 	movi	r2,24
802138d4:	003f2706 	br	80213574 <__reset+0xfa1f3574>
802138d8:	00800604 	movi	r2,24
802138dc:	003ece06 	br	80213418 <__reset+0xfa1f3418>
802138e0:	0007883a 	mov	r3,zero
802138e4:	00800044 	movi	r2,1
802138e8:	003f5c06 	br	8021365c <__reset+0xfa1f365c>
802138ec:	813fa12e 	bgeu	r16,r4,80213774 <__reset+0xfa1f3774>
802138f0:	10bfff84 	addi	r2,r2,-2
802138f4:	85e1883a 	add	r16,r16,r23
802138f8:	003f9f06 	br	80213778 <__reset+0xfa1f3778>
802138fc:	1c7f8a2e 	bgeu	r3,r17,80213728 <__reset+0xfa1f3728>
80213900:	31bfff84 	addi	r6,r6,-2
80213904:	1dc7883a 	add	r3,r3,r23
80213908:	003f8806 	br	8021372c <__reset+0xfa1f372c>
8021390c:	1805883a 	mov	r2,r3
80213910:	003fde06 	br	8021388c <__reset+0xfa1f388c>
80213914:	1839883a 	mov	fp,r3
80213918:	003fc906 	br	80213840 <__reset+0xfa1f3840>
8021391c:	b5bfff84 	addi	r22,r22,-2
80213920:	2449883a 	add	r4,r4,r17
80213924:	003f3406 	br	802135f8 <__reset+0xfa1f35f8>
80213928:	b5bfff84 	addi	r22,r22,-2
8021392c:	1445883a 	add	r2,r2,r17
80213930:	003edb06 	br	802134a0 <__reset+0xfa1f34a0>

80213934 <__umoddi3>:
80213934:	defff404 	addi	sp,sp,-48
80213938:	df000a15 	stw	fp,40(sp)
8021393c:	dc400315 	stw	r17,12(sp)
80213940:	dc000215 	stw	r16,8(sp)
80213944:	dfc00b15 	stw	ra,44(sp)
80213948:	ddc00915 	stw	r23,36(sp)
8021394c:	dd800815 	stw	r22,32(sp)
80213950:	dd400715 	stw	r21,28(sp)
80213954:	dd000615 	stw	r20,24(sp)
80213958:	dcc00515 	stw	r19,20(sp)
8021395c:	dc800415 	stw	r18,16(sp)
80213960:	2021883a 	mov	r16,r4
80213964:	2823883a 	mov	r17,r5
80213968:	2839883a 	mov	fp,r5
8021396c:	38003c1e 	bne	r7,zero,80213a60 <__umoddi3+0x12c>
80213970:	3027883a 	mov	r19,r6
80213974:	2029883a 	mov	r20,r4
80213978:	2980512e 	bgeu	r5,r6,80213ac0 <__umoddi3+0x18c>
8021397c:	00bfffd4 	movui	r2,65535
80213980:	11809a36 	bltu	r2,r6,80213bec <__umoddi3+0x2b8>
80213984:	01003fc4 	movi	r4,255
80213988:	2189803a 	cmpltu	r4,r4,r6
8021398c:	200890fa 	slli	r4,r4,3
80213990:	3104d83a 	srl	r2,r6,r4
80213994:	00e008b4 	movhi	r3,32802
80213998:	18f24c44 	addi	r3,r3,-14031
8021399c:	1885883a 	add	r2,r3,r2
802139a0:	10c00003 	ldbu	r3,0(r2)
802139a4:	00800804 	movi	r2,32
802139a8:	1909883a 	add	r4,r3,r4
802139ac:	1125c83a 	sub	r18,r2,r4
802139b0:	90000526 	beq	r18,zero,802139c8 <__umoddi3+0x94>
802139b4:	8ca2983a 	sll	r17,r17,r18
802139b8:	8108d83a 	srl	r4,r16,r4
802139bc:	34a6983a 	sll	r19,r6,r18
802139c0:	84a8983a 	sll	r20,r16,r18
802139c4:	2478b03a 	or	fp,r4,r17
802139c8:	982ed43a 	srli	r23,r19,16
802139cc:	e009883a 	mov	r4,fp
802139d0:	9dbfffcc 	andi	r22,r19,65535
802139d4:	b80b883a 	mov	r5,r23
802139d8:	0213fc80 	call	80213fc8 <__umodsi3>
802139dc:	e009883a 	mov	r4,fp
802139e0:	b80b883a 	mov	r5,r23
802139e4:	102b883a 	mov	r21,r2
802139e8:	0213f640 	call	80213f64 <__udivsi3>
802139ec:	a806943a 	slli	r3,r21,16
802139f0:	a008d43a 	srli	r4,r20,16
802139f4:	b085383a 	mul	r2,r22,r2
802139f8:	20c8b03a 	or	r4,r4,r3
802139fc:	2080032e 	bgeu	r4,r2,80213a0c <__umoddi3+0xd8>
80213a00:	24c9883a 	add	r4,r4,r19
80213a04:	24c00136 	bltu	r4,r19,80213a0c <__umoddi3+0xd8>
80213a08:	20811036 	bltu	r4,r2,80213e4c <__umoddi3+0x518>
80213a0c:	20abc83a 	sub	r21,r4,r2
80213a10:	b80b883a 	mov	r5,r23
80213a14:	a809883a 	mov	r4,r21
80213a18:	0213fc80 	call	80213fc8 <__umodsi3>
80213a1c:	1023883a 	mov	r17,r2
80213a20:	b80b883a 	mov	r5,r23
80213a24:	a809883a 	mov	r4,r21
80213a28:	0213f640 	call	80213f64 <__udivsi3>
80213a2c:	8822943a 	slli	r17,r17,16
80213a30:	b085383a 	mul	r2,r22,r2
80213a34:	a0ffffcc 	andi	r3,r20,65535
80213a38:	1c46b03a 	or	r3,r3,r17
80213a3c:	1880042e 	bgeu	r3,r2,80213a50 <__umoddi3+0x11c>
80213a40:	1cc7883a 	add	r3,r3,r19
80213a44:	1cc00236 	bltu	r3,r19,80213a50 <__umoddi3+0x11c>
80213a48:	1880012e 	bgeu	r3,r2,80213a50 <__umoddi3+0x11c>
80213a4c:	1cc7883a 	add	r3,r3,r19
80213a50:	1885c83a 	sub	r2,r3,r2
80213a54:	1484d83a 	srl	r2,r2,r18
80213a58:	0007883a 	mov	r3,zero
80213a5c:	00004f06 	br	80213b9c <__umoddi3+0x268>
80213a60:	29c04c36 	bltu	r5,r7,80213b94 <__umoddi3+0x260>
80213a64:	00bfffd4 	movui	r2,65535
80213a68:	11c0582e 	bgeu	r2,r7,80213bcc <__umoddi3+0x298>
80213a6c:	00804034 	movhi	r2,256
80213a70:	10bfffc4 	addi	r2,r2,-1
80213a74:	11c0e736 	bltu	r2,r7,80213e14 <__umoddi3+0x4e0>
80213a78:	01000404 	movi	r4,16
80213a7c:	3904d83a 	srl	r2,r7,r4
80213a80:	00e008b4 	movhi	r3,32802
80213a84:	18f24c44 	addi	r3,r3,-14031
80213a88:	1885883a 	add	r2,r3,r2
80213a8c:	14c00003 	ldbu	r19,0(r2)
80213a90:	00c00804 	movi	r3,32
80213a94:	9927883a 	add	r19,r19,r4
80213a98:	1ce9c83a 	sub	r20,r3,r19
80213a9c:	a000581e 	bne	r20,zero,80213c00 <__umoddi3+0x2cc>
80213aa0:	3c400136 	bltu	r7,r17,80213aa8 <__umoddi3+0x174>
80213aa4:	8180eb36 	bltu	r16,r6,80213e54 <__umoddi3+0x520>
80213aa8:	8185c83a 	sub	r2,r16,r6
80213aac:	89e3c83a 	sub	r17,r17,r7
80213ab0:	8089803a 	cmpltu	r4,r16,r2
80213ab4:	8939c83a 	sub	fp,r17,r4
80213ab8:	e007883a 	mov	r3,fp
80213abc:	00003706 	br	80213b9c <__umoddi3+0x268>
80213ac0:	3000041e 	bne	r6,zero,80213ad4 <__umoddi3+0x1a0>
80213ac4:	000b883a 	mov	r5,zero
80213ac8:	01000044 	movi	r4,1
80213acc:	0213f640 	call	80213f64 <__udivsi3>
80213ad0:	1027883a 	mov	r19,r2
80213ad4:	00bfffd4 	movui	r2,65535
80213ad8:	14c0402e 	bgeu	r2,r19,80213bdc <__umoddi3+0x2a8>
80213adc:	00804034 	movhi	r2,256
80213ae0:	10bfffc4 	addi	r2,r2,-1
80213ae4:	14c0cd36 	bltu	r2,r19,80213e1c <__umoddi3+0x4e8>
80213ae8:	00800404 	movi	r2,16
80213aec:	9886d83a 	srl	r3,r19,r2
80213af0:	012008b4 	movhi	r4,32802
80213af4:	21324c44 	addi	r4,r4,-14031
80213af8:	20c7883a 	add	r3,r4,r3
80213afc:	18c00003 	ldbu	r3,0(r3)
80213b00:	1887883a 	add	r3,r3,r2
80213b04:	00800804 	movi	r2,32
80213b08:	10e5c83a 	sub	r18,r2,r3
80213b0c:	9000901e 	bne	r18,zero,80213d50 <__umoddi3+0x41c>
80213b10:	982cd43a 	srli	r22,r19,16
80213b14:	8ce3c83a 	sub	r17,r17,r19
80213b18:	9d7fffcc 	andi	r21,r19,65535
80213b1c:	b00b883a 	mov	r5,r22
80213b20:	8809883a 	mov	r4,r17
80213b24:	0213fc80 	call	80213fc8 <__umodsi3>
80213b28:	8809883a 	mov	r4,r17
80213b2c:	b00b883a 	mov	r5,r22
80213b30:	1021883a 	mov	r16,r2
80213b34:	0213f640 	call	80213f64 <__udivsi3>
80213b38:	8006943a 	slli	r3,r16,16
80213b3c:	a008d43a 	srli	r4,r20,16
80213b40:	1545383a 	mul	r2,r2,r21
80213b44:	20c8b03a 	or	r4,r4,r3
80213b48:	2080042e 	bgeu	r4,r2,80213b5c <__umoddi3+0x228>
80213b4c:	24c9883a 	add	r4,r4,r19
80213b50:	24c00236 	bltu	r4,r19,80213b5c <__umoddi3+0x228>
80213b54:	2080012e 	bgeu	r4,r2,80213b5c <__umoddi3+0x228>
80213b58:	24c9883a 	add	r4,r4,r19
80213b5c:	20a1c83a 	sub	r16,r4,r2
80213b60:	b00b883a 	mov	r5,r22
80213b64:	8009883a 	mov	r4,r16
80213b68:	0213fc80 	call	80213fc8 <__umodsi3>
80213b6c:	1023883a 	mov	r17,r2
80213b70:	b00b883a 	mov	r5,r22
80213b74:	8009883a 	mov	r4,r16
80213b78:	0213f640 	call	80213f64 <__udivsi3>
80213b7c:	8822943a 	slli	r17,r17,16
80213b80:	1545383a 	mul	r2,r2,r21
80213b84:	a53fffcc 	andi	r20,r20,65535
80213b88:	a446b03a 	or	r3,r20,r17
80213b8c:	18bfb02e 	bgeu	r3,r2,80213a50 <__reset+0xfa1f3a50>
80213b90:	003fab06 	br	80213a40 <__reset+0xfa1f3a40>
80213b94:	2005883a 	mov	r2,r4
80213b98:	2807883a 	mov	r3,r5
80213b9c:	dfc00b17 	ldw	ra,44(sp)
80213ba0:	df000a17 	ldw	fp,40(sp)
80213ba4:	ddc00917 	ldw	r23,36(sp)
80213ba8:	dd800817 	ldw	r22,32(sp)
80213bac:	dd400717 	ldw	r21,28(sp)
80213bb0:	dd000617 	ldw	r20,24(sp)
80213bb4:	dcc00517 	ldw	r19,20(sp)
80213bb8:	dc800417 	ldw	r18,16(sp)
80213bbc:	dc400317 	ldw	r17,12(sp)
80213bc0:	dc000217 	ldw	r16,8(sp)
80213bc4:	dec00c04 	addi	sp,sp,48
80213bc8:	f800283a 	ret
80213bcc:	04c03fc4 	movi	r19,255
80213bd0:	99c9803a 	cmpltu	r4,r19,r7
80213bd4:	200890fa 	slli	r4,r4,3
80213bd8:	003fa806 	br	80213a7c <__reset+0xfa1f3a7c>
80213bdc:	00803fc4 	movi	r2,255
80213be0:	14c5803a 	cmpltu	r2,r2,r19
80213be4:	100490fa 	slli	r2,r2,3
80213be8:	003fc006 	br	80213aec <__reset+0xfa1f3aec>
80213bec:	00804034 	movhi	r2,256
80213bf0:	10bfffc4 	addi	r2,r2,-1
80213bf4:	11808b36 	bltu	r2,r6,80213e24 <__umoddi3+0x4f0>
80213bf8:	01000404 	movi	r4,16
80213bfc:	003f6406 	br	80213990 <__reset+0xfa1f3990>
80213c00:	34c4d83a 	srl	r2,r6,r19
80213c04:	3d0e983a 	sll	r7,r7,r20
80213c08:	8cf8d83a 	srl	fp,r17,r19
80213c0c:	8d10983a 	sll	r8,r17,r20
80213c10:	38aab03a 	or	r21,r7,r2
80213c14:	a82cd43a 	srli	r22,r21,16
80213c18:	84e2d83a 	srl	r17,r16,r19
80213c1c:	e009883a 	mov	r4,fp
80213c20:	b00b883a 	mov	r5,r22
80213c24:	8a22b03a 	or	r17,r17,r8
80213c28:	3524983a 	sll	r18,r6,r20
80213c2c:	0213fc80 	call	80213fc8 <__umodsi3>
80213c30:	e009883a 	mov	r4,fp
80213c34:	b00b883a 	mov	r5,r22
80213c38:	102f883a 	mov	r23,r2
80213c3c:	0213f640 	call	80213f64 <__udivsi3>
80213c40:	100d883a 	mov	r6,r2
80213c44:	b808943a 	slli	r4,r23,16
80213c48:	aa3fffcc 	andi	r8,r21,65535
80213c4c:	8804d43a 	srli	r2,r17,16
80213c50:	41af383a 	mul	r23,r8,r6
80213c54:	8520983a 	sll	r16,r16,r20
80213c58:	1104b03a 	or	r2,r2,r4
80213c5c:	15c0042e 	bgeu	r2,r23,80213c70 <__umoddi3+0x33c>
80213c60:	1545883a 	add	r2,r2,r21
80213c64:	30ffffc4 	addi	r3,r6,-1
80213c68:	1540742e 	bgeu	r2,r21,80213e3c <__umoddi3+0x508>
80213c6c:	180d883a 	mov	r6,r3
80213c70:	15efc83a 	sub	r23,r2,r23
80213c74:	b00b883a 	mov	r5,r22
80213c78:	b809883a 	mov	r4,r23
80213c7c:	d9800115 	stw	r6,4(sp)
80213c80:	da000015 	stw	r8,0(sp)
80213c84:	0213fc80 	call	80213fc8 <__umodsi3>
80213c88:	b00b883a 	mov	r5,r22
80213c8c:	b809883a 	mov	r4,r23
80213c90:	1039883a 	mov	fp,r2
80213c94:	0213f640 	call	80213f64 <__udivsi3>
80213c98:	da000017 	ldw	r8,0(sp)
80213c9c:	e038943a 	slli	fp,fp,16
80213ca0:	100b883a 	mov	r5,r2
80213ca4:	4089383a 	mul	r4,r8,r2
80213ca8:	8a3fffcc 	andi	r8,r17,65535
80213cac:	4710b03a 	or	r8,r8,fp
80213cb0:	d9800117 	ldw	r6,4(sp)
80213cb4:	4100042e 	bgeu	r8,r4,80213cc8 <__umoddi3+0x394>
80213cb8:	4551883a 	add	r8,r8,r21
80213cbc:	10bfffc4 	addi	r2,r2,-1
80213cc0:	45405a2e 	bgeu	r8,r21,80213e2c <__umoddi3+0x4f8>
80213cc4:	100b883a 	mov	r5,r2
80213cc8:	300c943a 	slli	r6,r6,16
80213ccc:	91ffffcc 	andi	r7,r18,65535
80213cd0:	9004d43a 	srli	r2,r18,16
80213cd4:	314cb03a 	or	r6,r6,r5
80213cd8:	317fffcc 	andi	r5,r6,65535
80213cdc:	300cd43a 	srli	r6,r6,16
80213ce0:	29d3383a 	mul	r9,r5,r7
80213ce4:	288b383a 	mul	r5,r5,r2
80213ce8:	31cf383a 	mul	r7,r6,r7
80213cec:	4806d43a 	srli	r3,r9,16
80213cf0:	4111c83a 	sub	r8,r8,r4
80213cf4:	29cb883a 	add	r5,r5,r7
80213cf8:	194b883a 	add	r5,r3,r5
80213cfc:	3085383a 	mul	r2,r6,r2
80213d00:	29c0022e 	bgeu	r5,r7,80213d0c <__umoddi3+0x3d8>
80213d04:	00c00074 	movhi	r3,1
80213d08:	10c5883a 	add	r2,r2,r3
80213d0c:	2808d43a 	srli	r4,r5,16
80213d10:	280a943a 	slli	r5,r5,16
80213d14:	4a7fffcc 	andi	r9,r9,65535
80213d18:	2085883a 	add	r2,r4,r2
80213d1c:	2a4b883a 	add	r5,r5,r9
80213d20:	40803636 	bltu	r8,r2,80213dfc <__umoddi3+0x4c8>
80213d24:	40804d26 	beq	r8,r2,80213e5c <__umoddi3+0x528>
80213d28:	4089c83a 	sub	r4,r8,r2
80213d2c:	280f883a 	mov	r7,r5
80213d30:	81cfc83a 	sub	r7,r16,r7
80213d34:	81c7803a 	cmpltu	r3,r16,r7
80213d38:	20c7c83a 	sub	r3,r4,r3
80213d3c:	1cc4983a 	sll	r2,r3,r19
80213d40:	3d0ed83a 	srl	r7,r7,r20
80213d44:	1d06d83a 	srl	r3,r3,r20
80213d48:	11c4b03a 	or	r2,r2,r7
80213d4c:	003f9306 	br	80213b9c <__reset+0xfa1f3b9c>
80213d50:	9ca6983a 	sll	r19,r19,r18
80213d54:	88e8d83a 	srl	r20,r17,r3
80213d58:	80c4d83a 	srl	r2,r16,r3
80213d5c:	982cd43a 	srli	r22,r19,16
80213d60:	8ca2983a 	sll	r17,r17,r18
80213d64:	a009883a 	mov	r4,r20
80213d68:	b00b883a 	mov	r5,r22
80213d6c:	1478b03a 	or	fp,r2,r17
80213d70:	0213fc80 	call	80213fc8 <__umodsi3>
80213d74:	a009883a 	mov	r4,r20
80213d78:	b00b883a 	mov	r5,r22
80213d7c:	1023883a 	mov	r17,r2
80213d80:	0213f640 	call	80213f64 <__udivsi3>
80213d84:	9d7fffcc 	andi	r21,r19,65535
80213d88:	880a943a 	slli	r5,r17,16
80213d8c:	e008d43a 	srli	r4,fp,16
80213d90:	a885383a 	mul	r2,r21,r2
80213d94:	84a8983a 	sll	r20,r16,r18
80213d98:	2148b03a 	or	r4,r4,r5
80213d9c:	2080042e 	bgeu	r4,r2,80213db0 <__umoddi3+0x47c>
80213da0:	24c9883a 	add	r4,r4,r19
80213da4:	24c00236 	bltu	r4,r19,80213db0 <__umoddi3+0x47c>
80213da8:	2080012e 	bgeu	r4,r2,80213db0 <__umoddi3+0x47c>
80213dac:	24c9883a 	add	r4,r4,r19
80213db0:	20a3c83a 	sub	r17,r4,r2
80213db4:	b00b883a 	mov	r5,r22
80213db8:	8809883a 	mov	r4,r17
80213dbc:	0213fc80 	call	80213fc8 <__umodsi3>
80213dc0:	102f883a 	mov	r23,r2
80213dc4:	8809883a 	mov	r4,r17
80213dc8:	b00b883a 	mov	r5,r22
80213dcc:	0213f640 	call	80213f64 <__udivsi3>
80213dd0:	b82e943a 	slli	r23,r23,16
80213dd4:	a885383a 	mul	r2,r21,r2
80213dd8:	e13fffcc 	andi	r4,fp,65535
80213ddc:	25c8b03a 	or	r4,r4,r23
80213de0:	2080042e 	bgeu	r4,r2,80213df4 <__umoddi3+0x4c0>
80213de4:	24c9883a 	add	r4,r4,r19
80213de8:	24c00236 	bltu	r4,r19,80213df4 <__umoddi3+0x4c0>
80213dec:	2080012e 	bgeu	r4,r2,80213df4 <__umoddi3+0x4c0>
80213df0:	24c9883a 	add	r4,r4,r19
80213df4:	20a3c83a 	sub	r17,r4,r2
80213df8:	003f4806 	br	80213b1c <__reset+0xfa1f3b1c>
80213dfc:	2c8fc83a 	sub	r7,r5,r18
80213e00:	1545c83a 	sub	r2,r2,r21
80213e04:	29cb803a 	cmpltu	r5,r5,r7
80213e08:	1145c83a 	sub	r2,r2,r5
80213e0c:	4089c83a 	sub	r4,r8,r2
80213e10:	003fc706 	br	80213d30 <__reset+0xfa1f3d30>
80213e14:	01000604 	movi	r4,24
80213e18:	003f1806 	br	80213a7c <__reset+0xfa1f3a7c>
80213e1c:	00800604 	movi	r2,24
80213e20:	003f3206 	br	80213aec <__reset+0xfa1f3aec>
80213e24:	01000604 	movi	r4,24
80213e28:	003ed906 	br	80213990 <__reset+0xfa1f3990>
80213e2c:	413fa52e 	bgeu	r8,r4,80213cc4 <__reset+0xfa1f3cc4>
80213e30:	297fff84 	addi	r5,r5,-2
80213e34:	4551883a 	add	r8,r8,r21
80213e38:	003fa306 	br	80213cc8 <__reset+0xfa1f3cc8>
80213e3c:	15ff8b2e 	bgeu	r2,r23,80213c6c <__reset+0xfa1f3c6c>
80213e40:	31bfff84 	addi	r6,r6,-2
80213e44:	1545883a 	add	r2,r2,r21
80213e48:	003f8906 	br	80213c70 <__reset+0xfa1f3c70>
80213e4c:	24c9883a 	add	r4,r4,r19
80213e50:	003eee06 	br	80213a0c <__reset+0xfa1f3a0c>
80213e54:	8005883a 	mov	r2,r16
80213e58:	003f1706 	br	80213ab8 <__reset+0xfa1f3ab8>
80213e5c:	817fe736 	bltu	r16,r5,80213dfc <__reset+0xfa1f3dfc>
80213e60:	280f883a 	mov	r7,r5
80213e64:	0009883a 	mov	r4,zero
80213e68:	003fb106 	br	80213d30 <__reset+0xfa1f3d30>

80213e6c <__divsi3>:
80213e6c:	20001b16 	blt	r4,zero,80213edc <__divsi3+0x70>
80213e70:	000f883a 	mov	r7,zero
80213e74:	28001616 	blt	r5,zero,80213ed0 <__divsi3+0x64>
80213e78:	200d883a 	mov	r6,r4
80213e7c:	29001a2e 	bgeu	r5,r4,80213ee8 <__divsi3+0x7c>
80213e80:	00800804 	movi	r2,32
80213e84:	00c00044 	movi	r3,1
80213e88:	00000106 	br	80213e90 <__divsi3+0x24>
80213e8c:	10000d26 	beq	r2,zero,80213ec4 <__divsi3+0x58>
80213e90:	294b883a 	add	r5,r5,r5
80213e94:	10bfffc4 	addi	r2,r2,-1
80213e98:	18c7883a 	add	r3,r3,r3
80213e9c:	293ffb36 	bltu	r5,r4,80213e8c <__reset+0xfa1f3e8c>
80213ea0:	0005883a 	mov	r2,zero
80213ea4:	18000726 	beq	r3,zero,80213ec4 <__divsi3+0x58>
80213ea8:	0005883a 	mov	r2,zero
80213eac:	31400236 	bltu	r6,r5,80213eb8 <__divsi3+0x4c>
80213eb0:	314dc83a 	sub	r6,r6,r5
80213eb4:	10c4b03a 	or	r2,r2,r3
80213eb8:	1806d07a 	srli	r3,r3,1
80213ebc:	280ad07a 	srli	r5,r5,1
80213ec0:	183ffa1e 	bne	r3,zero,80213eac <__reset+0xfa1f3eac>
80213ec4:	38000126 	beq	r7,zero,80213ecc <__divsi3+0x60>
80213ec8:	0085c83a 	sub	r2,zero,r2
80213ecc:	f800283a 	ret
80213ed0:	014bc83a 	sub	r5,zero,r5
80213ed4:	39c0005c 	xori	r7,r7,1
80213ed8:	003fe706 	br	80213e78 <__reset+0xfa1f3e78>
80213edc:	0109c83a 	sub	r4,zero,r4
80213ee0:	01c00044 	movi	r7,1
80213ee4:	003fe306 	br	80213e74 <__reset+0xfa1f3e74>
80213ee8:	00c00044 	movi	r3,1
80213eec:	003fee06 	br	80213ea8 <__reset+0xfa1f3ea8>

80213ef0 <__modsi3>:
80213ef0:	20001716 	blt	r4,zero,80213f50 <__modsi3+0x60>
80213ef4:	000f883a 	mov	r7,zero
80213ef8:	2005883a 	mov	r2,r4
80213efc:	28001216 	blt	r5,zero,80213f48 <__modsi3+0x58>
80213f00:	2900162e 	bgeu	r5,r4,80213f5c <__modsi3+0x6c>
80213f04:	01800804 	movi	r6,32
80213f08:	00c00044 	movi	r3,1
80213f0c:	00000106 	br	80213f14 <__modsi3+0x24>
80213f10:	30000a26 	beq	r6,zero,80213f3c <__modsi3+0x4c>
80213f14:	294b883a 	add	r5,r5,r5
80213f18:	31bfffc4 	addi	r6,r6,-1
80213f1c:	18c7883a 	add	r3,r3,r3
80213f20:	293ffb36 	bltu	r5,r4,80213f10 <__reset+0xfa1f3f10>
80213f24:	18000526 	beq	r3,zero,80213f3c <__modsi3+0x4c>
80213f28:	1806d07a 	srli	r3,r3,1
80213f2c:	11400136 	bltu	r2,r5,80213f34 <__modsi3+0x44>
80213f30:	1145c83a 	sub	r2,r2,r5
80213f34:	280ad07a 	srli	r5,r5,1
80213f38:	183ffb1e 	bne	r3,zero,80213f28 <__reset+0xfa1f3f28>
80213f3c:	38000126 	beq	r7,zero,80213f44 <__modsi3+0x54>
80213f40:	0085c83a 	sub	r2,zero,r2
80213f44:	f800283a 	ret
80213f48:	014bc83a 	sub	r5,zero,r5
80213f4c:	003fec06 	br	80213f00 <__reset+0xfa1f3f00>
80213f50:	0109c83a 	sub	r4,zero,r4
80213f54:	01c00044 	movi	r7,1
80213f58:	003fe706 	br	80213ef8 <__reset+0xfa1f3ef8>
80213f5c:	00c00044 	movi	r3,1
80213f60:	003ff106 	br	80213f28 <__reset+0xfa1f3f28>

80213f64 <__udivsi3>:
80213f64:	200d883a 	mov	r6,r4
80213f68:	2900152e 	bgeu	r5,r4,80213fc0 <__udivsi3+0x5c>
80213f6c:	28001416 	blt	r5,zero,80213fc0 <__udivsi3+0x5c>
80213f70:	00800804 	movi	r2,32
80213f74:	00c00044 	movi	r3,1
80213f78:	00000206 	br	80213f84 <__udivsi3+0x20>
80213f7c:	10000e26 	beq	r2,zero,80213fb8 <__udivsi3+0x54>
80213f80:	28000516 	blt	r5,zero,80213f98 <__udivsi3+0x34>
80213f84:	294b883a 	add	r5,r5,r5
80213f88:	10bfffc4 	addi	r2,r2,-1
80213f8c:	18c7883a 	add	r3,r3,r3
80213f90:	293ffa36 	bltu	r5,r4,80213f7c <__reset+0xfa1f3f7c>
80213f94:	18000826 	beq	r3,zero,80213fb8 <__udivsi3+0x54>
80213f98:	0005883a 	mov	r2,zero
80213f9c:	31400236 	bltu	r6,r5,80213fa8 <__udivsi3+0x44>
80213fa0:	314dc83a 	sub	r6,r6,r5
80213fa4:	10c4b03a 	or	r2,r2,r3
80213fa8:	1806d07a 	srli	r3,r3,1
80213fac:	280ad07a 	srli	r5,r5,1
80213fb0:	183ffa1e 	bne	r3,zero,80213f9c <__reset+0xfa1f3f9c>
80213fb4:	f800283a 	ret
80213fb8:	0005883a 	mov	r2,zero
80213fbc:	f800283a 	ret
80213fc0:	00c00044 	movi	r3,1
80213fc4:	003ff406 	br	80213f98 <__reset+0xfa1f3f98>

80213fc8 <__umodsi3>:
80213fc8:	2005883a 	mov	r2,r4
80213fcc:	2900122e 	bgeu	r5,r4,80214018 <__umodsi3+0x50>
80213fd0:	28001116 	blt	r5,zero,80214018 <__umodsi3+0x50>
80213fd4:	01800804 	movi	r6,32
80213fd8:	00c00044 	movi	r3,1
80213fdc:	00000206 	br	80213fe8 <__umodsi3+0x20>
80213fe0:	30000c26 	beq	r6,zero,80214014 <__umodsi3+0x4c>
80213fe4:	28000516 	blt	r5,zero,80213ffc <__umodsi3+0x34>
80213fe8:	294b883a 	add	r5,r5,r5
80213fec:	31bfffc4 	addi	r6,r6,-1
80213ff0:	18c7883a 	add	r3,r3,r3
80213ff4:	293ffa36 	bltu	r5,r4,80213fe0 <__reset+0xfa1f3fe0>
80213ff8:	18000626 	beq	r3,zero,80214014 <__umodsi3+0x4c>
80213ffc:	1806d07a 	srli	r3,r3,1
80214000:	11400136 	bltu	r2,r5,80214008 <__umodsi3+0x40>
80214004:	1145c83a 	sub	r2,r2,r5
80214008:	280ad07a 	srli	r5,r5,1
8021400c:	183ffb1e 	bne	r3,zero,80213ffc <__reset+0xfa1f3ffc>
80214010:	f800283a 	ret
80214014:	f800283a 	ret
80214018:	00c00044 	movi	r3,1
8021401c:	003ff706 	br	80213ffc <__reset+0xfa1f3ffc>

80214020 <__adddf3>:
80214020:	02c00434 	movhi	r11,16
80214024:	5affffc4 	addi	r11,r11,-1
80214028:	2806d7fa 	srli	r3,r5,31
8021402c:	2ad4703a 	and	r10,r5,r11
80214030:	3ad2703a 	and	r9,r7,r11
80214034:	3804d53a 	srli	r2,r7,20
80214038:	3018d77a 	srli	r12,r6,29
8021403c:	280ad53a 	srli	r5,r5,20
80214040:	501490fa 	slli	r10,r10,3
80214044:	2010d77a 	srli	r8,r4,29
80214048:	481290fa 	slli	r9,r9,3
8021404c:	380ed7fa 	srli	r7,r7,31
80214050:	defffb04 	addi	sp,sp,-20
80214054:	dc800215 	stw	r18,8(sp)
80214058:	dc400115 	stw	r17,4(sp)
8021405c:	dc000015 	stw	r16,0(sp)
80214060:	dfc00415 	stw	ra,16(sp)
80214064:	dcc00315 	stw	r19,12(sp)
80214068:	1c803fcc 	andi	r18,r3,255
8021406c:	2c01ffcc 	andi	r16,r5,2047
80214070:	5210b03a 	or	r8,r10,r8
80214074:	202290fa 	slli	r17,r4,3
80214078:	1081ffcc 	andi	r2,r2,2047
8021407c:	4b12b03a 	or	r9,r9,r12
80214080:	300c90fa 	slli	r6,r6,3
80214084:	91c07526 	beq	r18,r7,8021425c <__adddf3+0x23c>
80214088:	8087c83a 	sub	r3,r16,r2
8021408c:	00c0ab0e 	bge	zero,r3,8021433c <__adddf3+0x31c>
80214090:	10002a1e 	bne	r2,zero,8021413c <__adddf3+0x11c>
80214094:	4984b03a 	or	r2,r9,r6
80214098:	1000961e 	bne	r2,zero,802142f4 <__adddf3+0x2d4>
8021409c:	888001cc 	andi	r2,r17,7
802140a0:	10000726 	beq	r2,zero,802140c0 <__adddf3+0xa0>
802140a4:	888003cc 	andi	r2,r17,15
802140a8:	00c00104 	movi	r3,4
802140ac:	10c00426 	beq	r2,r3,802140c0 <__adddf3+0xa0>
802140b0:	88c7883a 	add	r3,r17,r3
802140b4:	1c63803a 	cmpltu	r17,r3,r17
802140b8:	4451883a 	add	r8,r8,r17
802140bc:	1823883a 	mov	r17,r3
802140c0:	4080202c 	andhi	r2,r8,128
802140c4:	10005926 	beq	r2,zero,8021422c <__adddf3+0x20c>
802140c8:	84000044 	addi	r16,r16,1
802140cc:	0081ffc4 	movi	r2,2047
802140d0:	8080ba26 	beq	r16,r2,802143bc <__adddf3+0x39c>
802140d4:	00bfe034 	movhi	r2,65408
802140d8:	10bfffc4 	addi	r2,r2,-1
802140dc:	4090703a 	and	r8,r8,r2
802140e0:	4004977a 	slli	r2,r8,29
802140e4:	4010927a 	slli	r8,r8,9
802140e8:	8822d0fa 	srli	r17,r17,3
802140ec:	8401ffcc 	andi	r16,r16,2047
802140f0:	4010d33a 	srli	r8,r8,12
802140f4:	9007883a 	mov	r3,r18
802140f8:	1444b03a 	or	r2,r2,r17
802140fc:	8401ffcc 	andi	r16,r16,2047
80214100:	8020953a 	slli	r16,r16,20
80214104:	18c03fcc 	andi	r3,r3,255
80214108:	01000434 	movhi	r4,16
8021410c:	213fffc4 	addi	r4,r4,-1
80214110:	180697fa 	slli	r3,r3,31
80214114:	4110703a 	and	r8,r8,r4
80214118:	4410b03a 	or	r8,r8,r16
8021411c:	40c6b03a 	or	r3,r8,r3
80214120:	dfc00417 	ldw	ra,16(sp)
80214124:	dcc00317 	ldw	r19,12(sp)
80214128:	dc800217 	ldw	r18,8(sp)
8021412c:	dc400117 	ldw	r17,4(sp)
80214130:	dc000017 	ldw	r16,0(sp)
80214134:	dec00504 	addi	sp,sp,20
80214138:	f800283a 	ret
8021413c:	0081ffc4 	movi	r2,2047
80214140:	80bfd626 	beq	r16,r2,8021409c <__reset+0xfa1f409c>
80214144:	4a402034 	orhi	r9,r9,128
80214148:	00800e04 	movi	r2,56
8021414c:	10c09f16 	blt	r2,r3,802143cc <__adddf3+0x3ac>
80214150:	008007c4 	movi	r2,31
80214154:	10c0c216 	blt	r2,r3,80214460 <__adddf3+0x440>
80214158:	00800804 	movi	r2,32
8021415c:	10c5c83a 	sub	r2,r2,r3
80214160:	488a983a 	sll	r5,r9,r2
80214164:	30c8d83a 	srl	r4,r6,r3
80214168:	3084983a 	sll	r2,r6,r2
8021416c:	48c6d83a 	srl	r3,r9,r3
80214170:	290cb03a 	or	r6,r5,r4
80214174:	1004c03a 	cmpne	r2,r2,zero
80214178:	308cb03a 	or	r6,r6,r2
8021417c:	898dc83a 	sub	r6,r17,r6
80214180:	89a3803a 	cmpltu	r17,r17,r6
80214184:	40d1c83a 	sub	r8,r8,r3
80214188:	4451c83a 	sub	r8,r8,r17
8021418c:	3023883a 	mov	r17,r6
80214190:	4080202c 	andhi	r2,r8,128
80214194:	10002326 	beq	r2,zero,80214224 <__adddf3+0x204>
80214198:	04c02034 	movhi	r19,128
8021419c:	9cffffc4 	addi	r19,r19,-1
802141a0:	44e6703a 	and	r19,r8,r19
802141a4:	98007626 	beq	r19,zero,80214380 <__adddf3+0x360>
802141a8:	9809883a 	mov	r4,r19
802141ac:	020655c0 	call	8020655c <__clzsi2>
802141b0:	10fffe04 	addi	r3,r2,-8
802141b4:	010007c4 	movi	r4,31
802141b8:	20c07716 	blt	r4,r3,80214398 <__adddf3+0x378>
802141bc:	00800804 	movi	r2,32
802141c0:	10c5c83a 	sub	r2,r2,r3
802141c4:	8884d83a 	srl	r2,r17,r2
802141c8:	98d0983a 	sll	r8,r19,r3
802141cc:	88e2983a 	sll	r17,r17,r3
802141d0:	1204b03a 	or	r2,r2,r8
802141d4:	1c007416 	blt	r3,r16,802143a8 <__adddf3+0x388>
802141d8:	1c21c83a 	sub	r16,r3,r16
802141dc:	82000044 	addi	r8,r16,1
802141e0:	00c007c4 	movi	r3,31
802141e4:	1a009116 	blt	r3,r8,8021442c <__adddf3+0x40c>
802141e8:	00c00804 	movi	r3,32
802141ec:	1a07c83a 	sub	r3,r3,r8
802141f0:	8a08d83a 	srl	r4,r17,r8
802141f4:	88e2983a 	sll	r17,r17,r3
802141f8:	10c6983a 	sll	r3,r2,r3
802141fc:	1210d83a 	srl	r8,r2,r8
80214200:	8804c03a 	cmpne	r2,r17,zero
80214204:	1906b03a 	or	r3,r3,r4
80214208:	18a2b03a 	or	r17,r3,r2
8021420c:	0021883a 	mov	r16,zero
80214210:	003fa206 	br	8021409c <__reset+0xfa1f409c>
80214214:	1890b03a 	or	r8,r3,r2
80214218:	40017d26 	beq	r8,zero,80214810 <__adddf3+0x7f0>
8021421c:	1011883a 	mov	r8,r2
80214220:	1823883a 	mov	r17,r3
80214224:	888001cc 	andi	r2,r17,7
80214228:	103f9e1e 	bne	r2,zero,802140a4 <__reset+0xfa1f40a4>
8021422c:	4004977a 	slli	r2,r8,29
80214230:	8822d0fa 	srli	r17,r17,3
80214234:	4010d0fa 	srli	r8,r8,3
80214238:	9007883a 	mov	r3,r18
8021423c:	1444b03a 	or	r2,r2,r17
80214240:	0101ffc4 	movi	r4,2047
80214244:	81002426 	beq	r16,r4,802142d8 <__adddf3+0x2b8>
80214248:	8120703a 	and	r16,r16,r4
8021424c:	01000434 	movhi	r4,16
80214250:	213fffc4 	addi	r4,r4,-1
80214254:	4110703a 	and	r8,r8,r4
80214258:	003fa806 	br	802140fc <__reset+0xfa1f40fc>
8021425c:	8089c83a 	sub	r4,r16,r2
80214260:	01005e0e 	bge	zero,r4,802143dc <__adddf3+0x3bc>
80214264:	10002b26 	beq	r2,zero,80214314 <__adddf3+0x2f4>
80214268:	0081ffc4 	movi	r2,2047
8021426c:	80bf8b26 	beq	r16,r2,8021409c <__reset+0xfa1f409c>
80214270:	4a402034 	orhi	r9,r9,128
80214274:	00800e04 	movi	r2,56
80214278:	1100a40e 	bge	r2,r4,8021450c <__adddf3+0x4ec>
8021427c:	498cb03a 	or	r6,r9,r6
80214280:	300ac03a 	cmpne	r5,r6,zero
80214284:	0013883a 	mov	r9,zero
80214288:	2c4b883a 	add	r5,r5,r17
8021428c:	2c63803a 	cmpltu	r17,r5,r17
80214290:	4a11883a 	add	r8,r9,r8
80214294:	8a11883a 	add	r8,r17,r8
80214298:	2823883a 	mov	r17,r5
8021429c:	4080202c 	andhi	r2,r8,128
802142a0:	103fe026 	beq	r2,zero,80214224 <__reset+0xfa1f4224>
802142a4:	84000044 	addi	r16,r16,1
802142a8:	0081ffc4 	movi	r2,2047
802142ac:	8080d226 	beq	r16,r2,802145f8 <__adddf3+0x5d8>
802142b0:	00bfe034 	movhi	r2,65408
802142b4:	10bfffc4 	addi	r2,r2,-1
802142b8:	4090703a 	and	r8,r8,r2
802142bc:	880ad07a 	srli	r5,r17,1
802142c0:	400897fa 	slli	r4,r8,31
802142c4:	88c0004c 	andi	r3,r17,1
802142c8:	28e2b03a 	or	r17,r5,r3
802142cc:	4010d07a 	srli	r8,r8,1
802142d0:	2462b03a 	or	r17,r4,r17
802142d4:	003f7106 	br	8021409c <__reset+0xfa1f409c>
802142d8:	4088b03a 	or	r4,r8,r2
802142dc:	20014526 	beq	r4,zero,802147f4 <__adddf3+0x7d4>
802142e0:	01000434 	movhi	r4,16
802142e4:	42000234 	orhi	r8,r8,8
802142e8:	213fffc4 	addi	r4,r4,-1
802142ec:	4110703a 	and	r8,r8,r4
802142f0:	003f8206 	br	802140fc <__reset+0xfa1f40fc>
802142f4:	18ffffc4 	addi	r3,r3,-1
802142f8:	1800491e 	bne	r3,zero,80214420 <__adddf3+0x400>
802142fc:	898bc83a 	sub	r5,r17,r6
80214300:	8963803a 	cmpltu	r17,r17,r5
80214304:	4251c83a 	sub	r8,r8,r9
80214308:	4451c83a 	sub	r8,r8,r17
8021430c:	2823883a 	mov	r17,r5
80214310:	003f9f06 	br	80214190 <__reset+0xfa1f4190>
80214314:	4984b03a 	or	r2,r9,r6
80214318:	103f6026 	beq	r2,zero,8021409c <__reset+0xfa1f409c>
8021431c:	213fffc4 	addi	r4,r4,-1
80214320:	2000931e 	bne	r4,zero,80214570 <__adddf3+0x550>
80214324:	898d883a 	add	r6,r17,r6
80214328:	3463803a 	cmpltu	r17,r6,r17
8021432c:	4251883a 	add	r8,r8,r9
80214330:	8a11883a 	add	r8,r17,r8
80214334:	3023883a 	mov	r17,r6
80214338:	003fd806 	br	8021429c <__reset+0xfa1f429c>
8021433c:	1800541e 	bne	r3,zero,80214490 <__adddf3+0x470>
80214340:	80800044 	addi	r2,r16,1
80214344:	1081ffcc 	andi	r2,r2,2047
80214348:	00c00044 	movi	r3,1
8021434c:	1880a00e 	bge	r3,r2,802145d0 <__adddf3+0x5b0>
80214350:	8989c83a 	sub	r4,r17,r6
80214354:	8905803a 	cmpltu	r2,r17,r4
80214358:	4267c83a 	sub	r19,r8,r9
8021435c:	98a7c83a 	sub	r19,r19,r2
80214360:	9880202c 	andhi	r2,r19,128
80214364:	10006326 	beq	r2,zero,802144f4 <__adddf3+0x4d4>
80214368:	3463c83a 	sub	r17,r6,r17
8021436c:	4a07c83a 	sub	r3,r9,r8
80214370:	344d803a 	cmpltu	r6,r6,r17
80214374:	19a7c83a 	sub	r19,r3,r6
80214378:	3825883a 	mov	r18,r7
8021437c:	983f8a1e 	bne	r19,zero,802141a8 <__reset+0xfa1f41a8>
80214380:	8809883a 	mov	r4,r17
80214384:	020655c0 	call	8020655c <__clzsi2>
80214388:	10800804 	addi	r2,r2,32
8021438c:	10fffe04 	addi	r3,r2,-8
80214390:	010007c4 	movi	r4,31
80214394:	20ff890e 	bge	r4,r3,802141bc <__reset+0xfa1f41bc>
80214398:	10bff604 	addi	r2,r2,-40
8021439c:	8884983a 	sll	r2,r17,r2
802143a0:	0023883a 	mov	r17,zero
802143a4:	1c3f8c0e 	bge	r3,r16,802141d8 <__reset+0xfa1f41d8>
802143a8:	023fe034 	movhi	r8,65408
802143ac:	423fffc4 	addi	r8,r8,-1
802143b0:	80e1c83a 	sub	r16,r16,r3
802143b4:	1210703a 	and	r8,r2,r8
802143b8:	003f3806 	br	8021409c <__reset+0xfa1f409c>
802143bc:	9007883a 	mov	r3,r18
802143c0:	0011883a 	mov	r8,zero
802143c4:	0005883a 	mov	r2,zero
802143c8:	003f4c06 	br	802140fc <__reset+0xfa1f40fc>
802143cc:	498cb03a 	or	r6,r9,r6
802143d0:	300cc03a 	cmpne	r6,r6,zero
802143d4:	0007883a 	mov	r3,zero
802143d8:	003f6806 	br	8021417c <__reset+0xfa1f417c>
802143dc:	20009c1e 	bne	r4,zero,80214650 <__adddf3+0x630>
802143e0:	80800044 	addi	r2,r16,1
802143e4:	1141ffcc 	andi	r5,r2,2047
802143e8:	01000044 	movi	r4,1
802143ec:	2140670e 	bge	r4,r5,8021458c <__adddf3+0x56c>
802143f0:	0101ffc4 	movi	r4,2047
802143f4:	11007f26 	beq	r2,r4,802145f4 <__adddf3+0x5d4>
802143f8:	898d883a 	add	r6,r17,r6
802143fc:	4247883a 	add	r3,r8,r9
80214400:	3451803a 	cmpltu	r8,r6,r17
80214404:	40d1883a 	add	r8,r8,r3
80214408:	402297fa 	slli	r17,r8,31
8021440c:	300cd07a 	srli	r6,r6,1
80214410:	4010d07a 	srli	r8,r8,1
80214414:	1021883a 	mov	r16,r2
80214418:	89a2b03a 	or	r17,r17,r6
8021441c:	003f1f06 	br	8021409c <__reset+0xfa1f409c>
80214420:	0081ffc4 	movi	r2,2047
80214424:	80bf481e 	bne	r16,r2,80214148 <__reset+0xfa1f4148>
80214428:	003f1c06 	br	8021409c <__reset+0xfa1f409c>
8021442c:	843ff844 	addi	r16,r16,-31
80214430:	01000804 	movi	r4,32
80214434:	1406d83a 	srl	r3,r2,r16
80214438:	41005026 	beq	r8,r4,8021457c <__adddf3+0x55c>
8021443c:	01001004 	movi	r4,64
80214440:	2211c83a 	sub	r8,r4,r8
80214444:	1204983a 	sll	r2,r2,r8
80214448:	88a2b03a 	or	r17,r17,r2
8021444c:	8822c03a 	cmpne	r17,r17,zero
80214450:	1c62b03a 	or	r17,r3,r17
80214454:	0011883a 	mov	r8,zero
80214458:	0021883a 	mov	r16,zero
8021445c:	003f7106 	br	80214224 <__reset+0xfa1f4224>
80214460:	193ff804 	addi	r4,r3,-32
80214464:	00800804 	movi	r2,32
80214468:	4908d83a 	srl	r4,r9,r4
8021446c:	18804526 	beq	r3,r2,80214584 <__adddf3+0x564>
80214470:	00801004 	movi	r2,64
80214474:	10c5c83a 	sub	r2,r2,r3
80214478:	4886983a 	sll	r3,r9,r2
8021447c:	198cb03a 	or	r6,r3,r6
80214480:	300cc03a 	cmpne	r6,r6,zero
80214484:	218cb03a 	or	r6,r4,r6
80214488:	0007883a 	mov	r3,zero
8021448c:	003f3b06 	br	8021417c <__reset+0xfa1f417c>
80214490:	80002a26 	beq	r16,zero,8021453c <__adddf3+0x51c>
80214494:	0101ffc4 	movi	r4,2047
80214498:	11006826 	beq	r2,r4,8021463c <__adddf3+0x61c>
8021449c:	00c7c83a 	sub	r3,zero,r3
802144a0:	42002034 	orhi	r8,r8,128
802144a4:	01000e04 	movi	r4,56
802144a8:	20c07c16 	blt	r4,r3,8021469c <__adddf3+0x67c>
802144ac:	010007c4 	movi	r4,31
802144b0:	20c0da16 	blt	r4,r3,8021481c <__adddf3+0x7fc>
802144b4:	01000804 	movi	r4,32
802144b8:	20c9c83a 	sub	r4,r4,r3
802144bc:	4114983a 	sll	r10,r8,r4
802144c0:	88cad83a 	srl	r5,r17,r3
802144c4:	8908983a 	sll	r4,r17,r4
802144c8:	40c6d83a 	srl	r3,r8,r3
802144cc:	5162b03a 	or	r17,r10,r5
802144d0:	2008c03a 	cmpne	r4,r4,zero
802144d4:	8922b03a 	or	r17,r17,r4
802144d8:	3463c83a 	sub	r17,r6,r17
802144dc:	48c7c83a 	sub	r3,r9,r3
802144e0:	344d803a 	cmpltu	r6,r6,r17
802144e4:	1991c83a 	sub	r8,r3,r6
802144e8:	1021883a 	mov	r16,r2
802144ec:	3825883a 	mov	r18,r7
802144f0:	003f2706 	br	80214190 <__reset+0xfa1f4190>
802144f4:	24d0b03a 	or	r8,r4,r19
802144f8:	40001b1e 	bne	r8,zero,80214568 <__adddf3+0x548>
802144fc:	0005883a 	mov	r2,zero
80214500:	0007883a 	mov	r3,zero
80214504:	0021883a 	mov	r16,zero
80214508:	003f4d06 	br	80214240 <__reset+0xfa1f4240>
8021450c:	008007c4 	movi	r2,31
80214510:	11003c16 	blt	r2,r4,80214604 <__adddf3+0x5e4>
80214514:	00800804 	movi	r2,32
80214518:	1105c83a 	sub	r2,r2,r4
8021451c:	488e983a 	sll	r7,r9,r2
80214520:	310ad83a 	srl	r5,r6,r4
80214524:	3084983a 	sll	r2,r6,r2
80214528:	4912d83a 	srl	r9,r9,r4
8021452c:	394ab03a 	or	r5,r7,r5
80214530:	1004c03a 	cmpne	r2,r2,zero
80214534:	288ab03a 	or	r5,r5,r2
80214538:	003f5306 	br	80214288 <__reset+0xfa1f4288>
8021453c:	4448b03a 	or	r4,r8,r17
80214540:	20003e26 	beq	r4,zero,8021463c <__adddf3+0x61c>
80214544:	00c6303a 	nor	r3,zero,r3
80214548:	18003a1e 	bne	r3,zero,80214634 <__adddf3+0x614>
8021454c:	3463c83a 	sub	r17,r6,r17
80214550:	4a07c83a 	sub	r3,r9,r8
80214554:	344d803a 	cmpltu	r6,r6,r17
80214558:	1991c83a 	sub	r8,r3,r6
8021455c:	1021883a 	mov	r16,r2
80214560:	3825883a 	mov	r18,r7
80214564:	003f0a06 	br	80214190 <__reset+0xfa1f4190>
80214568:	2023883a 	mov	r17,r4
8021456c:	003f0d06 	br	802141a4 <__reset+0xfa1f41a4>
80214570:	0081ffc4 	movi	r2,2047
80214574:	80bf3f1e 	bne	r16,r2,80214274 <__reset+0xfa1f4274>
80214578:	003ec806 	br	8021409c <__reset+0xfa1f409c>
8021457c:	0005883a 	mov	r2,zero
80214580:	003fb106 	br	80214448 <__reset+0xfa1f4448>
80214584:	0007883a 	mov	r3,zero
80214588:	003fbc06 	br	8021447c <__reset+0xfa1f447c>
8021458c:	4444b03a 	or	r2,r8,r17
80214590:	8000871e 	bne	r16,zero,802147b0 <__adddf3+0x790>
80214594:	1000ba26 	beq	r2,zero,80214880 <__adddf3+0x860>
80214598:	4984b03a 	or	r2,r9,r6
8021459c:	103ebf26 	beq	r2,zero,8021409c <__reset+0xfa1f409c>
802145a0:	8985883a 	add	r2,r17,r6
802145a4:	4247883a 	add	r3,r8,r9
802145a8:	1451803a 	cmpltu	r8,r2,r17
802145ac:	40d1883a 	add	r8,r8,r3
802145b0:	40c0202c 	andhi	r3,r8,128
802145b4:	1023883a 	mov	r17,r2
802145b8:	183f1a26 	beq	r3,zero,80214224 <__reset+0xfa1f4224>
802145bc:	00bfe034 	movhi	r2,65408
802145c0:	10bfffc4 	addi	r2,r2,-1
802145c4:	2021883a 	mov	r16,r4
802145c8:	4090703a 	and	r8,r8,r2
802145cc:	003eb306 	br	8021409c <__reset+0xfa1f409c>
802145d0:	4444b03a 	or	r2,r8,r17
802145d4:	8000291e 	bne	r16,zero,8021467c <__adddf3+0x65c>
802145d8:	10004b1e 	bne	r2,zero,80214708 <__adddf3+0x6e8>
802145dc:	4990b03a 	or	r8,r9,r6
802145e0:	40008b26 	beq	r8,zero,80214810 <__adddf3+0x7f0>
802145e4:	4811883a 	mov	r8,r9
802145e8:	3023883a 	mov	r17,r6
802145ec:	3825883a 	mov	r18,r7
802145f0:	003eaa06 	br	8021409c <__reset+0xfa1f409c>
802145f4:	1021883a 	mov	r16,r2
802145f8:	0011883a 	mov	r8,zero
802145fc:	0005883a 	mov	r2,zero
80214600:	003f0f06 	br	80214240 <__reset+0xfa1f4240>
80214604:	217ff804 	addi	r5,r4,-32
80214608:	00800804 	movi	r2,32
8021460c:	494ad83a 	srl	r5,r9,r5
80214610:	20807d26 	beq	r4,r2,80214808 <__adddf3+0x7e8>
80214614:	00801004 	movi	r2,64
80214618:	1109c83a 	sub	r4,r2,r4
8021461c:	4912983a 	sll	r9,r9,r4
80214620:	498cb03a 	or	r6,r9,r6
80214624:	300cc03a 	cmpne	r6,r6,zero
80214628:	298ab03a 	or	r5,r5,r6
8021462c:	0013883a 	mov	r9,zero
80214630:	003f1506 	br	80214288 <__reset+0xfa1f4288>
80214634:	0101ffc4 	movi	r4,2047
80214638:	113f9a1e 	bne	r2,r4,802144a4 <__reset+0xfa1f44a4>
8021463c:	4811883a 	mov	r8,r9
80214640:	3023883a 	mov	r17,r6
80214644:	1021883a 	mov	r16,r2
80214648:	3825883a 	mov	r18,r7
8021464c:	003e9306 	br	8021409c <__reset+0xfa1f409c>
80214650:	8000161e 	bne	r16,zero,802146ac <__adddf3+0x68c>
80214654:	444ab03a 	or	r5,r8,r17
80214658:	28005126 	beq	r5,zero,802147a0 <__adddf3+0x780>
8021465c:	0108303a 	nor	r4,zero,r4
80214660:	20004d1e 	bne	r4,zero,80214798 <__adddf3+0x778>
80214664:	89a3883a 	add	r17,r17,r6
80214668:	4253883a 	add	r9,r8,r9
8021466c:	898d803a 	cmpltu	r6,r17,r6
80214670:	3251883a 	add	r8,r6,r9
80214674:	1021883a 	mov	r16,r2
80214678:	003f0806 	br	8021429c <__reset+0xfa1f429c>
8021467c:	1000301e 	bne	r2,zero,80214740 <__adddf3+0x720>
80214680:	4984b03a 	or	r2,r9,r6
80214684:	10007126 	beq	r2,zero,8021484c <__adddf3+0x82c>
80214688:	4811883a 	mov	r8,r9
8021468c:	3023883a 	mov	r17,r6
80214690:	3825883a 	mov	r18,r7
80214694:	0401ffc4 	movi	r16,2047
80214698:	003e8006 	br	8021409c <__reset+0xfa1f409c>
8021469c:	4462b03a 	or	r17,r8,r17
802146a0:	8822c03a 	cmpne	r17,r17,zero
802146a4:	0007883a 	mov	r3,zero
802146a8:	003f8b06 	br	802144d8 <__reset+0xfa1f44d8>
802146ac:	0141ffc4 	movi	r5,2047
802146b0:	11403b26 	beq	r2,r5,802147a0 <__adddf3+0x780>
802146b4:	0109c83a 	sub	r4,zero,r4
802146b8:	42002034 	orhi	r8,r8,128
802146bc:	01400e04 	movi	r5,56
802146c0:	29006716 	blt	r5,r4,80214860 <__adddf3+0x840>
802146c4:	014007c4 	movi	r5,31
802146c8:	29007016 	blt	r5,r4,8021488c <__adddf3+0x86c>
802146cc:	01400804 	movi	r5,32
802146d0:	290bc83a 	sub	r5,r5,r4
802146d4:	4154983a 	sll	r10,r8,r5
802146d8:	890ed83a 	srl	r7,r17,r4
802146dc:	894a983a 	sll	r5,r17,r5
802146e0:	4108d83a 	srl	r4,r8,r4
802146e4:	51e2b03a 	or	r17,r10,r7
802146e8:	280ac03a 	cmpne	r5,r5,zero
802146ec:	8962b03a 	or	r17,r17,r5
802146f0:	89a3883a 	add	r17,r17,r6
802146f4:	2253883a 	add	r9,r4,r9
802146f8:	898d803a 	cmpltu	r6,r17,r6
802146fc:	3251883a 	add	r8,r6,r9
80214700:	1021883a 	mov	r16,r2
80214704:	003ee506 	br	8021429c <__reset+0xfa1f429c>
80214708:	4984b03a 	or	r2,r9,r6
8021470c:	103e6326 	beq	r2,zero,8021409c <__reset+0xfa1f409c>
80214710:	8987c83a 	sub	r3,r17,r6
80214714:	88c9803a 	cmpltu	r4,r17,r3
80214718:	4245c83a 	sub	r2,r8,r9
8021471c:	1105c83a 	sub	r2,r2,r4
80214720:	1100202c 	andhi	r4,r2,128
80214724:	203ebb26 	beq	r4,zero,80214214 <__reset+0xfa1f4214>
80214728:	3463c83a 	sub	r17,r6,r17
8021472c:	4a07c83a 	sub	r3,r9,r8
80214730:	344d803a 	cmpltu	r6,r6,r17
80214734:	1991c83a 	sub	r8,r3,r6
80214738:	3825883a 	mov	r18,r7
8021473c:	003e5706 	br	8021409c <__reset+0xfa1f409c>
80214740:	4984b03a 	or	r2,r9,r6
80214744:	10002e26 	beq	r2,zero,80214800 <__adddf3+0x7e0>
80214748:	4004d0fa 	srli	r2,r8,3
8021474c:	8822d0fa 	srli	r17,r17,3
80214750:	4010977a 	slli	r8,r8,29
80214754:	10c0022c 	andhi	r3,r2,8
80214758:	4462b03a 	or	r17,r8,r17
8021475c:	18000826 	beq	r3,zero,80214780 <__adddf3+0x760>
80214760:	4808d0fa 	srli	r4,r9,3
80214764:	20c0022c 	andhi	r3,r4,8
80214768:	1800051e 	bne	r3,zero,80214780 <__adddf3+0x760>
8021476c:	300cd0fa 	srli	r6,r6,3
80214770:	4806977a 	slli	r3,r9,29
80214774:	2005883a 	mov	r2,r4
80214778:	3825883a 	mov	r18,r7
8021477c:	19a2b03a 	or	r17,r3,r6
80214780:	8810d77a 	srli	r8,r17,29
80214784:	100490fa 	slli	r2,r2,3
80214788:	882290fa 	slli	r17,r17,3
8021478c:	0401ffc4 	movi	r16,2047
80214790:	4090b03a 	or	r8,r8,r2
80214794:	003e4106 	br	8021409c <__reset+0xfa1f409c>
80214798:	0141ffc4 	movi	r5,2047
8021479c:	117fc71e 	bne	r2,r5,802146bc <__reset+0xfa1f46bc>
802147a0:	4811883a 	mov	r8,r9
802147a4:	3023883a 	mov	r17,r6
802147a8:	1021883a 	mov	r16,r2
802147ac:	003e3b06 	br	8021409c <__reset+0xfa1f409c>
802147b0:	10002f26 	beq	r2,zero,80214870 <__adddf3+0x850>
802147b4:	4984b03a 	or	r2,r9,r6
802147b8:	10001126 	beq	r2,zero,80214800 <__adddf3+0x7e0>
802147bc:	4004d0fa 	srli	r2,r8,3
802147c0:	8822d0fa 	srli	r17,r17,3
802147c4:	4010977a 	slli	r8,r8,29
802147c8:	10c0022c 	andhi	r3,r2,8
802147cc:	4462b03a 	or	r17,r8,r17
802147d0:	183feb26 	beq	r3,zero,80214780 <__reset+0xfa1f4780>
802147d4:	4808d0fa 	srli	r4,r9,3
802147d8:	20c0022c 	andhi	r3,r4,8
802147dc:	183fe81e 	bne	r3,zero,80214780 <__reset+0xfa1f4780>
802147e0:	300cd0fa 	srli	r6,r6,3
802147e4:	4806977a 	slli	r3,r9,29
802147e8:	2005883a 	mov	r2,r4
802147ec:	19a2b03a 	or	r17,r3,r6
802147f0:	003fe306 	br	80214780 <__reset+0xfa1f4780>
802147f4:	0011883a 	mov	r8,zero
802147f8:	0005883a 	mov	r2,zero
802147fc:	003e3f06 	br	802140fc <__reset+0xfa1f40fc>
80214800:	0401ffc4 	movi	r16,2047
80214804:	003e2506 	br	8021409c <__reset+0xfa1f409c>
80214808:	0013883a 	mov	r9,zero
8021480c:	003f8406 	br	80214620 <__reset+0xfa1f4620>
80214810:	0005883a 	mov	r2,zero
80214814:	0007883a 	mov	r3,zero
80214818:	003e8906 	br	80214240 <__reset+0xfa1f4240>
8021481c:	197ff804 	addi	r5,r3,-32
80214820:	01000804 	movi	r4,32
80214824:	414ad83a 	srl	r5,r8,r5
80214828:	19002426 	beq	r3,r4,802148bc <__adddf3+0x89c>
8021482c:	01001004 	movi	r4,64
80214830:	20c7c83a 	sub	r3,r4,r3
80214834:	40c6983a 	sll	r3,r8,r3
80214838:	1c46b03a 	or	r3,r3,r17
8021483c:	1806c03a 	cmpne	r3,r3,zero
80214840:	28e2b03a 	or	r17,r5,r3
80214844:	0007883a 	mov	r3,zero
80214848:	003f2306 	br	802144d8 <__reset+0xfa1f44d8>
8021484c:	0007883a 	mov	r3,zero
80214850:	5811883a 	mov	r8,r11
80214854:	00bfffc4 	movi	r2,-1
80214858:	0401ffc4 	movi	r16,2047
8021485c:	003e7806 	br	80214240 <__reset+0xfa1f4240>
80214860:	4462b03a 	or	r17,r8,r17
80214864:	8822c03a 	cmpne	r17,r17,zero
80214868:	0009883a 	mov	r4,zero
8021486c:	003fa006 	br	802146f0 <__reset+0xfa1f46f0>
80214870:	4811883a 	mov	r8,r9
80214874:	3023883a 	mov	r17,r6
80214878:	0401ffc4 	movi	r16,2047
8021487c:	003e0706 	br	8021409c <__reset+0xfa1f409c>
80214880:	4811883a 	mov	r8,r9
80214884:	3023883a 	mov	r17,r6
80214888:	003e0406 	br	8021409c <__reset+0xfa1f409c>
8021488c:	21fff804 	addi	r7,r4,-32
80214890:	01400804 	movi	r5,32
80214894:	41ced83a 	srl	r7,r8,r7
80214898:	21400a26 	beq	r4,r5,802148c4 <__adddf3+0x8a4>
8021489c:	01401004 	movi	r5,64
802148a0:	2909c83a 	sub	r4,r5,r4
802148a4:	4108983a 	sll	r4,r8,r4
802148a8:	2448b03a 	or	r4,r4,r17
802148ac:	2008c03a 	cmpne	r4,r4,zero
802148b0:	3922b03a 	or	r17,r7,r4
802148b4:	0009883a 	mov	r4,zero
802148b8:	003f8d06 	br	802146f0 <__reset+0xfa1f46f0>
802148bc:	0007883a 	mov	r3,zero
802148c0:	003fdd06 	br	80214838 <__reset+0xfa1f4838>
802148c4:	0009883a 	mov	r4,zero
802148c8:	003ff706 	br	802148a8 <__reset+0xfa1f48a8>

802148cc <__divdf3>:
802148cc:	defff204 	addi	sp,sp,-56
802148d0:	dd400915 	stw	r21,36(sp)
802148d4:	282ad53a 	srli	r21,r5,20
802148d8:	dd000815 	stw	r20,32(sp)
802148dc:	2828d7fa 	srli	r20,r5,31
802148e0:	dc000415 	stw	r16,16(sp)
802148e4:	04000434 	movhi	r16,16
802148e8:	df000c15 	stw	fp,48(sp)
802148ec:	843fffc4 	addi	r16,r16,-1
802148f0:	dfc00d15 	stw	ra,52(sp)
802148f4:	ddc00b15 	stw	r23,44(sp)
802148f8:	dd800a15 	stw	r22,40(sp)
802148fc:	dcc00715 	stw	r19,28(sp)
80214900:	dc800615 	stw	r18,24(sp)
80214904:	dc400515 	stw	r17,20(sp)
80214908:	ad41ffcc 	andi	r21,r21,2047
8021490c:	2c20703a 	and	r16,r5,r16
80214910:	a7003fcc 	andi	fp,r20,255
80214914:	a8006126 	beq	r21,zero,80214a9c <__divdf3+0x1d0>
80214918:	0081ffc4 	movi	r2,2047
8021491c:	2025883a 	mov	r18,r4
80214920:	a8803726 	beq	r21,r2,80214a00 <__divdf3+0x134>
80214924:	80800434 	orhi	r2,r16,16
80214928:	100490fa 	slli	r2,r2,3
8021492c:	2020d77a 	srli	r16,r4,29
80214930:	202490fa 	slli	r18,r4,3
80214934:	ad7f0044 	addi	r21,r21,-1023
80214938:	80a0b03a 	or	r16,r16,r2
8021493c:	0027883a 	mov	r19,zero
80214940:	0013883a 	mov	r9,zero
80214944:	3804d53a 	srli	r2,r7,20
80214948:	382cd7fa 	srli	r22,r7,31
8021494c:	04400434 	movhi	r17,16
80214950:	8c7fffc4 	addi	r17,r17,-1
80214954:	1081ffcc 	andi	r2,r2,2047
80214958:	3011883a 	mov	r8,r6
8021495c:	3c62703a 	and	r17,r7,r17
80214960:	b5c03fcc 	andi	r23,r22,255
80214964:	10006c26 	beq	r2,zero,80214b18 <__divdf3+0x24c>
80214968:	00c1ffc4 	movi	r3,2047
8021496c:	10c06426 	beq	r2,r3,80214b00 <__divdf3+0x234>
80214970:	88c00434 	orhi	r3,r17,16
80214974:	180690fa 	slli	r3,r3,3
80214978:	3022d77a 	srli	r17,r6,29
8021497c:	301090fa 	slli	r8,r6,3
80214980:	10bf0044 	addi	r2,r2,-1023
80214984:	88e2b03a 	or	r17,r17,r3
80214988:	000f883a 	mov	r7,zero
8021498c:	a58cf03a 	xor	r6,r20,r22
80214990:	3cc8b03a 	or	r4,r7,r19
80214994:	a8abc83a 	sub	r21,r21,r2
80214998:	008003c4 	movi	r2,15
8021499c:	3007883a 	mov	r3,r6
802149a0:	34c03fcc 	andi	r19,r6,255
802149a4:	11009036 	bltu	r2,r4,80214be8 <__divdf3+0x31c>
802149a8:	200890ba 	slli	r4,r4,2
802149ac:	00a00874 	movhi	r2,32801
802149b0:	10927004 	addi	r2,r2,18880
802149b4:	2089883a 	add	r4,r4,r2
802149b8:	20800017 	ldw	r2,0(r4)
802149bc:	1000683a 	jmp	r2
802149c0:	80214be8 	cmpgeui	zero,r16,34095
802149c4:	80214a38 	rdprs	zero,r16,-31448
802149c8:	80214bd8 	cmpnei	zero,r16,-31441
802149cc:	80214a2c 	andhi	zero,r16,34088
802149d0:	80214bd8 	cmpnei	zero,r16,-31441
802149d4:	80214bac 	andhi	zero,r16,34094
802149d8:	80214bd8 	cmpnei	zero,r16,-31441
802149dc:	80214a2c 	andhi	zero,r16,34088
802149e0:	80214a38 	rdprs	zero,r16,-31448
802149e4:	80214a38 	rdprs	zero,r16,-31448
802149e8:	80214bac 	andhi	zero,r16,34094
802149ec:	80214a2c 	andhi	zero,r16,34088
802149f0:	80214a1c 	xori	zero,r16,34088
802149f4:	80214a1c 	xori	zero,r16,34088
802149f8:	80214a1c 	xori	zero,r16,34088
802149fc:	80214ecc 	andi	zero,r16,34107
80214a00:	2404b03a 	or	r2,r4,r16
80214a04:	1000661e 	bne	r2,zero,80214ba0 <__divdf3+0x2d4>
80214a08:	04c00204 	movi	r19,8
80214a0c:	0021883a 	mov	r16,zero
80214a10:	0025883a 	mov	r18,zero
80214a14:	02400084 	movi	r9,2
80214a18:	003fca06 	br	80214944 <__reset+0xfa1f4944>
80214a1c:	8023883a 	mov	r17,r16
80214a20:	9011883a 	mov	r8,r18
80214a24:	e02f883a 	mov	r23,fp
80214a28:	480f883a 	mov	r7,r9
80214a2c:	00800084 	movi	r2,2
80214a30:	3881311e 	bne	r7,r2,80214ef8 <__divdf3+0x62c>
80214a34:	b827883a 	mov	r19,r23
80214a38:	98c0004c 	andi	r3,r19,1
80214a3c:	0081ffc4 	movi	r2,2047
80214a40:	000b883a 	mov	r5,zero
80214a44:	0025883a 	mov	r18,zero
80214a48:	1004953a 	slli	r2,r2,20
80214a4c:	18c03fcc 	andi	r3,r3,255
80214a50:	04400434 	movhi	r17,16
80214a54:	8c7fffc4 	addi	r17,r17,-1
80214a58:	180697fa 	slli	r3,r3,31
80214a5c:	2c4a703a 	and	r5,r5,r17
80214a60:	288ab03a 	or	r5,r5,r2
80214a64:	28c6b03a 	or	r3,r5,r3
80214a68:	9005883a 	mov	r2,r18
80214a6c:	dfc00d17 	ldw	ra,52(sp)
80214a70:	df000c17 	ldw	fp,48(sp)
80214a74:	ddc00b17 	ldw	r23,44(sp)
80214a78:	dd800a17 	ldw	r22,40(sp)
80214a7c:	dd400917 	ldw	r21,36(sp)
80214a80:	dd000817 	ldw	r20,32(sp)
80214a84:	dcc00717 	ldw	r19,28(sp)
80214a88:	dc800617 	ldw	r18,24(sp)
80214a8c:	dc400517 	ldw	r17,20(sp)
80214a90:	dc000417 	ldw	r16,16(sp)
80214a94:	dec00e04 	addi	sp,sp,56
80214a98:	f800283a 	ret
80214a9c:	2404b03a 	or	r2,r4,r16
80214aa0:	2027883a 	mov	r19,r4
80214aa4:	10003926 	beq	r2,zero,80214b8c <__divdf3+0x2c0>
80214aa8:	80012e26 	beq	r16,zero,80214f64 <__divdf3+0x698>
80214aac:	8009883a 	mov	r4,r16
80214ab0:	d9800315 	stw	r6,12(sp)
80214ab4:	d9c00215 	stw	r7,8(sp)
80214ab8:	020655c0 	call	8020655c <__clzsi2>
80214abc:	d9800317 	ldw	r6,12(sp)
80214ac0:	d9c00217 	ldw	r7,8(sp)
80214ac4:	113ffd44 	addi	r4,r2,-11
80214ac8:	00c00704 	movi	r3,28
80214acc:	19012116 	blt	r3,r4,80214f54 <__divdf3+0x688>
80214ad0:	00c00744 	movi	r3,29
80214ad4:	147ffe04 	addi	r17,r2,-8
80214ad8:	1907c83a 	sub	r3,r3,r4
80214adc:	8460983a 	sll	r16,r16,r17
80214ae0:	98c6d83a 	srl	r3,r19,r3
80214ae4:	9c64983a 	sll	r18,r19,r17
80214ae8:	1c20b03a 	or	r16,r3,r16
80214aec:	1080fcc4 	addi	r2,r2,1011
80214af0:	00abc83a 	sub	r21,zero,r2
80214af4:	0027883a 	mov	r19,zero
80214af8:	0013883a 	mov	r9,zero
80214afc:	003f9106 	br	80214944 <__reset+0xfa1f4944>
80214b00:	3446b03a 	or	r3,r6,r17
80214b04:	18001f1e 	bne	r3,zero,80214b84 <__divdf3+0x2b8>
80214b08:	0023883a 	mov	r17,zero
80214b0c:	0011883a 	mov	r8,zero
80214b10:	01c00084 	movi	r7,2
80214b14:	003f9d06 	br	8021498c <__reset+0xfa1f498c>
80214b18:	3446b03a 	or	r3,r6,r17
80214b1c:	18001526 	beq	r3,zero,80214b74 <__divdf3+0x2a8>
80214b20:	88011b26 	beq	r17,zero,80214f90 <__divdf3+0x6c4>
80214b24:	8809883a 	mov	r4,r17
80214b28:	d9800315 	stw	r6,12(sp)
80214b2c:	da400115 	stw	r9,4(sp)
80214b30:	020655c0 	call	8020655c <__clzsi2>
80214b34:	d9800317 	ldw	r6,12(sp)
80214b38:	da400117 	ldw	r9,4(sp)
80214b3c:	113ffd44 	addi	r4,r2,-11
80214b40:	00c00704 	movi	r3,28
80214b44:	19010e16 	blt	r3,r4,80214f80 <__divdf3+0x6b4>
80214b48:	00c00744 	movi	r3,29
80214b4c:	123ffe04 	addi	r8,r2,-8
80214b50:	1907c83a 	sub	r3,r3,r4
80214b54:	8a22983a 	sll	r17,r17,r8
80214b58:	30c6d83a 	srl	r3,r6,r3
80214b5c:	3210983a 	sll	r8,r6,r8
80214b60:	1c62b03a 	or	r17,r3,r17
80214b64:	1080fcc4 	addi	r2,r2,1011
80214b68:	0085c83a 	sub	r2,zero,r2
80214b6c:	000f883a 	mov	r7,zero
80214b70:	003f8606 	br	8021498c <__reset+0xfa1f498c>
80214b74:	0023883a 	mov	r17,zero
80214b78:	0011883a 	mov	r8,zero
80214b7c:	01c00044 	movi	r7,1
80214b80:	003f8206 	br	8021498c <__reset+0xfa1f498c>
80214b84:	01c000c4 	movi	r7,3
80214b88:	003f8006 	br	8021498c <__reset+0xfa1f498c>
80214b8c:	04c00104 	movi	r19,4
80214b90:	0021883a 	mov	r16,zero
80214b94:	0025883a 	mov	r18,zero
80214b98:	02400044 	movi	r9,1
80214b9c:	003f6906 	br	80214944 <__reset+0xfa1f4944>
80214ba0:	04c00304 	movi	r19,12
80214ba4:	024000c4 	movi	r9,3
80214ba8:	003f6606 	br	80214944 <__reset+0xfa1f4944>
80214bac:	01400434 	movhi	r5,16
80214bb0:	0007883a 	mov	r3,zero
80214bb4:	297fffc4 	addi	r5,r5,-1
80214bb8:	04bfffc4 	movi	r18,-1
80214bbc:	0081ffc4 	movi	r2,2047
80214bc0:	003fa106 	br	80214a48 <__reset+0xfa1f4a48>
80214bc4:	00c00044 	movi	r3,1
80214bc8:	1887c83a 	sub	r3,r3,r2
80214bcc:	01000e04 	movi	r4,56
80214bd0:	20c1210e 	bge	r4,r3,80215058 <__divdf3+0x78c>
80214bd4:	98c0004c 	andi	r3,r19,1
80214bd8:	0005883a 	mov	r2,zero
80214bdc:	000b883a 	mov	r5,zero
80214be0:	0025883a 	mov	r18,zero
80214be4:	003f9806 	br	80214a48 <__reset+0xfa1f4a48>
80214be8:	8c00fd36 	bltu	r17,r16,80214fe0 <__divdf3+0x714>
80214bec:	8440fb26 	beq	r16,r17,80214fdc <__divdf3+0x710>
80214bf0:	8007883a 	mov	r3,r16
80214bf4:	ad7fffc4 	addi	r21,r21,-1
80214bf8:	0021883a 	mov	r16,zero
80214bfc:	4004d63a 	srli	r2,r8,24
80214c00:	8822923a 	slli	r17,r17,8
80214c04:	1809883a 	mov	r4,r3
80214c08:	402c923a 	slli	r22,r8,8
80214c0c:	88b8b03a 	or	fp,r17,r2
80214c10:	e028d43a 	srli	r20,fp,16
80214c14:	d8c00015 	stw	r3,0(sp)
80214c18:	e5ffffcc 	andi	r23,fp,65535
80214c1c:	a00b883a 	mov	r5,r20
80214c20:	0213f640 	call	80213f64 <__udivsi3>
80214c24:	d8c00017 	ldw	r3,0(sp)
80214c28:	a00b883a 	mov	r5,r20
80214c2c:	d8800315 	stw	r2,12(sp)
80214c30:	1809883a 	mov	r4,r3
80214c34:	0213fc80 	call	80213fc8 <__umodsi3>
80214c38:	d9800317 	ldw	r6,12(sp)
80214c3c:	1006943a 	slli	r3,r2,16
80214c40:	9004d43a 	srli	r2,r18,16
80214c44:	b9a3383a 	mul	r17,r23,r6
80214c48:	10c4b03a 	or	r2,r2,r3
80214c4c:	1440062e 	bgeu	r2,r17,80214c68 <__divdf3+0x39c>
80214c50:	1705883a 	add	r2,r2,fp
80214c54:	30ffffc4 	addi	r3,r6,-1
80214c58:	1700ee36 	bltu	r2,fp,80215014 <__divdf3+0x748>
80214c5c:	1440ed2e 	bgeu	r2,r17,80215014 <__divdf3+0x748>
80214c60:	31bfff84 	addi	r6,r6,-2
80214c64:	1705883a 	add	r2,r2,fp
80214c68:	1463c83a 	sub	r17,r2,r17
80214c6c:	a00b883a 	mov	r5,r20
80214c70:	8809883a 	mov	r4,r17
80214c74:	d9800315 	stw	r6,12(sp)
80214c78:	0213f640 	call	80213f64 <__udivsi3>
80214c7c:	a00b883a 	mov	r5,r20
80214c80:	8809883a 	mov	r4,r17
80214c84:	d8800215 	stw	r2,8(sp)
80214c88:	0213fc80 	call	80213fc8 <__umodsi3>
80214c8c:	d9c00217 	ldw	r7,8(sp)
80214c90:	1004943a 	slli	r2,r2,16
80214c94:	94bfffcc 	andi	r18,r18,65535
80214c98:	b9d1383a 	mul	r8,r23,r7
80214c9c:	90a4b03a 	or	r18,r18,r2
80214ca0:	d9800317 	ldw	r6,12(sp)
80214ca4:	9200062e 	bgeu	r18,r8,80214cc0 <__divdf3+0x3f4>
80214ca8:	9725883a 	add	r18,r18,fp
80214cac:	38bfffc4 	addi	r2,r7,-1
80214cb0:	9700d636 	bltu	r18,fp,8021500c <__divdf3+0x740>
80214cb4:	9200d52e 	bgeu	r18,r8,8021500c <__divdf3+0x740>
80214cb8:	39ffff84 	addi	r7,r7,-2
80214cbc:	9725883a 	add	r18,r18,fp
80214cc0:	3004943a 	slli	r2,r6,16
80214cc4:	b012d43a 	srli	r9,r22,16
80214cc8:	b1bfffcc 	andi	r6,r22,65535
80214ccc:	11e2b03a 	or	r17,r2,r7
80214cd0:	8806d43a 	srli	r3,r17,16
80214cd4:	893fffcc 	andi	r4,r17,65535
80214cd8:	218b383a 	mul	r5,r4,r6
80214cdc:	30c5383a 	mul	r2,r6,r3
80214ce0:	2249383a 	mul	r4,r4,r9
80214ce4:	280ed43a 	srli	r7,r5,16
80214ce8:	9225c83a 	sub	r18,r18,r8
80214cec:	2089883a 	add	r4,r4,r2
80214cf0:	3909883a 	add	r4,r7,r4
80214cf4:	1a47383a 	mul	r3,r3,r9
80214cf8:	2080022e 	bgeu	r4,r2,80214d04 <__divdf3+0x438>
80214cfc:	00800074 	movhi	r2,1
80214d00:	1887883a 	add	r3,r3,r2
80214d04:	2004d43a 	srli	r2,r4,16
80214d08:	2008943a 	slli	r4,r4,16
80214d0c:	297fffcc 	andi	r5,r5,65535
80214d10:	10c7883a 	add	r3,r2,r3
80214d14:	2149883a 	add	r4,r4,r5
80214d18:	90c0a536 	bltu	r18,r3,80214fb0 <__divdf3+0x6e4>
80214d1c:	90c0bf26 	beq	r18,r3,8021501c <__divdf3+0x750>
80214d20:	90c7c83a 	sub	r3,r18,r3
80214d24:	810fc83a 	sub	r7,r16,r4
80214d28:	81e5803a 	cmpltu	r18,r16,r7
80214d2c:	1ca5c83a 	sub	r18,r3,r18
80214d30:	e480c126 	beq	fp,r18,80215038 <__divdf3+0x76c>
80214d34:	a00b883a 	mov	r5,r20
80214d38:	9009883a 	mov	r4,r18
80214d3c:	d9800315 	stw	r6,12(sp)
80214d40:	d9c00215 	stw	r7,8(sp)
80214d44:	da400115 	stw	r9,4(sp)
80214d48:	0213f640 	call	80213f64 <__udivsi3>
80214d4c:	a00b883a 	mov	r5,r20
80214d50:	9009883a 	mov	r4,r18
80214d54:	d8800015 	stw	r2,0(sp)
80214d58:	0213fc80 	call	80213fc8 <__umodsi3>
80214d5c:	d9c00217 	ldw	r7,8(sp)
80214d60:	da000017 	ldw	r8,0(sp)
80214d64:	1006943a 	slli	r3,r2,16
80214d68:	3804d43a 	srli	r2,r7,16
80214d6c:	ba21383a 	mul	r16,r23,r8
80214d70:	d9800317 	ldw	r6,12(sp)
80214d74:	10c4b03a 	or	r2,r2,r3
80214d78:	da400117 	ldw	r9,4(sp)
80214d7c:	1400062e 	bgeu	r2,r16,80214d98 <__divdf3+0x4cc>
80214d80:	1705883a 	add	r2,r2,fp
80214d84:	40ffffc4 	addi	r3,r8,-1
80214d88:	1700ad36 	bltu	r2,fp,80215040 <__divdf3+0x774>
80214d8c:	1400ac2e 	bgeu	r2,r16,80215040 <__divdf3+0x774>
80214d90:	423fff84 	addi	r8,r8,-2
80214d94:	1705883a 	add	r2,r2,fp
80214d98:	1421c83a 	sub	r16,r2,r16
80214d9c:	a00b883a 	mov	r5,r20
80214da0:	8009883a 	mov	r4,r16
80214da4:	d9800315 	stw	r6,12(sp)
80214da8:	d9c00215 	stw	r7,8(sp)
80214dac:	da000015 	stw	r8,0(sp)
80214db0:	da400115 	stw	r9,4(sp)
80214db4:	0213f640 	call	80213f64 <__udivsi3>
80214db8:	8009883a 	mov	r4,r16
80214dbc:	a00b883a 	mov	r5,r20
80214dc0:	1025883a 	mov	r18,r2
80214dc4:	0213fc80 	call	80213fc8 <__umodsi3>
80214dc8:	d9c00217 	ldw	r7,8(sp)
80214dcc:	1004943a 	slli	r2,r2,16
80214dd0:	bcaf383a 	mul	r23,r23,r18
80214dd4:	393fffcc 	andi	r4,r7,65535
80214dd8:	2088b03a 	or	r4,r4,r2
80214ddc:	d9800317 	ldw	r6,12(sp)
80214de0:	da000017 	ldw	r8,0(sp)
80214de4:	da400117 	ldw	r9,4(sp)
80214de8:	25c0062e 	bgeu	r4,r23,80214e04 <__divdf3+0x538>
80214dec:	2709883a 	add	r4,r4,fp
80214df0:	90bfffc4 	addi	r2,r18,-1
80214df4:	27009436 	bltu	r4,fp,80215048 <__divdf3+0x77c>
80214df8:	25c0932e 	bgeu	r4,r23,80215048 <__divdf3+0x77c>
80214dfc:	94bfff84 	addi	r18,r18,-2
80214e00:	2709883a 	add	r4,r4,fp
80214e04:	4004943a 	slli	r2,r8,16
80214e08:	25efc83a 	sub	r23,r4,r23
80214e0c:	1490b03a 	or	r8,r2,r18
80214e10:	4008d43a 	srli	r4,r8,16
80214e14:	40ffffcc 	andi	r3,r8,65535
80214e18:	30c5383a 	mul	r2,r6,r3
80214e1c:	1a47383a 	mul	r3,r3,r9
80214e20:	310d383a 	mul	r6,r6,r4
80214e24:	100ad43a 	srli	r5,r2,16
80214e28:	4913383a 	mul	r9,r9,r4
80214e2c:	1987883a 	add	r3,r3,r6
80214e30:	28c7883a 	add	r3,r5,r3
80214e34:	1980022e 	bgeu	r3,r6,80214e40 <__divdf3+0x574>
80214e38:	01000074 	movhi	r4,1
80214e3c:	4913883a 	add	r9,r9,r4
80214e40:	1808d43a 	srli	r4,r3,16
80214e44:	1806943a 	slli	r3,r3,16
80214e48:	10bfffcc 	andi	r2,r2,65535
80214e4c:	2253883a 	add	r9,r4,r9
80214e50:	1887883a 	add	r3,r3,r2
80214e54:	ba403836 	bltu	r23,r9,80214f38 <__divdf3+0x66c>
80214e58:	ba403626 	beq	r23,r9,80214f34 <__divdf3+0x668>
80214e5c:	42000054 	ori	r8,r8,1
80214e60:	a880ffc4 	addi	r2,r21,1023
80214e64:	00bf570e 	bge	zero,r2,80214bc4 <__reset+0xfa1f4bc4>
80214e68:	40c001cc 	andi	r3,r8,7
80214e6c:	18000726 	beq	r3,zero,80214e8c <__divdf3+0x5c0>
80214e70:	40c003cc 	andi	r3,r8,15
80214e74:	01000104 	movi	r4,4
80214e78:	19000426 	beq	r3,r4,80214e8c <__divdf3+0x5c0>
80214e7c:	4107883a 	add	r3,r8,r4
80214e80:	1a11803a 	cmpltu	r8,r3,r8
80214e84:	8a23883a 	add	r17,r17,r8
80214e88:	1811883a 	mov	r8,r3
80214e8c:	88c0402c 	andhi	r3,r17,256
80214e90:	18000426 	beq	r3,zero,80214ea4 <__divdf3+0x5d8>
80214e94:	00ffc034 	movhi	r3,65280
80214e98:	18ffffc4 	addi	r3,r3,-1
80214e9c:	a8810004 	addi	r2,r21,1024
80214ea0:	88e2703a 	and	r17,r17,r3
80214ea4:	00c1ff84 	movi	r3,2046
80214ea8:	18bee316 	blt	r3,r2,80214a38 <__reset+0xfa1f4a38>
80214eac:	8824977a 	slli	r18,r17,29
80214eb0:	4010d0fa 	srli	r8,r8,3
80214eb4:	8822927a 	slli	r17,r17,9
80214eb8:	1081ffcc 	andi	r2,r2,2047
80214ebc:	9224b03a 	or	r18,r18,r8
80214ec0:	880ad33a 	srli	r5,r17,12
80214ec4:	98c0004c 	andi	r3,r19,1
80214ec8:	003edf06 	br	80214a48 <__reset+0xfa1f4a48>
80214ecc:	8080022c 	andhi	r2,r16,8
80214ed0:	10001226 	beq	r2,zero,80214f1c <__divdf3+0x650>
80214ed4:	8880022c 	andhi	r2,r17,8
80214ed8:	1000101e 	bne	r2,zero,80214f1c <__divdf3+0x650>
80214edc:	00800434 	movhi	r2,16
80214ee0:	89400234 	orhi	r5,r17,8
80214ee4:	10bfffc4 	addi	r2,r2,-1
80214ee8:	b007883a 	mov	r3,r22
80214eec:	288a703a 	and	r5,r5,r2
80214ef0:	4025883a 	mov	r18,r8
80214ef4:	003f3106 	br	80214bbc <__reset+0xfa1f4bbc>
80214ef8:	008000c4 	movi	r2,3
80214efc:	3880a626 	beq	r7,r2,80215198 <__divdf3+0x8cc>
80214f00:	00800044 	movi	r2,1
80214f04:	3880521e 	bne	r7,r2,80215050 <__divdf3+0x784>
80214f08:	b807883a 	mov	r3,r23
80214f0c:	0005883a 	mov	r2,zero
80214f10:	000b883a 	mov	r5,zero
80214f14:	0025883a 	mov	r18,zero
80214f18:	003ecb06 	br	80214a48 <__reset+0xfa1f4a48>
80214f1c:	00800434 	movhi	r2,16
80214f20:	81400234 	orhi	r5,r16,8
80214f24:	10bfffc4 	addi	r2,r2,-1
80214f28:	a007883a 	mov	r3,r20
80214f2c:	288a703a 	and	r5,r5,r2
80214f30:	003f2206 	br	80214bbc <__reset+0xfa1f4bbc>
80214f34:	183fca26 	beq	r3,zero,80214e60 <__reset+0xfa1f4e60>
80214f38:	e5ef883a 	add	r23,fp,r23
80214f3c:	40bfffc4 	addi	r2,r8,-1
80214f40:	bf00392e 	bgeu	r23,fp,80215028 <__divdf3+0x75c>
80214f44:	1011883a 	mov	r8,r2
80214f48:	ba7fc41e 	bne	r23,r9,80214e5c <__reset+0xfa1f4e5c>
80214f4c:	b0ffc31e 	bne	r22,r3,80214e5c <__reset+0xfa1f4e5c>
80214f50:	003fc306 	br	80214e60 <__reset+0xfa1f4e60>
80214f54:	143ff604 	addi	r16,r2,-40
80214f58:	9c20983a 	sll	r16,r19,r16
80214f5c:	0025883a 	mov	r18,zero
80214f60:	003ee206 	br	80214aec <__reset+0xfa1f4aec>
80214f64:	d9800315 	stw	r6,12(sp)
80214f68:	d9c00215 	stw	r7,8(sp)
80214f6c:	020655c0 	call	8020655c <__clzsi2>
80214f70:	10800804 	addi	r2,r2,32
80214f74:	d9c00217 	ldw	r7,8(sp)
80214f78:	d9800317 	ldw	r6,12(sp)
80214f7c:	003ed106 	br	80214ac4 <__reset+0xfa1f4ac4>
80214f80:	147ff604 	addi	r17,r2,-40
80214f84:	3462983a 	sll	r17,r6,r17
80214f88:	0011883a 	mov	r8,zero
80214f8c:	003ef506 	br	80214b64 <__reset+0xfa1f4b64>
80214f90:	3009883a 	mov	r4,r6
80214f94:	d9800315 	stw	r6,12(sp)
80214f98:	da400115 	stw	r9,4(sp)
80214f9c:	020655c0 	call	8020655c <__clzsi2>
80214fa0:	10800804 	addi	r2,r2,32
80214fa4:	da400117 	ldw	r9,4(sp)
80214fa8:	d9800317 	ldw	r6,12(sp)
80214fac:	003ee306 	br	80214b3c <__reset+0xfa1f4b3c>
80214fb0:	85a1883a 	add	r16,r16,r22
80214fb4:	8585803a 	cmpltu	r2,r16,r22
80214fb8:	1705883a 	add	r2,r2,fp
80214fbc:	14a5883a 	add	r18,r2,r18
80214fc0:	88bfffc4 	addi	r2,r17,-1
80214fc4:	e4800c2e 	bgeu	fp,r18,80214ff8 <__divdf3+0x72c>
80214fc8:	90c03e36 	bltu	r18,r3,802150c4 <__divdf3+0x7f8>
80214fcc:	1c806926 	beq	r3,r18,80215174 <__divdf3+0x8a8>
80214fd0:	90c7c83a 	sub	r3,r18,r3
80214fd4:	1023883a 	mov	r17,r2
80214fd8:	003f5206 	br	80214d24 <__reset+0xfa1f4d24>
80214fdc:	923f0436 	bltu	r18,r8,80214bf0 <__reset+0xfa1f4bf0>
80214fe0:	800897fa 	slli	r4,r16,31
80214fe4:	9004d07a 	srli	r2,r18,1
80214fe8:	8006d07a 	srli	r3,r16,1
80214fec:	902097fa 	slli	r16,r18,31
80214ff0:	20a4b03a 	or	r18,r4,r2
80214ff4:	003f0106 	br	80214bfc <__reset+0xfa1f4bfc>
80214ff8:	e4bff51e 	bne	fp,r18,80214fd0 <__reset+0xfa1f4fd0>
80214ffc:	85bff22e 	bgeu	r16,r22,80214fc8 <__reset+0xfa1f4fc8>
80215000:	e0c7c83a 	sub	r3,fp,r3
80215004:	1023883a 	mov	r17,r2
80215008:	003f4606 	br	80214d24 <__reset+0xfa1f4d24>
8021500c:	100f883a 	mov	r7,r2
80215010:	003f2b06 	br	80214cc0 <__reset+0xfa1f4cc0>
80215014:	180d883a 	mov	r6,r3
80215018:	003f1306 	br	80214c68 <__reset+0xfa1f4c68>
8021501c:	813fe436 	bltu	r16,r4,80214fb0 <__reset+0xfa1f4fb0>
80215020:	0007883a 	mov	r3,zero
80215024:	003f3f06 	br	80214d24 <__reset+0xfa1f4d24>
80215028:	ba402c36 	bltu	r23,r9,802150dc <__divdf3+0x810>
8021502c:	4dc05426 	beq	r9,r23,80215180 <__divdf3+0x8b4>
80215030:	1011883a 	mov	r8,r2
80215034:	003f8906 	br	80214e5c <__reset+0xfa1f4e5c>
80215038:	023fffc4 	movi	r8,-1
8021503c:	003f8806 	br	80214e60 <__reset+0xfa1f4e60>
80215040:	1811883a 	mov	r8,r3
80215044:	003f5406 	br	80214d98 <__reset+0xfa1f4d98>
80215048:	1025883a 	mov	r18,r2
8021504c:	003f6d06 	br	80214e04 <__reset+0xfa1f4e04>
80215050:	b827883a 	mov	r19,r23
80215054:	003f8206 	br	80214e60 <__reset+0xfa1f4e60>
80215058:	010007c4 	movi	r4,31
8021505c:	20c02616 	blt	r4,r3,802150f8 <__divdf3+0x82c>
80215060:	00800804 	movi	r2,32
80215064:	10c5c83a 	sub	r2,r2,r3
80215068:	888a983a 	sll	r5,r17,r2
8021506c:	40c8d83a 	srl	r4,r8,r3
80215070:	4084983a 	sll	r2,r8,r2
80215074:	88e2d83a 	srl	r17,r17,r3
80215078:	2906b03a 	or	r3,r5,r4
8021507c:	1004c03a 	cmpne	r2,r2,zero
80215080:	1886b03a 	or	r3,r3,r2
80215084:	188001cc 	andi	r2,r3,7
80215088:	10000726 	beq	r2,zero,802150a8 <__divdf3+0x7dc>
8021508c:	188003cc 	andi	r2,r3,15
80215090:	01000104 	movi	r4,4
80215094:	11000426 	beq	r2,r4,802150a8 <__divdf3+0x7dc>
80215098:	1805883a 	mov	r2,r3
8021509c:	10c00104 	addi	r3,r2,4
802150a0:	1885803a 	cmpltu	r2,r3,r2
802150a4:	88a3883a 	add	r17,r17,r2
802150a8:	8880202c 	andhi	r2,r17,128
802150ac:	10002726 	beq	r2,zero,8021514c <__divdf3+0x880>
802150b0:	98c0004c 	andi	r3,r19,1
802150b4:	00800044 	movi	r2,1
802150b8:	000b883a 	mov	r5,zero
802150bc:	0025883a 	mov	r18,zero
802150c0:	003e6106 	br	80214a48 <__reset+0xfa1f4a48>
802150c4:	85a1883a 	add	r16,r16,r22
802150c8:	8585803a 	cmpltu	r2,r16,r22
802150cc:	1705883a 	add	r2,r2,fp
802150d0:	14a5883a 	add	r18,r2,r18
802150d4:	8c7fff84 	addi	r17,r17,-2
802150d8:	003f1106 	br	80214d20 <__reset+0xfa1f4d20>
802150dc:	b589883a 	add	r4,r22,r22
802150e0:	25ad803a 	cmpltu	r22,r4,r22
802150e4:	b739883a 	add	fp,r22,fp
802150e8:	40bfff84 	addi	r2,r8,-2
802150ec:	bf2f883a 	add	r23,r23,fp
802150f0:	202d883a 	mov	r22,r4
802150f4:	003f9306 	br	80214f44 <__reset+0xfa1f4f44>
802150f8:	013ff844 	movi	r4,-31
802150fc:	2085c83a 	sub	r2,r4,r2
80215100:	8888d83a 	srl	r4,r17,r2
80215104:	00800804 	movi	r2,32
80215108:	18802126 	beq	r3,r2,80215190 <__divdf3+0x8c4>
8021510c:	00801004 	movi	r2,64
80215110:	10c5c83a 	sub	r2,r2,r3
80215114:	8884983a 	sll	r2,r17,r2
80215118:	1204b03a 	or	r2,r2,r8
8021511c:	1004c03a 	cmpne	r2,r2,zero
80215120:	2084b03a 	or	r2,r4,r2
80215124:	144001cc 	andi	r17,r2,7
80215128:	88000d1e 	bne	r17,zero,80215160 <__divdf3+0x894>
8021512c:	000b883a 	mov	r5,zero
80215130:	1024d0fa 	srli	r18,r2,3
80215134:	98c0004c 	andi	r3,r19,1
80215138:	0005883a 	mov	r2,zero
8021513c:	9464b03a 	or	r18,r18,r17
80215140:	003e4106 	br	80214a48 <__reset+0xfa1f4a48>
80215144:	1007883a 	mov	r3,r2
80215148:	0023883a 	mov	r17,zero
8021514c:	880a927a 	slli	r5,r17,9
80215150:	1805883a 	mov	r2,r3
80215154:	8822977a 	slli	r17,r17,29
80215158:	280ad33a 	srli	r5,r5,12
8021515c:	003ff406 	br	80215130 <__reset+0xfa1f5130>
80215160:	10c003cc 	andi	r3,r2,15
80215164:	01000104 	movi	r4,4
80215168:	193ff626 	beq	r3,r4,80215144 <__reset+0xfa1f5144>
8021516c:	0023883a 	mov	r17,zero
80215170:	003fca06 	br	8021509c <__reset+0xfa1f509c>
80215174:	813fd336 	bltu	r16,r4,802150c4 <__reset+0xfa1f50c4>
80215178:	1023883a 	mov	r17,r2
8021517c:	003fa806 	br	80215020 <__reset+0xfa1f5020>
80215180:	b0ffd636 	bltu	r22,r3,802150dc <__reset+0xfa1f50dc>
80215184:	1011883a 	mov	r8,r2
80215188:	b0ff341e 	bne	r22,r3,80214e5c <__reset+0xfa1f4e5c>
8021518c:	003f3406 	br	80214e60 <__reset+0xfa1f4e60>
80215190:	0005883a 	mov	r2,zero
80215194:	003fe006 	br	80215118 <__reset+0xfa1f5118>
80215198:	00800434 	movhi	r2,16
8021519c:	89400234 	orhi	r5,r17,8
802151a0:	10bfffc4 	addi	r2,r2,-1
802151a4:	b807883a 	mov	r3,r23
802151a8:	288a703a 	and	r5,r5,r2
802151ac:	4025883a 	mov	r18,r8
802151b0:	003e8206 	br	80214bbc <__reset+0xfa1f4bbc>

802151b4 <__eqdf2>:
802151b4:	2804d53a 	srli	r2,r5,20
802151b8:	3806d53a 	srli	r3,r7,20
802151bc:	02000434 	movhi	r8,16
802151c0:	423fffc4 	addi	r8,r8,-1
802151c4:	1081ffcc 	andi	r2,r2,2047
802151c8:	0281ffc4 	movi	r10,2047
802151cc:	2a12703a 	and	r9,r5,r8
802151d0:	18c1ffcc 	andi	r3,r3,2047
802151d4:	3a10703a 	and	r8,r7,r8
802151d8:	280ad7fa 	srli	r5,r5,31
802151dc:	380ed7fa 	srli	r7,r7,31
802151e0:	12801026 	beq	r2,r10,80215224 <__eqdf2+0x70>
802151e4:	0281ffc4 	movi	r10,2047
802151e8:	1a800a26 	beq	r3,r10,80215214 <__eqdf2+0x60>
802151ec:	10c00226 	beq	r2,r3,802151f8 <__eqdf2+0x44>
802151f0:	00800044 	movi	r2,1
802151f4:	f800283a 	ret
802151f8:	4a3ffd1e 	bne	r9,r8,802151f0 <__reset+0xfa1f51f0>
802151fc:	21bffc1e 	bne	r4,r6,802151f0 <__reset+0xfa1f51f0>
80215200:	29c00c26 	beq	r5,r7,80215234 <__eqdf2+0x80>
80215204:	103ffa1e 	bne	r2,zero,802151f0 <__reset+0xfa1f51f0>
80215208:	2244b03a 	or	r2,r4,r9
8021520c:	1004c03a 	cmpne	r2,r2,zero
80215210:	f800283a 	ret
80215214:	3214b03a 	or	r10,r6,r8
80215218:	503ff426 	beq	r10,zero,802151ec <__reset+0xfa1f51ec>
8021521c:	00800044 	movi	r2,1
80215220:	f800283a 	ret
80215224:	2254b03a 	or	r10,r4,r9
80215228:	503fee26 	beq	r10,zero,802151e4 <__reset+0xfa1f51e4>
8021522c:	00800044 	movi	r2,1
80215230:	f800283a 	ret
80215234:	0005883a 	mov	r2,zero
80215238:	f800283a 	ret

8021523c <__gedf2>:
8021523c:	2804d53a 	srli	r2,r5,20
80215240:	3806d53a 	srli	r3,r7,20
80215244:	02000434 	movhi	r8,16
80215248:	423fffc4 	addi	r8,r8,-1
8021524c:	1081ffcc 	andi	r2,r2,2047
80215250:	0241ffc4 	movi	r9,2047
80215254:	2a14703a 	and	r10,r5,r8
80215258:	18c1ffcc 	andi	r3,r3,2047
8021525c:	3a10703a 	and	r8,r7,r8
80215260:	280ad7fa 	srli	r5,r5,31
80215264:	380ed7fa 	srli	r7,r7,31
80215268:	12401d26 	beq	r2,r9,802152e0 <__gedf2+0xa4>
8021526c:	0241ffc4 	movi	r9,2047
80215270:	1a401226 	beq	r3,r9,802152bc <__gedf2+0x80>
80215274:	1000081e 	bne	r2,zero,80215298 <__gedf2+0x5c>
80215278:	2296b03a 	or	r11,r4,r10
8021527c:	5813003a 	cmpeq	r9,r11,zero
80215280:	1800091e 	bne	r3,zero,802152a8 <__gedf2+0x6c>
80215284:	3218b03a 	or	r12,r6,r8
80215288:	6000071e 	bne	r12,zero,802152a8 <__gedf2+0x6c>
8021528c:	0005883a 	mov	r2,zero
80215290:	5800101e 	bne	r11,zero,802152d4 <__gedf2+0x98>
80215294:	f800283a 	ret
80215298:	18000c1e 	bne	r3,zero,802152cc <__gedf2+0x90>
8021529c:	3212b03a 	or	r9,r6,r8
802152a0:	48000c26 	beq	r9,zero,802152d4 <__gedf2+0x98>
802152a4:	0013883a 	mov	r9,zero
802152a8:	39c03fcc 	andi	r7,r7,255
802152ac:	48000826 	beq	r9,zero,802152d0 <__gedf2+0x94>
802152b0:	38000926 	beq	r7,zero,802152d8 <__gedf2+0x9c>
802152b4:	00800044 	movi	r2,1
802152b8:	f800283a 	ret
802152bc:	3212b03a 	or	r9,r6,r8
802152c0:	483fec26 	beq	r9,zero,80215274 <__reset+0xfa1f5274>
802152c4:	00bfff84 	movi	r2,-2
802152c8:	f800283a 	ret
802152cc:	39c03fcc 	andi	r7,r7,255
802152d0:	29c00626 	beq	r5,r7,802152ec <__gedf2+0xb0>
802152d4:	283ff726 	beq	r5,zero,802152b4 <__reset+0xfa1f52b4>
802152d8:	00bfffc4 	movi	r2,-1
802152dc:	f800283a 	ret
802152e0:	2292b03a 	or	r9,r4,r10
802152e4:	483fe126 	beq	r9,zero,8021526c <__reset+0xfa1f526c>
802152e8:	003ff606 	br	802152c4 <__reset+0xfa1f52c4>
802152ec:	18bff916 	blt	r3,r2,802152d4 <__reset+0xfa1f52d4>
802152f0:	10c00316 	blt	r2,r3,80215300 <__gedf2+0xc4>
802152f4:	42bff736 	bltu	r8,r10,802152d4 <__reset+0xfa1f52d4>
802152f8:	52000326 	beq	r10,r8,80215308 <__gedf2+0xcc>
802152fc:	5200042e 	bgeu	r10,r8,80215310 <__gedf2+0xd4>
80215300:	283fec1e 	bne	r5,zero,802152b4 <__reset+0xfa1f52b4>
80215304:	003ff406 	br	802152d8 <__reset+0xfa1f52d8>
80215308:	313ff236 	bltu	r6,r4,802152d4 <__reset+0xfa1f52d4>
8021530c:	21bffc36 	bltu	r4,r6,80215300 <__reset+0xfa1f5300>
80215310:	0005883a 	mov	r2,zero
80215314:	f800283a 	ret

80215318 <__ledf2>:
80215318:	2804d53a 	srli	r2,r5,20
8021531c:	3810d53a 	srli	r8,r7,20
80215320:	00c00434 	movhi	r3,16
80215324:	18ffffc4 	addi	r3,r3,-1
80215328:	1081ffcc 	andi	r2,r2,2047
8021532c:	0241ffc4 	movi	r9,2047
80215330:	28d4703a 	and	r10,r5,r3
80215334:	4201ffcc 	andi	r8,r8,2047
80215338:	38c6703a 	and	r3,r7,r3
8021533c:	280ad7fa 	srli	r5,r5,31
80215340:	380ed7fa 	srli	r7,r7,31
80215344:	12401f26 	beq	r2,r9,802153c4 <__ledf2+0xac>
80215348:	0241ffc4 	movi	r9,2047
8021534c:	42401426 	beq	r8,r9,802153a0 <__ledf2+0x88>
80215350:	1000091e 	bne	r2,zero,80215378 <__ledf2+0x60>
80215354:	2296b03a 	or	r11,r4,r10
80215358:	5813003a 	cmpeq	r9,r11,zero
8021535c:	29403fcc 	andi	r5,r5,255
80215360:	40000a1e 	bne	r8,zero,8021538c <__ledf2+0x74>
80215364:	30d8b03a 	or	r12,r6,r3
80215368:	6000081e 	bne	r12,zero,8021538c <__ledf2+0x74>
8021536c:	0005883a 	mov	r2,zero
80215370:	5800111e 	bne	r11,zero,802153b8 <__ledf2+0xa0>
80215374:	f800283a 	ret
80215378:	29403fcc 	andi	r5,r5,255
8021537c:	40000c1e 	bne	r8,zero,802153b0 <__ledf2+0x98>
80215380:	30d2b03a 	or	r9,r6,r3
80215384:	48000c26 	beq	r9,zero,802153b8 <__ledf2+0xa0>
80215388:	0013883a 	mov	r9,zero
8021538c:	39c03fcc 	andi	r7,r7,255
80215390:	48000826 	beq	r9,zero,802153b4 <__ledf2+0x9c>
80215394:	38001126 	beq	r7,zero,802153dc <__ledf2+0xc4>
80215398:	00800044 	movi	r2,1
8021539c:	f800283a 	ret
802153a0:	30d2b03a 	or	r9,r6,r3
802153a4:	483fea26 	beq	r9,zero,80215350 <__reset+0xfa1f5350>
802153a8:	00800084 	movi	r2,2
802153ac:	f800283a 	ret
802153b0:	39c03fcc 	andi	r7,r7,255
802153b4:	39400726 	beq	r7,r5,802153d4 <__ledf2+0xbc>
802153b8:	2800081e 	bne	r5,zero,802153dc <__ledf2+0xc4>
802153bc:	00800044 	movi	r2,1
802153c0:	f800283a 	ret
802153c4:	2292b03a 	or	r9,r4,r10
802153c8:	483fdf26 	beq	r9,zero,80215348 <__reset+0xfa1f5348>
802153cc:	00800084 	movi	r2,2
802153d0:	f800283a 	ret
802153d4:	4080030e 	bge	r8,r2,802153e4 <__ledf2+0xcc>
802153d8:	383fef26 	beq	r7,zero,80215398 <__reset+0xfa1f5398>
802153dc:	00bfffc4 	movi	r2,-1
802153e0:	f800283a 	ret
802153e4:	123feb16 	blt	r2,r8,80215394 <__reset+0xfa1f5394>
802153e8:	1abff336 	bltu	r3,r10,802153b8 <__reset+0xfa1f53b8>
802153ec:	50c00326 	beq	r10,r3,802153fc <__ledf2+0xe4>
802153f0:	50c0042e 	bgeu	r10,r3,80215404 <__ledf2+0xec>
802153f4:	283fe81e 	bne	r5,zero,80215398 <__reset+0xfa1f5398>
802153f8:	003ff806 	br	802153dc <__reset+0xfa1f53dc>
802153fc:	313fee36 	bltu	r6,r4,802153b8 <__reset+0xfa1f53b8>
80215400:	21bffc36 	bltu	r4,r6,802153f4 <__reset+0xfa1f53f4>
80215404:	0005883a 	mov	r2,zero
80215408:	f800283a 	ret

8021540c <__muldf3>:
8021540c:	defff304 	addi	sp,sp,-52
80215410:	2804d53a 	srli	r2,r5,20
80215414:	dd800915 	stw	r22,36(sp)
80215418:	282cd7fa 	srli	r22,r5,31
8021541c:	dc000315 	stw	r16,12(sp)
80215420:	04000434 	movhi	r16,16
80215424:	dd400815 	stw	r21,32(sp)
80215428:	dc800515 	stw	r18,20(sp)
8021542c:	843fffc4 	addi	r16,r16,-1
80215430:	dfc00c15 	stw	ra,48(sp)
80215434:	df000b15 	stw	fp,44(sp)
80215438:	ddc00a15 	stw	r23,40(sp)
8021543c:	dd000715 	stw	r20,28(sp)
80215440:	dcc00615 	stw	r19,24(sp)
80215444:	dc400415 	stw	r17,16(sp)
80215448:	1481ffcc 	andi	r18,r2,2047
8021544c:	2c20703a 	and	r16,r5,r16
80215450:	b02b883a 	mov	r21,r22
80215454:	b2403fcc 	andi	r9,r22,255
80215458:	90006026 	beq	r18,zero,802155dc <__muldf3+0x1d0>
8021545c:	0081ffc4 	movi	r2,2047
80215460:	2029883a 	mov	r20,r4
80215464:	90803626 	beq	r18,r2,80215540 <__muldf3+0x134>
80215468:	80800434 	orhi	r2,r16,16
8021546c:	100490fa 	slli	r2,r2,3
80215470:	2020d77a 	srli	r16,r4,29
80215474:	202890fa 	slli	r20,r4,3
80215478:	94bf0044 	addi	r18,r18,-1023
8021547c:	80a0b03a 	or	r16,r16,r2
80215480:	0027883a 	mov	r19,zero
80215484:	0039883a 	mov	fp,zero
80215488:	3804d53a 	srli	r2,r7,20
8021548c:	382ed7fa 	srli	r23,r7,31
80215490:	04400434 	movhi	r17,16
80215494:	8c7fffc4 	addi	r17,r17,-1
80215498:	1081ffcc 	andi	r2,r2,2047
8021549c:	3011883a 	mov	r8,r6
802154a0:	3c62703a 	and	r17,r7,r17
802154a4:	ba803fcc 	andi	r10,r23,255
802154a8:	10006d26 	beq	r2,zero,80215660 <__muldf3+0x254>
802154ac:	00c1ffc4 	movi	r3,2047
802154b0:	10c06526 	beq	r2,r3,80215648 <__muldf3+0x23c>
802154b4:	88c00434 	orhi	r3,r17,16
802154b8:	180690fa 	slli	r3,r3,3
802154bc:	3022d77a 	srli	r17,r6,29
802154c0:	301090fa 	slli	r8,r6,3
802154c4:	10bf0044 	addi	r2,r2,-1023
802154c8:	88e2b03a 	or	r17,r17,r3
802154cc:	000b883a 	mov	r5,zero
802154d0:	9085883a 	add	r2,r18,r2
802154d4:	2cc8b03a 	or	r4,r5,r19
802154d8:	00c003c4 	movi	r3,15
802154dc:	bdacf03a 	xor	r22,r23,r22
802154e0:	12c00044 	addi	r11,r2,1
802154e4:	19009936 	bltu	r3,r4,8021574c <__muldf3+0x340>
802154e8:	200890ba 	slli	r4,r4,2
802154ec:	00e00874 	movhi	r3,32801
802154f0:	18d54004 	addi	r3,r3,21760
802154f4:	20c9883a 	add	r4,r4,r3
802154f8:	20c00017 	ldw	r3,0(r4)
802154fc:	1800683a 	jmp	r3
80215500:	8021574c 	andi	zero,r16,34141
80215504:	80215560 	cmpeqi	zero,r16,-31403
80215508:	80215560 	cmpeqi	zero,r16,-31403
8021550c:	8021555c 	xori	zero,r16,34133
80215510:	80215728 	cmpgeui	zero,r16,34140
80215514:	80215728 	cmpgeui	zero,r16,34140
80215518:	80215710 	cmplti	zero,r16,-31396
8021551c:	8021555c 	xori	zero,r16,34133
80215520:	80215728 	cmpgeui	zero,r16,34140
80215524:	80215710 	cmplti	zero,r16,-31396
80215528:	80215728 	cmpgeui	zero,r16,34140
8021552c:	8021555c 	xori	zero,r16,34133
80215530:	80215738 	rdprs	zero,r16,-31396
80215534:	80215738 	rdprs	zero,r16,-31396
80215538:	80215738 	rdprs	zero,r16,-31396
8021553c:	80215954 	ori	zero,r16,34149
80215540:	2404b03a 	or	r2,r4,r16
80215544:	10006f1e 	bne	r2,zero,80215704 <__muldf3+0x2f8>
80215548:	04c00204 	movi	r19,8
8021554c:	0021883a 	mov	r16,zero
80215550:	0029883a 	mov	r20,zero
80215554:	07000084 	movi	fp,2
80215558:	003fcb06 	br	80215488 <__reset+0xfa1f5488>
8021555c:	502d883a 	mov	r22,r10
80215560:	00800084 	movi	r2,2
80215564:	28805726 	beq	r5,r2,802156c4 <__muldf3+0x2b8>
80215568:	008000c4 	movi	r2,3
8021556c:	28816626 	beq	r5,r2,80215b08 <__muldf3+0x6fc>
80215570:	00800044 	movi	r2,1
80215574:	2881411e 	bne	r5,r2,80215a7c <__muldf3+0x670>
80215578:	b02b883a 	mov	r21,r22
8021557c:	0005883a 	mov	r2,zero
80215580:	000b883a 	mov	r5,zero
80215584:	0029883a 	mov	r20,zero
80215588:	1004953a 	slli	r2,r2,20
8021558c:	a8c03fcc 	andi	r3,r21,255
80215590:	04400434 	movhi	r17,16
80215594:	8c7fffc4 	addi	r17,r17,-1
80215598:	180697fa 	slli	r3,r3,31
8021559c:	2c4a703a 	and	r5,r5,r17
802155a0:	288ab03a 	or	r5,r5,r2
802155a4:	28c6b03a 	or	r3,r5,r3
802155a8:	a005883a 	mov	r2,r20
802155ac:	dfc00c17 	ldw	ra,48(sp)
802155b0:	df000b17 	ldw	fp,44(sp)
802155b4:	ddc00a17 	ldw	r23,40(sp)
802155b8:	dd800917 	ldw	r22,36(sp)
802155bc:	dd400817 	ldw	r21,32(sp)
802155c0:	dd000717 	ldw	r20,28(sp)
802155c4:	dcc00617 	ldw	r19,24(sp)
802155c8:	dc800517 	ldw	r18,20(sp)
802155cc:	dc400417 	ldw	r17,16(sp)
802155d0:	dc000317 	ldw	r16,12(sp)
802155d4:	dec00d04 	addi	sp,sp,52
802155d8:	f800283a 	ret
802155dc:	2404b03a 	or	r2,r4,r16
802155e0:	2027883a 	mov	r19,r4
802155e4:	10004226 	beq	r2,zero,802156f0 <__muldf3+0x2e4>
802155e8:	8000fc26 	beq	r16,zero,802159dc <__muldf3+0x5d0>
802155ec:	8009883a 	mov	r4,r16
802155f0:	d9800215 	stw	r6,8(sp)
802155f4:	d9c00015 	stw	r7,0(sp)
802155f8:	da400115 	stw	r9,4(sp)
802155fc:	020655c0 	call	8020655c <__clzsi2>
80215600:	d9800217 	ldw	r6,8(sp)
80215604:	d9c00017 	ldw	r7,0(sp)
80215608:	da400117 	ldw	r9,4(sp)
8021560c:	113ffd44 	addi	r4,r2,-11
80215610:	00c00704 	movi	r3,28
80215614:	1900ed16 	blt	r3,r4,802159cc <__muldf3+0x5c0>
80215618:	00c00744 	movi	r3,29
8021561c:	147ffe04 	addi	r17,r2,-8
80215620:	1907c83a 	sub	r3,r3,r4
80215624:	8460983a 	sll	r16,r16,r17
80215628:	98c6d83a 	srl	r3,r19,r3
8021562c:	9c68983a 	sll	r20,r19,r17
80215630:	1c20b03a 	or	r16,r3,r16
80215634:	1080fcc4 	addi	r2,r2,1011
80215638:	00a5c83a 	sub	r18,zero,r2
8021563c:	0027883a 	mov	r19,zero
80215640:	0039883a 	mov	fp,zero
80215644:	003f9006 	br	80215488 <__reset+0xfa1f5488>
80215648:	3446b03a 	or	r3,r6,r17
8021564c:	1800261e 	bne	r3,zero,802156e8 <__muldf3+0x2dc>
80215650:	0023883a 	mov	r17,zero
80215654:	0011883a 	mov	r8,zero
80215658:	01400084 	movi	r5,2
8021565c:	003f9c06 	br	802154d0 <__reset+0xfa1f54d0>
80215660:	3446b03a 	or	r3,r6,r17
80215664:	18001c26 	beq	r3,zero,802156d8 <__muldf3+0x2cc>
80215668:	8800ce26 	beq	r17,zero,802159a4 <__muldf3+0x598>
8021566c:	8809883a 	mov	r4,r17
80215670:	d9800215 	stw	r6,8(sp)
80215674:	da400115 	stw	r9,4(sp)
80215678:	da800015 	stw	r10,0(sp)
8021567c:	020655c0 	call	8020655c <__clzsi2>
80215680:	d9800217 	ldw	r6,8(sp)
80215684:	da400117 	ldw	r9,4(sp)
80215688:	da800017 	ldw	r10,0(sp)
8021568c:	113ffd44 	addi	r4,r2,-11
80215690:	00c00704 	movi	r3,28
80215694:	1900bf16 	blt	r3,r4,80215994 <__muldf3+0x588>
80215698:	00c00744 	movi	r3,29
8021569c:	123ffe04 	addi	r8,r2,-8
802156a0:	1907c83a 	sub	r3,r3,r4
802156a4:	8a22983a 	sll	r17,r17,r8
802156a8:	30c6d83a 	srl	r3,r6,r3
802156ac:	3210983a 	sll	r8,r6,r8
802156b0:	1c62b03a 	or	r17,r3,r17
802156b4:	1080fcc4 	addi	r2,r2,1011
802156b8:	0085c83a 	sub	r2,zero,r2
802156bc:	000b883a 	mov	r5,zero
802156c0:	003f8306 	br	802154d0 <__reset+0xfa1f54d0>
802156c4:	b02b883a 	mov	r21,r22
802156c8:	0081ffc4 	movi	r2,2047
802156cc:	000b883a 	mov	r5,zero
802156d0:	0029883a 	mov	r20,zero
802156d4:	003fac06 	br	80215588 <__reset+0xfa1f5588>
802156d8:	0023883a 	mov	r17,zero
802156dc:	0011883a 	mov	r8,zero
802156e0:	01400044 	movi	r5,1
802156e4:	003f7a06 	br	802154d0 <__reset+0xfa1f54d0>
802156e8:	014000c4 	movi	r5,3
802156ec:	003f7806 	br	802154d0 <__reset+0xfa1f54d0>
802156f0:	04c00104 	movi	r19,4
802156f4:	0021883a 	mov	r16,zero
802156f8:	0029883a 	mov	r20,zero
802156fc:	07000044 	movi	fp,1
80215700:	003f6106 	br	80215488 <__reset+0xfa1f5488>
80215704:	04c00304 	movi	r19,12
80215708:	070000c4 	movi	fp,3
8021570c:	003f5e06 	br	80215488 <__reset+0xfa1f5488>
80215710:	01400434 	movhi	r5,16
80215714:	002b883a 	mov	r21,zero
80215718:	297fffc4 	addi	r5,r5,-1
8021571c:	053fffc4 	movi	r20,-1
80215720:	0081ffc4 	movi	r2,2047
80215724:	003f9806 	br	80215588 <__reset+0xfa1f5588>
80215728:	8023883a 	mov	r17,r16
8021572c:	a011883a 	mov	r8,r20
80215730:	e00b883a 	mov	r5,fp
80215734:	003f8a06 	br	80215560 <__reset+0xfa1f5560>
80215738:	8023883a 	mov	r17,r16
8021573c:	a011883a 	mov	r8,r20
80215740:	482d883a 	mov	r22,r9
80215744:	e00b883a 	mov	r5,fp
80215748:	003f8506 	br	80215560 <__reset+0xfa1f5560>
8021574c:	a00ad43a 	srli	r5,r20,16
80215750:	401ad43a 	srli	r13,r8,16
80215754:	a53fffcc 	andi	r20,r20,65535
80215758:	423fffcc 	andi	r8,r8,65535
8021575c:	4519383a 	mul	r12,r8,r20
80215760:	4147383a 	mul	r3,r8,r5
80215764:	6d09383a 	mul	r4,r13,r20
80215768:	600cd43a 	srli	r6,r12,16
8021576c:	2b5d383a 	mul	r14,r5,r13
80215770:	20c9883a 	add	r4,r4,r3
80215774:	310d883a 	add	r6,r6,r4
80215778:	30c0022e 	bgeu	r6,r3,80215784 <__muldf3+0x378>
8021577c:	00c00074 	movhi	r3,1
80215780:	70dd883a 	add	r14,r14,r3
80215784:	8826d43a 	srli	r19,r17,16
80215788:	8bffffcc 	andi	r15,r17,65535
8021578c:	7d23383a 	mul	r17,r15,r20
80215790:	7949383a 	mul	r4,r15,r5
80215794:	9d29383a 	mul	r20,r19,r20
80215798:	8814d43a 	srli	r10,r17,16
8021579c:	3012943a 	slli	r9,r6,16
802157a0:	a129883a 	add	r20,r20,r4
802157a4:	633fffcc 	andi	r12,r12,65535
802157a8:	5515883a 	add	r10,r10,r20
802157ac:	3006d43a 	srli	r3,r6,16
802157b0:	4b13883a 	add	r9,r9,r12
802157b4:	2ccb383a 	mul	r5,r5,r19
802157b8:	5100022e 	bgeu	r10,r4,802157c4 <__muldf3+0x3b8>
802157bc:	01000074 	movhi	r4,1
802157c0:	290b883a 	add	r5,r5,r4
802157c4:	802ad43a 	srli	r21,r16,16
802157c8:	843fffcc 	andi	r16,r16,65535
802157cc:	440d383a 	mul	r6,r8,r16
802157d0:	4565383a 	mul	r18,r8,r21
802157d4:	8349383a 	mul	r4,r16,r13
802157d8:	500e943a 	slli	r7,r10,16
802157dc:	3010d43a 	srli	r8,r6,16
802157e0:	5028d43a 	srli	r20,r10,16
802157e4:	2489883a 	add	r4,r4,r18
802157e8:	8abfffcc 	andi	r10,r17,65535
802157ec:	3a95883a 	add	r10,r7,r10
802157f0:	4119883a 	add	r12,r8,r4
802157f4:	a169883a 	add	r20,r20,r5
802157f8:	1a87883a 	add	r3,r3,r10
802157fc:	6d5b383a 	mul	r13,r13,r21
80215800:	6480022e 	bgeu	r12,r18,8021580c <__muldf3+0x400>
80215804:	01000074 	movhi	r4,1
80215808:	691b883a 	add	r13,r13,r4
8021580c:	7c25383a 	mul	r18,r15,r16
80215810:	7d4b383a 	mul	r5,r15,r21
80215814:	84cf383a 	mul	r7,r16,r19
80215818:	901ed43a 	srli	r15,r18,16
8021581c:	6008d43a 	srli	r4,r12,16
80215820:	6010943a 	slli	r8,r12,16
80215824:	394f883a 	add	r7,r7,r5
80215828:	333fffcc 	andi	r12,r6,65535
8021582c:	79df883a 	add	r15,r15,r7
80215830:	235b883a 	add	r13,r4,r13
80215834:	9d63383a 	mul	r17,r19,r21
80215838:	4309883a 	add	r4,r8,r12
8021583c:	7940022e 	bgeu	r15,r5,80215848 <__muldf3+0x43c>
80215840:	01400074 	movhi	r5,1
80215844:	8963883a 	add	r17,r17,r5
80215848:	780a943a 	slli	r5,r15,16
8021584c:	91bfffcc 	andi	r6,r18,65535
80215850:	70c7883a 	add	r3,r14,r3
80215854:	298d883a 	add	r6,r5,r6
80215858:	1a8f803a 	cmpltu	r7,r3,r10
8021585c:	350b883a 	add	r5,r6,r20
80215860:	20c7883a 	add	r3,r4,r3
80215864:	3955883a 	add	r10,r7,r5
80215868:	1909803a 	cmpltu	r4,r3,r4
8021586c:	6a91883a 	add	r8,r13,r10
80215870:	780cd43a 	srli	r6,r15,16
80215874:	2219883a 	add	r12,r4,r8
80215878:	2d0b803a 	cmpltu	r5,r5,r20
8021587c:	51cf803a 	cmpltu	r7,r10,r7
80215880:	29ceb03a 	or	r7,r5,r7
80215884:	4351803a 	cmpltu	r8,r8,r13
80215888:	610b803a 	cmpltu	r5,r12,r4
8021588c:	4148b03a 	or	r4,r8,r5
80215890:	398f883a 	add	r7,r7,r6
80215894:	3909883a 	add	r4,r7,r4
80215898:	1810927a 	slli	r8,r3,9
8021589c:	2449883a 	add	r4,r4,r17
802158a0:	2008927a 	slli	r4,r4,9
802158a4:	6022d5fa 	srli	r17,r12,23
802158a8:	1806d5fa 	srli	r3,r3,23
802158ac:	4252b03a 	or	r9,r8,r9
802158b0:	600a927a 	slli	r5,r12,9
802158b4:	4810c03a 	cmpne	r8,r9,zero
802158b8:	2462b03a 	or	r17,r4,r17
802158bc:	40c6b03a 	or	r3,r8,r3
802158c0:	8900402c 	andhi	r4,r17,256
802158c4:	1950b03a 	or	r8,r3,r5
802158c8:	20000726 	beq	r4,zero,802158e8 <__muldf3+0x4dc>
802158cc:	4006d07a 	srli	r3,r8,1
802158d0:	880497fa 	slli	r2,r17,31
802158d4:	4200004c 	andi	r8,r8,1
802158d8:	8822d07a 	srli	r17,r17,1
802158dc:	1a10b03a 	or	r8,r3,r8
802158e0:	1210b03a 	or	r8,r2,r8
802158e4:	5805883a 	mov	r2,r11
802158e8:	1140ffc4 	addi	r5,r2,1023
802158ec:	0140440e 	bge	zero,r5,80215a00 <__muldf3+0x5f4>
802158f0:	40c001cc 	andi	r3,r8,7
802158f4:	18000726 	beq	r3,zero,80215914 <__muldf3+0x508>
802158f8:	40c003cc 	andi	r3,r8,15
802158fc:	01000104 	movi	r4,4
80215900:	19000426 	beq	r3,r4,80215914 <__muldf3+0x508>
80215904:	4107883a 	add	r3,r8,r4
80215908:	1a11803a 	cmpltu	r8,r3,r8
8021590c:	8a23883a 	add	r17,r17,r8
80215910:	1811883a 	mov	r8,r3
80215914:	88c0402c 	andhi	r3,r17,256
80215918:	18000426 	beq	r3,zero,8021592c <__muldf3+0x520>
8021591c:	11410004 	addi	r5,r2,1024
80215920:	00bfc034 	movhi	r2,65280
80215924:	10bfffc4 	addi	r2,r2,-1
80215928:	88a2703a 	and	r17,r17,r2
8021592c:	0081ff84 	movi	r2,2046
80215930:	117f6416 	blt	r2,r5,802156c4 <__reset+0xfa1f56c4>
80215934:	8828977a 	slli	r20,r17,29
80215938:	4010d0fa 	srli	r8,r8,3
8021593c:	8822927a 	slli	r17,r17,9
80215940:	2881ffcc 	andi	r2,r5,2047
80215944:	a228b03a 	or	r20,r20,r8
80215948:	880ad33a 	srli	r5,r17,12
8021594c:	b02b883a 	mov	r21,r22
80215950:	003f0d06 	br	80215588 <__reset+0xfa1f5588>
80215954:	8080022c 	andhi	r2,r16,8
80215958:	10000926 	beq	r2,zero,80215980 <__muldf3+0x574>
8021595c:	8880022c 	andhi	r2,r17,8
80215960:	1000071e 	bne	r2,zero,80215980 <__muldf3+0x574>
80215964:	00800434 	movhi	r2,16
80215968:	89400234 	orhi	r5,r17,8
8021596c:	10bfffc4 	addi	r2,r2,-1
80215970:	b82b883a 	mov	r21,r23
80215974:	288a703a 	and	r5,r5,r2
80215978:	4029883a 	mov	r20,r8
8021597c:	003f6806 	br	80215720 <__reset+0xfa1f5720>
80215980:	00800434 	movhi	r2,16
80215984:	81400234 	orhi	r5,r16,8
80215988:	10bfffc4 	addi	r2,r2,-1
8021598c:	288a703a 	and	r5,r5,r2
80215990:	003f6306 	br	80215720 <__reset+0xfa1f5720>
80215994:	147ff604 	addi	r17,r2,-40
80215998:	3462983a 	sll	r17,r6,r17
8021599c:	0011883a 	mov	r8,zero
802159a0:	003f4406 	br	802156b4 <__reset+0xfa1f56b4>
802159a4:	3009883a 	mov	r4,r6
802159a8:	d9800215 	stw	r6,8(sp)
802159ac:	da400115 	stw	r9,4(sp)
802159b0:	da800015 	stw	r10,0(sp)
802159b4:	020655c0 	call	8020655c <__clzsi2>
802159b8:	10800804 	addi	r2,r2,32
802159bc:	da800017 	ldw	r10,0(sp)
802159c0:	da400117 	ldw	r9,4(sp)
802159c4:	d9800217 	ldw	r6,8(sp)
802159c8:	003f3006 	br	8021568c <__reset+0xfa1f568c>
802159cc:	143ff604 	addi	r16,r2,-40
802159d0:	9c20983a 	sll	r16,r19,r16
802159d4:	0029883a 	mov	r20,zero
802159d8:	003f1606 	br	80215634 <__reset+0xfa1f5634>
802159dc:	d9800215 	stw	r6,8(sp)
802159e0:	d9c00015 	stw	r7,0(sp)
802159e4:	da400115 	stw	r9,4(sp)
802159e8:	020655c0 	call	8020655c <__clzsi2>
802159ec:	10800804 	addi	r2,r2,32
802159f0:	da400117 	ldw	r9,4(sp)
802159f4:	d9c00017 	ldw	r7,0(sp)
802159f8:	d9800217 	ldw	r6,8(sp)
802159fc:	003f0306 	br	8021560c <__reset+0xfa1f560c>
80215a00:	00c00044 	movi	r3,1
80215a04:	1947c83a 	sub	r3,r3,r5
80215a08:	00800e04 	movi	r2,56
80215a0c:	10feda16 	blt	r2,r3,80215578 <__reset+0xfa1f5578>
80215a10:	008007c4 	movi	r2,31
80215a14:	10c01b16 	blt	r2,r3,80215a84 <__muldf3+0x678>
80215a18:	00800804 	movi	r2,32
80215a1c:	10c5c83a 	sub	r2,r2,r3
80215a20:	888a983a 	sll	r5,r17,r2
80215a24:	40c8d83a 	srl	r4,r8,r3
80215a28:	4084983a 	sll	r2,r8,r2
80215a2c:	88e2d83a 	srl	r17,r17,r3
80215a30:	2906b03a 	or	r3,r5,r4
80215a34:	1004c03a 	cmpne	r2,r2,zero
80215a38:	1886b03a 	or	r3,r3,r2
80215a3c:	188001cc 	andi	r2,r3,7
80215a40:	10000726 	beq	r2,zero,80215a60 <__muldf3+0x654>
80215a44:	188003cc 	andi	r2,r3,15
80215a48:	01000104 	movi	r4,4
80215a4c:	11000426 	beq	r2,r4,80215a60 <__muldf3+0x654>
80215a50:	1805883a 	mov	r2,r3
80215a54:	10c00104 	addi	r3,r2,4
80215a58:	1885803a 	cmpltu	r2,r3,r2
80215a5c:	88a3883a 	add	r17,r17,r2
80215a60:	8880202c 	andhi	r2,r17,128
80215a64:	10001c26 	beq	r2,zero,80215ad8 <__muldf3+0x6cc>
80215a68:	b02b883a 	mov	r21,r22
80215a6c:	00800044 	movi	r2,1
80215a70:	000b883a 	mov	r5,zero
80215a74:	0029883a 	mov	r20,zero
80215a78:	003ec306 	br	80215588 <__reset+0xfa1f5588>
80215a7c:	5805883a 	mov	r2,r11
80215a80:	003f9906 	br	802158e8 <__reset+0xfa1f58e8>
80215a84:	00bff844 	movi	r2,-31
80215a88:	1145c83a 	sub	r2,r2,r5
80215a8c:	8888d83a 	srl	r4,r17,r2
80215a90:	00800804 	movi	r2,32
80215a94:	18801a26 	beq	r3,r2,80215b00 <__muldf3+0x6f4>
80215a98:	00801004 	movi	r2,64
80215a9c:	10c5c83a 	sub	r2,r2,r3
80215aa0:	8884983a 	sll	r2,r17,r2
80215aa4:	1204b03a 	or	r2,r2,r8
80215aa8:	1004c03a 	cmpne	r2,r2,zero
80215aac:	2084b03a 	or	r2,r4,r2
80215ab0:	144001cc 	andi	r17,r2,7
80215ab4:	88000d1e 	bne	r17,zero,80215aec <__muldf3+0x6e0>
80215ab8:	000b883a 	mov	r5,zero
80215abc:	1028d0fa 	srli	r20,r2,3
80215ac0:	b02b883a 	mov	r21,r22
80215ac4:	0005883a 	mov	r2,zero
80215ac8:	a468b03a 	or	r20,r20,r17
80215acc:	003eae06 	br	80215588 <__reset+0xfa1f5588>
80215ad0:	1007883a 	mov	r3,r2
80215ad4:	0023883a 	mov	r17,zero
80215ad8:	880a927a 	slli	r5,r17,9
80215adc:	1805883a 	mov	r2,r3
80215ae0:	8822977a 	slli	r17,r17,29
80215ae4:	280ad33a 	srli	r5,r5,12
80215ae8:	003ff406 	br	80215abc <__reset+0xfa1f5abc>
80215aec:	10c003cc 	andi	r3,r2,15
80215af0:	01000104 	movi	r4,4
80215af4:	193ff626 	beq	r3,r4,80215ad0 <__reset+0xfa1f5ad0>
80215af8:	0023883a 	mov	r17,zero
80215afc:	003fd506 	br	80215a54 <__reset+0xfa1f5a54>
80215b00:	0005883a 	mov	r2,zero
80215b04:	003fe706 	br	80215aa4 <__reset+0xfa1f5aa4>
80215b08:	00800434 	movhi	r2,16
80215b0c:	89400234 	orhi	r5,r17,8
80215b10:	10bfffc4 	addi	r2,r2,-1
80215b14:	b02b883a 	mov	r21,r22
80215b18:	288a703a 	and	r5,r5,r2
80215b1c:	4029883a 	mov	r20,r8
80215b20:	003eff06 	br	80215720 <__reset+0xfa1f5720>

80215b24 <__subdf3>:
80215b24:	02000434 	movhi	r8,16
80215b28:	423fffc4 	addi	r8,r8,-1
80215b2c:	defffb04 	addi	sp,sp,-20
80215b30:	2a14703a 	and	r10,r5,r8
80215b34:	3812d53a 	srli	r9,r7,20
80215b38:	3a10703a 	and	r8,r7,r8
80215b3c:	2006d77a 	srli	r3,r4,29
80215b40:	3004d77a 	srli	r2,r6,29
80215b44:	dc000015 	stw	r16,0(sp)
80215b48:	501490fa 	slli	r10,r10,3
80215b4c:	2820d53a 	srli	r16,r5,20
80215b50:	401090fa 	slli	r8,r8,3
80215b54:	dc800215 	stw	r18,8(sp)
80215b58:	dc400115 	stw	r17,4(sp)
80215b5c:	dfc00415 	stw	ra,16(sp)
80215b60:	202290fa 	slli	r17,r4,3
80215b64:	dcc00315 	stw	r19,12(sp)
80215b68:	4a41ffcc 	andi	r9,r9,2047
80215b6c:	0101ffc4 	movi	r4,2047
80215b70:	2824d7fa 	srli	r18,r5,31
80215b74:	8401ffcc 	andi	r16,r16,2047
80215b78:	50c6b03a 	or	r3,r10,r3
80215b7c:	380ed7fa 	srli	r7,r7,31
80215b80:	408ab03a 	or	r5,r8,r2
80215b84:	300c90fa 	slli	r6,r6,3
80215b88:	49009626 	beq	r9,r4,80215de4 <__subdf3+0x2c0>
80215b8c:	39c0005c 	xori	r7,r7,1
80215b90:	8245c83a 	sub	r2,r16,r9
80215b94:	3c807426 	beq	r7,r18,80215d68 <__subdf3+0x244>
80215b98:	0080af0e 	bge	zero,r2,80215e58 <__subdf3+0x334>
80215b9c:	48002a1e 	bne	r9,zero,80215c48 <__subdf3+0x124>
80215ba0:	2988b03a 	or	r4,r5,r6
80215ba4:	20009a1e 	bne	r4,zero,80215e10 <__subdf3+0x2ec>
80215ba8:	888001cc 	andi	r2,r17,7
80215bac:	10000726 	beq	r2,zero,80215bcc <__subdf3+0xa8>
80215bb0:	888003cc 	andi	r2,r17,15
80215bb4:	01000104 	movi	r4,4
80215bb8:	11000426 	beq	r2,r4,80215bcc <__subdf3+0xa8>
80215bbc:	890b883a 	add	r5,r17,r4
80215bc0:	2c63803a 	cmpltu	r17,r5,r17
80215bc4:	1c47883a 	add	r3,r3,r17
80215bc8:	2823883a 	mov	r17,r5
80215bcc:	1880202c 	andhi	r2,r3,128
80215bd0:	10005926 	beq	r2,zero,80215d38 <__subdf3+0x214>
80215bd4:	84000044 	addi	r16,r16,1
80215bd8:	0081ffc4 	movi	r2,2047
80215bdc:	8080be26 	beq	r16,r2,80215ed8 <__subdf3+0x3b4>
80215be0:	017fe034 	movhi	r5,65408
80215be4:	297fffc4 	addi	r5,r5,-1
80215be8:	1946703a 	and	r3,r3,r5
80215bec:	1804977a 	slli	r2,r3,29
80215bf0:	1806927a 	slli	r3,r3,9
80215bf4:	8822d0fa 	srli	r17,r17,3
80215bf8:	8401ffcc 	andi	r16,r16,2047
80215bfc:	180ad33a 	srli	r5,r3,12
80215c00:	9100004c 	andi	r4,r18,1
80215c04:	1444b03a 	or	r2,r2,r17
80215c08:	80c1ffcc 	andi	r3,r16,2047
80215c0c:	1820953a 	slli	r16,r3,20
80215c10:	20c03fcc 	andi	r3,r4,255
80215c14:	180897fa 	slli	r4,r3,31
80215c18:	00c00434 	movhi	r3,16
80215c1c:	18ffffc4 	addi	r3,r3,-1
80215c20:	28c6703a 	and	r3,r5,r3
80215c24:	1c06b03a 	or	r3,r3,r16
80215c28:	1906b03a 	or	r3,r3,r4
80215c2c:	dfc00417 	ldw	ra,16(sp)
80215c30:	dcc00317 	ldw	r19,12(sp)
80215c34:	dc800217 	ldw	r18,8(sp)
80215c38:	dc400117 	ldw	r17,4(sp)
80215c3c:	dc000017 	ldw	r16,0(sp)
80215c40:	dec00504 	addi	sp,sp,20
80215c44:	f800283a 	ret
80215c48:	0101ffc4 	movi	r4,2047
80215c4c:	813fd626 	beq	r16,r4,80215ba8 <__reset+0xfa1f5ba8>
80215c50:	29402034 	orhi	r5,r5,128
80215c54:	01000e04 	movi	r4,56
80215c58:	2080a316 	blt	r4,r2,80215ee8 <__subdf3+0x3c4>
80215c5c:	010007c4 	movi	r4,31
80215c60:	2080c616 	blt	r4,r2,80215f7c <__subdf3+0x458>
80215c64:	01000804 	movi	r4,32
80215c68:	2089c83a 	sub	r4,r4,r2
80215c6c:	2910983a 	sll	r8,r5,r4
80215c70:	308ed83a 	srl	r7,r6,r2
80215c74:	3108983a 	sll	r4,r6,r4
80215c78:	2884d83a 	srl	r2,r5,r2
80215c7c:	41ccb03a 	or	r6,r8,r7
80215c80:	2008c03a 	cmpne	r4,r4,zero
80215c84:	310cb03a 	or	r6,r6,r4
80215c88:	898dc83a 	sub	r6,r17,r6
80215c8c:	89a3803a 	cmpltu	r17,r17,r6
80215c90:	1887c83a 	sub	r3,r3,r2
80215c94:	1c47c83a 	sub	r3,r3,r17
80215c98:	3023883a 	mov	r17,r6
80215c9c:	1880202c 	andhi	r2,r3,128
80215ca0:	10002326 	beq	r2,zero,80215d30 <__subdf3+0x20c>
80215ca4:	04c02034 	movhi	r19,128
80215ca8:	9cffffc4 	addi	r19,r19,-1
80215cac:	1ce6703a 	and	r19,r3,r19
80215cb0:	98007a26 	beq	r19,zero,80215e9c <__subdf3+0x378>
80215cb4:	9809883a 	mov	r4,r19
80215cb8:	020655c0 	call	8020655c <__clzsi2>
80215cbc:	113ffe04 	addi	r4,r2,-8
80215cc0:	00c007c4 	movi	r3,31
80215cc4:	19007b16 	blt	r3,r4,80215eb4 <__subdf3+0x390>
80215cc8:	00800804 	movi	r2,32
80215ccc:	1105c83a 	sub	r2,r2,r4
80215cd0:	8884d83a 	srl	r2,r17,r2
80215cd4:	9906983a 	sll	r3,r19,r4
80215cd8:	8922983a 	sll	r17,r17,r4
80215cdc:	10c4b03a 	or	r2,r2,r3
80215ce0:	24007816 	blt	r4,r16,80215ec4 <__subdf3+0x3a0>
80215ce4:	2421c83a 	sub	r16,r4,r16
80215ce8:	80c00044 	addi	r3,r16,1
80215cec:	010007c4 	movi	r4,31
80215cf0:	20c09516 	blt	r4,r3,80215f48 <__subdf3+0x424>
80215cf4:	01400804 	movi	r5,32
80215cf8:	28cbc83a 	sub	r5,r5,r3
80215cfc:	88c8d83a 	srl	r4,r17,r3
80215d00:	8962983a 	sll	r17,r17,r5
80215d04:	114a983a 	sll	r5,r2,r5
80215d08:	10c6d83a 	srl	r3,r2,r3
80215d0c:	8804c03a 	cmpne	r2,r17,zero
80215d10:	290ab03a 	or	r5,r5,r4
80215d14:	28a2b03a 	or	r17,r5,r2
80215d18:	0021883a 	mov	r16,zero
80215d1c:	003fa206 	br	80215ba8 <__reset+0xfa1f5ba8>
80215d20:	2090b03a 	or	r8,r4,r2
80215d24:	40018e26 	beq	r8,zero,80216360 <__subdf3+0x83c>
80215d28:	1007883a 	mov	r3,r2
80215d2c:	2023883a 	mov	r17,r4
80215d30:	888001cc 	andi	r2,r17,7
80215d34:	103f9e1e 	bne	r2,zero,80215bb0 <__reset+0xfa1f5bb0>
80215d38:	1804977a 	slli	r2,r3,29
80215d3c:	8822d0fa 	srli	r17,r17,3
80215d40:	1810d0fa 	srli	r8,r3,3
80215d44:	9100004c 	andi	r4,r18,1
80215d48:	1444b03a 	or	r2,r2,r17
80215d4c:	00c1ffc4 	movi	r3,2047
80215d50:	80c02826 	beq	r16,r3,80215df4 <__subdf3+0x2d0>
80215d54:	01400434 	movhi	r5,16
80215d58:	297fffc4 	addi	r5,r5,-1
80215d5c:	80e0703a 	and	r16,r16,r3
80215d60:	414a703a 	and	r5,r8,r5
80215d64:	003fa806 	br	80215c08 <__reset+0xfa1f5c08>
80215d68:	0080630e 	bge	zero,r2,80215ef8 <__subdf3+0x3d4>
80215d6c:	48003026 	beq	r9,zero,80215e30 <__subdf3+0x30c>
80215d70:	0101ffc4 	movi	r4,2047
80215d74:	813f8c26 	beq	r16,r4,80215ba8 <__reset+0xfa1f5ba8>
80215d78:	29402034 	orhi	r5,r5,128
80215d7c:	01000e04 	movi	r4,56
80215d80:	2080a90e 	bge	r4,r2,80216028 <__subdf3+0x504>
80215d84:	298cb03a 	or	r6,r5,r6
80215d88:	3012c03a 	cmpne	r9,r6,zero
80215d8c:	0005883a 	mov	r2,zero
80215d90:	4c53883a 	add	r9,r9,r17
80215d94:	4c63803a 	cmpltu	r17,r9,r17
80215d98:	10c7883a 	add	r3,r2,r3
80215d9c:	88c7883a 	add	r3,r17,r3
80215da0:	4823883a 	mov	r17,r9
80215da4:	1880202c 	andhi	r2,r3,128
80215da8:	1000d026 	beq	r2,zero,802160ec <__subdf3+0x5c8>
80215dac:	84000044 	addi	r16,r16,1
80215db0:	0081ffc4 	movi	r2,2047
80215db4:	8080fe26 	beq	r16,r2,802161b0 <__subdf3+0x68c>
80215db8:	00bfe034 	movhi	r2,65408
80215dbc:	10bfffc4 	addi	r2,r2,-1
80215dc0:	1886703a 	and	r3,r3,r2
80215dc4:	880ad07a 	srli	r5,r17,1
80215dc8:	180497fa 	slli	r2,r3,31
80215dcc:	8900004c 	andi	r4,r17,1
80215dd0:	2922b03a 	or	r17,r5,r4
80215dd4:	1806d07a 	srli	r3,r3,1
80215dd8:	1462b03a 	or	r17,r2,r17
80215ddc:	3825883a 	mov	r18,r7
80215de0:	003f7106 	br	80215ba8 <__reset+0xfa1f5ba8>
80215de4:	2984b03a 	or	r2,r5,r6
80215de8:	103f6826 	beq	r2,zero,80215b8c <__reset+0xfa1f5b8c>
80215dec:	39c03fcc 	andi	r7,r7,255
80215df0:	003f6706 	br	80215b90 <__reset+0xfa1f5b90>
80215df4:	4086b03a 	or	r3,r8,r2
80215df8:	18015226 	beq	r3,zero,80216344 <__subdf3+0x820>
80215dfc:	00c00434 	movhi	r3,16
80215e00:	41400234 	orhi	r5,r8,8
80215e04:	18ffffc4 	addi	r3,r3,-1
80215e08:	28ca703a 	and	r5,r5,r3
80215e0c:	003f7e06 	br	80215c08 <__reset+0xfa1f5c08>
80215e10:	10bfffc4 	addi	r2,r2,-1
80215e14:	1000491e 	bne	r2,zero,80215f3c <__subdf3+0x418>
80215e18:	898fc83a 	sub	r7,r17,r6
80215e1c:	89e3803a 	cmpltu	r17,r17,r7
80215e20:	1947c83a 	sub	r3,r3,r5
80215e24:	1c47c83a 	sub	r3,r3,r17
80215e28:	3823883a 	mov	r17,r7
80215e2c:	003f9b06 	br	80215c9c <__reset+0xfa1f5c9c>
80215e30:	2988b03a 	or	r4,r5,r6
80215e34:	203f5c26 	beq	r4,zero,80215ba8 <__reset+0xfa1f5ba8>
80215e38:	10bfffc4 	addi	r2,r2,-1
80215e3c:	1000931e 	bne	r2,zero,8021608c <__subdf3+0x568>
80215e40:	898d883a 	add	r6,r17,r6
80215e44:	3463803a 	cmpltu	r17,r6,r17
80215e48:	1947883a 	add	r3,r3,r5
80215e4c:	88c7883a 	add	r3,r17,r3
80215e50:	3023883a 	mov	r17,r6
80215e54:	003fd306 	br	80215da4 <__reset+0xfa1f5da4>
80215e58:	1000541e 	bne	r2,zero,80215fac <__subdf3+0x488>
80215e5c:	80800044 	addi	r2,r16,1
80215e60:	1081ffcc 	andi	r2,r2,2047
80215e64:	01000044 	movi	r4,1
80215e68:	2080a20e 	bge	r4,r2,802160f4 <__subdf3+0x5d0>
80215e6c:	8989c83a 	sub	r4,r17,r6
80215e70:	8905803a 	cmpltu	r2,r17,r4
80215e74:	1967c83a 	sub	r19,r3,r5
80215e78:	98a7c83a 	sub	r19,r19,r2
80215e7c:	9880202c 	andhi	r2,r19,128
80215e80:	10006326 	beq	r2,zero,80216010 <__subdf3+0x4ec>
80215e84:	3463c83a 	sub	r17,r6,r17
80215e88:	28c7c83a 	sub	r3,r5,r3
80215e8c:	344d803a 	cmpltu	r6,r6,r17
80215e90:	19a7c83a 	sub	r19,r3,r6
80215e94:	3825883a 	mov	r18,r7
80215e98:	983f861e 	bne	r19,zero,80215cb4 <__reset+0xfa1f5cb4>
80215e9c:	8809883a 	mov	r4,r17
80215ea0:	020655c0 	call	8020655c <__clzsi2>
80215ea4:	10800804 	addi	r2,r2,32
80215ea8:	113ffe04 	addi	r4,r2,-8
80215eac:	00c007c4 	movi	r3,31
80215eb0:	193f850e 	bge	r3,r4,80215cc8 <__reset+0xfa1f5cc8>
80215eb4:	10bff604 	addi	r2,r2,-40
80215eb8:	8884983a 	sll	r2,r17,r2
80215ebc:	0023883a 	mov	r17,zero
80215ec0:	243f880e 	bge	r4,r16,80215ce4 <__reset+0xfa1f5ce4>
80215ec4:	00ffe034 	movhi	r3,65408
80215ec8:	18ffffc4 	addi	r3,r3,-1
80215ecc:	8121c83a 	sub	r16,r16,r4
80215ed0:	10c6703a 	and	r3,r2,r3
80215ed4:	003f3406 	br	80215ba8 <__reset+0xfa1f5ba8>
80215ed8:	9100004c 	andi	r4,r18,1
80215edc:	000b883a 	mov	r5,zero
80215ee0:	0005883a 	mov	r2,zero
80215ee4:	003f4806 	br	80215c08 <__reset+0xfa1f5c08>
80215ee8:	298cb03a 	or	r6,r5,r6
80215eec:	300cc03a 	cmpne	r6,r6,zero
80215ef0:	0005883a 	mov	r2,zero
80215ef4:	003f6406 	br	80215c88 <__reset+0xfa1f5c88>
80215ef8:	10009a1e 	bne	r2,zero,80216164 <__subdf3+0x640>
80215efc:	82400044 	addi	r9,r16,1
80215f00:	4881ffcc 	andi	r2,r9,2047
80215f04:	02800044 	movi	r10,1
80215f08:	5080670e 	bge	r10,r2,802160a8 <__subdf3+0x584>
80215f0c:	0081ffc4 	movi	r2,2047
80215f10:	4880af26 	beq	r9,r2,802161d0 <__subdf3+0x6ac>
80215f14:	898d883a 	add	r6,r17,r6
80215f18:	1945883a 	add	r2,r3,r5
80215f1c:	3447803a 	cmpltu	r3,r6,r17
80215f20:	1887883a 	add	r3,r3,r2
80215f24:	182297fa 	slli	r17,r3,31
80215f28:	300cd07a 	srli	r6,r6,1
80215f2c:	1806d07a 	srli	r3,r3,1
80215f30:	4821883a 	mov	r16,r9
80215f34:	89a2b03a 	or	r17,r17,r6
80215f38:	003f1b06 	br	80215ba8 <__reset+0xfa1f5ba8>
80215f3c:	0101ffc4 	movi	r4,2047
80215f40:	813f441e 	bne	r16,r4,80215c54 <__reset+0xfa1f5c54>
80215f44:	003f1806 	br	80215ba8 <__reset+0xfa1f5ba8>
80215f48:	843ff844 	addi	r16,r16,-31
80215f4c:	01400804 	movi	r5,32
80215f50:	1408d83a 	srl	r4,r2,r16
80215f54:	19405026 	beq	r3,r5,80216098 <__subdf3+0x574>
80215f58:	01401004 	movi	r5,64
80215f5c:	28c7c83a 	sub	r3,r5,r3
80215f60:	10c4983a 	sll	r2,r2,r3
80215f64:	88a2b03a 	or	r17,r17,r2
80215f68:	8822c03a 	cmpne	r17,r17,zero
80215f6c:	2462b03a 	or	r17,r4,r17
80215f70:	0007883a 	mov	r3,zero
80215f74:	0021883a 	mov	r16,zero
80215f78:	003f6d06 	br	80215d30 <__reset+0xfa1f5d30>
80215f7c:	11fff804 	addi	r7,r2,-32
80215f80:	01000804 	movi	r4,32
80215f84:	29ced83a 	srl	r7,r5,r7
80215f88:	11004526 	beq	r2,r4,802160a0 <__subdf3+0x57c>
80215f8c:	01001004 	movi	r4,64
80215f90:	2089c83a 	sub	r4,r4,r2
80215f94:	2904983a 	sll	r2,r5,r4
80215f98:	118cb03a 	or	r6,r2,r6
80215f9c:	300cc03a 	cmpne	r6,r6,zero
80215fa0:	398cb03a 	or	r6,r7,r6
80215fa4:	0005883a 	mov	r2,zero
80215fa8:	003f3706 	br	80215c88 <__reset+0xfa1f5c88>
80215fac:	80002a26 	beq	r16,zero,80216058 <__subdf3+0x534>
80215fb0:	0101ffc4 	movi	r4,2047
80215fb4:	49006626 	beq	r9,r4,80216150 <__subdf3+0x62c>
80215fb8:	0085c83a 	sub	r2,zero,r2
80215fbc:	18c02034 	orhi	r3,r3,128
80215fc0:	01000e04 	movi	r4,56
80215fc4:	20807e16 	blt	r4,r2,802161c0 <__subdf3+0x69c>
80215fc8:	010007c4 	movi	r4,31
80215fcc:	2080e716 	blt	r4,r2,8021636c <__subdf3+0x848>
80215fd0:	01000804 	movi	r4,32
80215fd4:	2089c83a 	sub	r4,r4,r2
80215fd8:	1914983a 	sll	r10,r3,r4
80215fdc:	8890d83a 	srl	r8,r17,r2
80215fe0:	8908983a 	sll	r4,r17,r4
80215fe4:	1884d83a 	srl	r2,r3,r2
80215fe8:	5222b03a 	or	r17,r10,r8
80215fec:	2006c03a 	cmpne	r3,r4,zero
80215ff0:	88e2b03a 	or	r17,r17,r3
80215ff4:	3463c83a 	sub	r17,r6,r17
80215ff8:	2885c83a 	sub	r2,r5,r2
80215ffc:	344d803a 	cmpltu	r6,r6,r17
80216000:	1187c83a 	sub	r3,r2,r6
80216004:	4821883a 	mov	r16,r9
80216008:	3825883a 	mov	r18,r7
8021600c:	003f2306 	br	80215c9c <__reset+0xfa1f5c9c>
80216010:	24d0b03a 	or	r8,r4,r19
80216014:	40001b1e 	bne	r8,zero,80216084 <__subdf3+0x560>
80216018:	0005883a 	mov	r2,zero
8021601c:	0009883a 	mov	r4,zero
80216020:	0021883a 	mov	r16,zero
80216024:	003f4906 	br	80215d4c <__reset+0xfa1f5d4c>
80216028:	010007c4 	movi	r4,31
8021602c:	20803a16 	blt	r4,r2,80216118 <__subdf3+0x5f4>
80216030:	01000804 	movi	r4,32
80216034:	2089c83a 	sub	r4,r4,r2
80216038:	2912983a 	sll	r9,r5,r4
8021603c:	3090d83a 	srl	r8,r6,r2
80216040:	3108983a 	sll	r4,r6,r4
80216044:	2884d83a 	srl	r2,r5,r2
80216048:	4a12b03a 	or	r9,r9,r8
8021604c:	2008c03a 	cmpne	r4,r4,zero
80216050:	4912b03a 	or	r9,r9,r4
80216054:	003f4e06 	br	80215d90 <__reset+0xfa1f5d90>
80216058:	1c48b03a 	or	r4,r3,r17
8021605c:	20003c26 	beq	r4,zero,80216150 <__subdf3+0x62c>
80216060:	0084303a 	nor	r2,zero,r2
80216064:	1000381e 	bne	r2,zero,80216148 <__subdf3+0x624>
80216068:	3463c83a 	sub	r17,r6,r17
8021606c:	28c5c83a 	sub	r2,r5,r3
80216070:	344d803a 	cmpltu	r6,r6,r17
80216074:	1187c83a 	sub	r3,r2,r6
80216078:	4821883a 	mov	r16,r9
8021607c:	3825883a 	mov	r18,r7
80216080:	003f0606 	br	80215c9c <__reset+0xfa1f5c9c>
80216084:	2023883a 	mov	r17,r4
80216088:	003f0906 	br	80215cb0 <__reset+0xfa1f5cb0>
8021608c:	0101ffc4 	movi	r4,2047
80216090:	813f3a1e 	bne	r16,r4,80215d7c <__reset+0xfa1f5d7c>
80216094:	003ec406 	br	80215ba8 <__reset+0xfa1f5ba8>
80216098:	0005883a 	mov	r2,zero
8021609c:	003fb106 	br	80215f64 <__reset+0xfa1f5f64>
802160a0:	0005883a 	mov	r2,zero
802160a4:	003fbc06 	br	80215f98 <__reset+0xfa1f5f98>
802160a8:	1c44b03a 	or	r2,r3,r17
802160ac:	80008e1e 	bne	r16,zero,802162e8 <__subdf3+0x7c4>
802160b0:	1000c826 	beq	r2,zero,802163d4 <__subdf3+0x8b0>
802160b4:	2984b03a 	or	r2,r5,r6
802160b8:	103ebb26 	beq	r2,zero,80215ba8 <__reset+0xfa1f5ba8>
802160bc:	8989883a 	add	r4,r17,r6
802160c0:	1945883a 	add	r2,r3,r5
802160c4:	2447803a 	cmpltu	r3,r4,r17
802160c8:	1887883a 	add	r3,r3,r2
802160cc:	1880202c 	andhi	r2,r3,128
802160d0:	2023883a 	mov	r17,r4
802160d4:	103f1626 	beq	r2,zero,80215d30 <__reset+0xfa1f5d30>
802160d8:	00bfe034 	movhi	r2,65408
802160dc:	10bfffc4 	addi	r2,r2,-1
802160e0:	5021883a 	mov	r16,r10
802160e4:	1886703a 	and	r3,r3,r2
802160e8:	003eaf06 	br	80215ba8 <__reset+0xfa1f5ba8>
802160ec:	3825883a 	mov	r18,r7
802160f0:	003f0f06 	br	80215d30 <__reset+0xfa1f5d30>
802160f4:	1c44b03a 	or	r2,r3,r17
802160f8:	8000251e 	bne	r16,zero,80216190 <__subdf3+0x66c>
802160fc:	1000661e 	bne	r2,zero,80216298 <__subdf3+0x774>
80216100:	2990b03a 	or	r8,r5,r6
80216104:	40009626 	beq	r8,zero,80216360 <__subdf3+0x83c>
80216108:	2807883a 	mov	r3,r5
8021610c:	3023883a 	mov	r17,r6
80216110:	3825883a 	mov	r18,r7
80216114:	003ea406 	br	80215ba8 <__reset+0xfa1f5ba8>
80216118:	127ff804 	addi	r9,r2,-32
8021611c:	01000804 	movi	r4,32
80216120:	2a52d83a 	srl	r9,r5,r9
80216124:	11008c26 	beq	r2,r4,80216358 <__subdf3+0x834>
80216128:	01001004 	movi	r4,64
8021612c:	2085c83a 	sub	r2,r4,r2
80216130:	2884983a 	sll	r2,r5,r2
80216134:	118cb03a 	or	r6,r2,r6
80216138:	300cc03a 	cmpne	r6,r6,zero
8021613c:	4992b03a 	or	r9,r9,r6
80216140:	0005883a 	mov	r2,zero
80216144:	003f1206 	br	80215d90 <__reset+0xfa1f5d90>
80216148:	0101ffc4 	movi	r4,2047
8021614c:	493f9c1e 	bne	r9,r4,80215fc0 <__reset+0xfa1f5fc0>
80216150:	2807883a 	mov	r3,r5
80216154:	3023883a 	mov	r17,r6
80216158:	4821883a 	mov	r16,r9
8021615c:	3825883a 	mov	r18,r7
80216160:	003e9106 	br	80215ba8 <__reset+0xfa1f5ba8>
80216164:	80001f1e 	bne	r16,zero,802161e4 <__subdf3+0x6c0>
80216168:	1c48b03a 	or	r4,r3,r17
8021616c:	20005a26 	beq	r4,zero,802162d8 <__subdf3+0x7b4>
80216170:	0084303a 	nor	r2,zero,r2
80216174:	1000561e 	bne	r2,zero,802162d0 <__subdf3+0x7ac>
80216178:	89a3883a 	add	r17,r17,r6
8021617c:	1945883a 	add	r2,r3,r5
80216180:	898d803a 	cmpltu	r6,r17,r6
80216184:	3087883a 	add	r3,r6,r2
80216188:	4821883a 	mov	r16,r9
8021618c:	003f0506 	br	80215da4 <__reset+0xfa1f5da4>
80216190:	10002b1e 	bne	r2,zero,80216240 <__subdf3+0x71c>
80216194:	2984b03a 	or	r2,r5,r6
80216198:	10008026 	beq	r2,zero,8021639c <__subdf3+0x878>
8021619c:	2807883a 	mov	r3,r5
802161a0:	3023883a 	mov	r17,r6
802161a4:	3825883a 	mov	r18,r7
802161a8:	0401ffc4 	movi	r16,2047
802161ac:	003e7e06 	br	80215ba8 <__reset+0xfa1f5ba8>
802161b0:	3809883a 	mov	r4,r7
802161b4:	0011883a 	mov	r8,zero
802161b8:	0005883a 	mov	r2,zero
802161bc:	003ee306 	br	80215d4c <__reset+0xfa1f5d4c>
802161c0:	1c62b03a 	or	r17,r3,r17
802161c4:	8822c03a 	cmpne	r17,r17,zero
802161c8:	0005883a 	mov	r2,zero
802161cc:	003f8906 	br	80215ff4 <__reset+0xfa1f5ff4>
802161d0:	3809883a 	mov	r4,r7
802161d4:	4821883a 	mov	r16,r9
802161d8:	0011883a 	mov	r8,zero
802161dc:	0005883a 	mov	r2,zero
802161e0:	003eda06 	br	80215d4c <__reset+0xfa1f5d4c>
802161e4:	0101ffc4 	movi	r4,2047
802161e8:	49003b26 	beq	r9,r4,802162d8 <__subdf3+0x7b4>
802161ec:	0085c83a 	sub	r2,zero,r2
802161f0:	18c02034 	orhi	r3,r3,128
802161f4:	01000e04 	movi	r4,56
802161f8:	20806e16 	blt	r4,r2,802163b4 <__subdf3+0x890>
802161fc:	010007c4 	movi	r4,31
80216200:	20807716 	blt	r4,r2,802163e0 <__subdf3+0x8bc>
80216204:	01000804 	movi	r4,32
80216208:	2089c83a 	sub	r4,r4,r2
8021620c:	1914983a 	sll	r10,r3,r4
80216210:	8890d83a 	srl	r8,r17,r2
80216214:	8908983a 	sll	r4,r17,r4
80216218:	1884d83a 	srl	r2,r3,r2
8021621c:	5222b03a 	or	r17,r10,r8
80216220:	2006c03a 	cmpne	r3,r4,zero
80216224:	88e2b03a 	or	r17,r17,r3
80216228:	89a3883a 	add	r17,r17,r6
8021622c:	1145883a 	add	r2,r2,r5
80216230:	898d803a 	cmpltu	r6,r17,r6
80216234:	3087883a 	add	r3,r6,r2
80216238:	4821883a 	mov	r16,r9
8021623c:	003ed906 	br	80215da4 <__reset+0xfa1f5da4>
80216240:	2984b03a 	or	r2,r5,r6
80216244:	10004226 	beq	r2,zero,80216350 <__subdf3+0x82c>
80216248:	1808d0fa 	srli	r4,r3,3
8021624c:	8822d0fa 	srli	r17,r17,3
80216250:	1806977a 	slli	r3,r3,29
80216254:	2080022c 	andhi	r2,r4,8
80216258:	1c62b03a 	or	r17,r3,r17
8021625c:	10000826 	beq	r2,zero,80216280 <__subdf3+0x75c>
80216260:	2812d0fa 	srli	r9,r5,3
80216264:	4880022c 	andhi	r2,r9,8
80216268:	1000051e 	bne	r2,zero,80216280 <__subdf3+0x75c>
8021626c:	300cd0fa 	srli	r6,r6,3
80216270:	2804977a 	slli	r2,r5,29
80216274:	4809883a 	mov	r4,r9
80216278:	3825883a 	mov	r18,r7
8021627c:	11a2b03a 	or	r17,r2,r6
80216280:	8806d77a 	srli	r3,r17,29
80216284:	200890fa 	slli	r4,r4,3
80216288:	882290fa 	slli	r17,r17,3
8021628c:	0401ffc4 	movi	r16,2047
80216290:	1906b03a 	or	r3,r3,r4
80216294:	003e4406 	br	80215ba8 <__reset+0xfa1f5ba8>
80216298:	2984b03a 	or	r2,r5,r6
8021629c:	103e4226 	beq	r2,zero,80215ba8 <__reset+0xfa1f5ba8>
802162a0:	8989c83a 	sub	r4,r17,r6
802162a4:	8911803a 	cmpltu	r8,r17,r4
802162a8:	1945c83a 	sub	r2,r3,r5
802162ac:	1205c83a 	sub	r2,r2,r8
802162b0:	1200202c 	andhi	r8,r2,128
802162b4:	403e9a26 	beq	r8,zero,80215d20 <__reset+0xfa1f5d20>
802162b8:	3463c83a 	sub	r17,r6,r17
802162bc:	28c5c83a 	sub	r2,r5,r3
802162c0:	344d803a 	cmpltu	r6,r6,r17
802162c4:	1187c83a 	sub	r3,r2,r6
802162c8:	3825883a 	mov	r18,r7
802162cc:	003e3606 	br	80215ba8 <__reset+0xfa1f5ba8>
802162d0:	0101ffc4 	movi	r4,2047
802162d4:	493fc71e 	bne	r9,r4,802161f4 <__reset+0xfa1f61f4>
802162d8:	2807883a 	mov	r3,r5
802162dc:	3023883a 	mov	r17,r6
802162e0:	4821883a 	mov	r16,r9
802162e4:	003e3006 	br	80215ba8 <__reset+0xfa1f5ba8>
802162e8:	10003626 	beq	r2,zero,802163c4 <__subdf3+0x8a0>
802162ec:	2984b03a 	or	r2,r5,r6
802162f0:	10001726 	beq	r2,zero,80216350 <__subdf3+0x82c>
802162f4:	1808d0fa 	srli	r4,r3,3
802162f8:	8822d0fa 	srli	r17,r17,3
802162fc:	1806977a 	slli	r3,r3,29
80216300:	2080022c 	andhi	r2,r4,8
80216304:	1c62b03a 	or	r17,r3,r17
80216308:	10000726 	beq	r2,zero,80216328 <__subdf3+0x804>
8021630c:	2812d0fa 	srli	r9,r5,3
80216310:	4880022c 	andhi	r2,r9,8
80216314:	1000041e 	bne	r2,zero,80216328 <__subdf3+0x804>
80216318:	300cd0fa 	srli	r6,r6,3
8021631c:	2804977a 	slli	r2,r5,29
80216320:	4809883a 	mov	r4,r9
80216324:	11a2b03a 	or	r17,r2,r6
80216328:	8806d77a 	srli	r3,r17,29
8021632c:	200890fa 	slli	r4,r4,3
80216330:	882290fa 	slli	r17,r17,3
80216334:	3825883a 	mov	r18,r7
80216338:	1906b03a 	or	r3,r3,r4
8021633c:	0401ffc4 	movi	r16,2047
80216340:	003e1906 	br	80215ba8 <__reset+0xfa1f5ba8>
80216344:	000b883a 	mov	r5,zero
80216348:	0005883a 	mov	r2,zero
8021634c:	003e2e06 	br	80215c08 <__reset+0xfa1f5c08>
80216350:	0401ffc4 	movi	r16,2047
80216354:	003e1406 	br	80215ba8 <__reset+0xfa1f5ba8>
80216358:	0005883a 	mov	r2,zero
8021635c:	003f7506 	br	80216134 <__reset+0xfa1f6134>
80216360:	0005883a 	mov	r2,zero
80216364:	0009883a 	mov	r4,zero
80216368:	003e7806 	br	80215d4c <__reset+0xfa1f5d4c>
8021636c:	123ff804 	addi	r8,r2,-32
80216370:	01000804 	movi	r4,32
80216374:	1a10d83a 	srl	r8,r3,r8
80216378:	11002526 	beq	r2,r4,80216410 <__subdf3+0x8ec>
8021637c:	01001004 	movi	r4,64
80216380:	2085c83a 	sub	r2,r4,r2
80216384:	1884983a 	sll	r2,r3,r2
80216388:	1444b03a 	or	r2,r2,r17
8021638c:	1004c03a 	cmpne	r2,r2,zero
80216390:	40a2b03a 	or	r17,r8,r2
80216394:	0005883a 	mov	r2,zero
80216398:	003f1606 	br	80215ff4 <__reset+0xfa1f5ff4>
8021639c:	02000434 	movhi	r8,16
802163a0:	0009883a 	mov	r4,zero
802163a4:	423fffc4 	addi	r8,r8,-1
802163a8:	00bfffc4 	movi	r2,-1
802163ac:	0401ffc4 	movi	r16,2047
802163b0:	003e6606 	br	80215d4c <__reset+0xfa1f5d4c>
802163b4:	1c62b03a 	or	r17,r3,r17
802163b8:	8822c03a 	cmpne	r17,r17,zero
802163bc:	0005883a 	mov	r2,zero
802163c0:	003f9906 	br	80216228 <__reset+0xfa1f6228>
802163c4:	2807883a 	mov	r3,r5
802163c8:	3023883a 	mov	r17,r6
802163cc:	0401ffc4 	movi	r16,2047
802163d0:	003df506 	br	80215ba8 <__reset+0xfa1f5ba8>
802163d4:	2807883a 	mov	r3,r5
802163d8:	3023883a 	mov	r17,r6
802163dc:	003df206 	br	80215ba8 <__reset+0xfa1f5ba8>
802163e0:	123ff804 	addi	r8,r2,-32
802163e4:	01000804 	movi	r4,32
802163e8:	1a10d83a 	srl	r8,r3,r8
802163ec:	11000a26 	beq	r2,r4,80216418 <__subdf3+0x8f4>
802163f0:	01001004 	movi	r4,64
802163f4:	2085c83a 	sub	r2,r4,r2
802163f8:	1884983a 	sll	r2,r3,r2
802163fc:	1444b03a 	or	r2,r2,r17
80216400:	1004c03a 	cmpne	r2,r2,zero
80216404:	40a2b03a 	or	r17,r8,r2
80216408:	0005883a 	mov	r2,zero
8021640c:	003f8606 	br	80216228 <__reset+0xfa1f6228>
80216410:	0005883a 	mov	r2,zero
80216414:	003fdc06 	br	80216388 <__reset+0xfa1f6388>
80216418:	0005883a 	mov	r2,zero
8021641c:	003ff706 	br	802163fc <__reset+0xfa1f63fc>

80216420 <__fixdfsi>:
80216420:	280cd53a 	srli	r6,r5,20
80216424:	00c00434 	movhi	r3,16
80216428:	18ffffc4 	addi	r3,r3,-1
8021642c:	3181ffcc 	andi	r6,r6,2047
80216430:	01c0ff84 	movi	r7,1022
80216434:	28c6703a 	and	r3,r5,r3
80216438:	280ad7fa 	srli	r5,r5,31
8021643c:	3980120e 	bge	r7,r6,80216488 <__fixdfsi+0x68>
80216440:	00810744 	movi	r2,1053
80216444:	11800c16 	blt	r2,r6,80216478 <__fixdfsi+0x58>
80216448:	00810cc4 	movi	r2,1075
8021644c:	1185c83a 	sub	r2,r2,r6
80216450:	01c007c4 	movi	r7,31
80216454:	18c00434 	orhi	r3,r3,16
80216458:	38800d16 	blt	r7,r2,80216490 <__fixdfsi+0x70>
8021645c:	31befb44 	addi	r6,r6,-1043
80216460:	2084d83a 	srl	r2,r4,r2
80216464:	1986983a 	sll	r3,r3,r6
80216468:	1884b03a 	or	r2,r3,r2
8021646c:	28000726 	beq	r5,zero,8021648c <__fixdfsi+0x6c>
80216470:	0085c83a 	sub	r2,zero,r2
80216474:	f800283a 	ret
80216478:	00a00034 	movhi	r2,32768
8021647c:	10bfffc4 	addi	r2,r2,-1
80216480:	2885883a 	add	r2,r5,r2
80216484:	f800283a 	ret
80216488:	0005883a 	mov	r2,zero
8021648c:	f800283a 	ret
80216490:	008104c4 	movi	r2,1043
80216494:	1185c83a 	sub	r2,r2,r6
80216498:	1884d83a 	srl	r2,r3,r2
8021649c:	003ff306 	br	8021646c <__reset+0xfa1f646c>

802164a0 <__floatsidf>:
802164a0:	defffd04 	addi	sp,sp,-12
802164a4:	dfc00215 	stw	ra,8(sp)
802164a8:	dc400115 	stw	r17,4(sp)
802164ac:	dc000015 	stw	r16,0(sp)
802164b0:	20002b26 	beq	r4,zero,80216560 <__floatsidf+0xc0>
802164b4:	2023883a 	mov	r17,r4
802164b8:	2020d7fa 	srli	r16,r4,31
802164bc:	20002d16 	blt	r4,zero,80216574 <__floatsidf+0xd4>
802164c0:	8809883a 	mov	r4,r17
802164c4:	020655c0 	call	8020655c <__clzsi2>
802164c8:	01410784 	movi	r5,1054
802164cc:	288bc83a 	sub	r5,r5,r2
802164d0:	01010cc4 	movi	r4,1075
802164d4:	2149c83a 	sub	r4,r4,r5
802164d8:	00c007c4 	movi	r3,31
802164dc:	1900160e 	bge	r3,r4,80216538 <__floatsidf+0x98>
802164e0:	00c104c4 	movi	r3,1043
802164e4:	1947c83a 	sub	r3,r3,r5
802164e8:	88c6983a 	sll	r3,r17,r3
802164ec:	00800434 	movhi	r2,16
802164f0:	10bfffc4 	addi	r2,r2,-1
802164f4:	1886703a 	and	r3,r3,r2
802164f8:	2941ffcc 	andi	r5,r5,2047
802164fc:	800d883a 	mov	r6,r16
80216500:	0005883a 	mov	r2,zero
80216504:	280a953a 	slli	r5,r5,20
80216508:	31803fcc 	andi	r6,r6,255
8021650c:	01000434 	movhi	r4,16
80216510:	300c97fa 	slli	r6,r6,31
80216514:	213fffc4 	addi	r4,r4,-1
80216518:	1906703a 	and	r3,r3,r4
8021651c:	1946b03a 	or	r3,r3,r5
80216520:	1986b03a 	or	r3,r3,r6
80216524:	dfc00217 	ldw	ra,8(sp)
80216528:	dc400117 	ldw	r17,4(sp)
8021652c:	dc000017 	ldw	r16,0(sp)
80216530:	dec00304 	addi	sp,sp,12
80216534:	f800283a 	ret
80216538:	00c002c4 	movi	r3,11
8021653c:	1887c83a 	sub	r3,r3,r2
80216540:	88c6d83a 	srl	r3,r17,r3
80216544:	8904983a 	sll	r2,r17,r4
80216548:	01000434 	movhi	r4,16
8021654c:	213fffc4 	addi	r4,r4,-1
80216550:	2941ffcc 	andi	r5,r5,2047
80216554:	1906703a 	and	r3,r3,r4
80216558:	800d883a 	mov	r6,r16
8021655c:	003fe906 	br	80216504 <__reset+0xfa1f6504>
80216560:	000d883a 	mov	r6,zero
80216564:	000b883a 	mov	r5,zero
80216568:	0007883a 	mov	r3,zero
8021656c:	0005883a 	mov	r2,zero
80216570:	003fe406 	br	80216504 <__reset+0xfa1f6504>
80216574:	0123c83a 	sub	r17,zero,r4
80216578:	003fd106 	br	802164c0 <__reset+0xfa1f64c0>

8021657c <__floatunsidf>:
8021657c:	defffe04 	addi	sp,sp,-8
80216580:	dc000015 	stw	r16,0(sp)
80216584:	dfc00115 	stw	ra,4(sp)
80216588:	2021883a 	mov	r16,r4
8021658c:	20002226 	beq	r4,zero,80216618 <__floatunsidf+0x9c>
80216590:	020655c0 	call	8020655c <__clzsi2>
80216594:	01010784 	movi	r4,1054
80216598:	2089c83a 	sub	r4,r4,r2
8021659c:	01810cc4 	movi	r6,1075
802165a0:	310dc83a 	sub	r6,r6,r4
802165a4:	00c007c4 	movi	r3,31
802165a8:	1980120e 	bge	r3,r6,802165f4 <__floatunsidf+0x78>
802165ac:	00c104c4 	movi	r3,1043
802165b0:	1907c83a 	sub	r3,r3,r4
802165b4:	80ca983a 	sll	r5,r16,r3
802165b8:	00800434 	movhi	r2,16
802165bc:	10bfffc4 	addi	r2,r2,-1
802165c0:	2101ffcc 	andi	r4,r4,2047
802165c4:	0021883a 	mov	r16,zero
802165c8:	288a703a 	and	r5,r5,r2
802165cc:	2008953a 	slli	r4,r4,20
802165d0:	00c00434 	movhi	r3,16
802165d4:	18ffffc4 	addi	r3,r3,-1
802165d8:	28c6703a 	and	r3,r5,r3
802165dc:	8005883a 	mov	r2,r16
802165e0:	1906b03a 	or	r3,r3,r4
802165e4:	dfc00117 	ldw	ra,4(sp)
802165e8:	dc000017 	ldw	r16,0(sp)
802165ec:	dec00204 	addi	sp,sp,8
802165f0:	f800283a 	ret
802165f4:	00c002c4 	movi	r3,11
802165f8:	188bc83a 	sub	r5,r3,r2
802165fc:	814ad83a 	srl	r5,r16,r5
80216600:	00c00434 	movhi	r3,16
80216604:	18ffffc4 	addi	r3,r3,-1
80216608:	81a0983a 	sll	r16,r16,r6
8021660c:	2101ffcc 	andi	r4,r4,2047
80216610:	28ca703a 	and	r5,r5,r3
80216614:	003fed06 	br	802165cc <__reset+0xfa1f65cc>
80216618:	0009883a 	mov	r4,zero
8021661c:	000b883a 	mov	r5,zero
80216620:	003fea06 	br	802165cc <__reset+0xfa1f65cc>

80216624 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
80216624:	defffb04 	addi	sp,sp,-20
80216628:	df000415 	stw	fp,16(sp)
8021662c:	df000404 	addi	fp,sp,16
80216630:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
80216634:	008000c4 	movi	r2,3
80216638:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
8021663c:	e0fffd17 	ldw	r3,-12(fp)
80216640:	008003f4 	movhi	r2,15
80216644:	10909004 	addi	r2,r2,16960
80216648:	1887383a 	mul	r3,r3,r2
8021664c:	00817db4 	movhi	r2,1526
80216650:	10b84004 	addi	r2,r2,-7936
80216654:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
80216658:	00a00034 	movhi	r2,32768
8021665c:	10bfffc4 	addi	r2,r2,-1
80216660:	10c5203a 	divu	r2,r2,r3
80216664:	e0ffff17 	ldw	r3,-4(fp)
80216668:	1885203a 	divu	r2,r3,r2
8021666c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
80216670:	e0bffe17 	ldw	r2,-8(fp)
80216674:	10002526 	beq	r2,zero,8021670c <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
80216678:	e03ffc15 	stw	zero,-16(fp)
8021667c:	00001406 	br	802166d0 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
80216680:	00a00034 	movhi	r2,32768
80216684:	10bfffc4 	addi	r2,r2,-1
80216688:	10bfffc4 	addi	r2,r2,-1
8021668c:	103ffe1e 	bne	r2,zero,80216688 <__reset+0xfa1f6688>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
80216690:	e0fffd17 	ldw	r3,-12(fp)
80216694:	008003f4 	movhi	r2,15
80216698:	10909004 	addi	r2,r2,16960
8021669c:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
802166a0:	00817db4 	movhi	r2,1526
802166a4:	10b84004 	addi	r2,r2,-7936
802166a8:	10c7203a 	divu	r3,r2,r3
802166ac:	00a00034 	movhi	r2,32768
802166b0:	10bfffc4 	addi	r2,r2,-1
802166b4:	10c5203a 	divu	r2,r2,r3
802166b8:	e0ffff17 	ldw	r3,-4(fp)
802166bc:	1885c83a 	sub	r2,r3,r2
802166c0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
802166c4:	e0bffc17 	ldw	r2,-16(fp)
802166c8:	10800044 	addi	r2,r2,1
802166cc:	e0bffc15 	stw	r2,-16(fp)
802166d0:	e0fffc17 	ldw	r3,-16(fp)
802166d4:	e0bffe17 	ldw	r2,-8(fp)
802166d8:	18bfe916 	blt	r3,r2,80216680 <__reset+0xfa1f6680>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
802166dc:	e0fffd17 	ldw	r3,-12(fp)
802166e0:	008003f4 	movhi	r2,15
802166e4:	10909004 	addi	r2,r2,16960
802166e8:	1887383a 	mul	r3,r3,r2
802166ec:	00817db4 	movhi	r2,1526
802166f0:	10b84004 	addi	r2,r2,-7936
802166f4:	10c7203a 	divu	r3,r2,r3
802166f8:	e0bfff17 	ldw	r2,-4(fp)
802166fc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
80216700:	10bfffc4 	addi	r2,r2,-1
80216704:	103ffe1e 	bne	r2,zero,80216700 <__reset+0xfa1f6700>
80216708:	00000b06 	br	80216738 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
8021670c:	e0fffd17 	ldw	r3,-12(fp)
80216710:	008003f4 	movhi	r2,15
80216714:	10909004 	addi	r2,r2,16960
80216718:	1887383a 	mul	r3,r3,r2
8021671c:	00817db4 	movhi	r2,1526
80216720:	10b84004 	addi	r2,r2,-7936
80216724:	10c7203a 	divu	r3,r2,r3
80216728:	e0bfff17 	ldw	r2,-4(fp)
8021672c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
80216730:	10bfffc4 	addi	r2,r2,-1
80216734:	00bffe16 	blt	zero,r2,80216730 <__reset+0xfa1f6730>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
80216738:	0005883a 	mov	r2,zero
}
8021673c:	e037883a 	mov	sp,fp
80216740:	df000017 	ldw	fp,0(sp)
80216744:	dec00104 	addi	sp,sp,4
80216748:	f800283a 	ret

8021674c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8021674c:	defffe04 	addi	sp,sp,-8
80216750:	dfc00115 	stw	ra,4(sp)
80216754:	df000015 	stw	fp,0(sp)
80216758:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8021675c:	d0a00c17 	ldw	r2,-32720(gp)
80216760:	10000326 	beq	r2,zero,80216770 <alt_get_errno+0x24>
80216764:	d0a00c17 	ldw	r2,-32720(gp)
80216768:	103ee83a 	callr	r2
8021676c:	00000106 	br	80216774 <alt_get_errno+0x28>
80216770:	d0a02104 	addi	r2,gp,-32636
}
80216774:	e037883a 	mov	sp,fp
80216778:	dfc00117 	ldw	ra,4(sp)
8021677c:	df000017 	ldw	fp,0(sp)
80216780:	dec00204 	addi	sp,sp,8
80216784:	f800283a 	ret

80216788 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
80216788:	defffb04 	addi	sp,sp,-20
8021678c:	dfc00415 	stw	ra,16(sp)
80216790:	df000315 	stw	fp,12(sp)
80216794:	df000304 	addi	fp,sp,12
80216798:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
8021679c:	e0bfff17 	ldw	r2,-4(fp)
802167a0:	10000616 	blt	r2,zero,802167bc <close+0x34>
802167a4:	e0bfff17 	ldw	r2,-4(fp)
802167a8:	10c00324 	muli	r3,r2,12
802167ac:	00a008b4 	movhi	r2,32802
802167b0:	10b5eb04 	addi	r2,r2,-10324
802167b4:	1885883a 	add	r2,r3,r2
802167b8:	00000106 	br	802167c0 <close+0x38>
802167bc:	0005883a 	mov	r2,zero
802167c0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
802167c4:	e0bffd17 	ldw	r2,-12(fp)
802167c8:	10001926 	beq	r2,zero,80216830 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
802167cc:	e0bffd17 	ldw	r2,-12(fp)
802167d0:	10800017 	ldw	r2,0(r2)
802167d4:	10800417 	ldw	r2,16(r2)
802167d8:	10000626 	beq	r2,zero,802167f4 <close+0x6c>
802167dc:	e0bffd17 	ldw	r2,-12(fp)
802167e0:	10800017 	ldw	r2,0(r2)
802167e4:	10800417 	ldw	r2,16(r2)
802167e8:	e13ffd17 	ldw	r4,-12(fp)
802167ec:	103ee83a 	callr	r2
802167f0:	00000106 	br	802167f8 <close+0x70>
802167f4:	0005883a 	mov	r2,zero
802167f8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
802167fc:	e13fff17 	ldw	r4,-4(fp)
80216800:	0216d7c0 	call	80216d7c <alt_release_fd>
    if (rval < 0)
80216804:	e0bffe17 	ldw	r2,-8(fp)
80216808:	1000070e 	bge	r2,zero,80216828 <close+0xa0>
    {
      ALT_ERRNO = -rval;
8021680c:	021674c0 	call	8021674c <alt_get_errno>
80216810:	1007883a 	mov	r3,r2
80216814:	e0bffe17 	ldw	r2,-8(fp)
80216818:	0085c83a 	sub	r2,zero,r2
8021681c:	18800015 	stw	r2,0(r3)
      return -1;
80216820:	00bfffc4 	movi	r2,-1
80216824:	00000706 	br	80216844 <close+0xbc>
    }
    return 0;
80216828:	0005883a 	mov	r2,zero
8021682c:	00000506 	br	80216844 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
80216830:	021674c0 	call	8021674c <alt_get_errno>
80216834:	1007883a 	mov	r3,r2
80216838:	00801444 	movi	r2,81
8021683c:	18800015 	stw	r2,0(r3)
    return -1;
80216840:	00bfffc4 	movi	r2,-1
  }
}
80216844:	e037883a 	mov	sp,fp
80216848:	dfc00117 	ldw	ra,4(sp)
8021684c:	df000017 	ldw	fp,0(sp)
80216850:	dec00204 	addi	sp,sp,8
80216854:	f800283a 	ret

80216858 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
80216858:	deffff04 	addi	sp,sp,-4
8021685c:	df000015 	stw	fp,0(sp)
80216860:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
80216864:	0001883a 	nop
80216868:	e037883a 	mov	sp,fp
8021686c:	df000017 	ldw	fp,0(sp)
80216870:	dec00104 	addi	sp,sp,4
80216874:	f800283a 	ret

80216878 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
80216878:	defffc04 	addi	sp,sp,-16
8021687c:	df000315 	stw	fp,12(sp)
80216880:	df000304 	addi	fp,sp,12
80216884:	e13ffd15 	stw	r4,-12(fp)
80216888:	e17ffe15 	stw	r5,-8(fp)
8021688c:	e1bfff15 	stw	r6,-4(fp)
  return len;
80216890:	e0bfff17 	ldw	r2,-4(fp)
}
80216894:	e037883a 	mov	sp,fp
80216898:	df000017 	ldw	fp,0(sp)
8021689c:	dec00104 	addi	sp,sp,4
802168a0:	f800283a 	ret

802168a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
802168a4:	defffe04 	addi	sp,sp,-8
802168a8:	dfc00115 	stw	ra,4(sp)
802168ac:	df000015 	stw	fp,0(sp)
802168b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
802168b4:	d0a00c17 	ldw	r2,-32720(gp)
802168b8:	10000326 	beq	r2,zero,802168c8 <alt_get_errno+0x24>
802168bc:	d0a00c17 	ldw	r2,-32720(gp)
802168c0:	103ee83a 	callr	r2
802168c4:	00000106 	br	802168cc <alt_get_errno+0x28>
802168c8:	d0a02104 	addi	r2,gp,-32636
}
802168cc:	e037883a 	mov	sp,fp
802168d0:	dfc00117 	ldw	ra,4(sp)
802168d4:	df000017 	ldw	fp,0(sp)
802168d8:	dec00204 	addi	sp,sp,8
802168dc:	f800283a 	ret

802168e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
802168e0:	defffb04 	addi	sp,sp,-20
802168e4:	dfc00415 	stw	ra,16(sp)
802168e8:	df000315 	stw	fp,12(sp)
802168ec:	df000304 	addi	fp,sp,12
802168f0:	e13ffe15 	stw	r4,-8(fp)
802168f4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
802168f8:	e0bffe17 	ldw	r2,-8(fp)
802168fc:	10000616 	blt	r2,zero,80216918 <fstat+0x38>
80216900:	e0bffe17 	ldw	r2,-8(fp)
80216904:	10c00324 	muli	r3,r2,12
80216908:	00a008b4 	movhi	r2,32802
8021690c:	10b5eb04 	addi	r2,r2,-10324
80216910:	1885883a 	add	r2,r3,r2
80216914:	00000106 	br	8021691c <fstat+0x3c>
80216918:	0005883a 	mov	r2,zero
8021691c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
80216920:	e0bffd17 	ldw	r2,-12(fp)
80216924:	10001026 	beq	r2,zero,80216968 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
80216928:	e0bffd17 	ldw	r2,-12(fp)
8021692c:	10800017 	ldw	r2,0(r2)
80216930:	10800817 	ldw	r2,32(r2)
80216934:	10000726 	beq	r2,zero,80216954 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
80216938:	e0bffd17 	ldw	r2,-12(fp)
8021693c:	10800017 	ldw	r2,0(r2)
80216940:	10800817 	ldw	r2,32(r2)
80216944:	e17fff17 	ldw	r5,-4(fp)
80216948:	e13ffd17 	ldw	r4,-12(fp)
8021694c:	103ee83a 	callr	r2
80216950:	00000a06 	br	8021697c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
80216954:	e0bfff17 	ldw	r2,-4(fp)
80216958:	00c80004 	movi	r3,8192
8021695c:	10c00115 	stw	r3,4(r2)
      return 0;
80216960:	0005883a 	mov	r2,zero
80216964:	00000506 	br	8021697c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
80216968:	02168a40 	call	802168a4 <alt_get_errno>
8021696c:	1007883a 	mov	r3,r2
80216970:	00801444 	movi	r2,81
80216974:	18800015 	stw	r2,0(r3)
    return -1;
80216978:	00bfffc4 	movi	r2,-1
  }
}
8021697c:	e037883a 	mov	sp,fp
80216980:	dfc00117 	ldw	ra,4(sp)
80216984:	df000017 	ldw	fp,0(sp)
80216988:	dec00204 	addi	sp,sp,8
8021698c:	f800283a 	ret

80216990 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80216990:	defffe04 	addi	sp,sp,-8
80216994:	dfc00115 	stw	ra,4(sp)
80216998:	df000015 	stw	fp,0(sp)
8021699c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
802169a0:	d0a00c17 	ldw	r2,-32720(gp)
802169a4:	10000326 	beq	r2,zero,802169b4 <alt_get_errno+0x24>
802169a8:	d0a00c17 	ldw	r2,-32720(gp)
802169ac:	103ee83a 	callr	r2
802169b0:	00000106 	br	802169b8 <alt_get_errno+0x28>
802169b4:	d0a02104 	addi	r2,gp,-32636
}
802169b8:	e037883a 	mov	sp,fp
802169bc:	dfc00117 	ldw	ra,4(sp)
802169c0:	df000017 	ldw	fp,0(sp)
802169c4:	dec00204 	addi	sp,sp,8
802169c8:	f800283a 	ret

802169cc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
802169cc:	deffed04 	addi	sp,sp,-76
802169d0:	dfc01215 	stw	ra,72(sp)
802169d4:	df001115 	stw	fp,68(sp)
802169d8:	df001104 	addi	fp,sp,68
802169dc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
802169e0:	e0bfff17 	ldw	r2,-4(fp)
802169e4:	10000616 	blt	r2,zero,80216a00 <isatty+0x34>
802169e8:	e0bfff17 	ldw	r2,-4(fp)
802169ec:	10c00324 	muli	r3,r2,12
802169f0:	00a008b4 	movhi	r2,32802
802169f4:	10b5eb04 	addi	r2,r2,-10324
802169f8:	1885883a 	add	r2,r3,r2
802169fc:	00000106 	br	80216a04 <isatty+0x38>
80216a00:	0005883a 	mov	r2,zero
80216a04:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
80216a08:	e0bfef17 	ldw	r2,-68(fp)
80216a0c:	10000e26 	beq	r2,zero,80216a48 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
80216a10:	e0bfef17 	ldw	r2,-68(fp)
80216a14:	10800017 	ldw	r2,0(r2)
80216a18:	10800817 	ldw	r2,32(r2)
80216a1c:	1000021e 	bne	r2,zero,80216a28 <isatty+0x5c>
    {
      return 1;
80216a20:	00800044 	movi	r2,1
80216a24:	00000d06 	br	80216a5c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
80216a28:	e0bff004 	addi	r2,fp,-64
80216a2c:	100b883a 	mov	r5,r2
80216a30:	e13fff17 	ldw	r4,-4(fp)
80216a34:	02168e00 	call	802168e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
80216a38:	e0bff117 	ldw	r2,-60(fp)
80216a3c:	10880020 	cmpeqi	r2,r2,8192
80216a40:	10803fcc 	andi	r2,r2,255
80216a44:	00000506 	br	80216a5c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
80216a48:	02169900 	call	80216990 <alt_get_errno>
80216a4c:	1007883a 	mov	r3,r2
80216a50:	00801444 	movi	r2,81
80216a54:	18800015 	stw	r2,0(r3)
    return 0;
80216a58:	0005883a 	mov	r2,zero
  }
}
80216a5c:	e037883a 	mov	sp,fp
80216a60:	dfc00117 	ldw	ra,4(sp)
80216a64:	df000017 	ldw	fp,0(sp)
80216a68:	dec00204 	addi	sp,sp,8
80216a6c:	f800283a 	ret

80216a70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80216a70:	defffe04 	addi	sp,sp,-8
80216a74:	dfc00115 	stw	ra,4(sp)
80216a78:	df000015 	stw	fp,0(sp)
80216a7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80216a80:	d0a00c17 	ldw	r2,-32720(gp)
80216a84:	10000326 	beq	r2,zero,80216a94 <alt_get_errno+0x24>
80216a88:	d0a00c17 	ldw	r2,-32720(gp)
80216a8c:	103ee83a 	callr	r2
80216a90:	00000106 	br	80216a98 <alt_get_errno+0x28>
80216a94:	d0a02104 	addi	r2,gp,-32636
}
80216a98:	e037883a 	mov	sp,fp
80216a9c:	dfc00117 	ldw	ra,4(sp)
80216aa0:	df000017 	ldw	fp,0(sp)
80216aa4:	dec00204 	addi	sp,sp,8
80216aa8:	f800283a 	ret

80216aac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
80216aac:	defff904 	addi	sp,sp,-28
80216ab0:	dfc00615 	stw	ra,24(sp)
80216ab4:	df000515 	stw	fp,20(sp)
80216ab8:	df000504 	addi	fp,sp,20
80216abc:	e13ffd15 	stw	r4,-12(fp)
80216ac0:	e17ffe15 	stw	r5,-8(fp)
80216ac4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
80216ac8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80216acc:	e0bffd17 	ldw	r2,-12(fp)
80216ad0:	10000616 	blt	r2,zero,80216aec <lseek+0x40>
80216ad4:	e0bffd17 	ldw	r2,-12(fp)
80216ad8:	10c00324 	muli	r3,r2,12
80216adc:	00a008b4 	movhi	r2,32802
80216ae0:	10b5eb04 	addi	r2,r2,-10324
80216ae4:	1885883a 	add	r2,r3,r2
80216ae8:	00000106 	br	80216af0 <lseek+0x44>
80216aec:	0005883a 	mov	r2,zero
80216af0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
80216af4:	e0bffc17 	ldw	r2,-16(fp)
80216af8:	10001026 	beq	r2,zero,80216b3c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
80216afc:	e0bffc17 	ldw	r2,-16(fp)
80216b00:	10800017 	ldw	r2,0(r2)
80216b04:	10800717 	ldw	r2,28(r2)
80216b08:	10000926 	beq	r2,zero,80216b30 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
80216b0c:	e0bffc17 	ldw	r2,-16(fp)
80216b10:	10800017 	ldw	r2,0(r2)
80216b14:	10800717 	ldw	r2,28(r2)
80216b18:	e1bfff17 	ldw	r6,-4(fp)
80216b1c:	e17ffe17 	ldw	r5,-8(fp)
80216b20:	e13ffc17 	ldw	r4,-16(fp)
80216b24:	103ee83a 	callr	r2
80216b28:	e0bffb15 	stw	r2,-20(fp)
80216b2c:	00000506 	br	80216b44 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
80216b30:	00bfde84 	movi	r2,-134
80216b34:	e0bffb15 	stw	r2,-20(fp)
80216b38:	00000206 	br	80216b44 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
80216b3c:	00bfebc4 	movi	r2,-81
80216b40:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
80216b44:	e0bffb17 	ldw	r2,-20(fp)
80216b48:	1000070e 	bge	r2,zero,80216b68 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
80216b4c:	0216a700 	call	80216a70 <alt_get_errno>
80216b50:	1007883a 	mov	r3,r2
80216b54:	e0bffb17 	ldw	r2,-20(fp)
80216b58:	0085c83a 	sub	r2,zero,r2
80216b5c:	18800015 	stw	r2,0(r3)
    rc = -1;
80216b60:	00bfffc4 	movi	r2,-1
80216b64:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
80216b68:	e0bffb17 	ldw	r2,-20(fp)
}
80216b6c:	e037883a 	mov	sp,fp
80216b70:	dfc00117 	ldw	ra,4(sp)
80216b74:	df000017 	ldw	fp,0(sp)
80216b78:	dec00204 	addi	sp,sp,8
80216b7c:	f800283a 	ret

80216b80 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
80216b80:	defffd04 	addi	sp,sp,-12
80216b84:	dfc00215 	stw	ra,8(sp)
80216b88:	df000115 	stw	fp,4(sp)
80216b8c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
80216b90:	0009883a 	mov	r4,zero
80216b94:	02171cc0 	call	802171cc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
80216b98:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
80216b9c:	02172040 	call	80217204 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
80216ba0:	01a008b4 	movhi	r6,32802
80216ba4:	31b31304 	addi	r6,r6,-13236
80216ba8:	016008b4 	movhi	r5,32802
80216bac:	29731304 	addi	r5,r5,-13236
80216bb0:	012008b4 	movhi	r4,32802
80216bb4:	21331304 	addi	r4,r4,-13236
80216bb8:	021ada80 	call	8021ada8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
80216bbc:	021a8f40 	call	8021a8f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
80216bc0:	012008b4 	movhi	r4,32802
80216bc4:	212a5504 	addi	r4,r4,-22188
80216bc8:	021b54c0 	call	8021b54c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
80216bcc:	d0a02217 	ldw	r2,-32632(gp)
80216bd0:	d0e02317 	ldw	r3,-32628(gp)
80216bd4:	d1202417 	ldw	r4,-32624(gp)
80216bd8:	200d883a 	mov	r6,r4
80216bdc:	180b883a 	mov	r5,r3
80216be0:	1009883a 	mov	r4,r2
80216be4:	0204bf00 	call	80204bf0 <main>
80216be8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
80216bec:	01000044 	movi	r4,1
80216bf0:	02167880 	call	80216788 <close>
  exit (result);
80216bf4:	e13fff17 	ldw	r4,-4(fp)
80216bf8:	021b5600 	call	8021b560 <exit>

80216bfc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
80216bfc:	defffe04 	addi	sp,sp,-8
80216c00:	df000115 	stw	fp,4(sp)
80216c04:	df000104 	addi	fp,sp,4
80216c08:	e13fff15 	stw	r4,-4(fp)
}
80216c0c:	0001883a 	nop
80216c10:	e037883a 	mov	sp,fp
80216c14:	df000017 	ldw	fp,0(sp)
80216c18:	dec00104 	addi	sp,sp,4
80216c1c:	f800283a 	ret

80216c20 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
80216c20:	defffe04 	addi	sp,sp,-8
80216c24:	df000115 	stw	fp,4(sp)
80216c28:	df000104 	addi	fp,sp,4
80216c2c:	e13fff15 	stw	r4,-4(fp)
}
80216c30:	0001883a 	nop
80216c34:	e037883a 	mov	sp,fp
80216c38:	df000017 	ldw	fp,0(sp)
80216c3c:	dec00104 	addi	sp,sp,4
80216c40:	f800283a 	ret

80216c44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80216c44:	defffe04 	addi	sp,sp,-8
80216c48:	dfc00115 	stw	ra,4(sp)
80216c4c:	df000015 	stw	fp,0(sp)
80216c50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80216c54:	d0a00c17 	ldw	r2,-32720(gp)
80216c58:	10000326 	beq	r2,zero,80216c68 <alt_get_errno+0x24>
80216c5c:	d0a00c17 	ldw	r2,-32720(gp)
80216c60:	103ee83a 	callr	r2
80216c64:	00000106 	br	80216c6c <alt_get_errno+0x28>
80216c68:	d0a02104 	addi	r2,gp,-32636
}
80216c6c:	e037883a 	mov	sp,fp
80216c70:	dfc00117 	ldw	ra,4(sp)
80216c74:	df000017 	ldw	fp,0(sp)
80216c78:	dec00204 	addi	sp,sp,8
80216c7c:	f800283a 	ret

80216c80 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
80216c80:	defff904 	addi	sp,sp,-28
80216c84:	dfc00615 	stw	ra,24(sp)
80216c88:	df000515 	stw	fp,20(sp)
80216c8c:	df000504 	addi	fp,sp,20
80216c90:	e13ffd15 	stw	r4,-12(fp)
80216c94:	e17ffe15 	stw	r5,-8(fp)
80216c98:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80216c9c:	e0bffd17 	ldw	r2,-12(fp)
80216ca0:	10000616 	blt	r2,zero,80216cbc <read+0x3c>
80216ca4:	e0bffd17 	ldw	r2,-12(fp)
80216ca8:	10c00324 	muli	r3,r2,12
80216cac:	00a008b4 	movhi	r2,32802
80216cb0:	10b5eb04 	addi	r2,r2,-10324
80216cb4:	1885883a 	add	r2,r3,r2
80216cb8:	00000106 	br	80216cc0 <read+0x40>
80216cbc:	0005883a 	mov	r2,zero
80216cc0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
80216cc4:	e0bffb17 	ldw	r2,-20(fp)
80216cc8:	10002226 	beq	r2,zero,80216d54 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
80216ccc:	e0bffb17 	ldw	r2,-20(fp)
80216cd0:	10800217 	ldw	r2,8(r2)
80216cd4:	108000cc 	andi	r2,r2,3
80216cd8:	10800060 	cmpeqi	r2,r2,1
80216cdc:	1000181e 	bne	r2,zero,80216d40 <read+0xc0>
        (fd->dev->read))
80216ce0:	e0bffb17 	ldw	r2,-20(fp)
80216ce4:	10800017 	ldw	r2,0(r2)
80216ce8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
80216cec:	10001426 	beq	r2,zero,80216d40 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
80216cf0:	e0bffb17 	ldw	r2,-20(fp)
80216cf4:	10800017 	ldw	r2,0(r2)
80216cf8:	10800517 	ldw	r2,20(r2)
80216cfc:	e0ffff17 	ldw	r3,-4(fp)
80216d00:	180d883a 	mov	r6,r3
80216d04:	e17ffe17 	ldw	r5,-8(fp)
80216d08:	e13ffb17 	ldw	r4,-20(fp)
80216d0c:	103ee83a 	callr	r2
80216d10:	e0bffc15 	stw	r2,-16(fp)
80216d14:	e0bffc17 	ldw	r2,-16(fp)
80216d18:	1000070e 	bge	r2,zero,80216d38 <read+0xb8>
        {
          ALT_ERRNO = -rval;
80216d1c:	0216c440 	call	80216c44 <alt_get_errno>
80216d20:	1007883a 	mov	r3,r2
80216d24:	e0bffc17 	ldw	r2,-16(fp)
80216d28:	0085c83a 	sub	r2,zero,r2
80216d2c:	18800015 	stw	r2,0(r3)
          return -1;
80216d30:	00bfffc4 	movi	r2,-1
80216d34:	00000c06 	br	80216d68 <read+0xe8>
        }
        return rval;
80216d38:	e0bffc17 	ldw	r2,-16(fp)
80216d3c:	00000a06 	br	80216d68 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
80216d40:	0216c440 	call	80216c44 <alt_get_errno>
80216d44:	1007883a 	mov	r3,r2
80216d48:	00800344 	movi	r2,13
80216d4c:	18800015 	stw	r2,0(r3)
80216d50:	00000406 	br	80216d64 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
80216d54:	0216c440 	call	80216c44 <alt_get_errno>
80216d58:	1007883a 	mov	r3,r2
80216d5c:	00801444 	movi	r2,81
80216d60:	18800015 	stw	r2,0(r3)
  }
  return -1;
80216d64:	00bfffc4 	movi	r2,-1
}
80216d68:	e037883a 	mov	sp,fp
80216d6c:	dfc00117 	ldw	ra,4(sp)
80216d70:	df000017 	ldw	fp,0(sp)
80216d74:	dec00204 	addi	sp,sp,8
80216d78:	f800283a 	ret

80216d7c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
80216d7c:	defffe04 	addi	sp,sp,-8
80216d80:	df000115 	stw	fp,4(sp)
80216d84:	df000104 	addi	fp,sp,4
80216d88:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
80216d8c:	e0bfff17 	ldw	r2,-4(fp)
80216d90:	108000d0 	cmplti	r2,r2,3
80216d94:	10000d1e 	bne	r2,zero,80216dcc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
80216d98:	00a008b4 	movhi	r2,32802
80216d9c:	10b5eb04 	addi	r2,r2,-10324
80216da0:	e0ffff17 	ldw	r3,-4(fp)
80216da4:	18c00324 	muli	r3,r3,12
80216da8:	10c5883a 	add	r2,r2,r3
80216dac:	10800204 	addi	r2,r2,8
80216db0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
80216db4:	00a008b4 	movhi	r2,32802
80216db8:	10b5eb04 	addi	r2,r2,-10324
80216dbc:	e0ffff17 	ldw	r3,-4(fp)
80216dc0:	18c00324 	muli	r3,r3,12
80216dc4:	10c5883a 	add	r2,r2,r3
80216dc8:	10000015 	stw	zero,0(r2)
  }
}
80216dcc:	0001883a 	nop
80216dd0:	e037883a 	mov	sp,fp
80216dd4:	df000017 	ldw	fp,0(sp)
80216dd8:	dec00104 	addi	sp,sp,4
80216ddc:	f800283a 	ret

80216de0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
80216de0:	defff904 	addi	sp,sp,-28
80216de4:	df000615 	stw	fp,24(sp)
80216de8:	df000604 	addi	fp,sp,24
80216dec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80216df0:	0005303a 	rdctl	r2,status
80216df4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80216df8:	e0fffe17 	ldw	r3,-8(fp)
80216dfc:	00bfff84 	movi	r2,-2
80216e00:	1884703a 	and	r2,r3,r2
80216e04:	1001703a 	wrctl	status,r2
  
  return context;
80216e08:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
80216e0c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
80216e10:	d0a00d17 	ldw	r2,-32716(gp)
80216e14:	10c000c4 	addi	r3,r2,3
80216e18:	00bfff04 	movi	r2,-4
80216e1c:	1884703a 	and	r2,r3,r2
80216e20:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
80216e24:	d0e00d17 	ldw	r3,-32716(gp)
80216e28:	e0bfff17 	ldw	r2,-4(fp)
80216e2c:	1887883a 	add	r3,r3,r2
80216e30:	00a00934 	movhi	r2,32804
80216e34:	10800004 	addi	r2,r2,0
80216e38:	10c0062e 	bgeu	r2,r3,80216e54 <sbrk+0x74>
80216e3c:	e0bffb17 	ldw	r2,-20(fp)
80216e40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80216e44:	e0bffa17 	ldw	r2,-24(fp)
80216e48:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
80216e4c:	00bfffc4 	movi	r2,-1
80216e50:	00000b06 	br	80216e80 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
80216e54:	d0a00d17 	ldw	r2,-32716(gp)
80216e58:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
80216e5c:	d0e00d17 	ldw	r3,-32716(gp)
80216e60:	e0bfff17 	ldw	r2,-4(fp)
80216e64:	1885883a 	add	r2,r3,r2
80216e68:	d0a00d15 	stw	r2,-32716(gp)
80216e6c:	e0bffb17 	ldw	r2,-20(fp)
80216e70:	e0bffc15 	stw	r2,-16(fp)
80216e74:	e0bffc17 	ldw	r2,-16(fp)
80216e78:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
80216e7c:	e0bffd17 	ldw	r2,-12(fp)
} 
80216e80:	e037883a 	mov	sp,fp
80216e84:	df000017 	ldw	fp,0(sp)
80216e88:	dec00104 	addi	sp,sp,4
80216e8c:	f800283a 	ret

80216e90 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
80216e90:	defffa04 	addi	sp,sp,-24
80216e94:	df000515 	stw	fp,20(sp)
80216e98:	df000504 	addi	fp,sp,20
80216e9c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80216ea0:	0005303a 	rdctl	r2,status
80216ea4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80216ea8:	e0fffc17 	ldw	r3,-16(fp)
80216eac:	00bfff84 	movi	r2,-2
80216eb0:	1884703a 	and	r2,r3,r2
80216eb4:	1001703a 	wrctl	status,r2
  
  return context;
80216eb8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
80216ebc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
80216ec0:	e0bfff17 	ldw	r2,-4(fp)
80216ec4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
80216ec8:	e0bffd17 	ldw	r2,-12(fp)
80216ecc:	10800017 	ldw	r2,0(r2)
80216ed0:	e0fffd17 	ldw	r3,-12(fp)
80216ed4:	18c00117 	ldw	r3,4(r3)
80216ed8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
80216edc:	e0bffd17 	ldw	r2,-12(fp)
80216ee0:	10800117 	ldw	r2,4(r2)
80216ee4:	e0fffd17 	ldw	r3,-12(fp)
80216ee8:	18c00017 	ldw	r3,0(r3)
80216eec:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
80216ef0:	e0bffd17 	ldw	r2,-12(fp)
80216ef4:	e0fffd17 	ldw	r3,-12(fp)
80216ef8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
80216efc:	e0bffd17 	ldw	r2,-12(fp)
80216f00:	e0fffd17 	ldw	r3,-12(fp)
80216f04:	10c00015 	stw	r3,0(r2)
80216f08:	e0bffb17 	ldw	r2,-20(fp)
80216f0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80216f10:	e0bffe17 	ldw	r2,-8(fp)
80216f14:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
80216f18:	0001883a 	nop
80216f1c:	e037883a 	mov	sp,fp
80216f20:	df000017 	ldw	fp,0(sp)
80216f24:	dec00104 	addi	sp,sp,4
80216f28:	f800283a 	ret

80216f2c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
80216f2c:	defffb04 	addi	sp,sp,-20
80216f30:	dfc00415 	stw	ra,16(sp)
80216f34:	df000315 	stw	fp,12(sp)
80216f38:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
80216f3c:	d0a00e17 	ldw	r2,-32712(gp)
80216f40:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
80216f44:	d0a02617 	ldw	r2,-32616(gp)
80216f48:	10800044 	addi	r2,r2,1
80216f4c:	d0a02615 	stw	r2,-32616(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
80216f50:	00002e06 	br	8021700c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
80216f54:	e0bffd17 	ldw	r2,-12(fp)
80216f58:	10800017 	ldw	r2,0(r2)
80216f5c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
80216f60:	e0bffd17 	ldw	r2,-12(fp)
80216f64:	10800403 	ldbu	r2,16(r2)
80216f68:	10803fcc 	andi	r2,r2,255
80216f6c:	10000426 	beq	r2,zero,80216f80 <alt_tick+0x54>
80216f70:	d0a02617 	ldw	r2,-32616(gp)
80216f74:	1000021e 	bne	r2,zero,80216f80 <alt_tick+0x54>
    {
      alarm->rollover = 0;
80216f78:	e0bffd17 	ldw	r2,-12(fp)
80216f7c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
80216f80:	e0bffd17 	ldw	r2,-12(fp)
80216f84:	10800217 	ldw	r2,8(r2)
80216f88:	d0e02617 	ldw	r3,-32616(gp)
80216f8c:	18801d36 	bltu	r3,r2,80217004 <alt_tick+0xd8>
80216f90:	e0bffd17 	ldw	r2,-12(fp)
80216f94:	10800403 	ldbu	r2,16(r2)
80216f98:	10803fcc 	andi	r2,r2,255
80216f9c:	1000191e 	bne	r2,zero,80217004 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
80216fa0:	e0bffd17 	ldw	r2,-12(fp)
80216fa4:	10800317 	ldw	r2,12(r2)
80216fa8:	e0fffd17 	ldw	r3,-12(fp)
80216fac:	18c00517 	ldw	r3,20(r3)
80216fb0:	1809883a 	mov	r4,r3
80216fb4:	103ee83a 	callr	r2
80216fb8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
80216fbc:	e0bfff17 	ldw	r2,-4(fp)
80216fc0:	1000031e 	bne	r2,zero,80216fd0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
80216fc4:	e13ffd17 	ldw	r4,-12(fp)
80216fc8:	0216e900 	call	80216e90 <alt_alarm_stop>
80216fcc:	00000d06 	br	80217004 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
80216fd0:	e0bffd17 	ldw	r2,-12(fp)
80216fd4:	10c00217 	ldw	r3,8(r2)
80216fd8:	e0bfff17 	ldw	r2,-4(fp)
80216fdc:	1887883a 	add	r3,r3,r2
80216fe0:	e0bffd17 	ldw	r2,-12(fp)
80216fe4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
80216fe8:	e0bffd17 	ldw	r2,-12(fp)
80216fec:	10c00217 	ldw	r3,8(r2)
80216ff0:	d0a02617 	ldw	r2,-32616(gp)
80216ff4:	1880032e 	bgeu	r3,r2,80217004 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
80216ff8:	e0bffd17 	ldw	r2,-12(fp)
80216ffc:	00c00044 	movi	r3,1
80217000:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
80217004:	e0bffe17 	ldw	r2,-8(fp)
80217008:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8021700c:	e0fffd17 	ldw	r3,-12(fp)
80217010:	d0a00e04 	addi	r2,gp,-32712
80217014:	18bfcf1e 	bne	r3,r2,80216f54 <__reset+0xfa1f6f54>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
80217018:	0001883a 	nop
}
8021701c:	0001883a 	nop
80217020:	e037883a 	mov	sp,fp
80217024:	dfc00117 	ldw	ra,4(sp)
80217028:	df000017 	ldw	fp,0(sp)
8021702c:	dec00204 	addi	sp,sp,8
80217030:	f800283a 	ret

80217034 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
80217034:	defffd04 	addi	sp,sp,-12
80217038:	dfc00215 	stw	ra,8(sp)
8021703c:	df000115 	stw	fp,4(sp)
80217040:	df000104 	addi	fp,sp,4
80217044:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
80217048:	e13fff17 	ldw	r4,-4(fp)
8021704c:	02166240 	call	80216624 <alt_busy_sleep>
}
80217050:	e037883a 	mov	sp,fp
80217054:	dfc00117 	ldw	ra,4(sp)
80217058:	df000017 	ldw	fp,0(sp)
8021705c:	dec00204 	addi	sp,sp,8
80217060:	f800283a 	ret

80217064 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80217064:	defffe04 	addi	sp,sp,-8
80217068:	dfc00115 	stw	ra,4(sp)
8021706c:	df000015 	stw	fp,0(sp)
80217070:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80217074:	d0a00c17 	ldw	r2,-32720(gp)
80217078:	10000326 	beq	r2,zero,80217088 <alt_get_errno+0x24>
8021707c:	d0a00c17 	ldw	r2,-32720(gp)
80217080:	103ee83a 	callr	r2
80217084:	00000106 	br	8021708c <alt_get_errno+0x28>
80217088:	d0a02104 	addi	r2,gp,-32636
}
8021708c:	e037883a 	mov	sp,fp
80217090:	dfc00117 	ldw	ra,4(sp)
80217094:	df000017 	ldw	fp,0(sp)
80217098:	dec00204 	addi	sp,sp,8
8021709c:	f800283a 	ret

802170a0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
802170a0:	defff904 	addi	sp,sp,-28
802170a4:	dfc00615 	stw	ra,24(sp)
802170a8:	df000515 	stw	fp,20(sp)
802170ac:	df000504 	addi	fp,sp,20
802170b0:	e13ffd15 	stw	r4,-12(fp)
802170b4:	e17ffe15 	stw	r5,-8(fp)
802170b8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
802170bc:	e0bffd17 	ldw	r2,-12(fp)
802170c0:	10000616 	blt	r2,zero,802170dc <write+0x3c>
802170c4:	e0bffd17 	ldw	r2,-12(fp)
802170c8:	10c00324 	muli	r3,r2,12
802170cc:	00a008b4 	movhi	r2,32802
802170d0:	10b5eb04 	addi	r2,r2,-10324
802170d4:	1885883a 	add	r2,r3,r2
802170d8:	00000106 	br	802170e0 <write+0x40>
802170dc:	0005883a 	mov	r2,zero
802170e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
802170e4:	e0bffb17 	ldw	r2,-20(fp)
802170e8:	10002126 	beq	r2,zero,80217170 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
802170ec:	e0bffb17 	ldw	r2,-20(fp)
802170f0:	10800217 	ldw	r2,8(r2)
802170f4:	108000cc 	andi	r2,r2,3
802170f8:	10001826 	beq	r2,zero,8021715c <write+0xbc>
802170fc:	e0bffb17 	ldw	r2,-20(fp)
80217100:	10800017 	ldw	r2,0(r2)
80217104:	10800617 	ldw	r2,24(r2)
80217108:	10001426 	beq	r2,zero,8021715c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
8021710c:	e0bffb17 	ldw	r2,-20(fp)
80217110:	10800017 	ldw	r2,0(r2)
80217114:	10800617 	ldw	r2,24(r2)
80217118:	e0ffff17 	ldw	r3,-4(fp)
8021711c:	180d883a 	mov	r6,r3
80217120:	e17ffe17 	ldw	r5,-8(fp)
80217124:	e13ffb17 	ldw	r4,-20(fp)
80217128:	103ee83a 	callr	r2
8021712c:	e0bffc15 	stw	r2,-16(fp)
80217130:	e0bffc17 	ldw	r2,-16(fp)
80217134:	1000070e 	bge	r2,zero,80217154 <write+0xb4>
      {
        ALT_ERRNO = -rval;
80217138:	02170640 	call	80217064 <alt_get_errno>
8021713c:	1007883a 	mov	r3,r2
80217140:	e0bffc17 	ldw	r2,-16(fp)
80217144:	0085c83a 	sub	r2,zero,r2
80217148:	18800015 	stw	r2,0(r3)
        return -1;
8021714c:	00bfffc4 	movi	r2,-1
80217150:	00000c06 	br	80217184 <write+0xe4>
      }
      return rval;
80217154:	e0bffc17 	ldw	r2,-16(fp)
80217158:	00000a06 	br	80217184 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
8021715c:	02170640 	call	80217064 <alt_get_errno>
80217160:	1007883a 	mov	r3,r2
80217164:	00800344 	movi	r2,13
80217168:	18800015 	stw	r2,0(r3)
8021716c:	00000406 	br	80217180 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
80217170:	02170640 	call	80217064 <alt_get_errno>
80217174:	1007883a 	mov	r3,r2
80217178:	00801444 	movi	r2,81
8021717c:	18800015 	stw	r2,0(r3)
  }
  return -1;
80217180:	00bfffc4 	movi	r2,-1
}
80217184:	e037883a 	mov	sp,fp
80217188:	dfc00117 	ldw	ra,4(sp)
8021718c:	df000017 	ldw	fp,0(sp)
80217190:	dec00204 	addi	sp,sp,8
80217194:	f800283a 	ret

80217198 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
80217198:	defffd04 	addi	sp,sp,-12
8021719c:	dfc00215 	stw	ra,8(sp)
802171a0:	df000115 	stw	fp,4(sp)
802171a4:	df000104 	addi	fp,sp,4
802171a8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
802171ac:	d1600904 	addi	r5,gp,-32732
802171b0:	e13fff17 	ldw	r4,-4(fp)
802171b4:	021a8500 	call	8021a850 <alt_dev_llist_insert>
}
802171b8:	e037883a 	mov	sp,fp
802171bc:	dfc00117 	ldw	ra,4(sp)
802171c0:	df000017 	ldw	fp,0(sp)
802171c4:	dec00204 	addi	sp,sp,8
802171c8:	f800283a 	ret

802171cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
802171cc:	defffd04 	addi	sp,sp,-12
802171d0:	dfc00215 	stw	ra,8(sp)
802171d4:	df000115 	stw	fp,4(sp)
802171d8:	df000104 	addi	fp,sp,4
802171dc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
802171e0:	021b2e00 	call	8021b2e0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
802171e4:	00800044 	movi	r2,1
802171e8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
802171ec:	0001883a 	nop
802171f0:	e037883a 	mov	sp,fp
802171f4:	dfc00117 	ldw	ra,4(sp)
802171f8:	df000017 	ldw	fp,0(sp)
802171fc:	dec00204 	addi	sp,sp,8
80217200:	f800283a 	ret

80217204 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
80217204:	defffe04 	addi	sp,sp,-8
80217208:	dfc00115 	stw	ra,4(sp)
8021720c:	df000015 	stw	fp,0(sp)
80217210:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
80217214:	01c0fa04 	movi	r7,1000
80217218:	01800144 	movi	r6,5
8021721c:	000b883a 	mov	r5,zero
80217220:	01204034 	movhi	r4,33024
80217224:	21011004 	addi	r4,r4,1088
80217228:	0217dcc0 	call	80217dcc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
8021722c:	01800084 	movi	r6,2
80217230:	000b883a 	mov	r5,zero
80217234:	012008b4 	movhi	r4,32802
80217238:	21365604 	addi	r4,r4,-9896
8021723c:	02174500 	call	80217450 <altera_avalon_jtag_uart_init>
80217240:	012008b4 	movhi	r4,32802
80217244:	21364c04 	addi	r4,r4,-9936
80217248:	02171980 	call	80217198 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
8021724c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
80217250:	01800104 	movi	r6,4
80217254:	000b883a 	mov	r5,zero
80217258:	012008b4 	movhi	r4,32802
8021725c:	213a6e04 	addi	r4,r4,-5704
80217260:	0217f580 	call	80217f58 <altera_avalon_uart_init>
80217264:	012008b4 	movhi	r4,32802
80217268:	213a6404 	addi	r4,r4,-5744
8021726c:	02171980 	call	80217198 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
80217270:	00a008b4 	movhi	r2,32802
80217274:	10ba9804 	addi	r2,r2,-5536
80217278:	10c00717 	ldw	r3,28(r2)
8021727c:	00a008b4 	movhi	r2,32802
80217280:	10ba9804 	addi	r2,r2,-5536
80217284:	10800817 	ldw	r2,32(r2)
80217288:	100d883a 	mov	r6,r2
8021728c:	180b883a 	mov	r5,r3
80217290:	012008b4 	movhi	r4,32802
80217294:	213a9804 	addi	r4,r4,-5536
80217298:	021a4100 	call	8021a410 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
8021729c:	00a008b4 	movhi	r2,32802
802172a0:	10bab004 	addi	r2,r2,-5440
802172a4:	10c00717 	ldw	r3,28(r2)
802172a8:	00a008b4 	movhi	r2,32802
802172ac:	10bab004 	addi	r2,r2,-5440
802172b0:	10800817 	ldw	r2,32(r2)
802172b4:	100d883a 	mov	r6,r2
802172b8:	180b883a 	mov	r5,r3
802172bc:	012008b4 	movhi	r4,32802
802172c0:	213ab004 	addi	r4,r4,-5440
802172c4:	021a4100 	call	8021a410 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
802172c8:	012008b4 	movhi	r4,32802
802172cc:	213ac804 	addi	r4,r4,-5344
802172d0:	02171980 	call	80217198 <alt_dev_reg>
}
802172d4:	0001883a 	nop
802172d8:	e037883a 	mov	sp,fp
802172dc:	dfc00117 	ldw	ra,4(sp)
802172e0:	df000017 	ldw	fp,0(sp)
802172e4:	dec00204 	addi	sp,sp,8
802172e8:	f800283a 	ret

802172ec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
802172ec:	defffa04 	addi	sp,sp,-24
802172f0:	dfc00515 	stw	ra,20(sp)
802172f4:	df000415 	stw	fp,16(sp)
802172f8:	df000404 	addi	fp,sp,16
802172fc:	e13ffd15 	stw	r4,-12(fp)
80217300:	e17ffe15 	stw	r5,-8(fp)
80217304:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80217308:	e0bffd17 	ldw	r2,-12(fp)
8021730c:	10800017 	ldw	r2,0(r2)
80217310:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
80217314:	e0bffc17 	ldw	r2,-16(fp)
80217318:	10c00a04 	addi	r3,r2,40
8021731c:	e0bffd17 	ldw	r2,-12(fp)
80217320:	10800217 	ldw	r2,8(r2)
80217324:	100f883a 	mov	r7,r2
80217328:	e1bfff17 	ldw	r6,-4(fp)
8021732c:	e17ffe17 	ldw	r5,-8(fp)
80217330:	1809883a 	mov	r4,r3
80217334:	02179140 	call	80217914 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
80217338:	e037883a 	mov	sp,fp
8021733c:	dfc00117 	ldw	ra,4(sp)
80217340:	df000017 	ldw	fp,0(sp)
80217344:	dec00204 	addi	sp,sp,8
80217348:	f800283a 	ret

8021734c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8021734c:	defffa04 	addi	sp,sp,-24
80217350:	dfc00515 	stw	ra,20(sp)
80217354:	df000415 	stw	fp,16(sp)
80217358:	df000404 	addi	fp,sp,16
8021735c:	e13ffd15 	stw	r4,-12(fp)
80217360:	e17ffe15 	stw	r5,-8(fp)
80217364:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80217368:	e0bffd17 	ldw	r2,-12(fp)
8021736c:	10800017 	ldw	r2,0(r2)
80217370:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
80217374:	e0bffc17 	ldw	r2,-16(fp)
80217378:	10c00a04 	addi	r3,r2,40
8021737c:	e0bffd17 	ldw	r2,-12(fp)
80217380:	10800217 	ldw	r2,8(r2)
80217384:	100f883a 	mov	r7,r2
80217388:	e1bfff17 	ldw	r6,-4(fp)
8021738c:	e17ffe17 	ldw	r5,-8(fp)
80217390:	1809883a 	mov	r4,r3
80217394:	0217b300 	call	80217b30 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
80217398:	e037883a 	mov	sp,fp
8021739c:	dfc00117 	ldw	ra,4(sp)
802173a0:	df000017 	ldw	fp,0(sp)
802173a4:	dec00204 	addi	sp,sp,8
802173a8:	f800283a 	ret

802173ac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
802173ac:	defffc04 	addi	sp,sp,-16
802173b0:	dfc00315 	stw	ra,12(sp)
802173b4:	df000215 	stw	fp,8(sp)
802173b8:	df000204 	addi	fp,sp,8
802173bc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
802173c0:	e0bfff17 	ldw	r2,-4(fp)
802173c4:	10800017 	ldw	r2,0(r2)
802173c8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
802173cc:	e0bffe17 	ldw	r2,-8(fp)
802173d0:	10c00a04 	addi	r3,r2,40
802173d4:	e0bfff17 	ldw	r2,-4(fp)
802173d8:	10800217 	ldw	r2,8(r2)
802173dc:	100b883a 	mov	r5,r2
802173e0:	1809883a 	mov	r4,r3
802173e4:	02177bc0 	call	802177bc <altera_avalon_jtag_uart_close>
}
802173e8:	e037883a 	mov	sp,fp
802173ec:	dfc00117 	ldw	ra,4(sp)
802173f0:	df000017 	ldw	fp,0(sp)
802173f4:	dec00204 	addi	sp,sp,8
802173f8:	f800283a 	ret

802173fc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
802173fc:	defffa04 	addi	sp,sp,-24
80217400:	dfc00515 	stw	ra,20(sp)
80217404:	df000415 	stw	fp,16(sp)
80217408:	df000404 	addi	fp,sp,16
8021740c:	e13ffd15 	stw	r4,-12(fp)
80217410:	e17ffe15 	stw	r5,-8(fp)
80217414:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
80217418:	e0bffd17 	ldw	r2,-12(fp)
8021741c:	10800017 	ldw	r2,0(r2)
80217420:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
80217424:	e0bffc17 	ldw	r2,-16(fp)
80217428:	10800a04 	addi	r2,r2,40
8021742c:	e1bfff17 	ldw	r6,-4(fp)
80217430:	e17ffe17 	ldw	r5,-8(fp)
80217434:	1009883a 	mov	r4,r2
80217438:	02178240 	call	80217824 <altera_avalon_jtag_uart_ioctl>
}
8021743c:	e037883a 	mov	sp,fp
80217440:	dfc00117 	ldw	ra,4(sp)
80217444:	df000017 	ldw	fp,0(sp)
80217448:	dec00204 	addi	sp,sp,8
8021744c:	f800283a 	ret

80217450 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
80217450:	defffa04 	addi	sp,sp,-24
80217454:	dfc00515 	stw	ra,20(sp)
80217458:	df000415 	stw	fp,16(sp)
8021745c:	df000404 	addi	fp,sp,16
80217460:	e13ffd15 	stw	r4,-12(fp)
80217464:	e17ffe15 	stw	r5,-8(fp)
80217468:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8021746c:	e0bffd17 	ldw	r2,-12(fp)
80217470:	00c00044 	movi	r3,1
80217474:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
80217478:	e0bffd17 	ldw	r2,-12(fp)
8021747c:	10800017 	ldw	r2,0(r2)
80217480:	10800104 	addi	r2,r2,4
80217484:	1007883a 	mov	r3,r2
80217488:	e0bffd17 	ldw	r2,-12(fp)
8021748c:	10800817 	ldw	r2,32(r2)
80217490:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
80217494:	e0bffe17 	ldw	r2,-8(fp)
80217498:	e0ffff17 	ldw	r3,-4(fp)
8021749c:	d8000015 	stw	zero,0(sp)
802174a0:	e1fffd17 	ldw	r7,-12(fp)
802174a4:	01a00874 	movhi	r6,32801
802174a8:	319d4404 	addi	r6,r6,29968
802174ac:	180b883a 	mov	r5,r3
802174b0:	1009883a 	mov	r4,r2
802174b4:	021aa440 	call	8021aa44 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
802174b8:	e0bffd17 	ldw	r2,-12(fp)
802174bc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
802174c0:	e0bffd17 	ldw	r2,-12(fp)
802174c4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
802174c8:	d0e02517 	ldw	r3,-32620(gp)
802174cc:	e1fffd17 	ldw	r7,-12(fp)
802174d0:	01a00874 	movhi	r6,32801
802174d4:	319dc704 	addi	r6,r6,30492
802174d8:	180b883a 	mov	r5,r3
802174dc:	1009883a 	mov	r4,r2
802174e0:	021a6c00 	call	8021a6c0 <alt_alarm_start>
802174e4:	1000040e 	bge	r2,zero,802174f8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
802174e8:	e0fffd17 	ldw	r3,-12(fp)
802174ec:	00a00034 	movhi	r2,32768
802174f0:	10bfffc4 	addi	r2,r2,-1
802174f4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
802174f8:	0001883a 	nop
802174fc:	e037883a 	mov	sp,fp
80217500:	dfc00117 	ldw	ra,4(sp)
80217504:	df000017 	ldw	fp,0(sp)
80217508:	dec00204 	addi	sp,sp,8
8021750c:	f800283a 	ret

80217510 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
80217510:	defff804 	addi	sp,sp,-32
80217514:	df000715 	stw	fp,28(sp)
80217518:	df000704 	addi	fp,sp,28
8021751c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
80217520:	e0bfff17 	ldw	r2,-4(fp)
80217524:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
80217528:	e0bffb17 	ldw	r2,-20(fp)
8021752c:	10800017 	ldw	r2,0(r2)
80217530:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80217534:	e0bffc17 	ldw	r2,-16(fp)
80217538:	10800104 	addi	r2,r2,4
8021753c:	10800037 	ldwio	r2,0(r2)
80217540:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
80217544:	e0bffd17 	ldw	r2,-12(fp)
80217548:	1080c00c 	andi	r2,r2,768
8021754c:	10006d26 	beq	r2,zero,80217704 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
80217550:	e0bffd17 	ldw	r2,-12(fp)
80217554:	1080400c 	andi	r2,r2,256
80217558:	10003526 	beq	r2,zero,80217630 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
8021755c:	00800074 	movhi	r2,1
80217560:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80217564:	e0bffb17 	ldw	r2,-20(fp)
80217568:	10800a17 	ldw	r2,40(r2)
8021756c:	10800044 	addi	r2,r2,1
80217570:	1081ffcc 	andi	r2,r2,2047
80217574:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
80217578:	e0bffb17 	ldw	r2,-20(fp)
8021757c:	10c00b17 	ldw	r3,44(r2)
80217580:	e0bffe17 	ldw	r2,-8(fp)
80217584:	18801526 	beq	r3,r2,802175dc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
80217588:	e0bffc17 	ldw	r2,-16(fp)
8021758c:	10800037 	ldwio	r2,0(r2)
80217590:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
80217594:	e0bff917 	ldw	r2,-28(fp)
80217598:	10a0000c 	andi	r2,r2,32768
8021759c:	10001126 	beq	r2,zero,802175e4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
802175a0:	e0bffb17 	ldw	r2,-20(fp)
802175a4:	10800a17 	ldw	r2,40(r2)
802175a8:	e0fff917 	ldw	r3,-28(fp)
802175ac:	1809883a 	mov	r4,r3
802175b0:	e0fffb17 	ldw	r3,-20(fp)
802175b4:	1885883a 	add	r2,r3,r2
802175b8:	10800e04 	addi	r2,r2,56
802175bc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
802175c0:	e0bffb17 	ldw	r2,-20(fp)
802175c4:	10800a17 	ldw	r2,40(r2)
802175c8:	10800044 	addi	r2,r2,1
802175cc:	10c1ffcc 	andi	r3,r2,2047
802175d0:	e0bffb17 	ldw	r2,-20(fp)
802175d4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
802175d8:	003fe206 	br	80217564 <__reset+0xfa1f7564>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
802175dc:	0001883a 	nop
802175e0:	00000106 	br	802175e8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
802175e4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
802175e8:	e0bff917 	ldw	r2,-28(fp)
802175ec:	10bfffec 	andhi	r2,r2,65535
802175f0:	10000f26 	beq	r2,zero,80217630 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
802175f4:	e0bffb17 	ldw	r2,-20(fp)
802175f8:	10c00817 	ldw	r3,32(r2)
802175fc:	00bfff84 	movi	r2,-2
80217600:	1886703a 	and	r3,r3,r2
80217604:	e0bffb17 	ldw	r2,-20(fp)
80217608:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
8021760c:	e0bffc17 	ldw	r2,-16(fp)
80217610:	10800104 	addi	r2,r2,4
80217614:	1007883a 	mov	r3,r2
80217618:	e0bffb17 	ldw	r2,-20(fp)
8021761c:	10800817 	ldw	r2,32(r2)
80217620:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80217624:	e0bffc17 	ldw	r2,-16(fp)
80217628:	10800104 	addi	r2,r2,4
8021762c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
80217630:	e0bffd17 	ldw	r2,-12(fp)
80217634:	1080800c 	andi	r2,r2,512
80217638:	103fbe26 	beq	r2,zero,80217534 <__reset+0xfa1f7534>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
8021763c:	e0bffd17 	ldw	r2,-12(fp)
80217640:	1004d43a 	srli	r2,r2,16
80217644:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
80217648:	00001406 	br	8021769c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
8021764c:	e0bffc17 	ldw	r2,-16(fp)
80217650:	e0fffb17 	ldw	r3,-20(fp)
80217654:	18c00d17 	ldw	r3,52(r3)
80217658:	e13ffb17 	ldw	r4,-20(fp)
8021765c:	20c7883a 	add	r3,r4,r3
80217660:	18c20e04 	addi	r3,r3,2104
80217664:	18c00003 	ldbu	r3,0(r3)
80217668:	18c03fcc 	andi	r3,r3,255
8021766c:	18c0201c 	xori	r3,r3,128
80217670:	18ffe004 	addi	r3,r3,-128
80217674:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80217678:	e0bffb17 	ldw	r2,-20(fp)
8021767c:	10800d17 	ldw	r2,52(r2)
80217680:	10800044 	addi	r2,r2,1
80217684:	10c1ffcc 	andi	r3,r2,2047
80217688:	e0bffb17 	ldw	r2,-20(fp)
8021768c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
80217690:	e0bffa17 	ldw	r2,-24(fp)
80217694:	10bfffc4 	addi	r2,r2,-1
80217698:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
8021769c:	e0bffa17 	ldw	r2,-24(fp)
802176a0:	10000526 	beq	r2,zero,802176b8 <altera_avalon_jtag_uart_irq+0x1a8>
802176a4:	e0bffb17 	ldw	r2,-20(fp)
802176a8:	10c00d17 	ldw	r3,52(r2)
802176ac:	e0bffb17 	ldw	r2,-20(fp)
802176b0:	10800c17 	ldw	r2,48(r2)
802176b4:	18bfe51e 	bne	r3,r2,8021764c <__reset+0xfa1f764c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
802176b8:	e0bffa17 	ldw	r2,-24(fp)
802176bc:	103f9d26 	beq	r2,zero,80217534 <__reset+0xfa1f7534>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
802176c0:	e0bffb17 	ldw	r2,-20(fp)
802176c4:	10c00817 	ldw	r3,32(r2)
802176c8:	00bfff44 	movi	r2,-3
802176cc:	1886703a 	and	r3,r3,r2
802176d0:	e0bffb17 	ldw	r2,-20(fp)
802176d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
802176d8:	e0bffb17 	ldw	r2,-20(fp)
802176dc:	10800017 	ldw	r2,0(r2)
802176e0:	10800104 	addi	r2,r2,4
802176e4:	1007883a 	mov	r3,r2
802176e8:	e0bffb17 	ldw	r2,-20(fp)
802176ec:	10800817 	ldw	r2,32(r2)
802176f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
802176f4:	e0bffc17 	ldw	r2,-16(fp)
802176f8:	10800104 	addi	r2,r2,4
802176fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
80217700:	003f8c06 	br	80217534 <__reset+0xfa1f7534>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
80217704:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
80217708:	0001883a 	nop
8021770c:	e037883a 	mov	sp,fp
80217710:	df000017 	ldw	fp,0(sp)
80217714:	dec00104 	addi	sp,sp,4
80217718:	f800283a 	ret

8021771c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
8021771c:	defff804 	addi	sp,sp,-32
80217720:	df000715 	stw	fp,28(sp)
80217724:	df000704 	addi	fp,sp,28
80217728:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
8021772c:	e0bffb17 	ldw	r2,-20(fp)
80217730:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
80217734:	e0bff917 	ldw	r2,-28(fp)
80217738:	10800017 	ldw	r2,0(r2)
8021773c:	10800104 	addi	r2,r2,4
80217740:	10800037 	ldwio	r2,0(r2)
80217744:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
80217748:	e0bffa17 	ldw	r2,-24(fp)
8021774c:	1081000c 	andi	r2,r2,1024
80217750:	10000b26 	beq	r2,zero,80217780 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
80217754:	e0bff917 	ldw	r2,-28(fp)
80217758:	10800017 	ldw	r2,0(r2)
8021775c:	10800104 	addi	r2,r2,4
80217760:	1007883a 	mov	r3,r2
80217764:	e0bff917 	ldw	r2,-28(fp)
80217768:	10800817 	ldw	r2,32(r2)
8021776c:	10810014 	ori	r2,r2,1024
80217770:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
80217774:	e0bff917 	ldw	r2,-28(fp)
80217778:	10000915 	stw	zero,36(r2)
8021777c:	00000a06 	br	802177a8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
80217780:	e0bff917 	ldw	r2,-28(fp)
80217784:	10c00917 	ldw	r3,36(r2)
80217788:	00a00034 	movhi	r2,32768
8021778c:	10bfff04 	addi	r2,r2,-4
80217790:	10c00536 	bltu	r2,r3,802177a8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
80217794:	e0bff917 	ldw	r2,-28(fp)
80217798:	10800917 	ldw	r2,36(r2)
8021779c:	10c00044 	addi	r3,r2,1
802177a0:	e0bff917 	ldw	r2,-28(fp)
802177a4:	10c00915 	stw	r3,36(r2)
802177a8:	d0a02517 	ldw	r2,-32620(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
802177ac:	e037883a 	mov	sp,fp
802177b0:	df000017 	ldw	fp,0(sp)
802177b4:	dec00104 	addi	sp,sp,4
802177b8:	f800283a 	ret

802177bc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
802177bc:	defffd04 	addi	sp,sp,-12
802177c0:	df000215 	stw	fp,8(sp)
802177c4:	df000204 	addi	fp,sp,8
802177c8:	e13ffe15 	stw	r4,-8(fp)
802177cc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
802177d0:	00000506 	br	802177e8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
802177d4:	e0bfff17 	ldw	r2,-4(fp)
802177d8:	1090000c 	andi	r2,r2,16384
802177dc:	10000226 	beq	r2,zero,802177e8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
802177e0:	00bffd44 	movi	r2,-11
802177e4:	00000b06 	br	80217814 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
802177e8:	e0bffe17 	ldw	r2,-8(fp)
802177ec:	10c00d17 	ldw	r3,52(r2)
802177f0:	e0bffe17 	ldw	r2,-8(fp)
802177f4:	10800c17 	ldw	r2,48(r2)
802177f8:	18800526 	beq	r3,r2,80217810 <altera_avalon_jtag_uart_close+0x54>
802177fc:	e0bffe17 	ldw	r2,-8(fp)
80217800:	10c00917 	ldw	r3,36(r2)
80217804:	e0bffe17 	ldw	r2,-8(fp)
80217808:	10800117 	ldw	r2,4(r2)
8021780c:	18bff136 	bltu	r3,r2,802177d4 <__reset+0xfa1f77d4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
80217810:	0005883a 	mov	r2,zero
}
80217814:	e037883a 	mov	sp,fp
80217818:	df000017 	ldw	fp,0(sp)
8021781c:	dec00104 	addi	sp,sp,4
80217820:	f800283a 	ret

80217824 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
80217824:	defffa04 	addi	sp,sp,-24
80217828:	df000515 	stw	fp,20(sp)
8021782c:	df000504 	addi	fp,sp,20
80217830:	e13ffd15 	stw	r4,-12(fp)
80217834:	e17ffe15 	stw	r5,-8(fp)
80217838:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
8021783c:	00bff9c4 	movi	r2,-25
80217840:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
80217844:	e0bffe17 	ldw	r2,-8(fp)
80217848:	10da8060 	cmpeqi	r3,r2,27137
8021784c:	1800031e 	bne	r3,zero,8021785c <altera_avalon_jtag_uart_ioctl+0x38>
80217850:	109a80a0 	cmpeqi	r2,r2,27138
80217854:	1000181e 	bne	r2,zero,802178b8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
80217858:	00002906 	br	80217900 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
8021785c:	e0bffd17 	ldw	r2,-12(fp)
80217860:	10c00117 	ldw	r3,4(r2)
80217864:	00a00034 	movhi	r2,32768
80217868:	10bfffc4 	addi	r2,r2,-1
8021786c:	18802126 	beq	r3,r2,802178f4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
80217870:	e0bfff17 	ldw	r2,-4(fp)
80217874:	10800017 	ldw	r2,0(r2)
80217878:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
8021787c:	e0bffc17 	ldw	r2,-16(fp)
80217880:	10800090 	cmplti	r2,r2,2
80217884:	1000061e 	bne	r2,zero,802178a0 <altera_avalon_jtag_uart_ioctl+0x7c>
80217888:	e0fffc17 	ldw	r3,-16(fp)
8021788c:	00a00034 	movhi	r2,32768
80217890:	10bfffc4 	addi	r2,r2,-1
80217894:	18800226 	beq	r3,r2,802178a0 <altera_avalon_jtag_uart_ioctl+0x7c>
80217898:	e0bffc17 	ldw	r2,-16(fp)
8021789c:	00000206 	br	802178a8 <altera_avalon_jtag_uart_ioctl+0x84>
802178a0:	00a00034 	movhi	r2,32768
802178a4:	10bfff84 	addi	r2,r2,-2
802178a8:	e0fffd17 	ldw	r3,-12(fp)
802178ac:	18800115 	stw	r2,4(r3)
      rc = 0;
802178b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
802178b4:	00000f06 	br	802178f4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
802178b8:	e0bffd17 	ldw	r2,-12(fp)
802178bc:	10c00117 	ldw	r3,4(r2)
802178c0:	00a00034 	movhi	r2,32768
802178c4:	10bfffc4 	addi	r2,r2,-1
802178c8:	18800c26 	beq	r3,r2,802178fc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
802178cc:	e0bffd17 	ldw	r2,-12(fp)
802178d0:	10c00917 	ldw	r3,36(r2)
802178d4:	e0bffd17 	ldw	r2,-12(fp)
802178d8:	10800117 	ldw	r2,4(r2)
802178dc:	1885803a 	cmpltu	r2,r3,r2
802178e0:	10c03fcc 	andi	r3,r2,255
802178e4:	e0bfff17 	ldw	r2,-4(fp)
802178e8:	10c00015 	stw	r3,0(r2)
      rc = 0;
802178ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
802178f0:	00000206 	br	802178fc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
802178f4:	0001883a 	nop
802178f8:	00000106 	br	80217900 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
802178fc:	0001883a 	nop

  default:
    break;
  }

  return rc;
80217900:	e0bffb17 	ldw	r2,-20(fp)
}
80217904:	e037883a 	mov	sp,fp
80217908:	df000017 	ldw	fp,0(sp)
8021790c:	dec00104 	addi	sp,sp,4
80217910:	f800283a 	ret

80217914 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
80217914:	defff304 	addi	sp,sp,-52
80217918:	dfc00c15 	stw	ra,48(sp)
8021791c:	df000b15 	stw	fp,44(sp)
80217920:	df000b04 	addi	fp,sp,44
80217924:	e13ffc15 	stw	r4,-16(fp)
80217928:	e17ffd15 	stw	r5,-12(fp)
8021792c:	e1bffe15 	stw	r6,-8(fp)
80217930:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
80217934:	e0bffd17 	ldw	r2,-12(fp)
80217938:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
8021793c:	00004706 	br	80217a5c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
80217940:	e0bffc17 	ldw	r2,-16(fp)
80217944:	10800a17 	ldw	r2,40(r2)
80217948:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
8021794c:	e0bffc17 	ldw	r2,-16(fp)
80217950:	10800b17 	ldw	r2,44(r2)
80217954:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
80217958:	e0fff717 	ldw	r3,-36(fp)
8021795c:	e0bff817 	ldw	r2,-32(fp)
80217960:	18800536 	bltu	r3,r2,80217978 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
80217964:	e0fff717 	ldw	r3,-36(fp)
80217968:	e0bff817 	ldw	r2,-32(fp)
8021796c:	1885c83a 	sub	r2,r3,r2
80217970:	e0bff615 	stw	r2,-40(fp)
80217974:	00000406 	br	80217988 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
80217978:	00c20004 	movi	r3,2048
8021797c:	e0bff817 	ldw	r2,-32(fp)
80217980:	1885c83a 	sub	r2,r3,r2
80217984:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
80217988:	e0bff617 	ldw	r2,-40(fp)
8021798c:	10001e26 	beq	r2,zero,80217a08 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
80217990:	e0fffe17 	ldw	r3,-8(fp)
80217994:	e0bff617 	ldw	r2,-40(fp)
80217998:	1880022e 	bgeu	r3,r2,802179a4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
8021799c:	e0bffe17 	ldw	r2,-8(fp)
802179a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
802179a4:	e0bffc17 	ldw	r2,-16(fp)
802179a8:	10c00e04 	addi	r3,r2,56
802179ac:	e0bff817 	ldw	r2,-32(fp)
802179b0:	1885883a 	add	r2,r3,r2
802179b4:	e1bff617 	ldw	r6,-40(fp)
802179b8:	100b883a 	mov	r5,r2
802179bc:	e13ff517 	ldw	r4,-44(fp)
802179c0:	02066c00 	call	802066c0 <memcpy>
      ptr   += n;
802179c4:	e0fff517 	ldw	r3,-44(fp)
802179c8:	e0bff617 	ldw	r2,-40(fp)
802179cc:	1885883a 	add	r2,r3,r2
802179d0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
802179d4:	e0fffe17 	ldw	r3,-8(fp)
802179d8:	e0bff617 	ldw	r2,-40(fp)
802179dc:	1885c83a 	sub	r2,r3,r2
802179e0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
802179e4:	e0fff817 	ldw	r3,-32(fp)
802179e8:	e0bff617 	ldw	r2,-40(fp)
802179ec:	1885883a 	add	r2,r3,r2
802179f0:	10c1ffcc 	andi	r3,r2,2047
802179f4:	e0bffc17 	ldw	r2,-16(fp)
802179f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
802179fc:	e0bffe17 	ldw	r2,-8(fp)
80217a00:	00bfcf16 	blt	zero,r2,80217940 <__reset+0xfa1f7940>
80217a04:	00000106 	br	80217a0c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
80217a08:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
80217a0c:	e0fff517 	ldw	r3,-44(fp)
80217a10:	e0bffd17 	ldw	r2,-12(fp)
80217a14:	1880141e 	bne	r3,r2,80217a68 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
80217a18:	e0bfff17 	ldw	r2,-4(fp)
80217a1c:	1090000c 	andi	r2,r2,16384
80217a20:	1000131e 	bne	r2,zero,80217a70 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
80217a24:	0001883a 	nop
80217a28:	e0bffc17 	ldw	r2,-16(fp)
80217a2c:	10c00a17 	ldw	r3,40(r2)
80217a30:	e0bff717 	ldw	r2,-36(fp)
80217a34:	1880051e 	bne	r3,r2,80217a4c <altera_avalon_jtag_uart_read+0x138>
80217a38:	e0bffc17 	ldw	r2,-16(fp)
80217a3c:	10c00917 	ldw	r3,36(r2)
80217a40:	e0bffc17 	ldw	r2,-16(fp)
80217a44:	10800117 	ldw	r2,4(r2)
80217a48:	18bff736 	bltu	r3,r2,80217a28 <__reset+0xfa1f7a28>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
80217a4c:	e0bffc17 	ldw	r2,-16(fp)
80217a50:	10c00a17 	ldw	r3,40(r2)
80217a54:	e0bff717 	ldw	r2,-36(fp)
80217a58:	18800726 	beq	r3,r2,80217a78 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
80217a5c:	e0bffe17 	ldw	r2,-8(fp)
80217a60:	00bfb716 	blt	zero,r2,80217940 <__reset+0xfa1f7940>
80217a64:	00000506 	br	80217a7c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
80217a68:	0001883a 	nop
80217a6c:	00000306 	br	80217a7c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
80217a70:	0001883a 	nop
80217a74:	00000106 	br	80217a7c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
80217a78:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
80217a7c:	e0fff517 	ldw	r3,-44(fp)
80217a80:	e0bffd17 	ldw	r2,-12(fp)
80217a84:	18801826 	beq	r3,r2,80217ae8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217a88:	0005303a 	rdctl	r2,status
80217a8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80217a90:	e0fffb17 	ldw	r3,-20(fp)
80217a94:	00bfff84 	movi	r2,-2
80217a98:	1884703a 	and	r2,r3,r2
80217a9c:	1001703a 	wrctl	status,r2
  
  return context;
80217aa0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
80217aa4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80217aa8:	e0bffc17 	ldw	r2,-16(fp)
80217aac:	10800817 	ldw	r2,32(r2)
80217ab0:	10c00054 	ori	r3,r2,1
80217ab4:	e0bffc17 	ldw	r2,-16(fp)
80217ab8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80217abc:	e0bffc17 	ldw	r2,-16(fp)
80217ac0:	10800017 	ldw	r2,0(r2)
80217ac4:	10800104 	addi	r2,r2,4
80217ac8:	1007883a 	mov	r3,r2
80217acc:	e0bffc17 	ldw	r2,-16(fp)
80217ad0:	10800817 	ldw	r2,32(r2)
80217ad4:	18800035 	stwio	r2,0(r3)
80217ad8:	e0bffa17 	ldw	r2,-24(fp)
80217adc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80217ae0:	e0bff917 	ldw	r2,-28(fp)
80217ae4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
80217ae8:	e0fff517 	ldw	r3,-44(fp)
80217aec:	e0bffd17 	ldw	r2,-12(fp)
80217af0:	18800426 	beq	r3,r2,80217b04 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
80217af4:	e0fff517 	ldw	r3,-44(fp)
80217af8:	e0bffd17 	ldw	r2,-12(fp)
80217afc:	1885c83a 	sub	r2,r3,r2
80217b00:	00000606 	br	80217b1c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
80217b04:	e0bfff17 	ldw	r2,-4(fp)
80217b08:	1090000c 	andi	r2,r2,16384
80217b0c:	10000226 	beq	r2,zero,80217b18 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
80217b10:	00bffd44 	movi	r2,-11
80217b14:	00000106 	br	80217b1c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
80217b18:	00bffec4 	movi	r2,-5
}
80217b1c:	e037883a 	mov	sp,fp
80217b20:	dfc00117 	ldw	ra,4(sp)
80217b24:	df000017 	ldw	fp,0(sp)
80217b28:	dec00204 	addi	sp,sp,8
80217b2c:	f800283a 	ret

80217b30 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
80217b30:	defff304 	addi	sp,sp,-52
80217b34:	dfc00c15 	stw	ra,48(sp)
80217b38:	df000b15 	stw	fp,44(sp)
80217b3c:	df000b04 	addi	fp,sp,44
80217b40:	e13ffc15 	stw	r4,-16(fp)
80217b44:	e17ffd15 	stw	r5,-12(fp)
80217b48:	e1bffe15 	stw	r6,-8(fp)
80217b4c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
80217b50:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
80217b54:	e0bffd17 	ldw	r2,-12(fp)
80217b58:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
80217b5c:	00003706 	br	80217c3c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
80217b60:	e0bffc17 	ldw	r2,-16(fp)
80217b64:	10800c17 	ldw	r2,48(r2)
80217b68:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
80217b6c:	e0bffc17 	ldw	r2,-16(fp)
80217b70:	10800d17 	ldw	r2,52(r2)
80217b74:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
80217b78:	e0fff917 	ldw	r3,-28(fp)
80217b7c:	e0bff517 	ldw	r2,-44(fp)
80217b80:	1880062e 	bgeu	r3,r2,80217b9c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
80217b84:	e0fff517 	ldw	r3,-44(fp)
80217b88:	e0bff917 	ldw	r2,-28(fp)
80217b8c:	1885c83a 	sub	r2,r3,r2
80217b90:	10bfffc4 	addi	r2,r2,-1
80217b94:	e0bff615 	stw	r2,-40(fp)
80217b98:	00000b06 	br	80217bc8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
80217b9c:	e0bff517 	ldw	r2,-44(fp)
80217ba0:	10000526 	beq	r2,zero,80217bb8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
80217ba4:	00c20004 	movi	r3,2048
80217ba8:	e0bff917 	ldw	r2,-28(fp)
80217bac:	1885c83a 	sub	r2,r3,r2
80217bb0:	e0bff615 	stw	r2,-40(fp)
80217bb4:	00000406 	br	80217bc8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
80217bb8:	00c1ffc4 	movi	r3,2047
80217bbc:	e0bff917 	ldw	r2,-28(fp)
80217bc0:	1885c83a 	sub	r2,r3,r2
80217bc4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
80217bc8:	e0bff617 	ldw	r2,-40(fp)
80217bcc:	10001e26 	beq	r2,zero,80217c48 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
80217bd0:	e0fffe17 	ldw	r3,-8(fp)
80217bd4:	e0bff617 	ldw	r2,-40(fp)
80217bd8:	1880022e 	bgeu	r3,r2,80217be4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
80217bdc:	e0bffe17 	ldw	r2,-8(fp)
80217be0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
80217be4:	e0bffc17 	ldw	r2,-16(fp)
80217be8:	10c20e04 	addi	r3,r2,2104
80217bec:	e0bff917 	ldw	r2,-28(fp)
80217bf0:	1885883a 	add	r2,r3,r2
80217bf4:	e1bff617 	ldw	r6,-40(fp)
80217bf8:	e17ffd17 	ldw	r5,-12(fp)
80217bfc:	1009883a 	mov	r4,r2
80217c00:	02066c00 	call	802066c0 <memcpy>
      ptr   += n;
80217c04:	e0fffd17 	ldw	r3,-12(fp)
80217c08:	e0bff617 	ldw	r2,-40(fp)
80217c0c:	1885883a 	add	r2,r3,r2
80217c10:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
80217c14:	e0fffe17 	ldw	r3,-8(fp)
80217c18:	e0bff617 	ldw	r2,-40(fp)
80217c1c:	1885c83a 	sub	r2,r3,r2
80217c20:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80217c24:	e0fff917 	ldw	r3,-28(fp)
80217c28:	e0bff617 	ldw	r2,-40(fp)
80217c2c:	1885883a 	add	r2,r3,r2
80217c30:	10c1ffcc 	andi	r3,r2,2047
80217c34:	e0bffc17 	ldw	r2,-16(fp)
80217c38:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
80217c3c:	e0bffe17 	ldw	r2,-8(fp)
80217c40:	00bfc716 	blt	zero,r2,80217b60 <__reset+0xfa1f7b60>
80217c44:	00000106 	br	80217c4c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
80217c48:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217c4c:	0005303a 	rdctl	r2,status
80217c50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80217c54:	e0fffb17 	ldw	r3,-20(fp)
80217c58:	00bfff84 	movi	r2,-2
80217c5c:	1884703a 	and	r2,r3,r2
80217c60:	1001703a 	wrctl	status,r2
  
  return context;
80217c64:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
80217c68:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
80217c6c:	e0bffc17 	ldw	r2,-16(fp)
80217c70:	10800817 	ldw	r2,32(r2)
80217c74:	10c00094 	ori	r3,r2,2
80217c78:	e0bffc17 	ldw	r2,-16(fp)
80217c7c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80217c80:	e0bffc17 	ldw	r2,-16(fp)
80217c84:	10800017 	ldw	r2,0(r2)
80217c88:	10800104 	addi	r2,r2,4
80217c8c:	1007883a 	mov	r3,r2
80217c90:	e0bffc17 	ldw	r2,-16(fp)
80217c94:	10800817 	ldw	r2,32(r2)
80217c98:	18800035 	stwio	r2,0(r3)
80217c9c:	e0bffa17 	ldw	r2,-24(fp)
80217ca0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80217ca4:	e0bff817 	ldw	r2,-32(fp)
80217ca8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
80217cac:	e0bffe17 	ldw	r2,-8(fp)
80217cb0:	0080100e 	bge	zero,r2,80217cf4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
80217cb4:	e0bfff17 	ldw	r2,-4(fp)
80217cb8:	1090000c 	andi	r2,r2,16384
80217cbc:	1000101e 	bne	r2,zero,80217d00 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
80217cc0:	0001883a 	nop
80217cc4:	e0bffc17 	ldw	r2,-16(fp)
80217cc8:	10c00d17 	ldw	r3,52(r2)
80217ccc:	e0bff517 	ldw	r2,-44(fp)
80217cd0:	1880051e 	bne	r3,r2,80217ce8 <altera_avalon_jtag_uart_write+0x1b8>
80217cd4:	e0bffc17 	ldw	r2,-16(fp)
80217cd8:	10c00917 	ldw	r3,36(r2)
80217cdc:	e0bffc17 	ldw	r2,-16(fp)
80217ce0:	10800117 	ldw	r2,4(r2)
80217ce4:	18bff736 	bltu	r3,r2,80217cc4 <__reset+0xfa1f7cc4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
80217ce8:	e0bffc17 	ldw	r2,-16(fp)
80217cec:	10800917 	ldw	r2,36(r2)
80217cf0:	1000051e 	bne	r2,zero,80217d08 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
80217cf4:	e0bffe17 	ldw	r2,-8(fp)
80217cf8:	00bfd016 	blt	zero,r2,80217c3c <__reset+0xfa1f7c3c>
80217cfc:	00000306 	br	80217d0c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
80217d00:	0001883a 	nop
80217d04:	00000106 	br	80217d0c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
80217d08:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
80217d0c:	e0fffd17 	ldw	r3,-12(fp)
80217d10:	e0bff717 	ldw	r2,-36(fp)
80217d14:	18800426 	beq	r3,r2,80217d28 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
80217d18:	e0fffd17 	ldw	r3,-12(fp)
80217d1c:	e0bff717 	ldw	r2,-36(fp)
80217d20:	1885c83a 	sub	r2,r3,r2
80217d24:	00000606 	br	80217d40 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
80217d28:	e0bfff17 	ldw	r2,-4(fp)
80217d2c:	1090000c 	andi	r2,r2,16384
80217d30:	10000226 	beq	r2,zero,80217d3c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
80217d34:	00bffd44 	movi	r2,-11
80217d38:	00000106 	br	80217d40 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
80217d3c:	00bffec4 	movi	r2,-5
}
80217d40:	e037883a 	mov	sp,fp
80217d44:	dfc00117 	ldw	ra,4(sp)
80217d48:	df000017 	ldw	fp,0(sp)
80217d4c:	dec00204 	addi	sp,sp,8
80217d50:	f800283a 	ret

80217d54 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
80217d54:	defffa04 	addi	sp,sp,-24
80217d58:	dfc00515 	stw	ra,20(sp)
80217d5c:	df000415 	stw	fp,16(sp)
80217d60:	df000404 	addi	fp,sp,16
80217d64:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
80217d68:	0007883a 	mov	r3,zero
80217d6c:	e0bfff17 	ldw	r2,-4(fp)
80217d70:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
80217d74:	e0bfff17 	ldw	r2,-4(fp)
80217d78:	10800104 	addi	r2,r2,4
80217d7c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217d80:	0005303a 	rdctl	r2,status
80217d84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80217d88:	e0fffd17 	ldw	r3,-12(fp)
80217d8c:	00bfff84 	movi	r2,-2
80217d90:	1884703a 	and	r2,r3,r2
80217d94:	1001703a 	wrctl	status,r2
  
  return context;
80217d98:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
80217d9c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
80217da0:	0216f2c0 	call	80216f2c <alt_tick>
80217da4:	e0bffc17 	ldw	r2,-16(fp)
80217da8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80217dac:	e0bffe17 	ldw	r2,-8(fp)
80217db0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
80217db4:	0001883a 	nop
80217db8:	e037883a 	mov	sp,fp
80217dbc:	dfc00117 	ldw	ra,4(sp)
80217dc0:	df000017 	ldw	fp,0(sp)
80217dc4:	dec00204 	addi	sp,sp,8
80217dc8:	f800283a 	ret

80217dcc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
80217dcc:	defff804 	addi	sp,sp,-32
80217dd0:	dfc00715 	stw	ra,28(sp)
80217dd4:	df000615 	stw	fp,24(sp)
80217dd8:	df000604 	addi	fp,sp,24
80217ddc:	e13ffc15 	stw	r4,-16(fp)
80217de0:	e17ffd15 	stw	r5,-12(fp)
80217de4:	e1bffe15 	stw	r6,-8(fp)
80217de8:	e1ffff15 	stw	r7,-4(fp)
80217dec:	e0bfff17 	ldw	r2,-4(fp)
80217df0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
80217df4:	d0a02517 	ldw	r2,-32620(gp)
80217df8:	1000021e 	bne	r2,zero,80217e04 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
80217dfc:	e0bffb17 	ldw	r2,-20(fp)
80217e00:	d0a02515 	stw	r2,-32620(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
80217e04:	e0bffc17 	ldw	r2,-16(fp)
80217e08:	10800104 	addi	r2,r2,4
80217e0c:	00c001c4 	movi	r3,7
80217e10:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
80217e14:	d8000015 	stw	zero,0(sp)
80217e18:	e1fffc17 	ldw	r7,-16(fp)
80217e1c:	01a00874 	movhi	r6,32801
80217e20:	319f5504 	addi	r6,r6,32084
80217e24:	e17ffe17 	ldw	r5,-8(fp)
80217e28:	e13ffd17 	ldw	r4,-12(fp)
80217e2c:	021aa440 	call	8021aa44 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
80217e30:	0001883a 	nop
80217e34:	e037883a 	mov	sp,fp
80217e38:	dfc00117 	ldw	ra,4(sp)
80217e3c:	df000017 	ldw	fp,0(sp)
80217e40:	dec00204 	addi	sp,sp,8
80217e44:	f800283a 	ret

80217e48 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
80217e48:	defffa04 	addi	sp,sp,-24
80217e4c:	dfc00515 	stw	ra,20(sp)
80217e50:	df000415 	stw	fp,16(sp)
80217e54:	df000404 	addi	fp,sp,16
80217e58:	e13ffd15 	stw	r4,-12(fp)
80217e5c:	e17ffe15 	stw	r5,-8(fp)
80217e60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
80217e64:	e0bffd17 	ldw	r2,-12(fp)
80217e68:	10800017 	ldw	r2,0(r2)
80217e6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
80217e70:	e0bffc17 	ldw	r2,-16(fp)
80217e74:	10c00a04 	addi	r3,r2,40
80217e78:	e0bffd17 	ldw	r2,-12(fp)
80217e7c:	10800217 	ldw	r2,8(r2)
80217e80:	100f883a 	mov	r7,r2
80217e84:	e1bfff17 	ldw	r6,-4(fp)
80217e88:	e17ffe17 	ldw	r5,-8(fp)
80217e8c:	1809883a 	mov	r4,r3
80217e90:	021835c0 	call	8021835c <altera_avalon_uart_read>
      fd->fd_flags);
}
80217e94:	e037883a 	mov	sp,fp
80217e98:	dfc00117 	ldw	ra,4(sp)
80217e9c:	df000017 	ldw	fp,0(sp)
80217ea0:	dec00204 	addi	sp,sp,8
80217ea4:	f800283a 	ret

80217ea8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
80217ea8:	defffa04 	addi	sp,sp,-24
80217eac:	dfc00515 	stw	ra,20(sp)
80217eb0:	df000415 	stw	fp,16(sp)
80217eb4:	df000404 	addi	fp,sp,16
80217eb8:	e13ffd15 	stw	r4,-12(fp)
80217ebc:	e17ffe15 	stw	r5,-8(fp)
80217ec0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
80217ec4:	e0bffd17 	ldw	r2,-12(fp)
80217ec8:	10800017 	ldw	r2,0(r2)
80217ecc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
80217ed0:	e0bffc17 	ldw	r2,-16(fp)
80217ed4:	10c00a04 	addi	r3,r2,40
80217ed8:	e0bffd17 	ldw	r2,-12(fp)
80217edc:	10800217 	ldw	r2,8(r2)
80217ee0:	100f883a 	mov	r7,r2
80217ee4:	e1bfff17 	ldw	r6,-4(fp)
80217ee8:	e17ffe17 	ldw	r5,-8(fp)
80217eec:	1809883a 	mov	r4,r3
80217ef0:	02185740 	call	80218574 <altera_avalon_uart_write>
      fd->fd_flags);
}
80217ef4:	e037883a 	mov	sp,fp
80217ef8:	dfc00117 	ldw	ra,4(sp)
80217efc:	df000017 	ldw	fp,0(sp)
80217f00:	dec00204 	addi	sp,sp,8
80217f04:	f800283a 	ret

80217f08 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
80217f08:	defffc04 	addi	sp,sp,-16
80217f0c:	dfc00315 	stw	ra,12(sp)
80217f10:	df000215 	stw	fp,8(sp)
80217f14:	df000204 	addi	fp,sp,8
80217f18:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
80217f1c:	e0bfff17 	ldw	r2,-4(fp)
80217f20:	10800017 	ldw	r2,0(r2)
80217f24:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
80217f28:	e0bffe17 	ldw	r2,-8(fp)
80217f2c:	10c00a04 	addi	r3,r2,40
80217f30:	e0bfff17 	ldw	r2,-4(fp)
80217f34:	10800217 	ldw	r2,8(r2)
80217f38:	100b883a 	mov	r5,r2
80217f3c:	1809883a 	mov	r4,r3
80217f40:	02182cc0 	call	802182cc <altera_avalon_uart_close>
}
80217f44:	e037883a 	mov	sp,fp
80217f48:	dfc00117 	ldw	ra,4(sp)
80217f4c:	df000017 	ldw	fp,0(sp)
80217f50:	dec00204 	addi	sp,sp,8
80217f54:	f800283a 	ret

80217f58 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
80217f58:	defff804 	addi	sp,sp,-32
80217f5c:	dfc00715 	stw	ra,28(sp)
80217f60:	df000615 	stw	fp,24(sp)
80217f64:	df000604 	addi	fp,sp,24
80217f68:	e13ffd15 	stw	r4,-12(fp)
80217f6c:	e17ffe15 	stw	r5,-8(fp)
80217f70:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
80217f74:	e0bffd17 	ldw	r2,-12(fp)
80217f78:	10800017 	ldw	r2,0(r2)
80217f7c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
80217f80:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
80217f84:	1000041e 	bne	r2,zero,80217f98 <altera_avalon_uart_init+0x40>
80217f88:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
80217f8c:	1000021e 	bne	r2,zero,80217f98 <altera_avalon_uart_init+0x40>
80217f90:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
80217f94:	10000226 	beq	r2,zero,80217fa0 <altera_avalon_uart_init+0x48>
80217f98:	00800044 	movi	r2,1
80217f9c:	00000106 	br	80217fa4 <altera_avalon_uart_init+0x4c>
80217fa0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
80217fa4:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
80217fa8:	e0bffc17 	ldw	r2,-16(fp)
80217fac:	10000f1e 	bne	r2,zero,80217fec <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
80217fb0:	e0bffd17 	ldw	r2,-12(fp)
80217fb4:	00c32004 	movi	r3,3200
80217fb8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
80217fbc:	e0bffb17 	ldw	r2,-20(fp)
80217fc0:	10800304 	addi	r2,r2,12
80217fc4:	e0fffd17 	ldw	r3,-12(fp)
80217fc8:	18c00117 	ldw	r3,4(r3)
80217fcc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
80217fd0:	d8000015 	stw	zero,0(sp)
80217fd4:	e1fffd17 	ldw	r7,-12(fp)
80217fd8:	01a008b4 	movhi	r6,32802
80217fdc:	31a00104 	addi	r6,r6,-32764
80217fe0:	e17fff17 	ldw	r5,-4(fp)
80217fe4:	e13ffe17 	ldw	r4,-8(fp)
80217fe8:	021aa440 	call	8021aa44 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
80217fec:	0001883a 	nop
80217ff0:	e037883a 	mov	sp,fp
80217ff4:	dfc00117 	ldw	ra,4(sp)
80217ff8:	df000017 	ldw	fp,0(sp)
80217ffc:	dec00204 	addi	sp,sp,8
80218000:	f800283a 	ret

80218004 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
80218004:	defffa04 	addi	sp,sp,-24
80218008:	dfc00515 	stw	ra,20(sp)
8021800c:	df000415 	stw	fp,16(sp)
80218010:	df000404 	addi	fp,sp,16
80218014:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
80218018:	e0bfff17 	ldw	r2,-4(fp)
8021801c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
80218020:	e0bffc17 	ldw	r2,-16(fp)
80218024:	10800017 	ldw	r2,0(r2)
80218028:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
8021802c:	e0bffd17 	ldw	r2,-12(fp)
80218030:	10800204 	addi	r2,r2,8
80218034:	10800037 	ldwio	r2,0(r2)
80218038:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
8021803c:	e0bffd17 	ldw	r2,-12(fp)
80218040:	10800204 	addi	r2,r2,8
80218044:	0007883a 	mov	r3,zero
80218048:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
8021804c:	e0bffd17 	ldw	r2,-12(fp)
80218050:	10800204 	addi	r2,r2,8
80218054:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
80218058:	e0bffe17 	ldw	r2,-8(fp)
8021805c:	1080200c 	andi	r2,r2,128
80218060:	10000326 	beq	r2,zero,80218070 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
80218064:	e17ffe17 	ldw	r5,-8(fp)
80218068:	e13ffc17 	ldw	r4,-16(fp)
8021806c:	02180a00 	call	802180a0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
80218070:	e0bffe17 	ldw	r2,-8(fp)
80218074:	1081100c 	andi	r2,r2,1088
80218078:	10000326 	beq	r2,zero,80218088 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
8021807c:	e17ffe17 	ldw	r5,-8(fp)
80218080:	e13ffc17 	ldw	r4,-16(fp)
80218084:	02181840 	call	80218184 <altera_avalon_uart_txirq>
  }
  

}
80218088:	0001883a 	nop
8021808c:	e037883a 	mov	sp,fp
80218090:	dfc00117 	ldw	ra,4(sp)
80218094:	df000017 	ldw	fp,0(sp)
80218098:	dec00204 	addi	sp,sp,8
8021809c:	f800283a 	ret

802180a0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
802180a0:	defffc04 	addi	sp,sp,-16
802180a4:	df000315 	stw	fp,12(sp)
802180a8:	df000304 	addi	fp,sp,12
802180ac:	e13ffe15 	stw	r4,-8(fp)
802180b0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
802180b4:	e0bfff17 	ldw	r2,-4(fp)
802180b8:	108000cc 	andi	r2,r2,3
802180bc:	10002c1e 	bne	r2,zero,80218170 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
802180c0:	e0bffe17 	ldw	r2,-8(fp)
802180c4:	10800317 	ldw	r2,12(r2)
802180c8:	e0bffe17 	ldw	r2,-8(fp)
802180cc:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
802180d0:	e0bffe17 	ldw	r2,-8(fp)
802180d4:	10800317 	ldw	r2,12(r2)
802180d8:	10800044 	addi	r2,r2,1
802180dc:	10800fcc 	andi	r2,r2,63
802180e0:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
802180e4:	e0bffe17 	ldw	r2,-8(fp)
802180e8:	10800317 	ldw	r2,12(r2)
802180ec:	e0fffe17 	ldw	r3,-8(fp)
802180f0:	18c00017 	ldw	r3,0(r3)
802180f4:	18c00037 	ldwio	r3,0(r3)
802180f8:	1809883a 	mov	r4,r3
802180fc:	e0fffe17 	ldw	r3,-8(fp)
80218100:	1885883a 	add	r2,r3,r2
80218104:	10800704 	addi	r2,r2,28
80218108:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
8021810c:	e0bffe17 	ldw	r2,-8(fp)
80218110:	e0fffd17 	ldw	r3,-12(fp)
80218114:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
80218118:	e0bffe17 	ldw	r2,-8(fp)
8021811c:	10800317 	ldw	r2,12(r2)
80218120:	10800044 	addi	r2,r2,1
80218124:	10800fcc 	andi	r2,r2,63
80218128:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
8021812c:	e0bffe17 	ldw	r2,-8(fp)
80218130:	10c00217 	ldw	r3,8(r2)
80218134:	e0bffd17 	ldw	r2,-12(fp)
80218138:	18800e1e 	bne	r3,r2,80218174 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8021813c:	e0bffe17 	ldw	r2,-8(fp)
80218140:	10c00117 	ldw	r3,4(r2)
80218144:	00bfdfc4 	movi	r2,-129
80218148:	1886703a 	and	r3,r3,r2
8021814c:	e0bffe17 	ldw	r2,-8(fp)
80218150:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
80218154:	e0bffe17 	ldw	r2,-8(fp)
80218158:	10800017 	ldw	r2,0(r2)
8021815c:	10800304 	addi	r2,r2,12
80218160:	e0fffe17 	ldw	r3,-8(fp)
80218164:	18c00117 	ldw	r3,4(r3)
80218168:	10c00035 	stwio	r3,0(r2)
8021816c:	00000106 	br	80218174 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
80218170:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
80218174:	e037883a 	mov	sp,fp
80218178:	df000017 	ldw	fp,0(sp)
8021817c:	dec00104 	addi	sp,sp,4
80218180:	f800283a 	ret

80218184 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
80218184:	defffb04 	addi	sp,sp,-20
80218188:	df000415 	stw	fp,16(sp)
8021818c:	df000404 	addi	fp,sp,16
80218190:	e13ffc15 	stw	r4,-16(fp)
80218194:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
80218198:	e0bffc17 	ldw	r2,-16(fp)
8021819c:	10c00417 	ldw	r3,16(r2)
802181a0:	e0bffc17 	ldw	r2,-16(fp)
802181a4:	10800517 	ldw	r2,20(r2)
802181a8:	18803226 	beq	r3,r2,80218274 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
802181ac:	e0bffc17 	ldw	r2,-16(fp)
802181b0:	10800617 	ldw	r2,24(r2)
802181b4:	1080008c 	andi	r2,r2,2
802181b8:	10000326 	beq	r2,zero,802181c8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
802181bc:	e0bffd17 	ldw	r2,-12(fp)
802181c0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
802181c4:	10001d26 	beq	r2,zero,8021823c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
802181c8:	e0bffc17 	ldw	r2,-16(fp)
802181cc:	10800417 	ldw	r2,16(r2)
802181d0:	e0bffc17 	ldw	r2,-16(fp)
802181d4:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
802181d8:	e0bffc17 	ldw	r2,-16(fp)
802181dc:	10800017 	ldw	r2,0(r2)
802181e0:	10800104 	addi	r2,r2,4
802181e4:	e0fffc17 	ldw	r3,-16(fp)
802181e8:	18c00417 	ldw	r3,16(r3)
802181ec:	e13ffc17 	ldw	r4,-16(fp)
802181f0:	20c7883a 	add	r3,r4,r3
802181f4:	18c01704 	addi	r3,r3,92
802181f8:	18c00003 	ldbu	r3,0(r3)
802181fc:	18c03fcc 	andi	r3,r3,255
80218200:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
80218204:	e0bffc17 	ldw	r2,-16(fp)
80218208:	10800417 	ldw	r2,16(r2)
8021820c:	10800044 	addi	r2,r2,1
80218210:	e0fffc17 	ldw	r3,-16(fp)
80218214:	18800415 	stw	r2,16(r3)
80218218:	10c00fcc 	andi	r3,r2,63
8021821c:	e0bffc17 	ldw	r2,-16(fp)
80218220:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
80218224:	e0bffc17 	ldw	r2,-16(fp)
80218228:	10800117 	ldw	r2,4(r2)
8021822c:	10c01014 	ori	r3,r2,64
80218230:	e0bffc17 	ldw	r2,-16(fp)
80218234:	10c00115 	stw	r3,4(r2)
80218238:	00000e06 	br	80218274 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
8021823c:	e0bffc17 	ldw	r2,-16(fp)
80218240:	10800017 	ldw	r2,0(r2)
80218244:	10800204 	addi	r2,r2,8
80218248:	10800037 	ldwio	r2,0(r2)
8021824c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
80218250:	e0bffd17 	ldw	r2,-12(fp)
80218254:	1082000c 	andi	r2,r2,2048
80218258:	1000061e 	bne	r2,zero,80218274 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
8021825c:	e0bffc17 	ldw	r2,-16(fp)
80218260:	10c00117 	ldw	r3,4(r2)
80218264:	00bfefc4 	movi	r2,-65
80218268:	1886703a 	and	r3,r3,r2
8021826c:	e0bffc17 	ldw	r2,-16(fp)
80218270:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
80218274:	e0bffc17 	ldw	r2,-16(fp)
80218278:	10c00417 	ldw	r3,16(r2)
8021827c:	e0bffc17 	ldw	r2,-16(fp)
80218280:	10800517 	ldw	r2,20(r2)
80218284:	1880061e 	bne	r3,r2,802182a0 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
80218288:	e0bffc17 	ldw	r2,-16(fp)
8021828c:	10c00117 	ldw	r3,4(r2)
80218290:	00beefc4 	movi	r2,-1089
80218294:	1886703a 	and	r3,r3,r2
80218298:	e0bffc17 	ldw	r2,-16(fp)
8021829c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
802182a0:	e0bffc17 	ldw	r2,-16(fp)
802182a4:	10800017 	ldw	r2,0(r2)
802182a8:	10800304 	addi	r2,r2,12
802182ac:	e0fffc17 	ldw	r3,-16(fp)
802182b0:	18c00117 	ldw	r3,4(r3)
802182b4:	10c00035 	stwio	r3,0(r2)
}
802182b8:	0001883a 	nop
802182bc:	e037883a 	mov	sp,fp
802182c0:	df000017 	ldw	fp,0(sp)
802182c4:	dec00104 	addi	sp,sp,4
802182c8:	f800283a 	ret

802182cc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
802182cc:	defffd04 	addi	sp,sp,-12
802182d0:	df000215 	stw	fp,8(sp)
802182d4:	df000204 	addi	fp,sp,8
802182d8:	e13ffe15 	stw	r4,-8(fp)
802182dc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
802182e0:	00000506 	br	802182f8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
802182e4:	e0bfff17 	ldw	r2,-4(fp)
802182e8:	1090000c 	andi	r2,r2,16384
802182ec:	10000226 	beq	r2,zero,802182f8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
802182f0:	00bffd44 	movi	r2,-11
802182f4:	00000606 	br	80218310 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
802182f8:	e0bffe17 	ldw	r2,-8(fp)
802182fc:	10c00417 	ldw	r3,16(r2)
80218300:	e0bffe17 	ldw	r2,-8(fp)
80218304:	10800517 	ldw	r2,20(r2)
80218308:	18bff61e 	bne	r3,r2,802182e4 <__reset+0xfa1f82e4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8021830c:	0005883a 	mov	r2,zero
}
80218310:	e037883a 	mov	sp,fp
80218314:	df000017 	ldw	fp,0(sp)
80218318:	dec00104 	addi	sp,sp,4
8021831c:	f800283a 	ret

80218320 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80218320:	defffe04 	addi	sp,sp,-8
80218324:	dfc00115 	stw	ra,4(sp)
80218328:	df000015 	stw	fp,0(sp)
8021832c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80218330:	d0a00c17 	ldw	r2,-32720(gp)
80218334:	10000326 	beq	r2,zero,80218344 <alt_get_errno+0x24>
80218338:	d0a00c17 	ldw	r2,-32720(gp)
8021833c:	103ee83a 	callr	r2
80218340:	00000106 	br	80218348 <alt_get_errno+0x28>
80218344:	d0a02104 	addi	r2,gp,-32636
}
80218348:	e037883a 	mov	sp,fp
8021834c:	dfc00117 	ldw	ra,4(sp)
80218350:	df000017 	ldw	fp,0(sp)
80218354:	dec00204 	addi	sp,sp,8
80218358:	f800283a 	ret

8021835c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
8021835c:	defff204 	addi	sp,sp,-56
80218360:	dfc00d15 	stw	ra,52(sp)
80218364:	df000c15 	stw	fp,48(sp)
80218368:	df000c04 	addi	fp,sp,48
8021836c:	e13ffc15 	stw	r4,-16(fp)
80218370:	e17ffd15 	stw	r5,-12(fp)
80218374:	e1bffe15 	stw	r6,-8(fp)
80218378:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
8021837c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
80218380:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
80218384:	e0bfff17 	ldw	r2,-4(fp)
80218388:	1090000c 	andi	r2,r2,16384
8021838c:	1005003a 	cmpeq	r2,r2,zero
80218390:	10803fcc 	andi	r2,r2,255
80218394:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
80218398:	00001306 	br	802183e8 <altera_avalon_uart_read+0x8c>
    {
      count++;
8021839c:	e0bff517 	ldw	r2,-44(fp)
802183a0:	10800044 	addi	r2,r2,1
802183a4:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
802183a8:	e0bffd17 	ldw	r2,-12(fp)
802183ac:	10c00044 	addi	r3,r2,1
802183b0:	e0fffd15 	stw	r3,-12(fp)
802183b4:	e0fffc17 	ldw	r3,-16(fp)
802183b8:	18c00217 	ldw	r3,8(r3)
802183bc:	e13ffc17 	ldw	r4,-16(fp)
802183c0:	20c7883a 	add	r3,r4,r3
802183c4:	18c00704 	addi	r3,r3,28
802183c8:	18c00003 	ldbu	r3,0(r3)
802183cc:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
802183d0:	e0bffc17 	ldw	r2,-16(fp)
802183d4:	10800217 	ldw	r2,8(r2)
802183d8:	10800044 	addi	r2,r2,1
802183dc:	10c00fcc 	andi	r3,r2,63
802183e0:	e0bffc17 	ldw	r2,-16(fp)
802183e4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
802183e8:	e0fff517 	ldw	r3,-44(fp)
802183ec:	e0bffe17 	ldw	r2,-8(fp)
802183f0:	1880050e 	bge	r3,r2,80218408 <altera_avalon_uart_read+0xac>
802183f4:	e0bffc17 	ldw	r2,-16(fp)
802183f8:	10c00217 	ldw	r3,8(r2)
802183fc:	e0bffc17 	ldw	r2,-16(fp)
80218400:	10800317 	ldw	r2,12(r2)
80218404:	18bfe51e 	bne	r3,r2,8021839c <__reset+0xfa1f839c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
80218408:	e0bff517 	ldw	r2,-44(fp)
8021840c:	1000251e 	bne	r2,zero,802184a4 <altera_avalon_uart_read+0x148>
80218410:	e0bffc17 	ldw	r2,-16(fp)
80218414:	10c00217 	ldw	r3,8(r2)
80218418:	e0bffc17 	ldw	r2,-16(fp)
8021841c:	10800317 	ldw	r2,12(r2)
80218420:	1880201e 	bne	r3,r2,802184a4 <altera_avalon_uart_read+0x148>
    {
      if (!block)
80218424:	e0bff617 	ldw	r2,-40(fp)
80218428:	1000071e 	bne	r2,zero,80218448 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
8021842c:	02183200 	call	80218320 <alt_get_errno>
80218430:	1007883a 	mov	r3,r2
80218434:	008002c4 	movi	r2,11
80218438:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
8021843c:	00800044 	movi	r2,1
80218440:	e0bff405 	stb	r2,-48(fp)
        break;
80218444:	00001b06 	br	802184b4 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218448:	0005303a 	rdctl	r2,status
8021844c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218450:	e0fff917 	ldw	r3,-28(fp)
80218454:	00bfff84 	movi	r2,-2
80218458:	1884703a 	and	r2,r3,r2
8021845c:	1001703a 	wrctl	status,r2
  
  return context;
80218460:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
80218464:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
80218468:	e0bffc17 	ldw	r2,-16(fp)
8021846c:	10800117 	ldw	r2,4(r2)
80218470:	10c02014 	ori	r3,r2,128
80218474:	e0bffc17 	ldw	r2,-16(fp)
80218478:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8021847c:	e0bffc17 	ldw	r2,-16(fp)
80218480:	10800017 	ldw	r2,0(r2)
80218484:	10800304 	addi	r2,r2,12
80218488:	e0fffc17 	ldw	r3,-16(fp)
8021848c:	18c00117 	ldw	r3,4(r3)
80218490:	10c00035 	stwio	r3,0(r2)
80218494:	e0bff817 	ldw	r2,-32(fp)
80218498:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021849c:	e0bffa17 	ldw	r2,-24(fp)
802184a0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
802184a4:	e0bff517 	ldw	r2,-44(fp)
802184a8:	1000021e 	bne	r2,zero,802184b4 <altera_avalon_uart_read+0x158>
802184ac:	e0bffe17 	ldw	r2,-8(fp)
802184b0:	103fcd1e 	bne	r2,zero,802183e8 <__reset+0xfa1f83e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802184b4:	0005303a 	rdctl	r2,status
802184b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802184bc:	e0fffb17 	ldw	r3,-20(fp)
802184c0:	00bfff84 	movi	r2,-2
802184c4:	1884703a 	and	r2,r3,r2
802184c8:	1001703a 	wrctl	status,r2
  
  return context;
802184cc:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
802184d0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
802184d4:	e0bffc17 	ldw	r2,-16(fp)
802184d8:	10800117 	ldw	r2,4(r2)
802184dc:	10c02014 	ori	r3,r2,128
802184e0:	e0bffc17 	ldw	r2,-16(fp)
802184e4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
802184e8:	e0bffc17 	ldw	r2,-16(fp)
802184ec:	10800017 	ldw	r2,0(r2)
802184f0:	10800304 	addi	r2,r2,12
802184f4:	e0fffc17 	ldw	r3,-16(fp)
802184f8:	18c00117 	ldw	r3,4(r3)
802184fc:	10c00035 	stwio	r3,0(r2)
80218500:	e0bff817 	ldw	r2,-32(fp)
80218504:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218508:	e0bff717 	ldw	r2,-36(fp)
8021850c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
80218510:	e0bff403 	ldbu	r2,-48(fp)
80218514:	10000226 	beq	r2,zero,80218520 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
80218518:	00bffd44 	movi	r2,-11
8021851c:	00000106 	br	80218524 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
80218520:	e0bff517 	ldw	r2,-44(fp)
  }
}
80218524:	e037883a 	mov	sp,fp
80218528:	dfc00117 	ldw	ra,4(sp)
8021852c:	df000017 	ldw	fp,0(sp)
80218530:	dec00204 	addi	sp,sp,8
80218534:	f800283a 	ret

80218538 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80218538:	defffe04 	addi	sp,sp,-8
8021853c:	dfc00115 	stw	ra,4(sp)
80218540:	df000015 	stw	fp,0(sp)
80218544:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80218548:	d0a00c17 	ldw	r2,-32720(gp)
8021854c:	10000326 	beq	r2,zero,8021855c <alt_get_errno+0x24>
80218550:	d0a00c17 	ldw	r2,-32720(gp)
80218554:	103ee83a 	callr	r2
80218558:	00000106 	br	80218560 <alt_get_errno+0x28>
8021855c:	d0a02104 	addi	r2,gp,-32636
}
80218560:	e037883a 	mov	sp,fp
80218564:	dfc00117 	ldw	ra,4(sp)
80218568:	df000017 	ldw	fp,0(sp)
8021856c:	dec00204 	addi	sp,sp,8
80218570:	f800283a 	ret

80218574 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
80218574:	defff204 	addi	sp,sp,-56
80218578:	dfc00d15 	stw	ra,52(sp)
8021857c:	df000c15 	stw	fp,48(sp)
80218580:	df000c04 	addi	fp,sp,48
80218584:	e13ffc15 	stw	r4,-16(fp)
80218588:	e17ffd15 	stw	r5,-12(fp)
8021858c:	e1bffe15 	stw	r6,-8(fp)
80218590:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
80218594:	e0bffe17 	ldw	r2,-8(fp)
80218598:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
8021859c:	e0bfff17 	ldw	r2,-4(fp)
802185a0:	1090000c 	andi	r2,r2,16384
802185a4:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
802185a8:	00003c06 	br	8021869c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
802185ac:	e0bffc17 	ldw	r2,-16(fp)
802185b0:	10800517 	ldw	r2,20(r2)
802185b4:	10800044 	addi	r2,r2,1
802185b8:	10800fcc 	andi	r2,r2,63
802185bc:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
802185c0:	e0bffc17 	ldw	r2,-16(fp)
802185c4:	10c00417 	ldw	r3,16(r2)
802185c8:	e0bff717 	ldw	r2,-36(fp)
802185cc:	1880221e 	bne	r3,r2,80218658 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
802185d0:	e0bff517 	ldw	r2,-44(fp)
802185d4:	10000526 	beq	r2,zero,802185ec <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
802185d8:	02185380 	call	80218538 <alt_get_errno>
802185dc:	1007883a 	mov	r3,r2
802185e0:	008002c4 	movi	r2,11
802185e4:	18800015 	stw	r2,0(r3)
        break;
802185e8:	00002e06 	br	802186a4 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802185ec:	0005303a 	rdctl	r2,status
802185f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802185f4:	e0fff917 	ldw	r3,-28(fp)
802185f8:	00bfff84 	movi	r2,-2
802185fc:	1884703a 	and	r2,r3,r2
80218600:	1001703a 	wrctl	status,r2
  
  return context;
80218604:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
80218608:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8021860c:	e0bffc17 	ldw	r2,-16(fp)
80218610:	10800117 	ldw	r2,4(r2)
80218614:	10c11014 	ori	r3,r2,1088
80218618:	e0bffc17 	ldw	r2,-16(fp)
8021861c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80218620:	e0bffc17 	ldw	r2,-16(fp)
80218624:	10800017 	ldw	r2,0(r2)
80218628:	10800304 	addi	r2,r2,12
8021862c:	e0fffc17 	ldw	r3,-16(fp)
80218630:	18c00117 	ldw	r3,4(r3)
80218634:	10c00035 	stwio	r3,0(r2)
80218638:	e0bff817 	ldw	r2,-32(fp)
8021863c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218640:	e0bff617 	ldw	r2,-40(fp)
80218644:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
80218648:	e0bffc17 	ldw	r2,-16(fp)
8021864c:	10c00417 	ldw	r3,16(r2)
80218650:	e0bff717 	ldw	r2,-36(fp)
80218654:	18bffc26 	beq	r3,r2,80218648 <__reset+0xfa1f8648>
      }
    }

    count--;
80218658:	e0bff417 	ldw	r2,-48(fp)
8021865c:	10bfffc4 	addi	r2,r2,-1
80218660:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
80218664:	e0bffc17 	ldw	r2,-16(fp)
80218668:	10c00517 	ldw	r3,20(r2)
8021866c:	e0bffd17 	ldw	r2,-12(fp)
80218670:	11000044 	addi	r4,r2,1
80218674:	e13ffd15 	stw	r4,-12(fp)
80218678:	10800003 	ldbu	r2,0(r2)
8021867c:	1009883a 	mov	r4,r2
80218680:	e0bffc17 	ldw	r2,-16(fp)
80218684:	10c5883a 	add	r2,r2,r3
80218688:	10801704 	addi	r2,r2,92
8021868c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
80218690:	e0bffc17 	ldw	r2,-16(fp)
80218694:	e0fff717 	ldw	r3,-36(fp)
80218698:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8021869c:	e0bff417 	ldw	r2,-48(fp)
802186a0:	103fc21e 	bne	r2,zero,802185ac <__reset+0xfa1f85ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802186a4:	0005303a 	rdctl	r2,status
802186a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802186ac:	e0fffb17 	ldw	r3,-20(fp)
802186b0:	00bfff84 	movi	r2,-2
802186b4:	1884703a 	and	r2,r3,r2
802186b8:	1001703a 	wrctl	status,r2
  
  return context;
802186bc:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
802186c0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
802186c4:	e0bffc17 	ldw	r2,-16(fp)
802186c8:	10800117 	ldw	r2,4(r2)
802186cc:	10c11014 	ori	r3,r2,1088
802186d0:	e0bffc17 	ldw	r2,-16(fp)
802186d4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
802186d8:	e0bffc17 	ldw	r2,-16(fp)
802186dc:	10800017 	ldw	r2,0(r2)
802186e0:	10800304 	addi	r2,r2,12
802186e4:	e0fffc17 	ldw	r3,-16(fp)
802186e8:	18c00117 	ldw	r3,4(r3)
802186ec:	10c00035 	stwio	r3,0(r2)
802186f0:	e0bff817 	ldw	r2,-32(fp)
802186f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802186f8:	e0bffa17 	ldw	r2,-24(fp)
802186fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
80218700:	e0fffe17 	ldw	r3,-8(fp)
80218704:	e0bff417 	ldw	r2,-48(fp)
80218708:	1885c83a 	sub	r2,r3,r2
}
8021870c:	e037883a 	mov	sp,fp
80218710:	dfc00117 	ldw	ra,4(sp)
80218714:	df000017 	ldw	fp,0(sp)
80218718:	dec00204 	addi	sp,sp,8
8021871c:	f800283a 	ret

80218720 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80218720:	defffe04 	addi	sp,sp,-8
80218724:	dfc00115 	stw	ra,4(sp)
80218728:	df000015 	stw	fp,0(sp)
8021872c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80218730:	d0a00c17 	ldw	r2,-32720(gp)
80218734:	10000326 	beq	r2,zero,80218744 <alt_get_errno+0x24>
80218738:	d0a00c17 	ldw	r2,-32720(gp)
8021873c:	103ee83a 	callr	r2
80218740:	00000106 	br	80218748 <alt_get_errno+0x28>
80218744:	d0a02104 	addi	r2,gp,-32636
}
80218748:	e037883a 	mov	sp,fp
8021874c:	dfc00117 	ldw	ra,4(sp)
80218750:	df000017 	ldw	fp,0(sp)
80218754:	dec00204 	addi	sp,sp,8
80218758:	f800283a 	ret

8021875c <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_standard_descriptor *descriptor)
{
8021875c:	defffc04 	addi	sp,sp,-16
80218760:	df000315 	stw	fp,12(sp)
80218764:	df000304 	addi	fp,sp,12
80218768:	e13ffd15 	stw	r4,-12(fp)
8021876c:	e17ffe15 	stw	r5,-8(fp)
80218770:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
80218774:	e0bffd17 	ldw	r2,-12(fp)
80218778:	10800037 	ldwio	r2,0(r2)
8021877c:	1080010c 	andi	r2,r2,4
80218780:	10000226 	beq	r2,zero,8021878c <alt_msgdma_write_standard_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
        is non-blocking*/
        return -ENOSPC;
80218784:	00bff904 	movi	r2,-28
80218788:	00001506 	br	802187e0 <alt_msgdma_write_standard_descriptor+0x84>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
8021878c:	e0bfff17 	ldw	r2,-4(fp)
80218790:	10800017 	ldw	r2,0(r2)
80218794:	1007883a 	mov	r3,r2
80218798:	e0bffe17 	ldw	r2,-8(fp)
8021879c:	10c00035 	stwio	r3,0(r2)
        (alt_u32)descriptor->read_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
802187a0:	e0bffe17 	ldw	r2,-8(fp)
802187a4:	10800104 	addi	r2,r2,4
802187a8:	e0ffff17 	ldw	r3,-4(fp)
802187ac:	18c00117 	ldw	r3,4(r3)
802187b0:	10c00035 	stwio	r3,0(r2)
    (    alt_u32)descriptor->write_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
802187b4:	e0bffe17 	ldw	r2,-8(fp)
802187b8:	10800204 	addi	r2,r2,8
802187bc:	e0ffff17 	ldw	r3,-4(fp)
802187c0:	18c00217 	ldw	r3,8(r3)
802187c4:	10c00035 	stwio	r3,0(r2)
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
802187c8:	e0bffe17 	ldw	r2,-8(fp)
802187cc:	10800304 	addi	r2,r2,12
802187d0:	e0ffff17 	ldw	r3,-4(fp)
802187d4:	18c00317 	ldw	r3,12(r3)
802187d8:	10c00035 	stwio	r3,0(r2)
        descriptor->control);
        return 0;
802187dc:	0005883a 	mov	r2,zero
}
802187e0:	e037883a 	mov	sp,fp
802187e4:	df000017 	ldw	fp,0(sp)
802187e8:	dec00104 	addi	sp,sp,4
802187ec:	f800283a 	ret

802187f0 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_extended_descriptor *descriptor)
{
802187f0:	defffc04 	addi	sp,sp,-16
802187f4:	df000315 	stw	fp,12(sp)
802187f8:	df000304 	addi	fp,sp,12
802187fc:	e13ffd15 	stw	r4,-12(fp)
80218800:	e17ffe15 	stw	r5,-8(fp)
80218804:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
80218808:	e0bffd17 	ldw	r2,-12(fp)
8021880c:	10800037 	ldwio	r2,0(r2)
80218810:	1080010c 	andi	r2,r2,4
80218814:	10000226 	beq	r2,zero,80218820 <alt_msgdma_write_extended_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
    is non-blocking*/
        return -ENOSPC;
80218818:	00bff904 	movi	r2,-28
8021881c:	00003b06 	br	8021890c <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
80218820:	e0bfff17 	ldw	r2,-4(fp)
80218824:	10800017 	ldw	r2,0(r2)
80218828:	1007883a 	mov	r3,r2
8021882c:	e0bffe17 	ldw	r2,-8(fp)
80218830:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
80218834:	e0bffe17 	ldw	r2,-8(fp)
80218838:	10800104 	addi	r2,r2,4
8021883c:	e0ffff17 	ldw	r3,-4(fp)
80218840:	18c00117 	ldw	r3,4(r3)
80218844:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
80218848:	e0bffe17 	ldw	r2,-8(fp)
8021884c:	10800204 	addi	r2,r2,8
80218850:	e0ffff17 	ldw	r3,-4(fp)
80218854:	18c00217 	ldw	r3,8(r3)
80218858:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
8021885c:	e0bffe17 	ldw	r2,-8(fp)
80218860:	10800304 	addi	r2,r2,12
80218864:	e0ffff17 	ldw	r3,-4(fp)
80218868:	18c0030b 	ldhu	r3,12(r3)
8021886c:	18ffffcc 	andi	r3,r3,65535
80218870:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
80218874:	e0bffe17 	ldw	r2,-8(fp)
80218878:	10800384 	addi	r2,r2,14
8021887c:	e0ffff17 	ldw	r3,-4(fp)
80218880:	18c00383 	ldbu	r3,14(r3)
80218884:	18c03fcc 	andi	r3,r3,255
80218888:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
8021888c:	e0bffe17 	ldw	r2,-8(fp)
80218890:	108003c4 	addi	r2,r2,15
80218894:	e0ffff17 	ldw	r3,-4(fp)
80218898:	18c003c3 	ldbu	r3,15(r3)
8021889c:	18c03fcc 	andi	r3,r3,255
802188a0:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
802188a4:	e0bffe17 	ldw	r2,-8(fp)
802188a8:	10800404 	addi	r2,r2,16
802188ac:	e0ffff17 	ldw	r3,-4(fp)
802188b0:	18c0040b 	ldhu	r3,16(r3)
802188b4:	18ffffcc 	andi	r3,r3,65535
802188b8:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
802188bc:	e0bffe17 	ldw	r2,-8(fp)
802188c0:	10800484 	addi	r2,r2,18
802188c4:	e0ffff17 	ldw	r3,-4(fp)
802188c8:	18c0048b 	ldhu	r3,18(r3)
802188cc:	18ffffcc 	andi	r3,r3,65535
802188d0:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
802188d4:	e0bffe17 	ldw	r2,-8(fp)
802188d8:	10800504 	addi	r2,r2,20
802188dc:	0007883a 	mov	r3,zero
802188e0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
802188e4:	e0bffe17 	ldw	r2,-8(fp)
802188e8:	10800604 	addi	r2,r2,24
802188ec:	0007883a 	mov	r3,zero
802188f0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
802188f4:	e0bffe17 	ldw	r2,-8(fp)
802188f8:	10800704 	addi	r2,r2,28
802188fc:	e0ffff17 	ldw	r3,-4(fp)
80218900:	18c00717 	ldw	r3,28(r3)
80218904:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->control);
    return 0;
80218908:	0005883a 	mov	r2,zero
}
8021890c:	e037883a 	mov	sp,fp
80218910:	df000017 	ldw	fp,0(sp)
80218914:	dec00104 	addi	sp,sp,4
80218918:	f800283a 	ret

8021891c <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
8021891c:	defff804 	addi	sp,sp,-32
80218920:	dfc00715 	stw	ra,28(sp)
80218924:	df000615 	stw	fp,24(sp)
80218928:	df000604 	addi	fp,sp,24
8021892c:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
80218930:	e0bfff17 	ldw	r2,-4(fp)
80218934:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
80218938:	e0bffa17 	ldw	r2,-24(fp)
8021893c:	10801783 	ldbu	r2,94(r2)
80218940:	10803fcc 	andi	r2,r2,255
80218944:	10001126 	beq	r2,zero,8021898c <alt_msgdma_irq+0x70>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
80218948:	e0bffa17 	ldw	r2,-24(fp)
8021894c:	10800617 	ldw	r2,24(r2)
80218950:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
80218954:	1007883a 	mov	r3,r2
80218958:	00bffdc4 	movi	r2,-9
8021895c:	1884703a 	and	r2,r3,r2
80218960:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                & ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
80218964:	e0bffa17 	ldw	r2,-24(fp)
80218968:	10800617 	ldw	r2,24(r2)
8021896c:	e0fffb17 	ldw	r3,-20(fp)
80218970:	10c00035 	stwio	r3,0(r2)
                temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
80218974:	e0bffa17 	ldw	r2,-24(fp)
80218978:	10800617 	ldw	r2,24(r2)
8021897c:	10800404 	addi	r2,r2,16
80218980:	00c00044 	movi	r3,1
80218984:	10c00035 	stwio	r3,0(r2)
80218988:	00001106 	br	802189d0 <alt_msgdma_irq+0xb4>
                ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8021898c:	e0bffa17 	ldw	r2,-24(fp)
80218990:	10800317 	ldw	r2,12(r2)
80218994:	10800104 	addi	r2,r2,4
80218998:	10800037 	ldwio	r2,0(r2)
8021899c:	1007883a 	mov	r3,r2
802189a0:	00bffbc4 	movi	r2,-17
802189a4:	1884703a 	and	r2,r3,r2
802189a8:	e0bffb15 	stw	r2,-20(fp)
                & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
802189ac:	e0bffa17 	ldw	r2,-24(fp)
802189b0:	10800317 	ldw	r2,12(r2)
802189b4:	10800104 	addi	r2,r2,4
802189b8:	e0fffb17 	ldw	r3,-20(fp)
802189bc:	10c00035 	stwio	r3,0(r2)
        /* clear the IRQ status */
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
802189c0:	e0bffa17 	ldw	r2,-24(fp)
802189c4:	10800317 	ldw	r2,12(r2)
802189c8:	00c08004 	movi	r3,512
802189cc:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
802189d0:	e0bffa17 	ldw	r2,-24(fp)
802189d4:	10800b17 	ldw	r2,44(r2)
802189d8:	10001226 	beq	r2,zero,80218a24 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802189dc:	0005303a 	rdctl	r2,status
802189e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802189e4:	e0fffd17 	ldw	r3,-12(fp)
802189e8:	00bfff84 	movi	r2,-2
802189ec:	1884703a 	and	r2,r3,r2
802189f0:	1001703a 	wrctl	status,r2
  
  return context;
802189f4:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
802189f8:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
802189fc:	e0bffa17 	ldw	r2,-24(fp)
80218a00:	10800b17 	ldw	r2,44(r2)
80218a04:	e0fffa17 	ldw	r3,-24(fp)
80218a08:	18c00c17 	ldw	r3,48(r3)
80218a0c:	1809883a 	mov	r4,r3
80218a10:	103ee83a 	callr	r2
80218a14:	e0bffc17 	ldw	r2,-16(fp)
80218a18:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218a1c:	e0bffe17 	ldw	r2,-8(fp)
80218a20:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
80218a24:	e0bffa17 	ldw	r2,-24(fp)
80218a28:	10801783 	ldbu	r2,94(r2)
80218a2c:	10803fcc 	andi	r2,r2,255
80218a30:	10000a26 	beq	r2,zero,80218a5c <alt_msgdma_irq+0x140>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
80218a34:	e0bffa17 	ldw	r2,-24(fp)
80218a38:	10800617 	ldw	r2,24(r2)
80218a3c:	10800037 	ldwio	r2,0(r2)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
80218a40:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
        temporary_control = 
80218a44:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
80218a48:	e0bffa17 	ldw	r2,-24(fp)
80218a4c:	10800617 	ldw	r2,24(r2)
80218a50:	e0fffb17 	ldw	r3,-20(fp)
80218a54:	10c00035 	stwio	r3,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
80218a58:	00000c06 	br	80218a8c <alt_msgdma_irq+0x170>
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
80218a5c:	e0bffa17 	ldw	r2,-24(fp)
80218a60:	10800317 	ldw	r2,12(r2)
80218a64:	10800104 	addi	r2,r2,4
80218a68:	10800037 	ldwio	r2,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
80218a6c:	10800414 	ori	r2,r2,16
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
80218a70:	e0bffb15 	stw	r2,-20(fp)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
80218a74:	e0bffa17 	ldw	r2,-24(fp)
80218a78:	10800317 	ldw	r2,12(r2)
80218a7c:	10800104 	addi	r2,r2,4
80218a80:	e0fffb17 	ldw	r3,-20(fp)
80218a84:	10c00035 	stwio	r3,0(r2)
    }

    return;
80218a88:	0001883a 	nop
}
80218a8c:	e037883a 	mov	sp,fp
80218a90:	dfc00117 	ldw	ra,4(sp)
80218a94:	df000017 	ldw	fp,0(sp)
80218a98:	dec00204 	addi	sp,sp,8
80218a9c:	f800283a 	ret

80218aa0 <alt_msgdma_construct_standard_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
80218aa0:	defffb04 	addi	sp,sp,-20
80218aa4:	df000415 	stw	fp,16(sp)
80218aa8:	df000404 	addi	fp,sp,16
80218aac:	e13ffc15 	stw	r4,-16(fp)
80218ab0:	e17ffd15 	stw	r5,-12(fp)
80218ab4:	e1bffe15 	stw	r6,-8(fp)
80218ab8:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
80218abc:	e0bffc17 	ldw	r2,-16(fp)
80218ac0:	10c01217 	ldw	r3,72(r2)
80218ac4:	e0800117 	ldw	r2,4(fp)
80218ac8:	18800436 	bltu	r3,r2,80218adc <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
80218acc:	e0bffc17 	ldw	r2,-16(fp)
80218ad0:	10801703 	ldbu	r2,92(r2)
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
80218ad4:	10803fcc 	andi	r2,r2,255
80218ad8:	10000226 	beq	r2,zero,80218ae4 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
80218adc:	00bffa84 	movi	r2,-22
80218ae0:	00000e06 	br	80218b1c <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
80218ae4:	e0bffd17 	ldw	r2,-12(fp)
80218ae8:	e0fffe17 	ldw	r3,-8(fp)
80218aec:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
80218af0:	e0bffd17 	ldw	r2,-12(fp)
80218af4:	e0ffff17 	ldw	r3,-4(fp)
80218af8:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
80218afc:	e0bffd17 	ldw	r2,-12(fp)
80218b00:	e0c00117 	ldw	r3,4(fp)
80218b04:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80218b08:	e0800217 	ldw	r2,8(fp)
80218b0c:	10e00034 	orhi	r3,r2,32768
80218b10:	e0bffd17 	ldw	r2,-12(fp)
80218b14:	10c00315 	stw	r3,12(r2)
    
    return 0;
80218b18:	0005883a 	mov	r2,zero
}
80218b1c:	e037883a 	mov	sp,fp
80218b20:	df000017 	ldw	fp,0(sp)
80218b24:	dec00104 	addi	sp,sp,4
80218b28:	f800283a 	ret

80218b2c <alt_msgdma_construct_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80218b2c:	defff604 	addi	sp,sp,-40
80218b30:	df000915 	stw	fp,36(sp)
80218b34:	df000904 	addi	fp,sp,36
80218b38:	e13ff715 	stw	r4,-36(fp)
80218b3c:	e17ff815 	stw	r5,-32(fp)
80218b40:	e1bff915 	stw	r6,-28(fp)
80218b44:	e1fffa15 	stw	r7,-24(fp)
80218b48:	e1800317 	ldw	r6,12(fp)
80218b4c:	e1400417 	ldw	r5,16(fp)
80218b50:	e1000517 	ldw	r4,20(fp)
80218b54:	e0c00617 	ldw	r3,24(fp)
80218b58:	e0800717 	ldw	r2,28(fp)
80218b5c:	e1bffb0d 	sth	r6,-20(fp)
80218b60:	e17ffc05 	stb	r5,-16(fp)
80218b64:	e13ffd05 	stb	r4,-12(fp)
80218b68:	e0fffe0d 	sth	r3,-8(fp)
80218b6c:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
80218b70:	e0bff717 	ldw	r2,-36(fp)
80218b74:	10c01217 	ldw	r3,72(r2)
80218b78:	e0800117 	ldw	r2,4(fp)
80218b7c:	18801936 	bltu	r3,r2,80218be4 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
80218b80:	e13ff717 	ldw	r4,-36(fp)
80218b84:	20801317 	ldw	r2,76(r4)
80218b88:	20c01417 	ldw	r3,80(r4)
80218b8c:	e13ffe0b 	ldhu	r4,-8(fp)
80218b90:	213fffcc 	andi	r4,r4,65535
80218b94:	2015883a 	mov	r10,r4
80218b98:	0017883a 	mov	r11,zero
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
80218b9c:	1ac01136 	bltu	r3,r11,80218be4 <alt_msgdma_construct_extended_descriptor+0xb8>
80218ba0:	58c0011e 	bne	r11,r3,80218ba8 <alt_msgdma_construct_extended_descriptor+0x7c>
80218ba4:	12800f36 	bltu	r2,r10,80218be4 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
80218ba8:	e13ff717 	ldw	r4,-36(fp)
80218bac:	20801317 	ldw	r2,76(r4)
80218bb0:	20c01417 	ldw	r3,80(r4)
80218bb4:	e13fff0b 	ldhu	r4,-4(fp)
80218bb8:	213fffcc 	andi	r4,r4,65535
80218bbc:	2011883a 	mov	r8,r4
80218bc0:	0013883a 	mov	r9,zero
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
80218bc4:	1a400736 	bltu	r3,r9,80218be4 <alt_msgdma_construct_extended_descriptor+0xb8>
80218bc8:	48c0011e 	bne	r9,r3,80218bd0 <alt_msgdma_construct_extended_descriptor+0xa4>
80218bcc:	12000536 	bltu	r2,r8,80218be4 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
80218bd0:	e0bff717 	ldw	r2,-36(fp)
80218bd4:	10801703 	ldbu	r2,92(r2)
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
80218bd8:	10803fcc 	andi	r2,r2,255
80218bdc:	10800060 	cmpeqi	r2,r2,1
80218be0:	1000021e 	bne	r2,zero,80218bec <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
80218be4:	00bffa84 	movi	r2,-22
80218be8:	00002106 	br	80218c70 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
80218bec:	e0bff817 	ldw	r2,-32(fp)
80218bf0:	e0fff917 	ldw	r3,-28(fp)
80218bf4:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
80218bf8:	e0bff817 	ldw	r2,-32(fp)
80218bfc:	e0fffa17 	ldw	r3,-24(fp)
80218c00:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
80218c04:	e0bff817 	ldw	r2,-32(fp)
80218c08:	e0c00117 	ldw	r3,4(fp)
80218c0c:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
80218c10:	e0bff817 	ldw	r2,-32(fp)
80218c14:	e0fffb0b 	ldhu	r3,-20(fp)
80218c18:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
80218c1c:	e0bff817 	ldw	r2,-32(fp)
80218c20:	e0fffc03 	ldbu	r3,-16(fp)
80218c24:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
80218c28:	e0bff817 	ldw	r2,-32(fp)
80218c2c:	e0fffd03 	ldbu	r3,-12(fp)
80218c30:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
80218c34:	e0bff817 	ldw	r2,-32(fp)
80218c38:	e0fffe0b 	ldhu	r3,-8(fp)
80218c3c:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
80218c40:	e0bff817 	ldw	r2,-32(fp)
80218c44:	e0ffff0b 	ldhu	r3,-4(fp)
80218c48:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
80218c4c:	e0bff817 	ldw	r2,-32(fp)
80218c50:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
80218c54:	e0bff817 	ldw	r2,-32(fp)
80218c58:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80218c5c:	e0800217 	ldw	r2,8(fp)
80218c60:	10e00034 	orhi	r3,r2,32768
80218c64:	e0bff817 	ldw	r2,-32(fp)
80218c68:	10c00715 	stw	r3,28(r2)

  return 0 ;
80218c6c:	0005883a 	mov	r2,zero

}
80218c70:	e037883a 	mov	sp,fp
80218c74:	df000017 	ldw	fp,0(sp)
80218c78:	dec00104 	addi	sp,sp,4
80218c7c:	f800283a 	ret

80218c80 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
80218c80:	defff004 	addi	sp,sp,-64
80218c84:	dfc00f15 	stw	ra,60(sp)
80218c88:	df000e15 	stw	fp,56(sp)
80218c8c:	df000e04 	addi	fp,sp,56
80218c90:	e13ffd15 	stw	r4,-12(fp)
80218c94:	e17ffe15 	stw	r5,-8(fp)
80218c98:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
80218c9c:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
80218ca0:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
80218ca4:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80218ca8:	e0bffd17 	ldw	r2,-12(fp)
80218cac:	10800317 	ldw	r2,12(r2)
80218cb0:	10800204 	addi	r2,r2,8
80218cb4:	10800037 	ldwio	r2,0(r2)
    alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
80218cb8:	10bfffcc 	andi	r2,r2,65535
80218cbc:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80218cc0:	e0bffd17 	ldw	r2,-12(fp)
80218cc4:	10800317 	ldw	r2,12(r2)
80218cc8:	10800204 	addi	r2,r2,8
80218ccc:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
80218cd0:	1004d43a 	srli	r2,r2,16
80218cd4:	e0bff615 	stw	r2,-40(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80218cd8:	e0bffd17 	ldw	r2,-12(fp)
80218cdc:	10800917 	ldw	r2,36(r2)
80218ce0:	e0fff617 	ldw	r3,-40(fp)
80218ce4:	1880042e 	bgeu	r3,r2,80218cf8 <alt_msgdma_descriptor_async_transfer+0x78>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
80218ce8:	e0bffd17 	ldw	r2,-12(fp)
80218cec:	10800917 	ldw	r2,36(r2)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80218cf0:	e0fff517 	ldw	r3,-44(fp)
80218cf4:	18800236 	bltu	r3,r2,80218d00 <alt_msgdma_descriptor_async_transfer+0x80>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    {
        /*at least one write or read FIFO descriptor buffer is full,
        returning so that this function is non-blocking*/
        return -ENOSPC;
80218cf8:	00bff904 	movi	r2,-28
80218cfc:	00008f06 	br	80218f3c <alt_msgdma_descriptor_async_transfer+0x2bc>
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80218d00:	00800804 	movi	r2,32
80218d04:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218d08:	0005303a 	rdctl	r2,status
80218d0c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218d10:	e0fff717 	ldw	r3,-36(fp)
80218d14:	00bfff84 	movi	r2,-2
80218d18:	1884703a 	and	r2,r3,r2
80218d1c:	1001703a 	wrctl	status,r2
  
  return context;
80218d20:	e0bff717 	ldw	r2,-36(fp)
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
80218d24:	e0bff415 	stw	r2,-48(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80218d28:	e0bffd17 	ldw	r2,-12(fp)
80218d2c:	10800317 	ldw	r2,12(r2)
80218d30:	10800104 	addi	r2,r2,4
80218d34:	e0fff317 	ldw	r3,-52(fp)
80218d38:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80218d3c:	e0bffd17 	ldw	r2,-12(fp)
80218d40:	10800317 	ldw	r2,12(r2)
80218d44:	e0fffd17 	ldw	r3,-12(fp)
80218d48:	18c00317 	ldw	r3,12(r3)
80218d4c:	18c00037 	ldwio	r3,0(r3)
80218d50:	10c00035 	stwio	r3,0(r2)
80218d54:	e0bff417 	ldw	r2,-48(fp)
80218d58:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218d5c:	e0bffc17 	ldw	r2,-16(fp)
80218d60:	1001703a 	wrctl	status,r2
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
80218d64:	e0bffe17 	ldw	r2,-8(fp)
80218d68:	10001a26 	beq	r2,zero,80218dd4 <alt_msgdma_descriptor_async_transfer+0x154>
80218d6c:	e0bfff17 	ldw	r2,-4(fp)
80218d70:	1000181e 	bne	r2,zero,80218dd4 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80218d74:	00000d06 	br	80218dac <alt_msgdma_descriptor_async_transfer+0x12c>
        dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
80218d78:	01000044 	movi	r4,1
80218d7c:	02166240 	call	80216624 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80218d80:	e0bff20b 	ldhu	r2,-56(fp)
80218d84:	1084e230 	cmpltui	r2,r2,5000
80218d88:	1000051e 	bne	r2,zero,80218da0 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
80218d8c:	012008b4 	movhi	r4,32802
80218d90:	21333c04 	addi	r4,r4,-13072
80218d94:	021b0780 	call	8021b078 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
80218d98:	00bff084 	movi	r2,-62
80218d9c:	00006706 	br	80218f3c <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
80218da0:	e0bff20b 	ldhu	r2,-56(fp)
80218da4:	10800044 	addi	r2,r2,1
80218da8:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80218dac:	e0bffd17 	ldw	r2,-12(fp)
80218db0:	10c00317 	ldw	r3,12(r2)
80218db4:	e0bffd17 	ldw	r2,-12(fp)
80218db8:	10800417 	ldw	r2,16(r2)
80218dbc:	e1bffe17 	ldw	r6,-8(fp)
80218dc0:	100b883a 	mov	r5,r2
80218dc4:	1809883a 	mov	r4,r3
80218dc8:	021875c0 	call	8021875c <alt_msgdma_write_standard_descriptor>
80218dcc:	103fea1e 	bne	r2,zero,80218d78 <__reset+0xfa1f8d78>
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
80218dd0:	00001f06 	br	80218e50 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80218dd4:	e0bffe17 	ldw	r2,-8(fp)
80218dd8:	10001b1e 	bne	r2,zero,80218e48 <alt_msgdma_descriptor_async_transfer+0x1c8>
80218ddc:	e0bfff17 	ldw	r2,-4(fp)
80218de0:	10001926 	beq	r2,zero,80218e48 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
80218de4:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80218de8:	00000d06 	br	80218e20 <alt_msgdma_descriptor_async_transfer+0x1a0>
        dev->csr_base, 
        dev->descriptor_base, 
        extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
80218dec:	01000044 	movi	r4,1
80218df0:	02166240 	call	80216624 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80218df4:	e0bff20b 	ldhu	r2,-56(fp)
80218df8:	1084e230 	cmpltui	r2,r2,5000
80218dfc:	1000051e 	bne	r2,zero,80218e14 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
80218e00:	012008b4 	movhi	r4,32802
80218e04:	21335204 	addi	r4,r4,-12984
80218e08:	021b0780 	call	8021b078 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
80218e0c:	00bff084 	movi	r2,-62
80218e10:	00004a06 	br	80218f3c <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
80218e14:	e0bff20b 	ldhu	r2,-56(fp)
80218e18:	10800044 	addi	r2,r2,1
80218e1c:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80218e20:	e0bffd17 	ldw	r2,-12(fp)
80218e24:	10c00317 	ldw	r3,12(r2)
80218e28:	e0bffd17 	ldw	r2,-12(fp)
80218e2c:	10800417 	ldw	r2,16(r2)
80218e30:	e1bfff17 	ldw	r6,-4(fp)
80218e34:	100b883a 	mov	r5,r2
80218e38:	1809883a 	mov	r4,r3
80218e3c:	02187f00 	call	802187f0 <alt_msgdma_write_extended_descriptor>
80218e40:	103fea1e 	bne	r2,zero,80218dec <__reset+0xfa1f8dec>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80218e44:	00000206 	br	80218e50 <alt_msgdma_descriptor_async_transfer+0x1d0>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
80218e48:	00bfffc4 	movi	r2,-1
80218e4c:	00003b06 	br	80218f3c <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
80218e50:	e0bffd17 	ldw	r2,-12(fp)
80218e54:	10800b17 	ldw	r2,44(r2)
80218e58:	10001c26 	beq	r2,zero,80218ecc <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
80218e5c:	e0bffd17 	ldw	r2,-12(fp)
80218e60:	10c00d17 	ldw	r3,52(r2)
80218e64:	e0bff317 	ldw	r2,-52(fp)
80218e68:	1884b03a 	or	r2,r3,r2
80218e6c:	10800514 	ori	r2,r2,20
80218e70:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80218e74:	e0fff317 	ldw	r3,-52(fp)
80218e78:	00bff7c4 	movi	r2,-33
80218e7c:	1884703a 	and	r2,r3,r2
80218e80:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218e84:	0005303a 	rdctl	r2,status
80218e88:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218e8c:	e0fffa17 	ldw	r3,-24(fp)
80218e90:	00bfff84 	movi	r2,-2
80218e94:	1884703a 	and	r2,r3,r2
80218e98:	1001703a 	wrctl	status,r2
  
  return context;
80218e9c:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
80218ea0:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80218ea4:	e0bffd17 	ldw	r2,-12(fp)
80218ea8:	10800317 	ldw	r2,12(r2)
80218eac:	10800104 	addi	r2,r2,4
80218eb0:	e0fff317 	ldw	r3,-52(fp)
80218eb4:	10c00035 	stwio	r3,0(r2)
80218eb8:	e0bff417 	ldw	r2,-48(fp)
80218ebc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218ec0:	e0bff817 	ldw	r2,-32(fp)
80218ec4:	1001703a 	wrctl	status,r2
80218ec8:	00001b06 	br	80218f38 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
80218ecc:	e0bffd17 	ldw	r2,-12(fp)
80218ed0:	10c00d17 	ldw	r3,52(r2)
80218ed4:	e0bff317 	ldw	r2,-52(fp)
80218ed8:	1884b03a 	or	r2,r3,r2
80218edc:	10800114 	ori	r2,r2,4
80218ee0:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
80218ee4:	e0fff317 	ldw	r3,-52(fp)
80218ee8:	00bff3c4 	movi	r2,-49
80218eec:	1884703a 	and	r2,r3,r2
80218ef0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218ef4:	0005303a 	rdctl	r2,status
80218ef8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218efc:	e0fffb17 	ldw	r3,-20(fp)
80218f00:	00bfff84 	movi	r2,-2
80218f04:	1884703a 	and	r2,r3,r2
80218f08:	1001703a 	wrctl	status,r2
  
  return context;
80218f0c:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
80218f10:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80218f14:	e0bffd17 	ldw	r2,-12(fp)
80218f18:	10800317 	ldw	r2,12(r2)
80218f1c:	10800104 	addi	r2,r2,4
80218f20:	e0fff317 	ldw	r3,-52(fp)
80218f24:	10c00035 	stwio	r3,0(r2)
80218f28:	e0bff417 	ldw	r2,-48(fp)
80218f2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218f30:	e0bff917 	ldw	r2,-28(fp)
80218f34:	1001703a 	wrctl	status,r2
     * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
80218f38:	0005883a 	mov	r2,zero
}
80218f3c:	e037883a 	mov	sp,fp
80218f40:	dfc00117 	ldw	ra,4(sp)
80218f44:	df000017 	ldw	fp,0(sp)
80218f48:	dec00204 	addi	sp,sp,8
80218f4c:	f800283a 	ret

80218f50 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
80218f50:	defff004 	addi	sp,sp,-64
80218f54:	dfc00f15 	stw	ra,60(sp)
80218f58:	df000e15 	stw	fp,56(sp)
80218f5c:	df000e04 	addi	fp,sp,56
80218f60:	e13ffd15 	stw	r4,-12(fp)
80218f64:	e17ffe15 	stw	r5,-8(fp)
80218f68:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
80218f6c:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
80218f70:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
80218f74:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
80218f78:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80218f7c:	e0bffd17 	ldw	r2,-12(fp)
80218f80:	10800317 	ldw	r2,12(r2)
80218f84:	10800204 	addi	r2,r2,8
80218f88:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
80218f8c:	10bfffcc 	andi	r2,r2,65535
80218f90:	e0bff415 	stw	r2,-48(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80218f94:	e0bffd17 	ldw	r2,-12(fp)
80218f98:	10800317 	ldw	r2,12(r2)
80218f9c:	10800204 	addi	r2,r2,8
80218fa0:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
80218fa4:	1004d43a 	srli	r2,r2,16
80218fa8:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
80218fac:	00807804 	movi	r2,480
80218fb0:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80218fb4:	00001906 	br	8021901c <alt_msgdma_descriptor_sync_transfer+0xcc>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
80218fb8:	01000044 	movi	r4,1
80218fbc:	02166240 	call	80216624 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80218fc0:	e0bff30b 	ldhu	r2,-52(fp)
80218fc4:	1084e230 	cmpltui	r2,r2,5000
80218fc8:	1000051e 	bne	r2,zero,80218fe0 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
80218fcc:	012008b4 	movhi	r4,32802
80218fd0:	21336804 	addi	r4,r4,-12896
80218fd4:	021b0780 	call	8021b078 <alt_printf>
                " for storing descriptor\n");
            return -ETIME;
80218fd8:	00bff084 	movi	r2,-62
80218fdc:	0000b506 	br	802192b4 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
80218fe0:	e0bff30b 	ldhu	r2,-52(fp)
80218fe4:	10800044 	addi	r2,r2,1
80218fe8:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80218fec:	e0bffd17 	ldw	r2,-12(fp)
80218ff0:	10800317 	ldw	r2,12(r2)
80218ff4:	10800204 	addi	r2,r2,8
80218ff8:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
                " for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
80218ffc:	10bfffcc 	andi	r2,r2,65535
80219000:	e0bff415 	stw	r2,-48(fp)
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80219004:	e0bffd17 	ldw	r2,-12(fp)
80219008:	10800317 	ldw	r2,12(r2)
8021900c:	10800204 	addi	r2,r2,8
80219010:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
80219014:	1004d43a 	srli	r2,r2,16
80219018:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8021901c:	e0bffd17 	ldw	r2,-12(fp)
80219020:	10800917 	ldw	r2,36(r2)
80219024:	e0fff517 	ldw	r3,-44(fp)
80219028:	18bfe32e 	bgeu	r3,r2,80218fb8 <__reset+0xfa1f8fb8>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
8021902c:	e0bffd17 	ldw	r2,-12(fp)
80219030:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80219034:	e0fff417 	ldw	r3,-48(fp)
80219038:	18bfdf2e 	bgeu	r3,r2,80218fb8 <__reset+0xfa1f8fb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021903c:	0005303a 	rdctl	r2,status
80219040:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80219044:	e0fffc17 	ldw	r3,-16(fp)
80219048:	00bfff84 	movi	r2,-2
8021904c:	1884703a 	and	r2,r3,r2
80219050:	1001703a 	wrctl	status,r2
  
  return context;
80219054:	e0bffc17 	ldw	r2,-16(fp)
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
80219058:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8021905c:	e0bffd17 	ldw	r2,-12(fp)
80219060:	10800317 	ldw	r2,12(r2)
80219064:	10800104 	addi	r2,r2,4
80219068:	00c00804 	movi	r3,32
8021906c:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80219070:	e0bffd17 	ldw	r2,-12(fp)
80219074:	10800317 	ldw	r2,12(r2)
80219078:	e0fffd17 	ldw	r3,-12(fp)
8021907c:	18c00317 	ldw	r3,12(r3)
80219080:	18c00037 	ldwio	r3,0(r3)
80219084:	10c00035 	stwio	r3,0(r2)
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
80219088:	e0bffe17 	ldw	r2,-8(fp)
8021908c:	10001b26 	beq	r2,zero,802190fc <alt_msgdma_descriptor_sync_transfer+0x1ac>
80219090:	e0bfff17 	ldw	r2,-4(fp)
80219094:	1000191e 	bne	r2,zero,802190fc <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
80219098:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8021909c:	00000d06 	br	802190d4 <alt_msgdma_descriptor_sync_transfer+0x184>
            dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
802190a0:	01000044 	movi	r4,1
802190a4:	02166240 	call	80216624 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
802190a8:	e0bff30b 	ldhu	r2,-52(fp)
802190ac:	1084e230 	cmpltui	r2,r2,5000
802190b0:	1000051e 	bne	r2,zero,802190c8 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
802190b4:	012008b4 	movhi	r4,32802
802190b8:	21337c04 	addi	r4,r4,-12816
802190bc:	021b0780 	call	8021b078 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
802190c0:	00bff084 	movi	r2,-62
802190c4:	00007b06 	br	802192b4 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
802190c8:	e0bff30b 	ldhu	r2,-52(fp)
802190cc:	10800044 	addi	r2,r2,1
802190d0:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
802190d4:	e0bffd17 	ldw	r2,-12(fp)
802190d8:	10c00317 	ldw	r3,12(r2)
802190dc:	e0bffd17 	ldw	r2,-12(fp)
802190e0:	10800417 	ldw	r2,16(r2)
802190e4:	e1bffe17 	ldw	r6,-8(fp)
802190e8:	100b883a 	mov	r5,r2
802190ec:	1809883a 	mov	r4,r3
802190f0:	021875c0 	call	8021875c <alt_msgdma_write_standard_descriptor>
802190f4:	103fea1e 	bne	r2,zero,802190a0 <__reset+0xfa1f90a0>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
802190f8:	00001f06 	br	80219178 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
802190fc:	e0bffe17 	ldw	r2,-8(fp)
80219100:	10001b1e 	bne	r2,zero,80219170 <alt_msgdma_descriptor_sync_transfer+0x220>
80219104:	e0bfff17 	ldw	r2,-4(fp)
80219108:	10001926 	beq	r2,zero,80219170 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
8021910c:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80219110:	00000d06 	br	80219148 <alt_msgdma_descriptor_sync_transfer+0x1f8>
            dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
80219114:	01000044 	movi	r4,1
80219118:	02166240 	call	80216624 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8021911c:	e0bff30b 	ldhu	r2,-52(fp)
80219120:	1084e230 	cmpltui	r2,r2,5000
80219124:	1000051e 	bne	r2,zero,8021913c <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
80219128:	012008b4 	movhi	r4,32802
8021912c:	21338d04 	addi	r4,r4,-12748
80219130:	021b0780 	call	8021b078 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
80219134:	00bff084 	movi	r2,-62
80219138:	00005e06 	br	802192b4 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
8021913c:	e0bff30b 	ldhu	r2,-52(fp)
80219140:	10800044 	addi	r2,r2,1
80219144:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80219148:	e0bffd17 	ldw	r2,-12(fp)
8021914c:	10c00317 	ldw	r3,12(r2)
80219150:	e0bffd17 	ldw	r2,-12(fp)
80219154:	10800417 	ldw	r2,16(r2)
80219158:	e1bfff17 	ldw	r6,-4(fp)
8021915c:	100b883a 	mov	r5,r2
80219160:	1809883a 	mov	r4,r3
80219164:	02187f00 	call	802187f0 <alt_msgdma_write_extended_descriptor>
80219168:	103fea1e 	bne	r2,zero,80219114 <__reset+0xfa1f9114>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8021916c:	00000206 	br	80219178 <alt_msgdma_descriptor_sync_transfer+0x228>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
80219170:	00bfffc4 	movi	r2,-1
80219174:	00004f06 	br	802192b4 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80219178:	e0bffd17 	ldw	r2,-12(fp)
8021917c:	10800317 	ldw	r2,12(r2)
80219180:	10800104 	addi	r2,r2,4
80219184:	e0fffd17 	ldw	r3,-12(fp)
80219188:	19000d17 	ldw	r4,52(r3)
8021918c:	00fff2c4 	movi	r3,-53
80219190:	20c6703a 	and	r3,r4,r3
80219194:	18c00114 	ori	r3,r3,4
80219198:	10c00035 	stwio	r3,0(r2)
8021919c:	e0bff717 	ldw	r2,-36(fp)
802191a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802191a4:	e0bff917 	ldw	r2,-28(fp)
802191a8:	1001703a 	wrctl	status,r2
        (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
        (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
     
    alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
802191ac:	e03ff30d 	sth	zero,-52(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
802191b0:	e0bffd17 	ldw	r2,-12(fp)
802191b4:	10800317 	ldw	r2,12(r2)
802191b8:	10800037 	ldwio	r2,0(r2)
802191bc:	e0bff215 	stw	r2,-56(fp)
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
802191c0:	00001106 	br	80219208 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
802191c4:	01000044 	movi	r4,1
802191c8:	02166240 	call	80216624 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
802191cc:	e0bff30b 	ldhu	r2,-52(fp)
802191d0:	1084e230 	cmpltui	r2,r2,5000
802191d4:	1000051e 	bne	r2,zero,802191ec <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
802191d8:	012008b4 	movhi	r4,32802
802191dc:	21339e04 	addi	r4,r4,-12680
802191e0:	021b0780 	call	8021b078 <alt_printf>
            * Now that access to the registers is complete, release the registers
            * semaphore so that other threads can access the registers.
            */
            ALT_SEM_POST (dev->regs_lock);
            
            return -ETIME;
802191e4:	00bff084 	movi	r2,-62
802191e8:	00003206 	br	802192b4 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
802191ec:	e0bff30b 	ldhu	r2,-52(fp)
802191f0:	10800044 	addi	r2,r2,1
802191f4:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
802191f8:	e0bffd17 	ldw	r2,-12(fp)
802191fc:	10800317 	ldw	r2,12(r2)
80219200:	10800037 	ldwio	r2,0(r2)
80219204:	e0bff215 	stw	r2,-56(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
80219208:	e0fff217 	ldw	r3,-56(fp)
8021920c:	e0bff817 	ldw	r2,-32(fp)
80219210:	1884703a 	and	r2,r3,r2
80219214:	1000031e 	bne	r2,zero,80219224 <alt_msgdma_descriptor_sync_transfer+0x2d4>
80219218:	e0bff217 	ldw	r2,-56(fp)
8021921c:	1080004c 	andi	r2,r2,1
80219220:	103fe81e 	bne	r2,zero,802191c4 <__reset+0xfa1f91c4>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
80219224:	e0fff217 	ldw	r3,-56(fp)
80219228:	e0bff817 	ldw	r2,-32(fp)
8021922c:	1884703a 	and	r2,r3,r2
80219230:	10000226 	beq	r2,zero,8021923c <alt_msgdma_descriptor_sync_transfer+0x2ec>
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        return error;
80219234:	e0bff817 	ldw	r2,-32(fp)
80219238:	00001e06 	br	802192b4 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
8021923c:	e0bffd17 	ldw	r2,-12(fp)
80219240:	10800317 	ldw	r2,12(r2)
80219244:	10800104 	addi	r2,r2,4
80219248:	10800037 	ldwio	r2,0(r2)
8021924c:	10800814 	ori	r2,r2,32
80219250:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80219254:	0005303a 	rdctl	r2,status
80219258:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021925c:	e0fffa17 	ldw	r3,-24(fp)
80219260:	00bfff84 	movi	r2,-2
80219264:	1884703a 	and	r2,r3,r2
80219268:	1001703a 	wrctl	status,r2
  
  return context;
8021926c:	e0bffa17 	ldw	r2,-24(fp)
    ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
80219270:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80219274:	e0bffd17 	ldw	r2,-12(fp)
80219278:	10800317 	ldw	r2,12(r2)
8021927c:	10800104 	addi	r2,r2,4
80219280:	e0fff617 	ldw	r3,-40(fp)
80219284:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80219288:	e0bffd17 	ldw	r2,-12(fp)
8021928c:	10800317 	ldw	r2,12(r2)
80219290:	e0fffd17 	ldw	r3,-12(fp)
80219294:	18c00317 	ldw	r3,12(r3)
80219298:	18c00037 	ldwio	r3,0(r3)
8021929c:	10c00035 	stwio	r3,0(r2)
802192a0:	e0bff717 	ldw	r2,-36(fp)
802192a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802192a8:	e0bffb17 	ldw	r2,-20(fp)
802192ac:	1001703a 	wrctl	status,r2
    * Now that access to the registers is complete, release the registers
    * semaphore so that other threads can access the registers.
    */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
802192b0:	0005883a 	mov	r2,zero

}
802192b4:	e037883a 	mov	sp,fp
802192b8:	dfc00117 	ldw	ra,4(sp)
802192bc:	df000017 	ldw	fp,0(sp)
802192c0:	dec00204 	addi	sp,sp,8
802192c4:	f800283a 	ret

802192c8 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
802192c8:	defff804 	addi	sp,sp,-32
802192cc:	dfc00715 	stw	ra,28(sp)
802192d0:	df000615 	stw	fp,24(sp)
802192d4:	df000604 	addi	fp,sp,24
802192d8:	e13ffc15 	stw	r4,-16(fp)
802192dc:	e17ffd15 	stw	r5,-12(fp)
802192e0:	e1bffe15 	stw	r6,-8(fp)
802192e4:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
802192e8:	e0800217 	ldw	r2,8(fp)
802192ec:	d8800115 	stw	r2,4(sp)
802192f0:	e0bfff17 	ldw	r2,-4(fp)
802192f4:	d8800015 	stw	r2,0(sp)
802192f8:	e1fffe17 	ldw	r7,-8(fp)
802192fc:	000d883a 	mov	r6,zero
80219300:	e17ffd17 	ldw	r5,-12(fp)
80219304:	e13ffc17 	ldw	r4,-16(fp)
80219308:	0218aa00 	call	80218aa0 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8021930c:	e037883a 	mov	sp,fp
80219310:	dfc00117 	ldw	ra,4(sp)
80219314:	df000017 	ldw	fp,0(sp)
80219318:	dec00204 	addi	sp,sp,8
8021931c:	f800283a 	ret

80219320 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address,
    alt_u32 length,
    alt_u32 control)
{
80219320:	defff804 	addi	sp,sp,-32
80219324:	dfc00715 	stw	ra,28(sp)
80219328:	df000615 	stw	fp,24(sp)
8021932c:	df000604 	addi	fp,sp,24
80219330:	e13ffc15 	stw	r4,-16(fp)
80219334:	e17ffd15 	stw	r5,-12(fp)
80219338:	e1bffe15 	stw	r6,-8(fp)
8021933c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
80219340:	e0800217 	ldw	r2,8(fp)
80219344:	d8800115 	stw	r2,4(sp)
80219348:	e0bfff17 	ldw	r2,-4(fp)
8021934c:	d8800015 	stw	r2,0(sp)
80219350:	000f883a 	mov	r7,zero
80219354:	e1bffe17 	ldw	r6,-8(fp)
80219358:	e17ffd17 	ldw	r5,-12(fp)
8021935c:	e13ffc17 	ldw	r4,-16(fp)
80219360:	0218aa00 	call	80218aa0 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
80219364:	e037883a 	mov	sp,fp
80219368:	dfc00117 	ldw	ra,4(sp)
8021936c:	df000017 	ldw	fp,0(sp)
80219370:	dec00204 	addi	sp,sp,8
80219374:	f800283a 	ret

80219378 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
80219378:	defff804 	addi	sp,sp,-32
8021937c:	dfc00715 	stw	ra,28(sp)
80219380:	df000615 	stw	fp,24(sp)
80219384:	df000604 	addi	fp,sp,24
80219388:	e13ffc15 	stw	r4,-16(fp)
8021938c:	e17ffd15 	stw	r5,-12(fp)
80219390:	e1bffe15 	stw	r6,-8(fp)
80219394:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
80219398:	e0800317 	ldw	r2,12(fp)
8021939c:	d8800115 	stw	r2,4(sp)
802193a0:	e0800217 	ldw	r2,8(fp)
802193a4:	d8800015 	stw	r2,0(sp)
802193a8:	e1ffff17 	ldw	r7,-4(fp)
802193ac:	e1bffe17 	ldw	r6,-8(fp)
802193b0:	e17ffd17 	ldw	r5,-12(fp)
802193b4:	e13ffc17 	ldw	r4,-16(fp)
802193b8:	0218aa00 	call	80218aa0 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
802193bc:	e037883a 	mov	sp,fp
802193c0:	dfc00117 	ldw	ra,4(sp)
802193c4:	df000017 	ldw	fp,0(sp)
802193c8:	dec00204 	addi	sp,sp,8
802193cc:	f800283a 	ret

802193d0 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 write_burst_count, 
    alt_u16 write_stride)
{
802193d0:	defff004 	addi	sp,sp,-64
802193d4:	dfc00f15 	stw	ra,60(sp)
802193d8:	df000e15 	stw	fp,56(sp)
802193dc:	df000e04 	addi	fp,sp,56
802193e0:	e13ff915 	stw	r4,-28(fp)
802193e4:	e17ffa15 	stw	r5,-24(fp)
802193e8:	e1bffb15 	stw	r6,-20(fp)
802193ec:	e1fffc15 	stw	r7,-16(fp)
802193f0:	e1000317 	ldw	r4,12(fp)
802193f4:	e0c00417 	ldw	r3,16(fp)
802193f8:	e0800517 	ldw	r2,20(fp)
802193fc:	e13ffd0d 	sth	r4,-12(fp)
80219400:	e0fffe05 	stb	r3,-8(fp)
80219404:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
80219408:	e0bffd0b 	ldhu	r2,-12(fp)
8021940c:	e0fffe03 	ldbu	r3,-8(fp)
80219410:	e13fff0b 	ldhu	r4,-4(fp)
80219414:	d9000615 	stw	r4,24(sp)
80219418:	d8000515 	stw	zero,20(sp)
8021941c:	d8c00415 	stw	r3,16(sp)
80219420:	d8000315 	stw	zero,12(sp)
80219424:	d8800215 	stw	r2,8(sp)
80219428:	e0800217 	ldw	r2,8(fp)
8021942c:	d8800115 	stw	r2,4(sp)
80219430:	e0bffc17 	ldw	r2,-16(fp)
80219434:	d8800015 	stw	r2,0(sp)
80219438:	e1fffb17 	ldw	r7,-20(fp)
8021943c:	000d883a 	mov	r6,zero
80219440:	e17ffa17 	ldw	r5,-24(fp)
80219444:	e13ff917 	ldw	r4,-28(fp)
80219448:	0218b2c0 	call	80218b2c <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
8021944c:	e037883a 	mov	sp,fp
80219450:	dfc00117 	ldw	ra,4(sp)
80219454:	df000017 	ldw	fp,0(sp)
80219458:	dec00204 	addi	sp,sp,8
8021945c:	f800283a 	ret

80219460 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
    alt_u32 length,
    alt_u32 control,
    alt_u16 sequence_number,
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
80219460:	defff004 	addi	sp,sp,-64
80219464:	dfc00f15 	stw	ra,60(sp)
80219468:	df000e15 	stw	fp,56(sp)
8021946c:	df000e04 	addi	fp,sp,56
80219470:	e13ff915 	stw	r4,-28(fp)
80219474:	e17ffa15 	stw	r5,-24(fp)
80219478:	e1bffb15 	stw	r6,-20(fp)
8021947c:	e1fffc15 	stw	r7,-16(fp)
80219480:	e1000317 	ldw	r4,12(fp)
80219484:	e0c00417 	ldw	r3,16(fp)
80219488:	e0800517 	ldw	r2,20(fp)
8021948c:	e13ffd0d 	sth	r4,-12(fp)
80219490:	e0fffe05 	stb	r3,-8(fp)
80219494:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
80219498:	e0bffd0b 	ldhu	r2,-12(fp)
8021949c:	e0fffe03 	ldbu	r3,-8(fp)
802194a0:	e13fff0b 	ldhu	r4,-4(fp)
802194a4:	d8000615 	stw	zero,24(sp)
802194a8:	d9000515 	stw	r4,20(sp)
802194ac:	d8000415 	stw	zero,16(sp)
802194b0:	d8c00315 	stw	r3,12(sp)
802194b4:	d8800215 	stw	r2,8(sp)
802194b8:	e0800217 	ldw	r2,8(fp)
802194bc:	d8800115 	stw	r2,4(sp)
802194c0:	e0bffc17 	ldw	r2,-16(fp)
802194c4:	d8800015 	stw	r2,0(sp)
802194c8:	000f883a 	mov	r7,zero
802194cc:	e1bffb17 	ldw	r6,-20(fp)
802194d0:	e17ffa17 	ldw	r5,-24(fp)
802194d4:	e13ff917 	ldw	r4,-28(fp)
802194d8:	0218b2c0 	call	80218b2c <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
802194dc:	e037883a 	mov	sp,fp
802194e0:	dfc00117 	ldw	ra,4(sp)
802194e4:	df000017 	ldw	fp,0(sp)
802194e8:	dec00204 	addi	sp,sp,8
802194ec:	f800283a 	ret

802194f0 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
802194f0:	deffee04 	addi	sp,sp,-72
802194f4:	dfc01115 	stw	ra,68(sp)
802194f8:	df001015 	stw	fp,64(sp)
802194fc:	df001004 	addi	fp,sp,64
80219500:	e13ff715 	stw	r4,-36(fp)
80219504:	e17ff815 	stw	r5,-32(fp)
80219508:	e1bff915 	stw	r6,-28(fp)
8021950c:	e1fffa15 	stw	r7,-24(fp)
80219510:	e1800417 	ldw	r6,16(fp)
80219514:	e1400517 	ldw	r5,20(fp)
80219518:	e1000617 	ldw	r4,24(fp)
8021951c:	e0c00717 	ldw	r3,28(fp)
80219520:	e0800817 	ldw	r2,32(fp)
80219524:	e1bffb0d 	sth	r6,-20(fp)
80219528:	e17ffc05 	stb	r5,-16(fp)
8021952c:	e13ffd05 	stb	r4,-12(fp)
80219530:	e0fffe0d 	sth	r3,-8(fp)
80219534:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
80219538:	e0bffb0b 	ldhu	r2,-20(fp)
8021953c:	e0fffc03 	ldbu	r3,-16(fp)
80219540:	e13ffd03 	ldbu	r4,-12(fp)
80219544:	e17ffe0b 	ldhu	r5,-8(fp)
80219548:	e1bfff0b 	ldhu	r6,-4(fp)
8021954c:	d9800615 	stw	r6,24(sp)
80219550:	d9400515 	stw	r5,20(sp)
80219554:	d9000415 	stw	r4,16(sp)
80219558:	d8c00315 	stw	r3,12(sp)
8021955c:	d8800215 	stw	r2,8(sp)
80219560:	e0800317 	ldw	r2,12(fp)
80219564:	d8800115 	stw	r2,4(sp)
80219568:	e0800217 	ldw	r2,8(fp)
8021956c:	d8800015 	stw	r2,0(sp)
80219570:	e1fffa17 	ldw	r7,-24(fp)
80219574:	e1bff917 	ldw	r6,-28(fp)
80219578:	e17ff817 	ldw	r5,-32(fp)
8021957c:	e13ff717 	ldw	r4,-36(fp)
80219580:	0218b2c0 	call	80218b2c <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
80219584:	e037883a 	mov	sp,fp
80219588:	dfc00117 	ldw	ra,4(sp)
8021958c:	df000017 	ldw	fp,0(sp)
80219590:	dec00204 	addi	sp,sp,8
80219594:	f800283a 	ret

80219598 <alt_msgdma_construct_prefetcher_standard_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
80219598:	defffb04 	addi	sp,sp,-20
8021959c:	df000415 	stw	fp,16(sp)
802195a0:	df000404 	addi	fp,sp,16
802195a4:	e13ffc15 	stw	r4,-16(fp)
802195a8:	e17ffd15 	stw	r5,-12(fp)
802195ac:	e1bffe15 	stw	r6,-8(fp)
802195b0:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
802195b4:	e0bffc17 	ldw	r2,-16(fp)
802195b8:	10c01217 	ldw	r3,72(r2)
802195bc:	e0800117 	ldw	r2,4(fp)
802195c0:	18800436 	bltu	r3,r2,802195d4 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
802195c4:	e0bffc17 	ldw	r2,-16(fp)
802195c8:	10801703 	ldbu	r2,92(r2)
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
802195cc:	10803fcc 	andi	r2,r2,255
802195d0:	10000226 	beq	r2,zero,802195dc <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
802195d4:	00bffa84 	movi	r2,-22
802195d8:	00001406 	br	8021962c <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
802195dc:	e0bffd17 	ldw	r2,-12(fp)
802195e0:	e0fffe17 	ldw	r3,-8(fp)
802195e4:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
802195e8:	e0bffd17 	ldw	r2,-12(fp)
802195ec:	e0ffff17 	ldw	r3,-4(fp)
802195f0:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
802195f4:	e0bffd17 	ldw	r2,-12(fp)
802195f8:	e0c00117 	ldw	r3,4(fp)
802195fc:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
80219600:	e0fffd17 	ldw	r3,-12(fp)
80219604:	e0bffd17 	ldw	r2,-12(fp)
80219608:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8021960c:	e0c00217 	ldw	r3,8(fp)
80219610:	00900034 	movhi	r2,16384
80219614:	10bfffc4 	addi	r2,r2,-1
80219618:	1884703a 	and	r2,r3,r2
8021961c:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
80219620:	e0bffd17 	ldw	r2,-12(fp)
80219624:	10c00715 	stw	r3,28(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
80219628:	0005883a 	mov	r2,zero
}
8021962c:	e037883a 	mov	sp,fp
80219630:	df000017 	ldw	fp,0(sp)
80219634:	dec00104 	addi	sp,sp,4
80219638:	f800283a 	ret

8021963c <alt_msgdma_construct_prefetcher_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8021963c:	defff404 	addi	sp,sp,-48
80219640:	df000b15 	stw	fp,44(sp)
80219644:	df000b04 	addi	fp,sp,44
80219648:	e13ff715 	stw	r4,-36(fp)
8021964c:	e17ff815 	stw	r5,-32(fp)
80219650:	e1bff915 	stw	r6,-28(fp)
80219654:	e1fffa15 	stw	r7,-24(fp)
80219658:	e1800517 	ldw	r6,20(fp)
8021965c:	e1400617 	ldw	r5,24(fp)
80219660:	e1000717 	ldw	r4,28(fp)
80219664:	e0c00817 	ldw	r3,32(fp)
80219668:	e0800917 	ldw	r2,36(fp)
8021966c:	e1bffb0d 	sth	r6,-20(fp)
80219670:	e17ffc05 	stb	r5,-16(fp)
80219674:	e13ffd05 	stb	r4,-12(fp)
80219678:	e0fffe0d 	sth	r3,-8(fp)
8021967c:	e0bfff0d 	sth	r2,-4(fp)
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
80219680:	e0bff717 	ldw	r2,-36(fp)
80219684:	10c01217 	ldw	r3,72(r2)
80219688:	e0800317 	ldw	r2,12(fp)
8021968c:	18801936 	bltu	r3,r2,802196f4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
80219690:	e13ff717 	ldw	r4,-36(fp)
80219694:	20801317 	ldw	r2,76(r4)
80219698:	20c01417 	ldw	r3,80(r4)
8021969c:	e13ffe0b 	ldhu	r4,-8(fp)
802196a0:	213fffcc 	andi	r4,r4,65535
802196a4:	2015883a 	mov	r10,r4
802196a8:	0017883a 	mov	r11,zero
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
802196ac:	1ac01136 	bltu	r3,r11,802196f4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
802196b0:	58c0011e 	bne	r11,r3,802196b8 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
802196b4:	12800f36 	bltu	r2,r10,802196f4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
802196b8:	e13ff717 	ldw	r4,-36(fp)
802196bc:	20801317 	ldw	r2,76(r4)
802196c0:	20c01417 	ldw	r3,80(r4)
802196c4:	e13fff0b 	ldhu	r4,-4(fp)
802196c8:	213fffcc 	andi	r4,r4,65535
802196cc:	2011883a 	mov	r8,r4
802196d0:	0013883a 	mov	r9,zero
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
802196d4:	1a400736 	bltu	r3,r9,802196f4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
802196d8:	48c0011e 	bne	r9,r3,802196e0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
802196dc:	12000536 	bltu	r2,r8,802196f4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
802196e0:	e0bff717 	ldw	r2,-36(fp)
802196e4:	10801703 	ldbu	r2,92(r2)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
802196e8:	10803fcc 	andi	r2,r2,255
802196ec:	10800060 	cmpeqi	r2,r2,1
802196f0:	1000021e 	bne	r2,zero,802196fc <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
802196f4:	00bffa84 	movi	r2,-22
802196f8:	00003106 	br	802197c0 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
802196fc:	e0bff817 	ldw	r2,-32(fp)
80219700:	e0fff917 	ldw	r3,-28(fp)
80219704:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
80219708:	e0bff817 	ldw	r2,-32(fp)
8021970c:	e0fffa17 	ldw	r3,-24(fp)
80219710:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
80219714:	e0bff817 	ldw	r2,-32(fp)
80219718:	e0c00117 	ldw	r3,4(fp)
8021971c:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
80219720:	e0bff817 	ldw	r2,-32(fp)
80219724:	e0c00217 	ldw	r3,8(fp)
80219728:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8021972c:	e0bff817 	ldw	r2,-32(fp)
80219730:	e0c00317 	ldw	r3,12(fp)
80219734:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
80219738:	e0bff817 	ldw	r2,-32(fp)
8021973c:	e0fffb0b 	ldhu	r3,-20(fp)
80219740:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
80219744:	e0bff817 	ldw	r2,-32(fp)
80219748:	e0fffc03 	ldbu	r3,-16(fp)
8021974c:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
80219750:	e0bff817 	ldw	r2,-32(fp)
80219754:	e0fffd03 	ldbu	r3,-12(fp)
80219758:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
8021975c:	e0bff817 	ldw	r2,-32(fp)
80219760:	e0fffe0b 	ldhu	r3,-8(fp)
80219764:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
80219768:	e0bff817 	ldw	r2,-32(fp)
8021976c:	e0ffff0b 	ldhu	r3,-4(fp)
80219770:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
    node_addr.u64 = (uintptr_t)descriptor;
80219774:	e0bff817 	ldw	r2,-32(fp)
80219778:	1019883a 	mov	r12,r2
8021977c:	001b883a 	mov	r13,zero
80219780:	e33ff515 	stw	r12,-44(fp)
80219784:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
80219788:	e0fff517 	ldw	r3,-44(fp)
8021978c:	e0bff817 	ldw	r2,-32(fp)
80219790:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
80219794:	e0fff617 	ldw	r3,-40(fp)
80219798:	e0bff817 	ldw	r2,-32(fp)
8021979c:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
802197a0:	e0c00417 	ldw	r3,16(fp)
802197a4:	00900034 	movhi	r2,16384
802197a8:	10bfffc4 	addi	r2,r2,-1
802197ac:	1884703a 	and	r2,r3,r2
802197b0:	10e00034 	orhi	r3,r2,32768
    node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
802197b4:	e0bff817 	ldw	r2,-32(fp)
802197b8:	10c00f15 	stw	r3,60(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
802197bc:	0005883a 	mov	r2,zero
}
802197c0:	e037883a 	mov	sp,fp
802197c4:	df000017 	ldw	fp,0(sp)
802197c8:	dec00104 	addi	sp,sp,4
802197cc:	f800283a 	ret

802197d0 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address,
    alt_u32 write_address,
    alt_u32 length,
    alt_u32 control)
{
802197d0:	defff804 	addi	sp,sp,-32
802197d4:	dfc00715 	stw	ra,28(sp)
802197d8:	df000615 	stw	fp,24(sp)
802197dc:	df000604 	addi	fp,sp,24
802197e0:	e13ffc15 	stw	r4,-16(fp)
802197e4:	e17ffd15 	stw	r5,-12(fp)
802197e8:	e1bffe15 	stw	r6,-8(fp)
802197ec:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
802197f0:	e0800317 	ldw	r2,12(fp)
802197f4:	d8800115 	stw	r2,4(sp)
802197f8:	e0800217 	ldw	r2,8(fp)
802197fc:	d8800015 	stw	r2,0(sp)
80219800:	e1ffff17 	ldw	r7,-4(fp)
80219804:	e1bffe17 	ldw	r6,-8(fp)
80219808:	e17ffd17 	ldw	r5,-12(fp)
8021980c:	e13ffc17 	ldw	r4,-16(fp)
80219810:	02195980 	call	80219598 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, write_address, length, control);
}
80219814:	e037883a 	mov	sp,fp
80219818:	dfc00117 	ldw	ra,4(sp)
8021981c:	df000017 	ldw	fp,0(sp)
80219820:	dec00204 	addi	sp,sp,8
80219824:	f800283a 	ret

80219828 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
80219828:	defff804 	addi	sp,sp,-32
8021982c:	dfc00715 	stw	ra,28(sp)
80219830:	df000615 	stw	fp,24(sp)
80219834:	df000604 	addi	fp,sp,24
80219838:	e13ffc15 	stw	r4,-16(fp)
8021983c:	e17ffd15 	stw	r5,-12(fp)
80219840:	e1bffe15 	stw	r6,-8(fp)
80219844:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
80219848:	e0800217 	ldw	r2,8(fp)
8021984c:	d8800115 	stw	r2,4(sp)
80219850:	e0bfff17 	ldw	r2,-4(fp)
80219854:	d8800015 	stw	r2,0(sp)
80219858:	e1fffe17 	ldw	r7,-8(fp)
8021985c:	000d883a 	mov	r6,zero
80219860:	e17ffd17 	ldw	r5,-12(fp)
80219864:	e13ffc17 	ldw	r4,-16(fp)
80219868:	02195980 	call	80219598 <alt_msgdma_construct_prefetcher_standard_descriptor>
            0, write_address, length, control);
}
8021986c:	e037883a 	mov	sp,fp
80219870:	dfc00117 	ldw	ra,4(sp)
80219874:	df000017 	ldw	fp,0(sp)
80219878:	dec00204 	addi	sp,sp,8
8021987c:	f800283a 	ret

80219880 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 read_address, 
    alt_u32 length, 
    alt_u32 control)
{
80219880:	defff804 	addi	sp,sp,-32
80219884:	dfc00715 	stw	ra,28(sp)
80219888:	df000615 	stw	fp,24(sp)
8021988c:	df000604 	addi	fp,sp,24
80219890:	e13ffc15 	stw	r4,-16(fp)
80219894:	e17ffd15 	stw	r5,-12(fp)
80219898:	e1bffe15 	stw	r6,-8(fp)
8021989c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
802198a0:	e0800217 	ldw	r2,8(fp)
802198a4:	d8800115 	stw	r2,4(sp)
802198a8:	e0bfff17 	ldw	r2,-4(fp)
802198ac:	d8800015 	stw	r2,0(sp)
802198b0:	000f883a 	mov	r7,zero
802198b4:	e1bffe17 	ldw	r6,-8(fp)
802198b8:	e17ffd17 	ldw	r5,-12(fp)
802198bc:	e13ffc17 	ldw	r4,-16(fp)
802198c0:	02195980 	call	80219598 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, 0, length, control);
}
802198c4:	e037883a 	mov	sp,fp
802198c8:	dfc00117 	ldw	ra,4(sp)
802198cc:	df000017 	ldw	fp,0(sp)
802198d0:	dec00204 	addi	sp,sp,8
802198d4:	f800283a 	ret

802198d8 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number,
    alt_u8 write_burst_count,
    alt_u16 write_stride)
{
802198d8:	deffee04 	addi	sp,sp,-72
802198dc:	dfc01115 	stw	ra,68(sp)
802198e0:	df001015 	stw	fp,64(sp)
802198e4:	df001004 	addi	fp,sp,64
802198e8:	e13ff915 	stw	r4,-28(fp)
802198ec:	e17ffa15 	stw	r5,-24(fp)
802198f0:	e1bffb15 	stw	r6,-20(fp)
802198f4:	e1fffc15 	stw	r7,-16(fp)
802198f8:	e1000417 	ldw	r4,16(fp)
802198fc:	e0c00517 	ldw	r3,20(fp)
80219900:	e0800617 	ldw	r2,24(fp)
80219904:	e13ffd0d 	sth	r4,-12(fp)
80219908:	e0fffe05 	stb	r3,-8(fp)
8021990c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
80219910:	e0bffd0b 	ldhu	r2,-12(fp)
80219914:	e0fffe03 	ldbu	r3,-8(fp)
80219918:	e13fff0b 	ldhu	r4,-4(fp)
8021991c:	d9000815 	stw	r4,32(sp)
80219920:	d8000715 	stw	zero,28(sp)
80219924:	d8c00615 	stw	r3,24(sp)
80219928:	d8000515 	stw	zero,20(sp)
8021992c:	d8800415 	stw	r2,16(sp)
80219930:	e0800317 	ldw	r2,12(fp)
80219934:	d8800315 	stw	r2,12(sp)
80219938:	e0800217 	ldw	r2,8(fp)
8021993c:	d8800215 	stw	r2,8(sp)
80219940:	e0bffc17 	ldw	r2,-16(fp)
80219944:	d8800115 	stw	r2,4(sp)
80219948:	e0bffb17 	ldw	r2,-20(fp)
8021994c:	d8800015 	stw	r2,0(sp)
80219950:	000f883a 	mov	r7,zero
80219954:	000d883a 	mov	r6,zero
80219958:	e17ffa17 	ldw	r5,-24(fp)
8021995c:	e13ff917 	ldw	r4,-28(fp)
80219960:	021963c0 	call	8021963c <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
            sequence_number, 0, write_burst_count, 0, write_stride);
}
80219964:	e037883a 	mov	sp,fp
80219968:	dfc00117 	ldw	ra,4(sp)
8021996c:	df000017 	ldw	fp,0(sp)
80219970:	dec00204 	addi	sp,sp,8
80219974:	f800283a 	ret

80219978 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
80219978:	deffee04 	addi	sp,sp,-72
8021997c:	dfc01115 	stw	ra,68(sp)
80219980:	df001015 	stw	fp,64(sp)
80219984:	df001004 	addi	fp,sp,64
80219988:	e13ff915 	stw	r4,-28(fp)
8021998c:	e17ffa15 	stw	r5,-24(fp)
80219990:	e1bffb15 	stw	r6,-20(fp)
80219994:	e1fffc15 	stw	r7,-16(fp)
80219998:	e1000417 	ldw	r4,16(fp)
8021999c:	e0c00517 	ldw	r3,20(fp)
802199a0:	e0800617 	ldw	r2,24(fp)
802199a4:	e13ffd0d 	sth	r4,-12(fp)
802199a8:	e0fffe05 	stb	r3,-8(fp)
802199ac:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
802199b0:	e0bffd0b 	ldhu	r2,-12(fp)
802199b4:	e0fffe03 	ldbu	r3,-8(fp)
802199b8:	e13fff0b 	ldhu	r4,-4(fp)
802199bc:	d8000815 	stw	zero,32(sp)
802199c0:	d9000715 	stw	r4,28(sp)
802199c4:	d8000615 	stw	zero,24(sp)
802199c8:	d8c00515 	stw	r3,20(sp)
802199cc:	d8800415 	stw	r2,16(sp)
802199d0:	e0800317 	ldw	r2,12(fp)
802199d4:	d8800315 	stw	r2,12(sp)
802199d8:	e0800217 	ldw	r2,8(fp)
802199dc:	d8800215 	stw	r2,8(sp)
802199e0:	d8000115 	stw	zero,4(sp)
802199e4:	d8000015 	stw	zero,0(sp)
802199e8:	e1fffc17 	ldw	r7,-16(fp)
802199ec:	e1bffb17 	ldw	r6,-20(fp)
802199f0:	e17ffa17 	ldw	r5,-24(fp)
802199f4:	e13ff917 	ldw	r4,-28(fp)
802199f8:	021963c0 	call	8021963c <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, 0, 0, length, control, 
            sequence_number, read_burst_count, 0, read_stride, 0);
}
802199fc:	e037883a 	mov	sp,fp
80219a00:	dfc00117 	ldw	ra,4(sp)
80219a04:	df000017 	ldw	fp,0(sp)
80219a08:	dec00204 	addi	sp,sp,8
80219a0c:	f800283a 	ret

80219a10 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number,
    alt_u8 read_burst_count,
    alt_u8 write_burst_count, 
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80219a10:	deffec04 	addi	sp,sp,-80
80219a14:	dfc01315 	stw	ra,76(sp)
80219a18:	df001215 	stw	fp,72(sp)
80219a1c:	df001204 	addi	fp,sp,72
80219a20:	e13ff715 	stw	r4,-36(fp)
80219a24:	e17ff815 	stw	r5,-32(fp)
80219a28:	e1bff915 	stw	r6,-28(fp)
80219a2c:	e1fffa15 	stw	r7,-24(fp)
80219a30:	e1800617 	ldw	r6,24(fp)
80219a34:	e1400717 	ldw	r5,28(fp)
80219a38:	e1000817 	ldw	r4,32(fp)
80219a3c:	e0c00917 	ldw	r3,36(fp)
80219a40:	e0800a17 	ldw	r2,40(fp)
80219a44:	e1bffb0d 	sth	r6,-20(fp)
80219a48:	e17ffc05 	stb	r5,-16(fp)
80219a4c:	e13ffd05 	stb	r4,-12(fp)
80219a50:	e0fffe0d 	sth	r3,-8(fp)
80219a54:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
80219a58:	e0bffb0b 	ldhu	r2,-20(fp)
80219a5c:	e0fffc03 	ldbu	r3,-16(fp)
80219a60:	e13ffd03 	ldbu	r4,-12(fp)
80219a64:	e17ffe0b 	ldhu	r5,-8(fp)
80219a68:	e1bfff0b 	ldhu	r6,-4(fp)
80219a6c:	d9800815 	stw	r6,32(sp)
80219a70:	d9400715 	stw	r5,28(sp)
80219a74:	d9000615 	stw	r4,24(sp)
80219a78:	d8c00515 	stw	r3,20(sp)
80219a7c:	d8800415 	stw	r2,16(sp)
80219a80:	e0800517 	ldw	r2,20(fp)
80219a84:	d8800315 	stw	r2,12(sp)
80219a88:	e0800417 	ldw	r2,16(fp)
80219a8c:	d8800215 	stw	r2,8(sp)
80219a90:	e0800317 	ldw	r2,12(fp)
80219a94:	d8800115 	stw	r2,4(sp)
80219a98:	e0800217 	ldw	r2,8(fp)
80219a9c:	d8800015 	stw	r2,0(sp)
80219aa0:	e1fffa17 	ldw	r7,-24(fp)
80219aa4:	e1bff917 	ldw	r6,-28(fp)
80219aa8:	e17ff817 	ldw	r5,-32(fp)
80219aac:	e13ff717 	ldw	r4,-36(fp)
80219ab0:	021963c0 	call	8021963c <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
            write_address_low, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
80219ab4:	e037883a 	mov	sp,fp
80219ab8:	dfc00117 	ldw	ra,4(sp)
80219abc:	df000017 	ldw	fp,0(sp)
80219ac0:	dec00204 	addi	sp,sp,8
80219ac4:	f800283a 	ret

80219ac8 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
    alt_msgdma_prefetcher_standard_descriptor** list,
    alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
80219ac8:	defffc04 	addi	sp,sp,-16
80219acc:	df000315 	stw	fp,12(sp)
80219ad0:	df000304 	addi	fp,sp,12
80219ad4:	e13ffe15 	stw	r4,-8(fp)
80219ad8:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    
    if (descriptor == NULL)
80219adc:	e0bfff17 	ldw	r2,-4(fp)
80219ae0:	1000021e 	bne	r2,zero,80219aec <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
80219ae4:	00bffa84 	movi	r2,-22
80219ae8:	00002f06 	br	80219ba8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (descriptor->next_desc_ptr != (alt_u32)descriptor)
80219aec:	e0bfff17 	ldw	r2,-4(fp)
80219af0:	10c00317 	ldw	r3,12(r2)
80219af4:	e0bfff17 	ldw	r2,-4(fp)
80219af8:	18800226 	beq	r3,r2,80219b04 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
80219afc:	00bffa84 	movi	r2,-22
80219b00:	00002906 	br	80219ba8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == NULL)
80219b04:	e0bffe17 	ldw	r2,-8(fp)
80219b08:	10800017 	ldw	r2,0(r2)
80219b0c:	1000051e 	bne	r2,zero,80219b24 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
    {
        *list = descriptor;  /* make this root-node if list is empty */
80219b10:	e0bffe17 	ldw	r2,-8(fp)
80219b14:	e0ffff17 	ldw	r3,-4(fp)
80219b18:	10c00015 	stw	r3,0(r2)
        return 0;  /* successfully added */
80219b1c:	0005883a 	mov	r2,zero
80219b20:	00002106 	br	80219ba8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == descriptor)
80219b24:	e0bffe17 	ldw	r2,-8(fp)
80219b28:	10c00017 	ldw	r3,0(r2)
80219b2c:	e0bfff17 	ldw	r2,-4(fp)
80219b30:	1880021e 	bne	r3,r2,80219b3c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
80219b34:	00bffa84 	movi	r2,-22
80219b38:	00001b06 	br	80219ba8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
80219b3c:	e0bffe17 	ldw	r2,-8(fp)
80219b40:	10800017 	ldw	r2,0(r2)
80219b44:	e0bffd15 	stw	r2,-12(fp)
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
80219b48:	00000906 	br	80219b70 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
80219b4c:	e0bffd17 	ldw	r2,-12(fp)
80219b50:	10c00317 	ldw	r3,12(r2)
80219b54:	e0bfff17 	ldw	r2,-4(fp)
80219b58:	1880021e 	bne	r3,r2,80219b64 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
80219b5c:	00bffa84 	movi	r2,-22
80219b60:	00001106 	br	80219ba8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
80219b64:	e0bffd17 	ldw	r2,-12(fp)
80219b68:	10800317 	ldw	r2,12(r2)
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        last_descr_ptr = 
80219b6c:	e0bffd15 	stw	r2,-12(fp)
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
80219b70:	e0bffd17 	ldw	r2,-12(fp)
80219b74:	10800317 	ldw	r2,12(r2)
80219b78:	e0fffe17 	ldw	r3,-8(fp)
80219b7c:	18c00017 	ldw	r3,0(r3)
80219b80:	10fff21e 	bne	r2,r3,80219b4c <__reset+0xfa1f9b4c>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
    }
    /* add this descriptor to end of list */
    last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
80219b84:	e0ffff17 	ldw	r3,-4(fp)
80219b88:	e0bffd17 	ldw	r2,-12(fp)
80219b8c:	10c00315 	stw	r3,12(r2)
    /* ensure new last pointer points the start of the list */
    descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
80219b90:	e0bffe17 	ldw	r2,-8(fp)
80219b94:	10800017 	ldw	r2,0(r2)
80219b98:	1007883a 	mov	r3,r2
80219b9c:	e0bfff17 	ldw	r2,-4(fp)
80219ba0:	10c00315 	stw	r3,12(r2)
    return 0; /* successfully added */
80219ba4:	0005883a 	mov	r2,zero
}
80219ba8:	e037883a 	mov	sp,fp
80219bac:	df000017 	ldw	fp,0(sp)
80219bb0:	dec00104 	addi	sp,sp,4
80219bb4:	f800283a 	ret

80219bb8 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
    alt_msgdma_prefetcher_extended_descriptor** list,
    alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
80219bb8:	defff804 	addi	sp,sp,-32
80219bbc:	df000715 	stw	fp,28(sp)
80219bc0:	df000704 	addi	fp,sp,28
80219bc4:	e13ffe15 	stw	r4,-8(fp)
80219bc8:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    msgdma_addr64 root_node_addr, next_node_addr;
    
    if (descriptor == NULL)
80219bcc:	e13fff17 	ldw	r4,-4(fp)
80219bd0:	2000021e 	bne	r4,zero,80219bdc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
80219bd4:	00bffa84 	movi	r2,-22
80219bd8:	00005906 	br	80219d40 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
80219bdc:	e13fff17 	ldw	r4,-4(fp)
80219be0:	2015883a 	mov	r10,r4
80219be4:	0017883a 	mov	r11,zero
80219be8:	e2bffc15 	stw	r10,-16(fp)
80219bec:	e2fffd15 	stw	r11,-12(fp)
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
80219bf0:	e13fff17 	ldw	r4,-4(fp)
80219bf4:	21400317 	ldw	r5,12(r4)
80219bf8:	e13ffc17 	ldw	r4,-16(fp)
80219bfc:	2900041e 	bne	r5,r4,80219c10 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
80219c00:	e13fff17 	ldw	r4,-4(fp)
80219c04:	21400b17 	ldw	r5,44(r4)
80219c08:	e13ffd17 	ldw	r4,-12(fp)
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
80219c0c:	29000226 	beq	r5,r4,80219c18 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
80219c10:	00bffa84 	movi	r2,-22
80219c14:	00004a06 	br	80219d40 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    if (*list == NULL)
80219c18:	e13ffe17 	ldw	r4,-8(fp)
80219c1c:	21000017 	ldw	r4,0(r4)
80219c20:	2000051e 	bne	r4,zero,80219c38 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
    {
        *list = descriptor;  /* make this the root-node if list is empty */
80219c24:	e0bffe17 	ldw	r2,-8(fp)
80219c28:	e0ffff17 	ldw	r3,-4(fp)
80219c2c:	10c00015 	stw	r3,0(r2)
        return 0;
80219c30:	0005883a 	mov	r2,zero
80219c34:	00004206 	br	80219d40 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    if (*list == descriptor)
80219c38:	e13ffe17 	ldw	r4,-8(fp)
80219c3c:	21400017 	ldw	r5,0(r4)
80219c40:	e13fff17 	ldw	r4,-4(fp)
80219c44:	2900021e 	bne	r5,r4,80219c50 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
80219c48:	00bffa84 	movi	r2,-22
80219c4c:	00003c06 	br	80219d40 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
80219c50:	e13ffe17 	ldw	r4,-8(fp)
80219c54:	21000017 	ldw	r4,0(r4)
80219c58:	e13ff915 	stw	r4,-28(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
80219c5c:	e13ffe17 	ldw	r4,-8(fp)
80219c60:	21000017 	ldw	r4,0(r4)
80219c64:	2011883a 	mov	r8,r4
80219c68:	0013883a 	mov	r9,zero
80219c6c:	e23ffa15 	stw	r8,-24(fp)
80219c70:	e27ffb15 	stw	r9,-20(fp)
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80219c74:	00001806 	br	80219cd8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* first check if descriptor already in the list */
        next_node_addr.u64 = (uintptr_t)descriptor;
80219c78:	e13fff17 	ldw	r4,-4(fp)
80219c7c:	200d883a 	mov	r6,r4
80219c80:	000f883a 	mov	r7,zero
80219c84:	e1bffc15 	stw	r6,-16(fp)
80219c88:	e1fffd15 	stw	r7,-12(fp)
        if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
80219c8c:	e13ff917 	ldw	r4,-28(fp)
80219c90:	21400317 	ldw	r5,12(r4)
80219c94:	e13ffc17 	ldw	r4,-16(fp)
80219c98:	2900061e 	bne	r5,r4,80219cb4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
            && (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
80219c9c:	e13ff917 	ldw	r4,-28(fp)
80219ca0:	21400b17 	ldw	r5,44(r4)
80219ca4:	e13ffd17 	ldw	r4,-12(fp)
80219ca8:	2900021e 	bne	r5,r4,80219cb4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
80219cac:	00bffa84 	movi	r2,-22
80219cb0:	00002306 	br	80219d40 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
80219cb4:	e13ff917 	ldw	r4,-28(fp)
80219cb8:	21000317 	ldw	r4,12(r4)
80219cbc:	e13ffc15 	stw	r4,-16(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
80219cc0:	e13ff917 	ldw	r4,-28(fp)
80219cc4:	21000b17 	ldw	r4,44(r4)
80219cc8:	e13ffd15 	stw	r4,-12(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
80219ccc:	e13ffc17 	ldw	r4,-16(fp)
80219cd0:	e17ffd17 	ldw	r5,-12(fp)
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
80219cd4:	e13ff915 	stw	r4,-28(fp)
    last_descr_ptr = *list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80219cd8:	e13ff917 	ldw	r4,-28(fp)
80219cdc:	21400317 	ldw	r5,12(r4)
80219ce0:	e13ffa17 	ldw	r4,-24(fp)
80219ce4:	293fe41e 	bne	r5,r4,80219c78 <__reset+0xfa1f9c78>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
80219ce8:	e13ff917 	ldw	r4,-28(fp)
80219cec:	21400b17 	ldw	r5,44(r4)
80219cf0:	e13ffb17 	ldw	r4,-20(fp)
80219cf4:	293fe01e 	bne	r5,r4,80219c78 <__reset+0xfa1f9c78>
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
    }
    /* add this descriptor to end of list */
    next_node_addr.u64 = (uintptr_t)descriptor;
80219cf8:	e13fff17 	ldw	r4,-4(fp)
80219cfc:	2005883a 	mov	r2,r4
80219d00:	0007883a 	mov	r3,zero
80219d04:	e0bffc15 	stw	r2,-16(fp)
80219d08:	e0fffd15 	stw	r3,-12(fp)
    last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
80219d0c:	e0fffc17 	ldw	r3,-16(fp)
80219d10:	e0bff917 	ldw	r2,-28(fp)
80219d14:	10c00315 	stw	r3,12(r2)
    last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
80219d18:	e0fffd17 	ldw	r3,-12(fp)
80219d1c:	e0bff917 	ldw	r2,-28(fp)
80219d20:	10c00b15 	stw	r3,44(r2)
    /* ensure new last pointer points the beginning of the list */
    descriptor->next_desc_ptr_low = root_node_addr.u32[0];
80219d24:	e0fffa17 	ldw	r3,-24(fp)
80219d28:	e0bfff17 	ldw	r2,-4(fp)
80219d2c:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = root_node_addr.u32[1];
80219d30:	e0fffb17 	ldw	r3,-20(fp)
80219d34:	e0bfff17 	ldw	r2,-4(fp)
80219d38:	10c00b15 	stw	r3,44(r2)
    return 0;
80219d3c:	0005883a 	mov	r2,zero
}
80219d40:	e037883a 	mov	sp,fp
80219d44:	df000017 	ldw	fp,0(sp)
80219d48:	dec00104 	addi	sp,sp,4
80219d4c:	f800283a 	ret

80219d50 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 */ 
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)    
{
80219d50:	defff804 	addi	sp,sp,-32
80219d54:	dfc00715 	stw	ra,28(sp)
80219d58:	df000615 	stw	fp,24(sp)
80219d5c:	df000604 	addi	fp,sp,24
80219d60:	e13ffd15 	stw	r4,-12(fp)
80219d64:	2807883a 	mov	r3,r5
80219d68:	3005883a 	mov	r2,r6
80219d6c:	e0fffe05 	stb	r3,-8(fp)
80219d70:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 descriptor_control_field = 0;
80219d74:	e03ffc15 	stw	zero,-16(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
80219d78:	e03ffb15 	stw	zero,-20(fp)
    
    if (list == NULL)
80219d7c:	e0bffd17 	ldw	r2,-12(fp)
80219d80:	1000021e 	bne	r2,zero,80219d8c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x3c>
    {
        return -EINVAL;  /* this list cannot be empty */
80219d84:	00bffa84 	movi	r2,-22
80219d88:	00002f06 	br	80219e48 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf8>
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
80219d8c:	e0bffd17 	ldw	r2,-12(fp)
80219d90:	e0bffa15 	stw	r2,-24(fp)
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
80219d94:	00000d06 	br	80219dcc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x7c>
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
80219d98:	e0bffa17 	ldw	r2,-24(fp)
80219d9c:	10800717 	ldw	r2,28(r2)
80219da0:	e0bffc15 	stw	r2,-16(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
80219da4:	e0bffc17 	ldw	r2,-16(fp)
80219da8:	10d00034 	orhi	r3,r2,16384
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
80219dac:	e0bffa17 	ldw	r2,-24(fp)
80219db0:	10c00715 	stw	r3,28(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
80219db4:	e0bffa17 	ldw	r2,-24(fp)
80219db8:	10800317 	ldw	r2,12(r2)
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
80219dbc:	e0bffa15 	stw	r2,-24(fp)
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
80219dc0:	e0bffb17 	ldw	r2,-20(fp)
80219dc4:	10800044 	addi	r2,r2,1
80219dc8:	e0bffb15 	stw	r2,-20(fp)
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
80219dcc:	e0bffa17 	ldw	r2,-24(fp)
80219dd0:	10c00317 	ldw	r3,12(r2)
80219dd4:	e0bffd17 	ldw	r2,-12(fp)
80219dd8:	18bfef1e 	bne	r3,r2,80219d98 <__reset+0xfa1f9d98>
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
80219ddc:	e0bffa17 	ldw	r2,-24(fp)
80219de0:	10800717 	ldw	r2,28(r2)
80219de4:	e0bffc15 	stw	r2,-16(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
80219de8:	e0bffe03 	ldbu	r2,-8(fp)
80219dec:	10000726 	beq	r2,zero,80219e0c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xbc>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
80219df0:	e0fffc17 	ldw	r3,-16(fp)
80219df4:	00b00034 	movhi	r2,49152
80219df8:	10bfffc4 	addi	r2,r2,-1
80219dfc:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
80219e00:	e0bffa17 	ldw	r2,-24(fp)
80219e04:	10c00715 	stw	r3,28(r2)
80219e08:	00000406 	br	80219e1c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xcc>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
80219e0c:	e0bffc17 	ldw	r2,-16(fp)
80219e10:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
80219e14:	e0bffa17 	ldw	r2,-24(fp)
80219e18:	10c00715 	stw	r3,28(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
80219e1c:	e0bffb17 	ldw	r2,-20(fp)
80219e20:	10800044 	addi	r2,r2,1
80219e24:	e0bffb15 	stw	r2,-20(fp)
    
    if (dcache_flush_desc_list)
80219e28:	e0bfff03 	ldbu	r2,-4(fp)
80219e2c:	10000526 	beq	r2,zero,80219e44 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf4>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_standard_descriptor) * descriptor_count);
80219e30:	e0bffb17 	ldw	r2,-20(fp)
80219e34:	1004917a 	slli	r2,r2,5
80219e38:	100b883a 	mov	r5,r2
80219e3c:	e13ffd17 	ldw	r4,-12(fp)
80219e40:	021a7ec0 	call	8021a7ec <alt_dcache_flush>
    }
    
    return 0;
80219e44:	0005883a 	mov	r2,zero
}
80219e48:	e037883a 	mov	sp,fp
80219e4c:	dfc00117 	ldw	ra,4(sp)
80219e50:	df000017 	ldw	fp,0(sp)
80219e54:	dec00204 	addi	sp,sp,8
80219e58:	f800283a 	ret

80219e5c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 */    
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list) 
{    
80219e5c:	defff404 	addi	sp,sp,-48
80219e60:	dfc00b15 	stw	ra,44(sp)
80219e64:	df000a15 	stw	fp,40(sp)
80219e68:	df000a04 	addi	fp,sp,40
80219e6c:	e13ffd15 	stw	r4,-12(fp)
80219e70:	3009883a 	mov	r4,r6
80219e74:	e17ffe05 	stb	r5,-8(fp)
80219e78:	e13fff05 	stb	r4,-4(fp)
    alt_u32 descriptor_control_field = 0;
80219e7c:	e03ff815 	stw	zero,-32(fp)
    msgdma_addr64 root_node_addr, next_node_addr;
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
80219e80:	e03ff715 	stw	zero,-36(fp)
    
    if (list == NULL)
80219e84:	e13ffd17 	ldw	r4,-12(fp)
80219e88:	2000021e 	bne	r4,zero,80219e94 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x38>
    {
        return -EINVAL;  /* this list cannot be empty */
80219e8c:	00bffa84 	movi	r2,-22
80219e90:	00003e06 	br	80219f8c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x130>
    }
    
    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
80219e94:	e13ffd17 	ldw	r4,-12(fp)
80219e98:	e13ff615 	stw	r4,-40(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;
80219e9c:	e13ffd17 	ldw	r4,-12(fp)
80219ea0:	2005883a 	mov	r2,r4
80219ea4:	0007883a 	mov	r3,zero
80219ea8:	e0bff915 	stw	r2,-28(fp)
80219eac:	e0fffa15 	stw	r3,-24(fp)

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80219eb0:	00001306 	br	80219f00 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
80219eb4:	e0bff617 	ldw	r2,-40(fp)
80219eb8:	10800f17 	ldw	r2,60(r2)
80219ebc:	e0bff815 	stw	r2,-32(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
80219ec0:	e0bff817 	ldw	r2,-32(fp)
80219ec4:	10d00034 	orhi	r3,r2,16384
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
80219ec8:	e0bff617 	ldw	r2,-40(fp)
80219ecc:	10c00f15 	stw	r3,60(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
80219ed0:	e0bff617 	ldw	r2,-40(fp)
80219ed4:	10800317 	ldw	r2,12(r2)
80219ed8:	e0bffb15 	stw	r2,-20(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
80219edc:	e0bff617 	ldw	r2,-40(fp)
80219ee0:	10800b17 	ldw	r2,44(r2)
80219ee4:	e0bffc15 	stw	r2,-16(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
80219ee8:	e0bffb17 	ldw	r2,-20(fp)
80219eec:	e0fffc17 	ldw	r3,-16(fp)
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
80219ef0:	e0bff615 	stw	r2,-40(fp)
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
80219ef4:	e0bff717 	ldw	r2,-36(fp)
80219ef8:	10800044 	addi	r2,r2,1
80219efc:	e0bff715 	stw	r2,-36(fp)
    last_descr_ptr = list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80219f00:	e0bff617 	ldw	r2,-40(fp)
80219f04:	10c00317 	ldw	r3,12(r2)
80219f08:	e0bff917 	ldw	r2,-28(fp)
80219f0c:	18bfe91e 	bne	r3,r2,80219eb4 <__reset+0xfa1f9eb4>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
80219f10:	e0bff617 	ldw	r2,-40(fp)
80219f14:	10c00b17 	ldw	r3,44(r2)
80219f18:	e0bffa17 	ldw	r2,-24(fp)
80219f1c:	18bfe51e 	bne	r3,r2,80219eb4 <__reset+0xfa1f9eb4>
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
80219f20:	e0bff617 	ldw	r2,-40(fp)
80219f24:	10800f17 	ldw	r2,60(r2)
80219f28:	e0bff815 	stw	r2,-32(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
80219f2c:	e0bffe03 	ldbu	r2,-8(fp)
80219f30:	10000726 	beq	r2,zero,80219f50 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xf4>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
80219f34:	e0fff817 	ldw	r3,-32(fp)
80219f38:	00b00034 	movhi	r2,49152
80219f3c:	10bfffc4 	addi	r2,r2,-1
80219f40:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
80219f44:	e0bff617 	ldw	r2,-40(fp)
80219f48:	10c00f15 	stw	r3,60(r2)
80219f4c:	00000406 	br	80219f60 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x104>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
80219f50:	e0bff817 	ldw	r2,-32(fp)
80219f54:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
80219f58:	e0bff617 	ldw	r2,-40(fp)
80219f5c:	10c00f15 	stw	r3,60(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
80219f60:	e0bff717 	ldw	r2,-36(fp)
80219f64:	10800044 	addi	r2,r2,1
80219f68:	e0bff715 	stw	r2,-36(fp)
    
    if (dcache_flush_desc_list)
80219f6c:	e0bfff03 	ldbu	r2,-4(fp)
80219f70:	10000526 	beq	r2,zero,80219f88 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x12c>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_extended_descriptor) * descriptor_count);        
80219f74:	e0bff717 	ldw	r2,-36(fp)
80219f78:	100491ba 	slli	r2,r2,6
80219f7c:	100b883a 	mov	r5,r2
80219f80:	e13ffd17 	ldw	r4,-12(fp)
80219f84:	021a7ec0 	call	8021a7ec <alt_dcache_flush>
    }
    
    return 0;
80219f88:	0005883a 	mov	r2,zero
}
80219f8c:	e037883a 	mov	sp,fp
80219f90:	dfc00117 	ldw	ra,4(sp)
80219f94:	df000017 	ldw	fp,0(sp)
80219f98:	dec00204 	addi	sp,sp,8
80219f9c:	f800283a 	ret

80219fa0 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
    alt_msgdma_dev *dev,
    alt_u64  list_addr,
    alt_u8 park_mode_en,
    alt_u8 poll_en)
{
80219fa0:	deffef04 	addi	sp,sp,-68
80219fa4:	df001015 	stw	fp,64(sp)
80219fa8:	df001004 	addi	fp,sp,64
80219fac:	e13ffb15 	stw	r4,-20(fp)
80219fb0:	e17ffc15 	stw	r5,-16(fp)
80219fb4:	e1bffd15 	stw	r6,-12(fp)
80219fb8:	3807883a 	mov	r3,r7
80219fbc:	e0800117 	ldw	r2,4(fp)
80219fc0:	e0fffe05 	stb	r3,-8(fp)
80219fc4:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 prefetcher_ctl = 0;
80219fc8:	e03ff015 	stw	zero,-64(fp)
    alt_u32 dispatcher_ctl = 0;
80219fcc:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
80219fd0:	e03ff215 	stw	zero,-56(fp)
    
    /* use helper struct to get easy access to hi/low address */
    msgdma_addr64 root_node_addr;
    root_node_addr.u64 = list_addr;  
80219fd4:	e0bffc17 	ldw	r2,-16(fp)
80219fd8:	e0bff915 	stw	r2,-28(fp)
80219fdc:	e0bffd17 	ldw	r2,-12(fp)
80219fe0:	e0bffa15 	stw	r2,-24(fp)
     * semaphore. This ensures that accessing registers is thread-safe.
     */
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* case where prefetcher already started, return busy error */ 
    prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
80219fe4:	e0bffb17 	ldw	r2,-20(fp)
80219fe8:	10800617 	ldw	r2,24(r2)
80219fec:	10800037 	ldwio	r2,0(r2)
80219ff0:	e0bff015 	stw	r2,-64(fp)
    if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
80219ff4:	e0bff017 	ldw	r2,-64(fp)
80219ff8:	1080004c 	andi	r2,r2,1
80219ffc:	10000226 	beq	r2,zero,8021a008 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
        /* release the registers semaphore */
        ALT_SEM_POST (dev->regs_lock);
        return -EBUSY;
8021a000:	00bffc04 	movi	r2,-16
8021a004:	00009206 	br	8021a250 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
    }
        
    /* Stop the msgdma dispatcher from issuing more descriptors to the
       read or write masters  */
    /* stop issuing more descriptors */
    dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8021a008:	00800804 	movi	r2,32
8021a00c:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021a010:	0005303a 	rdctl	r2,status
8021a014:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021a018:	e0fff517 	ldw	r3,-44(fp)
8021a01c:	00bfff84 	movi	r2,-2
8021a020:	1884703a 	and	r2,r3,r2
8021a024:	1001703a 	wrctl	status,r2
  
  return context;
8021a028:	e0bff517 	ldw	r2,-44(fp)
    
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8021a02c:	e0bff215 	stw	r2,-56(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8021a030:	e0bffb17 	ldw	r2,-20(fp)
8021a034:	10800317 	ldw	r2,12(r2)
8021a038:	10800104 	addi	r2,r2,4
8021a03c:	e0fff117 	ldw	r3,-60(fp)
8021a040:	10c00035 	stwio	r3,0(r2)
    /*
     * Clear any (previous) status register information
     * that might occlude our error checking later.
     */
    IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
8021a044:	e0bffb17 	ldw	r2,-20(fp)
8021a048:	10800317 	ldw	r2,12(r2)
8021a04c:	e0fffb17 	ldw	r3,-20(fp)
8021a050:	18c00317 	ldw	r3,12(r3)
8021a054:	18c00037 	ldwio	r3,0(r3)
8021a058:	10c00035 	stwio	r3,0(r2)
8021a05c:	e0bff217 	ldw	r2,-56(fp)
8021a060:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021a064:	e0bff317 	ldw	r2,-52(fp)
8021a068:	1001703a 	wrctl	status,r2
     * If a callback routine has been previously registered which will be
     * called from the msgdma ISR. Set up dispatcher to:
     *  - Run
     *  - Stop on an error with any particular descriptor
     */
    if(dev->callback)
8021a06c:	e0bffb17 	ldw	r2,-20(fp)
8021a070:	10800b17 	ldw	r2,44(r2)
8021a074:	10002326 	beq	r2,zero,8021a104 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
    {
        dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
8021a078:	e0bffb17 	ldw	r2,-20(fp)
8021a07c:	10c00d17 	ldw	r3,52(r2)
8021a080:	e0bff117 	ldw	r2,-60(fp)
8021a084:	1884b03a 	or	r2,r3,r2
8021a088:	10800514 	ori	r2,r2,20
8021a08c:	e0bff115 	stw	r2,-60(fp)
                | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8021a090:	e0fff117 	ldw	r3,-60(fp)
8021a094:	00bff7c4 	movi	r2,-33
8021a098:	1884703a 	and	r2,r3,r2
8021a09c:	e0bff115 	stw	r2,-60(fp)
        
        prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8021a0a0:	e0bff017 	ldw	r2,-64(fp)
8021a0a4:	10800214 	ori	r2,r2,8
8021a0a8:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021a0ac:	0005303a 	rdctl	r2,status
8021a0b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021a0b4:	e0fff717 	ldw	r3,-36(fp)
8021a0b8:	00bfff84 	movi	r2,-2
8021a0bc:	1884703a 	and	r2,r3,r2
8021a0c0:	1001703a 	wrctl	status,r2
  
  return context;
8021a0c4:	e0bff717 	ldw	r2,-36(fp)
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
8021a0c8:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8021a0cc:	e0bffb17 	ldw	r2,-20(fp)
8021a0d0:	10800317 	ldw	r2,12(r2)
8021a0d4:	10800104 	addi	r2,r2,4
8021a0d8:	e0fff117 	ldw	r3,-60(fp)
8021a0dc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8021a0e0:	e0bffb17 	ldw	r2,-20(fp)
8021a0e4:	10800617 	ldw	r2,24(r2)
8021a0e8:	e0fff017 	ldw	r3,-64(fp)
8021a0ec:	10c00035 	stwio	r3,0(r2)
8021a0f0:	e0bff217 	ldw	r2,-56(fp)
8021a0f4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021a0f8:	e0bff417 	ldw	r2,-48(fp)
8021a0fc:	1001703a 	wrctl	status,r2
8021a100:	00002306 	br	8021a190 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
      *   - Stop on an error with any particular descriptor
      *   - Disable interrupt generation
      */
     else
     {
         dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
8021a104:	e0bffb17 	ldw	r2,-20(fp)
8021a108:	10c00d17 	ldw	r3,52(r2)
8021a10c:	e0bff117 	ldw	r2,-60(fp)
8021a110:	1884b03a 	or	r2,r3,r2
8021a114:	10800114 	ori	r2,r2,4
8021a118:	e0bff115 	stw	r2,-60(fp)
         dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
8021a11c:	e0fff117 	ldw	r3,-60(fp)
8021a120:	00bff3c4 	movi	r2,-49
8021a124:	1884703a 	and	r2,r3,r2
8021a128:	e0bff115 	stw	r2,-60(fp)
                 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
8021a12c:	e0fff017 	ldw	r3,-64(fp)
8021a130:	00bffdc4 	movi	r2,-9
8021a134:	1884703a 	and	r2,r3,r2
8021a138:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021a13c:	0005303a 	rdctl	r2,status
8021a140:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021a144:	e0fff817 	ldw	r3,-32(fp)
8021a148:	00bfff84 	movi	r2,-2
8021a14c:	1884703a 	and	r2,r3,r2
8021a150:	1001703a 	wrctl	status,r2
  
  return context;
8021a154:	e0bff817 	ldw	r2,-32(fp)
         /* making sure the read-modify-write below can't be pre-empted */
         context = alt_irq_disable_all();
8021a158:	e0bff215 	stw	r2,-56(fp)
         IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8021a15c:	e0bffb17 	ldw	r2,-20(fp)
8021a160:	10800317 	ldw	r2,12(r2)
8021a164:	10800104 	addi	r2,r2,4
8021a168:	e0fff117 	ldw	r3,-60(fp)
8021a16c:	10c00035 	stwio	r3,0(r2)
         IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8021a170:	e0bffb17 	ldw	r2,-20(fp)
8021a174:	10800617 	ldw	r2,24(r2)
8021a178:	e0fff017 	ldw	r3,-64(fp)
8021a17c:	10c00035 	stwio	r3,0(r2)
8021a180:	e0bff217 	ldw	r2,-56(fp)
8021a184:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021a188:	e0bff617 	ldw	r2,-40(fp)
8021a18c:	1001703a 	wrctl	status,r2
         alt_irq_enable_all(context);
     }   
    
     /* set next descriptor registers to point to the list root-node */
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
8021a190:	e0bffb17 	ldw	r2,-20(fp)
8021a194:	10800617 	ldw	r2,24(r2)
8021a198:	10800104 	addi	r2,r2,4
8021a19c:	e0fff917 	ldw	r3,-28(fp)
8021a1a0:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[0]);
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
8021a1a4:	e0bffb17 	ldw	r2,-20(fp)
8021a1a8:	10800617 	ldw	r2,24(r2)
8021a1ac:	10800204 	addi	r2,r2,8
8021a1b0:	e0fffa17 	ldw	r3,-24(fp)
8021a1b4:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[1]);
        
     /* set park-mode */
     if (park_mode_en){
8021a1b8:	e0bffe03 	ldbu	r2,-8(fp)
8021a1bc:	10000426 	beq	r2,zero,8021a1d0 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
8021a1c0:	e0bff017 	ldw	r2,-64(fp)
8021a1c4:	10800414 	ori	r2,r2,16
8021a1c8:	e0bff015 	stw	r2,-64(fp)
8021a1cc:	00000406 	br	8021a1e0 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
8021a1d0:	e0fff017 	ldw	r3,-64(fp)
8021a1d4:	00bffbc4 	movi	r2,-17
8021a1d8:	1884703a 	and	r2,r3,r2
8021a1dc:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set poll-en */
     if (poll_en){
8021a1e0:	e0bfff03 	ldbu	r2,-4(fp)
8021a1e4:	10000e26 	beq	r2,zero,8021a220 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
8021a1e8:	e0bff017 	ldw	r2,-64(fp)
8021a1ec:	10800094 	ori	r2,r2,2
8021a1f0:	e0bff015 	stw	r2,-64(fp)
         if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8021a1f4:	e0bffb17 	ldw	r2,-20(fp)
8021a1f8:	10800617 	ldw	r2,24(r2)
8021a1fc:	10800304 	addi	r2,r2,12
8021a200:	10800037 	ldwio	r2,0(r2)
8021a204:	10000a1e 	bne	r2,zero,8021a230 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                 dev->prefetcher_base) == 0){
             /* set poll frequency to some non-zero default value */
             IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8021a208:	e0bffb17 	ldw	r2,-20(fp)
8021a20c:	10800617 	ldw	r2,24(r2)
8021a210:	10800304 	addi	r2,r2,12
8021a214:	00c03fc4 	movi	r3,255
8021a218:	10c00035 	stwio	r3,0(r2)
8021a21c:	00000406 	br	8021a230 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                     dev->prefetcher_base, 0xFF);
         }
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
8021a220:	e0fff017 	ldw	r3,-64(fp)
8021a224:	00bfff44 	movi	r2,-3
8021a228:	1884703a 	and	r2,r3,r2
8021a22c:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set the prefetcher run bit */
     prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
8021a230:	e0bff017 	ldw	r2,-64(fp)
8021a234:	10800054 	ori	r2,r2,1
8021a238:	e0bff015 	stw	r2,-64(fp)
     /* start the dma since run bit is set */
     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8021a23c:	e0bffb17 	ldw	r2,-20(fp)
8021a240:	10800617 	ldw	r2,24(r2)
8021a244:	e0fff017 	ldw	r3,-64(fp)
8021a248:	10c00035 	stwio	r3,0(r2)
      * Now that access to the registers is complete, release the registers
      * semaphore so that other threads can access the registers.
      */
     ALT_SEM_POST (dev->regs_lock);
     
     return 0;
8021a24c:	0005883a 	mov	r2,zero
}
8021a250:	e037883a 	mov	sp,fp
8021a254:	df000017 	ldw	fp,0(sp)
8021a258:	dec00104 	addi	sp,sp,4
8021a25c:	f800283a 	ret

8021a260 <alt_msgdma_start_prefetcher_with_std_desc_list>:
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{    
8021a260:	defff504 	addi	sp,sp,-44
8021a264:	dfc00a15 	stw	ra,40(sp)
8021a268:	df000915 	stw	fp,36(sp)
8021a26c:	dc400815 	stw	r17,32(sp)
8021a270:	dc000715 	stw	r16,28(sp)
8021a274:	df000904 	addi	fp,sp,36
8021a278:	e13ff815 	stw	r4,-32(fp)
8021a27c:	e17ff915 	stw	r5,-28(fp)
8021a280:	300b883a 	mov	r5,r6
8021a284:	3809883a 	mov	r4,r7
8021a288:	e0c00217 	ldw	r3,8(fp)
8021a28c:	e0800317 	ldw	r2,12(fp)
8021a290:	e17ffa05 	stb	r5,-24(fp)
8021a294:	e13ffb05 	stb	r4,-20(fp)
8021a298:	e0fffc05 	stb	r3,-16(fp)
8021a29c:	e0bffd05 	stb	r2,-12(fp)
    if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
8021a2a0:	e0bffc03 	ldbu	r2,-16(fp)
8021a2a4:	e0fffd03 	ldbu	r3,-12(fp)
8021a2a8:	180d883a 	mov	r6,r3
8021a2ac:	100b883a 	mov	r5,r2
8021a2b0:	e13ff917 	ldw	r4,-28(fp)
8021a2b4:	0219d500 	call	80219d50 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
8021a2b8:	10000226 	beq	r2,zero,8021a2c4 <alt_msgdma_start_prefetcher_with_std_desc_list+0x64>
    {
        return -EINVAL;
8021a2bc:	00bffa84 	movi	r2,-22
8021a2c0:	00000b06 	br	8021a2f0 <alt_msgdma_start_prefetcher_with_std_desc_list+0x90>
    }

    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
8021a2c4:	e0bff917 	ldw	r2,-28(fp)
8021a2c8:	1021883a 	mov	r16,r2
8021a2cc:	0023883a 	mov	r17,zero
8021a2d0:	e0fffa03 	ldbu	r3,-24(fp)
8021a2d4:	e0bffb03 	ldbu	r2,-20(fp)
8021a2d8:	d8800015 	stw	r2,0(sp)
8021a2dc:	180f883a 	mov	r7,r3
8021a2e0:	800b883a 	mov	r5,r16
8021a2e4:	880d883a 	mov	r6,r17
8021a2e8:	e13ff817 	ldw	r4,-32(fp)
8021a2ec:	0219fa00 	call	80219fa0 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
8021a2f0:	e6fffe04 	addi	sp,fp,-8
8021a2f4:	dfc00317 	ldw	ra,12(sp)
8021a2f8:	df000217 	ldw	fp,8(sp)
8021a2fc:	dc400117 	ldw	r17,4(sp)
8021a300:	dc000017 	ldw	r16,0(sp)
8021a304:	dec00404 	addi	sp,sp,16
8021a308:	f800283a 	ret

8021a30c <alt_msgdma_start_prefetcher_with_extd_desc_list>:
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{
8021a30c:	defff504 	addi	sp,sp,-44
8021a310:	dfc00a15 	stw	ra,40(sp)
8021a314:	df000915 	stw	fp,36(sp)
8021a318:	dc400815 	stw	r17,32(sp)
8021a31c:	dc000715 	stw	r16,28(sp)
8021a320:	df000904 	addi	fp,sp,36
8021a324:	e13ff815 	stw	r4,-32(fp)
8021a328:	e17ff915 	stw	r5,-28(fp)
8021a32c:	300b883a 	mov	r5,r6
8021a330:	3809883a 	mov	r4,r7
8021a334:	e0c00217 	ldw	r3,8(fp)
8021a338:	e0800317 	ldw	r2,12(fp)
8021a33c:	e17ffa05 	stb	r5,-24(fp)
8021a340:	e13ffb05 	stb	r4,-20(fp)
8021a344:	e0fffc05 	stb	r3,-16(fp)
8021a348:	e0bffd05 	stb	r2,-12(fp)
    
     if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
8021a34c:	e0bffc03 	ldbu	r2,-16(fp)
8021a350:	e0fffd03 	ldbu	r3,-12(fp)
8021a354:	180d883a 	mov	r6,r3
8021a358:	100b883a 	mov	r5,r2
8021a35c:	e13ff917 	ldw	r4,-28(fp)
8021a360:	0219e5c0 	call	80219e5c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
8021a364:	10000226 	beq	r2,zero,8021a370 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x64>
    {
        return -EINVAL;
8021a368:	00bffa84 	movi	r2,-22
8021a36c:	00000b06 	br	8021a39c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x90>
    }
        
    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
8021a370:	e0bff917 	ldw	r2,-28(fp)
8021a374:	1021883a 	mov	r16,r2
8021a378:	0023883a 	mov	r17,zero
8021a37c:	e0fffa03 	ldbu	r3,-24(fp)
8021a380:	e0bffb03 	ldbu	r2,-20(fp)
8021a384:	d8800015 	stw	r2,0(sp)
8021a388:	180f883a 	mov	r7,r3
8021a38c:	800b883a 	mov	r5,r16
8021a390:	880d883a 	mov	r6,r17
8021a394:	e13ff817 	ldw	r4,-32(fp)
8021a398:	0219fa00 	call	80219fa0 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
8021a39c:	e6fffe04 	addi	sp,fp,-8
8021a3a0:	dfc00317 	ldw	ra,12(sp)
8021a3a4:	df000217 	ldw	fp,8(sp)
8021a3a8:	dc400117 	ldw	r17,4(sp)
8021a3ac:	dc000017 	ldw	r16,0(sp)
8021a3b0:	dec00404 	addi	sp,sp,16
8021a3b4:	f800283a 	ret

8021a3b8 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
8021a3b8:	defffc04 	addi	sp,sp,-16
8021a3bc:	dfc00315 	stw	ra,12(sp)
8021a3c0:	df000215 	stw	fp,8(sp)
8021a3c4:	df000204 	addi	fp,sp,8
8021a3c8:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
8021a3cc:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
8021a3d0:	d1601004 	addi	r5,gp,-32704
8021a3d4:	e13fff17 	ldw	r4,-4(fp)
8021a3d8:	021a9b40 	call	8021a9b4 <alt_find_dev>
8021a3dc:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
8021a3e0:	e0bffe17 	ldw	r2,-8(fp)
8021a3e4:	1000041e 	bne	r2,zero,8021a3f8 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
8021a3e8:	02187200 	call	80218720 <alt_get_errno>
8021a3ec:	1007883a 	mov	r3,r2
8021a3f0:	008004c4 	movi	r2,19
8021a3f4:	18800015 	stw	r2,0(r3)
    }

    return dev;
8021a3f8:	e0bffe17 	ldw	r2,-8(fp)
}
8021a3fc:	e037883a 	mov	sp,fp
8021a400:	dfc00117 	ldw	ra,4(sp)
8021a404:	df000017 	ldw	fp,0(sp)
8021a408:	dec00204 	addi	sp,sp,8
8021a40c:	f800283a 	ret

8021a410 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
8021a410:	defff804 	addi	sp,sp,-32
8021a414:	dfc00715 	stw	ra,28(sp)
8021a418:	df000615 	stw	fp,24(sp)
8021a41c:	df000604 	addi	fp,sp,24
8021a420:	e13ffd15 	stw	r4,-12(fp)
8021a424:	e17ffe15 	stw	r5,-8(fp)
8021a428:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
8021a42c:	e0bffd17 	ldw	r2,-12(fp)
8021a430:	10801783 	ldbu	r2,94(r2)
8021a434:	10803fcc 	andi	r2,r2,255
8021a438:	10000b26 	beq	r2,zero,8021a468 <alt_msgdma_init+0x58>
    {
        /* start prefetcher reset sequence */
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
8021a43c:	e0bffd17 	ldw	r2,-12(fp)
8021a440:	10800617 	ldw	r2,24(r2)
8021a444:	00c00104 	movi	r3,4
8021a448:	10c00035 	stwio	r3,0(r2)
                ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
        /* wait until hw clears the bit */
        while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
8021a44c:	0001883a 	nop
8021a450:	e0bffd17 	ldw	r2,-12(fp)
8021a454:	10800617 	ldw	r2,24(r2)
8021a458:	10800037 	ldwio	r2,0(r2)
8021a45c:	1080010c 	andi	r2,r2,4
8021a460:	1005d0ba 	srai	r2,r2,2
8021a464:	103ffa1e 	bne	r2,zero,8021a450 <__reset+0xfa1fa450>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
8021a468:	e0bffd17 	ldw	r2,-12(fp)
8021a46c:	10800317 	ldw	r2,12(r2)
8021a470:	10800104 	addi	r2,r2,4
8021a474:	00c00084 	movi	r3,2
8021a478:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8021a47c:	0001883a 	nop
8021a480:	e0bffd17 	ldw	r2,-12(fp)
8021a484:	10800317 	ldw	r2,12(r2)
8021a488:	10800037 	ldwio	r2,0(r2)
            & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
8021a48c:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8021a490:	103ffb1e 	bne	r2,zero,8021a480 <__reset+0xfa1fa480>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8021a494:	e0bffd17 	ldw	r2,-12(fp)
8021a498:	10800317 	ldw	r2,12(r2)
8021a49c:	10800104 	addi	r2,r2,4
8021a4a0:	10800037 	ldwio	r2,0(r2)
8021a4a4:	1007883a 	mov	r3,r2
8021a4a8:	00bffbc4 	movi	r2,-17
8021a4ac:	1884703a 	and	r2,r3,r2
8021a4b0:	e0bffb15 	stw	r2,-20(fp)
            & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8021a4b4:	e0bffb17 	ldw	r2,-20(fp)
8021a4b8:	10800814 	ori	r2,r2,32
8021a4bc:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8021a4c0:	e0bffd17 	ldw	r2,-12(fp)
8021a4c4:	10800317 	ldw	r2,12(r2)
8021a4c8:	10800104 	addi	r2,r2,4
8021a4cc:	e0fffb17 	ldw	r3,-20(fp)
8021a4d0:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
8021a4d4:	e0bffd17 	ldw	r2,-12(fp)
8021a4d8:	10800317 	ldw	r2,12(r2)
8021a4dc:	e0fffd17 	ldw	r3,-12(fp)
8021a4e0:	18c00317 	ldw	r3,12(r3)
8021a4e4:	18c00037 	ldwio	r3,0(r3)
8021a4e8:	10c00035 	stwio	r3,0(r2)
            IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
8021a4ec:	e0bffd17 	ldw	r2,-12(fp)
8021a4f0:	10801783 	ldbu	r2,94(r2)
8021a4f4:	10803fcc 	andi	r2,r2,255
8021a4f8:	10000826 	beq	r2,zero,8021a51c <alt_msgdma_init+0x10c>
    {
        /* clear all status bits that are set, since theyre W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
8021a4fc:	e0bffd17 	ldw	r2,-12(fp)
8021a500:	10800617 	ldw	r2,24(r2)
8021a504:	10800404 	addi	r2,r2,16
8021a508:	e0fffd17 	ldw	r3,-12(fp)
8021a50c:	18c00617 	ldw	r3,24(r3)
8021a510:	18c00404 	addi	r3,r3,16
8021a514:	18c00037 	ldwio	r3,0(r3)
8021a518:	10c00035 	stwio	r3,0(r2)
                IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
8021a51c:	d1601004 	addi	r5,gp,-32704
8021a520:	e13ffd17 	ldw	r4,-12(fp)
8021a524:	021a8500 	call	8021a850 <alt_dev_llist_insert>
8021a528:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
8021a52c:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
8021a530:	e0bffc17 	ldw	r2,-16(fp)
8021a534:	1000081e 	bne	r2,zero,8021a558 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
8021a538:	d8000015 	stw	zero,0(sp)
8021a53c:	e1fffd17 	ldw	r7,-12(fp)
8021a540:	01a008b4 	movhi	r6,32802
8021a544:	31a24704 	addi	r6,r6,-30436
8021a548:	e17fff17 	ldw	r5,-4(fp)
8021a54c:	e13ffe17 	ldw	r4,-8(fp)
8021a550:	021aa440 	call	8021aa44 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
8021a554:	00000406 	br	8021a568 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
8021a558:	012008b4 	movhi	r4,32802
8021a55c:	2133b004 	addi	r4,r4,-12608
8021a560:	021b0780 	call	8021b078 <alt_printf>
    }
    
    return;
8021a564:	0001883a 	nop

}
8021a568:	e037883a 	mov	sp,fp
8021a56c:	dfc00117 	ldw	ra,4(sp)
8021a570:	df000017 	ldw	fp,0(sp)
8021a574:	dec00204 	addi	sp,sp,8
8021a578:	f800283a 	ret

8021a57c <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
    alt_msgdma_dev *dev,
    alt_msgdma_callback callback,
    alt_u32 control,
    void *context)
{
8021a57c:	defffb04 	addi	sp,sp,-20
8021a580:	df000415 	stw	fp,16(sp)
8021a584:	df000404 	addi	fp,sp,16
8021a588:	e13ffc15 	stw	r4,-16(fp)
8021a58c:	e17ffd15 	stw	r5,-12(fp)
8021a590:	e1bffe15 	stw	r6,-8(fp)
8021a594:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
8021a598:	e0bffc17 	ldw	r2,-16(fp)
8021a59c:	e0fffd17 	ldw	r3,-12(fp)
8021a5a0:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
8021a5a4:	e0bffc17 	ldw	r2,-16(fp)
8021a5a8:	e0ffff17 	ldw	r3,-4(fp)
8021a5ac:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
8021a5b0:	e0bffc17 	ldw	r2,-16(fp)
8021a5b4:	e0fffe17 	ldw	r3,-8(fp)
8021a5b8:	10c00d15 	stw	r3,52(r2)

    return ;
8021a5bc:	0001883a 	nop
}
8021a5c0:	e037883a 	mov	sp,fp
8021a5c4:	df000017 	ldw	fp,0(sp)
8021a5c8:	dec00104 	addi	sp,sp,4
8021a5cc:	f800283a 	ret

8021a5d0 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
8021a5d0:	defffc04 	addi	sp,sp,-16
8021a5d4:	dfc00315 	stw	ra,12(sp)
8021a5d8:	df000215 	stw	fp,8(sp)
8021a5dc:	df000204 	addi	fp,sp,8
8021a5e0:	e13ffe15 	stw	r4,-8(fp)
8021a5e4:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
8021a5e8:	000d883a 	mov	r6,zero
8021a5ec:	e17fff17 	ldw	r5,-4(fp)
8021a5f0:	e13ffe17 	ldw	r4,-8(fp)
8021a5f4:	0218c800 	call	80218c80 <alt_msgdma_descriptor_async_transfer>

}
8021a5f8:	e037883a 	mov	sp,fp
8021a5fc:	dfc00117 	ldw	ra,4(sp)
8021a600:	df000017 	ldw	fp,0(sp)
8021a604:	dec00204 	addi	sp,sp,8
8021a608:	f800283a 	ret

8021a60c <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
8021a60c:	defffc04 	addi	sp,sp,-16
8021a610:	dfc00315 	stw	ra,12(sp)
8021a614:	df000215 	stw	fp,8(sp)
8021a618:	df000204 	addi	fp,sp,8
8021a61c:	e13ffe15 	stw	r4,-8(fp)
8021a620:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
8021a624:	e1bfff17 	ldw	r6,-4(fp)
8021a628:	000b883a 	mov	r5,zero
8021a62c:	e13ffe17 	ldw	r4,-8(fp)
8021a630:	0218c800 	call	80218c80 <alt_msgdma_descriptor_async_transfer>
}
8021a634:	e037883a 	mov	sp,fp
8021a638:	dfc00117 	ldw	ra,4(sp)
8021a63c:	df000017 	ldw	fp,0(sp)
8021a640:	dec00204 	addi	sp,sp,8
8021a644:	f800283a 	ret

8021a648 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
8021a648:	defffc04 	addi	sp,sp,-16
8021a64c:	dfc00315 	stw	ra,12(sp)
8021a650:	df000215 	stw	fp,8(sp)
8021a654:	df000204 	addi	fp,sp,8
8021a658:	e13ffe15 	stw	r4,-8(fp)
8021a65c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
8021a660:	000d883a 	mov	r6,zero
8021a664:	e17fff17 	ldw	r5,-4(fp)
8021a668:	e13ffe17 	ldw	r4,-8(fp)
8021a66c:	0218f500 	call	80218f50 <alt_msgdma_descriptor_sync_transfer>
}
8021a670:	e037883a 	mov	sp,fp
8021a674:	dfc00117 	ldw	ra,4(sp)
8021a678:	df000017 	ldw	fp,0(sp)
8021a67c:	dec00204 	addi	sp,sp,8
8021a680:	f800283a 	ret

8021a684 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
8021a684:	defffc04 	addi	sp,sp,-16
8021a688:	dfc00315 	stw	ra,12(sp)
8021a68c:	df000215 	stw	fp,8(sp)
8021a690:	df000204 	addi	fp,sp,8
8021a694:	e13ffe15 	stw	r4,-8(fp)
8021a698:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
8021a69c:	e1bfff17 	ldw	r6,-4(fp)
8021a6a0:	000b883a 	mov	r5,zero
8021a6a4:	e13ffe17 	ldw	r4,-8(fp)
8021a6a8:	0218f500 	call	80218f50 <alt_msgdma_descriptor_sync_transfer>
}
8021a6ac:	e037883a 	mov	sp,fp
8021a6b0:	dfc00117 	ldw	ra,4(sp)
8021a6b4:	df000017 	ldw	fp,0(sp)
8021a6b8:	dec00204 	addi	sp,sp,8
8021a6bc:	f800283a 	ret

8021a6c0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
8021a6c0:	defff504 	addi	sp,sp,-44
8021a6c4:	df000a15 	stw	fp,40(sp)
8021a6c8:	df000a04 	addi	fp,sp,40
8021a6cc:	e13ffc15 	stw	r4,-16(fp)
8021a6d0:	e17ffd15 	stw	r5,-12(fp)
8021a6d4:	e1bffe15 	stw	r6,-8(fp)
8021a6d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
8021a6dc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8021a6e0:	d0a02517 	ldw	r2,-32620(gp)
  
  if (alt_ticks_per_second ())
8021a6e4:	10003c26 	beq	r2,zero,8021a7d8 <alt_alarm_start+0x118>
  {
    if (alarm)
8021a6e8:	e0bffc17 	ldw	r2,-16(fp)
8021a6ec:	10003826 	beq	r2,zero,8021a7d0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
8021a6f0:	e0bffc17 	ldw	r2,-16(fp)
8021a6f4:	e0fffe17 	ldw	r3,-8(fp)
8021a6f8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
8021a6fc:	e0bffc17 	ldw	r2,-16(fp)
8021a700:	e0ffff17 	ldw	r3,-4(fp)
8021a704:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021a708:	0005303a 	rdctl	r2,status
8021a70c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021a710:	e0fff917 	ldw	r3,-28(fp)
8021a714:	00bfff84 	movi	r2,-2
8021a718:	1884703a 	and	r2,r3,r2
8021a71c:	1001703a 	wrctl	status,r2
  
  return context;
8021a720:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
8021a724:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8021a728:	d0a02617 	ldw	r2,-32616(gp)
      
      current_nticks = alt_nticks();
8021a72c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
8021a730:	e0fffd17 	ldw	r3,-12(fp)
8021a734:	e0bff617 	ldw	r2,-40(fp)
8021a738:	1885883a 	add	r2,r3,r2
8021a73c:	10c00044 	addi	r3,r2,1
8021a740:	e0bffc17 	ldw	r2,-16(fp)
8021a744:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
8021a748:	e0bffc17 	ldw	r2,-16(fp)
8021a74c:	10c00217 	ldw	r3,8(r2)
8021a750:	e0bff617 	ldw	r2,-40(fp)
8021a754:	1880042e 	bgeu	r3,r2,8021a768 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
8021a758:	e0bffc17 	ldw	r2,-16(fp)
8021a75c:	00c00044 	movi	r3,1
8021a760:	10c00405 	stb	r3,16(r2)
8021a764:	00000206 	br	8021a770 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
8021a768:	e0bffc17 	ldw	r2,-16(fp)
8021a76c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
8021a770:	e0bffc17 	ldw	r2,-16(fp)
8021a774:	d0e00e04 	addi	r3,gp,-32712
8021a778:	e0fffa15 	stw	r3,-24(fp)
8021a77c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8021a780:	e0bffb17 	ldw	r2,-20(fp)
8021a784:	e0fffa17 	ldw	r3,-24(fp)
8021a788:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8021a78c:	e0bffa17 	ldw	r2,-24(fp)
8021a790:	10c00017 	ldw	r3,0(r2)
8021a794:	e0bffb17 	ldw	r2,-20(fp)
8021a798:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8021a79c:	e0bffa17 	ldw	r2,-24(fp)
8021a7a0:	10800017 	ldw	r2,0(r2)
8021a7a4:	e0fffb17 	ldw	r3,-20(fp)
8021a7a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8021a7ac:	e0bffa17 	ldw	r2,-24(fp)
8021a7b0:	e0fffb17 	ldw	r3,-20(fp)
8021a7b4:	10c00015 	stw	r3,0(r2)
8021a7b8:	e0bff817 	ldw	r2,-32(fp)
8021a7bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021a7c0:	e0bff717 	ldw	r2,-36(fp)
8021a7c4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
8021a7c8:	0005883a 	mov	r2,zero
8021a7cc:	00000306 	br	8021a7dc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
8021a7d0:	00bffa84 	movi	r2,-22
8021a7d4:	00000106 	br	8021a7dc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
8021a7d8:	00bfde84 	movi	r2,-134
  }
}
8021a7dc:	e037883a 	mov	sp,fp
8021a7e0:	df000017 	ldw	fp,0(sp)
8021a7e4:	dec00104 	addi	sp,sp,4
8021a7e8:	f800283a 	ret

8021a7ec <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
8021a7ec:	defffd04 	addi	sp,sp,-12
8021a7f0:	df000215 	stw	fp,8(sp)
8021a7f4:	df000204 	addi	fp,sp,8
8021a7f8:	e13ffe15 	stw	r4,-8(fp)
8021a7fc:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
8021a800:	0001883a 	nop
8021a804:	e037883a 	mov	sp,fp
8021a808:	df000017 	ldw	fp,0(sp)
8021a80c:	dec00104 	addi	sp,sp,4
8021a810:	f800283a 	ret

8021a814 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8021a814:	defffe04 	addi	sp,sp,-8
8021a818:	dfc00115 	stw	ra,4(sp)
8021a81c:	df000015 	stw	fp,0(sp)
8021a820:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8021a824:	d0a00c17 	ldw	r2,-32720(gp)
8021a828:	10000326 	beq	r2,zero,8021a838 <alt_get_errno+0x24>
8021a82c:	d0a00c17 	ldw	r2,-32720(gp)
8021a830:	103ee83a 	callr	r2
8021a834:	00000106 	br	8021a83c <alt_get_errno+0x28>
8021a838:	d0a02104 	addi	r2,gp,-32636
}
8021a83c:	e037883a 	mov	sp,fp
8021a840:	dfc00117 	ldw	ra,4(sp)
8021a844:	df000017 	ldw	fp,0(sp)
8021a848:	dec00204 	addi	sp,sp,8
8021a84c:	f800283a 	ret

8021a850 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8021a850:	defffa04 	addi	sp,sp,-24
8021a854:	dfc00515 	stw	ra,20(sp)
8021a858:	df000415 	stw	fp,16(sp)
8021a85c:	df000404 	addi	fp,sp,16
8021a860:	e13ffe15 	stw	r4,-8(fp)
8021a864:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
8021a868:	e0bffe17 	ldw	r2,-8(fp)
8021a86c:	10000326 	beq	r2,zero,8021a87c <alt_dev_llist_insert+0x2c>
8021a870:	e0bffe17 	ldw	r2,-8(fp)
8021a874:	10800217 	ldw	r2,8(r2)
8021a878:	1000061e 	bne	r2,zero,8021a894 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
8021a87c:	021a8140 	call	8021a814 <alt_get_errno>
8021a880:	1007883a 	mov	r3,r2
8021a884:	00800584 	movi	r2,22
8021a888:	18800015 	stw	r2,0(r3)
    return -EINVAL;
8021a88c:	00bffa84 	movi	r2,-22
8021a890:	00001306 	br	8021a8e0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
8021a894:	e0bffe17 	ldw	r2,-8(fp)
8021a898:	e0ffff17 	ldw	r3,-4(fp)
8021a89c:	e0fffc15 	stw	r3,-16(fp)
8021a8a0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8021a8a4:	e0bffd17 	ldw	r2,-12(fp)
8021a8a8:	e0fffc17 	ldw	r3,-16(fp)
8021a8ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8021a8b0:	e0bffc17 	ldw	r2,-16(fp)
8021a8b4:	10c00017 	ldw	r3,0(r2)
8021a8b8:	e0bffd17 	ldw	r2,-12(fp)
8021a8bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8021a8c0:	e0bffc17 	ldw	r2,-16(fp)
8021a8c4:	10800017 	ldw	r2,0(r2)
8021a8c8:	e0fffd17 	ldw	r3,-12(fp)
8021a8cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8021a8d0:	e0bffc17 	ldw	r2,-16(fp)
8021a8d4:	e0fffd17 	ldw	r3,-12(fp)
8021a8d8:	10c00015 	stw	r3,0(r2)

  return 0;  
8021a8dc:	0005883a 	mov	r2,zero
}
8021a8e0:	e037883a 	mov	sp,fp
8021a8e4:	dfc00117 	ldw	ra,4(sp)
8021a8e8:	df000017 	ldw	fp,0(sp)
8021a8ec:	dec00204 	addi	sp,sp,8
8021a8f0:	f800283a 	ret

8021a8f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8021a8f4:	defffd04 	addi	sp,sp,-12
8021a8f8:	dfc00215 	stw	ra,8(sp)
8021a8fc:	df000115 	stw	fp,4(sp)
8021a900:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8021a904:	00a008b4 	movhi	r2,32802
8021a908:	10ae9104 	addi	r2,r2,-17852
8021a90c:	e0bfff15 	stw	r2,-4(fp)
8021a910:	00000606 	br	8021a92c <_do_ctors+0x38>
        (*ctor) (); 
8021a914:	e0bfff17 	ldw	r2,-4(fp)
8021a918:	10800017 	ldw	r2,0(r2)
8021a91c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8021a920:	e0bfff17 	ldw	r2,-4(fp)
8021a924:	10bfff04 	addi	r2,r2,-4
8021a928:	e0bfff15 	stw	r2,-4(fp)
8021a92c:	e0ffff17 	ldw	r3,-4(fp)
8021a930:	00a008b4 	movhi	r2,32802
8021a934:	10ae9204 	addi	r2,r2,-17848
8021a938:	18bff62e 	bgeu	r3,r2,8021a914 <__reset+0xfa1fa914>
        (*ctor) (); 
}
8021a93c:	0001883a 	nop
8021a940:	e037883a 	mov	sp,fp
8021a944:	dfc00117 	ldw	ra,4(sp)
8021a948:	df000017 	ldw	fp,0(sp)
8021a94c:	dec00204 	addi	sp,sp,8
8021a950:	f800283a 	ret

8021a954 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
8021a954:	defffd04 	addi	sp,sp,-12
8021a958:	dfc00215 	stw	ra,8(sp)
8021a95c:	df000115 	stw	fp,4(sp)
8021a960:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8021a964:	00a008b4 	movhi	r2,32802
8021a968:	10ae9104 	addi	r2,r2,-17852
8021a96c:	e0bfff15 	stw	r2,-4(fp)
8021a970:	00000606 	br	8021a98c <_do_dtors+0x38>
        (*dtor) (); 
8021a974:	e0bfff17 	ldw	r2,-4(fp)
8021a978:	10800017 	ldw	r2,0(r2)
8021a97c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8021a980:	e0bfff17 	ldw	r2,-4(fp)
8021a984:	10bfff04 	addi	r2,r2,-4
8021a988:	e0bfff15 	stw	r2,-4(fp)
8021a98c:	e0ffff17 	ldw	r3,-4(fp)
8021a990:	00a008b4 	movhi	r2,32802
8021a994:	10ae9204 	addi	r2,r2,-17848
8021a998:	18bff62e 	bgeu	r3,r2,8021a974 <__reset+0xfa1fa974>
        (*dtor) (); 
}
8021a99c:	0001883a 	nop
8021a9a0:	e037883a 	mov	sp,fp
8021a9a4:	dfc00117 	ldw	ra,4(sp)
8021a9a8:	df000017 	ldw	fp,0(sp)
8021a9ac:	dec00204 	addi	sp,sp,8
8021a9b0:	f800283a 	ret

8021a9b4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
8021a9b4:	defffa04 	addi	sp,sp,-24
8021a9b8:	dfc00515 	stw	ra,20(sp)
8021a9bc:	df000415 	stw	fp,16(sp)
8021a9c0:	df000404 	addi	fp,sp,16
8021a9c4:	e13ffe15 	stw	r4,-8(fp)
8021a9c8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
8021a9cc:	e0bfff17 	ldw	r2,-4(fp)
8021a9d0:	10800017 	ldw	r2,0(r2)
8021a9d4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
8021a9d8:	e13ffe17 	ldw	r4,-8(fp)
8021a9dc:	0206a0c0 	call	80206a0c <strlen>
8021a9e0:	10800044 	addi	r2,r2,1
8021a9e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8021a9e8:	00000d06 	br	8021aa20 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
8021a9ec:	e0bffc17 	ldw	r2,-16(fp)
8021a9f0:	10800217 	ldw	r2,8(r2)
8021a9f4:	e0fffd17 	ldw	r3,-12(fp)
8021a9f8:	180d883a 	mov	r6,r3
8021a9fc:	e17ffe17 	ldw	r5,-8(fp)
8021aa00:	1009883a 	mov	r4,r2
8021aa04:	021b5980 	call	8021b598 <memcmp>
8021aa08:	1000021e 	bne	r2,zero,8021aa14 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
8021aa0c:	e0bffc17 	ldw	r2,-16(fp)
8021aa10:	00000706 	br	8021aa30 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
8021aa14:	e0bffc17 	ldw	r2,-16(fp)
8021aa18:	10800017 	ldw	r2,0(r2)
8021aa1c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8021aa20:	e0fffc17 	ldw	r3,-16(fp)
8021aa24:	e0bfff17 	ldw	r2,-4(fp)
8021aa28:	18bff01e 	bne	r3,r2,8021a9ec <__reset+0xfa1fa9ec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
8021aa2c:	0005883a 	mov	r2,zero
}
8021aa30:	e037883a 	mov	sp,fp
8021aa34:	dfc00117 	ldw	ra,4(sp)
8021aa38:	df000017 	ldw	fp,0(sp)
8021aa3c:	dec00204 	addi	sp,sp,8
8021aa40:	f800283a 	ret

8021aa44 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8021aa44:	defff904 	addi	sp,sp,-28
8021aa48:	dfc00615 	stw	ra,24(sp)
8021aa4c:	df000515 	stw	fp,20(sp)
8021aa50:	df000504 	addi	fp,sp,20
8021aa54:	e13ffc15 	stw	r4,-16(fp)
8021aa58:	e17ffd15 	stw	r5,-12(fp)
8021aa5c:	e1bffe15 	stw	r6,-8(fp)
8021aa60:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
8021aa64:	e0800217 	ldw	r2,8(fp)
8021aa68:	d8800015 	stw	r2,0(sp)
8021aa6c:	e1ffff17 	ldw	r7,-4(fp)
8021aa70:	e1bffe17 	ldw	r6,-8(fp)
8021aa74:	e17ffd17 	ldw	r5,-12(fp)
8021aa78:	e13ffc17 	ldw	r4,-16(fp)
8021aa7c:	021abf40 	call	8021abf4 <alt_iic_isr_register>
}  
8021aa80:	e037883a 	mov	sp,fp
8021aa84:	dfc00117 	ldw	ra,4(sp)
8021aa88:	df000017 	ldw	fp,0(sp)
8021aa8c:	dec00204 	addi	sp,sp,8
8021aa90:	f800283a 	ret

8021aa94 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
8021aa94:	defff904 	addi	sp,sp,-28
8021aa98:	df000615 	stw	fp,24(sp)
8021aa9c:	df000604 	addi	fp,sp,24
8021aaa0:	e13ffe15 	stw	r4,-8(fp)
8021aaa4:	e17fff15 	stw	r5,-4(fp)
8021aaa8:	e0bfff17 	ldw	r2,-4(fp)
8021aaac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021aab0:	0005303a 	rdctl	r2,status
8021aab4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021aab8:	e0fffb17 	ldw	r3,-20(fp)
8021aabc:	00bfff84 	movi	r2,-2
8021aac0:	1884703a 	and	r2,r3,r2
8021aac4:	1001703a 	wrctl	status,r2
  
  return context;
8021aac8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8021aacc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
8021aad0:	00c00044 	movi	r3,1
8021aad4:	e0bffa17 	ldw	r2,-24(fp)
8021aad8:	1884983a 	sll	r2,r3,r2
8021aadc:	1007883a 	mov	r3,r2
8021aae0:	d0a02717 	ldw	r2,-32612(gp)
8021aae4:	1884b03a 	or	r2,r3,r2
8021aae8:	d0a02715 	stw	r2,-32612(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8021aaec:	d0a02717 	ldw	r2,-32612(gp)
8021aaf0:	100170fa 	wrctl	ienable,r2
8021aaf4:	e0bffc17 	ldw	r2,-16(fp)
8021aaf8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021aafc:	e0bffd17 	ldw	r2,-12(fp)
8021ab00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8021ab04:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
8021ab08:	0001883a 	nop
}
8021ab0c:	e037883a 	mov	sp,fp
8021ab10:	df000017 	ldw	fp,0(sp)
8021ab14:	dec00104 	addi	sp,sp,4
8021ab18:	f800283a 	ret

8021ab1c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
8021ab1c:	defff904 	addi	sp,sp,-28
8021ab20:	df000615 	stw	fp,24(sp)
8021ab24:	df000604 	addi	fp,sp,24
8021ab28:	e13ffe15 	stw	r4,-8(fp)
8021ab2c:	e17fff15 	stw	r5,-4(fp)
8021ab30:	e0bfff17 	ldw	r2,-4(fp)
8021ab34:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021ab38:	0005303a 	rdctl	r2,status
8021ab3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021ab40:	e0fffb17 	ldw	r3,-20(fp)
8021ab44:	00bfff84 	movi	r2,-2
8021ab48:	1884703a 	and	r2,r3,r2
8021ab4c:	1001703a 	wrctl	status,r2
  
  return context;
8021ab50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8021ab54:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
8021ab58:	00c00044 	movi	r3,1
8021ab5c:	e0bffa17 	ldw	r2,-24(fp)
8021ab60:	1884983a 	sll	r2,r3,r2
8021ab64:	0084303a 	nor	r2,zero,r2
8021ab68:	1007883a 	mov	r3,r2
8021ab6c:	d0a02717 	ldw	r2,-32612(gp)
8021ab70:	1884703a 	and	r2,r3,r2
8021ab74:	d0a02715 	stw	r2,-32612(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8021ab78:	d0a02717 	ldw	r2,-32612(gp)
8021ab7c:	100170fa 	wrctl	ienable,r2
8021ab80:	e0bffc17 	ldw	r2,-16(fp)
8021ab84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021ab88:	e0bffd17 	ldw	r2,-12(fp)
8021ab8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8021ab90:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
8021ab94:	0001883a 	nop
}
8021ab98:	e037883a 	mov	sp,fp
8021ab9c:	df000017 	ldw	fp,0(sp)
8021aba0:	dec00104 	addi	sp,sp,4
8021aba4:	f800283a 	ret

8021aba8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
8021aba8:	defffc04 	addi	sp,sp,-16
8021abac:	df000315 	stw	fp,12(sp)
8021abb0:	df000304 	addi	fp,sp,12
8021abb4:	e13ffe15 	stw	r4,-8(fp)
8021abb8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
8021abbc:	000530fa 	rdctl	r2,ienable
8021abc0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
8021abc4:	00c00044 	movi	r3,1
8021abc8:	e0bfff17 	ldw	r2,-4(fp)
8021abcc:	1884983a 	sll	r2,r3,r2
8021abd0:	1007883a 	mov	r3,r2
8021abd4:	e0bffd17 	ldw	r2,-12(fp)
8021abd8:	1884703a 	and	r2,r3,r2
8021abdc:	1004c03a 	cmpne	r2,r2,zero
8021abe0:	10803fcc 	andi	r2,r2,255
}
8021abe4:	e037883a 	mov	sp,fp
8021abe8:	df000017 	ldw	fp,0(sp)
8021abec:	dec00104 	addi	sp,sp,4
8021abf0:	f800283a 	ret

8021abf4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8021abf4:	defff504 	addi	sp,sp,-44
8021abf8:	dfc00a15 	stw	ra,40(sp)
8021abfc:	df000915 	stw	fp,36(sp)
8021ac00:	df000904 	addi	fp,sp,36
8021ac04:	e13ffc15 	stw	r4,-16(fp)
8021ac08:	e17ffd15 	stw	r5,-12(fp)
8021ac0c:	e1bffe15 	stw	r6,-8(fp)
8021ac10:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
8021ac14:	00bffa84 	movi	r2,-22
8021ac18:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
8021ac1c:	e0bffd17 	ldw	r2,-12(fp)
8021ac20:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
8021ac24:	e0bff817 	ldw	r2,-32(fp)
8021ac28:	10800808 	cmpgei	r2,r2,32
8021ac2c:	1000271e 	bne	r2,zero,8021accc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021ac30:	0005303a 	rdctl	r2,status
8021ac34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021ac38:	e0fffb17 	ldw	r3,-20(fp)
8021ac3c:	00bfff84 	movi	r2,-2
8021ac40:	1884703a 	and	r2,r3,r2
8021ac44:	1001703a 	wrctl	status,r2
  
  return context;
8021ac48:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
8021ac4c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
8021ac50:	00a008b4 	movhi	r2,32802
8021ac54:	10bc4604 	addi	r2,r2,-3816
8021ac58:	e0fff817 	ldw	r3,-32(fp)
8021ac5c:	180690fa 	slli	r3,r3,3
8021ac60:	10c5883a 	add	r2,r2,r3
8021ac64:	e0fffe17 	ldw	r3,-8(fp)
8021ac68:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
8021ac6c:	00a008b4 	movhi	r2,32802
8021ac70:	10bc4604 	addi	r2,r2,-3816
8021ac74:	e0fff817 	ldw	r3,-32(fp)
8021ac78:	180690fa 	slli	r3,r3,3
8021ac7c:	10c5883a 	add	r2,r2,r3
8021ac80:	10800104 	addi	r2,r2,4
8021ac84:	e0ffff17 	ldw	r3,-4(fp)
8021ac88:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
8021ac8c:	e0bffe17 	ldw	r2,-8(fp)
8021ac90:	10000526 	beq	r2,zero,8021aca8 <alt_iic_isr_register+0xb4>
8021ac94:	e0bff817 	ldw	r2,-32(fp)
8021ac98:	100b883a 	mov	r5,r2
8021ac9c:	e13ffc17 	ldw	r4,-16(fp)
8021aca0:	021aa940 	call	8021aa94 <alt_ic_irq_enable>
8021aca4:	00000406 	br	8021acb8 <alt_iic_isr_register+0xc4>
8021aca8:	e0bff817 	ldw	r2,-32(fp)
8021acac:	100b883a 	mov	r5,r2
8021acb0:	e13ffc17 	ldw	r4,-16(fp)
8021acb4:	021ab1c0 	call	8021ab1c <alt_ic_irq_disable>
8021acb8:	e0bff715 	stw	r2,-36(fp)
8021acbc:	e0bffa17 	ldw	r2,-24(fp)
8021acc0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021acc4:	e0bff917 	ldw	r2,-28(fp)
8021acc8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
8021accc:	e0bff717 	ldw	r2,-36(fp)
}
8021acd0:	e037883a 	mov	sp,fp
8021acd4:	dfc00117 	ldw	ra,4(sp)
8021acd8:	df000017 	ldw	fp,0(sp)
8021acdc:	dec00204 	addi	sp,sp,8
8021ace0:	f800283a 	ret

8021ace4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
8021ace4:	defff904 	addi	sp,sp,-28
8021ace8:	dfc00615 	stw	ra,24(sp)
8021acec:	df000515 	stw	fp,20(sp)
8021acf0:	df000504 	addi	fp,sp,20
8021acf4:	e13ffc15 	stw	r4,-16(fp)
8021acf8:	e17ffd15 	stw	r5,-12(fp)
8021acfc:	e1bffe15 	stw	r6,-8(fp)
8021ad00:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
8021ad04:	e1bfff17 	ldw	r6,-4(fp)
8021ad08:	e17ffe17 	ldw	r5,-8(fp)
8021ad0c:	e13ffd17 	ldw	r4,-12(fp)
8021ad10:	021af240 	call	8021af24 <open>
8021ad14:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
8021ad18:	e0bffb17 	ldw	r2,-20(fp)
8021ad1c:	10001c16 	blt	r2,zero,8021ad90 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
8021ad20:	00a008b4 	movhi	r2,32802
8021ad24:	10b5eb04 	addi	r2,r2,-10324
8021ad28:	e0fffb17 	ldw	r3,-20(fp)
8021ad2c:	18c00324 	muli	r3,r3,12
8021ad30:	10c5883a 	add	r2,r2,r3
8021ad34:	10c00017 	ldw	r3,0(r2)
8021ad38:	e0bffc17 	ldw	r2,-16(fp)
8021ad3c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
8021ad40:	00a008b4 	movhi	r2,32802
8021ad44:	10b5eb04 	addi	r2,r2,-10324
8021ad48:	e0fffb17 	ldw	r3,-20(fp)
8021ad4c:	18c00324 	muli	r3,r3,12
8021ad50:	10c5883a 	add	r2,r2,r3
8021ad54:	10800104 	addi	r2,r2,4
8021ad58:	10c00017 	ldw	r3,0(r2)
8021ad5c:	e0bffc17 	ldw	r2,-16(fp)
8021ad60:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8021ad64:	00a008b4 	movhi	r2,32802
8021ad68:	10b5eb04 	addi	r2,r2,-10324
8021ad6c:	e0fffb17 	ldw	r3,-20(fp)
8021ad70:	18c00324 	muli	r3,r3,12
8021ad74:	10c5883a 	add	r2,r2,r3
8021ad78:	10800204 	addi	r2,r2,8
8021ad7c:	10c00017 	ldw	r3,0(r2)
8021ad80:	e0bffc17 	ldw	r2,-16(fp)
8021ad84:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
8021ad88:	e13ffb17 	ldw	r4,-20(fp)
8021ad8c:	0216d7c0 	call	80216d7c <alt_release_fd>
  }
} 
8021ad90:	0001883a 	nop
8021ad94:	e037883a 	mov	sp,fp
8021ad98:	dfc00117 	ldw	ra,4(sp)
8021ad9c:	df000017 	ldw	fp,0(sp)
8021ada0:	dec00204 	addi	sp,sp,8
8021ada4:	f800283a 	ret

8021ada8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8021ada8:	defffb04 	addi	sp,sp,-20
8021adac:	dfc00415 	stw	ra,16(sp)
8021adb0:	df000315 	stw	fp,12(sp)
8021adb4:	df000304 	addi	fp,sp,12
8021adb8:	e13ffd15 	stw	r4,-12(fp)
8021adbc:	e17ffe15 	stw	r5,-8(fp)
8021adc0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
8021adc4:	01c07fc4 	movi	r7,511
8021adc8:	01800044 	movi	r6,1
8021adcc:	e17ffd17 	ldw	r5,-12(fp)
8021add0:	012008b4 	movhi	r4,32802
8021add4:	2135ee04 	addi	r4,r4,-10312
8021add8:	021ace40 	call	8021ace4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
8021addc:	01c07fc4 	movi	r7,511
8021ade0:	000d883a 	mov	r6,zero
8021ade4:	e17ffe17 	ldw	r5,-8(fp)
8021ade8:	012008b4 	movhi	r4,32802
8021adec:	2135eb04 	addi	r4,r4,-10324
8021adf0:	021ace40 	call	8021ace4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
8021adf4:	01c07fc4 	movi	r7,511
8021adf8:	01800044 	movi	r6,1
8021adfc:	e17fff17 	ldw	r5,-4(fp)
8021ae00:	012008b4 	movhi	r4,32802
8021ae04:	2135f104 	addi	r4,r4,-10300
8021ae08:	021ace40 	call	8021ace4 <alt_open_fd>
}  
8021ae0c:	0001883a 	nop
8021ae10:	e037883a 	mov	sp,fp
8021ae14:	dfc00117 	ldw	ra,4(sp)
8021ae18:	df000017 	ldw	fp,0(sp)
8021ae1c:	dec00204 	addi	sp,sp,8
8021ae20:	f800283a 	ret

8021ae24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8021ae24:	defffe04 	addi	sp,sp,-8
8021ae28:	dfc00115 	stw	ra,4(sp)
8021ae2c:	df000015 	stw	fp,0(sp)
8021ae30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8021ae34:	d0a00c17 	ldw	r2,-32720(gp)
8021ae38:	10000326 	beq	r2,zero,8021ae48 <alt_get_errno+0x24>
8021ae3c:	d0a00c17 	ldw	r2,-32720(gp)
8021ae40:	103ee83a 	callr	r2
8021ae44:	00000106 	br	8021ae4c <alt_get_errno+0x28>
8021ae48:	d0a02104 	addi	r2,gp,-32636
}
8021ae4c:	e037883a 	mov	sp,fp
8021ae50:	dfc00117 	ldw	ra,4(sp)
8021ae54:	df000017 	ldw	fp,0(sp)
8021ae58:	dec00204 	addi	sp,sp,8
8021ae5c:	f800283a 	ret

8021ae60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
8021ae60:	defffd04 	addi	sp,sp,-12
8021ae64:	df000215 	stw	fp,8(sp)
8021ae68:	df000204 	addi	fp,sp,8
8021ae6c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
8021ae70:	e0bfff17 	ldw	r2,-4(fp)
8021ae74:	10800217 	ldw	r2,8(r2)
8021ae78:	10d00034 	orhi	r3,r2,16384
8021ae7c:	e0bfff17 	ldw	r2,-4(fp)
8021ae80:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8021ae84:	e03ffe15 	stw	zero,-8(fp)
8021ae88:	00001d06 	br	8021af00 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8021ae8c:	00a008b4 	movhi	r2,32802
8021ae90:	10b5eb04 	addi	r2,r2,-10324
8021ae94:	e0fffe17 	ldw	r3,-8(fp)
8021ae98:	18c00324 	muli	r3,r3,12
8021ae9c:	10c5883a 	add	r2,r2,r3
8021aea0:	10c00017 	ldw	r3,0(r2)
8021aea4:	e0bfff17 	ldw	r2,-4(fp)
8021aea8:	10800017 	ldw	r2,0(r2)
8021aeac:	1880111e 	bne	r3,r2,8021aef4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8021aeb0:	00a008b4 	movhi	r2,32802
8021aeb4:	10b5eb04 	addi	r2,r2,-10324
8021aeb8:	e0fffe17 	ldw	r3,-8(fp)
8021aebc:	18c00324 	muli	r3,r3,12
8021aec0:	10c5883a 	add	r2,r2,r3
8021aec4:	10800204 	addi	r2,r2,8
8021aec8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8021aecc:	1000090e 	bge	r2,zero,8021aef4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
8021aed0:	e0bffe17 	ldw	r2,-8(fp)
8021aed4:	10c00324 	muli	r3,r2,12
8021aed8:	00a008b4 	movhi	r2,32802
8021aedc:	10b5eb04 	addi	r2,r2,-10324
8021aee0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8021aee4:	e0bfff17 	ldw	r2,-4(fp)
8021aee8:	18800226 	beq	r3,r2,8021aef4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
8021aeec:	00bffcc4 	movi	r2,-13
8021aef0:	00000806 	br	8021af14 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8021aef4:	e0bffe17 	ldw	r2,-8(fp)
8021aef8:	10800044 	addi	r2,r2,1
8021aefc:	e0bffe15 	stw	r2,-8(fp)
8021af00:	d0a00b17 	ldw	r2,-32724(gp)
8021af04:	1007883a 	mov	r3,r2
8021af08:	e0bffe17 	ldw	r2,-8(fp)
8021af0c:	18bfdf2e 	bgeu	r3,r2,8021ae8c <__reset+0xfa1fae8c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
8021af10:	0005883a 	mov	r2,zero
}
8021af14:	e037883a 	mov	sp,fp
8021af18:	df000017 	ldw	fp,0(sp)
8021af1c:	dec00104 	addi	sp,sp,4
8021af20:	f800283a 	ret

8021af24 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
8021af24:	defff604 	addi	sp,sp,-40
8021af28:	dfc00915 	stw	ra,36(sp)
8021af2c:	df000815 	stw	fp,32(sp)
8021af30:	df000804 	addi	fp,sp,32
8021af34:	e13ffd15 	stw	r4,-12(fp)
8021af38:	e17ffe15 	stw	r5,-8(fp)
8021af3c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
8021af40:	00bfffc4 	movi	r2,-1
8021af44:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
8021af48:	00bffb44 	movi	r2,-19
8021af4c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
8021af50:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
8021af54:	d1600904 	addi	r5,gp,-32732
8021af58:	e13ffd17 	ldw	r4,-12(fp)
8021af5c:	021a9b40 	call	8021a9b4 <alt_find_dev>
8021af60:	e0bff815 	stw	r2,-32(fp)
8021af64:	e0bff817 	ldw	r2,-32(fp)
8021af68:	1000051e 	bne	r2,zero,8021af80 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
8021af6c:	e13ffd17 	ldw	r4,-12(fp)
8021af70:	021b3040 	call	8021b304 <alt_find_file>
8021af74:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
8021af78:	00800044 	movi	r2,1
8021af7c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
8021af80:	e0bff817 	ldw	r2,-32(fp)
8021af84:	10002926 	beq	r2,zero,8021b02c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
8021af88:	e13ff817 	ldw	r4,-32(fp)
8021af8c:	021b40c0 	call	8021b40c <alt_get_fd>
8021af90:	e0bff915 	stw	r2,-28(fp)
8021af94:	e0bff917 	ldw	r2,-28(fp)
8021af98:	1000030e 	bge	r2,zero,8021afa8 <open+0x84>
    {
      status = index;
8021af9c:	e0bff917 	ldw	r2,-28(fp)
8021afa0:	e0bffa15 	stw	r2,-24(fp)
8021afa4:	00002306 	br	8021b034 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
8021afa8:	e0bff917 	ldw	r2,-28(fp)
8021afac:	10c00324 	muli	r3,r2,12
8021afb0:	00a008b4 	movhi	r2,32802
8021afb4:	10b5eb04 	addi	r2,r2,-10324
8021afb8:	1885883a 	add	r2,r3,r2
8021afbc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
8021afc0:	e0fffe17 	ldw	r3,-8(fp)
8021afc4:	00900034 	movhi	r2,16384
8021afc8:	10bfffc4 	addi	r2,r2,-1
8021afcc:	1886703a 	and	r3,r3,r2
8021afd0:	e0bffc17 	ldw	r2,-16(fp)
8021afd4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
8021afd8:	e0bffb17 	ldw	r2,-20(fp)
8021afdc:	1000051e 	bne	r2,zero,8021aff4 <open+0xd0>
8021afe0:	e13ffc17 	ldw	r4,-16(fp)
8021afe4:	021ae600 	call	8021ae60 <alt_file_locked>
8021afe8:	e0bffa15 	stw	r2,-24(fp)
8021afec:	e0bffa17 	ldw	r2,-24(fp)
8021aff0:	10001016 	blt	r2,zero,8021b034 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
8021aff4:	e0bff817 	ldw	r2,-32(fp)
8021aff8:	10800317 	ldw	r2,12(r2)
8021affc:	10000826 	beq	r2,zero,8021b020 <open+0xfc>
8021b000:	e0bff817 	ldw	r2,-32(fp)
8021b004:	10800317 	ldw	r2,12(r2)
8021b008:	e1ffff17 	ldw	r7,-4(fp)
8021b00c:	e1bffe17 	ldw	r6,-8(fp)
8021b010:	e17ffd17 	ldw	r5,-12(fp)
8021b014:	e13ffc17 	ldw	r4,-16(fp)
8021b018:	103ee83a 	callr	r2
8021b01c:	00000106 	br	8021b024 <open+0x100>
8021b020:	0005883a 	mov	r2,zero
8021b024:	e0bffa15 	stw	r2,-24(fp)
8021b028:	00000206 	br	8021b034 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
8021b02c:	00bffb44 	movi	r2,-19
8021b030:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
8021b034:	e0bffa17 	ldw	r2,-24(fp)
8021b038:	1000090e 	bge	r2,zero,8021b060 <open+0x13c>
  {
    alt_release_fd (index);  
8021b03c:	e13ff917 	ldw	r4,-28(fp)
8021b040:	0216d7c0 	call	80216d7c <alt_release_fd>
    ALT_ERRNO = -status;
8021b044:	021ae240 	call	8021ae24 <alt_get_errno>
8021b048:	1007883a 	mov	r3,r2
8021b04c:	e0bffa17 	ldw	r2,-24(fp)
8021b050:	0085c83a 	sub	r2,zero,r2
8021b054:	18800015 	stw	r2,0(r3)
    return -1;
8021b058:	00bfffc4 	movi	r2,-1
8021b05c:	00000106 	br	8021b064 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
8021b060:	e0bff917 	ldw	r2,-28(fp)
}
8021b064:	e037883a 	mov	sp,fp
8021b068:	dfc00117 	ldw	ra,4(sp)
8021b06c:	df000017 	ldw	fp,0(sp)
8021b070:	dec00204 	addi	sp,sp,8
8021b074:	f800283a 	ret

8021b078 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
8021b078:	defff204 	addi	sp,sp,-56
8021b07c:	dfc00a15 	stw	ra,40(sp)
8021b080:	df000915 	stw	fp,36(sp)
8021b084:	df000904 	addi	fp,sp,36
8021b088:	e13fff15 	stw	r4,-4(fp)
8021b08c:	e1400215 	stw	r5,8(fp)
8021b090:	e1800315 	stw	r6,12(fp)
8021b094:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
8021b098:	e0800204 	addi	r2,fp,8
8021b09c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
8021b0a0:	e0bfff17 	ldw	r2,-4(fp)
8021b0a4:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
8021b0a8:	00006f06 	br	8021b268 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
8021b0ac:	e0bff807 	ldb	r2,-32(fp)
8021b0b0:	10800960 	cmpeqi	r2,r2,37
8021b0b4:	1000041e 	bne	r2,zero,8021b0c8 <alt_printf+0x50>
        {
            alt_putchar(c);
8021b0b8:	e0bff807 	ldb	r2,-32(fp)
8021b0bc:	1009883a 	mov	r4,r2
8021b0c0:	021b2a40 	call	8021b2a4 <alt_putchar>
8021b0c4:	00006806 	br	8021b268 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
8021b0c8:	e0bff717 	ldw	r2,-36(fp)
8021b0cc:	10c00044 	addi	r3,r2,1
8021b0d0:	e0fff715 	stw	r3,-36(fp)
8021b0d4:	10800003 	ldbu	r2,0(r2)
8021b0d8:	e0bff805 	stb	r2,-32(fp)
8021b0dc:	e0bff807 	ldb	r2,-32(fp)
8021b0e0:	10006926 	beq	r2,zero,8021b288 <alt_printf+0x210>
            {
                if (c == '%')
8021b0e4:	e0bff807 	ldb	r2,-32(fp)
8021b0e8:	10800958 	cmpnei	r2,r2,37
8021b0ec:	1000041e 	bne	r2,zero,8021b100 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
8021b0f0:	e0bff807 	ldb	r2,-32(fp)
8021b0f4:	1009883a 	mov	r4,r2
8021b0f8:	021b2a40 	call	8021b2a4 <alt_putchar>
8021b0fc:	00005a06 	br	8021b268 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
8021b100:	e0bff807 	ldb	r2,-32(fp)
8021b104:	108018d8 	cmpnei	r2,r2,99
8021b108:	1000081e 	bne	r2,zero,8021b12c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
8021b10c:	e0bffe17 	ldw	r2,-8(fp)
8021b110:	10c00104 	addi	r3,r2,4
8021b114:	e0fffe15 	stw	r3,-8(fp)
8021b118:	10800017 	ldw	r2,0(r2)
8021b11c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
8021b120:	e13ffd17 	ldw	r4,-12(fp)
8021b124:	021b2a40 	call	8021b2a4 <alt_putchar>
8021b128:	00004f06 	br	8021b268 <alt_printf+0x1f0>
                }
                else if (c == 'x')
8021b12c:	e0bff807 	ldb	r2,-32(fp)
8021b130:	10801e18 	cmpnei	r2,r2,120
8021b134:	1000341e 	bne	r2,zero,8021b208 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
8021b138:	e0bffe17 	ldw	r2,-8(fp)
8021b13c:	10c00104 	addi	r3,r2,4
8021b140:	e0fffe15 	stw	r3,-8(fp)
8021b144:	10800017 	ldw	r2,0(r2)
8021b148:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
8021b14c:	e0bffb17 	ldw	r2,-20(fp)
8021b150:	1000031e 	bne	r2,zero,8021b160 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
8021b154:	01000c04 	movi	r4,48
8021b158:	021b2a40 	call	8021b2a4 <alt_putchar>
                        continue;
8021b15c:	00004206 	br	8021b268 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
8021b160:	00800704 	movi	r2,28
8021b164:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
8021b168:	00000306 	br	8021b178 <alt_printf+0x100>
                        digit_shift -= 4;
8021b16c:	e0bff917 	ldw	r2,-28(fp)
8021b170:	10bfff04 	addi	r2,r2,-4
8021b174:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
8021b178:	00c003c4 	movi	r3,15
8021b17c:	e0bff917 	ldw	r2,-28(fp)
8021b180:	1884983a 	sll	r2,r3,r2
8021b184:	1007883a 	mov	r3,r2
8021b188:	e0bffb17 	ldw	r2,-20(fp)
8021b18c:	1884703a 	and	r2,r3,r2
8021b190:	103ff626 	beq	r2,zero,8021b16c <__reset+0xfa1fb16c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8021b194:	00001906 	br	8021b1fc <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
8021b198:	00c003c4 	movi	r3,15
8021b19c:	e0bff917 	ldw	r2,-28(fp)
8021b1a0:	1884983a 	sll	r2,r3,r2
8021b1a4:	1007883a 	mov	r3,r2
8021b1a8:	e0bffb17 	ldw	r2,-20(fp)
8021b1ac:	1886703a 	and	r3,r3,r2
8021b1b0:	e0bff917 	ldw	r2,-28(fp)
8021b1b4:	1884d83a 	srl	r2,r3,r2
8021b1b8:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
8021b1bc:	e0bffc17 	ldw	r2,-16(fp)
8021b1c0:	108002a8 	cmpgeui	r2,r2,10
8021b1c4:	1000041e 	bne	r2,zero,8021b1d8 <alt_printf+0x160>
                            c = '0' + digit;
8021b1c8:	e0bffc17 	ldw	r2,-16(fp)
8021b1cc:	10800c04 	addi	r2,r2,48
8021b1d0:	e0bff805 	stb	r2,-32(fp)
8021b1d4:	00000306 	br	8021b1e4 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
8021b1d8:	e0bffc17 	ldw	r2,-16(fp)
8021b1dc:	108015c4 	addi	r2,r2,87
8021b1e0:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
8021b1e4:	e0bff807 	ldb	r2,-32(fp)
8021b1e8:	1009883a 	mov	r4,r2
8021b1ec:	021b2a40 	call	8021b2a4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8021b1f0:	e0bff917 	ldw	r2,-28(fp)
8021b1f4:	10bfff04 	addi	r2,r2,-4
8021b1f8:	e0bff915 	stw	r2,-28(fp)
8021b1fc:	e0bff917 	ldw	r2,-28(fp)
8021b200:	103fe50e 	bge	r2,zero,8021b198 <__reset+0xfa1fb198>
8021b204:	00001806 	br	8021b268 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
8021b208:	e0bff807 	ldb	r2,-32(fp)
8021b20c:	10801cd8 	cmpnei	r2,r2,115
8021b210:	1000151e 	bne	r2,zero,8021b268 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
8021b214:	e0bffe17 	ldw	r2,-8(fp)
8021b218:	10c00104 	addi	r3,r2,4
8021b21c:	e0fffe15 	stw	r3,-8(fp)
8021b220:	10800017 	ldw	r2,0(r2)
8021b224:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
8021b228:	00000906 	br	8021b250 <alt_printf+0x1d8>
                      alt_putchar(*s++);
8021b22c:	e0bffa17 	ldw	r2,-24(fp)
8021b230:	10c00044 	addi	r3,r2,1
8021b234:	e0fffa15 	stw	r3,-24(fp)
8021b238:	10800003 	ldbu	r2,0(r2)
8021b23c:	10803fcc 	andi	r2,r2,255
8021b240:	1080201c 	xori	r2,r2,128
8021b244:	10bfe004 	addi	r2,r2,-128
8021b248:	1009883a 	mov	r4,r2
8021b24c:	021b2a40 	call	8021b2a4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
8021b250:	e0bffa17 	ldw	r2,-24(fp)
8021b254:	10800003 	ldbu	r2,0(r2)
8021b258:	10803fcc 	andi	r2,r2,255
8021b25c:	1080201c 	xori	r2,r2,128
8021b260:	10bfe004 	addi	r2,r2,-128
8021b264:	103ff11e 	bne	r2,zero,8021b22c <__reset+0xfa1fb22c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
8021b268:	e0bff717 	ldw	r2,-36(fp)
8021b26c:	10c00044 	addi	r3,r2,1
8021b270:	e0fff715 	stw	r3,-36(fp)
8021b274:	10800003 	ldbu	r2,0(r2)
8021b278:	e0bff805 	stb	r2,-32(fp)
8021b27c:	e0bff807 	ldb	r2,-32(fp)
8021b280:	103f8a1e 	bne	r2,zero,8021b0ac <__reset+0xfa1fb0ac>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8021b284:	00000106 	br	8021b28c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
8021b288:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8021b28c:	0001883a 	nop
8021b290:	e037883a 	mov	sp,fp
8021b294:	dfc00117 	ldw	ra,4(sp)
8021b298:	df000017 	ldw	fp,0(sp)
8021b29c:	dec00504 	addi	sp,sp,20
8021b2a0:	f800283a 	ret

8021b2a4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
8021b2a4:	defffd04 	addi	sp,sp,-12
8021b2a8:	dfc00215 	stw	ra,8(sp)
8021b2ac:	df000115 	stw	fp,4(sp)
8021b2b0:	df000104 	addi	fp,sp,4
8021b2b4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
8021b2b8:	d0a00217 	ldw	r2,-32760(gp)
8021b2bc:	10800217 	ldw	r2,8(r2)
8021b2c0:	100b883a 	mov	r5,r2
8021b2c4:	e13fff17 	ldw	r4,-4(fp)
8021b2c8:	021b6b40 	call	8021b6b4 <putc>
#endif
#endif
}
8021b2cc:	e037883a 	mov	sp,fp
8021b2d0:	dfc00117 	ldw	ra,4(sp)
8021b2d4:	df000017 	ldw	fp,0(sp)
8021b2d8:	dec00204 	addi	sp,sp,8
8021b2dc:	f800283a 	ret

8021b2e0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
8021b2e0:	deffff04 	addi	sp,sp,-4
8021b2e4:	df000015 	stw	fp,0(sp)
8021b2e8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
8021b2ec:	000170fa 	wrctl	ienable,zero
}
8021b2f0:	0001883a 	nop
8021b2f4:	e037883a 	mov	sp,fp
8021b2f8:	df000017 	ldw	fp,0(sp)
8021b2fc:	dec00104 	addi	sp,sp,4
8021b300:	f800283a 	ret

8021b304 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8021b304:	defffb04 	addi	sp,sp,-20
8021b308:	dfc00415 	stw	ra,16(sp)
8021b30c:	df000315 	stw	fp,12(sp)
8021b310:	df000304 	addi	fp,sp,12
8021b314:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
8021b318:	d0a00717 	ldw	r2,-32740(gp)
8021b31c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8021b320:	00003106 	br	8021b3e8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
8021b324:	e0bffd17 	ldw	r2,-12(fp)
8021b328:	10800217 	ldw	r2,8(r2)
8021b32c:	1009883a 	mov	r4,r2
8021b330:	0206a0c0 	call	80206a0c <strlen>
8021b334:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
8021b338:	e0bffd17 	ldw	r2,-12(fp)
8021b33c:	10c00217 	ldw	r3,8(r2)
8021b340:	e0bffe17 	ldw	r2,-8(fp)
8021b344:	10bfffc4 	addi	r2,r2,-1
8021b348:	1885883a 	add	r2,r3,r2
8021b34c:	10800003 	ldbu	r2,0(r2)
8021b350:	10803fcc 	andi	r2,r2,255
8021b354:	1080201c 	xori	r2,r2,128
8021b358:	10bfe004 	addi	r2,r2,-128
8021b35c:	10800bd8 	cmpnei	r2,r2,47
8021b360:	1000031e 	bne	r2,zero,8021b370 <alt_find_file+0x6c>
    {
      len -= 1;
8021b364:	e0bffe17 	ldw	r2,-8(fp)
8021b368:	10bfffc4 	addi	r2,r2,-1
8021b36c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8021b370:	e0bffe17 	ldw	r2,-8(fp)
8021b374:	e0ffff17 	ldw	r3,-4(fp)
8021b378:	1885883a 	add	r2,r3,r2
8021b37c:	10800003 	ldbu	r2,0(r2)
8021b380:	10803fcc 	andi	r2,r2,255
8021b384:	1080201c 	xori	r2,r2,128
8021b388:	10bfe004 	addi	r2,r2,-128
8021b38c:	10800be0 	cmpeqi	r2,r2,47
8021b390:	1000081e 	bne	r2,zero,8021b3b4 <alt_find_file+0xb0>
8021b394:	e0bffe17 	ldw	r2,-8(fp)
8021b398:	e0ffff17 	ldw	r3,-4(fp)
8021b39c:	1885883a 	add	r2,r3,r2
8021b3a0:	10800003 	ldbu	r2,0(r2)
8021b3a4:	10803fcc 	andi	r2,r2,255
8021b3a8:	1080201c 	xori	r2,r2,128
8021b3ac:	10bfe004 	addi	r2,r2,-128
8021b3b0:	10000a1e 	bne	r2,zero,8021b3dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
8021b3b4:	e0bffd17 	ldw	r2,-12(fp)
8021b3b8:	10800217 	ldw	r2,8(r2)
8021b3bc:	e0fffe17 	ldw	r3,-8(fp)
8021b3c0:	180d883a 	mov	r6,r3
8021b3c4:	e17fff17 	ldw	r5,-4(fp)
8021b3c8:	1009883a 	mov	r4,r2
8021b3cc:	021b5980 	call	8021b598 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8021b3d0:	1000021e 	bne	r2,zero,8021b3dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
8021b3d4:	e0bffd17 	ldw	r2,-12(fp)
8021b3d8:	00000706 	br	8021b3f8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
8021b3dc:	e0bffd17 	ldw	r2,-12(fp)
8021b3e0:	10800017 	ldw	r2,0(r2)
8021b3e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8021b3e8:	e0fffd17 	ldw	r3,-12(fp)
8021b3ec:	d0a00704 	addi	r2,gp,-32740
8021b3f0:	18bfcc1e 	bne	r3,r2,8021b324 <__reset+0xfa1fb324>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
8021b3f4:	0005883a 	mov	r2,zero
}
8021b3f8:	e037883a 	mov	sp,fp
8021b3fc:	dfc00117 	ldw	ra,4(sp)
8021b400:	df000017 	ldw	fp,0(sp)
8021b404:	dec00204 	addi	sp,sp,8
8021b408:	f800283a 	ret

8021b40c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
8021b40c:	defffc04 	addi	sp,sp,-16
8021b410:	df000315 	stw	fp,12(sp)
8021b414:	df000304 	addi	fp,sp,12
8021b418:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
8021b41c:	00bffa04 	movi	r2,-24
8021b420:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8021b424:	e03ffd15 	stw	zero,-12(fp)
8021b428:	00001906 	br	8021b490 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
8021b42c:	00a008b4 	movhi	r2,32802
8021b430:	10b5eb04 	addi	r2,r2,-10324
8021b434:	e0fffd17 	ldw	r3,-12(fp)
8021b438:	18c00324 	muli	r3,r3,12
8021b43c:	10c5883a 	add	r2,r2,r3
8021b440:	10800017 	ldw	r2,0(r2)
8021b444:	10000f1e 	bne	r2,zero,8021b484 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
8021b448:	00a008b4 	movhi	r2,32802
8021b44c:	10b5eb04 	addi	r2,r2,-10324
8021b450:	e0fffd17 	ldw	r3,-12(fp)
8021b454:	18c00324 	muli	r3,r3,12
8021b458:	10c5883a 	add	r2,r2,r3
8021b45c:	e0ffff17 	ldw	r3,-4(fp)
8021b460:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
8021b464:	d0e00b17 	ldw	r3,-32724(gp)
8021b468:	e0bffd17 	ldw	r2,-12(fp)
8021b46c:	1880020e 	bge	r3,r2,8021b478 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
8021b470:	e0bffd17 	ldw	r2,-12(fp)
8021b474:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
8021b478:	e0bffd17 	ldw	r2,-12(fp)
8021b47c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
8021b480:	00000606 	br	8021b49c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8021b484:	e0bffd17 	ldw	r2,-12(fp)
8021b488:	10800044 	addi	r2,r2,1
8021b48c:	e0bffd15 	stw	r2,-12(fp)
8021b490:	e0bffd17 	ldw	r2,-12(fp)
8021b494:	10800810 	cmplti	r2,r2,32
8021b498:	103fe41e 	bne	r2,zero,8021b42c <__reset+0xfa1fb42c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
8021b49c:	e0bffe17 	ldw	r2,-8(fp)
}
8021b4a0:	e037883a 	mov	sp,fp
8021b4a4:	df000017 	ldw	fp,0(sp)
8021b4a8:	dec00104 	addi	sp,sp,4
8021b4ac:	f800283a 	ret

8021b4b0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
8021b4b0:	defffe04 	addi	sp,sp,-8
8021b4b4:	df000115 	stw	fp,4(sp)
8021b4b8:	df000104 	addi	fp,sp,4
8021b4bc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
8021b4c0:	e0bfff17 	ldw	r2,-4(fp)
8021b4c4:	10bffe84 	addi	r2,r2,-6
8021b4c8:	10c00428 	cmpgeui	r3,r2,16
8021b4cc:	18001a1e 	bne	r3,zero,8021b538 <alt_exception_cause_generated_bad_addr+0x88>
8021b4d0:	100690ba 	slli	r3,r2,2
8021b4d4:	00a008b4 	movhi	r2,32802
8021b4d8:	10ad3a04 	addi	r2,r2,-19224
8021b4dc:	1885883a 	add	r2,r3,r2
8021b4e0:	10800017 	ldw	r2,0(r2)
8021b4e4:	1000683a 	jmp	r2
8021b4e8:	8021b528 	cmpgeui	zero,r16,34516
8021b4ec:	8021b528 	cmpgeui	zero,r16,34516
8021b4f0:	8021b538 	rdprs	zero,r16,-31020
8021b4f4:	8021b538 	rdprs	zero,r16,-31020
8021b4f8:	8021b538 	rdprs	zero,r16,-31020
8021b4fc:	8021b528 	cmpgeui	zero,r16,34516
8021b500:	8021b530 	cmpltui	zero,r16,34516
8021b504:	8021b538 	rdprs	zero,r16,-31020
8021b508:	8021b528 	cmpgeui	zero,r16,34516
8021b50c:	8021b528 	cmpgeui	zero,r16,34516
8021b510:	8021b538 	rdprs	zero,r16,-31020
8021b514:	8021b528 	cmpgeui	zero,r16,34516
8021b518:	8021b530 	cmpltui	zero,r16,34516
8021b51c:	8021b538 	rdprs	zero,r16,-31020
8021b520:	8021b538 	rdprs	zero,r16,-31020
8021b524:	8021b528 	cmpgeui	zero,r16,34516
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
8021b528:	00800044 	movi	r2,1
8021b52c:	00000306 	br	8021b53c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
8021b530:	0005883a 	mov	r2,zero
8021b534:	00000106 	br	8021b53c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
8021b538:	0005883a 	mov	r2,zero
  }
}
8021b53c:	e037883a 	mov	sp,fp
8021b540:	df000017 	ldw	fp,0(sp)
8021b544:	dec00104 	addi	sp,sp,4
8021b548:	f800283a 	ret

8021b54c <atexit>:
8021b54c:	200b883a 	mov	r5,r4
8021b550:	000f883a 	mov	r7,zero
8021b554:	000d883a 	mov	r6,zero
8021b558:	0009883a 	mov	r4,zero
8021b55c:	021b77c1 	jmpi	8021b77c <__register_exitproc>

8021b560 <exit>:
8021b560:	defffe04 	addi	sp,sp,-8
8021b564:	000b883a 	mov	r5,zero
8021b568:	dc000015 	stw	r16,0(sp)
8021b56c:	dfc00115 	stw	ra,4(sp)
8021b570:	2021883a 	mov	r16,r4
8021b574:	021b8940 	call	8021b894 <__call_exitprocs>
8021b578:	00a008b4 	movhi	r2,32802
8021b57c:	10bad404 	addi	r2,r2,-5296
8021b580:	11000017 	ldw	r4,0(r2)
8021b584:	20800f17 	ldw	r2,60(r4)
8021b588:	10000126 	beq	r2,zero,8021b590 <exit+0x30>
8021b58c:	103ee83a 	callr	r2
8021b590:	8009883a 	mov	r4,r16
8021b594:	021ba140 	call	8021ba14 <_exit>

8021b598 <memcmp>:
8021b598:	01c000c4 	movi	r7,3
8021b59c:	3980192e 	bgeu	r7,r6,8021b604 <memcmp+0x6c>
8021b5a0:	2144b03a 	or	r2,r4,r5
8021b5a4:	11c4703a 	and	r2,r2,r7
8021b5a8:	10000f26 	beq	r2,zero,8021b5e8 <memcmp+0x50>
8021b5ac:	20800003 	ldbu	r2,0(r4)
8021b5b0:	28c00003 	ldbu	r3,0(r5)
8021b5b4:	10c0151e 	bne	r2,r3,8021b60c <memcmp+0x74>
8021b5b8:	31bfff84 	addi	r6,r6,-2
8021b5bc:	01ffffc4 	movi	r7,-1
8021b5c0:	00000406 	br	8021b5d4 <memcmp+0x3c>
8021b5c4:	20800003 	ldbu	r2,0(r4)
8021b5c8:	28c00003 	ldbu	r3,0(r5)
8021b5cc:	31bfffc4 	addi	r6,r6,-1
8021b5d0:	10c00e1e 	bne	r2,r3,8021b60c <memcmp+0x74>
8021b5d4:	21000044 	addi	r4,r4,1
8021b5d8:	29400044 	addi	r5,r5,1
8021b5dc:	31fff91e 	bne	r6,r7,8021b5c4 <__reset+0xfa1fb5c4>
8021b5e0:	0005883a 	mov	r2,zero
8021b5e4:	f800283a 	ret
8021b5e8:	20c00017 	ldw	r3,0(r4)
8021b5ec:	28800017 	ldw	r2,0(r5)
8021b5f0:	18bfee1e 	bne	r3,r2,8021b5ac <__reset+0xfa1fb5ac>
8021b5f4:	31bfff04 	addi	r6,r6,-4
8021b5f8:	21000104 	addi	r4,r4,4
8021b5fc:	29400104 	addi	r5,r5,4
8021b600:	39bff936 	bltu	r7,r6,8021b5e8 <__reset+0xfa1fb5e8>
8021b604:	303fe91e 	bne	r6,zero,8021b5ac <__reset+0xfa1fb5ac>
8021b608:	003ff506 	br	8021b5e0 <__reset+0xfa1fb5e0>
8021b60c:	10c5c83a 	sub	r2,r2,r3
8021b610:	f800283a 	ret

8021b614 <_putc_r>:
8021b614:	defffc04 	addi	sp,sp,-16
8021b618:	dc000215 	stw	r16,8(sp)
8021b61c:	dfc00315 	stw	ra,12(sp)
8021b620:	2021883a 	mov	r16,r4
8021b624:	20000226 	beq	r4,zero,8021b630 <_putc_r+0x1c>
8021b628:	20800e17 	ldw	r2,56(r4)
8021b62c:	10001b26 	beq	r2,zero,8021b69c <_putc_r+0x88>
8021b630:	30800217 	ldw	r2,8(r6)
8021b634:	10bfffc4 	addi	r2,r2,-1
8021b638:	30800215 	stw	r2,8(r6)
8021b63c:	10000a16 	blt	r2,zero,8021b668 <_putc_r+0x54>
8021b640:	30800017 	ldw	r2,0(r6)
8021b644:	11400005 	stb	r5,0(r2)
8021b648:	30800017 	ldw	r2,0(r6)
8021b64c:	10c00044 	addi	r3,r2,1
8021b650:	30c00015 	stw	r3,0(r6)
8021b654:	10800003 	ldbu	r2,0(r2)
8021b658:	dfc00317 	ldw	ra,12(sp)
8021b65c:	dc000217 	ldw	r16,8(sp)
8021b660:	dec00404 	addi	sp,sp,16
8021b664:	f800283a 	ret
8021b668:	30c00617 	ldw	r3,24(r6)
8021b66c:	10c00616 	blt	r2,r3,8021b688 <_putc_r+0x74>
8021b670:	30800017 	ldw	r2,0(r6)
8021b674:	00c00284 	movi	r3,10
8021b678:	11400005 	stb	r5,0(r2)
8021b67c:	30800017 	ldw	r2,0(r6)
8021b680:	11400003 	ldbu	r5,0(r2)
8021b684:	28fff11e 	bne	r5,r3,8021b64c <__reset+0xfa1fb64c>
8021b688:	8009883a 	mov	r4,r16
8021b68c:	dfc00317 	ldw	ra,12(sp)
8021b690:	dc000217 	ldw	r16,8(sp)
8021b694:	dec00404 	addi	sp,sp,16
8021b698:	021307c1 	jmpi	8021307c <__swbuf_r>
8021b69c:	d9400015 	stw	r5,0(sp)
8021b6a0:	d9800115 	stw	r6,4(sp)
8021b6a4:	020cf200 	call	8020cf20 <__sinit>
8021b6a8:	d9800117 	ldw	r6,4(sp)
8021b6ac:	d9400017 	ldw	r5,0(sp)
8021b6b0:	003fdf06 	br	8021b630 <__reset+0xfa1fb630>

8021b6b4 <putc>:
8021b6b4:	00a008b4 	movhi	r2,32802
8021b6b8:	defffc04 	addi	sp,sp,-16
8021b6bc:	10bad504 	addi	r2,r2,-5292
8021b6c0:	dc000115 	stw	r16,4(sp)
8021b6c4:	14000017 	ldw	r16,0(r2)
8021b6c8:	dc400215 	stw	r17,8(sp)
8021b6cc:	dfc00315 	stw	ra,12(sp)
8021b6d0:	2023883a 	mov	r17,r4
8021b6d4:	80000226 	beq	r16,zero,8021b6e0 <putc+0x2c>
8021b6d8:	80800e17 	ldw	r2,56(r16)
8021b6dc:	10001a26 	beq	r2,zero,8021b748 <putc+0x94>
8021b6e0:	28800217 	ldw	r2,8(r5)
8021b6e4:	10bfffc4 	addi	r2,r2,-1
8021b6e8:	28800215 	stw	r2,8(r5)
8021b6ec:	10000b16 	blt	r2,zero,8021b71c <putc+0x68>
8021b6f0:	28800017 	ldw	r2,0(r5)
8021b6f4:	14400005 	stb	r17,0(r2)
8021b6f8:	28800017 	ldw	r2,0(r5)
8021b6fc:	10c00044 	addi	r3,r2,1
8021b700:	28c00015 	stw	r3,0(r5)
8021b704:	10800003 	ldbu	r2,0(r2)
8021b708:	dfc00317 	ldw	ra,12(sp)
8021b70c:	dc400217 	ldw	r17,8(sp)
8021b710:	dc000117 	ldw	r16,4(sp)
8021b714:	dec00404 	addi	sp,sp,16
8021b718:	f800283a 	ret
8021b71c:	28c00617 	ldw	r3,24(r5)
8021b720:	10c00e16 	blt	r2,r3,8021b75c <putc+0xa8>
8021b724:	28800017 	ldw	r2,0(r5)
8021b728:	01000284 	movi	r4,10
8021b72c:	14400005 	stb	r17,0(r2)
8021b730:	28800017 	ldw	r2,0(r5)
8021b734:	10c00003 	ldbu	r3,0(r2)
8021b738:	193ff01e 	bne	r3,r4,8021b6fc <__reset+0xfa1fb6fc>
8021b73c:	280d883a 	mov	r6,r5
8021b740:	180b883a 	mov	r5,r3
8021b744:	00000706 	br	8021b764 <putc+0xb0>
8021b748:	8009883a 	mov	r4,r16
8021b74c:	d9400015 	stw	r5,0(sp)
8021b750:	020cf200 	call	8020cf20 <__sinit>
8021b754:	d9400017 	ldw	r5,0(sp)
8021b758:	003fe106 	br	8021b6e0 <__reset+0xfa1fb6e0>
8021b75c:	280d883a 	mov	r6,r5
8021b760:	880b883a 	mov	r5,r17
8021b764:	8009883a 	mov	r4,r16
8021b768:	dfc00317 	ldw	ra,12(sp)
8021b76c:	dc400217 	ldw	r17,8(sp)
8021b770:	dc000117 	ldw	r16,4(sp)
8021b774:	dec00404 	addi	sp,sp,16
8021b778:	021307c1 	jmpi	8021307c <__swbuf_r>

8021b77c <__register_exitproc>:
8021b77c:	defffa04 	addi	sp,sp,-24
8021b780:	dc000315 	stw	r16,12(sp)
8021b784:	042008b4 	movhi	r16,32802
8021b788:	843ad404 	addi	r16,r16,-5296
8021b78c:	80c00017 	ldw	r3,0(r16)
8021b790:	dc400415 	stw	r17,16(sp)
8021b794:	dfc00515 	stw	ra,20(sp)
8021b798:	18805217 	ldw	r2,328(r3)
8021b79c:	2023883a 	mov	r17,r4
8021b7a0:	10003726 	beq	r2,zero,8021b880 <__register_exitproc+0x104>
8021b7a4:	10c00117 	ldw	r3,4(r2)
8021b7a8:	010007c4 	movi	r4,31
8021b7ac:	20c00e16 	blt	r4,r3,8021b7e8 <__register_exitproc+0x6c>
8021b7b0:	1a000044 	addi	r8,r3,1
8021b7b4:	8800221e 	bne	r17,zero,8021b840 <__register_exitproc+0xc4>
8021b7b8:	18c00084 	addi	r3,r3,2
8021b7bc:	18c7883a 	add	r3,r3,r3
8021b7c0:	18c7883a 	add	r3,r3,r3
8021b7c4:	12000115 	stw	r8,4(r2)
8021b7c8:	10c7883a 	add	r3,r2,r3
8021b7cc:	19400015 	stw	r5,0(r3)
8021b7d0:	0005883a 	mov	r2,zero
8021b7d4:	dfc00517 	ldw	ra,20(sp)
8021b7d8:	dc400417 	ldw	r17,16(sp)
8021b7dc:	dc000317 	ldw	r16,12(sp)
8021b7e0:	dec00604 	addi	sp,sp,24
8021b7e4:	f800283a 	ret
8021b7e8:	00800034 	movhi	r2,0
8021b7ec:	10800004 	addi	r2,r2,0
8021b7f0:	10002626 	beq	r2,zero,8021b88c <__register_exitproc+0x110>
8021b7f4:	01006404 	movi	r4,400
8021b7f8:	d9400015 	stw	r5,0(sp)
8021b7fc:	d9800115 	stw	r6,4(sp)
8021b800:	d9c00215 	stw	r7,8(sp)
8021b804:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
8021b808:	d9400017 	ldw	r5,0(sp)
8021b80c:	d9800117 	ldw	r6,4(sp)
8021b810:	d9c00217 	ldw	r7,8(sp)
8021b814:	10001d26 	beq	r2,zero,8021b88c <__register_exitproc+0x110>
8021b818:	81000017 	ldw	r4,0(r16)
8021b81c:	10000115 	stw	zero,4(r2)
8021b820:	02000044 	movi	r8,1
8021b824:	22405217 	ldw	r9,328(r4)
8021b828:	0007883a 	mov	r3,zero
8021b82c:	12400015 	stw	r9,0(r2)
8021b830:	20805215 	stw	r2,328(r4)
8021b834:	10006215 	stw	zero,392(r2)
8021b838:	10006315 	stw	zero,396(r2)
8021b83c:	883fde26 	beq	r17,zero,8021b7b8 <__reset+0xfa1fb7b8>
8021b840:	18c9883a 	add	r4,r3,r3
8021b844:	2109883a 	add	r4,r4,r4
8021b848:	1109883a 	add	r4,r2,r4
8021b84c:	21802215 	stw	r6,136(r4)
8021b850:	01800044 	movi	r6,1
8021b854:	12406217 	ldw	r9,392(r2)
8021b858:	30cc983a 	sll	r6,r6,r3
8021b85c:	4992b03a 	or	r9,r9,r6
8021b860:	12406215 	stw	r9,392(r2)
8021b864:	21c04215 	stw	r7,264(r4)
8021b868:	01000084 	movi	r4,2
8021b86c:	893fd21e 	bne	r17,r4,8021b7b8 <__reset+0xfa1fb7b8>
8021b870:	11006317 	ldw	r4,396(r2)
8021b874:	218cb03a 	or	r6,r4,r6
8021b878:	11806315 	stw	r6,396(r2)
8021b87c:	003fce06 	br	8021b7b8 <__reset+0xfa1fb7b8>
8021b880:	18805304 	addi	r2,r3,332
8021b884:	18805215 	stw	r2,328(r3)
8021b888:	003fc606 	br	8021b7a4 <__reset+0xfa1fb7a4>
8021b88c:	00bfffc4 	movi	r2,-1
8021b890:	003fd006 	br	8021b7d4 <__reset+0xfa1fb7d4>

8021b894 <__call_exitprocs>:
8021b894:	defff504 	addi	sp,sp,-44
8021b898:	df000915 	stw	fp,36(sp)
8021b89c:	dd400615 	stw	r21,24(sp)
8021b8a0:	dc800315 	stw	r18,12(sp)
8021b8a4:	dfc00a15 	stw	ra,40(sp)
8021b8a8:	ddc00815 	stw	r23,32(sp)
8021b8ac:	dd800715 	stw	r22,28(sp)
8021b8b0:	dd000515 	stw	r20,20(sp)
8021b8b4:	dcc00415 	stw	r19,16(sp)
8021b8b8:	dc400215 	stw	r17,8(sp)
8021b8bc:	dc000115 	stw	r16,4(sp)
8021b8c0:	d9000015 	stw	r4,0(sp)
8021b8c4:	2839883a 	mov	fp,r5
8021b8c8:	04800044 	movi	r18,1
8021b8cc:	057fffc4 	movi	r21,-1
8021b8d0:	00a008b4 	movhi	r2,32802
8021b8d4:	10bad404 	addi	r2,r2,-5296
8021b8d8:	12000017 	ldw	r8,0(r2)
8021b8dc:	45005217 	ldw	r20,328(r8)
8021b8e0:	44c05204 	addi	r19,r8,328
8021b8e4:	a0001c26 	beq	r20,zero,8021b958 <__call_exitprocs+0xc4>
8021b8e8:	a0800117 	ldw	r2,4(r20)
8021b8ec:	15ffffc4 	addi	r23,r2,-1
8021b8f0:	b8000d16 	blt	r23,zero,8021b928 <__call_exitprocs+0x94>
8021b8f4:	14000044 	addi	r16,r2,1
8021b8f8:	8421883a 	add	r16,r16,r16
8021b8fc:	8421883a 	add	r16,r16,r16
8021b900:	84402004 	addi	r17,r16,128
8021b904:	a463883a 	add	r17,r20,r17
8021b908:	a421883a 	add	r16,r20,r16
8021b90c:	e0001e26 	beq	fp,zero,8021b988 <__call_exitprocs+0xf4>
8021b910:	80804017 	ldw	r2,256(r16)
8021b914:	e0801c26 	beq	fp,r2,8021b988 <__call_exitprocs+0xf4>
8021b918:	bdffffc4 	addi	r23,r23,-1
8021b91c:	843fff04 	addi	r16,r16,-4
8021b920:	8c7fff04 	addi	r17,r17,-4
8021b924:	bd7ff91e 	bne	r23,r21,8021b90c <__reset+0xfa1fb90c>
8021b928:	00800034 	movhi	r2,0
8021b92c:	10800004 	addi	r2,r2,0
8021b930:	10000926 	beq	r2,zero,8021b958 <__call_exitprocs+0xc4>
8021b934:	a0800117 	ldw	r2,4(r20)
8021b938:	1000301e 	bne	r2,zero,8021b9fc <__call_exitprocs+0x168>
8021b93c:	a0800017 	ldw	r2,0(r20)
8021b940:	10003226 	beq	r2,zero,8021ba0c <__call_exitprocs+0x178>
8021b944:	a009883a 	mov	r4,r20
8021b948:	98800015 	stw	r2,0(r19)
8021b94c:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
8021b950:	9d000017 	ldw	r20,0(r19)
8021b954:	a03fe41e 	bne	r20,zero,8021b8e8 <__reset+0xfa1fb8e8>
8021b958:	dfc00a17 	ldw	ra,40(sp)
8021b95c:	df000917 	ldw	fp,36(sp)
8021b960:	ddc00817 	ldw	r23,32(sp)
8021b964:	dd800717 	ldw	r22,28(sp)
8021b968:	dd400617 	ldw	r21,24(sp)
8021b96c:	dd000517 	ldw	r20,20(sp)
8021b970:	dcc00417 	ldw	r19,16(sp)
8021b974:	dc800317 	ldw	r18,12(sp)
8021b978:	dc400217 	ldw	r17,8(sp)
8021b97c:	dc000117 	ldw	r16,4(sp)
8021b980:	dec00b04 	addi	sp,sp,44
8021b984:	f800283a 	ret
8021b988:	a0800117 	ldw	r2,4(r20)
8021b98c:	80c00017 	ldw	r3,0(r16)
8021b990:	10bfffc4 	addi	r2,r2,-1
8021b994:	15c01426 	beq	r2,r23,8021b9e8 <__call_exitprocs+0x154>
8021b998:	80000015 	stw	zero,0(r16)
8021b99c:	183fde26 	beq	r3,zero,8021b918 <__reset+0xfa1fb918>
8021b9a0:	95c8983a 	sll	r4,r18,r23
8021b9a4:	a0806217 	ldw	r2,392(r20)
8021b9a8:	a5800117 	ldw	r22,4(r20)
8021b9ac:	2084703a 	and	r2,r4,r2
8021b9b0:	10000b26 	beq	r2,zero,8021b9e0 <__call_exitprocs+0x14c>
8021b9b4:	a0806317 	ldw	r2,396(r20)
8021b9b8:	2088703a 	and	r4,r4,r2
8021b9bc:	20000c1e 	bne	r4,zero,8021b9f0 <__call_exitprocs+0x15c>
8021b9c0:	89400017 	ldw	r5,0(r17)
8021b9c4:	d9000017 	ldw	r4,0(sp)
8021b9c8:	183ee83a 	callr	r3
8021b9cc:	a0800117 	ldw	r2,4(r20)
8021b9d0:	15bfbf1e 	bne	r2,r22,8021b8d0 <__reset+0xfa1fb8d0>
8021b9d4:	98800017 	ldw	r2,0(r19)
8021b9d8:	153fcf26 	beq	r2,r20,8021b918 <__reset+0xfa1fb918>
8021b9dc:	003fbc06 	br	8021b8d0 <__reset+0xfa1fb8d0>
8021b9e0:	183ee83a 	callr	r3
8021b9e4:	003ff906 	br	8021b9cc <__reset+0xfa1fb9cc>
8021b9e8:	a5c00115 	stw	r23,4(r20)
8021b9ec:	003feb06 	br	8021b99c <__reset+0xfa1fb99c>
8021b9f0:	89000017 	ldw	r4,0(r17)
8021b9f4:	183ee83a 	callr	r3
8021b9f8:	003ff406 	br	8021b9cc <__reset+0xfa1fb9cc>
8021b9fc:	a0800017 	ldw	r2,0(r20)
8021ba00:	a027883a 	mov	r19,r20
8021ba04:	1029883a 	mov	r20,r2
8021ba08:	003fb606 	br	8021b8e4 <__reset+0xfa1fb8e4>
8021ba0c:	0005883a 	mov	r2,zero
8021ba10:	003ffb06 	br	8021ba00 <__reset+0xfa1fba00>

8021ba14 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
8021ba14:	defffd04 	addi	sp,sp,-12
8021ba18:	df000215 	stw	fp,8(sp)
8021ba1c:	df000204 	addi	fp,sp,8
8021ba20:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
8021ba24:	0001883a 	nop
8021ba28:	e0bfff17 	ldw	r2,-4(fp)
8021ba2c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8021ba30:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
8021ba34:	10000226 	beq	r2,zero,8021ba40 <_exit+0x2c>
    ALT_SIM_FAIL();
8021ba38:	002af070 	cmpltui	zero,zero,43969
8021ba3c:	00000106 	br	8021ba44 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
8021ba40:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
8021ba44:	003fff06 	br	8021ba44 <__reset+0xfa1fba44>
