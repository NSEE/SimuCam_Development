
USB3_Tests.elf:     file format elf32-littlenios2
USB3_Tests.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80200244

Program Header:
    LOAD off    0x00001020 vaddr 0x80200020 paddr 0x80200020 align 2**12
         filesz 0x0001fa18 memsz 0x000200b0 flags rwx
    LOAD off    0x00021000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00021000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  80200020  80200020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001bd64  80200244  80200244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001dd8  8021bfa8  8021bfa8  0001cfa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cb8  8021dd80  8021dd80  0001ed80  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000698  8021fa38  8021fa38  00020a38  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  802200d0  802200d0  00021000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00021000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00021000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001250  00000000  00000000  00021028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003081f  00000000  00000000  00022278  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000be30  00000000  00000000  00052a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000100b2  00000000  00000000  0005e8c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000036d4  00000000  00000000  0006e97c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005eb6  00000000  00000000  00072050  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d8ef  00000000  00000000  00077f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000957f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c90  00000000  00000000  00095838  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0009bffd  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0009c000  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0009c00c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0009c00d  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0009c00e  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0009c012  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0009c016  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0009c01a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0009c025  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0009c030  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  0009c03b  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000053  00000000  00000000  0009c04c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001f5c95  00000000  00000000  0009c09f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
80200020 l    d  .exceptions	00000000 .exceptions
80200244 l    d  .text	00000000 .text
8021bfa8 l    d  .rodata	00000000 .rodata
8021dd80 l    d  .rwdata	00000000 .rwdata
8021fa38 l    d  .bss	00000000 .bss
802200d0 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../USB3_Tests_bsp//obj/HAL/src/crt0.o
80200278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 simucam_dma.c
00000000 l    df *ABS*	00000000 crc.c
8021cab0 l     O .rodata	00000100 crc8_table
8021cbb0 l     O .rodata	00000100 crc8_koop_table
8021ccb0 l     O .rodata	00000200 crc16_table
8021ceb0 l     O .rodata	00000200 crc16_ccitt_table
8021d0b0 l     O .rodata	00000400 crc32_table
00000000 l    df *ABS*	00000000 ftdi.c
8021fa50 l     O .bss	00000004 viRxBuffHoldContext
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
802045bc l     F .text	00000134 msgdma_write_extended_descriptor
802046f0 l     F .text	0000015c msgdma_construct_extended_descriptor
8020484c l     F .text	00000288 msgdma_descriptor_async_transfer
80204ad4 l     F .text	00000348 msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 hello_world.c
8021fa5c l     O .bss	00000004 viFtdiHoldContext
00000000 l    df *ABS*	00000000 pattern.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
8021dd80 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
8021d91e l     O .rodata	00000010 zeroes.4389
8021d92e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
8021d93e l     O .rodata	00000010 zeroes.4404
8020b270 l     F .text	000000bc __sbprintf
8021d94e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
8020b480 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
8020cfb0 l     F .text	00000008 __fp_unlock
8020cfc4 l     F .text	0000019c __sinit.part.1
8020d160 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
8021e1c4 l     O .rwdata	00000020 lc_ctype_charset
8021e1a4 l     O .rwdata	00000020 lc_message_charset
8021e1e4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
8021d97c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
8021dab0 l     O .rodata	00000010 blanks.4332
8021daa0 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
80211820 l     F .text	000000fc __sprint_r.part.0
8021dad0 l     O .rodata	00000010 blanks.4348
8021dac0 l     O .rodata	00000010 zeroes.4349
80212dac l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
80216b2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
80216c58 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
80216c84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
80216ef0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
80216fd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
802171a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8021fa24 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
802175c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
802176f8 l     F .text	00000034 alt_dev_reg
8021e7d0 l     O .rwdata	00001060 jtag_uart_0
8021f830 l     O .rwdata	000000c4 rs232_uart
8021f900 l     O .rwdata	00000060 dma_DDR_M1
8021f960 l     O .rwdata	00000060 dma_DDR_M2
8021f9c0 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
80217a70 l     F .text	0000020c altera_avalon_jtag_uart_irq
80217c7c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
802182b4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
80218564 l     F .text	0000009c altera_avalon_uart_irq
80218600 l     F .text	000000e4 altera_avalon_uart_rxirq
802186e4 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
80218880 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
80218a98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
80218c80 l     F .text	0000003c alt_get_errno
80218cbc l     F .text	00000094 alt_msgdma_write_standard_descriptor
80218d50 l     F .text	0000012c alt_msgdma_write_extended_descriptor
80218e7c l     F .text	00000184 alt_msgdma_irq
80219000 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
8021908c l     F .text	00000154 alt_msgdma_construct_extended_descriptor
802191e0 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
802194b0 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
80219af8 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
80219b9c l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8021ad74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
8021b244 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
8021b384 l     F .text	0000003c alt_get_errno
8021b3c0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
8021faa4 g     O .bss	00000004 alt_instruction_exception_handler
8021ab30 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
8020fa58 g     F .text	00000074 _mprec_log10
80203ef0 g     F .text	00000100 I2C_Read
8020fb44 g     F .text	0000008c __any_on
80213348 g     F .text	00000054 _isatty_r
8021d988 g     O .rodata	00000028 __mprec_tinytens
802170e0 g     F .text	0000007c alt_main
80206c54 g     F .text	000000c0 _puts_r
8021ffd0 g     O .bss	00000100 alt_irq
8021339c g     F .text	00000060 _lseek_r
802039fc g     F .text	0000003c uliFTDInDataLeftInBuffer
80203c48 g     F .text	00000038 vFTDIIrqGlobalEn
80215594 g     F .text	00000088 .hidden __eqdf2
802198d8 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
802200d0 g       *ABS*	00000000 __alt_heap_start
8021fa55 g     O .bss	00000001 SspdConfigControl
80206c18 g     F .text	0000003c printf
802135b4 g     F .text	0000009c _wcrtomb_r
802102d4 g     F .text	0000005c __sseek
8020d300 g     F .text	00000010 __sinit
80204ed4 g     F .text	0000003c iMsgdmaExtendedDescriptorAsyncTransfer
8021345c g     F .text	00000140 __swbuf_r
8020ddc8 g     F .text	0000007c _setlocale_r
8021f9ec g     O .rwdata	00000004 LedsPainelControl
8021fad0 g     O .bss	00000100 cDebugBuffer
8020d168 g     F .text	00000068 __sfmoreglue
80217180 g     F .text	00000024 __malloc_unlock
8021fa58 g     O .bss	00000004 iTimeElapsed
80202598 g     F .text	00000078 uliXorshift32
80206110 g     F .text	00000440 .hidden __divsf3
80203c04 g     F .text	00000044 vFTDIIrqRxBuffInit
8021fa60 g     O .bss	00000004 fp
8020e950 g     F .text	0000015c memmove
8020d2e8 g     F .text	00000018 _cleanup
8020ebd4 g     F .text	000000a8 _Balloc
80219828 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
8021fa3c g     O .bss	00000004 pxDmaM1Dev
802039c4 g     F .text	00000038 ucFTDIGetError
8021561c g     F .text	000000dc .hidden __gtdf2
8021b840 g     F .text	00000024 altera_nios2_gen2_irq_init
8020424c g     F .text	00000130 i2c_write
86020000 g     F .entry	00000000 __reset
802132ec g     F .text	0000005c _fstat_r
8021fa88 g     O .bss	00000004 errno
80210250 g     F .text	00000008 __seofread
802105e4 g     F .text	0000123c ___svfiprintf_internal_r
8021fa94 g     O .bss	00000004 alt_argv
802279ec g       *ABS*	00000000 _gp
80217594 g     F .text	00000030 usleep
802044d4 g     F .text	00000078 bSetBoardLeds
80203b60 g     F .text	000000a4 vFTDIRxBufferIRQHandler
8021a3bc g     F .text	00000144 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
8021e64c g     O .rwdata	00000180 alt_fd_list
8021af14 g     F .text	00000090 alt_find_dev
80206aa0 g     F .text	00000148 memcpy
802036b0 g     F .text	00000074 crc__CRC16CCITTU
8020cfb8 g     F .text	0000000c _cleanup_r
80216880 g     F .text	000000dc .hidden __floatsidf
8021b308 g     F .text	0000007c alt_io_redirect
802156f8 g     F .text	000000f4 .hidden __ltdf2
80205538 g     F .text	000001b0 vFtdiHandleIrq
802026c4 g     F .text	000000bc bSdmaInitM2Dma
8021bfa8 g       *ABS*	00000000 __DTOR_END__
8021a86c g     F .text	000000ac alt_msgdma_start_prefetcher_with_extd_desc_list
8021ab6c g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
8021aadc g     F .text	00000054 alt_msgdma_register_callback
80206d14 g     F .text	00000014 puts
8021ba10 g     F .text	0000009c alt_exception_cause_generated_bad_addr
80210134 g     F .text	00000074 __fpclassifyd
8020f9b4 g     F .text	000000a4 __ratio
80212d90 g     F .text	0000001c __vfiprintf_internal
8020324c g     F .text	00000204 bSdmaDmaM2FtdiTransfer
80217e74 g     F .text	0000021c altera_avalon_jtag_uart_read
8021a028 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
80206be8 g     F .text	00000030 _printf_r
80214344 g     F .text	00000064 .hidden __udivsi3
80216f2c g     F .text	000000a4 isatty
8021fa54 g     O .bss	00000001 LedsBoardControl
8021d9d8 g     O .rodata	000000c8 __mprec_tens
8020de44 g     F .text	0000000c __locale_charset
80206550 g     F .text	000000c8 .hidden __lesf2
80203ff0 g     F .text	00000158 I2C_MultipleRead
8021fa84 g     O .bss	00000004 __malloc_top_pad
8021f9f8 g     O .rwdata	00000004 __mb_cur_max
80203cf0 g     F .text	00000038 vFTDIIrqRxBuffLastRdableEn
8020de74 g     F .text	0000000c _localeconv_r
8020efe0 g     F .text	0000003c __i2b
8020d784 g     F .text	000004bc __sfvwrite_r
802101a8 g     F .text	00000054 _sbrk_r
80203d60 g     F .text	00000038 vFTDIIrqRxCommErrEn
80203514 g     F .text	0000004c crc__CRC8KOOPU
802133fc g     F .text	00000060 _read_r
8021ad4c g     F .text	00000028 alt_dcache_flush
8021fa64 g     O .bss	00000004 iTimeStart
8020215c g     F .text	0000043c bDdr2MemoryRandomReadTest
8021fa18 g     O .rwdata	00000004 alt_max_fd
80212fe0 g     F .text	000000f0 _fclose_r
8020cf80 g     F .text	00000030 fflush
8021fa80 g     O .bss	00000004 __malloc_max_sbrked_mem
80216d70 g     F .text	00000180 alt_irq_register
8020682c g     F .text	00000110 .hidden __extendsfdf2
80203d98 g     F .text	00000080 I2C_TestAdress
80214400 g     F .text	000008ac .hidden __adddf3
802035d8 g     F .text	00000060 crc__CRC16U
8020f75c g     F .text	0000010c __b2d
80219d88 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
8021fa44 g     O .bss	00000004 ESdmaFtdiOperation
80213d14 g     F .text	00000538 .hidden __umoddi3
8021700c g     F .text	000000d4 lseek
8021f9f0 g     O .rwdata	00000004 _global_impure_ptr
802054f4 g     F .text	00000044 bSSDisplayUpdate
80203a38 g     F .text	000000f4 bFTDIRequestFullImage
8020fbd0 g     F .text	00000564 _realloc_r
802200d0 g       *ABS*	00000000 __bss_end
8021b154 g     F .text	000000f0 alt_iic_isr_register
8021748c g     F .text	00000108 alt_tick
8021a970 g     F .text	0000016c alt_msgdma_init
8021379c g     F .text	00000578 .hidden __udivdi3
80213248 g     F .text	00000024 _fputwc_r
8021d9b0 g     O .rodata	00000028 __mprec_bigtens
8020edc4 g     F .text	00000104 __s2b
8021695c g     F .text	000000a8 .hidden __floatunsidf
8020f49c g     F .text	00000060 __mcmp
802184b8 g     F .text	000000ac altera_avalon_uart_init
8021abe4 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
80202be8 g     F .text	00000470 bSdmaDmaM2Transfer
8020d320 g     F .text	00000018 __fp_lock_all
8021b108 g     F .text	0000004c alt_ic_irq_enabled
80203e18 g     F .text	000000d8 I2C_Write
802173f0 g     F .text	0000009c alt_alarm_stop
8021fa8c g     O .bss	00000004 alt_irq_active
802000fc g     F .exceptions	000000d4 alt_irq_handler
8021e624 g     O .rwdata	00000028 alt_dev_null
802199c0 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
802038f4 g     F .text	00000034 vFTDIStop
80204148 g     F .text	0000008c i2c_start
8021a7c0 g     F .text	000000ac alt_msgdma_start_prefetcher_with_std_desc_list
80216c38 g     F .text	00000020 alt_dcache_flush_all
8020eec8 g     F .text	00000068 __hi0bits
80216800 g     F .text	00000080 .hidden __fixdfsi
80200000 g       *ABS*	00000000 __alt_mem_onchip_memory
8021fa10 g     O .rwdata	00000008 alt_dev_list
80217600 g     F .text	000000f8 write
8021bb74 g     F .text	000000a0 _putc_r
80216cc0 g     F .text	000000b0 fstat
802156f8 g     F .text	000000f4 .hidden __ledf2
8020f214 g     F .text	00000140 __pow5mult
80211934 g     F .text	0000145c ___vfiprintf_internal_r
8021fa78 g     O .bss	00000004 __nlocale_changed
802143a8 g     F .text	00000058 .hidden __umodsi3
80219de0 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
802200d0 g       *ABS*	00000000 end
80218ad4 g     F .text	000001ac altera_avalon_uart_write
802179b0 g     F .text	000000c0 altera_avalon_jtag_uart_init
802001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
8021bfa8 g       *ABS*	00000000 __CTOR_LIST__
80240000 g       *ABS*	00000000 __alt_stack_pointer
80201d44 g     F .text	00000418 bDdr2MemoryRandomWriteTest
8021832c g     F .text	0000007c alt_avalon_timer_sc_init
80218408 g     F .text	00000060 altera_avalon_uart_write_fd
8020693c g     F .text	00000064 .hidden __clzsi2
80218468 g     F .text	00000050 altera_avalon_uart_close_fd
80218090 g     F .text	00000224 altera_avalon_jtag_uart_write
8020d310 g     F .text	00000004 __sfp_lock_acquire
8020e86c g     F .text	000000e4 memchr
8020905c g     F .text	000021f8 ___vfprintf_internal_r
80206d28 g     F .text	00000058 _sprintf_r
8020d474 g     F .text	00000310 _free_r
8021b5d8 g     F .text	0000022c alt_printf
8020de50 g     F .text	00000010 __locale_mb_cur_max
80205c50 g     F .text	000001cc vFillCheckMemoryPattern
8021bdf4 g     F .text	00000180 __call_exitprocs
80203724 g     F .text	0000007c crc__CRC16CCITT
8021fa74 g     O .bss	00000004 __mlocale_changed
8021f9fc g     O .rwdata	00000004 __malloc_sbrk_base
80200244 g     F .text	00000038 _start
8021fa9c g     O .bss	00000004 _alt_tick_rate
8020f354 g     F .text	00000148 __lshift
80203058 g     F .text	000001f4 bSdmaDmaM1FtdiTransfer
80205e74 g     F .text	00000054 vLittleToBigEndianMask
80219880 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
8021faa0 g     O .bss	00000004 _alt_nticks
802171e0 g     F .text	000000fc read
80217764 g     F .text	000000e8 alt_sys_init
80206618 g     F .text	00000124 .hidden __floatsisf
80210414 g     F .text	000001d0 __ssprint_r
80200720 g     F .text	00000b74 bDdr2EepromDump
8021bcdc g     F .text	00000118 __register_exitproc
8020f01c g     F .text	000001f8 __multiply
80217d1c g     F .text	00000068 altera_avalon_jtag_uart_close
8021faa8 g     O .bss	00000028 __malloc_current_mallinfo
8020f868 g     F .text	0000014c __d2b
8021784c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
8021b96c g     F .text	000000a4 alt_get_fd
80216a04 g     F .text	00000128 alt_busy_sleep
80212ec8 g     F .text	00000054 _close_r
8020349c g     F .text	00000078 crc__CRC8
80219d30 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
8021baf8 g     F .text	0000007c memcmp
8021790c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
802200d0 g       *ABS*	00000000 __alt_stack_base
8021fa68 g     O .bss	00000004 uliPaylodOffset
8021795c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
802069a0 g     F .text	000000cc _fwrite_r
80219e38 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
8020b32c g     F .text	00000154 __swsetup_r
80214cac g     F .text	000008e8 .hidden __divdf3
8020d1d0 g     F .text	00000118 __sfp
8020facc g     F .text	00000078 __copybits
8021e21c g     O .rwdata	00000408 __malloc_av_
8020d31c g     F .text	00000004 __sinit_lock_release
8021fa38 g     O .bss	00000004 uliInitialState
802041d4 g     F .text	00000078 i2c_stop
802157ec g     F .text	00000718 .hidden __muldf3
802101fc g     F .text	00000054 __sread
8021b864 g     F .text	00000108 alt_find_file
8021adb0 g     F .text	000000a4 alt_dev_llist_insert
8021715c g     F .text	00000024 __malloc_lock
80217340 g     F .text	000000b0 sbrk
80206e84 g     F .text	000021d8 ___svfprintf_internal_r
8020cf24 g     F .text	0000005c _fflush_r
80212f1c g     F .text	000000c4 _calloc_r
8021fa38 g       *ABS*	00000000 __bss_start
8020eaac g     F .text	00000128 memset
8021a918 g     F .text	00000058 alt_msgdma_open
80205ec8 g     F .text	00000248 pattern_createPattern
802056e8 g     F .text	00000344 main
8021fa98 g     O .bss	00000004 alt_envp
8021fa7c g     O .bss	00000004 __malloc_max_total_mem
8021a118 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
802178ac g     F .text	00000060 altera_avalon_jtag_uart_write_fd
8020437c g     F .text	00000158 i2c_read
80203450 g     F .text	0000004c crc__CRC8U
8021359c g     F .text	00000018 __swbuf
80206550 g     F .text	000000c8 .hidden __ltsf2
80210330 g     F .text	00000008 __sclose
80240000 g       *ABS*	00000000 __alt_heap_limit
802130d0 g     F .text	00000014 fclose
8021fa6c g     O .bss	00000004 bStopRx
8020b680 g     F .text	00001688 _dtoa_r
8021a500 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
8020e060 g     F .text	0000080c _malloc_r
80203d28 g     F .text	00000038 vFTDIIrqRxBuffLastEmptyEn
80213710 g     F .text	00000030 __ascii_wctomb
8021fa1c g     O .rwdata	00000004 alt_errno
80219f70 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
80204f4c g     F .text	000004e0 POWER_SPI_RW
8020dc40 g     F .text	000000c4 _fwalk
8021bc14 g     F .text	000000c8 putc
8021424c g     F .text	00000084 .hidden __divsi3
8020d350 g     F .text	00000124 _malloc_trim_r
8021bfa8 g       *ABS*	00000000 __CTOR_END__
8020027c g     F .text	000004a4 bDdr2EepromTest
80210338 g     F .text	000000dc strcmp
8021bfa8 g       *ABS*	00000000 __DTOR_LIST__
80215594 g     F .text	00000088 .hidden __nedf2
8021772c g     F .text	00000038 alt_irq_init
802172dc g     F .text	00000064 alt_release_fd
8021aba8 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
80205a2c g     F .text	00000050 vFtdiInitIrq
8020395c g     F .text	00000034 vFTDIClear
80206d80 g     F .text	0000006c sprintf
80203638 g     F .text	00000078 crc__CRC16
8021d7d2 g     O .rodata	00000100 .hidden __clz_tab
802037a0 g     F .text	0000005c crc__CRC32U
8020134c g     F .text	00000538 bDdr2MemoryWriteTest
8021fa70 g     O .bss	00000004 _PathLocale
80204e1c g     F .text	000000b8 iMsgdmaConstructExtendedMmToMmDescriptor
8021baac g     F .text	00000014 atexit
80212e68 g     F .text	00000060 _write_r
8020de80 g     F .text	00000018 setlocale
80219ed8 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8021f9f4 g     O .rwdata	00000004 _impure_ptr
8021fa90 g     O .bss	00000004 alt_argc
8020cd08 g     F .text	0000021c __sflush_r
8021aeb4 g     F .text	00000060 _do_dtors
8020de6c g     F .text	00000008 __locale_cjk_lang
8021fa48 g     O .bss	00000004 ESdmaBufferSide
80200020 g       .exceptions	00000000 alt_irq_entry
80203560 g     F .text	00000078 crc__CRC8KOOP
8020f6f8 g     F .text	00000064 __ulp
8020d338 g     F .text	00000018 __fp_unlock_all
80203b2c g     F .text	00000034 vFTDIResetFullImage
8021fa08 g     O .rwdata	00000008 alt_fs_list
80203928 g     F .text	00000034 vFTDIStart
8021fbd0 g     O .bss	00000400 xSZData
80202610 g     F .text	000000b4 bSdmaInitM1Dma
8020de98 g     F .text	0000000c localeconv
80203990 g     F .text	00000034 vFTDIAbort
8021afa4 g     F .text	00000050 alt_ic_isr_register
80206a6c g     F .text	00000034 fwrite
802037fc g     F .text	000000f8 crc__CRC32
8021fa38 g       *ABS*	00000000 _edata
802183a8 g     F .text	00000060 altera_avalon_uart_read_fd
802200d0 g       *ABS*	00000000 _end
80201294 g     F .text	000000b8 bDdr2SwitchMemory
802130e4 g     F .text	00000164 __fputwc
80217d84 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
8021b07c g     F .text	0000008c alt_ic_irq_disable
80202780 g     F .text	00000468 bSdmaDmaM1Transfer
80210258 g     F .text	0000007c __swrite
8021fa00 g     O .rwdata	00000004 __malloc_trim_threshold
8020de60 g     F .text	0000000c __locale_msgcharset
80204f10 g     F .text	0000003c iMsgdmaExtendedDescriptorSyncTransfer
8021bac0 g     F .text	00000038 exit
8020dd04 g     F .text	000000c4 _fwalk_reent
8021a2b0 g     F .text	0000010c alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8020673c g     F .text	000000f0 .hidden __floatunsisf
8020f4fc g     F .text	000001fc __mdiff
802142d0 g     F .text	00000074 .hidden __modsi3
80240000 g       *ABS*	00000000 __alt_data_end
80200020 g     F .exceptions	00000000 alt_exception
8020d314 g     F .text	00000004 __sfp_lock_release
8020454c g     F .text	00000070 bSetPainelLeds
80219a50 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
80201884 g     F .text	000004c0 bDdr2MemoryReadTest
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
80219930 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
80205a7c g     F .text	000001d4 vProtocolUsbTestAck
8021882c g     F .text	00000054 altera_avalon_uart_close
80205e1c g     F .text	00000058 uliLittleToBigEndianPixel
8021bf74 g     F .text	00000034 _exit
8021ac20 g     F .text	0000012c alt_alarm_start
80203c80 g     F .text	00000038 vFTDIIrqRxBuff0RdableEn
8021fa4c g     O .bss	00000004 ESdmaChBufferId
8020dea4 g     F .text	000001bc __smakebuf_r
8021fa30 g     O .rwdata	00000008 alt_msgdma_list
80206dec g     F .text	00000098 strlen
8021b484 g     F .text	00000154 open
8021561c g     F .text	000000dc .hidden __gedf2
8021b804 g     F .text	0000003c alt_putchar
80203cb8 g     F .text	00000038 vFTDIIrqRxBuff1RdableEn
8021fa04 g     O .rwdata	00000004 __wctomb
8021191c g     F .text	00000018 __sprint_r
8021fa40 g     O .bss	00000004 pxDmaM2Dev
8021fa20 g     O .rwdata	00000004 alt_priority_mask
8020542c g     F .text	000000c8 bSSDisplayConfig
8021aff4 g     F .text	00000088 alt_ic_irq_enable
8020b254 g     F .text	0000001c __vfprintf_internal
802188bc g     F .text	000001dc altera_avalon_uart_read
80213740 g     F .text	0000005c _wctomb_r
80215f04 g     F .text	000008fc .hidden __subdf3
8020ef30 g     F .text	000000b0 __lo0bits
8021fa28 g     O .rwdata	00000008 alt_alarm_list
8021ae54 g     F .text	00000060 _do_ctors
80213650 g     F .text	000000c0 wcrtomb
80216b68 g     F .text	000000d0 close
8021326c g     F .text	00000080 fputwc
8020d318 g     F .text	00000004 __sinit_lock_acquire
8020eca4 g     F .text	00000120 __multadd
8020ec7c g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

80200020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
80200020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
80200024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
80200028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8020002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
80200030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
80200034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
80200038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8020003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
80200040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
80200044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
80200048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8020004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
80200050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
80200054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
80200058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8020005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
80200060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
80200064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
80200068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8020006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
80200070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
80200074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
80200078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8020007c:	10000326 	beq	r2,zero,8020008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
80200080:	20000226 	beq	r4,zero,8020008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
80200084:	02000fc0 	call	802000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
80200088:	00000706 	br	802000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8020008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
80200090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
80200094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
80200098:	02001d00 	call	802001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8020009c:	1000021e 	bne	r2,zero,802000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
802000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
802000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
802000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
802000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
802000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
802000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
802000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
802000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
802000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
802000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
802000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
802000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
802000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
802000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
802000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
802000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
802000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
802000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
802000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
802000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
802000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
802000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
802000f8:	ef80083a 	eret

802000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
802000fc:	defff904 	addi	sp,sp,-28
80200100:	dfc00615 	stw	ra,24(sp)
80200104:	df000515 	stw	fp,20(sp)
80200108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8020010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
80200110:	0005313a 	rdctl	r2,ipending
80200114:	e0bffe15 	stw	r2,-8(fp)

  return active;
80200118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8020011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
80200120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
80200124:	00800044 	movi	r2,1
80200128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8020012c:	e0fffb17 	ldw	r3,-20(fp)
80200130:	e0bffc17 	ldw	r2,-16(fp)
80200134:	1884703a 	and	r2,r3,r2
80200138:	10001426 	beq	r2,zero,8020018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8020013c:	00a008b4 	movhi	r2,32802
80200140:	10bff404 	addi	r2,r2,-48
80200144:	e0fffd17 	ldw	r3,-12(fp)
80200148:	180690fa 	slli	r3,r3,3
8020014c:	10c5883a 	add	r2,r2,r3
80200150:	10c00017 	ldw	r3,0(r2)
80200154:	00a008b4 	movhi	r2,32802
80200158:	10bff404 	addi	r2,r2,-48
8020015c:	e13ffd17 	ldw	r4,-12(fp)
80200160:	200890fa 	slli	r4,r4,3
80200164:	1105883a 	add	r2,r2,r4
80200168:	10800104 	addi	r2,r2,4
8020016c:	10800017 	ldw	r2,0(r2)
80200170:	1009883a 	mov	r4,r2
80200174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
80200178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8020017c:	0005313a 	rdctl	r2,ipending
80200180:	e0bfff15 	stw	r2,-4(fp)

  return active;
80200184:	e0bfff17 	ldw	r2,-4(fp)
80200188:	00000706 	br	802001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8020018c:	e0bffc17 	ldw	r2,-16(fp)
80200190:	1085883a 	add	r2,r2,r2
80200194:	e0bffc15 	stw	r2,-16(fp)
      i++;
80200198:	e0bffd17 	ldw	r2,-12(fp)
8020019c:	10800044 	addi	r2,r2,1
802001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
802001a4:	003fe106 	br	8020012c <__reset+0xfa1e012c>

    active = alt_irq_pending ();
802001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
802001ac:	e0bffb17 	ldw	r2,-20(fp)
802001b0:	103fdb1e 	bne	r2,zero,80200120 <__reset+0xfa1e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
802001b4:	0001883a 	nop
}
802001b8:	0001883a 	nop
802001bc:	e037883a 	mov	sp,fp
802001c0:	dfc00117 	ldw	ra,4(sp)
802001c4:	df000017 	ldw	fp,0(sp)
802001c8:	dec00204 	addi	sp,sp,8
802001cc:	f800283a 	ret

802001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
802001d0:	defffb04 	addi	sp,sp,-20
802001d4:	dfc00415 	stw	ra,16(sp)
802001d8:	df000315 	stw	fp,12(sp)
802001dc:	df000304 	addi	fp,sp,12
802001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
802001e4:	000531fa 	rdctl	r2,exception
802001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
802001ec:	e0bffd17 	ldw	r2,-12(fp)
802001f0:	10801f0c 	andi	r2,r2,124
802001f4:	1004d0ba 	srli	r2,r2,2
802001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
802001fc:	0005333a 	rdctl	r2,badaddr
80200200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
80200204:	d0a02e17 	ldw	r2,-32584(gp)
80200208:	10000726 	beq	r2,zero,80200228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8020020c:	d0a02e17 	ldw	r2,-32584(gp)
80200210:	e0fffd17 	ldw	r3,-12(fp)
80200214:	e1bffe17 	ldw	r6,-8(fp)
80200218:	e17fff17 	ldw	r5,-4(fp)
8020021c:	1809883a 	mov	r4,r3
80200220:	103ee83a 	callr	r2
80200224:	00000206 	br	80200230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
80200228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8020022c:	0005883a 	mov	r2,zero
}
80200230:	e037883a 	mov	sp,fp
80200234:	dfc00117 	ldw	ra,4(sp)
80200238:	df000017 	ldw	fp,0(sp)
8020023c:	dec00204 	addi	sp,sp,8
80200240:	f800283a 	ret

Disassembly of section .text:

80200244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
80200244:	06e00934 	movhi	sp,32804
    ori sp, sp, %lo(__alt_stack_pointer)
80200248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
8020024c:	06a008b4 	movhi	gp,32802
    ori gp, gp, %lo(_gp)
80200250:	d69e7b14 	ori	gp,gp,31212
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
80200254:	00a00874 	movhi	r2,32801
    ori r2, r2, %lo(__bss_start)
80200258:	10be8e14 	ori	r2,r2,64056

    movhi r3, %hi(__bss_end)
8020025c:	00e008b4 	movhi	r3,32802
    ori r3, r3, %lo(__bss_end)
80200260:	18c03414 	ori	r3,r3,208

    beq r2, r3, 1f
80200264:	10c00326 	beq	r2,r3,80200274 <_start+0x30>

0:
    stw zero, (r2)
80200268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8020026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
80200270:	10fffd36 	bltu	r2,r3,80200268 <__reset+0xfa1e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
80200274:	02170e00 	call	802170e0 <alt_main>

80200278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
80200278:	003fff06 	br	80200278 <__reset+0xfa1e0278>

8020027c <bDdr2EepromTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromTest(alt_u8 ucMemoryId) {
8020027c:	defff604 	addi	sp,sp,-40
80200280:	dfc00915 	stw	ra,36(sp)
80200284:	df000815 	stw	fp,32(sp)
80200288:	df000804 	addi	fp,sp,32
8020028c:	2005883a 	mov	r2,r4
80200290:	e0bfff05 	stb	r2,-4(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Test =====\n");
80200294:	00e008b4 	movhi	r3,32802
80200298:	18feb404 	addi	r3,r3,-1328
8020029c:	00a008b4 	movhi	r2,32802
802002a0:	10afea04 	addi	r2,r2,-16472
802002a4:	1009883a 	mov	r4,r2
802002a8:	00800884 	movi	r2,34
802002ac:	100d883a 	mov	r6,r2
802002b0:	200b883a 	mov	r5,r4
802002b4:	1809883a 	mov	r4,r3
802002b8:	0206aa00 	call	80206aa0 <memcpy>
	debug(fp, cDebugBuffer);
802002bc:	012008b4 	movhi	r4,32802
802002c0:	213eb404 	addi	r4,r4,-1328
802002c4:	0206c180 	call	80206c18 <printf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
802002c8:	00bfe804 	movi	r2,-96
802002cc:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess = FALSE;
802002d0:	e03ff915 	stw	zero,-28(fp)
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	switch (ucMemoryId) {
802002d4:	e0bfff03 	ldbu	r2,-4(fp)
802002d8:	10000326 	beq	r2,zero,802002e8 <bDdr2EepromTest+0x6c>
802002dc:	10800060 	cmpeqi	r2,r2,1
802002e0:	10000a1e 	bne	r2,zero,8020030c <bDdr2EepromTest+0x90>
802002e4:	00001206 	br	80200330 <bDdr2EepromTest+0xb4>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
802002e8:	00a04034 	movhi	r2,33024
802002ec:	10816c04 	addi	r2,r2,1456
802002f0:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
802002f4:	00a04034 	movhi	r2,33024
802002f8:	10817004 	addi	r2,r2,1472
802002fc:	e0bffb15 	stw	r2,-20(fp)
		bSuccess = TRUE;
80200300:	00800044 	movi	r2,1
80200304:	e0bff915 	stw	r2,-28(fp)
		break;
80200308:	00001906 	br	80200370 <bDdr2EepromTest+0xf4>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
8020030c:	00a04034 	movhi	r2,33024
80200310:	10814804 	addi	r2,r2,1312
80200314:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
80200318:	00a04034 	movhi	r2,33024
8020031c:	10814c04 	addi	r2,r2,1328
80200320:	e0bffb15 	stw	r2,-20(fp)
		bSuccess = TRUE;
80200324:	00800044 	movi	r2,1
80200328:	e0bff915 	stw	r2,-28(fp)
		break;
8020032c:	00001006 	br	80200370 <bDdr2EepromTest+0xf4>
	default:
		bSuccess = FALSE;
80200330:	e03ff915 	stw	zero,-28(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80200334:	00e008b4 	movhi	r3,32802
80200338:	18feb404 	addi	r3,r3,-1328
8020033c:	00a008b4 	movhi	r2,32802
80200340:	10aff304 	addi	r2,r2,-16436
80200344:	1009883a 	mov	r4,r2
80200348:	00800bc4 	movi	r2,47
8020034c:	100d883a 	mov	r6,r2
80200350:	200b883a 	mov	r5,r4
80200354:	1809883a 	mov	r4,r3
80200358:	0206aa00 	call	80206aa0 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
8020035c:	012008b4 	movhi	r4,32802
80200360:	213eb404 	addi	r4,r4,-1328
80200364:	0206c180 	call	80206c18 <printf>
		;
#endif
		return bSuccess;
80200368:	e0bff917 	ldw	r2,-28(fp)
8020036c:	0000e706 	br	8020070c <bDdr2EepromTest+0x490>
	}

	alt_u8 ucControlAddr, ucValue;
#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
80200370:	00e008b4 	movhi	r3,32802
80200374:	18feb404 	addi	r3,r3,-1328
80200378:	00a008b4 	movhi	r2,32802
8020037c:	10afff04 	addi	r2,r2,-16388
80200380:	1009883a 	mov	r4,r2
80200384:	008005c4 	movi	r2,23
80200388:	100d883a 	mov	r6,r2
8020038c:	200b883a 	mov	r5,r4
80200390:	1809883a 	mov	r4,r3
80200394:	0206aa00 	call	80206aa0 <memcpy>
	debug(fp, cDebugBuffer);
80200398:	012008b4 	movhi	r4,32802
8020039c:	213eb404 	addi	r4,r4,-1328
802003a0:	0206c180 	call	80206c18 <printf>
#endif
	usleep(20 * 1000);
802003a4:	01138804 	movi	r4,20000
802003a8:	02175940 	call	80217594 <usleep>
	for (iI = 0; iI < 256 && bSuccess; iI++) {
802003ac:	e03ffc15 	stw	zero,-16(fp)
802003b0:	00002f06 	br	80200470 <bDdr2EepromTest+0x1f4>
		ucControlAddr = iI;
802003b4:	e0bffc17 	ldw	r2,-16(fp)
802003b8:	e0bffd45 	stb	r2,-11(fp)
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
802003bc:	e0bffd03 	ldbu	r2,-12(fp)
802003c0:	10c03fcc 	andi	r3,r2,255
802003c4:	18c0201c 	xori	r3,r3,128
802003c8:	18ffe004 	addi	r3,r3,-128
802003cc:	e13ffd43 	ldbu	r4,-11(fp)
802003d0:	e0bffe04 	addi	r2,fp,-8
802003d4:	d8800015 	stw	r2,0(sp)
802003d8:	200f883a 	mov	r7,r4
802003dc:	180d883a 	mov	r6,r3
802003e0:	e17ffb17 	ldw	r5,-20(fp)
802003e4:	e13ffa17 	ldw	r4,-24(fp)
802003e8:	0203ef00 	call	80203ef0 <I2C_Read>
802003ec:	e0bff915 	stw	r2,-28(fp)
				ucControlAddr, &ucValue);
		if (bSuccess) {
802003f0:	e0bff917 	ldw	r2,-28(fp)
802003f4:	10000e26 	beq	r2,zero,80200430 <bDdr2EepromTest+0x1b4>
#if DEBUG_ON
			sprintf(cDebugBuffer, "EEPROM[%03d]=%02Xh\n", ucControlAddr,
802003f8:	e0bffd43 	ldbu	r2,-11(fp)
802003fc:	e0fffe03 	ldbu	r3,-8(fp)
80200400:	18c03fcc 	andi	r3,r3,255
80200404:	180f883a 	mov	r7,r3
80200408:	100d883a 	mov	r6,r2
8020040c:	016008b4 	movhi	r5,32802
80200410:	29700504 	addi	r5,r5,-16364
80200414:	012008b4 	movhi	r4,32802
80200418:	213eb404 	addi	r4,r4,-1328
8020041c:	0206d800 	call	80206d80 <sprintf>
					ucValue);
			debug(fp, cDebugBuffer);
80200420:	012008b4 	movhi	r4,32802
80200424:	213eb404 	addi	r4,r4,-1328
80200428:	0206c180 	call	80206c18 <printf>
8020042c:	00000d06 	br	80200464 <bDdr2EepromTest+0x1e8>
#endif
		} else {
#if DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
80200430:	00e008b4 	movhi	r3,32802
80200434:	18feb404 	addi	r3,r3,-1328
80200438:	00a008b4 	movhi	r2,32802
8020043c:	10b00a04 	addi	r2,r2,-16344
80200440:	1009883a 	mov	r4,r2
80200444:	008005c4 	movi	r2,23
80200448:	100d883a 	mov	r6,r2
8020044c:	200b883a 	mov	r5,r4
80200450:	1809883a 	mov	r4,r3
80200454:	0206aa00 	call	80206aa0 <memcpy>
			debug(fp, cDebugBuffer);
80200458:	012008b4 	movhi	r4,32802
8020045c:	213eb404 	addi	r4,r4,-1328
80200460:	0206c180 	call	80206c18 <printf>
#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
	debug(fp, cDebugBuffer);
#endif
	usleep(20 * 1000);
	for (iI = 0; iI < 256 && bSuccess; iI++) {
80200464:	e0bffc17 	ldw	r2,-16(fp)
80200468:	10800044 	addi	r2,r2,1
8020046c:	e0bffc15 	stw	r2,-16(fp)
80200470:	e0bffc17 	ldw	r2,-16(fp)
80200474:	10804008 	cmpgei	r2,r2,256
80200478:	1000021e 	bne	r2,zero,80200484 <bDdr2EepromTest+0x208>
8020047c:	e0bff917 	ldw	r2,-28(fp)
80200480:	103fcc1e 	bne	r2,zero,802003b4 <__reset+0xfa1e03b4>
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
			debug(fp, cDebugBuffer);
#endif
		}
	}
	if (bSuccess) {
80200484:	e0bff917 	ldw	r2,-28(fp)
80200488:	10000e26 	beq	r2,zero,802004c4 <bDdr2EepromTest+0x248>
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Completed\n\n");
8020048c:	00e008b4 	movhi	r3,32802
80200490:	18feb404 	addi	r3,r3,-1328
80200494:	00a008b4 	movhi	r2,32802
80200498:	10b01004 	addi	r2,r2,-16320
8020049c:	1009883a 	mov	r4,r2
802004a0:	00800884 	movi	r2,34
802004a4:	100d883a 	mov	r6,r2
802004a8:	200b883a 	mov	r5,r4
802004ac:	1809883a 	mov	r4,r3
802004b0:	0206aa00 	call	80206aa0 <memcpy>
		debug(fp, cDebugBuffer);
802004b4:	012008b4 	movhi	r4,32802
802004b8:	213eb404 	addi	r4,r4,-1328
802004bc:	0206c180 	call	80206c18 <printf>
802004c0:	00000d06 	br	802004f8 <bDdr2EepromTest+0x27c>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Failed\n\n");
802004c4:	00e008b4 	movhi	r3,32802
802004c8:	18feb404 	addi	r3,r3,-1328
802004cc:	00a008b4 	movhi	r2,32802
802004d0:	10b01904 	addi	r2,r2,-16284
802004d4:	1009883a 	mov	r4,r2
802004d8:	008007c4 	movi	r2,31
802004dc:	100d883a 	mov	r6,r2
802004e0:	200b883a 	mov	r5,r4
802004e4:	1809883a 	mov	r4,r3
802004e8:	0206aa00 	call	80206aa0 <memcpy>
		debug(fp, cDebugBuffer);
802004ec:	012008b4 	movhi	r4,32802
802004f0:	213eb404 	addi	r4,r4,-1328
802004f4:	0206c180 	call	80206c18 <printf>
#endif
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Write Test\n");
802004f8:	00e008b4 	movhi	r3,32802
802004fc:	18feb404 	addi	r3,r3,-1328
80200500:	00a008b4 	movhi	r2,32802
80200504:	10b02104 	addi	r2,r2,-16252
80200508:	1009883a 	mov	r4,r2
8020050c:	00800604 	movi	r2,24
80200510:	100d883a 	mov	r6,r2
80200514:	200b883a 	mov	r5,r4
80200518:	1809883a 	mov	r4,r3
8020051c:	0206aa00 	call	80206aa0 <memcpy>
	debug(fp, cDebugBuffer);
80200520:	012008b4 	movhi	r4,32802
80200524:	213eb404 	addi	r4,r4,-1328
80200528:	0206c180 	call	80206c18 <printf>
#endif
	alt_u8 ucWriteData = 0x12, ucTestAddr = 128;
8020052c:	00800484 	movi	r2,18
80200530:	e0bffd85 	stb	r2,-10(fp)
80200534:	00bfe004 	movi	r2,-128
80200538:	e0bffdc5 	stb	r2,-9(fp)
	alt_u8 ucReadData;
	usleep(20 * 1000);
8020053c:	01138804 	movi	r4,20000
80200540:	02175940 	call	80217594 <usleep>
	bSuccess = I2C_Write(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
80200544:	e0bffd03 	ldbu	r2,-12(fp)
80200548:	10c03fcc 	andi	r3,r2,255
8020054c:	18c0201c 	xori	r3,r3,128
80200550:	18ffe004 	addi	r3,r3,-128
80200554:	e13ffdc3 	ldbu	r4,-9(fp)
80200558:	e0bffd83 	ldbu	r2,-10(fp)
8020055c:	d8800015 	stw	r2,0(sp)
80200560:	200f883a 	mov	r7,r4
80200564:	180d883a 	mov	r6,r3
80200568:	e17ffb17 	ldw	r5,-20(fp)
8020056c:	e13ffa17 	ldw	r4,-24(fp)
80200570:	0203e180 	call	80203e18 <I2C_Write>
80200574:	e0bff915 	stw	r2,-28(fp)
			ucTestAddr, ucWriteData);
	if (!bSuccess) {
80200578:	e0bff917 	ldw	r2,-28(fp)
8020057c:	10000e1e 	bne	r2,zero,802005b8 <bDdr2EepromTest+0x33c>
#if DEBUG_ON
		sprintf(cDebugBuffer, "Failed to write EEPROM\n");
80200580:	00e008b4 	movhi	r3,32802
80200584:	18feb404 	addi	r3,r3,-1328
80200588:	00a008b4 	movhi	r2,32802
8020058c:	10b02704 	addi	r2,r2,-16228
80200590:	1009883a 	mov	r4,r2
80200594:	00800604 	movi	r2,24
80200598:	100d883a 	mov	r6,r2
8020059c:	200b883a 	mov	r5,r4
802005a0:	1809883a 	mov	r4,r3
802005a4:	0206aa00 	call	80206aa0 <memcpy>
		debug(fp, cDebugBuffer);
802005a8:	012008b4 	movhi	r4,32802
802005ac:	213eb404 	addi	r4,r4,-1328
802005b0:	0206c180 	call	80206c18 <printf>
802005b4:	00002f06 	br	80200674 <bDdr2EepromTest+0x3f8>
#endif
	} else {
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
802005b8:	e0bffd03 	ldbu	r2,-12(fp)
802005bc:	10c03fcc 	andi	r3,r2,255
802005c0:	18c0201c 	xori	r3,r3,128
802005c4:	18ffe004 	addi	r3,r3,-128
802005c8:	e13ffdc3 	ldbu	r4,-9(fp)
802005cc:	e0bffe44 	addi	r2,fp,-7
802005d0:	d8800015 	stw	r2,0(sp)
802005d4:	200f883a 	mov	r7,r4
802005d8:	180d883a 	mov	r6,r3
802005dc:	e17ffb17 	ldw	r5,-20(fp)
802005e0:	e13ffa17 	ldw	r4,-24(fp)
802005e4:	0203ef00 	call	80203ef0 <I2C_Read>
802005e8:	e0bff915 	stw	r2,-28(fp)
				ucTestAddr, &ucReadData);
		if (!bSuccess) {
802005ec:	e0bff917 	ldw	r2,-28(fp)
802005f0:	10000e1e 	bne	r2,zero,8020062c <bDdr2EepromTest+0x3b0>
#if DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM for verify\n");
802005f4:	00e008b4 	movhi	r3,32802
802005f8:	18feb404 	addi	r3,r3,-1328
802005fc:	00a008b4 	movhi	r2,32802
80200600:	10b02d04 	addi	r2,r2,-16204
80200604:	1009883a 	mov	r4,r2
80200608:	00800884 	movi	r2,34
8020060c:	100d883a 	mov	r6,r2
80200610:	200b883a 	mov	r5,r4
80200614:	1809883a 	mov	r4,r3
80200618:	0206aa00 	call	80206aa0 <memcpy>
			debug(fp, cDebugBuffer);
8020061c:	012008b4 	movhi	r4,32802
80200620:	213eb404 	addi	r4,r4,-1328
80200624:	0206c180 	call	80206c18 <printf>
80200628:	00001206 	br	80200674 <bDdr2EepromTest+0x3f8>
#endif
		} else {
			if (ucReadData != ucWriteData) {
8020062c:	e0bffe43 	ldbu	r2,-7(fp)
80200630:	10c03fcc 	andi	r3,r2,255
80200634:	e0bffd83 	ldbu	r2,-10(fp)
80200638:	18800e26 	beq	r3,r2,80200674 <bDdr2EepromTest+0x3f8>
				bSuccess = FALSE;
8020063c:	e03ff915 	stw	zero,-28(fp)
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200640:	e0bffe43 	ldbu	r2,-7(fp)
80200644:	10803fcc 	andi	r2,r2,255
80200648:	e0fffd83 	ldbu	r3,-10(fp)
8020064c:	180f883a 	mov	r7,r3
80200650:	100d883a 	mov	r6,r2
80200654:	016008b4 	movhi	r5,32802
80200658:	29703604 	addi	r5,r5,-16168
8020065c:	012008b4 	movhi	r4,32802
80200660:	213eb404 	addi	r4,r4,-1328
80200664:	0206d800 	call	80206d80 <sprintf>
						"Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n",
						ucReadData, ucWriteData);
				debug(fp, cDebugBuffer);
80200668:	012008b4 	movhi	r4,32802
8020066c:	213eb404 	addi	r4,r4,-1328
80200670:	0206c180 	call	80206c18 <printf>
#endif
			}
		}
	}
	if (bSuccess) {
80200674:	e0bff917 	ldw	r2,-28(fp)
80200678:	10000e26 	beq	r2,zero,802006b4 <bDdr2EepromTest+0x438>
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Completed\n\n");
8020067c:	00e008b4 	movhi	r3,32802
80200680:	18feb404 	addi	r3,r3,-1328
80200684:	00a008b4 	movhi	r2,32802
80200688:	10b04504 	addi	r2,r2,-16108
8020068c:	1009883a 	mov	r4,r2
80200690:	008008c4 	movi	r2,35
80200694:	100d883a 	mov	r6,r2
80200698:	200b883a 	mov	r5,r4
8020069c:	1809883a 	mov	r4,r3
802006a0:	0206aa00 	call	80206aa0 <memcpy>
		debug(fp, cDebugBuffer);
802006a4:	012008b4 	movhi	r4,32802
802006a8:	213eb404 	addi	r4,r4,-1328
802006ac:	0206c180 	call	80206c18 <printf>
802006b0:	00000d06 	br	802006e8 <bDdr2EepromTest+0x46c>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Failed\n\n");
802006b4:	00e008b4 	movhi	r3,32802
802006b8:	18feb404 	addi	r3,r3,-1328
802006bc:	00a008b4 	movhi	r2,32802
802006c0:	10b04e04 	addi	r2,r2,-16072
802006c4:	1009883a 	mov	r4,r2
802006c8:	00800804 	movi	r2,32
802006cc:	100d883a 	mov	r6,r2
802006d0:	200b883a 	mov	r5,r4
802006d4:	1809883a 	mov	r4,r3
802006d8:	0206aa00 	call	80206aa0 <memcpy>
		debug(fp, cDebugBuffer);
802006dc:	012008b4 	movhi	r4,32802
802006e0:	213eb404 	addi	r4,r4,-1328
802006e4:	0206c180 	call	80206c18 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
802006e8:	00a008b4 	movhi	r2,32802
802006ec:	10beb404 	addi	r2,r2,-1328
802006f0:	00c00284 	movi	r3,10
802006f4:	10c00005 	stb	r3,0(r2)
802006f8:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
802006fc:	012008b4 	movhi	r4,32802
80200700:	213eb404 	addi	r4,r4,-1328
80200704:	0206c180 	call	80206c18 <printf>
#endif

	return bSuccess;
80200708:	e0bff917 	ldw	r2,-28(fp)
}
8020070c:	e037883a 	mov	sp,fp
80200710:	dfc00117 	ldw	ra,4(sp)
80200714:	df000017 	ldw	fp,0(sp)
80200718:	dec00204 	addi	sp,sp,8
8020071c:	f800283a 	ret

80200720 <bDdr2EepromDump>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromDump(alt_u8 ucMemoryId) {
80200720:	deffb704 	addi	sp,sp,-292
80200724:	dfc04815 	stw	ra,288(sp)
80200728:	df004715 	stw	fp,284(sp)
8020072c:	df004704 	addi	fp,sp,284
80200730:	2005883a 	mov	r2,r4
80200734:	e0bfff05 	stb	r2,-4(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Dump =====\n");
80200738:	00e008b4 	movhi	r3,32802
8020073c:	18feb404 	addi	r3,r3,-1328
80200740:	00a008b4 	movhi	r2,32802
80200744:	10b05604 	addi	r2,r2,-16040
80200748:	1009883a 	mov	r4,r2
8020074c:	00800884 	movi	r2,34
80200750:	100d883a 	mov	r6,r2
80200754:	200b883a 	mov	r5,r4
80200758:	1809883a 	mov	r4,r3
8020075c:	0206aa00 	call	80206aa0 <memcpy>
	debug(fp, cDebugBuffer);
80200760:	012008b4 	movhi	r4,32802
80200764:	213eb404 	addi	r4,r4,-1328
80200768:	0206c180 	call	80206c18 <printf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
8020076c:	00bfe804 	movi	r2,-96
80200770:	e0bfbd05 	stb	r2,-268(fp)
	bool bSuccess = FALSE;
80200774:	e03fbe15 	stw	zero,-264(fp)
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	switch (ucMemoryId) {
80200778:	e0bfff03 	ldbu	r2,-4(fp)
8020077c:	10000326 	beq	r2,zero,8020078c <bDdr2EepromDump+0x6c>
80200780:	10800060 	cmpeqi	r2,r2,1
80200784:	10000a1e 	bne	r2,zero,802007b0 <bDdr2EepromDump+0x90>
80200788:	00001206 	br	802007d4 <bDdr2EepromDump+0xb4>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
8020078c:	00a04034 	movhi	r2,33024
80200790:	10816c04 	addi	r2,r2,1456
80200794:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
80200798:	00a04034 	movhi	r2,33024
8020079c:	10817004 	addi	r2,r2,1472
802007a0:	e0bfbb15 	stw	r2,-276(fp)
		bSuccess = TRUE;
802007a4:	00800044 	movi	r2,1
802007a8:	e0bfbe15 	stw	r2,-264(fp)
		break;
802007ac:	00001906 	br	80200814 <bDdr2EepromDump+0xf4>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
802007b0:	00a04034 	movhi	r2,33024
802007b4:	10814804 	addi	r2,r2,1312
802007b8:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
802007bc:	00a04034 	movhi	r2,33024
802007c0:	10814c04 	addi	r2,r2,1328
802007c4:	e0bfbb15 	stw	r2,-276(fp)
		bSuccess = TRUE;
802007c8:	00800044 	movi	r2,1
802007cc:	e0bfbe15 	stw	r2,-264(fp)
		break;
802007d0:	00001006 	br	80200814 <bDdr2EepromDump+0xf4>
	default:
		bSuccess = FALSE;
802007d4:	e03fbe15 	stw	zero,-264(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
802007d8:	00e008b4 	movhi	r3,32802
802007dc:	18feb404 	addi	r3,r3,-1328
802007e0:	00a008b4 	movhi	r2,32802
802007e4:	10b05f04 	addi	r2,r2,-16004
802007e8:	1009883a 	mov	r4,r2
802007ec:	00800bc4 	movi	r2,47
802007f0:	100d883a 	mov	r6,r2
802007f4:	200b883a 	mov	r5,r4
802007f8:	1809883a 	mov	r4,r3
802007fc:	0206aa00 	call	80206aa0 <memcpy>
				"DR2 Memory ID not identified!! Aborting Dump \n");
		debug(fp, cDebugBuffer)
80200800:	012008b4 	movhi	r4,32802
80200804:	213eb404 	addi	r4,r4,-1328
80200808:	0206c180 	call	80206c18 <printf>
		;
#endif
		return bSuccess;
8020080c:	e0bfbe17 	ldw	r2,-264(fp)
80200810:	00029b06 	br	80201280 <bDdr2EepromDump+0xb60>
	}

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
80200814:	e0bfbd03 	ldbu	r2,-268(fp)
80200818:	10c03fcc 	andi	r3,r2,255
8020081c:	18c0201c 	xori	r3,r3,128
80200820:	18ffe004 	addi	r3,r3,-128
80200824:	e13fbf04 	addi	r4,fp,-260
80200828:	00804004 	movi	r2,256
8020082c:	d8800015 	stw	r2,0(sp)
80200830:	200f883a 	mov	r7,r4
80200834:	180d883a 	mov	r6,r3
80200838:	e17fbb17 	ldw	r5,-276(fp)
8020083c:	e13fba17 	ldw	r4,-280(fp)
80200840:	0203ff00 	call	80203ff0 <I2C_MultipleRead>
80200844:	e0bfbe15 	stw	r2,-264(fp)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
80200848:	e0bfbe17 	ldw	r2,-264(fp)
8020084c:	10027626 	beq	r2,zero,80201228 <bDdr2EepromDump+0xb08>
		for (iI = 0; iI < 256 && bSuccess; iI++) {
80200850:	e03fbc15 	stw	zero,-272(fp)
80200854:	00026e06 	br	80201210 <bDdr2EepromDump+0xaf0>
			if (iI == 0) {
80200858:	e0bfbc17 	ldw	r2,-272(fp)
8020085c:	1000101e 	bne	r2,zero,802008a0 <bDdr2EepromDump+0x180>
#if DEBUG_ON
				sprintf(cDebugBuffer,
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
80200860:	e0ffbf04 	addi	r3,fp,-260
80200864:	e0bfbc17 	ldw	r2,-272(fp)
80200868:	1885883a 	add	r2,r3,r2
8020086c:	10800003 	ldbu	r2,0(r2)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
			if (iI == 0) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200870:	10803fcc 	andi	r2,r2,255
80200874:	100f883a 	mov	r7,r2
80200878:	e1bfbc17 	ldw	r6,-272(fp)
8020087c:	016008b4 	movhi	r5,32802
80200880:	29706b04 	addi	r5,r5,-15956
80200884:	012008b4 	movhi	r4,32802
80200888:	213eb404 	addi	r4,r4,-1328
8020088c:	0206d800 	call	80206d80 <sprintf>
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
				debug(fp, cDebugBuffer);
80200890:	012008b4 	movhi	r4,32802
80200894:	213eb404 	addi	r4,r4,-1328
80200898:	0206c180 	call	80206c18 <printf>
8020089c:	00025906 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 1) {
802008a0:	e0bfbc17 	ldw	r2,-272(fp)
802008a4:	10800058 	cmpnei	r2,r2,1
802008a8:	10000e1e 	bne	r2,zero,802008e4 <bDdr2EepromDump+0x1c4>
#if DEBUG_ON
				sprintf(cDebugBuffer,
802008ac:	00e008b4 	movhi	r3,32802
802008b0:	18feb404 	addi	r3,r3,-1328
802008b4:	00a008b4 	movhi	r2,32802
802008b8:	10b07704 	addi	r2,r2,-15908
802008bc:	1009883a 	mov	r4,r2
802008c0:	00800c04 	movi	r2,48
802008c4:	100d883a 	mov	r6,r2
802008c8:	200b883a 	mov	r5,r4
802008cc:	1809883a 	mov	r4,r3
802008d0:	0206aa00 	call	80206aa0 <memcpy>
						"(Total Number of Bytes in SPD Device, Log2(N))\n");
				debug(fp, cDebugBuffer);
802008d4:	012008b4 	movhi	r4,32802
802008d8:	213eb404 	addi	r4,r4,-1328
802008dc:	0206c180 	call	80206c18 <printf>
802008e0:	00024806 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 2) {
802008e4:	e0bfbc17 	ldw	r2,-272(fp)
802008e8:	10800098 	cmpnei	r2,r2,2
802008ec:	10000e1e 	bne	r2,zero,80200928 <bDdr2EepromDump+0x208>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Basic Memory Type[08h:DDR2])\n");
802008f0:	00e008b4 	movhi	r3,32802
802008f4:	18feb404 	addi	r3,r3,-1328
802008f8:	00a008b4 	movhi	r2,32802
802008fc:	10b08304 	addi	r2,r2,-15860
80200900:	1009883a 	mov	r4,r2
80200904:	008007c4 	movi	r2,31
80200908:	100d883a 	mov	r6,r2
8020090c:	200b883a 	mov	r5,r4
80200910:	1809883a 	mov	r4,r3
80200914:	0206aa00 	call	80206aa0 <memcpy>
				debug(fp, cDebugBuffer);
80200918:	012008b4 	movhi	r4,32802
8020091c:	213eb404 	addi	r4,r4,-1328
80200920:	0206c180 	call	80206c18 <printf>
80200924:	00023706 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 3) {
80200928:	e0bfbc17 	ldw	r2,-272(fp)
8020092c:	108000d8 	cmpnei	r2,r2,3
80200930:	10000e1e 	bne	r2,zero,8020096c <bDdr2EepromDump+0x24c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200934:	00e008b4 	movhi	r3,32802
80200938:	18feb404 	addi	r3,r3,-1328
8020093c:	00a008b4 	movhi	r2,32802
80200940:	10b08b04 	addi	r2,r2,-15828
80200944:	1009883a 	mov	r4,r2
80200948:	008009c4 	movi	r2,39
8020094c:	100d883a 	mov	r6,r2
80200950:	200b883a 	mov	r5,r4
80200954:	1809883a 	mov	r4,r3
80200958:	0206aa00 	call	80206aa0 <memcpy>
						"(Number of Row Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
8020095c:	012008b4 	movhi	r4,32802
80200960:	213eb404 	addi	r4,r4,-1328
80200964:	0206c180 	call	80206c18 <printf>
80200968:	00022606 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 4) {
8020096c:	e0bfbc17 	ldw	r2,-272(fp)
80200970:	10800118 	cmpnei	r2,r2,4
80200974:	10000e1e 	bne	r2,zero,802009b0 <bDdr2EepromDump+0x290>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200978:	00e008b4 	movhi	r3,32802
8020097c:	18feb404 	addi	r3,r3,-1328
80200980:	00a008b4 	movhi	r2,32802
80200984:	10b09504 	addi	r2,r2,-15788
80200988:	1009883a 	mov	r4,r2
8020098c:	00800a84 	movi	r2,42
80200990:	100d883a 	mov	r6,r2
80200994:	200b883a 	mov	r5,r4
80200998:	1809883a 	mov	r4,r3
8020099c:	0206aa00 	call	80206aa0 <memcpy>
						"(Number of Column Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
802009a0:	012008b4 	movhi	r4,32802
802009a4:	213eb404 	addi	r4,r4,-1328
802009a8:	0206c180 	call	80206c18 <printf>
802009ac:	00021506 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 5) {
802009b0:	e0bfbc17 	ldw	r2,-272(fp)
802009b4:	10800158 	cmpnei	r2,r2,5
802009b8:	10000e1e 	bne	r2,zero,802009f4 <bDdr2EepromDump+0x2d4>
#if DEBUG_ON
				sprintf(cDebugBuffer,
802009bc:	00e008b4 	movhi	r3,32802
802009c0:	18feb404 	addi	r3,r3,-1328
802009c4:	00a008b4 	movhi	r2,32802
802009c8:	10b0a004 	addi	r2,r2,-15744
802009cc:	1009883a 	mov	r4,r2
802009d0:	00800c04 	movi	r2,48
802009d4:	100d883a 	mov	r6,r2
802009d8:	200b883a 	mov	r5,r4
802009dc:	1809883a 	mov	r4,r3
802009e0:	0206aa00 	call	80206aa0 <memcpy>
						"(DIMM Height and Module Rank Number[b2b1b0+1])\n");
				debug(fp, cDebugBuffer);
802009e4:	012008b4 	movhi	r4,32802
802009e8:	213eb404 	addi	r4,r4,-1328
802009ec:	0206c180 	call	80206c18 <printf>
802009f0:	00020406 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 6) {
802009f4:	e0bfbc17 	ldw	r2,-272(fp)
802009f8:	10800198 	cmpnei	r2,r2,6
802009fc:	10000e1e 	bne	r2,zero,80200a38 <bDdr2EepromDump+0x318>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width)\n");
80200a00:	00e008b4 	movhi	r3,32802
80200a04:	18feb404 	addi	r3,r3,-1328
80200a08:	00a008b4 	movhi	r2,32802
80200a0c:	10b0ac04 	addi	r2,r2,-15696
80200a10:	1009883a 	mov	r4,r2
80200a14:	00800544 	movi	r2,21
80200a18:	100d883a 	mov	r6,r2
80200a1c:	200b883a 	mov	r5,r4
80200a20:	1809883a 	mov	r4,r3
80200a24:	0206aa00 	call	80206aa0 <memcpy>
				debug(fp, cDebugBuffer);
80200a28:	012008b4 	movhi	r4,32802
80200a2c:	213eb404 	addi	r4,r4,-1328
80200a30:	0206c180 	call	80206c18 <printf>
80200a34:	0001f306 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 7) {
80200a38:	e0bfbc17 	ldw	r2,-272(fp)
80200a3c:	108001d8 	cmpnei	r2,r2,7
80200a40:	10000e1e 	bne	r2,zero,80200a7c <bDdr2EepromDump+0x35c>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width, Continued)\n");
80200a44:	00e008b4 	movhi	r3,32802
80200a48:	18feb404 	addi	r3,r3,-1328
80200a4c:	00a008b4 	movhi	r2,32802
80200a50:	10b0b204 	addi	r2,r2,-15672
80200a54:	1009883a 	mov	r4,r2
80200a58:	00800804 	movi	r2,32
80200a5c:	100d883a 	mov	r6,r2
80200a60:	200b883a 	mov	r5,r4
80200a64:	1809883a 	mov	r4,r3
80200a68:	0206aa00 	call	80206aa0 <memcpy>
				debug(fp, cDebugBuffer);
80200a6c:	012008b4 	movhi	r4,32802
80200a70:	213eb404 	addi	r4,r4,-1328
80200a74:	0206c180 	call	80206c18 <printf>
80200a78:	0001e206 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 16) {
80200a7c:	e0bfbc17 	ldw	r2,-272(fp)
80200a80:	10800418 	cmpnei	r2,r2,16
80200a84:	10000e1e 	bne	r2,zero,80200ac0 <bDdr2EepromDump+0x3a0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200a88:	00e008b4 	movhi	r3,32802
80200a8c:	18feb404 	addi	r3,r3,-1328
80200a90:	00a008b4 	movhi	r2,32802
80200a94:	10b0ba04 	addi	r2,r2,-15640
80200a98:	1009883a 	mov	r4,r2
80200a9c:	00800d04 	movi	r2,52
80200aa0:	100d883a 	mov	r6,r2
80200aa4:	200b883a 	mov	r5,r4
80200aa8:	1809883a 	mov	r4,r3
80200aac:	0206aa00 	call	80206aa0 <memcpy>
						"(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
				debug(fp, cDebugBuffer);
80200ab0:	012008b4 	movhi	r4,32802
80200ab4:	213eb404 	addi	r4,r4,-1328
80200ab8:	0206c180 	call	80206c18 <printf>
80200abc:	0001d106 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 13) {
80200ac0:	e0bfbc17 	ldw	r2,-272(fp)
80200ac4:	10800358 	cmpnei	r2,r2,13
80200ac8:	10000e1e 	bne	r2,zero,80200b04 <bDdr2EepromDump+0x3e4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Primary SDRAM width)\n");
80200acc:	00e008b4 	movhi	r3,32802
80200ad0:	18feb404 	addi	r3,r3,-1328
80200ad4:	00a008b4 	movhi	r2,32802
80200ad8:	10b0c704 	addi	r2,r2,-15588
80200adc:	1009883a 	mov	r4,r2
80200ae0:	008005c4 	movi	r2,23
80200ae4:	100d883a 	mov	r6,r2
80200ae8:	200b883a 	mov	r5,r4
80200aec:	1809883a 	mov	r4,r3
80200af0:	0206aa00 	call	80206aa0 <memcpy>
				debug(fp, cDebugBuffer);
80200af4:	012008b4 	movhi	r4,32802
80200af8:	213eb404 	addi	r4,r4,-1328
80200afc:	0206c180 	call	80206c18 <printf>
80200b00:	0001c006 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 14) {
80200b04:	e0bfbc17 	ldw	r2,-272(fp)
80200b08:	10800398 	cmpnei	r2,r2,14
80200b0c:	10000e1e 	bne	r2,zero,80200b48 <bDdr2EepromDump+0x428>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(ECC SDRAM width)\n");
80200b10:	00e008b4 	movhi	r3,32802
80200b14:	18feb404 	addi	r3,r3,-1328
80200b18:	00a008b4 	movhi	r2,32802
80200b1c:	10b0cd04 	addi	r2,r2,-15564
80200b20:	1009883a 	mov	r4,r2
80200b24:	008004c4 	movi	r2,19
80200b28:	100d883a 	mov	r6,r2
80200b2c:	200b883a 	mov	r5,r4
80200b30:	1809883a 	mov	r4,r3
80200b34:	0206aa00 	call	80206aa0 <memcpy>
				debug(fp, cDebugBuffer);
80200b38:	012008b4 	movhi	r4,32802
80200b3c:	213eb404 	addi	r4,r4,-1328
80200b40:	0206c180 	call	80206c18 <printf>
80200b44:	0001af06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 17) {
80200b48:	e0bfbc17 	ldw	r2,-272(fp)
80200b4c:	10800458 	cmpnei	r2,r2,17
80200b50:	10000e1e 	bne	r2,zero,80200b8c <bDdr2EepromDump+0x46c>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Banks per SDRAM device)\n");
80200b54:	00e008b4 	movhi	r3,32802
80200b58:	18feb404 	addi	r3,r3,-1328
80200b5c:	00a008b4 	movhi	r2,32802
80200b60:	10b0d204 	addi	r2,r2,-15544
80200b64:	1009883a 	mov	r4,r2
80200b68:	00800684 	movi	r2,26
80200b6c:	100d883a 	mov	r6,r2
80200b70:	200b883a 	mov	r5,r4
80200b74:	1809883a 	mov	r4,r3
80200b78:	0206aa00 	call	80206aa0 <memcpy>
				debug(fp, cDebugBuffer);
80200b7c:	012008b4 	movhi	r4,32802
80200b80:	213eb404 	addi	r4,r4,-1328
80200b84:	0206c180 	call	80206c18 <printf>
80200b88:	00019e06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 18) {
80200b8c:	e0bfbc17 	ldw	r2,-272(fp)
80200b90:	10800498 	cmpnei	r2,r2,18
80200b94:	10000e1e 	bne	r2,zero,80200bd0 <bDdr2EepromDump+0x4b0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200b98:	00e008b4 	movhi	r3,32802
80200b9c:	18feb404 	addi	r3,r3,-1328
80200ba0:	00a008b4 	movhi	r2,32802
80200ba4:	10b0d904 	addi	r2,r2,-15516
80200ba8:	1009883a 	mov	r4,r2
80200bac:	00800d44 	movi	r2,53
80200bb0:	100d883a 	mov	r6,r2
80200bb4:	200b883a 	mov	r5,r4
80200bb8:	1809883a 	mov	r4,r3
80200bbc:	0206aa00 	call	80206aa0 <memcpy>
						"(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
				debug(fp, cDebugBuffer);
80200bc0:	012008b4 	movhi	r4,32802
80200bc4:	213eb404 	addi	r4,r4,-1328
80200bc8:	0206c180 	call	80206c18 <printf>
80200bcc:	00018d06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 20) {
80200bd0:	e0bfbc17 	ldw	r2,-272(fp)
80200bd4:	10800518 	cmpnei	r2,r2,20
80200bd8:	10000e1e 	bne	r2,zero,80200c14 <bDdr2EepromDump+0x4f4>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200bdc:	00e008b4 	movhi	r3,32802
80200be0:	18feb404 	addi	r3,r3,-1328
80200be4:	00a008b4 	movhi	r2,32802
80200be8:	10b0e704 	addi	r2,r2,-15460
80200bec:	1009883a 	mov	r4,r2
80200bf0:	00801204 	movi	r2,72
80200bf4:	100d883a 	mov	r6,r2
80200bf8:	200b883a 	mov	r5,r4
80200bfc:	1809883a 	mov	r4,r3
80200c00:	0206aa00 	call	80206aa0 <memcpy>
						"(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
				debug(fp, cDebugBuffer);
80200c04:	012008b4 	movhi	r4,32802
80200c08:	213eb404 	addi	r4,r4,-1328
80200c0c:	0206c180 	call	80206c18 <printf>
80200c10:	00017c06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 22) {
80200c14:	e0bfbc17 	ldw	r2,-272(fp)
80200c18:	10800598 	cmpnei	r2,r2,22
80200c1c:	10000e1e 	bne	r2,zero,80200c58 <bDdr2EepromDump+0x538>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Memory Chip feature bitmap)\n");
80200c20:	00e008b4 	movhi	r3,32802
80200c24:	18feb404 	addi	r3,r3,-1328
80200c28:	00a008b4 	movhi	r2,32802
80200c2c:	10b0f904 	addi	r2,r2,-15388
80200c30:	1009883a 	mov	r4,r2
80200c34:	00800784 	movi	r2,30
80200c38:	100d883a 	mov	r6,r2
80200c3c:	200b883a 	mov	r5,r4
80200c40:	1809883a 	mov	r4,r3
80200c44:	0206aa00 	call	80206aa0 <memcpy>
				debug(fp, cDebugBuffer);
80200c48:	012008b4 	movhi	r4,32802
80200c4c:	213eb404 	addi	r4,r4,-1328
80200c50:	0206c180 	call	80206c18 <printf>
80200c54:	00016b06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 27) {
80200c58:	e0bfbc17 	ldw	r2,-272(fp)
80200c5c:	108006d8 	cmpnei	r2,r2,27
80200c60:	10000e1e 	bne	r2,zero,80200c9c <bDdr2EepromDump+0x57c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200c64:	00e008b4 	movhi	r3,32802
80200c68:	18feb404 	addi	r3,r3,-1328
80200c6c:	00a008b4 	movhi	r2,32802
80200c70:	10b10104 	addi	r2,r2,-15356
80200c74:	1009883a 	mov	r4,r2
80200c78:	00800a04 	movi	r2,40
80200c7c:	100d883a 	mov	r6,r2
80200c80:	200b883a 	mov	r5,r4
80200c84:	1809883a 	mov	r4,r3
80200c88:	0206aa00 	call	80206aa0 <memcpy>
						"(Minimun row precharge time[tRP;nsx4])\n");
				debug(fp, cDebugBuffer);
80200c8c:	012008b4 	movhi	r4,32802
80200c90:	213eb404 	addi	r4,r4,-1328
80200c94:	0206c180 	call	80206c18 <printf>
80200c98:	00015a06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 28) {
80200c9c:	e0bfbc17 	ldw	r2,-272(fp)
80200ca0:	10800718 	cmpnei	r2,r2,28
80200ca4:	10000e1e 	bne	r2,zero,80200ce0 <bDdr2EepromDump+0x5c0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200ca8:	00e008b4 	movhi	r3,32802
80200cac:	18feb404 	addi	r3,r3,-1328
80200cb0:	00a008b4 	movhi	r2,32802
80200cb4:	10b10b04 	addi	r2,r2,-15316
80200cb8:	1009883a 	mov	r4,r2
80200cbc:	00800cc4 	movi	r2,51
80200cc0:	100d883a 	mov	r6,r2
80200cc4:	200b883a 	mov	r5,r4
80200cc8:	1809883a 	mov	r4,r3
80200ccc:	0206aa00 	call	80206aa0 <memcpy>
						"(Minimun row active-row activce delay[tRRD;nsx4])\n");
				debug(fp, cDebugBuffer);
80200cd0:	012008b4 	movhi	r4,32802
80200cd4:	213eb404 	addi	r4,r4,-1328
80200cd8:	0206c180 	call	80206c18 <printf>
80200cdc:	00014906 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 29) {
80200ce0:	e0bfbc17 	ldw	r2,-272(fp)
80200ce4:	10800758 	cmpnei	r2,r2,29
80200ce8:	10000e1e 	bne	r2,zero,80200d24 <bDdr2EepromDump+0x604>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200cec:	00e008b4 	movhi	r3,32802
80200cf0:	18feb404 	addi	r3,r3,-1328
80200cf4:	00a008b4 	movhi	r2,32802
80200cf8:	10b11804 	addi	r2,r2,-15264
80200cfc:	1009883a 	mov	r4,r2
80200d00:	008009c4 	movi	r2,39
80200d04:	100d883a 	mov	r6,r2
80200d08:	200b883a 	mov	r5,r4
80200d0c:	1809883a 	mov	r4,r3
80200d10:	0206aa00 	call	80206aa0 <memcpy>
						"(Minimun RAS to CAS delay[tRCD;nsx4])\n");
				debug(fp, cDebugBuffer);
80200d14:	012008b4 	movhi	r4,32802
80200d18:	213eb404 	addi	r4,r4,-1328
80200d1c:	0206c180 	call	80206c18 <printf>
80200d20:	00013806 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 30) {
80200d24:	e0bfbc17 	ldw	r2,-272(fp)
80200d28:	10800798 	cmpnei	r2,r2,30
80200d2c:	10000e1e 	bne	r2,zero,80200d68 <bDdr2EepromDump+0x648>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200d30:	00e008b4 	movhi	r3,32802
80200d34:	18feb404 	addi	r3,r3,-1328
80200d38:	00a008b4 	movhi	r2,32802
80200d3c:	10b12204 	addi	r2,r2,-15224
80200d40:	1009883a 	mov	r4,r2
80200d44:	00800b04 	movi	r2,44
80200d48:	100d883a 	mov	r6,r2
80200d4c:	200b883a 	mov	r5,r4
80200d50:	1809883a 	mov	r4,r3
80200d54:	0206aa00 	call	80206aa0 <memcpy>
						"(Minimun acive to precharge time[tRAS;ns])\n");
				debug(fp, cDebugBuffer);
80200d58:	012008b4 	movhi	r4,32802
80200d5c:	213eb404 	addi	r4,r4,-1328
80200d60:	0206c180 	call	80206c18 <printf>
80200d64:	00012706 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 31) {
80200d68:	e0bfbc17 	ldw	r2,-272(fp)
80200d6c:	108007d8 	cmpnei	r2,r2,31
80200d70:	10000e1e 	bne	r2,zero,80200dac <bDdr2EepromDump+0x68c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200d74:	00e008b4 	movhi	r3,32802
80200d78:	18feb404 	addi	r3,r3,-1328
80200d7c:	00a008b4 	movhi	r2,32802
80200d80:	10b12d04 	addi	r2,r2,-15180
80200d84:	1009883a 	mov	r4,r2
80200d88:	008010c4 	movi	r2,67
80200d8c:	100d883a 	mov	r6,r2
80200d90:	200b883a 	mov	r5,r4
80200d94:	1809883a 	mov	r4,r3
80200d98:	0206aa00 	call	80206aa0 <memcpy>
						"(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
				debug(fp, cDebugBuffer);
80200d9c:	012008b4 	movhi	r4,32802
80200da0:	213eb404 	addi	r4,r4,-1328
80200da4:	0206c180 	call	80206c18 <printf>
80200da8:	00011606 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 36) {
80200dac:	e0bfbc17 	ldw	r2,-272(fp)
80200db0:	10800918 	cmpnei	r2,r2,36
80200db4:	10000e1e 	bne	r2,zero,80200df0 <bDdr2EepromDump+0x6d0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200db8:	00e008b4 	movhi	r3,32802
80200dbc:	18feb404 	addi	r3,r3,-1328
80200dc0:	00a008b4 	movhi	r2,32802
80200dc4:	10b13e04 	addi	r2,r2,-15112
80200dc8:	1009883a 	mov	r4,r2
80200dcc:	00800a84 	movi	r2,42
80200dd0:	100d883a 	mov	r6,r2
80200dd4:	200b883a 	mov	r5,r4
80200dd8:	1809883a 	mov	r4,r3
80200ddc:	0206aa00 	call	80206aa0 <memcpy>
						"(Minimun write receovery time[tWR;nsx4])\n");
				debug(fp, cDebugBuffer);
80200de0:	012008b4 	movhi	r4,32802
80200de4:	213eb404 	addi	r4,r4,-1328
80200de8:	0206c180 	call	80206c18 <printf>
80200dec:	00010506 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 37) {
80200df0:	e0bfbc17 	ldw	r2,-272(fp)
80200df4:	10800958 	cmpnei	r2,r2,37
80200df8:	10000e1e 	bne	r2,zero,80200e34 <bDdr2EepromDump+0x714>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200dfc:	00e008b4 	movhi	r3,32802
80200e00:	18feb404 	addi	r3,r3,-1328
80200e04:	00a008b4 	movhi	r2,32802
80200e08:	10b14904 	addi	r2,r2,-15068
80200e0c:	1009883a 	mov	r4,r2
80200e10:	00800cc4 	movi	r2,51
80200e14:	100d883a 	mov	r6,r2
80200e18:	200b883a 	mov	r5,r4
80200e1c:	1809883a 	mov	r4,r3
80200e20:	0206aa00 	call	80206aa0 <memcpy>
						"(Internal write to read command delay[tWTR;nsx4])\n");
				debug(fp, cDebugBuffer);
80200e24:	012008b4 	movhi	r4,32802
80200e28:	213eb404 	addi	r4,r4,-1328
80200e2c:	0206c180 	call	80206c18 <printf>
80200e30:	0000f406 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 38) {
80200e34:	e0bfbc17 	ldw	r2,-272(fp)
80200e38:	10800998 	cmpnei	r2,r2,38
80200e3c:	10000e1e 	bne	r2,zero,80200e78 <bDdr2EepromDump+0x758>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200e40:	00e008b4 	movhi	r3,32802
80200e44:	18feb404 	addi	r3,r3,-1328
80200e48:	00a008b4 	movhi	r2,32802
80200e4c:	10b15604 	addi	r2,r2,-15016
80200e50:	1009883a 	mov	r4,r2
80200e54:	00800dc4 	movi	r2,55
80200e58:	100d883a 	mov	r6,r2
80200e5c:	200b883a 	mov	r5,r4
80200e60:	1809883a 	mov	r4,r3
80200e64:	0206aa00 	call	80206aa0 <memcpy>
						"(Internal read to precharge command delay[tRTP;nsx4])\n");
				debug(fp, cDebugBuffer);
80200e68:	012008b4 	movhi	r4,32802
80200e6c:	213eb404 	addi	r4,r4,-1328
80200e70:	0206c180 	call	80206c18 <printf>
80200e74:	0000e306 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 41) {
80200e78:	e0bfbc17 	ldw	r2,-272(fp)
80200e7c:	10800a58 	cmpnei	r2,r2,41
80200e80:	10000e1e 	bne	r2,zero,80200ebc <bDdr2EepromDump+0x79c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200e84:	00e008b4 	movhi	r3,32802
80200e88:	18feb404 	addi	r3,r3,-1328
80200e8c:	00a008b4 	movhi	r2,32802
80200e90:	10b16404 	addi	r2,r2,-14960
80200e94:	1009883a 	mov	r4,r2
80200e98:	00800c84 	movi	r2,50
80200e9c:	100d883a 	mov	r6,r2
80200ea0:	200b883a 	mov	r5,r4
80200ea4:	1809883a 	mov	r4,r3
80200ea8:	0206aa00 	call	80206aa0 <memcpy>
						"(Minimun activce to active/refresh time[tRC;ns])\n");
				debug(fp, cDebugBuffer);
80200eac:	012008b4 	movhi	r4,32802
80200eb0:	213eb404 	addi	r4,r4,-1328
80200eb4:	0206c180 	call	80206c18 <printf>
80200eb8:	0000d206 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 42) {
80200ebc:	e0bfbc17 	ldw	r2,-272(fp)
80200ec0:	10800a98 	cmpnei	r2,r2,42
80200ec4:	10000e1e 	bne	r2,zero,80200f00 <bDdr2EepromDump+0x7e0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200ec8:	00e008b4 	movhi	r3,32802
80200ecc:	18feb404 	addi	r3,r3,-1328
80200ed0:	00a008b4 	movhi	r2,32802
80200ed4:	10b17104 	addi	r2,r2,-14908
80200ed8:	1009883a 	mov	r4,r2
80200edc:	00800cc4 	movi	r2,51
80200ee0:	100d883a 	mov	r6,r2
80200ee4:	200b883a 	mov	r5,r4
80200ee8:	1809883a 	mov	r4,r3
80200eec:	0206aa00 	call	80206aa0 <memcpy>
						"(Minimun refresh to active/refresh time[tRFC;ns])\n");
				debug(fp, cDebugBuffer);
80200ef0:	012008b4 	movhi	r4,32802
80200ef4:	213eb404 	addi	r4,r4,-1328
80200ef8:	0206c180 	call	80206c18 <printf>
80200efc:	0000c106 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 62) {
80200f00:	e0bfbc17 	ldw	r2,-272(fp)
80200f04:	10800f98 	cmpnei	r2,r2,62
80200f08:	10000e1e 	bne	r2,zero,80200f44 <bDdr2EepromDump+0x824>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(SPD Revision)\n");
80200f0c:	00e008b4 	movhi	r3,32802
80200f10:	18feb404 	addi	r3,r3,-1328
80200f14:	00a008b4 	movhi	r2,32802
80200f18:	10b17e04 	addi	r2,r2,-14856
80200f1c:	1009883a 	mov	r4,r2
80200f20:	00800404 	movi	r2,16
80200f24:	100d883a 	mov	r6,r2
80200f28:	200b883a 	mov	r5,r4
80200f2c:	1809883a 	mov	r4,r3
80200f30:	0206aa00 	call	80206aa0 <memcpy>
				debug(fp, cDebugBuffer);
80200f34:	012008b4 	movhi	r4,32802
80200f38:	213eb404 	addi	r4,r4,-1328
80200f3c:	0206c180 	call	80206c18 <printf>
80200f40:	0000b006 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 63) {
80200f44:	e0bfbc17 	ldw	r2,-272(fp)
80200f48:	10800fd8 	cmpnei	r2,r2,63
80200f4c:	10001d1e 	bne	r2,zero,80200fc4 <bDdr2EepromDump+0x8a4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Checksum)\n");
80200f50:	00a008b4 	movhi	r2,32802
80200f54:	10beb404 	addi	r2,r2,-1328
80200f58:	00c00a04 	movi	r3,40
80200f5c:	10c00005 	stb	r3,0(r2)
80200f60:	00c010c4 	movi	r3,67
80200f64:	10c00045 	stb	r3,1(r2)
80200f68:	00c01a04 	movi	r3,104
80200f6c:	10c00085 	stb	r3,2(r2)
80200f70:	00c01944 	movi	r3,101
80200f74:	10c000c5 	stb	r3,3(r2)
80200f78:	00c018c4 	movi	r3,99
80200f7c:	10c00105 	stb	r3,4(r2)
80200f80:	00c01ac4 	movi	r3,107
80200f84:	10c00145 	stb	r3,5(r2)
80200f88:	00c01cc4 	movi	r3,115
80200f8c:	10c00185 	stb	r3,6(r2)
80200f90:	00c01d44 	movi	r3,117
80200f94:	10c001c5 	stb	r3,7(r2)
80200f98:	00c01b44 	movi	r3,109
80200f9c:	10c00205 	stb	r3,8(r2)
80200fa0:	00c00a44 	movi	r3,41
80200fa4:	10c00245 	stb	r3,9(r2)
80200fa8:	00c00284 	movi	r3,10
80200fac:	10c00285 	stb	r3,10(r2)
80200fb0:	100002c5 	stb	zero,11(r2)
				debug(fp, cDebugBuffer);
80200fb4:	012008b4 	movhi	r4,32802
80200fb8:	213eb404 	addi	r4,r4,-1328
80200fbc:	0206c180 	call	80206c18 <printf>
80200fc0:	00009006 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 64) {
80200fc4:	e0bfbc17 	ldw	r2,-272(fp)
80200fc8:	10801018 	cmpnei	r2,r2,64
80200fcc:	10000e1e 	bne	r2,zero,80201008 <bDdr2EepromDump+0x8e8>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(64~71: Manufacturer JEDEC ID)\n");
80200fd0:	00e008b4 	movhi	r3,32802
80200fd4:	18feb404 	addi	r3,r3,-1328
80200fd8:	00a008b4 	movhi	r2,32802
80200fdc:	10b18204 	addi	r2,r2,-14840
80200fe0:	1009883a 	mov	r4,r2
80200fe4:	00800804 	movi	r2,32
80200fe8:	100d883a 	mov	r6,r2
80200fec:	200b883a 	mov	r5,r4
80200ff0:	1809883a 	mov	r4,r3
80200ff4:	0206aa00 	call	80206aa0 <memcpy>
				debug(fp, cDebugBuffer);
80200ff8:	012008b4 	movhi	r4,32802
80200ffc:	213eb404 	addi	r4,r4,-1328
80201000:	0206c180 	call	80206c18 <printf>
80201004:	00007f06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 72) {
80201008:	e0bfbc17 	ldw	r2,-272(fp)
8020100c:	10801218 	cmpnei	r2,r2,72
80201010:	10000e1e 	bne	r2,zero,8020104c <bDdr2EepromDump+0x92c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201014:	00e008b4 	movhi	r3,32802
80201018:	18feb404 	addi	r3,r3,-1328
8020101c:	00a008b4 	movhi	r2,32802
80201020:	10b18a04 	addi	r2,r2,-14808
80201024:	1009883a 	mov	r4,r2
80201028:	00800dc4 	movi	r2,55
8020102c:	100d883a 	mov	r6,r2
80201030:	200b883a 	mov	r5,r4
80201034:	1809883a 	mov	r4,r3
80201038:	0206aa00 	call	80206aa0 <memcpy>
						"(Module manufacturing location[Vendor-specific code])\n");
				debug(fp, cDebugBuffer);
8020103c:	012008b4 	movhi	r4,32802
80201040:	213eb404 	addi	r4,r4,-1328
80201044:	0206c180 	call	80206c18 <printf>
80201048:	00006e06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 73) {
8020104c:	e0bfbc17 	ldw	r2,-272(fp)
80201050:	10801258 	cmpnei	r2,r2,73
80201054:	10000e1e 	bne	r2,zero,80201090 <bDdr2EepromDump+0x970>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(73~90: Moduloe part number)\n");
80201058:	00e008b4 	movhi	r3,32802
8020105c:	18feb404 	addi	r3,r3,-1328
80201060:	00a008b4 	movhi	r2,32802
80201064:	10b19804 	addi	r2,r2,-14752
80201068:	1009883a 	mov	r4,r2
8020106c:	00800784 	movi	r2,30
80201070:	100d883a 	mov	r6,r2
80201074:	200b883a 	mov	r5,r4
80201078:	1809883a 	mov	r4,r3
8020107c:	0206aa00 	call	80206aa0 <memcpy>
				debug(fp, cDebugBuffer);
80201080:	012008b4 	movhi	r4,32802
80201084:	213eb404 	addi	r4,r4,-1328
80201088:	0206c180 	call	80206c18 <printf>
8020108c:	00005d06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 91) {
80201090:	e0bfbc17 	ldw	r2,-272(fp)
80201094:	108016d8 	cmpnei	r2,r2,91
80201098:	10000e1e 	bne	r2,zero,802010d4 <bDdr2EepromDump+0x9b4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(91~92: Moduloe revision code)\n");
8020109c:	00e008b4 	movhi	r3,32802
802010a0:	18feb404 	addi	r3,r3,-1328
802010a4:	00a008b4 	movhi	r2,32802
802010a8:	10b1a004 	addi	r2,r2,-14720
802010ac:	1009883a 	mov	r4,r2
802010b0:	00800804 	movi	r2,32
802010b4:	100d883a 	mov	r6,r2
802010b8:	200b883a 	mov	r5,r4
802010bc:	1809883a 	mov	r4,r3
802010c0:	0206aa00 	call	80206aa0 <memcpy>
				debug(fp, cDebugBuffer);
802010c4:	012008b4 	movhi	r4,32802
802010c8:	213eb404 	addi	r4,r4,-1328
802010cc:	0206c180 	call	80206c18 <printf>
802010d0:	00004c06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 93) {
802010d4:	e0bfbc17 	ldw	r2,-272(fp)
802010d8:	10801758 	cmpnei	r2,r2,93
802010dc:	10000e1e 	bne	r2,zero,80201118 <bDdr2EepromDump+0x9f8>
#if DEBUG_ON
				sprintf(cDebugBuffer,
802010e0:	00e008b4 	movhi	r3,32802
802010e4:	18feb404 	addi	r3,r3,-1328
802010e8:	00a008b4 	movhi	r2,32802
802010ec:	10b1a804 	addi	r2,r2,-14688
802010f0:	1009883a 	mov	r4,r2
802010f4:	008009c4 	movi	r2,39
802010f8:	100d883a 	mov	r6,r2
802010fc:	200b883a 	mov	r5,r4
80201100:	1809883a 	mov	r4,r3
80201104:	0206aa00 	call	80206aa0 <memcpy>
						"(Manufacture Years since 2000[0-255])\n");
				debug(fp, cDebugBuffer);
80201108:	012008b4 	movhi	r4,32802
8020110c:	213eb404 	addi	r4,r4,-1328
80201110:	0206c180 	call	80206c18 <printf>
80201114:	00003b06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 94) {
80201118:	e0bfbc17 	ldw	r2,-272(fp)
8020111c:	10801798 	cmpnei	r2,r2,94
80201120:	10000e1e 	bne	r2,zero,8020115c <bDdr2EepromDump+0xa3c>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Manufacture Weeks[1-52])\n");
80201124:	00e008b4 	movhi	r3,32802
80201128:	18feb404 	addi	r3,r3,-1328
8020112c:	00a008b4 	movhi	r2,32802
80201130:	10b1b204 	addi	r2,r2,-14648
80201134:	1009883a 	mov	r4,r2
80201138:	008006c4 	movi	r2,27
8020113c:	100d883a 	mov	r6,r2
80201140:	200b883a 	mov	r5,r4
80201144:	1809883a 	mov	r4,r3
80201148:	0206aa00 	call	80206aa0 <memcpy>
				debug(fp, cDebugBuffer);
8020114c:	012008b4 	movhi	r4,32802
80201150:	213eb404 	addi	r4,r4,-1328
80201154:	0206c180 	call	80206c18 <printf>
80201158:	00002a06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 95) {
8020115c:	e0bfbc17 	ldw	r2,-272(fp)
80201160:	108017d8 	cmpnei	r2,r2,95
80201164:	10000e1e 	bne	r2,zero,802011a0 <bDdr2EepromDump+0xa80>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201168:	00e008b4 	movhi	r3,32802
8020116c:	18feb404 	addi	r3,r3,-1328
80201170:	00a008b4 	movhi	r2,32802
80201174:	10b1b904 	addi	r2,r2,-14620
80201178:	1009883a 	mov	r4,r2
8020117c:	00800a04 	movi	r2,40
80201180:	100d883a 	mov	r6,r2
80201184:	200b883a 	mov	r5,r4
80201188:	1809883a 	mov	r4,r3
8020118c:	0206aa00 	call	80206aa0 <memcpy>
						"(95~98[4-bytes]: Module serial number)\n");
				debug(fp, cDebugBuffer);
80201190:	012008b4 	movhi	r4,32802
80201194:	213eb404 	addi	r4,r4,-1328
80201198:	0206c180 	call	80206c18 <printf>
8020119c:	00001906 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 99) {
802011a0:	e0bfbc17 	ldw	r2,-272(fp)
802011a4:	108018d8 	cmpnei	r2,r2,99
802011a8:	10000e1e 	bne	r2,zero,802011e4 <bDdr2EepromDump+0xac4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(99~128: Manufacturer-specific data)\n");
802011ac:	00e008b4 	movhi	r3,32802
802011b0:	18feb404 	addi	r3,r3,-1328
802011b4:	00a008b4 	movhi	r2,32802
802011b8:	10b1c304 	addi	r2,r2,-14580
802011bc:	1009883a 	mov	r4,r2
802011c0:	00800984 	movi	r2,38
802011c4:	100d883a 	mov	r6,r2
802011c8:	200b883a 	mov	r5,r4
802011cc:	1809883a 	mov	r4,r3
802011d0:	0206aa00 	call	80206aa0 <memcpy>
				debug(fp, cDebugBuffer);
802011d4:	012008b4 	movhi	r4,32802
802011d8:	213eb404 	addi	r4,r4,-1328
802011dc:	0206c180 	call	80206c18 <printf>
802011e0:	00000806 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else {
#if DEBUG_ON
				sprintf(cDebugBuffer, "\n");
802011e4:	00a008b4 	movhi	r2,32802
802011e8:	10beb404 	addi	r2,r2,-1328
802011ec:	00c00284 	movi	r3,10
802011f0:	10c00005 	stb	r3,0(r2)
802011f4:	10000045 	stb	zero,1(r2)
				debug(fp, cDebugBuffer);
802011f8:	012008b4 	movhi	r4,32802
802011fc:	213eb404 	addi	r4,r4,-1328
80201200:	0206c180 	call	80206c18 <printf>

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
80201204:	e0bfbc17 	ldw	r2,-272(fp)
80201208:	10800044 	addi	r2,r2,1
8020120c:	e0bfbc15 	stw	r2,-272(fp)
80201210:	e0bfbc17 	ldw	r2,-272(fp)
80201214:	10804008 	cmpgei	r2,r2,256
80201218:	1000101e 	bne	r2,zero,8020125c <bDdr2EepromDump+0xb3c>
8020121c:	e0bfbe17 	ldw	r2,-264(fp)
80201220:	103d8d1e 	bne	r2,zero,80200858 <__reset+0xfa1e0858>
80201224:	00000d06 	br	8020125c <bDdr2EepromDump+0xb3c>
#endif
			}
		}
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "Failed to dump EEPROM\n");
80201228:	00e008b4 	movhi	r3,32802
8020122c:	18feb404 	addi	r3,r3,-1328
80201230:	00a008b4 	movhi	r2,32802
80201234:	10b1cd04 	addi	r2,r2,-14540
80201238:	1009883a 	mov	r4,r2
8020123c:	008005c4 	movi	r2,23
80201240:	100d883a 	mov	r6,r2
80201244:	200b883a 	mov	r5,r4
80201248:	1809883a 	mov	r4,r3
8020124c:	0206aa00 	call	80206aa0 <memcpy>
		debug(fp, cDebugBuffer);
80201250:	012008b4 	movhi	r4,32802
80201254:	213eb404 	addi	r4,r4,-1328
80201258:	0206c180 	call	80206c18 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
8020125c:	00a008b4 	movhi	r2,32802
80201260:	10beb404 	addi	r2,r2,-1328
80201264:	00c00284 	movi	r3,10
80201268:	10c00005 	stb	r3,0(r2)
8020126c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201270:	012008b4 	movhi	r4,32802
80201274:	213eb404 	addi	r4,r4,-1328
80201278:	0206c180 	call	80206c18 <printf>
#endif

	return bSuccess;
8020127c:	e0bfbe17 	ldw	r2,-264(fp)
}
80201280:	e037883a 	mov	sp,fp
80201284:	dfc00117 	ldw	ra,4(sp)
80201288:	df000017 	ldw	fp,0(sp)
8020128c:	dec00204 	addi	sp,sp,8
80201290:	f800283a 	ret

80201294 <bDdr2SwitchMemory>:

bool bDdr2SwitchMemory(alt_u8 ucMemoryId) {
80201294:	defffb04 	addi	sp,sp,-20
80201298:	dfc00415 	stw	ra,16(sp)
8020129c:	df000315 	stw	fp,12(sp)
802012a0:	df000304 	addi	fp,sp,12
802012a4:	2005883a 	mov	r2,r4
802012a8:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess = FALSE;
802012ac:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 *puliDdr2MemAddr = (alt_u32 *) DDR2_EXT_ADDR_CONTROL_BASE;
802012b0:	00a00034 	movhi	r2,32768
802012b4:	10812204 	addi	r2,r2,1160
802012b8:	e0bffe15 	stw	r2,-8(fp)

	switch (ucMemoryId) {
802012bc:	e0bfff03 	ldbu	r2,-4(fp)
802012c0:	10000326 	beq	r2,zero,802012d0 <bDdr2SwitchMemory+0x3c>
802012c4:	10800060 	cmpeqi	r2,r2,1
802012c8:	1000061e 	bne	r2,zero,802012e4 <bDdr2SwitchMemory+0x50>
802012cc:	00000b06 	br	802012fc <bDdr2SwitchMemory+0x68>
	case DDR2_M1_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
802012d0:	e0bffe17 	ldw	r2,-8(fp)
802012d4:	10000015 	stw	zero,0(r2)
		bSuccess = TRUE;
802012d8:	00800044 	movi	r2,1
802012dc:	e0bffd15 	stw	r2,-12(fp)
		break;
802012e0:	00001406 	br	80201334 <bDdr2SwitchMemory+0xa0>
	case DDR2_M2_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
802012e4:	e0bffe17 	ldw	r2,-8(fp)
802012e8:	00e00034 	movhi	r3,32768
802012ec:	10c00015 	stw	r3,0(r2)
		bSuccess = TRUE;
802012f0:	00800044 	movi	r2,1
802012f4:	e0bffd15 	stw	r2,-12(fp)
		break;
802012f8:	00000e06 	br	80201334 <bDdr2SwitchMemory+0xa0>
	default:
		bSuccess = FALSE;
802012fc:	e03ffd15 	stw	zero,-12(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80201300:	00e008b4 	movhi	r3,32802
80201304:	18feb404 	addi	r3,r3,-1328
80201308:	00a008b4 	movhi	r2,32802
8020130c:	10b1d304 	addi	r2,r2,-14516
80201310:	1009883a 	mov	r4,r2
80201314:	00800f04 	movi	r2,60
80201318:	100d883a 	mov	r6,r2
8020131c:	200b883a 	mov	r5,r4
80201320:	1809883a 	mov	r4,r3
80201324:	0206aa00 	call	80206aa0 <memcpy>
				"DR2 Memory ID not identified!! Error switching memories!! \n");
		debug(fp, cDebugBuffer)
80201328:	012008b4 	movhi	r4,32802
8020132c:	213eb404 	addi	r4,r4,-1328
80201330:	0206c180 	call	80206c18 <printf>
		;
#endif
	}

	return bSuccess;
80201334:	e0bffd17 	ldw	r2,-12(fp)
}
80201338:	e037883a 	mov	sp,fp
8020133c:	dfc00117 	ldw	ra,4(sp)
80201340:	df000017 	ldw	fp,0(sp)
80201344:	dec00204 	addi	sp,sp,8
80201348:	f800283a 	ret

8020134c <bDdr2MemoryWriteTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryWriteTest(alt_u8 ucMemoryId) {
8020134c:	deffe204 	addi	sp,sp,-120
80201350:	dfc01d15 	stw	ra,116(sp)
80201354:	df001c15 	stw	fp,112(sp)
80201358:	dc401b15 	stw	r17,108(sp)
8020135c:	dc001a15 	stw	r16,104(sp)
80201360:	df001c04 	addi	fp,sp,112
80201364:	2005883a 	mov	r2,r4
80201368:	e0bffd05 	stb	r2,-12(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Write Test =====\n");
8020136c:	00e008b4 	movhi	r3,32802
80201370:	18feb404 	addi	r3,r3,-1328
80201374:	00a008b4 	movhi	r2,32802
80201378:	10b1e204 	addi	r2,r2,-14456
8020137c:	1009883a 	mov	r4,r2
80201380:	00800a04 	movi	r2,40
80201384:	100d883a 	mov	r6,r2
80201388:	200b883a 	mov	r5,r4
8020138c:	1809883a 	mov	r4,r3
80201390:	0206aa00 	call	80206aa0 <memcpy>
	debug(fp, cDebugBuffer);
80201394:	012008b4 	movhi	r4,32802
80201398:	213eb404 	addi	r4,r4,-1328
8020139c:	0206c180 	call	80206c18 <printf>
#endif
	bool bSuccess = FALSE;
802013a0:	e03fe515 	stw	zero,-108(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
802013a4:	e0bffd03 	ldbu	r2,-12(fp)
802013a8:	10000326 	beq	r2,zero,802013b8 <bDdr2MemoryWriteTest+0x6c>
802013ac:	10800060 	cmpeqi	r2,r2,1
802013b0:	10000a1e 	bne	r2,zero,802013dc <bDdr2MemoryWriteTest+0x90>
802013b4:	00001206 	br	80201400 <bDdr2MemoryWriteTest+0xb4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
802013b8:	e0bffd03 	ldbu	r2,-12(fp)
802013bc:	1009883a 	mov	r4,r2
802013c0:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802013c4:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
802013c8:	00a00034 	movhi	r2,32768
802013cc:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
802013d0:	00800044 	movi	r2,1
802013d4:	e0bfe515 	stw	r2,-108(fp)
		break;
802013d8:	00001906 	br	80201440 <bDdr2MemoryWriteTest+0xf4>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
802013dc:	e0bffd03 	ldbu	r2,-12(fp)
802013e0:	1009883a 	mov	r4,r2
802013e4:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802013e8:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
802013ec:	00a00034 	movhi	r2,32768
802013f0:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
802013f4:	00800044 	movi	r2,1
802013f8:	e0bfe515 	stw	r2,-108(fp)
		break;
802013fc:	00001006 	br	80201440 <bDdr2MemoryWriteTest+0xf4>
	default:
		bSuccess = FALSE;
80201400:	e03fe515 	stw	zero,-108(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80201404:	00e008b4 	movhi	r3,32802
80201408:	18feb404 	addi	r3,r3,-1328
8020140c:	00a008b4 	movhi	r2,32802
80201410:	10aff304 	addi	r2,r2,-16436
80201414:	1009883a 	mov	r4,r2
80201418:	00800bc4 	movi	r2,47
8020141c:	100d883a 	mov	r6,r2
80201420:	200b883a 	mov	r5,r4
80201424:	1809883a 	mov	r4,r3
80201428:	0206aa00 	call	80206aa0 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
8020142c:	012008b4 	movhi	r4,32802
80201430:	213eb404 	addi	r4,r4,-1328
80201434:	0206c180 	call	80206c18 <printf>
		;
#endif
		return bSuccess;
80201438:	e0bfe517 	ldw	r2,-108(fp)
8020143c:	00010a06 	br	80201868 <bDdr2MemoryWriteTest+0x51c>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
80201440:	e0bfe717 	ldw	r2,-100(fp)
80201444:	1004d53a 	srli	r2,r2,20
80201448:	100d883a 	mov	r6,r2
8020144c:	016008b4 	movhi	r5,32802
80201450:	2971ec04 	addi	r5,r5,-14416
80201454:	012008b4 	movhi	r4,32802
80201458:	213eb404 	addi	r4,r4,-1328
8020145c:	0206d800 	call	80206d80 <sprintf>
	debug(fp, cDebugBuffer);
80201460:	012008b4 	movhi	r4,32802
80201464:	213eb404 	addi	r4,r4,-1328
80201468:	0206c180 	call	80206c18 <printf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes;

	int iNItemNum, iNPos;
	const int ciMyDataSize = sizeof(TMyData);
8020146c:	00800104 	movi	r2,4
80201470:	e0bfee15 	stw	r2,-72(fp)
	int iNProgressIndex = 0;
80201474:	e03fed15 	stw	zero,-76(fp)
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
80201478:	e03fef15 	stw	zero,-68(fp)

	for (iI = 0; iI < 10; iI++) {
8020147c:	e03fe815 	stw	zero,-96(fp)
80201480:	00001506 	br	802014d8 <bDdr2MemoryWriteTest+0x18c>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
80201484:	e0ffe717 	ldw	r3,-100(fp)
80201488:	00b33374 	movhi	r2,52429
8020148c:	10b33344 	addi	r2,r2,-13107
80201490:	1888383a 	mulxuu	r4,r3,r2
80201494:	1885383a 	mul	r2,r3,r2
80201498:	1021883a 	mov	r16,r2
8020149c:	2023883a 	mov	r17,r4
802014a0:	8804d0fa 	srli	r2,r17,3
802014a4:	e0ffe817 	ldw	r3,-96(fp)
802014a8:	18c00044 	addi	r3,r3,1
802014ac:	10c7383a 	mul	r3,r2,r3
802014b0:	e0bfe817 	ldw	r2,-96(fp)
802014b4:	1085883a 	add	r2,r2,r2
802014b8:	1085883a 	add	r2,r2,r2
802014bc:	e13fe504 	addi	r4,fp,-108
802014c0:	2085883a 	add	r2,r4,r2
802014c4:	10800e04 	addi	r2,r2,56
802014c8:	10c00015 	stw	r3,0(r2)
	int iNProgressIndex = 0;
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
802014cc:	e0bfe817 	ldw	r2,-96(fp)
802014d0:	10800044 	addi	r2,r2,1
802014d4:	e0bfe815 	stw	r2,-96(fp)
802014d8:	e0bfe817 	ldw	r2,-96(fp)
802014dc:	10800290 	cmplti	r2,r2,10
802014e0:	103fe81e 	bne	r2,zero,80201484 <__reset+0xfa1e1484>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
802014e4:	d0a02d17 	ldw	r2,-32588(gp)
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
802014e8:	e0bff015 	stw	r2,-64(fp)
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
802014ec:	00804004 	movi	r2,256
802014f0:	e0bfeb15 	stw	r2,-84(fp)
	for (iI = 0; iI < iNItemNum; iI++) {
802014f4:	e03fe815 	stw	zero,-96(fp)
802014f8:	00001e06 	br	80201574 <bDdr2MemoryWriteTest+0x228>
		if (iI == 0) {
802014fc:	e0bfe817 	ldw	r2,-96(fp)
80201500:	1000091e 	bne	r2,zero,80201528 <bDdr2MemoryWriteTest+0x1dc>
			xSZData[iI] = uliInitValue;
80201504:	00a008b4 	movhi	r2,32802
80201508:	10bef404 	addi	r2,r2,-1072
8020150c:	e0ffe817 	ldw	r3,-96(fp)
80201510:	18c7883a 	add	r3,r3,r3
80201514:	18c7883a 	add	r3,r3,r3
80201518:	10c5883a 	add	r2,r2,r3
8020151c:	e0fff017 	ldw	r3,-64(fp)
80201520:	10c00015 	stw	r3,0(r2)
80201524:	00001006 	br	80201568 <bDdr2MemoryWriteTest+0x21c>
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
80201528:	e0bfe817 	ldw	r2,-96(fp)
8020152c:	10ffffc4 	addi	r3,r2,-1
80201530:	00a008b4 	movhi	r2,32802
80201534:	10bef404 	addi	r2,r2,-1072
80201538:	18c7883a 	add	r3,r3,r3
8020153c:	18c7883a 	add	r3,r3,r3
80201540:	10c5883a 	add	r2,r2,r3
80201544:	10800017 	ldw	r2,0(r2)
80201548:	11000364 	muli	r4,r2,13
8020154c:	00a008b4 	movhi	r2,32802
80201550:	10bef404 	addi	r2,r2,-1072
80201554:	e0ffe817 	ldw	r3,-96(fp)
80201558:	18c7883a 	add	r3,r3,r3
8020155c:	18c7883a 	add	r3,r3,r3
80201560:	10c5883a 	add	r2,r2,r3
80201564:	11000015 	stw	r4,0(r2)
	for (iI = 0; iI < 10; iI++) {
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
	for (iI = 0; iI < iNItemNum; iI++) {
80201568:	e0bfe817 	ldw	r2,-96(fp)
8020156c:	10800044 	addi	r2,r2,1
80201570:	e0bfe815 	stw	r2,-96(fp)
80201574:	e0ffe817 	ldw	r3,-96(fp)
80201578:	e0bfeb17 	ldw	r2,-84(fp)
8020157c:	18bfdf16 	blt	r3,r2,802014fc <__reset+0xfa1e14fc>
			xSZData[iI] = uliInitValue;
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
		}
	}
	xSZData[iNItemNum - 1] = 0xAAAAAAAA;
80201580:	e0bfeb17 	ldw	r2,-84(fp)
80201584:	10ffffc4 	addi	r3,r2,-1
80201588:	00a008b4 	movhi	r2,32802
8020158c:	10bef404 	addi	r2,r2,-1072
80201590:	18c7883a 	add	r3,r3,r3
80201594:	18c7883a 	add	r3,r3,r3
80201598:	10c7883a 	add	r3,r2,r3
8020159c:	00aaaaf4 	movhi	r2,43691
802015a0:	10aaaa84 	addi	r2,r2,-21846
802015a4:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 2] = 0x55555555;
802015a8:	e0bfeb17 	ldw	r2,-84(fp)
802015ac:	10ffff84 	addi	r3,r2,-2
802015b0:	00a008b4 	movhi	r2,32802
802015b4:	10bef404 	addi	r2,r2,-1072
802015b8:	18c7883a 	add	r3,r3,r3
802015bc:	18c7883a 	add	r3,r3,r3
802015c0:	10c7883a 	add	r3,r2,r3
802015c4:	00955574 	movhi	r2,21845
802015c8:	10955544 	addi	r2,r2,21845
802015cc:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 3] = 0x00000000;
802015d0:	e0bfeb17 	ldw	r2,-84(fp)
802015d4:	10ffff44 	addi	r3,r2,-3
802015d8:	00a008b4 	movhi	r2,32802
802015dc:	10bef404 	addi	r2,r2,-1072
802015e0:	18c7883a 	add	r3,r3,r3
802015e4:	18c7883a 	add	r3,r3,r3
802015e8:	10c5883a 	add	r2,r2,r3
802015ec:	10000015 	stw	zero,0(r2)
	xSZData[iNItemNum - 4] = 0xFFFFFFFF;
802015f0:	e0bfeb17 	ldw	r2,-84(fp)
802015f4:	10ffff04 	addi	r3,r2,-4
802015f8:	00a008b4 	movhi	r2,32802
802015fc:	10bef404 	addi	r2,r2,-1072
80201600:	18c7883a 	add	r3,r3,r3
80201604:	18c7883a 	add	r3,r3,r3
80201608:	10c5883a 	add	r2,r2,r3
8020160c:	00ffffc4 	movi	r3,-1
80201610:	10c00015 	stw	r3,0(r2)

#if DEBUG_ON
	sprintf(cDebugBuffer, "Writing data...\n");
80201614:	00e008b4 	movhi	r3,32802
80201618:	18feb404 	addi	r3,r3,-1328
8020161c:	00a008b4 	movhi	r2,32802
80201620:	10b1f204 	addi	r2,r2,-14392
80201624:	1009883a 	mov	r4,r2
80201628:	00800444 	movi	r2,17
8020162c:	100d883a 	mov	r6,r2
80201630:	200b883a 	mov	r5,r4
80201634:	1809883a 	mov	r4,r3
80201638:	0206aa00 	call	80206aa0 <memcpy>
	debug(fp, cDebugBuffer);
8020163c:	012008b4 	movhi	r4,32802
80201640:	213eb404 	addi	r4,r4,-1328
80201644:	0206c180 	call	80206c18 <printf>
80201648:	d0a02d17 	ldw	r2,-32588(gp)
#endif
	iTimeStart = alt_nticks();
8020164c:	e0bff115 	stw	r2,-60(fp)
	pxDes = (TMyData *) uliDdr2Base;
80201650:	e0bfe617 	ldw	r2,-104(fp)
80201654:	e0bfea15 	stw	r2,-88(fp)
	iNAccessLen = sizeof(xSZData);
80201658:	00810004 	movi	r2,1024
8020165c:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
80201660:	e0ffe917 	ldw	r3,-92(fp)
80201664:	e0bfee17 	ldw	r2,-72(fp)
80201668:	1885283a 	div	r2,r3,r2
8020166c:	e0bfeb15 	stw	r2,-84(fp)
	iNPos = 0;
80201670:	e03fec15 	stw	zero,-80(fp)
	while (iNPos < uliByteLen) {
80201674:	00003806 	br	80201758 <bDdr2MemoryWriteTest+0x40c>
		iNRemainedLen = uliByteLen - iNPos;
80201678:	e0bfec17 	ldw	r2,-80(fp)
8020167c:	e0ffe717 	ldw	r3,-100(fp)
80201680:	1885c83a 	sub	r2,r3,r2
80201684:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
80201688:	e0bfe917 	ldw	r2,-92(fp)
8020168c:	e0fff217 	ldw	r3,-56(fp)
80201690:	1880060e 	bge	r3,r2,802016ac <bDdr2MemoryWriteTest+0x360>
			iNAccessLen = iNRemainedLen;
80201694:	e0bff217 	ldw	r2,-56(fp)
80201698:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
8020169c:	e0ffe917 	ldw	r3,-92(fp)
802016a0:	e0bfee17 	ldw	r2,-72(fp)
802016a4:	1885283a 	div	r2,r3,r2
802016a8:	e0bfeb15 	stw	r2,-84(fp)
		}
		memcpy(pxDes, xSZData, iNAccessLen);
802016ac:	e0bfe917 	ldw	r2,-92(fp)
802016b0:	100d883a 	mov	r6,r2
802016b4:	016008b4 	movhi	r5,32802
802016b8:	297ef404 	addi	r5,r5,-1072
802016bc:	e13fea17 	ldw	r4,-88(fp)
802016c0:	0206aa00 	call	80206aa0 <memcpy>
		pxDes += iNItemNum;
802016c4:	e0bfeb17 	ldw	r2,-84(fp)
802016c8:	1085883a 	add	r2,r2,r2
802016cc:	1085883a 	add	r2,r2,r2
802016d0:	1007883a 	mov	r3,r2
802016d4:	e0bfea17 	ldw	r2,-88(fp)
802016d8:	10c5883a 	add	r2,r2,r3
802016dc:	e0bfea15 	stw	r2,-88(fp)
		iNPos += iNAccessLen;
802016e0:	e0ffec17 	ldw	r3,-80(fp)
802016e4:	e0bfe917 	ldw	r2,-92(fp)
802016e8:	1885883a 	add	r2,r3,r2
802016ec:	e0bfec15 	stw	r2,-80(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
802016f0:	e0bfed17 	ldw	r2,-76(fp)
802016f4:	10800288 	cmpgei	r2,r2,10
802016f8:	1000171e 	bne	r2,zero,80201758 <bDdr2MemoryWriteTest+0x40c>
802016fc:	e0bfed17 	ldw	r2,-76(fp)
80201700:	1085883a 	add	r2,r2,r2
80201704:	1085883a 	add	r2,r2,r2
80201708:	e0ffe504 	addi	r3,fp,-108
8020170c:	1885883a 	add	r2,r3,r2
80201710:	10800e04 	addi	r2,r2,56
80201714:	10800017 	ldw	r2,0(r2)
80201718:	e0ffec17 	ldw	r3,-80(fp)
8020171c:	18800e36 	bltu	r3,r2,80201758 <bDdr2MemoryWriteTest+0x40c>
			iNProgressIndex++;
80201720:	e0bfed17 	ldw	r2,-76(fp)
80201724:	10800044 	addi	r2,r2,1
80201728:	e0bfed15 	stw	r2,-76(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
8020172c:	e0bfed17 	ldw	r2,-76(fp)
80201730:	108002a4 	muli	r2,r2,10
80201734:	100d883a 	mov	r6,r2
80201738:	016008b4 	movhi	r5,32802
8020173c:	2971f704 	addi	r5,r5,-14372
80201740:	012008b4 	movhi	r4,32802
80201744:	213eb404 	addi	r4,r4,-1328
80201748:	0206d800 	call	80206d80 <sprintf>
			debug(fp, cDebugBuffer);
8020174c:	012008b4 	movhi	r4,32802
80201750:	213eb404 	addi	r4,r4,-1328
80201754:	0206c180 	call	80206c18 <printf>
	iTimeStart = alt_nticks();
	pxDes = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (iNPos < uliByteLen) {
80201758:	e0ffec17 	ldw	r3,-80(fp)
8020175c:	e0bfe717 	ldw	r2,-100(fp)
80201760:	18bfc536 	bltu	r3,r2,80201678 <__reset+0xfa1e1678>
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
			debug(fp, cDebugBuffer);
#endif
		}
	}
	alt_dcache_flush_all();
80201764:	0216c380 	call	80216c38 <alt_dcache_flush_all>
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201768:	00a008b4 	movhi	r2,32802
8020176c:	10beb404 	addi	r2,r2,-1328
80201770:	00c00284 	movi	r3,10
80201774:	10c00005 	stb	r3,0(r2)
80201778:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
8020177c:	012008b4 	movhi	r4,32802
80201780:	213eb404 	addi	r4,r4,-1328
80201784:	0206c180 	call	80206c18 <printf>
80201788:	d0e02d17 	ldw	r3,-32588(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
8020178c:	e0bff117 	ldw	r2,-60(fp)
80201790:	1885c83a 	sub	r2,r3,r2
80201794:	e0bfef15 	stw	r2,-68(fp)
	if (bSuccess) {
80201798:	e0bfe517 	ldw	r2,-108(fp)
8020179c:	10001c26 	beq	r2,zero,80201810 <bDdr2MemoryWriteTest+0x4c4>
#if DEBUG_ON
		sprintf(cDebugBuffer,
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
802017a0:	e13fef17 	ldw	r4,-68(fp)
802017a4:	02066180 	call	80206618 <__floatsisf>
802017a8:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
802017ac:	d0a02c17 	ldw	r2,-32592(gp)
802017b0:	1009883a 	mov	r4,r2
802017b4:	020673c0 	call	8020673c <__floatunsisf>
802017b8:	1007883a 	mov	r3,r2
802017bc:	180b883a 	mov	r5,r3
802017c0:	8009883a 	mov	r4,r16
802017c4:	02061100 	call	80206110 <__divsf3>
802017c8:	1007883a 	mov	r3,r2
802017cc:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#if DEBUG_ON
		sprintf(cDebugBuffer,
802017d0:	1009883a 	mov	r4,r2
802017d4:	020682c0 	call	8020682c <__extendsfdf2>
802017d8:	1009883a 	mov	r4,r2
802017dc:	180b883a 	mov	r5,r3
802017e0:	d9400015 	stw	r5,0(sp)
802017e4:	200f883a 	mov	r7,r4
802017e8:	e1bfe717 	ldw	r6,-100(fp)
802017ec:	016008b4 	movhi	r5,32802
802017f0:	2971f904 	addi	r5,r5,-14364
802017f4:	012008b4 	movhi	r4,32802
802017f8:	213eb404 	addi	r4,r4,-1328
802017fc:	0206d800 	call	80206d80 <sprintf>
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
80201800:	012008b4 	movhi	r4,32802
80201804:	213eb404 	addi	r4,r4,-1328
80201808:	0206c180 	call	80206c18 <printf>
8020180c:	00000d06 	br	80201844 <bDdr2MemoryWriteTest+0x4f8>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
80201810:	00e008b4 	movhi	r3,32802
80201814:	18feb404 	addi	r3,r3,-1328
80201818:	00a008b4 	movhi	r2,32802
8020181c:	10b20504 	addi	r2,r2,-14316
80201820:	1009883a 	mov	r4,r2
80201824:	00800584 	movi	r2,22
80201828:	100d883a 	mov	r6,r2
8020182c:	200b883a 	mov	r5,r4
80201830:	1809883a 	mov	r4,r3
80201834:	0206aa00 	call	80206aa0 <memcpy>
		debug(fp, cDebugBuffer);
80201838:	012008b4 	movhi	r4,32802
8020183c:	213eb404 	addi	r4,r4,-1328
80201840:	0206c180 	call	80206c18 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201844:	00a008b4 	movhi	r2,32802
80201848:	10beb404 	addi	r2,r2,-1328
8020184c:	00c00284 	movi	r3,10
80201850:	10c00005 	stb	r3,0(r2)
80201854:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201858:	012008b4 	movhi	r4,32802
8020185c:	213eb404 	addi	r4,r4,-1328
80201860:	0206c180 	call	80206c18 <printf>
#endif

	return bSuccess;
80201864:	e0bfe517 	ldw	r2,-108(fp)
}
80201868:	e6fffe04 	addi	sp,fp,-8
8020186c:	dfc00317 	ldw	ra,12(sp)
80201870:	df000217 	ldw	fp,8(sp)
80201874:	dc400117 	ldw	r17,4(sp)
80201878:	dc000017 	ldw	r16,0(sp)
8020187c:	dec00404 	addi	sp,sp,16
80201880:	f800283a 	ret

80201884 <bDdr2MemoryReadTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryReadTest(alt_u8 ucMemoryId) {
80201884:	deffe204 	addi	sp,sp,-120
80201888:	dfc01d15 	stw	ra,116(sp)
8020188c:	df001c15 	stw	fp,112(sp)
80201890:	dc401b15 	stw	r17,108(sp)
80201894:	dc001a15 	stw	r16,104(sp)
80201898:	df001c04 	addi	fp,sp,112
8020189c:	2005883a 	mov	r2,r4
802018a0:	e0bffd05 	stb	r2,-12(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Read Test =====\n");
802018a4:	00e008b4 	movhi	r3,32802
802018a8:	18feb404 	addi	r3,r3,-1328
802018ac:	00a008b4 	movhi	r2,32802
802018b0:	10b20b04 	addi	r2,r2,-14292
802018b4:	1009883a 	mov	r4,r2
802018b8:	008009c4 	movi	r2,39
802018bc:	100d883a 	mov	r6,r2
802018c0:	200b883a 	mov	r5,r4
802018c4:	1809883a 	mov	r4,r3
802018c8:	0206aa00 	call	80206aa0 <memcpy>
	debug(fp, cDebugBuffer);
802018cc:	012008b4 	movhi	r4,32802
802018d0:	213eb404 	addi	r4,r4,-1328
802018d4:	0206c180 	call	80206c18 <printf>
#endif
	bool bSuccess = FALSE;
802018d8:	e03fe515 	stw	zero,-108(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
802018dc:	e0bffd03 	ldbu	r2,-12(fp)
802018e0:	10000326 	beq	r2,zero,802018f0 <bDdr2MemoryReadTest+0x6c>
802018e4:	10800060 	cmpeqi	r2,r2,1
802018e8:	10000a1e 	bne	r2,zero,80201914 <bDdr2MemoryReadTest+0x90>
802018ec:	00001206 	br	80201938 <bDdr2MemoryReadTest+0xb4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
802018f0:	e0bffd03 	ldbu	r2,-12(fp)
802018f4:	1009883a 	mov	r4,r2
802018f8:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802018fc:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
80201900:	00a00034 	movhi	r2,32768
80201904:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
80201908:	00800044 	movi	r2,1
8020190c:	e0bfe515 	stw	r2,-108(fp)
		break;
80201910:	00001906 	br	80201978 <bDdr2MemoryReadTest+0xf4>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
80201914:	e0bffd03 	ldbu	r2,-12(fp)
80201918:	1009883a 	mov	r4,r2
8020191c:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80201920:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
80201924:	00a00034 	movhi	r2,32768
80201928:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
8020192c:	00800044 	movi	r2,1
80201930:	e0bfe515 	stw	r2,-108(fp)
		break;
80201934:	00001006 	br	80201978 <bDdr2MemoryReadTest+0xf4>
	default:
		bSuccess = FALSE;
80201938:	e03fe515 	stw	zero,-108(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
8020193c:	00e008b4 	movhi	r3,32802
80201940:	18feb404 	addi	r3,r3,-1328
80201944:	00a008b4 	movhi	r2,32802
80201948:	10aff304 	addi	r2,r2,-16436
8020194c:	1009883a 	mov	r4,r2
80201950:	00800bc4 	movi	r2,47
80201954:	100d883a 	mov	r6,r2
80201958:	200b883a 	mov	r5,r4
8020195c:	1809883a 	mov	r4,r3
80201960:	0206aa00 	call	80206aa0 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
80201964:	012008b4 	movhi	r4,32802
80201968:	213eb404 	addi	r4,r4,-1328
8020196c:	0206c180 	call	80206c18 <printf>
		;
#endif
		return bSuccess;
80201970:	e0bfe517 	ldw	r2,-108(fp)
80201974:	0000ec06 	br	80201d28 <bDdr2MemoryReadTest+0x4a4>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %lu MBytes\n", uliByteLen / 1024 / 1024);
80201978:	e0bfe717 	ldw	r2,-100(fp)
8020197c:	1004d53a 	srli	r2,r2,20
80201980:	100d883a 	mov	r6,r2
80201984:	016008b4 	movhi	r5,32802
80201988:	29721504 	addi	r5,r5,-14252
8020198c:	012008b4 	movhi	r4,32802
80201990:	213eb404 	addi	r4,r4,-1328
80201994:	0206d800 	call	80206d80 <sprintf>
	debug(fp, cDebugBuffer);
80201998:	012008b4 	movhi	r4,32802
8020199c:	213eb404 	addi	r4,r4,-1328
802019a0:	0206c180 	call	80206c18 <printf>
#endif

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes, *pxSrc;
	int iNItemNum, iNPos;
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
802019a4:	00804004 	movi	r2,256
802019a8:	e0bfec15 	stw	r2,-80(fp)
	const int ciMyDataSize = sizeof(TMyData);
802019ac:	00800104 	movi	r2,4
802019b0:	e0bfef15 	stw	r2,-68(fp)
	iNAccessLen = iNItemNum * ciMyDataSize;
802019b4:	e0ffec17 	ldw	r3,-80(fp)
802019b8:	e0bfef17 	ldw	r2,-68(fp)
802019bc:	1885383a 	mul	r2,r3,r2
802019c0:	e0bfe915 	stw	r2,-92(fp)
	int iNProgressIndex = 0;
802019c4:	e03fee15 	stw	zero,-72(fp)
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
802019c8:	e03ff015 	stw	zero,-64(fp)

	for (iI = 0; iI < 10; iI++) {
802019cc:	e03fe815 	stw	zero,-96(fp)
802019d0:	00001506 	br	80201a28 <bDdr2MemoryReadTest+0x1a4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
802019d4:	e0ffe717 	ldw	r3,-100(fp)
802019d8:	00b33374 	movhi	r2,52429
802019dc:	10b33344 	addi	r2,r2,-13107
802019e0:	1888383a 	mulxuu	r4,r3,r2
802019e4:	1885383a 	mul	r2,r3,r2
802019e8:	1021883a 	mov	r16,r2
802019ec:	2023883a 	mov	r17,r4
802019f0:	8804d0fa 	srli	r2,r17,3
802019f4:	e0ffe817 	ldw	r3,-96(fp)
802019f8:	18c00044 	addi	r3,r3,1
802019fc:	10c7383a 	mul	r3,r2,r3
80201a00:	e0bfe817 	ldw	r2,-96(fp)
80201a04:	1085883a 	add	r2,r2,r2
80201a08:	1085883a 	add	r2,r2,r2
80201a0c:	e13fe504 	addi	r4,fp,-108
80201a10:	2085883a 	add	r2,r4,r2
80201a14:	10800e04 	addi	r2,r2,56
80201a18:	10c00015 	stw	r3,0(r2)
	iNAccessLen = iNItemNum * ciMyDataSize;
	int iNProgressIndex = 0;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
80201a1c:	e0bfe817 	ldw	r2,-96(fp)
80201a20:	10800044 	addi	r2,r2,1
80201a24:	e0bfe815 	stw	r2,-96(fp)
80201a28:	e0bfe817 	ldw	r2,-96(fp)
80201a2c:	10800290 	cmplti	r2,r2,10
80201a30:	103fe81e 	bne	r2,zero,802019d4 <__reset+0xfa1e19d4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}

	iNProgressIndex = 0;
80201a34:	e03fee15 	stw	zero,-72(fp)
#if DEBUG_ON
	sprintf(cDebugBuffer, "Reading/Verifying Data...\n");
80201a38:	00e008b4 	movhi	r3,32802
80201a3c:	18feb404 	addi	r3,r3,-1328
80201a40:	00a008b4 	movhi	r2,32802
80201a44:	10b21b04 	addi	r2,r2,-14228
80201a48:	1009883a 	mov	r4,r2
80201a4c:	008006c4 	movi	r2,27
80201a50:	100d883a 	mov	r6,r2
80201a54:	200b883a 	mov	r5,r4
80201a58:	1809883a 	mov	r4,r3
80201a5c:	0206aa00 	call	80206aa0 <memcpy>
	debug(fp, cDebugBuffer);
80201a60:	012008b4 	movhi	r4,32802
80201a64:	213eb404 	addi	r4,r4,-1328
80201a68:	0206c180 	call	80206c18 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80201a6c:	d0a02d17 	ldw	r2,-32588(gp)
#endif
	iTimeStart = alt_nticks();
80201a70:	e0bff115 	stw	r2,-60(fp)

	pxSrc = (TMyData *) uliDdr2Base;
80201a74:	e0bfe617 	ldw	r2,-104(fp)
80201a78:	e0bfeb15 	stw	r2,-84(fp)
	iNAccessLen = sizeof(xSZData);
80201a7c:	00810004 	movi	r2,1024
80201a80:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
80201a84:	e0ffe917 	ldw	r3,-92(fp)
80201a88:	e0bfef17 	ldw	r2,-68(fp)
80201a8c:	1885283a 	div	r2,r3,r2
80201a90:	e0bfec15 	stw	r2,-80(fp)
	iNPos = 0;
80201a94:	e03fed15 	stw	zero,-76(fp)
	while (bSuccess && iNPos < uliByteLen) {
80201a98:	00005e06 	br	80201c14 <bDdr2MemoryReadTest+0x390>
		iNRemainedLen = uliByteLen - iNPos;
80201a9c:	e0bfed17 	ldw	r2,-76(fp)
80201aa0:	e0ffe717 	ldw	r3,-100(fp)
80201aa4:	1885c83a 	sub	r2,r3,r2
80201aa8:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
80201aac:	e0bfe917 	ldw	r2,-92(fp)
80201ab0:	e0fff217 	ldw	r3,-56(fp)
80201ab4:	1880060e 	bge	r3,r2,80201ad0 <bDdr2MemoryReadTest+0x24c>
			iNAccessLen = iNRemainedLen;
80201ab8:	e0bff217 	ldw	r2,-56(fp)
80201abc:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
80201ac0:	e0ffe917 	ldw	r3,-92(fp)
80201ac4:	e0bfef17 	ldw	r2,-68(fp)
80201ac8:	1885283a 	div	r2,r3,r2
80201acc:	e0bfec15 	stw	r2,-80(fp)
		}
		pxDes = xSZData;
80201ad0:	00a008b4 	movhi	r2,32802
80201ad4:	10bef404 	addi	r2,r2,-1072
80201ad8:	e0bfea15 	stw	r2,-88(fp)
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
80201adc:	e03fe815 	stw	zero,-96(fp)
80201ae0:	00002906 	br	80201b88 <bDdr2MemoryReadTest+0x304>
			if (*pxSrc++ != *pxDes++) {
80201ae4:	e0bfeb17 	ldw	r2,-84(fp)
80201ae8:	10c00104 	addi	r3,r2,4
80201aec:	e0ffeb15 	stw	r3,-84(fp)
80201af0:	10c00017 	ldw	r3,0(r2)
80201af4:	e0bfea17 	ldw	r2,-88(fp)
80201af8:	11000104 	addi	r4,r2,4
80201afc:	e13fea15 	stw	r4,-88(fp)
80201b00:	10800017 	ldw	r2,0(r2)
80201b04:	18801d26 	beq	r3,r2,80201b7c <bDdr2MemoryReadTest+0x2f8>
#if DEBUG_ON
				sprintf(cDebugBuffer,
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
80201b08:	e0bfeb17 	ldw	r2,-84(fp)
80201b0c:	10bfff04 	addi	r2,r2,-4
80201b10:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201b14:	1009883a 	mov	r4,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
80201b18:	00a008b4 	movhi	r2,32802
80201b1c:	10bef404 	addi	r2,r2,-1072
80201b20:	e0ffe817 	ldw	r3,-96(fp)
80201b24:	18c7883a 	add	r3,r3,r3
80201b28:	18c7883a 	add	r3,r3,r3
80201b2c:	10c5883a 	add	r2,r2,r3
80201b30:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201b34:	100b883a 	mov	r5,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
80201b38:	e0ffed17 	ldw	r3,-76(fp)
80201b3c:	e0bfef17 	ldw	r2,-68(fp)
80201b40:	1887283a 	div	r3,r3,r2
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201b44:	e0bfe817 	ldw	r2,-96(fp)
80201b48:	1885883a 	add	r2,r3,r2
80201b4c:	d8800015 	stw	r2,0(sp)
80201b50:	280f883a 	mov	r7,r5
80201b54:	200d883a 	mov	r6,r4
80201b58:	016008b4 	movhi	r5,32802
80201b5c:	29722204 	addi	r5,r5,-14200
80201b60:	012008b4 	movhi	r4,32802
80201b64:	213eb404 	addi	r4,r4,-1328
80201b68:	0206d800 	call	80206d80 <sprintf>
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
				debug(fp, cDebugBuffer);
80201b6c:	012008b4 	movhi	r4,32802
80201b70:	213eb404 	addi	r4,r4,-1328
80201b74:	0206c180 	call	80206c18 <printf>
#endif
				bSuccess = FALSE;
80201b78:	e03fe515 	stw	zero,-108(fp)
		if (iNAccessLen > iNRemainedLen) {
			iNAccessLen = iNRemainedLen;
			iNItemNum = iNAccessLen / ciMyDataSize;
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
80201b7c:	e0bfe817 	ldw	r2,-96(fp)
80201b80:	10800044 	addi	r2,r2,1
80201b84:	e0bfe815 	stw	r2,-96(fp)
80201b88:	e0ffe817 	ldw	r3,-96(fp)
80201b8c:	e0bfec17 	ldw	r2,-80(fp)
80201b90:	1880020e 	bge	r3,r2,80201b9c <bDdr2MemoryReadTest+0x318>
80201b94:	e0bfe517 	ldw	r2,-108(fp)
80201b98:	103fd21e 	bne	r2,zero,80201ae4 <__reset+0xfa1e1ae4>
				debug(fp, cDebugBuffer);
#endif
				bSuccess = FALSE;
			}
		}
		iNPos += iNAccessLen;
80201b9c:	e0ffed17 	ldw	r3,-76(fp)
80201ba0:	e0bfe917 	ldw	r2,-92(fp)
80201ba4:	1885883a 	add	r2,r3,r2
80201ba8:	e0bfed15 	stw	r2,-76(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
80201bac:	e0bfee17 	ldw	r2,-72(fp)
80201bb0:	10800288 	cmpgei	r2,r2,10
80201bb4:	1000171e 	bne	r2,zero,80201c14 <bDdr2MemoryReadTest+0x390>
80201bb8:	e0bfee17 	ldw	r2,-72(fp)
80201bbc:	1085883a 	add	r2,r2,r2
80201bc0:	1085883a 	add	r2,r2,r2
80201bc4:	e0ffe504 	addi	r3,fp,-108
80201bc8:	1885883a 	add	r2,r3,r2
80201bcc:	10800e04 	addi	r2,r2,56
80201bd0:	10800017 	ldw	r2,0(r2)
80201bd4:	e0ffed17 	ldw	r3,-76(fp)
80201bd8:	18800e36 	bltu	r3,r2,80201c14 <bDdr2MemoryReadTest+0x390>
			iNProgressIndex++;
80201bdc:	e0bfee17 	ldw	r2,-72(fp)
80201be0:	10800044 	addi	r2,r2,1
80201be4:	e0bfee15 	stw	r2,-72(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
80201be8:	e0bfee17 	ldw	r2,-72(fp)
80201bec:	108002a4 	muli	r2,r2,10
80201bf0:	100d883a 	mov	r6,r2
80201bf4:	016008b4 	movhi	r5,32802
80201bf8:	2971f704 	addi	r5,r5,-14372
80201bfc:	012008b4 	movhi	r4,32802
80201c00:	213eb404 	addi	r4,r4,-1328
80201c04:	0206d800 	call	80206d80 <sprintf>
			debug(fp, cDebugBuffer);
80201c08:	012008b4 	movhi	r4,32802
80201c0c:	213eb404 	addi	r4,r4,-1328
80201c10:	0206c180 	call	80206c18 <printf>

	pxSrc = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (bSuccess && iNPos < uliByteLen) {
80201c14:	e0bfe517 	ldw	r2,-108(fp)
80201c18:	10000326 	beq	r2,zero,80201c28 <bDdr2MemoryReadTest+0x3a4>
80201c1c:	e0ffed17 	ldw	r3,-76(fp)
80201c20:	e0bfe717 	ldw	r2,-100(fp)
80201c24:	18bf9d36 	bltu	r3,r2,80201a9c <__reset+0xfa1e1a9c>
			debug(fp, cDebugBuffer);
#endif
		}
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201c28:	00a008b4 	movhi	r2,32802
80201c2c:	10beb404 	addi	r2,r2,-1328
80201c30:	00c00284 	movi	r3,10
80201c34:	10c00005 	stb	r3,0(r2)
80201c38:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201c3c:	012008b4 	movhi	r4,32802
80201c40:	213eb404 	addi	r4,r4,-1328
80201c44:	0206c180 	call	80206c18 <printf>
80201c48:	d0e02d17 	ldw	r3,-32588(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
80201c4c:	e0bff117 	ldw	r2,-60(fp)
80201c50:	1885c83a 	sub	r2,r3,r2
80201c54:	e0bff015 	stw	r2,-64(fp)
	if (bSuccess) {
80201c58:	e0bfe517 	ldw	r2,-108(fp)
80201c5c:	10001c26 	beq	r2,zero,80201cd0 <bDdr2MemoryReadTest+0x44c>
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
80201c60:	e13ff017 	ldw	r4,-64(fp)
80201c64:	02066180 	call	80206618 <__floatsisf>
80201c68:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80201c6c:	d0a02c17 	ldw	r2,-32592(gp)
80201c70:	1009883a 	mov	r4,r2
80201c74:	020673c0 	call	8020673c <__floatunsisf>
80201c78:	1007883a 	mov	r3,r2
80201c7c:	180b883a 	mov	r5,r3
80201c80:	8009883a 	mov	r4,r16
80201c84:	02061100 	call	80206110 <__divsf3>
80201c88:	1007883a 	mov	r3,r2
80201c8c:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
80201c90:	1009883a 	mov	r4,r2
80201c94:	020682c0 	call	8020682c <__extendsfdf2>
80201c98:	1009883a 	mov	r4,r2
80201c9c:	180b883a 	mov	r5,r3
80201ca0:	d9400015 	stw	r5,0(sp)
80201ca4:	200f883a 	mov	r7,r4
80201ca8:	e1bfe717 	ldw	r6,-100(fp)
80201cac:	016008b4 	movhi	r5,32802
80201cb0:	29723004 	addi	r5,r5,-14144
80201cb4:	012008b4 	movhi	r4,32802
80201cb8:	213eb404 	addi	r4,r4,-1328
80201cbc:	0206d800 	call	80206d80 <sprintf>
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
80201cc0:	012008b4 	movhi	r4,32802
80201cc4:	213eb404 	addi	r4,r4,-1328
80201cc8:	0206c180 	call	80206c18 <printf>
80201ccc:	00000d06 	br	80201d04 <bDdr2MemoryReadTest+0x480>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
80201cd0:	00e008b4 	movhi	r3,32802
80201cd4:	18feb404 	addi	r3,r3,-1328
80201cd8:	00a008b4 	movhi	r2,32802
80201cdc:	10b23c04 	addi	r2,r2,-14096
80201ce0:	1009883a 	mov	r4,r2
80201ce4:	00800544 	movi	r2,21
80201ce8:	100d883a 	mov	r6,r2
80201cec:	200b883a 	mov	r5,r4
80201cf0:	1809883a 	mov	r4,r3
80201cf4:	0206aa00 	call	80206aa0 <memcpy>
		debug(fp, cDebugBuffer);
80201cf8:	012008b4 	movhi	r4,32802
80201cfc:	213eb404 	addi	r4,r4,-1328
80201d00:	0206c180 	call	80206c18 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201d04:	00a008b4 	movhi	r2,32802
80201d08:	10beb404 	addi	r2,r2,-1328
80201d0c:	00c00284 	movi	r3,10
80201d10:	10c00005 	stb	r3,0(r2)
80201d14:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201d18:	012008b4 	movhi	r4,32802
80201d1c:	213eb404 	addi	r4,r4,-1328
80201d20:	0206c180 	call	80206c18 <printf>
#endif

	return bSuccess;
80201d24:	e0bfe517 	ldw	r2,-108(fp)
}
80201d28:	e6fffe04 	addi	sp,fp,-8
80201d2c:	dfc00317 	ldw	ra,12(sp)
80201d30:	df000217 	ldw	fp,8(sp)
80201d34:	dc400117 	ldw	r17,4(sp)
80201d38:	dc000017 	ldw	r16,0(sp)
80201d3c:	dec00404 	addi	sp,sp,16
80201d40:	f800283a 	ret

80201d44 <bDdr2MemoryRandomWriteTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomWriteTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
80201d44:	deffec04 	addi	sp,sp,-80
80201d48:	dfc01315 	stw	ra,76(sp)
80201d4c:	df001215 	stw	fp,72(sp)
80201d50:	dcc01115 	stw	r19,68(sp)
80201d54:	dc801015 	stw	r18,64(sp)
80201d58:	dc400f15 	stw	r17,60(sp)
80201d5c:	dc000e15 	stw	r16,56(sp)
80201d60:	df001204 	addi	fp,sp,72
80201d64:	2005883a 	mov	r2,r4
80201d68:	e17ffa15 	stw	r5,-24(fp)
80201d6c:	e1bffb15 	stw	r6,-20(fp)
80201d70:	e0bff905 	stb	r2,-28(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Write Test =====\n");
80201d74:	00e008b4 	movhi	r3,32802
80201d78:	18feb404 	addi	r3,r3,-1328
80201d7c:	00a008b4 	movhi	r2,32802
80201d80:	10b24204 	addi	r2,r2,-14072
80201d84:	1009883a 	mov	r4,r2
80201d88:	00800bc4 	movi	r2,47
80201d8c:	100d883a 	mov	r6,r2
80201d90:	200b883a 	mov	r5,r4
80201d94:	1809883a 	mov	r4,r3
80201d98:	0206aa00 	call	80206aa0 <memcpy>
	debug(fp, cDebugBuffer);
80201d9c:	012008b4 	movhi	r4,32802
80201da0:	213eb404 	addi	r4,r4,-1328
80201da4:	0206c180 	call	80206c18 <printf>
#endif
	bool bSuccess = FALSE;
80201da8:	e03fef15 	stw	zero,-68(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
80201dac:	e0bff903 	ldbu	r2,-28(fp)
80201db0:	10000326 	beq	r2,zero,80201dc0 <bDdr2MemoryRandomWriteTest+0x7c>
80201db4:	10800060 	cmpeqi	r2,r2,1
80201db8:	10000a1e 	bne	r2,zero,80201de4 <bDdr2MemoryRandomWriteTest+0xa0>
80201dbc:	00001206 	br	80201e08 <bDdr2MemoryRandomWriteTest+0xc4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
80201dc0:	e0bff903 	ldbu	r2,-28(fp)
80201dc4:	1009883a 	mov	r4,r2
80201dc8:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80201dcc:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
80201dd0:	00a00034 	movhi	r2,32768
80201dd4:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
80201dd8:	00800044 	movi	r2,1
80201ddc:	e0bfef15 	stw	r2,-68(fp)
		break;
80201de0:	00001906 	br	80201e48 <bDdr2MemoryRandomWriteTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
80201de4:	e0bff903 	ldbu	r2,-28(fp)
80201de8:	1009883a 	mov	r4,r2
80201dec:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80201df0:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
80201df4:	00a00034 	movhi	r2,32768
80201df8:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
80201dfc:	00800044 	movi	r2,1
80201e00:	e0bfef15 	stw	r2,-68(fp)
		break;
80201e04:	00001006 	br	80201e48 <bDdr2MemoryRandomWriteTest+0x104>
	default:
		bSuccess = FALSE;
80201e08:	e03fef15 	stw	zero,-68(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80201e0c:	00e008b4 	movhi	r3,32802
80201e10:	18feb404 	addi	r3,r3,-1328
80201e14:	00a008b4 	movhi	r2,32802
80201e18:	10aff304 	addi	r2,r2,-16436
80201e1c:	1009883a 	mov	r4,r2
80201e20:	00800bc4 	movi	r2,47
80201e24:	100d883a 	mov	r6,r2
80201e28:	200b883a 	mov	r5,r4
80201e2c:	1809883a 	mov	r4,r3
80201e30:	0206aa00 	call	80206aa0 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
80201e34:	012008b4 	movhi	r4,32802
80201e38:	213eb404 	addi	r4,r4,-1328
80201e3c:	0206c180 	call	80206c18 <printf>
		;
#endif
		return bSuccess;
80201e40:	e0bfef17 	ldw	r2,-68(fp)
80201e44:	0000bc06 	br	80202138 <bDdr2MemoryRandomWriteTest+0x3f4>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
80201e48:	e0bff117 	ldw	r2,-60(fp)
80201e4c:	1004d53a 	srli	r2,r2,20
80201e50:	100d883a 	mov	r6,r2
80201e54:	016008b4 	movhi	r5,32802
80201e58:	2971ec04 	addi	r5,r5,-14416
80201e5c:	012008b4 	movhi	r4,32802
80201e60:	213eb404 	addi	r4,r4,-1328
80201e64:	0206d800 	call	80206d80 <sprintf>
	debug(fp, cDebugBuffer);
80201e68:	012008b4 	movhi	r4,32802
80201e6c:	213eb404 	addi	r4,r4,-1328
80201e70:	0206c180 	call	80206c18 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80201e74:	d0a02d17 	ldw	r2,-32588(gp)
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliInitialState = alt_nticks();
80201e78:	d0a01315 	stw	r2,-32692(gp)
	uliCurrentState = uliInitialState;
80201e7c:	d0a01317 	ldw	r2,-32692(gp)
80201e80:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
80201e84:	e0fff017 	ldw	r3,-64(fp)
80201e88:	e0bff117 	ldw	r2,-60(fp)
80201e8c:	1885883a 	add	r2,r3,r2
80201e90:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
80201e94:	e0fff117 	ldw	r3,-60(fp)
80201e98:	00b33374 	movhi	r2,52429
80201e9c:	10b33344 	addi	r2,r2,-13107
80201ea0:	1888383a 	mulxuu	r4,r3,r2
80201ea4:	1885383a 	mul	r2,r3,r2
80201ea8:	1025883a 	mov	r18,r2
80201eac:	2027883a 	mov	r19,r4
80201eb0:	9806d13a 	srli	r3,r19,4
80201eb4:	e0bff017 	ldw	r2,-64(fp)
80201eb8:	1885883a 	add	r2,r3,r2
80201ebc:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
80201ec0:	00800144 	movi	r2,5
80201ec4:	e0bff405 	stb	r2,-48(fp)
#if DEBUG_ON
	sprintf(cDebugBuffer, "Writing to memory...\n");
80201ec8:	00e008b4 	movhi	r3,32802
80201ecc:	18feb404 	addi	r3,r3,-1328
80201ed0:	00a008b4 	movhi	r2,32802
80201ed4:	10b24e04 	addi	r2,r2,-14024
80201ed8:	1009883a 	mov	r4,r2
80201edc:	00800584 	movi	r2,22
80201ee0:	100d883a 	mov	r6,r2
80201ee4:	200b883a 	mov	r5,r4
80201ee8:	1809883a 	mov	r4,r3
80201eec:	0206aa00 	call	80206aa0 <memcpy>
	debug(fp, cDebugBuffer);
80201ef0:	012008b4 	movhi	r4,32802
80201ef4:	213eb404 	addi	r4,r4,-1328
80201ef8:	0206c180 	call	80206c18 <printf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
80201efc:	e0bffa17 	ldw	r2,-24(fp)
80201f00:	10800058 	cmpnei	r2,r2,1
80201f04:	1000081e 	bne	r2,zero,80201f28 <bDdr2MemoryRandomWriteTest+0x1e4>
#if DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
80201f08:	016008b4 	movhi	r5,32802
80201f0c:	29725404 	addi	r5,r5,-14000
80201f10:	012008b4 	movhi	r4,32802
80201f14:	213eb404 	addi	r4,r4,-1328
80201f18:	0206d800 	call	80206d80 <sprintf>
		debug(fp, cDebugBuffer);
80201f1c:	012008b4 	movhi	r4,32802
80201f20:	213eb404 	addi	r4,r4,-1328
80201f24:	0206c180 	call	80206c18 <printf>
#endif
	}
	int TimeStart, TimeElapsed = 0;
80201f28:	e03ff615 	stw	zero,-40(fp)
80201f2c:	d0a02d17 	ldw	r2,-32588(gp)

	TimeStart = alt_nticks();
80201f30:	e0bff715 	stw	r2,-36(fp)
	for (puliDestination = (alt_u32*) uliDdr2Base;
80201f34:	e0bff017 	ldw	r2,-64(fp)
80201f38:	e0bff215 	stw	r2,-56(fp)
80201f3c:	00002a06 	br	80201fe8 <bDdr2MemoryRandomWriteTest+0x2a4>
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
80201f40:	e0bff804 	addi	r2,fp,-32
80201f44:	1009883a 	mov	r4,r2
80201f48:	02025980 	call	80202598 <uliXorshift32>
80201f4c:	1007883a 	mov	r3,r2
80201f50:	e0bff217 	ldw	r2,-56(fp)
80201f54:	10c00015 	stw	r3,0(r2)
		if ((bVerbose == DDR2_VERBOSE)
				& ((alt_u32) puliDestination > uliNextMilestone)) {
80201f58:	e0bffa17 	ldw	r2,-24(fp)
80201f5c:	10800060 	cmpeqi	r2,r2,1
80201f60:	1009883a 	mov	r4,r2
80201f64:	e0bff217 	ldw	r2,-56(fp)
80201f68:	e0fff317 	ldw	r3,-52(fp)
80201f6c:	1885803a 	cmpltu	r2,r3,r2
80201f70:	2084703a 	and	r2,r4,r2
	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
		if ((bVerbose == DDR2_VERBOSE)
80201f74:	10803fcc 	andi	r2,r2,255
80201f78:	10001826 	beq	r2,zero,80201fdc <bDdr2MemoryRandomWriteTest+0x298>
				& ((alt_u32) puliDestination > uliNextMilestone)) {
#if DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
80201f7c:	e0bff403 	ldbu	r2,-48(fp)
80201f80:	100d883a 	mov	r6,r2
80201f84:	016008b4 	movhi	r5,32802
80201f88:	29725604 	addi	r5,r5,-13992
80201f8c:	012008b4 	movhi	r4,32802
80201f90:	213eb404 	addi	r4,r4,-1328
80201f94:	0206d800 	call	80206d80 <sprintf>
			debug(fp, cDebugBuffer);
80201f98:	012008b4 	movhi	r4,32802
80201f9c:	213eb404 	addi	r4,r4,-1328
80201fa0:	0206c180 	call	80206c18 <printf>
#endif
			uliNextMilestone += uliByteLen / 20;
80201fa4:	e0fff117 	ldw	r3,-60(fp)
80201fa8:	00b33374 	movhi	r2,52429
80201fac:	10b33344 	addi	r2,r2,-13107
80201fb0:	1888383a 	mulxuu	r4,r3,r2
80201fb4:	1885383a 	mul	r2,r3,r2
80201fb8:	1021883a 	mov	r16,r2
80201fbc:	2023883a 	mov	r17,r4
80201fc0:	8804d13a 	srli	r2,r17,4
80201fc4:	e0fff317 	ldw	r3,-52(fp)
80201fc8:	1885883a 	add	r2,r3,r2
80201fcc:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
80201fd0:	e0bff403 	ldbu	r2,-48(fp)
80201fd4:	10800144 	addi	r2,r2,5
80201fd8:	e0bff405 	stb	r2,-48(fp)
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
80201fdc:	e0bff217 	ldw	r2,-56(fp)
80201fe0:	10800104 	addi	r2,r2,4
80201fe4:	e0bff215 	stw	r2,-56(fp)
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
80201fe8:	e0fff217 	ldw	r3,-56(fp)
#endif
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
80201fec:	e0bff517 	ldw	r2,-44(fp)
80201ff0:	18bfd336 	bltu	r3,r2,80201f40 <__reset+0xfa1e1f40>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	alt_dcache_flush_all();
80201ff4:	0216c380 	call	80216c38 <alt_dcache_flush_all>
	if (bVerbose == DDR2_VERBOSE) {
80201ff8:	e0bffa17 	ldw	r2,-24(fp)
80201ffc:	10800058 	cmpnei	r2,r2,1
80202000:	1000081e 	bne	r2,zero,80202024 <bDdr2MemoryRandomWriteTest+0x2e0>
#if DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
80202004:	016008b4 	movhi	r5,32802
80202008:	29725904 	addi	r5,r5,-13980
8020200c:	012008b4 	movhi	r4,32802
80202010:	213eb404 	addi	r4,r4,-1328
80202014:	0206d800 	call	80206d80 <sprintf>
		debug(fp, cDebugBuffer);
80202018:	012008b4 	movhi	r4,32802
8020201c:	213eb404 	addi	r4,r4,-1328
80202020:	0206c180 	call	80206c18 <printf>
#endif
	}

	if (bSuccess) {
80202024:	e0bfef17 	ldw	r2,-68(fp)
80202028:	10002d26 	beq	r2,zero,802020e0 <bDdr2MemoryRandomWriteTest+0x39c>
		if (bTime == TRUE) {
8020202c:	e0bffb17 	ldw	r2,-20(fp)
80202030:	10800058 	cmpnei	r2,r2,1
80202034:	1000201e 	bne	r2,zero,802020b8 <bDdr2MemoryRandomWriteTest+0x374>
80202038:	d0e02d17 	ldw	r3,-32588(gp)
			TimeElapsed = alt_nticks() - TimeStart;
8020203c:	e0bff717 	ldw	r2,-36(fp)
80202040:	1885c83a 	sub	r2,r3,r2
80202044:	e0bff615 	stw	r2,-40(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
80202048:	e13ff617 	ldw	r4,-40(fp)
8020204c:	02066180 	call	80206618 <__floatsisf>
80202050:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80202054:	d0a02c17 	ldw	r2,-32592(gp)
80202058:	1009883a 	mov	r4,r2
8020205c:	020673c0 	call	8020673c <__floatunsisf>
80202060:	1007883a 	mov	r3,r2
80202064:	180b883a 	mov	r5,r3
80202068:	8009883a 	mov	r4,r16
8020206c:	02061100 	call	80206110 <__divsf3>
80202070:	1007883a 	mov	r3,r2
80202074:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#if DEBUG_ON
			sprintf(cDebugBuffer,
80202078:	1009883a 	mov	r4,r2
8020207c:	020682c0 	call	8020682c <__extendsfdf2>
80202080:	1009883a 	mov	r4,r2
80202084:	180b883a 	mov	r5,r3
80202088:	d9400015 	stw	r5,0(sp)
8020208c:	200f883a 	mov	r7,r4
80202090:	e1bff117 	ldw	r6,-60(fp)
80202094:	016008b4 	movhi	r5,32802
80202098:	29725c04 	addi	r5,r5,-13968
8020209c:	012008b4 	movhi	r4,32802
802020a0:	213eb404 	addi	r4,r4,-1328
802020a4:	0206d800 	call	80206d80 <sprintf>
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
802020a8:	012008b4 	movhi	r4,32802
802020ac:	213eb404 	addi	r4,r4,-1328
802020b0:	0206c180 	call	80206c18 <printf>
802020b4:	00001706 	br	80202114 <bDdr2MemoryRandomWriteTest+0x3d0>
#endif
		} else {
#if DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 write test pass, size=%ld bytes\n",
802020b8:	e1bff117 	ldw	r6,-60(fp)
802020bc:	016008b4 	movhi	r5,32802
802020c0:	29726804 	addi	r5,r5,-13920
802020c4:	012008b4 	movhi	r4,32802
802020c8:	213eb404 	addi	r4,r4,-1328
802020cc:	0206d800 	call	80206d80 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
802020d0:	012008b4 	movhi	r4,32802
802020d4:	213eb404 	addi	r4,r4,-1328
802020d8:	0206c180 	call	80206c18 <printf>
802020dc:	00000d06 	br	80202114 <bDdr2MemoryRandomWriteTest+0x3d0>
#endif
		}
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
802020e0:	00e008b4 	movhi	r3,32802
802020e4:	18feb404 	addi	r3,r3,-1328
802020e8:	00a008b4 	movhi	r2,32802
802020ec:	10b20504 	addi	r2,r2,-14316
802020f0:	1009883a 	mov	r4,r2
802020f4:	00800584 	movi	r2,22
802020f8:	100d883a 	mov	r6,r2
802020fc:	200b883a 	mov	r5,r4
80202100:	1809883a 	mov	r4,r3
80202104:	0206aa00 	call	80206aa0 <memcpy>
		debug(fp, cDebugBuffer);
80202108:	012008b4 	movhi	r4,32802
8020210c:	213eb404 	addi	r4,r4,-1328
80202110:	0206c180 	call	80206c18 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80202114:	00a008b4 	movhi	r2,32802
80202118:	10beb404 	addi	r2,r2,-1328
8020211c:	00c00284 	movi	r3,10
80202120:	10c00005 	stb	r3,0(r2)
80202124:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80202128:	012008b4 	movhi	r4,32802
8020212c:	213eb404 	addi	r4,r4,-1328
80202130:	0206c180 	call	80206c18 <printf>
#endif

	return bSuccess;
80202134:	e0bfef17 	ldw	r2,-68(fp)
}
80202138:	e6fffc04 	addi	sp,fp,-16
8020213c:	dfc00517 	ldw	ra,20(sp)
80202140:	df000417 	ldw	fp,16(sp)
80202144:	dcc00317 	ldw	r19,12(sp)
80202148:	dc800217 	ldw	r18,8(sp)
8020214c:	dc400117 	ldw	r17,4(sp)
80202150:	dc000017 	ldw	r16,0(sp)
80202154:	dec00604 	addi	sp,sp,24
80202158:	f800283a 	ret

8020215c <bDdr2MemoryRandomReadTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomReadTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
8020215c:	deffec04 	addi	sp,sp,-80
80202160:	dfc01315 	stw	ra,76(sp)
80202164:	df001215 	stw	fp,72(sp)
80202168:	dcc01115 	stw	r19,68(sp)
8020216c:	dc801015 	stw	r18,64(sp)
80202170:	dc400f15 	stw	r17,60(sp)
80202174:	dc000e15 	stw	r16,56(sp)
80202178:	df001204 	addi	fp,sp,72
8020217c:	2005883a 	mov	r2,r4
80202180:	e17ffa15 	stw	r5,-24(fp)
80202184:	e1bffb15 	stw	r6,-20(fp)
80202188:	e0bff905 	stb	r2,-28(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Read Test =====\n");
8020218c:	00e008b4 	movhi	r3,32802
80202190:	18feb404 	addi	r3,r3,-1328
80202194:	00a008b4 	movhi	r2,32802
80202198:	10b27204 	addi	r2,r2,-13880
8020219c:	1009883a 	mov	r4,r2
802021a0:	00800b84 	movi	r2,46
802021a4:	100d883a 	mov	r6,r2
802021a8:	200b883a 	mov	r5,r4
802021ac:	1809883a 	mov	r4,r3
802021b0:	0206aa00 	call	80206aa0 <memcpy>
	debug(fp, cDebugBuffer);
802021b4:	012008b4 	movhi	r4,32802
802021b8:	213eb404 	addi	r4,r4,-1328
802021bc:	0206c180 	call	80206c18 <printf>
#endif
	bool bSuccess = FALSE;
802021c0:	e03fef15 	stw	zero,-68(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
802021c4:	e0bff903 	ldbu	r2,-28(fp)
802021c8:	10000326 	beq	r2,zero,802021d8 <bDdr2MemoryRandomReadTest+0x7c>
802021cc:	10800060 	cmpeqi	r2,r2,1
802021d0:	10000a1e 	bne	r2,zero,802021fc <bDdr2MemoryRandomReadTest+0xa0>
802021d4:	00001206 	br	80202220 <bDdr2MemoryRandomReadTest+0xc4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
802021d8:	e0bff903 	ldbu	r2,-28(fp)
802021dc:	1009883a 	mov	r4,r2
802021e0:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802021e4:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
802021e8:	00a00034 	movhi	r2,32768
802021ec:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
802021f0:	00800044 	movi	r2,1
802021f4:	e0bfef15 	stw	r2,-68(fp)
		break;
802021f8:	00001906 	br	80202260 <bDdr2MemoryRandomReadTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
802021fc:	e0bff903 	ldbu	r2,-28(fp)
80202200:	1009883a 	mov	r4,r2
80202204:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80202208:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
8020220c:	00a00034 	movhi	r2,32768
80202210:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
80202214:	00800044 	movi	r2,1
80202218:	e0bfef15 	stw	r2,-68(fp)
		break;
8020221c:	00001006 	br	80202260 <bDdr2MemoryRandomReadTest+0x104>
	default:
		bSuccess = FALSE;
80202220:	e03fef15 	stw	zero,-68(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80202224:	00e008b4 	movhi	r3,32802
80202228:	18feb404 	addi	r3,r3,-1328
8020222c:	00a008b4 	movhi	r2,32802
80202230:	10aff304 	addi	r2,r2,-16436
80202234:	1009883a 	mov	r4,r2
80202238:	00800bc4 	movi	r2,47
8020223c:	100d883a 	mov	r6,r2
80202240:	200b883a 	mov	r5,r4
80202244:	1809883a 	mov	r4,r3
80202248:	0206aa00 	call	80206aa0 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
8020224c:	012008b4 	movhi	r4,32802
80202250:	213eb404 	addi	r4,r4,-1328
80202254:	0206c180 	call	80206c18 <printf>
		;
#endif
		return bSuccess;
80202258:	e0bfef17 	ldw	r2,-68(fp)
8020225c:	0000c506 	br	80202574 <bDdr2MemoryRandomReadTest+0x418>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
80202260:	e0bff117 	ldw	r2,-60(fp)
80202264:	1004d53a 	srli	r2,r2,20
80202268:	100d883a 	mov	r6,r2
8020226c:	016008b4 	movhi	r5,32802
80202270:	2971ec04 	addi	r5,r5,-14416
80202274:	012008b4 	movhi	r4,32802
80202278:	213eb404 	addi	r4,r4,-1328
8020227c:	0206d800 	call	80206d80 <sprintf>
	debug(fp, cDebugBuffer);
80202280:	012008b4 	movhi	r4,32802
80202284:	213eb404 	addi	r4,r4,-1328
80202288:	0206c180 	call	80206c18 <printf>
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliCurrentState = uliInitialState;
8020228c:	d0a01317 	ldw	r2,-32692(gp)
80202290:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
80202294:	e0fff017 	ldw	r3,-64(fp)
80202298:	e0bff117 	ldw	r2,-60(fp)
8020229c:	1885883a 	add	r2,r3,r2
802022a0:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
802022a4:	e0fff117 	ldw	r3,-60(fp)
802022a8:	00b33374 	movhi	r2,52429
802022ac:	10b33344 	addi	r2,r2,-13107
802022b0:	1888383a 	mulxuu	r4,r3,r2
802022b4:	1885383a 	mul	r2,r3,r2
802022b8:	1025883a 	mov	r18,r2
802022bc:	2027883a 	mov	r19,r4
802022c0:	9806d13a 	srli	r3,r19,4
802022c4:	e0bff017 	ldw	r2,-64(fp)
802022c8:	1885883a 	add	r2,r3,r2
802022cc:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
802022d0:	00800144 	movi	r2,5
802022d4:	e0bff405 	stb	r2,-48(fp)
#if DEBUG_ON
	sprintf(cDebugBuffer, "Reading from memory...\n");
802022d8:	00e008b4 	movhi	r3,32802
802022dc:	18feb404 	addi	r3,r3,-1328
802022e0:	00a008b4 	movhi	r2,32802
802022e4:	10b27e04 	addi	r2,r2,-13832
802022e8:	1009883a 	mov	r4,r2
802022ec:	00800604 	movi	r2,24
802022f0:	100d883a 	mov	r6,r2
802022f4:	200b883a 	mov	r5,r4
802022f8:	1809883a 	mov	r4,r3
802022fc:	0206aa00 	call	80206aa0 <memcpy>
	debug(fp, cDebugBuffer);
80202300:	012008b4 	movhi	r4,32802
80202304:	213eb404 	addi	r4,r4,-1328
80202308:	0206c180 	call	80206c18 <printf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
8020230c:	e0bffa17 	ldw	r2,-24(fp)
80202310:	10800058 	cmpnei	r2,r2,1
80202314:	1000081e 	bne	r2,zero,80202338 <bDdr2MemoryRandomReadTest+0x1dc>
#if DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
80202318:	016008b4 	movhi	r5,32802
8020231c:	29725404 	addi	r5,r5,-14000
80202320:	012008b4 	movhi	r4,32802
80202324:	213eb404 	addi	r4,r4,-1328
80202328:	0206d800 	call	80206d80 <sprintf>
		debug(fp, cDebugBuffer);
8020232c:	012008b4 	movhi	r4,32802
80202330:	213eb404 	addi	r4,r4,-1328
80202334:	0206c180 	call	80206c18 <printf>
#endif
	}

	int TimeStart, TimeElapsed = 0;
80202338:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8020233c:	d0a02d17 	ldw	r2,-32588(gp)

	TimeStart = alt_nticks();
80202340:	e0bff715 	stw	r2,-36(fp)
	for (puliSource = (alt_u32*) uliDdr2Base;
80202344:	e0bff017 	ldw	r2,-64(fp)
80202348:	e0bff215 	stw	r2,-56(fp)
8020234c:	00003606 	br	80202428 <bDdr2MemoryRandomReadTest+0x2cc>
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
		if (uliXorshift32(&uliCurrentState) != *puliSource) {
80202350:	e0bff804 	addi	r2,fp,-32
80202354:	1009883a 	mov	r4,r2
80202358:	02025980 	call	80202598 <uliXorshift32>
8020235c:	1007883a 	mov	r3,r2
80202360:	e0bff217 	ldw	r2,-56(fp)
80202364:	10800017 	ldw	r2,0(r2)
80202368:	18800e26 	beq	r3,r2,802023a4 <bDdr2MemoryRandomReadTest+0x248>
			bSuccess = FALSE;
8020236c:	e03fef15 	stw	zero,-68(fp)
			if (bVerbose == DDR2_VERBOSE) {
80202370:	e0bffa17 	ldw	r2,-24(fp)
80202374:	10800058 	cmpnei	r2,r2,1
80202378:	10000a1e 	bne	r2,zero,802023a4 <bDdr2MemoryRandomReadTest+0x248>
#if DEBUG_ON
				sprintf(cDebugBuffer, "Failed to read adress 0x%08lX\n",
8020237c:	e0bff217 	ldw	r2,-56(fp)
80202380:	100d883a 	mov	r6,r2
80202384:	016008b4 	movhi	r5,32802
80202388:	29728404 	addi	r5,r5,-13808
8020238c:	012008b4 	movhi	r4,32802
80202390:	213eb404 	addi	r4,r4,-1328
80202394:	0206d800 	call	80206d80 <sprintf>
						(alt_u32)puliSource);
				debug(fp, cDebugBuffer);
80202398:	012008b4 	movhi	r4,32802
8020239c:	213eb404 	addi	r4,r4,-1328
802023a0:	0206c180 	call	80206c18 <printf>
#endif
			}
		}
		if ((bVerbose == DDR2_VERBOSE)
802023a4:	e0bffa17 	ldw	r2,-24(fp)
802023a8:	10800058 	cmpnei	r2,r2,1
802023ac:	10001b1e 	bne	r2,zero,8020241c <bDdr2MemoryRandomReadTest+0x2c0>
				&& ((alt_u32) puliSource > uliNextMilestone)) {
802023b0:	e0bff217 	ldw	r2,-56(fp)
802023b4:	e0fff317 	ldw	r3,-52(fp)
802023b8:	1880182e 	bgeu	r3,r2,8020241c <bDdr2MemoryRandomReadTest+0x2c0>
#if DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
802023bc:	e0bff403 	ldbu	r2,-48(fp)
802023c0:	100d883a 	mov	r6,r2
802023c4:	016008b4 	movhi	r5,32802
802023c8:	29725604 	addi	r5,r5,-13992
802023cc:	012008b4 	movhi	r4,32802
802023d0:	213eb404 	addi	r4,r4,-1328
802023d4:	0206d800 	call	80206d80 <sprintf>
			debug(fp, cDebugBuffer);
802023d8:	012008b4 	movhi	r4,32802
802023dc:	213eb404 	addi	r4,r4,-1328
802023e0:	0206c180 	call	80206c18 <printf>
#endif
			uliNextMilestone += uliByteLen / 20;
802023e4:	e0fff117 	ldw	r3,-60(fp)
802023e8:	00b33374 	movhi	r2,52429
802023ec:	10b33344 	addi	r2,r2,-13107
802023f0:	1888383a 	mulxuu	r4,r3,r2
802023f4:	1885383a 	mul	r2,r3,r2
802023f8:	1021883a 	mov	r16,r2
802023fc:	2023883a 	mov	r17,r4
80202400:	8804d13a 	srli	r2,r17,4
80202404:	e0fff317 	ldw	r3,-52(fp)
80202408:	1885883a 	add	r2,r3,r2
8020240c:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
80202410:	e0bff403 	ldbu	r2,-48(fp)
80202414:	10800144 	addi	r2,r2,5
80202418:	e0bff405 	stb	r2,-48(fp)

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
8020241c:	e0bff217 	ldw	r2,-56(fp)
80202420:	10800104 	addi	r2,r2,4
80202424:	e0bff215 	stw	r2,-56(fp)
80202428:	e0fff217 	ldw	r3,-56(fp)
	}

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
8020242c:	e0bff517 	ldw	r2,-44(fp)
80202430:	18bfc736 	bltu	r3,r2,80202350 <__reset+0xfa1e2350>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	if (bVerbose == DDR2_VERBOSE) {
80202434:	e0bffa17 	ldw	r2,-24(fp)
80202438:	10800058 	cmpnei	r2,r2,1
8020243c:	1000081e 	bne	r2,zero,80202460 <bDdr2MemoryRandomReadTest+0x304>
#if DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
80202440:	016008b4 	movhi	r5,32802
80202444:	29725904 	addi	r5,r5,-13980
80202448:	012008b4 	movhi	r4,32802
8020244c:	213eb404 	addi	r4,r4,-1328
80202450:	0206d800 	call	80206d80 <sprintf>
		debug(fp, cDebugBuffer);
80202454:	012008b4 	movhi	r4,32802
80202458:	213eb404 	addi	r4,r4,-1328
8020245c:	0206c180 	call	80206c18 <printf>
#endif
	}

	if (bSuccess) {
80202460:	e0bfef17 	ldw	r2,-68(fp)
80202464:	10002d26 	beq	r2,zero,8020251c <bDdr2MemoryRandomReadTest+0x3c0>
		if (bTime == TRUE) {
80202468:	e0bffb17 	ldw	r2,-20(fp)
8020246c:	10800058 	cmpnei	r2,r2,1
80202470:	1000201e 	bne	r2,zero,802024f4 <bDdr2MemoryRandomReadTest+0x398>
80202474:	d0e02d17 	ldw	r3,-32588(gp)
			TimeElapsed = alt_nticks() - TimeStart;
80202478:	e0bff717 	ldw	r2,-36(fp)
8020247c:	1885c83a 	sub	r2,r3,r2
80202480:	e0bff615 	stw	r2,-40(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
80202484:	e13ff617 	ldw	r4,-40(fp)
80202488:	02066180 	call	80206618 <__floatsisf>
8020248c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80202490:	d0a02c17 	ldw	r2,-32592(gp)
80202494:	1009883a 	mov	r4,r2
80202498:	020673c0 	call	8020673c <__floatunsisf>
8020249c:	1007883a 	mov	r3,r2
802024a0:	180b883a 	mov	r5,r3
802024a4:	8009883a 	mov	r4,r16
802024a8:	02061100 	call	80206110 <__divsf3>
802024ac:	1007883a 	mov	r3,r2
802024b0:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#if DEBUG_ON
			sprintf(cDebugBuffer,
802024b4:	1009883a 	mov	r4,r2
802024b8:	020682c0 	call	8020682c <__extendsfdf2>
802024bc:	1009883a 	mov	r4,r2
802024c0:	180b883a 	mov	r5,r3
802024c4:	d9400015 	stw	r5,0(sp)
802024c8:	200f883a 	mov	r7,r4
802024cc:	e1bff117 	ldw	r6,-60(fp)
802024d0:	016008b4 	movhi	r5,32802
802024d4:	29728c04 	addi	r5,r5,-13776
802024d8:	012008b4 	movhi	r4,32802
802024dc:	213eb404 	addi	r4,r4,-1328
802024e0:	0206d800 	call	80206d80 <sprintf>
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
802024e4:	012008b4 	movhi	r4,32802
802024e8:	213eb404 	addi	r4,r4,-1328
802024ec:	0206c180 	call	80206c18 <printf>
802024f0:	00001706 	br	80202550 <bDdr2MemoryRandomReadTest+0x3f4>
#endif
		} else {
#if DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 read test pass, size=%lu bytes\n",
802024f4:	e1bff117 	ldw	r6,-60(fp)
802024f8:	016008b4 	movhi	r5,32802
802024fc:	29729804 	addi	r5,r5,-13728
80202500:	012008b4 	movhi	r4,32802
80202504:	213eb404 	addi	r4,r4,-1328
80202508:	0206d800 	call	80206d80 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
8020250c:	012008b4 	movhi	r4,32802
80202510:	213eb404 	addi	r4,r4,-1328
80202514:	0206c180 	call	80206c18 <printf>
80202518:	00000d06 	br	80202550 <bDdr2MemoryRandomReadTest+0x3f4>
#endif
		}
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
8020251c:	00e008b4 	movhi	r3,32802
80202520:	18feb404 	addi	r3,r3,-1328
80202524:	00a008b4 	movhi	r2,32802
80202528:	10b23c04 	addi	r2,r2,-14096
8020252c:	1009883a 	mov	r4,r2
80202530:	00800544 	movi	r2,21
80202534:	100d883a 	mov	r6,r2
80202538:	200b883a 	mov	r5,r4
8020253c:	1809883a 	mov	r4,r3
80202540:	0206aa00 	call	80206aa0 <memcpy>
		debug(fp, cDebugBuffer);
80202544:	012008b4 	movhi	r4,32802
80202548:	213eb404 	addi	r4,r4,-1328
8020254c:	0206c180 	call	80206c18 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80202550:	00a008b4 	movhi	r2,32802
80202554:	10beb404 	addi	r2,r2,-1328
80202558:	00c00284 	movi	r3,10
8020255c:	10c00005 	stb	r3,0(r2)
80202560:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80202564:	012008b4 	movhi	r4,32802
80202568:	213eb404 	addi	r4,r4,-1328
8020256c:	0206c180 	call	80206c18 <printf>
#endif

	return bSuccess;
80202570:	e0bfef17 	ldw	r2,-68(fp)
}
80202574:	e6fffc04 	addi	sp,fp,-16
80202578:	dfc00517 	ldw	ra,20(sp)
8020257c:	df000417 	ldw	fp,16(sp)
80202580:	dcc00317 	ldw	r19,12(sp)
80202584:	dc800217 	ldw	r18,8(sp)
80202588:	dc400117 	ldw	r17,4(sp)
8020258c:	dc000017 	ldw	r16,0(sp)
80202590:	dec00604 	addi	sp,sp,24
80202594:	f800283a 	ret

80202598 <uliXorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
 *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 uliXorshift32(alt_u32 *puliState) {
80202598:	defffd04 	addi	sp,sp,-12
8020259c:	df000215 	stw	fp,8(sp)
802025a0:	df000204 	addi	fp,sp,8
802025a4:	e13fff15 	stw	r4,-4(fp)

	alt_u32 uliX = *puliState;
802025a8:	e0bfff17 	ldw	r2,-4(fp)
802025ac:	10800017 	ldw	r2,0(r2)
802025b0:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 13;
802025b4:	e0bffe17 	ldw	r2,-8(fp)
802025b8:	1004937a 	slli	r2,r2,13
802025bc:	e0fffe17 	ldw	r3,-8(fp)
802025c0:	1884f03a 	xor	r2,r3,r2
802025c4:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX >> 17;
802025c8:	e0bffe17 	ldw	r2,-8(fp)
802025cc:	1004d47a 	srli	r2,r2,17
802025d0:	e0fffe17 	ldw	r3,-8(fp)
802025d4:	1884f03a 	xor	r2,r3,r2
802025d8:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 5;
802025dc:	e0bffe17 	ldw	r2,-8(fp)
802025e0:	1004917a 	slli	r2,r2,5
802025e4:	e0fffe17 	ldw	r3,-8(fp)
802025e8:	1884f03a 	xor	r2,r3,r2
802025ec:	e0bffe15 	stw	r2,-8(fp)
	*puliState = uliX;
802025f0:	e0bfff17 	ldw	r2,-4(fp)
802025f4:	e0fffe17 	ldw	r3,-8(fp)
802025f8:	10c00015 	stw	r3,0(r2)

	return uliX;
802025fc:	e0bffe17 	ldw	r2,-8(fp)
}
80202600:	e037883a 	mov	sp,fp
80202604:	df000017 	ldw	fp,0(sp)
80202608:	dec00104 	addi	sp,sp,4
8020260c:	f800283a 	ret

80202610 <bSdmaInitM1Dma>:
alt_msgdma_dev *pxDmaM1Dev = NULL;
alt_msgdma_dev *pxDmaM2Dev = NULL;
//! [data memory public global variables]

//! [public functions]
bool bSdmaInitM1Dma(void) {
80202610:	defffb04 	addi	sp,sp,-20
80202614:	dfc00415 	stw	ra,16(sp)
80202618:	df000315 	stw	fp,12(sp)
8020261c:	df000304 	addi	fp,sp,12
	bool bStatus = FALSE;
80202620:	e03ffd15 	stw	zero,-12(fp)
	bool bFailDispatcher = FALSE;
80202624:	e03ffe15 	stw	zero,-8(fp)
	alt_u16 usiCounter = 0;
80202628:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM1Dev = alt_msgdma_open((char *) SDMA_DMA_M1_NAME);
8020262c:	012008b4 	movhi	r4,32802
80202630:	2132a204 	addi	r4,r4,-13688
80202634:	021a9180 	call	8021a918 <alt_msgdma_open>
80202638:	d0a01415 	stw	r2,-32688(gp)

	// check if the device was opened
	if (pxDmaM1Dev != NULL) {
8020263c:	d0a01417 	ldw	r2,-32688(gp)
80202640:	10001a26 	beq	r2,zero,802026ac <bSdmaInitM1Dma+0x9c>
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
80202644:	d0a01417 	ldw	r2,-32688(gp)
80202648:	10800317 	ldw	r2,12(r2)
8020264c:	10800104 	addi	r2,r2,4
80202650:	00c00084 	movi	r3,2
80202654:	10c00035 	stwio	r3,0(r2)
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202658:	00000b06 	br	80202688 <bSdmaInitM1Dma+0x78>
			usleep(1);
8020265c:	01000044 	movi	r4,1
80202660:	02175940 	call	80217594 <usleep>
			usiCounter++;
80202664:	e0bfff0b 	ldhu	r2,-4(fp)
80202668:	10800044 	addi	r2,r2,1
8020266c:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
80202670:	e0bfff0b 	ldhu	r2,-4(fp)
80202674:	1084e230 	cmpltui	r2,r2,5000
80202678:	1000031e 	bne	r2,zero,80202688 <bSdmaInitM1Dma+0x78>
				bFailDispatcher = TRUE;
8020267c:	00800044 	movi	r2,1
80202680:	e0bffe15 	stw	r2,-8(fp)
				break;
80202684:	00000506 	br	8020269c <bSdmaInitM1Dma+0x8c>
	// check if the device was opened
	if (pxDmaM1Dev != NULL) {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202688:	d0a01417 	ldw	r2,-32688(gp)
8020268c:	10800317 	ldw	r2,12(r2)
80202690:	10800037 	ldwio	r2,0(r2)
80202694:	1080100c 	andi	r2,r2,64
80202698:	103ff01e 	bne	r2,zero,8020265c <__reset+0xfa1e265c>
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
				bFailDispatcher = TRUE;
				break;
			}
		}
		if (bFailDispatcher == FALSE)
8020269c:	e0bffe17 	ldw	r2,-8(fp)
802026a0:	1000021e 	bne	r2,zero,802026ac <bSdmaInitM1Dma+0x9c>
			bStatus = TRUE;
802026a4:	00800044 	movi	r2,1
802026a8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
802026ac:	e0bffd17 	ldw	r2,-12(fp)
}
802026b0:	e037883a 	mov	sp,fp
802026b4:	dfc00117 	ldw	ra,4(sp)
802026b8:	df000017 	ldw	fp,0(sp)
802026bc:	dec00204 	addi	sp,sp,8
802026c0:	f800283a 	ret

802026c4 <bSdmaInitM2Dma>:

bool bSdmaInitM2Dma(void) {
802026c4:	defffb04 	addi	sp,sp,-20
802026c8:	dfc00415 	stw	ra,16(sp)
802026cc:	df000315 	stw	fp,12(sp)
802026d0:	df000304 	addi	fp,sp,12
	bool bStatus = FALSE;
802026d4:	e03ffd15 	stw	zero,-12(fp)
	bool bFailDispatcher = FALSE;
802026d8:	e03ffe15 	stw	zero,-8(fp)
	alt_u16 usiCounter = 0;
802026dc:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM2Dev = alt_msgdma_open((char *) SDMA_DMA_M2_NAME);
802026e0:	012008b4 	movhi	r4,32802
802026e4:	2132a704 	addi	r4,r4,-13668
802026e8:	021a9180 	call	8021a918 <alt_msgdma_open>
802026ec:	d0a01515 	stw	r2,-32684(gp)

	// check if the device was opened
	if (pxDmaM2Dev == NULL) {
802026f0:	d0a01517 	ldw	r2,-32684(gp)
802026f4:	1000021e 	bne	r2,zero,80202700 <bSdmaInitM2Dma+0x3c>
		// device not opened
		bStatus = FALSE;
802026f8:	e03ffd15 	stw	zero,-12(fp)
802026fc:	00001a06 	br	80202768 <bSdmaInitM2Dma+0xa4>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
80202700:	d0a01517 	ldw	r2,-32684(gp)
80202704:	10800317 	ldw	r2,12(r2)
80202708:	10800104 	addi	r2,r2,4
8020270c:	00c00084 	movi	r3,2
80202710:	10c00035 	stwio	r3,0(r2)
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202714:	00000b06 	br	80202744 <bSdmaInitM2Dma+0x80>
			usleep(1);
80202718:	01000044 	movi	r4,1
8020271c:	02175940 	call	80217594 <usleep>
			usiCounter++;
80202720:	e0bfff0b 	ldhu	r2,-4(fp)
80202724:	10800044 	addi	r2,r2,1
80202728:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
8020272c:	e0bfff0b 	ldhu	r2,-4(fp)
80202730:	1084e230 	cmpltui	r2,r2,5000
80202734:	1000031e 	bne	r2,zero,80202744 <bSdmaInitM2Dma+0x80>
				bFailDispatcher = TRUE;
80202738:	00800044 	movi	r2,1
8020273c:	e0bffe15 	stw	r2,-8(fp)
				break;
80202740:	00000506 	br	80202758 <bSdmaInitM2Dma+0x94>
		bStatus = FALSE;
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202744:	d0a01517 	ldw	r2,-32684(gp)
80202748:	10800317 	ldw	r2,12(r2)
8020274c:	10800037 	ldwio	r2,0(r2)
80202750:	1080100c 	andi	r2,r2,64
80202754:	103ff01e 	bne	r2,zero,80202718 <__reset+0xfa1e2718>
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
				bFailDispatcher = TRUE;
				break;
			}
		}
		if (bFailDispatcher == FALSE)
80202758:	e0bffe17 	ldw	r2,-8(fp)
8020275c:	1000021e 	bne	r2,zero,80202768 <bSdmaInitM2Dma+0xa4>
			bStatus = TRUE;
80202760:	00800044 	movi	r2,1
80202764:	e0bffd15 	stw	r2,-12(fp)
	}
	return bStatus;
80202768:	e0bffd17 	ldw	r2,-12(fp)
}
8020276c:	e037883a 	mov	sp,fp
80202770:	dfc00117 	ldw	ra,4(sp)
80202774:	df000017 	ldw	fp,0(sp)
80202778:	dec00204 	addi	sp,sp,8
8020277c:	f800283a 	ret

80202780 <bSdmaDmaM1Transfer>:

bool bSdmaDmaM1Transfer(alt_u32 *uliDdrInitialAddr, alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide, alt_u8 ucChBufferId) {
80202780:	deffe604 	addi	sp,sp,-104
80202784:	dfc01915 	stw	ra,100(sp)
80202788:	df001815 	stw	fp,96(sp)
8020278c:	dc001715 	stw	r16,92(sp)
80202790:	df001804 	addi	fp,sp,96
80202794:	e13ffb15 	stw	r4,-20(fp)
80202798:	2809883a 	mov	r4,r5
8020279c:	3007883a 	mov	r3,r6
802027a0:	3805883a 	mov	r2,r7
802027a4:	e13ffc0d 	sth	r4,-16(fp)
802027a8:	e0fffd05 	stb	r3,-12(fp)
802027ac:	e0bffe05 	stb	r2,-8(fp)
802027b0:	defff004 	addi	sp,sp,-64
802027b4:	d8800904 	addi	r2,sp,36
802027b8:	108007c4 	addi	r2,r2,31
802027bc:	1004d17a 	srli	r2,r2,5
802027c0:	1020917a 	slli	r16,r2,5
	bool bStatus;

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
802027c4:	e03ff215 	stw	zero,-56(fp)
	alt_u32 uliDestAddrHigh = 0;
802027c8:	e03ff315 	stw	zero,-52(fp)

	alt_u32 uliSrcAddrLow = 0;
802027cc:	e03ff715 	stw	zero,-36(fp)
	alt_u32 uliSrcAddrHigh = 0;
802027d0:	e03ff815 	stw	zero,-32(fp)

	alt_u32 uliControlBits = 0x00000000;
802027d4:	e03ff915 	stw	zero,-28(fp)
	bool bBufferEmptyFlag;
	bool bChannelFlag;
	bool bAddressFlag = FALSE;
802027d8:	e03ff515 	stw	zero,-44(fp)

	alt_u16 usiRoundedTransferSizeInBytes = 0;
802027dc:	e03ff60d 	sth	zero,-40(fp)

	/* Assuming that the channel selected exist, change to FALSE if doesn't */
	bChannelFlag = TRUE;
802027e0:	00800044 	movi	r2,1
802027e4:	e0bff415 	stw	r2,-48(fp)
	bStatus = FALSE;
802027e8:	e03ff115 	stw	zero,-60(fp)
	bBufferEmptyFlag = FALSE;
802027ec:	e03ffa15 	stw	zero,-24(fp)
	switch (ucChBufferId) {
802027f0:	e0bffe03 	ldbu	r2,-8(fp)
802027f4:	10c00228 	cmpgeui	r3,r2,8
802027f8:	1800a41e 	bne	r3,zero,80202a8c <bSdmaDmaM1Transfer+0x30c>
802027fc:	100690ba 	slli	r3,r2,2
80202800:	00a00834 	movhi	r2,32800
80202804:	108a0504 	addi	r2,r2,10260
80202808:	1885883a 	add	r2,r3,r2
8020280c:	10800017 	ldw	r2,0(r2)
80202810:	1000683a 	jmp	r2
80202814:	80202834 	orhi	zero,r16,32928
80202818:	80202878 	rdprs	zero,r16,-32607
8020281c:	802028c4 	addi	zero,r16,-32605
80202820:	80202910 	cmplti	zero,r16,-32604
80202824:	8020295c 	xori	zero,r16,32933
80202828:	802029a8 	cmpgeui	zero,r16,32934
8020282c:	802029f4 	orhi	zero,r16,32935
80202830:	80202a40 	call	880202a4 <__reset+0x20002a4>
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
80202834:	e0bffd03 	ldbu	r2,-12(fp)
80202838:	10000726 	beq	r2,zero,80202858 <bSdmaDmaM1Transfer+0xd8>
8020283c:	10800060 	cmpeqi	r2,r2,1
80202840:	10000926 	beq	r2,zero,80202868 <bSdmaDmaM1Transfer+0xe8>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
80202844:	00a00014 	movui	r2,32768
80202848:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
8020284c:	00800044 	movi	r2,1
80202850:	e0bff315 	stw	r2,-52(fp)
			break;
80202854:	00000706 	br	80202874 <bSdmaDmaM1Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
80202858:	e03ff215 	stw	zero,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
8020285c:	00800044 	movi	r2,1
80202860:	e0bff315 	stw	r2,-52(fp)
			break;
80202864:	00000306 	br	80202874 <bSdmaDmaM1Transfer+0xf4>
		default:
			bChannelFlag = FALSE;
80202868:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
8020286c:	e03ffa15 	stw	zero,-24(fp)
			break;
80202870:	0001883a 	nop
		}
		break;
80202874:	00008706 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
80202878:	e0bffd03 	ldbu	r2,-12(fp)
8020287c:	10000826 	beq	r2,zero,802028a0 <bSdmaDmaM1Transfer+0x120>
80202880:	10800060 	cmpeqi	r2,r2,1
80202884:	10000b26 	beq	r2,zero,802028b4 <bSdmaDmaM1Transfer+0x134>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
80202888:	008000b4 	movhi	r2,2
8020288c:	10a00004 	addi	r2,r2,-32768
80202890:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
80202894:	00800044 	movi	r2,1
80202898:	e0bff315 	stw	r2,-52(fp)
			break;
8020289c:	00000806 	br	802028c0 <bSdmaDmaM1Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
802028a0:	00800074 	movhi	r2,1
802028a4:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
802028a8:	00800044 	movi	r2,1
802028ac:	e0bff315 	stw	r2,-52(fp)
			break;
802028b0:	00000306 	br	802028c0 <bSdmaDmaM1Transfer+0x140>
		default:
			bChannelFlag = FALSE;
802028b4:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
802028b8:	e03ffa15 	stw	zero,-24(fp)
			break;
802028bc:	0001883a 	nop
		}
		break;
802028c0:	00007406 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
802028c4:	e0bffd03 	ldbu	r2,-12(fp)
802028c8:	10000826 	beq	r2,zero,802028ec <bSdmaDmaM1Transfer+0x16c>
802028cc:	10800060 	cmpeqi	r2,r2,1
802028d0:	10000b26 	beq	r2,zero,80202900 <bSdmaDmaM1Transfer+0x180>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
802028d4:	008000f4 	movhi	r2,3
802028d8:	10a00004 	addi	r2,r2,-32768
802028dc:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
802028e0:	00800044 	movi	r2,1
802028e4:	e0bff315 	stw	r2,-52(fp)
			break;
802028e8:	00000806 	br	8020290c <bSdmaDmaM1Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
802028ec:	008000b4 	movhi	r2,2
802028f0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
802028f4:	00800044 	movi	r2,1
802028f8:	e0bff315 	stw	r2,-52(fp)
			break;
802028fc:	00000306 	br	8020290c <bSdmaDmaM1Transfer+0x18c>
		default:
			bChannelFlag = FALSE;
80202900:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202904:	e03ffa15 	stw	zero,-24(fp)
			break;
80202908:	0001883a 	nop
		}
		break;
8020290c:	00006106 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
80202910:	e0bffd03 	ldbu	r2,-12(fp)
80202914:	10000826 	beq	r2,zero,80202938 <bSdmaDmaM1Transfer+0x1b8>
80202918:	10800060 	cmpeqi	r2,r2,1
8020291c:	10000b26 	beq	r2,zero,8020294c <bSdmaDmaM1Transfer+0x1cc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
80202920:	00800134 	movhi	r2,4
80202924:	10a00004 	addi	r2,r2,-32768
80202928:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
8020292c:	00800044 	movi	r2,1
80202930:	e0bff315 	stw	r2,-52(fp)
			break;
80202934:	00000806 	br	80202958 <bSdmaDmaM1Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
80202938:	008000f4 	movhi	r2,3
8020293c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
80202940:	00800044 	movi	r2,1
80202944:	e0bff315 	stw	r2,-52(fp)
			break;
80202948:	00000306 	br	80202958 <bSdmaDmaM1Transfer+0x1d8>
		default:
			bChannelFlag = FALSE;
8020294c:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202950:	e03ffa15 	stw	zero,-24(fp)
			break;
80202954:	0001883a 	nop
		}
		break;
80202958:	00004e06 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
8020295c:	e0bffd03 	ldbu	r2,-12(fp)
80202960:	10000826 	beq	r2,zero,80202984 <bSdmaDmaM1Transfer+0x204>
80202964:	10800060 	cmpeqi	r2,r2,1
80202968:	10000b26 	beq	r2,zero,80202998 <bSdmaDmaM1Transfer+0x218>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
8020296c:	00800174 	movhi	r2,5
80202970:	10a00004 	addi	r2,r2,-32768
80202974:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
80202978:	00800044 	movi	r2,1
8020297c:	e0bff315 	stw	r2,-52(fp)
			break;
80202980:	00000806 	br	802029a4 <bSdmaDmaM1Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
80202984:	00800134 	movhi	r2,4
80202988:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
8020298c:	00800044 	movi	r2,1
80202990:	e0bff315 	stw	r2,-52(fp)
			break;
80202994:	00000306 	br	802029a4 <bSdmaDmaM1Transfer+0x224>
		default:
			bChannelFlag = FALSE;
80202998:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
8020299c:	e03ffa15 	stw	zero,-24(fp)
			break;
802029a0:	0001883a 	nop
		}
		break;
802029a4:	00003b06 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
802029a8:	e0bffd03 	ldbu	r2,-12(fp)
802029ac:	10000826 	beq	r2,zero,802029d0 <bSdmaDmaM1Transfer+0x250>
802029b0:	10800060 	cmpeqi	r2,r2,1
802029b4:	10000b26 	beq	r2,zero,802029e4 <bSdmaDmaM1Transfer+0x264>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
802029b8:	008001b4 	movhi	r2,6
802029bc:	10a00004 	addi	r2,r2,-32768
802029c0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
802029c4:	00800044 	movi	r2,1
802029c8:	e0bff315 	stw	r2,-52(fp)
			break;
802029cc:	00000806 	br	802029f0 <bSdmaDmaM1Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
802029d0:	00800174 	movhi	r2,5
802029d4:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
802029d8:	00800044 	movi	r2,1
802029dc:	e0bff315 	stw	r2,-52(fp)
			break;
802029e0:	00000306 	br	802029f0 <bSdmaDmaM1Transfer+0x270>
		default:
			bChannelFlag = FALSE;
802029e4:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
802029e8:	e03ffa15 	stw	zero,-24(fp)
			break;
802029ec:	0001883a 	nop
		}
		break;
802029f0:	00002806 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
802029f4:	e0bffd03 	ldbu	r2,-12(fp)
802029f8:	10000826 	beq	r2,zero,80202a1c <bSdmaDmaM1Transfer+0x29c>
802029fc:	10800060 	cmpeqi	r2,r2,1
80202a00:	10000b26 	beq	r2,zero,80202a30 <bSdmaDmaM1Transfer+0x2b0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
80202a04:	008001f4 	movhi	r2,7
80202a08:	10a00004 	addi	r2,r2,-32768
80202a0c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
80202a10:	00800044 	movi	r2,1
80202a14:	e0bff315 	stw	r2,-52(fp)
			break;
80202a18:	00000806 	br	80202a3c <bSdmaDmaM1Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
80202a1c:	008001b4 	movhi	r2,6
80202a20:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
80202a24:	00800044 	movi	r2,1
80202a28:	e0bff315 	stw	r2,-52(fp)
			break;
80202a2c:	00000306 	br	80202a3c <bSdmaDmaM1Transfer+0x2bc>
		default:
			bChannelFlag = FALSE;
80202a30:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202a34:	e03ffa15 	stw	zero,-24(fp)
			break;
80202a38:	0001883a 	nop
		}
		break;
80202a3c:	00001506 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
80202a40:	e0bffd03 	ldbu	r2,-12(fp)
80202a44:	10000826 	beq	r2,zero,80202a68 <bSdmaDmaM1Transfer+0x2e8>
80202a48:	10800060 	cmpeqi	r2,r2,1
80202a4c:	10000b26 	beq	r2,zero,80202a7c <bSdmaDmaM1Transfer+0x2fc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
80202a50:	00800234 	movhi	r2,8
80202a54:	10a00004 	addi	r2,r2,-32768
80202a58:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
80202a5c:	00800044 	movi	r2,1
80202a60:	e0bff315 	stw	r2,-52(fp)
			break;
80202a64:	00000806 	br	80202a88 <bSdmaDmaM1Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
80202a68:	008001f4 	movhi	r2,7
80202a6c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
80202a70:	00800044 	movi	r2,1
80202a74:	e0bff315 	stw	r2,-52(fp)
			break;
80202a78:	00000306 	br	80202a88 <bSdmaDmaM1Transfer+0x308>
		default:
			bChannelFlag = FALSE;
80202a7c:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202a80:	e03ffa15 	stw	zero,-24(fp)
			break;
80202a84:	0001883a 	nop
		}
		break;
80202a88:	00000206 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	default:
		bChannelFlag = FALSE;
80202a8c:	e03ff415 	stw	zero,-48(fp)
		break;
80202a90:	0001883a 	nop
	}

	bBufferEmptyFlag = TRUE;
80202a94:	00800044 	movi	r2,1
80202a98:	e0bffa15 	stw	r2,-24(fp)
	uliSrcAddrLow = (alt_u32) SDMA_M1_BASE_ADDR_LOW	+ (alt_u32) uliDdrInitialAddr;
80202a9c:	e0bffb17 	ldw	r2,-20(fp)
80202aa0:	e0bff715 	stw	r2,-36(fp)
	uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
80202aa4:	e03ff815 	stw	zero,-32(fp)

	// Rounding up the size to the nearest multiple of 32 (32 bytes = 256b = size of memory access)
	if ((SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks) % 32) {
80202aa8:	e0bffc0b 	ldhu	r2,-16(fp)
80202aac:	10802224 	muli	r2,r2,136
80202ab0:	1080060c 	andi	r2,r2,24
80202ab4:	10000826 	beq	r2,zero,80202ad8 <bSdmaDmaM1Transfer+0x358>
		// Transfer size is not a multiple of 32
		usiRoundedTransferSizeInBytes = ((alt_u16) ((SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks) / 32) + 1) * 32;
80202ab8:	e0bffc0b 	ldhu	r2,-16(fp)
80202abc:	10802224 	muli	r2,r2,136
80202ac0:	1004d17a 	srli	r2,r2,5
80202ac4:	10bfffcc 	andi	r2,r2,65535
80202ac8:	10800044 	addi	r2,r2,1
80202acc:	1004917a 	slli	r2,r2,5
80202ad0:	e0bff60d 	sth	r2,-40(fp)
80202ad4:	00000306 	br	80202ae4 <bSdmaDmaM1Transfer+0x364>
	} else {
		usiRoundedTransferSizeInBytes = (SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks);
80202ad8:	e0bffc0b 	ldhu	r2,-16(fp)
80202adc:	10802224 	muli	r2,r2,136
80202ae0:	e0bff60d 	sth	r2,-40(fp)
	}

	// Verify if the base address is a multiple o 32 (32 bytes = 256b = size of memory access)
	if (uliSrcAddrLow % 32) {
80202ae4:	e0bff717 	ldw	r2,-36(fp)
80202ae8:	108007cc 	andi	r2,r2,31
80202aec:	10000226 	beq	r2,zero,80202af8 <bSdmaDmaM1Transfer+0x378>
		// Address is not a multiple of 32
		bAddressFlag = FALSE;
80202af0:	e03ff515 	stw	zero,-44(fp)
80202af4:	00000206 	br	80202b00 <bSdmaDmaM1Transfer+0x380>
	} else {
		bAddressFlag = TRUE;
80202af8:	00800044 	movi	r2,1
80202afc:	e0bff515 	stw	r2,-44(fp)
	}

	if ((bChannelFlag) && (bBufferEmptyFlag) && (bAddressFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {
80202b00:	e0bff417 	ldw	r2,-48(fp)
80202b04:	10003126 	beq	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
80202b08:	e0bffa17 	ldw	r2,-24(fp)
80202b0c:	10002f26 	beq	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
80202b10:	e0bff517 	ldw	r2,-44(fp)
80202b14:	10002d26 	beq	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
80202b18:	e0bffc0b 	ldhu	r2,-16(fp)
80202b1c:	10800468 	cmpgeui	r2,r2,17
80202b20:	10002a1e 	bne	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>

		if (pxDmaM1Dev != NULL) {
80202b24:	d0a01417 	ldw	r2,-32688(gp)
80202b28:	10002826 	beq	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202b2c:	00000206 	br	80202b38 <bSdmaDmaM1Transfer+0x3b8>
				alt_busy_sleep(1); /* delay 1us */
80202b30:	01000044 	movi	r4,1
80202b34:	0216a040 	call	80216a04 <alt_busy_sleep>

	if ((bChannelFlag) && (bBufferEmptyFlag) && (bAddressFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {

		if (pxDmaM1Dev != NULL) {
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202b38:	d0a01417 	ldw	r2,-32688(gp)
80202b3c:	10800317 	ldw	r2,12(r2)
80202b40:	10800037 	ldwio	r2,0(r2)
80202b44:	1080010c 	andi	r2,r2,4
80202b48:	103ff91e 	bne	r2,zero,80202b30 <__reset+0xfa1e2b30>
				alt_busy_sleep(1); /* delay 1us */
			}
			/* Success = 0 */
			if (0 == iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
80202b4c:	d2201417 	ldw	r8,-32688(gp)
80202b50:	e1bff717 	ldw	r6,-36(fp)
80202b54:	e1fff217 	ldw	r7,-56(fp)
80202b58:	e0bff60b 	ldhu	r2,-40(fp)
80202b5c:	e0fff817 	ldw	r3,-32(fp)
80202b60:	e13ff317 	ldw	r4,-52(fp)
80202b64:	01400044 	movi	r5,1
80202b68:	d9400815 	stw	r5,32(sp)
80202b6c:	01400044 	movi	r5,1
80202b70:	d9400715 	stw	r5,28(sp)
80202b74:	01400044 	movi	r5,1
80202b78:	d9400615 	stw	r5,24(sp)
80202b7c:	01400044 	movi	r5,1
80202b80:	d9400515 	stw	r5,20(sp)
80202b84:	01400044 	movi	r5,1
80202b88:	d9400415 	stw	r5,16(sp)
80202b8c:	d9000315 	stw	r4,12(sp)
80202b90:	d8c00215 	stw	r3,8(sp)
80202b94:	e0fff917 	ldw	r3,-28(fp)
80202b98:	d8c00115 	stw	r3,4(sp)
80202b9c:	d8800015 	stw	r2,0(sp)
80202ba0:	800b883a 	mov	r5,r16
80202ba4:	4009883a 	mov	r4,r8
80202ba8:	0204e1c0 	call	80204e1c <iMsgdmaConstructExtendedMmToMmDescriptor>
80202bac:	1000071e 	bne	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
					(alt_u32 *) uliDestAddrLow,
					usiRoundedTransferSizeInBytes, uliControlBits,
					(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
					1, 1, 1, 1, 1)	) {
				/* Success = 0 */
				if (0 == iMsgdmaExtendedDescriptorAsyncTransfer(pxDmaM1Dev,	&xDmaExtendedDescriptor)) {
80202bb0:	d0a01417 	ldw	r2,-32688(gp)
80202bb4:	800b883a 	mov	r5,r16
80202bb8:	1009883a 	mov	r4,r2
80202bbc:	0204ed40 	call	80204ed4 <iMsgdmaExtendedDescriptorAsyncTransfer>
80202bc0:	1000021e 	bne	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
					bStatus = TRUE;
80202bc4:	00800044 	movi	r2,1
80202bc8:	e0bff115 	stw	r2,-60(fp)
				}
			}
		}
	}
	return bStatus;
80202bcc:	e0bff117 	ldw	r2,-60(fp)
}
80202bd0:	e6ffff04 	addi	sp,fp,-4
80202bd4:	dfc00217 	ldw	ra,8(sp)
80202bd8:	df000117 	ldw	fp,4(sp)
80202bdc:	dc000017 	ldw	r16,0(sp)
80202be0:	dec00304 	addi	sp,sp,12
80202be4:	f800283a 	ret

80202be8 <bSdmaDmaM2Transfer>:

bool bSdmaDmaM2Transfer(alt_u32 *uliDdrInitialAddr, alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide, alt_u8 ucChBufferId) {
80202be8:	deffe604 	addi	sp,sp,-104
80202bec:	dfc01915 	stw	ra,100(sp)
80202bf0:	df001815 	stw	fp,96(sp)
80202bf4:	dc001715 	stw	r16,92(sp)
80202bf8:	df001804 	addi	fp,sp,96
80202bfc:	e13ffb15 	stw	r4,-20(fp)
80202c00:	2809883a 	mov	r4,r5
80202c04:	3007883a 	mov	r3,r6
80202c08:	3805883a 	mov	r2,r7
80202c0c:	e13ffc0d 	sth	r4,-16(fp)
80202c10:	e0fffd05 	stb	r3,-12(fp)
80202c14:	e0bffe05 	stb	r2,-8(fp)
80202c18:	defff004 	addi	sp,sp,-64
80202c1c:	d8800904 	addi	r2,sp,36
80202c20:	108007c4 	addi	r2,r2,31
80202c24:	1004d17a 	srli	r2,r2,5
80202c28:	1020917a 	slli	r16,r2,5
	bool bStatus;

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
80202c2c:	e03ff215 	stw	zero,-56(fp)
	alt_u32 uliDestAddrHigh = 0;
80202c30:	e03ff315 	stw	zero,-52(fp)

	alt_u32 uliSrcAddrLow = 0;
80202c34:	e03ff715 	stw	zero,-36(fp)
	alt_u32 uliSrcAddrHigh = 0;
80202c38:	e03ff815 	stw	zero,-32(fp)

	alt_u32 uliControlBits = 0x00000000;
80202c3c:	e03ff915 	stw	zero,-28(fp)
	bool bBufferEmptyFlag;
	bool bChannelFlag;
	bool bAddressFlag = FALSE;
80202c40:	e03ff515 	stw	zero,-44(fp)

	alt_u16 usiRoundedTransferSizeInBytes = 0;
80202c44:	e03ff60d 	sth	zero,-40(fp)

	/* Assuming that the channel selected exist, change to FALSE if doesn't */
	bChannelFlag = TRUE;
80202c48:	00800044 	movi	r2,1
80202c4c:	e0bff415 	stw	r2,-48(fp)
	bStatus = FALSE;
80202c50:	e03ff115 	stw	zero,-60(fp)
	bBufferEmptyFlag = FALSE;
80202c54:	e03ffa15 	stw	zero,-24(fp)
	switch (ucChBufferId) {
80202c58:	e0bffe03 	ldbu	r2,-8(fp)
80202c5c:	10c00228 	cmpgeui	r3,r2,8
80202c60:	1800a41e 	bne	r3,zero,80202ef4 <bSdmaDmaM2Transfer+0x30c>
80202c64:	100690ba 	slli	r3,r2,2
80202c68:	00a00834 	movhi	r2,32800
80202c6c:	108b1f04 	addi	r2,r2,11388
80202c70:	1885883a 	add	r2,r3,r2
80202c74:	10800017 	ldw	r2,0(r2)
80202c78:	1000683a 	jmp	r2
80202c7c:	80202c9c 	xori	zero,r16,32946
80202c80:	80202ce0 	cmpeqi	zero,r16,-32589
80202c84:	80202d2c 	andhi	zero,r16,32948
80202c88:	80202d78 	rdprs	zero,r16,-32587
80202c8c:	80202dc4 	addi	zero,r16,-32585
80202c90:	80202e10 	cmplti	zero,r16,-32584
80202c94:	80202e5c 	xori	zero,r16,32953
80202c98:	80202ea8 	cmpgeui	zero,r16,32954
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
80202c9c:	e0bffd03 	ldbu	r2,-12(fp)
80202ca0:	10000726 	beq	r2,zero,80202cc0 <bSdmaDmaM2Transfer+0xd8>
80202ca4:	10800060 	cmpeqi	r2,r2,1
80202ca8:	10000926 	beq	r2,zero,80202cd0 <bSdmaDmaM2Transfer+0xe8>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
80202cac:	00a00014 	movui	r2,32768
80202cb0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
80202cb4:	00800044 	movi	r2,1
80202cb8:	e0bff315 	stw	r2,-52(fp)
			break;
80202cbc:	00000706 	br	80202cdc <bSdmaDmaM2Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
80202cc0:	e03ff215 	stw	zero,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
80202cc4:	00800044 	movi	r2,1
80202cc8:	e0bff315 	stw	r2,-52(fp)
			break;
80202ccc:	00000306 	br	80202cdc <bSdmaDmaM2Transfer+0xf4>
		default:
			bChannelFlag = FALSE;
80202cd0:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202cd4:	e03ffa15 	stw	zero,-24(fp)
			break;
80202cd8:	0001883a 	nop
		}
		break;
80202cdc:	00008706 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
80202ce0:	e0bffd03 	ldbu	r2,-12(fp)
80202ce4:	10000826 	beq	r2,zero,80202d08 <bSdmaDmaM2Transfer+0x120>
80202ce8:	10800060 	cmpeqi	r2,r2,1
80202cec:	10000b26 	beq	r2,zero,80202d1c <bSdmaDmaM2Transfer+0x134>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
80202cf0:	008000b4 	movhi	r2,2
80202cf4:	10a00004 	addi	r2,r2,-32768
80202cf8:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
80202cfc:	00800044 	movi	r2,1
80202d00:	e0bff315 	stw	r2,-52(fp)
			break;
80202d04:	00000806 	br	80202d28 <bSdmaDmaM2Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
80202d08:	00800074 	movhi	r2,1
80202d0c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
80202d10:	00800044 	movi	r2,1
80202d14:	e0bff315 	stw	r2,-52(fp)
			break;
80202d18:	00000306 	br	80202d28 <bSdmaDmaM2Transfer+0x140>
		default:
			bChannelFlag = FALSE;
80202d1c:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202d20:	e03ffa15 	stw	zero,-24(fp)
			break;
80202d24:	0001883a 	nop
		}
		break;
80202d28:	00007406 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
80202d2c:	e0bffd03 	ldbu	r2,-12(fp)
80202d30:	10000826 	beq	r2,zero,80202d54 <bSdmaDmaM2Transfer+0x16c>
80202d34:	10800060 	cmpeqi	r2,r2,1
80202d38:	10000b26 	beq	r2,zero,80202d68 <bSdmaDmaM2Transfer+0x180>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
80202d3c:	008000f4 	movhi	r2,3
80202d40:	10a00004 	addi	r2,r2,-32768
80202d44:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
80202d48:	00800044 	movi	r2,1
80202d4c:	e0bff315 	stw	r2,-52(fp)
			break;
80202d50:	00000806 	br	80202d74 <bSdmaDmaM2Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
80202d54:	008000b4 	movhi	r2,2
80202d58:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
80202d5c:	00800044 	movi	r2,1
80202d60:	e0bff315 	stw	r2,-52(fp)
			break;
80202d64:	00000306 	br	80202d74 <bSdmaDmaM2Transfer+0x18c>
		default:
			bChannelFlag = FALSE;
80202d68:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202d6c:	e03ffa15 	stw	zero,-24(fp)
			break;
80202d70:	0001883a 	nop
		}
		break;
80202d74:	00006106 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
80202d78:	e0bffd03 	ldbu	r2,-12(fp)
80202d7c:	10000826 	beq	r2,zero,80202da0 <bSdmaDmaM2Transfer+0x1b8>
80202d80:	10800060 	cmpeqi	r2,r2,1
80202d84:	10000b26 	beq	r2,zero,80202db4 <bSdmaDmaM2Transfer+0x1cc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
80202d88:	00800134 	movhi	r2,4
80202d8c:	10a00004 	addi	r2,r2,-32768
80202d90:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
80202d94:	00800044 	movi	r2,1
80202d98:	e0bff315 	stw	r2,-52(fp)
			break;
80202d9c:	00000806 	br	80202dc0 <bSdmaDmaM2Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
80202da0:	008000f4 	movhi	r2,3
80202da4:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
80202da8:	00800044 	movi	r2,1
80202dac:	e0bff315 	stw	r2,-52(fp)
			break;
80202db0:	00000306 	br	80202dc0 <bSdmaDmaM2Transfer+0x1d8>
		default:
			bChannelFlag = FALSE;
80202db4:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202db8:	e03ffa15 	stw	zero,-24(fp)
			break;
80202dbc:	0001883a 	nop
		}
		break;
80202dc0:	00004e06 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
80202dc4:	e0bffd03 	ldbu	r2,-12(fp)
80202dc8:	10000826 	beq	r2,zero,80202dec <bSdmaDmaM2Transfer+0x204>
80202dcc:	10800060 	cmpeqi	r2,r2,1
80202dd0:	10000b26 	beq	r2,zero,80202e00 <bSdmaDmaM2Transfer+0x218>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
80202dd4:	00800174 	movhi	r2,5
80202dd8:	10a00004 	addi	r2,r2,-32768
80202ddc:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
80202de0:	00800044 	movi	r2,1
80202de4:	e0bff315 	stw	r2,-52(fp)
			break;
80202de8:	00000806 	br	80202e0c <bSdmaDmaM2Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
80202dec:	00800134 	movhi	r2,4
80202df0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
80202df4:	00800044 	movi	r2,1
80202df8:	e0bff315 	stw	r2,-52(fp)
			break;
80202dfc:	00000306 	br	80202e0c <bSdmaDmaM2Transfer+0x224>
		default:
			bChannelFlag = FALSE;
80202e00:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202e04:	e03ffa15 	stw	zero,-24(fp)
			break;
80202e08:	0001883a 	nop
		}
		break;
80202e0c:	00003b06 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
80202e10:	e0bffd03 	ldbu	r2,-12(fp)
80202e14:	10000826 	beq	r2,zero,80202e38 <bSdmaDmaM2Transfer+0x250>
80202e18:	10800060 	cmpeqi	r2,r2,1
80202e1c:	10000b26 	beq	r2,zero,80202e4c <bSdmaDmaM2Transfer+0x264>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
80202e20:	008001b4 	movhi	r2,6
80202e24:	10a00004 	addi	r2,r2,-32768
80202e28:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
80202e2c:	00800044 	movi	r2,1
80202e30:	e0bff315 	stw	r2,-52(fp)
			break;
80202e34:	00000806 	br	80202e58 <bSdmaDmaM2Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
80202e38:	00800174 	movhi	r2,5
80202e3c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
80202e40:	00800044 	movi	r2,1
80202e44:	e0bff315 	stw	r2,-52(fp)
			break;
80202e48:	00000306 	br	80202e58 <bSdmaDmaM2Transfer+0x270>
		default:
			bChannelFlag = FALSE;
80202e4c:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202e50:	e03ffa15 	stw	zero,-24(fp)
			break;
80202e54:	0001883a 	nop
		}
		break;
80202e58:	00002806 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
80202e5c:	e0bffd03 	ldbu	r2,-12(fp)
80202e60:	10000826 	beq	r2,zero,80202e84 <bSdmaDmaM2Transfer+0x29c>
80202e64:	10800060 	cmpeqi	r2,r2,1
80202e68:	10000b26 	beq	r2,zero,80202e98 <bSdmaDmaM2Transfer+0x2b0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
80202e6c:	008001f4 	movhi	r2,7
80202e70:	10a00004 	addi	r2,r2,-32768
80202e74:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
80202e78:	00800044 	movi	r2,1
80202e7c:	e0bff315 	stw	r2,-52(fp)
			break;
80202e80:	00000806 	br	80202ea4 <bSdmaDmaM2Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
80202e84:	008001b4 	movhi	r2,6
80202e88:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
80202e8c:	00800044 	movi	r2,1
80202e90:	e0bff315 	stw	r2,-52(fp)
			break;
80202e94:	00000306 	br	80202ea4 <bSdmaDmaM2Transfer+0x2bc>
		default:
			bChannelFlag = FALSE;
80202e98:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202e9c:	e03ffa15 	stw	zero,-24(fp)
			break;
80202ea0:	0001883a 	nop
		}
		break;
80202ea4:	00001506 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
80202ea8:	e0bffd03 	ldbu	r2,-12(fp)
80202eac:	10000826 	beq	r2,zero,80202ed0 <bSdmaDmaM2Transfer+0x2e8>
80202eb0:	10800060 	cmpeqi	r2,r2,1
80202eb4:	10000b26 	beq	r2,zero,80202ee4 <bSdmaDmaM2Transfer+0x2fc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
80202eb8:	00800234 	movhi	r2,8
80202ebc:	10a00004 	addi	r2,r2,-32768
80202ec0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
80202ec4:	00800044 	movi	r2,1
80202ec8:	e0bff315 	stw	r2,-52(fp)
			break;
80202ecc:	00000806 	br	80202ef0 <bSdmaDmaM2Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
80202ed0:	008001f4 	movhi	r2,7
80202ed4:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
80202ed8:	00800044 	movi	r2,1
80202edc:	e0bff315 	stw	r2,-52(fp)
			break;
80202ee0:	00000306 	br	80202ef0 <bSdmaDmaM2Transfer+0x308>
		default:
			bChannelFlag = FALSE;
80202ee4:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202ee8:	e03ffa15 	stw	zero,-24(fp)
			break;
80202eec:	0001883a 	nop
		}
		break;
80202ef0:	00000206 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	default:
		bChannelFlag = FALSE;
80202ef4:	e03ff415 	stw	zero,-48(fp)
		break;
80202ef8:	0001883a 	nop
	}

	bBufferEmptyFlag = TRUE;
80202efc:	00800044 	movi	r2,1
80202f00:	e0bffa15 	stw	r2,-24(fp)
	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
			+ (alt_u32) uliDdrInitialAddr;
80202f04:	e0fffb17 	ldw	r3,-20(fp)
		bChannelFlag = FALSE;
		break;
	}

	bBufferEmptyFlag = TRUE;
	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
80202f08:	00a00034 	movhi	r2,32768
80202f0c:	1885883a 	add	r2,r3,r2
80202f10:	e0bff715 	stw	r2,-36(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
80202f14:	e03ff815 	stw	zero,-32(fp)

	// Rounding up the size to the nearest multiple of 32 (32 bytes = 256b = size of memory access)
	if ((SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks) % 32) {
80202f18:	e0bffc0b 	ldhu	r2,-16(fp)
80202f1c:	10802224 	muli	r2,r2,136
80202f20:	1080060c 	andi	r2,r2,24
80202f24:	10000826 	beq	r2,zero,80202f48 <bSdmaDmaM2Transfer+0x360>
		// Transfer size is not a multiple of 32
		usiRoundedTransferSizeInBytes = ((alt_u16) ((SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks) / 32) + 1) * 32;
80202f28:	e0bffc0b 	ldhu	r2,-16(fp)
80202f2c:	10802224 	muli	r2,r2,136
80202f30:	1004d17a 	srli	r2,r2,5
80202f34:	10bfffcc 	andi	r2,r2,65535
80202f38:	10800044 	addi	r2,r2,1
80202f3c:	1004917a 	slli	r2,r2,5
80202f40:	e0bff60d 	sth	r2,-40(fp)
80202f44:	00000306 	br	80202f54 <bSdmaDmaM2Transfer+0x36c>
	} else {
		usiRoundedTransferSizeInBytes = (SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks);
80202f48:	e0bffc0b 	ldhu	r2,-16(fp)
80202f4c:	10802224 	muli	r2,r2,136
80202f50:	e0bff60d 	sth	r2,-40(fp)
	}

	// Verify if the base address is a multiple o 32 (32 bytes = 256b = size of memory access)
	if (uliSrcAddrLow % 32) {
80202f54:	e0bff717 	ldw	r2,-36(fp)
80202f58:	108007cc 	andi	r2,r2,31
80202f5c:	10000226 	beq	r2,zero,80202f68 <bSdmaDmaM2Transfer+0x380>
		// Address is not a multiple of 32
		bAddressFlag = FALSE;
80202f60:	e03ff515 	stw	zero,-44(fp)
80202f64:	00000206 	br	80202f70 <bSdmaDmaM2Transfer+0x388>
	} else {
		bAddressFlag = TRUE;
80202f68:	00800044 	movi	r2,1
80202f6c:	e0bff515 	stw	r2,-44(fp)
	}

	if ((bChannelFlag) && (bBufferEmptyFlag) && (bAddressFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {
80202f70:	e0bff417 	ldw	r2,-48(fp)
80202f74:	10003126 	beq	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
80202f78:	e0bffa17 	ldw	r2,-24(fp)
80202f7c:	10002f26 	beq	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
80202f80:	e0bff517 	ldw	r2,-44(fp)
80202f84:	10002d26 	beq	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
80202f88:	e0bffc0b 	ldhu	r2,-16(fp)
80202f8c:	10800468 	cmpgeui	r2,r2,17
80202f90:	10002a1e 	bne	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
		if (pxDmaM2Dev != NULL) {
80202f94:	d0a01517 	ldw	r2,-32684(gp)
80202f98:	10002826 	beq	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>

			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202f9c:	00000206 	br	80202fa8 <bSdmaDmaM2Transfer+0x3c0>
				alt_busy_sleep(1); /* delay 1us */
80202fa0:	01000044 	movi	r4,1
80202fa4:	0216a040 	call	80216a04 <alt_busy_sleep>
	}

	if ((bChannelFlag) && (bBufferEmptyFlag) && (bAddressFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {
		if (pxDmaM2Dev != NULL) {

			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202fa8:	d0a01517 	ldw	r2,-32684(gp)
80202fac:	10800317 	ldw	r2,12(r2)
80202fb0:	10800037 	ldwio	r2,0(r2)
80202fb4:	1080010c 	andi	r2,r2,4
80202fb8:	103ff91e 	bne	r2,zero,80202fa0 <__reset+0xfa1e2fa0>
				alt_busy_sleep(1); /* delay 1us */
			}
			/* Success = 0 */
			if ( 0 == iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
80202fbc:	d2201517 	ldw	r8,-32684(gp)
80202fc0:	e1bff717 	ldw	r6,-36(fp)
80202fc4:	e1fff217 	ldw	r7,-56(fp)
80202fc8:	e0bff60b 	ldhu	r2,-40(fp)
80202fcc:	e0fff817 	ldw	r3,-32(fp)
80202fd0:	e13ff317 	ldw	r4,-52(fp)
80202fd4:	01400044 	movi	r5,1
80202fd8:	d9400815 	stw	r5,32(sp)
80202fdc:	01400044 	movi	r5,1
80202fe0:	d9400715 	stw	r5,28(sp)
80202fe4:	01400044 	movi	r5,1
80202fe8:	d9400615 	stw	r5,24(sp)
80202fec:	01400044 	movi	r5,1
80202ff0:	d9400515 	stw	r5,20(sp)
80202ff4:	01400044 	movi	r5,1
80202ff8:	d9400415 	stw	r5,16(sp)
80202ffc:	d9000315 	stw	r4,12(sp)
80203000:	d8c00215 	stw	r3,8(sp)
80203004:	e0fff917 	ldw	r3,-28(fp)
80203008:	d8c00115 	stw	r3,4(sp)
8020300c:	d8800015 	stw	r2,0(sp)
80203010:	800b883a 	mov	r5,r16
80203014:	4009883a 	mov	r4,r8
80203018:	0204e1c0 	call	80204e1c <iMsgdmaConstructExtendedMmToMmDescriptor>
8020301c:	1000071e 	bne	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
					(alt_u32 *) uliDestAddrLow,
					usiRoundedTransferSizeInBytes, uliControlBits,
					(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
					1, 1, 1, 1, 1)) {
				/* Success = 0 */
				if ( 0 == iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
80203020:	d0a01517 	ldw	r2,-32684(gp)
80203024:	800b883a 	mov	r5,r16
80203028:	1009883a 	mov	r4,r2
8020302c:	0204f100 	call	80204f10 <iMsgdmaExtendedDescriptorSyncTransfer>
80203030:	1000021e 	bne	r2,zero,8020303c <bSdmaDmaM2Transfer+0x454>
						&xDmaExtendedDescriptor)) {
					bStatus = TRUE;
80203034:	00800044 	movi	r2,1
80203038:	e0bff115 	stw	r2,-60(fp)
				}
			}
		}
	}
	return bStatus;
8020303c:	e0bff117 	ldw	r2,-60(fp)
}
80203040:	e6ffff04 	addi	sp,fp,-4
80203044:	dfc00217 	ldw	ra,8(sp)
80203048:	df000117 	ldw	fp,4(sp)
8020304c:	dc000017 	ldw	r16,0(sp)
80203050:	dec00304 	addi	sp,sp,12
80203054:	f800283a 	ret

80203058 <bSdmaDmaM1FtdiTransfer>:

bool bSdmaDmaM1FtdiTransfer(alt_u32 *uliDdrInitialAddr, alt_u16 usiTransferSizeInBytes, alt_u8 ucFtdiOperation) {
80203058:	deffe804 	addi	sp,sp,-96
8020305c:	dfc01715 	stw	ra,92(sp)
80203060:	df001615 	stw	fp,88(sp)
80203064:	dc001515 	stw	r16,84(sp)
80203068:	df001604 	addi	fp,sp,88
8020306c:	e13ffc15 	stw	r4,-16(fp)
80203070:	2807883a 	mov	r3,r5
80203074:	3005883a 	mov	r2,r6
80203078:	e0fffd0d 	sth	r3,-12(fp)
8020307c:	e0bffe05 	stb	r2,-8(fp)
80203080:	defff004 	addi	sp,sp,-64
80203084:	d8800904 	addi	r2,sp,36
80203088:	108007c4 	addi	r2,r2,31
8020308c:	1004d17a 	srli	r2,r2,5
80203090:	1020917a 	slli	r16,r2,5
	bool bStatus;

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
80203094:	e03ff415 	stw	zero,-48(fp)
	alt_u32 uliDestAddrHigh = 0;
80203098:	e03ff515 	stw	zero,-44(fp)

	alt_u32 uliSrcAddrLow = 0;
8020309c:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliSrcAddrHigh = 0;
802030a0:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliControlBits = 0x00000000;
802030a4:	e03ffb15 	stw	zero,-20(fp)
	bool bAddressFlag = FALSE;
802030a8:	e03ff815 	stw	zero,-32(fp)
	bool bOperationFlag = FALSE;
802030ac:	e03ff915 	stw	zero,-28(fp)

	alt_u16 usiRoundedTransferSizeInBytes = 0;
802030b0:	e03ffa0d 	sth	zero,-24(fp)

	bStatus = FALSE;
802030b4:	e03ff315 	stw	zero,-52(fp)

	switch (ucFtdiOperation) {
802030b8:	e0bffe03 	ldbu	r2,-8(fp)
802030bc:	10000326 	beq	r2,zero,802030cc <bSdmaDmaM1FtdiTransfer+0x74>
802030c0:	10800060 	cmpeqi	r2,r2,1
802030c4:	10000a1e 	bne	r2,zero,802030f0 <bSdmaDmaM1FtdiTransfer+0x98>
802030c8:	00001206 	br	80203114 <bSdmaDmaM1FtdiTransfer+0xbc>

		case eSdmaTxFtdi:
				uliSrcAddrLow   = (alt_u32) SDMA_M1_BASE_ADDR_LOW	+ (alt_u32) uliDdrInitialAddr;
802030cc:	e0bffc17 	ldw	r2,-16(fp)
802030d0:	e0bff615 	stw	r2,-40(fp)
				uliSrcAddrHigh  = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
802030d4:	e03ff715 	stw	zero,-36(fp)
				uliDestAddrLow  = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_LOW;
802030d8:	e03ff415 	stw	zero,-48(fp)
				uliDestAddrHigh = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_HIGH;
802030dc:	00800084 	movi	r2,2
802030e0:	e0bff515 	stw	r2,-44(fp)
				bOperationFlag = TRUE;
802030e4:	00800044 	movi	r2,1
802030e8:	e0bff915 	stw	r2,-28(fp)
			break;
802030ec:	00000b06 	br	8020311c <bSdmaDmaM1FtdiTransfer+0xc4>

		case eSdmaRxFtdi:
				uliSrcAddrLow   = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_LOW;
802030f0:	e03ff615 	stw	zero,-40(fp)
				uliSrcAddrHigh  = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_HIGH;
802030f4:	00800084 	movi	r2,2
802030f8:	e0bff715 	stw	r2,-36(fp)
				uliDestAddrLow  = (alt_u32) SDMA_M1_BASE_ADDR_LOW	+ (alt_u32) uliDdrInitialAddr;
802030fc:	e0bffc17 	ldw	r2,-16(fp)
80203100:	e0bff415 	stw	r2,-48(fp)
				uliDestAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
80203104:	e03ff515 	stw	zero,-44(fp)
				bOperationFlag = TRUE;
80203108:	00800044 	movi	r2,1
8020310c:	e0bff915 	stw	r2,-28(fp)
			break;
80203110:	00000206 	br	8020311c <bSdmaDmaM1FtdiTransfer+0xc4>

		default:
			bOperationFlag = FALSE;
80203114:	e03ff915 	stw	zero,-28(fp)
			break;
80203118:	0001883a 	nop

	}

	// Rounding up the size to the nearest multiple of 8 (8 bytes = 64b = size of memory access)
	if (usiRoundedTransferSizeInBytes % 8) {
8020311c:	e0bffa0b 	ldhu	r2,-24(fp)
80203120:	108001cc 	andi	r2,r2,7
80203124:	10bfffcc 	andi	r2,r2,65535
80203128:	10000726 	beq	r2,zero,80203148 <bSdmaDmaM1FtdiTransfer+0xf0>
		// Transfer size is not a multiple of 8
		usiRoundedTransferSizeInBytes = ((alt_u16) (usiTransferSizeInBytes / 8) + 1) * 8;
8020312c:	e0bffd0b 	ldhu	r2,-12(fp)
80203130:	1004d0fa 	srli	r2,r2,3
80203134:	10bfffcc 	andi	r2,r2,65535
80203138:	10800044 	addi	r2,r2,1
8020313c:	100490fa 	slli	r2,r2,3
80203140:	e0bffa0d 	sth	r2,-24(fp)
80203144:	00000206 	br	80203150 <bSdmaDmaM1FtdiTransfer+0xf8>
	} else {
		usiRoundedTransferSizeInBytes = usiTransferSizeInBytes;
80203148:	e0bffd0b 	ldhu	r2,-12(fp)
8020314c:	e0bffa0d 	sth	r2,-24(fp)
	}

	// Verify if the base address is a multiple o 8 (8 bytes = 64b = size of memory access)
	if (uliSrcAddrLow % 8) {
80203150:	e0bff617 	ldw	r2,-40(fp)
80203154:	108001cc 	andi	r2,r2,7
80203158:	10000226 	beq	r2,zero,80203164 <bSdmaDmaM1FtdiTransfer+0x10c>
		// Address is not a multiple of 8
		bAddressFlag = FALSE;
8020315c:	e03ff815 	stw	zero,-32(fp)
80203160:	00000206 	br	8020316c <bSdmaDmaM1FtdiTransfer+0x114>
	} else {
		bAddressFlag = TRUE;
80203164:	00800044 	movi	r2,1
80203168:	e0bff815 	stw	r2,-32(fp)
	}

	if ((bOperationFlag) && (bAddressFlag) && (usiRoundedTransferSizeInBytes <= 8192)) {
8020316c:	e0bff917 	ldw	r2,-28(fp)
80203170:	10002f26 	beq	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>
80203174:	e0bff817 	ldw	r2,-32(fp)
80203178:	10002d26 	beq	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>
8020317c:	e0bffa0b 	ldhu	r2,-24(fp)
80203180:	10880068 	cmpgeui	r2,r2,8193
80203184:	10002a1e 	bne	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>

		if (pxDmaM1Dev != NULL) {
80203188:	d0a01417 	ldw	r2,-32688(gp)
8020318c:	10002826 	beq	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80203190:	00000206 	br	8020319c <bSdmaDmaM1FtdiTransfer+0x144>
				alt_busy_sleep(1); /* delay 1us */
80203194:	01000044 	movi	r4,1
80203198:	0216a040 	call	80216a04 <alt_busy_sleep>

	if ((bOperationFlag) && (bAddressFlag) && (usiRoundedTransferSizeInBytes <= 8192)) {

		if (pxDmaM1Dev != NULL) {
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
8020319c:	d0a01417 	ldw	r2,-32688(gp)
802031a0:	10800317 	ldw	r2,12(r2)
802031a4:	10800037 	ldwio	r2,0(r2)
802031a8:	1080010c 	andi	r2,r2,4
802031ac:	103ff91e 	bne	r2,zero,80203194 <__reset+0xfa1e3194>
				alt_busy_sleep(1); /* delay 1us */
			}
			/* Success = 0 */
			if (0 == iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
802031b0:	d2201417 	ldw	r8,-32688(gp)
802031b4:	e1bff617 	ldw	r6,-40(fp)
802031b8:	e1fff417 	ldw	r7,-48(fp)
802031bc:	e0bffa0b 	ldhu	r2,-24(fp)
802031c0:	e0fff717 	ldw	r3,-36(fp)
802031c4:	e13ff517 	ldw	r4,-44(fp)
802031c8:	01400044 	movi	r5,1
802031cc:	d9400815 	stw	r5,32(sp)
802031d0:	01400044 	movi	r5,1
802031d4:	d9400715 	stw	r5,28(sp)
802031d8:	01400044 	movi	r5,1
802031dc:	d9400615 	stw	r5,24(sp)
802031e0:	01400044 	movi	r5,1
802031e4:	d9400515 	stw	r5,20(sp)
802031e8:	01400044 	movi	r5,1
802031ec:	d9400415 	stw	r5,16(sp)
802031f0:	d9000315 	stw	r4,12(sp)
802031f4:	d8c00215 	stw	r3,8(sp)
802031f8:	e0fffb17 	ldw	r3,-20(fp)
802031fc:	d8c00115 	stw	r3,4(sp)
80203200:	d8800015 	stw	r2,0(sp)
80203204:	800b883a 	mov	r5,r16
80203208:	4009883a 	mov	r4,r8
8020320c:	0204e1c0 	call	80204e1c <iMsgdmaConstructExtendedMmToMmDescriptor>
80203210:	1000071e 	bne	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>
					(alt_u32 *) uliDestAddrLow,
					usiRoundedTransferSizeInBytes, uliControlBits,
					(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
					1, 1, 1, 1, 1)	) {
				/* Success = 0 */
				if (0 == iMsgdmaExtendedDescriptorAsyncTransfer(pxDmaM1Dev,	&xDmaExtendedDescriptor)) {
80203214:	d0a01417 	ldw	r2,-32688(gp)
80203218:	800b883a 	mov	r5,r16
8020321c:	1009883a 	mov	r4,r2
80203220:	0204ed40 	call	80204ed4 <iMsgdmaExtendedDescriptorAsyncTransfer>
80203224:	1000021e 	bne	r2,zero,80203230 <bSdmaDmaM1FtdiTransfer+0x1d8>
					bStatus = TRUE;
80203228:	00800044 	movi	r2,1
8020322c:	e0bff315 	stw	r2,-52(fp)
				}
			}
		}
	}
	return bStatus;
80203230:	e0bff317 	ldw	r2,-52(fp)
}
80203234:	e6ffff04 	addi	sp,fp,-4
80203238:	dfc00217 	ldw	ra,8(sp)
8020323c:	df000117 	ldw	fp,4(sp)
80203240:	dc000017 	ldw	r16,0(sp)
80203244:	dec00304 	addi	sp,sp,12
80203248:	f800283a 	ret

8020324c <bSdmaDmaM2FtdiTransfer>:

bool bSdmaDmaM2FtdiTransfer(alt_u32 *uliDdrInitialAddr, alt_u16 usiTransferSizeInBytes, alt_u8 ucFtdiOperation) {
8020324c:	deffe804 	addi	sp,sp,-96
80203250:	dfc01715 	stw	ra,92(sp)
80203254:	df001615 	stw	fp,88(sp)
80203258:	dc001515 	stw	r16,84(sp)
8020325c:	df001604 	addi	fp,sp,88
80203260:	e13ffc15 	stw	r4,-16(fp)
80203264:	2807883a 	mov	r3,r5
80203268:	3005883a 	mov	r2,r6
8020326c:	e0fffd0d 	sth	r3,-12(fp)
80203270:	e0bffe05 	stb	r2,-8(fp)
80203274:	defff004 	addi	sp,sp,-64
80203278:	d8800904 	addi	r2,sp,36
8020327c:	108007c4 	addi	r2,r2,31
80203280:	1004d17a 	srli	r2,r2,5
80203284:	1020917a 	slli	r16,r2,5
	bool bStatus;

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
80203288:	e03ff415 	stw	zero,-48(fp)
	alt_u32 uliDestAddrHigh = 0;
8020328c:	e03ff515 	stw	zero,-44(fp)

	alt_u32 uliSrcAddrLow = 0;
80203290:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliSrcAddrHigh = 0;
80203294:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliControlBits = 0x00000000;
80203298:	e03ffb15 	stw	zero,-20(fp)
	bool bAddressFlag = FALSE;
8020329c:	e03ff815 	stw	zero,-32(fp)
	bool bOperationFlag = FALSE;
802032a0:	e03ff915 	stw	zero,-28(fp)

	alt_u16 usiRoundedTransferSizeInBytes = 0;
802032a4:	e03ffa0d 	sth	zero,-24(fp)

	bStatus = FALSE;
802032a8:	e03ff315 	stw	zero,-52(fp)

	switch (ucFtdiOperation) {
802032ac:	e0bffe03 	ldbu	r2,-8(fp)
802032b0:	10000326 	beq	r2,zero,802032c0 <bSdmaDmaM2FtdiTransfer+0x74>
802032b4:	10800060 	cmpeqi	r2,r2,1
802032b8:	10000c1e 	bne	r2,zero,802032ec <bSdmaDmaM2FtdiTransfer+0xa0>
802032bc:	00001606 	br	80203318 <bSdmaDmaM2FtdiTransfer+0xcc>

		case eSdmaTxFtdi:
				uliSrcAddrLow   = (alt_u32) SDMA_M2_BASE_ADDR_LOW	+ (alt_u32) uliDdrInitialAddr;
802032c0:	e0fffc17 	ldw	r3,-16(fp)
802032c4:	00a00034 	movhi	r2,32768
802032c8:	1885883a 	add	r2,r3,r2
802032cc:	e0bff615 	stw	r2,-40(fp)
				uliSrcAddrHigh  = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
802032d0:	e03ff715 	stw	zero,-36(fp)
				uliDestAddrLow  = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_LOW;
802032d4:	e03ff415 	stw	zero,-48(fp)
				uliDestAddrHigh = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_HIGH;
802032d8:	00800084 	movi	r2,2
802032dc:	e0bff515 	stw	r2,-44(fp)
				bOperationFlag = TRUE;
802032e0:	00800044 	movi	r2,1
802032e4:	e0bff915 	stw	r2,-28(fp)
			break;
802032e8:	00000d06 	br	80203320 <bSdmaDmaM2FtdiTransfer+0xd4>

		case eSdmaRxFtdi:
				uliSrcAddrLow   = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_LOW;
802032ec:	e03ff615 	stw	zero,-40(fp)
				uliSrcAddrHigh  = (alt_u32) SDMA_FTDI_BUFF_BASE_ADDR_HIGH;
802032f0:	00800084 	movi	r2,2
802032f4:	e0bff715 	stw	r2,-36(fp)
				uliDestAddrLow  = (alt_u32) SDMA_M2_BASE_ADDR_LOW	+ (alt_u32) uliDdrInitialAddr;
802032f8:	e0fffc17 	ldw	r3,-16(fp)
802032fc:	00a00034 	movhi	r2,32768
80203300:	1885883a 	add	r2,r3,r2
80203304:	e0bff415 	stw	r2,-48(fp)
				uliDestAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
80203308:	e03ff515 	stw	zero,-44(fp)
				bOperationFlag = TRUE;
8020330c:	00800044 	movi	r2,1
80203310:	e0bff915 	stw	r2,-28(fp)
			break;
80203314:	00000206 	br	80203320 <bSdmaDmaM2FtdiTransfer+0xd4>

		default:
			bOperationFlag = FALSE;
80203318:	e03ff915 	stw	zero,-28(fp)
			break;
8020331c:	0001883a 	nop

	}

	// Rounding up the size to the nearest multiple of 8 (8 bytes = 64b = size of memory access)
	if (usiRoundedTransferSizeInBytes % 8) {
80203320:	e0bffa0b 	ldhu	r2,-24(fp)
80203324:	108001cc 	andi	r2,r2,7
80203328:	10bfffcc 	andi	r2,r2,65535
8020332c:	10000726 	beq	r2,zero,8020334c <bSdmaDmaM2FtdiTransfer+0x100>
		// Transfer size is not a multiple of 8
		usiRoundedTransferSizeInBytes = ((alt_u16) (usiTransferSizeInBytes / 8) + 1) * 8;
80203330:	e0bffd0b 	ldhu	r2,-12(fp)
80203334:	1004d0fa 	srli	r2,r2,3
80203338:	10bfffcc 	andi	r2,r2,65535
8020333c:	10800044 	addi	r2,r2,1
80203340:	100490fa 	slli	r2,r2,3
80203344:	e0bffa0d 	sth	r2,-24(fp)
80203348:	00000206 	br	80203354 <bSdmaDmaM2FtdiTransfer+0x108>
	} else {
		usiRoundedTransferSizeInBytes = usiTransferSizeInBytes;
8020334c:	e0bffd0b 	ldhu	r2,-12(fp)
80203350:	e0bffa0d 	sth	r2,-24(fp)
	}

	// Verify if the base address is a multiple o 8 (8 bytes = 64b = size of memory access)
	if (uliSrcAddrLow % 8) {
80203354:	e0bff617 	ldw	r2,-40(fp)
80203358:	108001cc 	andi	r2,r2,7
8020335c:	10000226 	beq	r2,zero,80203368 <bSdmaDmaM2FtdiTransfer+0x11c>
		// Address is not a multiple of 8
		bAddressFlag = FALSE;
80203360:	e03ff815 	stw	zero,-32(fp)
80203364:	00000206 	br	80203370 <bSdmaDmaM2FtdiTransfer+0x124>
	} else {
		bAddressFlag = TRUE;
80203368:	00800044 	movi	r2,1
8020336c:	e0bff815 	stw	r2,-32(fp)
	}

	if ((bOperationFlag) && (bAddressFlag) && (usiRoundedTransferSizeInBytes <= 8192)) {
80203370:	e0bff917 	ldw	r2,-28(fp)
80203374:	10002f26 	beq	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>
80203378:	e0bff817 	ldw	r2,-32(fp)
8020337c:	10002d26 	beq	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>
80203380:	e0bffa0b 	ldhu	r2,-24(fp)
80203384:	10880068 	cmpgeui	r2,r2,8193
80203388:	10002a1e 	bne	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>
		if (pxDmaM2Dev != NULL) {
8020338c:	d0a01517 	ldw	r2,-32684(gp)
80203390:	10002826 	beq	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>

			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80203394:	00000206 	br	802033a0 <bSdmaDmaM2FtdiTransfer+0x154>
				alt_busy_sleep(1); /* delay 1us */
80203398:	01000044 	movi	r4,1
8020339c:	0216a040 	call	80216a04 <alt_busy_sleep>
	}

	if ((bOperationFlag) && (bAddressFlag) && (usiRoundedTransferSizeInBytes <= 8192)) {
		if (pxDmaM2Dev != NULL) {

			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
802033a0:	d0a01517 	ldw	r2,-32684(gp)
802033a4:	10800317 	ldw	r2,12(r2)
802033a8:	10800037 	ldwio	r2,0(r2)
802033ac:	1080010c 	andi	r2,r2,4
802033b0:	103ff91e 	bne	r2,zero,80203398 <__reset+0xfa1e3398>
				alt_busy_sleep(1); /* delay 1us */
			}
			/* Success = 0 */
			if ( 0 == iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
802033b4:	d2201517 	ldw	r8,-32684(gp)
802033b8:	e1bff617 	ldw	r6,-40(fp)
802033bc:	e1fff417 	ldw	r7,-48(fp)
802033c0:	e0bffa0b 	ldhu	r2,-24(fp)
802033c4:	e0fff717 	ldw	r3,-36(fp)
802033c8:	e13ff517 	ldw	r4,-44(fp)
802033cc:	01400044 	movi	r5,1
802033d0:	d9400815 	stw	r5,32(sp)
802033d4:	01400044 	movi	r5,1
802033d8:	d9400715 	stw	r5,28(sp)
802033dc:	01400044 	movi	r5,1
802033e0:	d9400615 	stw	r5,24(sp)
802033e4:	01400044 	movi	r5,1
802033e8:	d9400515 	stw	r5,20(sp)
802033ec:	01400044 	movi	r5,1
802033f0:	d9400415 	stw	r5,16(sp)
802033f4:	d9000315 	stw	r4,12(sp)
802033f8:	d8c00215 	stw	r3,8(sp)
802033fc:	e0fffb17 	ldw	r3,-20(fp)
80203400:	d8c00115 	stw	r3,4(sp)
80203404:	d8800015 	stw	r2,0(sp)
80203408:	800b883a 	mov	r5,r16
8020340c:	4009883a 	mov	r4,r8
80203410:	0204e1c0 	call	80204e1c <iMsgdmaConstructExtendedMmToMmDescriptor>
80203414:	1000071e 	bne	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>
					(alt_u32 *) uliDestAddrLow,
					usiRoundedTransferSizeInBytes, uliControlBits,
					(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
					1, 1, 1, 1, 1)) {
				/* Success = 0 */
				if ( 0 == iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
80203418:	d0a01517 	ldw	r2,-32684(gp)
8020341c:	800b883a 	mov	r5,r16
80203420:	1009883a 	mov	r4,r2
80203424:	0204f100 	call	80204f10 <iMsgdmaExtendedDescriptorSyncTransfer>
80203428:	1000021e 	bne	r2,zero,80203434 <bSdmaDmaM2FtdiTransfer+0x1e8>
						&xDmaExtendedDescriptor)) {
					bStatus = TRUE;
8020342c:	00800044 	movi	r2,1
80203430:	e0bff315 	stw	r2,-52(fp)
				}
			}
		}
	}
	return bStatus;
80203434:	e0bff317 	ldw	r2,-52(fp)
}
80203438:	e6ffff04 	addi	sp,fp,-4
8020343c:	dfc00217 	ldw	ra,8(sp)
80203440:	df000117 	ldw	fp,4(sp)
80203444:	dc000017 	ldw	r16,0(sp)
80203448:	dec00304 	addi	sp,sp,12
8020344c:	f800283a 	ret

80203450 <crc__CRC8U>:
 * \param value value to be added to CRC8
 *
 * \return unsigned char a new CRC8 considering the value
 */
unsigned char crc__CRC8U(unsigned char crc8, unsigned char value)
{
80203450:	defffd04 	addi	sp,sp,-12
80203454:	df000215 	stw	fp,8(sp)
80203458:	df000204 	addi	fp,sp,8
8020345c:	2007883a 	mov	r3,r4
80203460:	2805883a 	mov	r2,r5
80203464:	e0fffe05 	stb	r3,-8(fp)
80203468:	e0bfff05 	stb	r2,-4(fp)
	#ifdef pgm_read_byte
	return pgm_read_byte(crc8_table + (crc8 ^ value));
	#else
	return crc8_table[crc8 ^ value];
8020346c:	e0fffe03 	ldbu	r3,-8(fp)
80203470:	e0bfff03 	ldbu	r2,-4(fp)
80203474:	1884f03a 	xor	r2,r3,r2
80203478:	10c03fcc 	andi	r3,r2,255
8020347c:	00a008b4 	movhi	r2,32802
80203480:	10b2ac04 	addi	r2,r2,-13648
80203484:	10c5883a 	add	r2,r2,r3
80203488:	10800003 	ldbu	r2,0(r2)
	#endif
}
8020348c:	e037883a 	mov	sp,fp
80203490:	df000017 	ldw	fp,0(sp)
80203494:	dec00104 	addi	sp,sp,4
80203498:	f800283a 	ret

8020349c <crc__CRC8>:
 * \param length length of data
 *
 * \return unsigned char CRC8 for data
 */
unsigned char crc__CRC8(unsigned char const data[], unsigned long length)
{
8020349c:	defffa04 	addi	sp,sp,-24
802034a0:	dfc00515 	stw	ra,20(sp)
802034a4:	df000415 	stw	fp,16(sp)
802034a8:	df000404 	addi	fp,sp,16
802034ac:	e13ffe15 	stw	r4,-8(fp)
802034b0:	e17fff15 	stw	r5,-4(fp)
	unsigned char crc = CRC_START_8;
802034b4:	e03ffc05 	stb	zero,-16(fp)
	for (unsigned long a = 0; a < length; a++)
802034b8:	e03ffd15 	stw	zero,-12(fp)
802034bc:	00000c06 	br	802034f0 <crc__CRC8+0x54>
	{
		crc = crc__CRC8U(crc, data[a]);
802034c0:	e13ffc03 	ldbu	r4,-16(fp)
802034c4:	e0fffe17 	ldw	r3,-8(fp)
802034c8:	e0bffd17 	ldw	r2,-12(fp)
802034cc:	1885883a 	add	r2,r3,r2
802034d0:	10800003 	ldbu	r2,0(r2)
802034d4:	10803fcc 	andi	r2,r2,255
802034d8:	100b883a 	mov	r5,r2
802034dc:	02034500 	call	80203450 <crc__CRC8U>
802034e0:	e0bffc05 	stb	r2,-16(fp)
 * \return unsigned char CRC8 for data
 */
unsigned char crc__CRC8(unsigned char const data[], unsigned long length)
{
	unsigned char crc = CRC_START_8;
	for (unsigned long a = 0; a < length; a++)
802034e4:	e0bffd17 	ldw	r2,-12(fp)
802034e8:	10800044 	addi	r2,r2,1
802034ec:	e0bffd15 	stw	r2,-12(fp)
802034f0:	e0fffd17 	ldw	r3,-12(fp)
802034f4:	e0bfff17 	ldw	r2,-4(fp)
802034f8:	18bff136 	bltu	r3,r2,802034c0 <__reset+0xfa1e34c0>
	{
		crc = crc__CRC8U(crc, data[a]);
	}
	return crc;
802034fc:	e0bffc03 	ldbu	r2,-16(fp)
}
80203500:	e037883a 	mov	sp,fp
80203504:	dfc00117 	ldw	ra,4(sp)
80203508:	df000017 	ldw	fp,0(sp)
8020350c:	dec00204 	addi	sp,sp,8
80203510:	f800283a 	ret

80203514 <crc__CRC8KOOPU>:
 * \param value value to be added to CRC8/KOOP
 *
 * \return unsigned char a new CRC8/KOOP considering the value
 */
unsigned char crc__CRC8KOOPU(unsigned char crc8koop, unsigned char value)
{
80203514:	defffd04 	addi	sp,sp,-12
80203518:	df000215 	stw	fp,8(sp)
8020351c:	df000204 	addi	fp,sp,8
80203520:	2007883a 	mov	r3,r4
80203524:	2805883a 	mov	r2,r5
80203528:	e0fffe05 	stb	r3,-8(fp)
8020352c:	e0bfff05 	stb	r2,-4(fp)
	#ifdef pgm_read_byte
	return pgm_read_byte(crc8_koop_table + (crc8koop ^ value));
	#else
	return crc8_koop_table[crc8koop ^ value];
80203530:	e0fffe03 	ldbu	r3,-8(fp)
80203534:	e0bfff03 	ldbu	r2,-4(fp)
80203538:	1884f03a 	xor	r2,r3,r2
8020353c:	10c03fcc 	andi	r3,r2,255
80203540:	00a008b4 	movhi	r2,32802
80203544:	10b2ec04 	addi	r2,r2,-13392
80203548:	10c5883a 	add	r2,r2,r3
8020354c:	10800003 	ldbu	r2,0(r2)
	#endif
}
80203550:	e037883a 	mov	sp,fp
80203554:	df000017 	ldw	fp,0(sp)
80203558:	dec00104 	addi	sp,sp,4
8020355c:	f800283a 	ret

80203560 <crc__CRC8KOOP>:
 * \param length length of data
 *
 * \return unsigned char CRC8/KOOP for data
 */
unsigned char crc__CRC8KOOP(unsigned char const data[], unsigned long length)
{
80203560:	defffa04 	addi	sp,sp,-24
80203564:	dfc00515 	stw	ra,20(sp)
80203568:	df000415 	stw	fp,16(sp)
8020356c:	df000404 	addi	fp,sp,16
80203570:	e13ffe15 	stw	r4,-8(fp)
80203574:	e17fff15 	stw	r5,-4(fp)
	unsigned char crc = CRC_START_8_KOOP;
80203578:	e03ffc05 	stb	zero,-16(fp)
	for (unsigned long a = 0; a < length; a++)
8020357c:	e03ffd15 	stw	zero,-12(fp)
80203580:	00000c06 	br	802035b4 <crc__CRC8KOOP+0x54>
	{
		crc = crc__CRC8KOOPU(crc, data[a]);
80203584:	e13ffc03 	ldbu	r4,-16(fp)
80203588:	e0fffe17 	ldw	r3,-8(fp)
8020358c:	e0bffd17 	ldw	r2,-12(fp)
80203590:	1885883a 	add	r2,r3,r2
80203594:	10800003 	ldbu	r2,0(r2)
80203598:	10803fcc 	andi	r2,r2,255
8020359c:	100b883a 	mov	r5,r2
802035a0:	02035140 	call	80203514 <crc__CRC8KOOPU>
802035a4:	e0bffc05 	stb	r2,-16(fp)
 * \return unsigned char CRC8/KOOP for data
 */
unsigned char crc__CRC8KOOP(unsigned char const data[], unsigned long length)
{
	unsigned char crc = CRC_START_8_KOOP;
	for (unsigned long a = 0; a < length; a++)
802035a8:	e0bffd17 	ldw	r2,-12(fp)
802035ac:	10800044 	addi	r2,r2,1
802035b0:	e0bffd15 	stw	r2,-12(fp)
802035b4:	e0fffd17 	ldw	r3,-12(fp)
802035b8:	e0bfff17 	ldw	r2,-4(fp)
802035bc:	18bff136 	bltu	r3,r2,80203584 <__reset+0xfa1e3584>
	{
		crc = crc__CRC8KOOPU(crc, data[a]);
	}
	return crc;
802035c0:	e0bffc03 	ldbu	r2,-16(fp)
}
802035c4:	e037883a 	mov	sp,fp
802035c8:	dfc00117 	ldw	ra,4(sp)
802035cc:	df000017 	ldw	fp,0(sp)
802035d0:	dec00204 	addi	sp,sp,8
802035d4:	f800283a 	ret

802035d8 <crc__CRC16U>:
 * \param value value to be added to CRC16
 *
 * \return unsigned short a new CRC16 considering the value
 */
unsigned short crc__CRC16U(unsigned short crc16, unsigned char value)
{
802035d8:	defffd04 	addi	sp,sp,-12
802035dc:	df000215 	stw	fp,8(sp)
802035e0:	df000204 	addi	fp,sp,8
802035e4:	2007883a 	mov	r3,r4
802035e8:	2805883a 	mov	r2,r5
802035ec:	e0fffe0d 	sth	r3,-8(fp)
802035f0:	e0bfff05 	stb	r2,-4(fp)
	#ifdef pgm_read_word
	return (unsigned short) ( (crc16 >> 8) ^ pgm_read_word(crc16_table + ((crc16 ^ value) & 0x00FF)) );
	#else
	return (unsigned short) ( (crc16 >> 8) ^ crc16_table[(crc16 ^ value) & 0x00FF] );
802035f4:	e0bffe0b 	ldhu	r2,-8(fp)
802035f8:	1004d23a 	srli	r2,r2,8
802035fc:	1009883a 	mov	r4,r2
80203600:	e0fffe0b 	ldhu	r3,-8(fp)
80203604:	e0bfff03 	ldbu	r2,-4(fp)
80203608:	1884f03a 	xor	r2,r3,r2
8020360c:	10c03fcc 	andi	r3,r2,255
80203610:	00a008b4 	movhi	r2,32802
80203614:	10b32c04 	addi	r2,r2,-13136
80203618:	18c7883a 	add	r3,r3,r3
8020361c:	10c5883a 	add	r2,r2,r3
80203620:	1080000b 	ldhu	r2,0(r2)
80203624:	2084f03a 	xor	r2,r4,r2
	#endif
}
80203628:	e037883a 	mov	sp,fp
8020362c:	df000017 	ldw	fp,0(sp)
80203630:	dec00104 	addi	sp,sp,4
80203634:	f800283a 	ret

80203638 <crc__CRC16>:
 * \param length length of data
 *
 * \return unsigned short CRC16 for data
 */
unsigned short crc__CRC16(unsigned char const data[], unsigned long length)
{
80203638:	defffa04 	addi	sp,sp,-24
8020363c:	dfc00515 	stw	ra,20(sp)
80203640:	df000415 	stw	fp,16(sp)
80203644:	df000404 	addi	fp,sp,16
80203648:	e13ffe15 	stw	r4,-8(fp)
8020364c:	e17fff15 	stw	r5,-4(fp)
	unsigned short crc = CRC_START_16;
80203650:	e03ffc0d 	sth	zero,-16(fp)
	for (unsigned long a = 0; a < length; a++)
80203654:	e03ffd15 	stw	zero,-12(fp)
80203658:	00000c06 	br	8020368c <crc__CRC16+0x54>
	{
		crc = crc__CRC16U(crc, data[a]);
8020365c:	e13ffc0b 	ldhu	r4,-16(fp)
80203660:	e0fffe17 	ldw	r3,-8(fp)
80203664:	e0bffd17 	ldw	r2,-12(fp)
80203668:	1885883a 	add	r2,r3,r2
8020366c:	10800003 	ldbu	r2,0(r2)
80203670:	10803fcc 	andi	r2,r2,255
80203674:	100b883a 	mov	r5,r2
80203678:	02035d80 	call	802035d8 <crc__CRC16U>
8020367c:	e0bffc0d 	sth	r2,-16(fp)
 * \return unsigned short CRC16 for data
 */
unsigned short crc__CRC16(unsigned char const data[], unsigned long length)
{
	unsigned short crc = CRC_START_16;
	for (unsigned long a = 0; a < length; a++)
80203680:	e0bffd17 	ldw	r2,-12(fp)
80203684:	10800044 	addi	r2,r2,1
80203688:	e0bffd15 	stw	r2,-12(fp)
8020368c:	e0fffd17 	ldw	r3,-12(fp)
80203690:	e0bfff17 	ldw	r2,-4(fp)
80203694:	18bff136 	bltu	r3,r2,8020365c <__reset+0xfa1e365c>
	{
		crc = crc__CRC16U(crc, data[a]);
	}
	return crc;
80203698:	e0bffc0b 	ldhu	r2,-16(fp)
}
8020369c:	e037883a 	mov	sp,fp
802036a0:	dfc00117 	ldw	ra,4(sp)
802036a4:	df000017 	ldw	fp,0(sp)
802036a8:	dec00204 	addi	sp,sp,8
802036ac:	f800283a 	ret

802036b0 <crc__CRC16CCITTU>:
 * \param value value to be added to CRC16-CCITT
 *
 * \return unsigned short a new CRC16-CCITT considering the value
 */
unsigned short crc__CRC16CCITTU(unsigned short crc16ccitt, unsigned char value)
{
802036b0:	defffd04 	addi	sp,sp,-12
802036b4:	df000215 	stw	fp,8(sp)
802036b8:	df000204 	addi	fp,sp,8
802036bc:	2007883a 	mov	r3,r4
802036c0:	2805883a 	mov	r2,r5
802036c4:	e0fffe0d 	sth	r3,-8(fp)
802036c8:	e0bfff05 	stb	r2,-4(fp)
	#ifdef pgm_read_word
	return (unsigned short) ( ((crc16ccitt << 8) & 0xFF00) ^ pgm_read_word(crc16_ccitt_table + ((crc16ccitt >> 8) ^ value) & 0x00FF) );
	#else
	return (unsigned short) ( ((crc16ccitt << 8) & 0xFF00) ^ crc16_ccitt_table[((crc16ccitt >> 8) ^ value) & 0x00FF]);
802036cc:	e0bffe0b 	ldhu	r2,-8(fp)
802036d0:	1004923a 	slli	r2,r2,8
802036d4:	1007883a 	mov	r3,r2
802036d8:	00bfc004 	movi	r2,-256
802036dc:	1884703a 	and	r2,r3,r2
802036e0:	1009883a 	mov	r4,r2
802036e4:	e0bffe0b 	ldhu	r2,-8(fp)
802036e8:	1004d23a 	srli	r2,r2,8
802036ec:	10ffffcc 	andi	r3,r2,65535
802036f0:	e0bfff03 	ldbu	r2,-4(fp)
802036f4:	1884f03a 	xor	r2,r3,r2
802036f8:	10c03fcc 	andi	r3,r2,255
802036fc:	00a008b4 	movhi	r2,32802
80203700:	10b3ac04 	addi	r2,r2,-12624
80203704:	18c7883a 	add	r3,r3,r3
80203708:	10c5883a 	add	r2,r2,r3
8020370c:	1080000b 	ldhu	r2,0(r2)
80203710:	2084f03a 	xor	r2,r4,r2
	#endif
}
80203714:	e037883a 	mov	sp,fp
80203718:	df000017 	ldw	fp,0(sp)
8020371c:	dec00104 	addi	sp,sp,4
80203720:	f800283a 	ret

80203724 <crc__CRC16CCITT>:
 * \param length length of data
 *
 * \return unsigned short CRC16-CCITT for data
 */
unsigned short crc__CRC16CCITT(unsigned char const data[], unsigned long length)
{
80203724:	defffa04 	addi	sp,sp,-24
80203728:	dfc00515 	stw	ra,20(sp)
8020372c:	df000415 	stw	fp,16(sp)
80203730:	df000404 	addi	fp,sp,16
80203734:	e13ffe15 	stw	r4,-8(fp)
80203738:	e17fff15 	stw	r5,-4(fp)
	unsigned short crc = CRC_START_16_CCITT;
8020373c:	00bfffc4 	movi	r2,-1
80203740:	e0bffc0d 	sth	r2,-16(fp)
	for (unsigned long a = 0; a < length; a++)
80203744:	e03ffd15 	stw	zero,-12(fp)
80203748:	00000c06 	br	8020377c <crc__CRC16CCITT+0x58>
	{
		crc = crc__CRC16CCITTU(crc, data[a]);
8020374c:	e13ffc0b 	ldhu	r4,-16(fp)
80203750:	e0fffe17 	ldw	r3,-8(fp)
80203754:	e0bffd17 	ldw	r2,-12(fp)
80203758:	1885883a 	add	r2,r3,r2
8020375c:	10800003 	ldbu	r2,0(r2)
80203760:	10803fcc 	andi	r2,r2,255
80203764:	100b883a 	mov	r5,r2
80203768:	02036b00 	call	802036b0 <crc__CRC16CCITTU>
8020376c:	e0bffc0d 	sth	r2,-16(fp)
 * \return unsigned short CRC16-CCITT for data
 */
unsigned short crc__CRC16CCITT(unsigned char const data[], unsigned long length)
{
	unsigned short crc = CRC_START_16_CCITT;
	for (unsigned long a = 0; a < length; a++)
80203770:	e0bffd17 	ldw	r2,-12(fp)
80203774:	10800044 	addi	r2,r2,1
80203778:	e0bffd15 	stw	r2,-12(fp)
8020377c:	e0fffd17 	ldw	r3,-12(fp)
80203780:	e0bfff17 	ldw	r2,-4(fp)
80203784:	18bff136 	bltu	r3,r2,8020374c <__reset+0xfa1e374c>
	{
		crc = crc__CRC16CCITTU(crc, data[a]);
	}
	return crc;
80203788:	e0bffc0b 	ldhu	r2,-16(fp)
}
8020378c:	e037883a 	mov	sp,fp
80203790:	dfc00117 	ldw	ra,4(sp)
80203794:	df000017 	ldw	fp,0(sp)
80203798:	dec00204 	addi	sp,sp,8
8020379c:	f800283a 	ret

802037a0 <crc__CRC32U>:
 * \param value value to be added to CRC32
 *
 * \return unsigned long a new CRC32 considering the value
 */
unsigned long crc__CRC32U(unsigned long crc32, unsigned char value)
{
802037a0:	defffd04 	addi	sp,sp,-12
802037a4:	df000215 	stw	fp,8(sp)
802037a8:	df000204 	addi	fp,sp,8
802037ac:	e13ffe15 	stw	r4,-8(fp)
802037b0:	2805883a 	mov	r2,r5
802037b4:	e0bfff05 	stb	r2,-4(fp)
	#ifdef pgm_read_dword
	return (crc32 >> 8) ^ pgm_read_dword(crc32_table + ((crc32 ^ value) & 0x000000FF));
	#else
	return (crc32 >> 8) ^ crc32_table[(crc32 ^ value) & 0x000000FF];
802037b8:	e0bffe17 	ldw	r2,-8(fp)
802037bc:	1008d23a 	srli	r4,r2,8
802037c0:	e0ffff03 	ldbu	r3,-4(fp)
802037c4:	e0bffe17 	ldw	r2,-8(fp)
802037c8:	1884f03a 	xor	r2,r3,r2
802037cc:	10c03fcc 	andi	r3,r2,255
802037d0:	00a008b4 	movhi	r2,32802
802037d4:	10b42c04 	addi	r2,r2,-12112
802037d8:	18c7883a 	add	r3,r3,r3
802037dc:	18c7883a 	add	r3,r3,r3
802037e0:	10c5883a 	add	r2,r2,r3
802037e4:	10800017 	ldw	r2,0(r2)
802037e8:	2084f03a 	xor	r2,r4,r2
	#endif
}
802037ec:	e037883a 	mov	sp,fp
802037f0:	df000017 	ldw	fp,0(sp)
802037f4:	dec00104 	addi	sp,sp,4
802037f8:	f800283a 	ret

802037fc <crc__CRC32>:
 * \param length length of data
 *
 * \return unsigned long CRC32 for data
 */
unsigned long crc__CRC32(unsigned char const data[], unsigned long length)
{
802037fc:	defffa04 	addi	sp,sp,-24
80203800:	dfc00515 	stw	ra,20(sp)
80203804:	df000415 	stw	fp,16(sp)
80203808:	df000404 	addi	fp,sp,16
8020380c:	e13ffe15 	stw	r4,-8(fp)
80203810:	e17fff15 	stw	r5,-4(fp)
	unsigned long crc = CRC_START_32;
80203814:	00bfffc4 	movi	r2,-1
80203818:	e0bffc15 	stw	r2,-16(fp)
	for (unsigned long a = 0; a < length; a = a+4)
8020381c:	e03ffd15 	stw	zero,-12(fp)
80203820:	00002a06 	br	802038cc <crc__CRC32+0xd0>
	{
//		printf("CRC Hex: 0x%08lX \n", crc);
		crc = crc__CRC32U(crc, data[a+3]);
80203824:	e0bffd17 	ldw	r2,-12(fp)
80203828:	108000c4 	addi	r2,r2,3
8020382c:	e0fffe17 	ldw	r3,-8(fp)
80203830:	1885883a 	add	r2,r3,r2
80203834:	10800003 	ldbu	r2,0(r2)
80203838:	10803fcc 	andi	r2,r2,255
8020383c:	100b883a 	mov	r5,r2
80203840:	e13ffc17 	ldw	r4,-16(fp)
80203844:	02037a00 	call	802037a0 <crc__CRC32U>
80203848:	e0bffc15 	stw	r2,-16(fp)
		crc = crc__CRC32U(crc, data[a+2]);
8020384c:	e0bffd17 	ldw	r2,-12(fp)
80203850:	10800084 	addi	r2,r2,2
80203854:	e0fffe17 	ldw	r3,-8(fp)
80203858:	1885883a 	add	r2,r3,r2
8020385c:	10800003 	ldbu	r2,0(r2)
80203860:	10803fcc 	andi	r2,r2,255
80203864:	100b883a 	mov	r5,r2
80203868:	e13ffc17 	ldw	r4,-16(fp)
8020386c:	02037a00 	call	802037a0 <crc__CRC32U>
80203870:	e0bffc15 	stw	r2,-16(fp)
		crc = crc__CRC32U(crc, data[a+1]);
80203874:	e0bffd17 	ldw	r2,-12(fp)
80203878:	10800044 	addi	r2,r2,1
8020387c:	e0fffe17 	ldw	r3,-8(fp)
80203880:	1885883a 	add	r2,r3,r2
80203884:	10800003 	ldbu	r2,0(r2)
80203888:	10803fcc 	andi	r2,r2,255
8020388c:	100b883a 	mov	r5,r2
80203890:	e13ffc17 	ldw	r4,-16(fp)
80203894:	02037a00 	call	802037a0 <crc__CRC32U>
80203898:	e0bffc15 	stw	r2,-16(fp)
		crc = crc__CRC32U(crc, data[a+0]);
8020389c:	e0fffe17 	ldw	r3,-8(fp)
802038a0:	e0bffd17 	ldw	r2,-12(fp)
802038a4:	1885883a 	add	r2,r3,r2
802038a8:	10800003 	ldbu	r2,0(r2)
802038ac:	10803fcc 	andi	r2,r2,255
802038b0:	100b883a 	mov	r5,r2
802038b4:	e13ffc17 	ldw	r4,-16(fp)
802038b8:	02037a00 	call	802037a0 <crc__CRC32U>
802038bc:	e0bffc15 	stw	r2,-16(fp)
 * \return unsigned long CRC32 for data
 */
unsigned long crc__CRC32(unsigned char const data[], unsigned long length)
{
	unsigned long crc = CRC_START_32;
	for (unsigned long a = 0; a < length; a = a+4)
802038c0:	e0bffd17 	ldw	r2,-12(fp)
802038c4:	10800104 	addi	r2,r2,4
802038c8:	e0bffd15 	stw	r2,-12(fp)
802038cc:	e0fffd17 	ldw	r3,-12(fp)
802038d0:	e0bfff17 	ldw	r2,-4(fp)
802038d4:	18bfd336 	bltu	r3,r2,80203824 <__reset+0xfa1e3824>
		crc = crc__CRC32U(crc, data[a+3]);
		crc = crc__CRC32U(crc, data[a+2]);
		crc = crc__CRC32U(crc, data[a+1]);
		crc = crc__CRC32U(crc, data[a+0]);
	}
	return (crc ^ 0xFFFFFFFF);
802038d8:	e0bffc17 	ldw	r2,-16(fp)
802038dc:	0084303a 	nor	r2,zero,r2
//	return (crc);
}
802038e0:	e037883a 	mov	sp,fp
802038e4:	dfc00117 	ldw	ra,4(sp)
802038e8:	df000017 	ldw	fp,0(sp)
802038ec:	dec00204 	addi	sp,sp,8
802038f0:	f800283a 	ret

802038f4 <vFTDIStop>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vFTDIStop( void ){
802038f4:	defffe04 	addi	sp,sp,-8
802038f8:	df000115 	stw	fp,4(sp)
802038fc:	df000104 	addi	fp,sp,4
	TFtdiModule *pxFtdiModule = (TFtdiModule *) FTDI_MODULE_BASE_ADDR;
80203900:	00a00034 	movhi	r2,32768
80203904:	e0bfff15 	stw	r2,-4(fp)
	pxFtdiModule->xFtdiFtdiModuleControl.bModuleStop = TRUE;
80203908:	e0bfff17 	ldw	r2,-4(fp)
8020390c:	00c00044 	movi	r3,1
80203910:	10c01115 	stw	r3,68(r2)
}
80203914:	0001883a 	nop
80203918:	e037883a 	mov	sp,fp
8020391c:	df000017 	ldw	fp,0(sp)
80203920:	dec00104 	addi	sp,sp,4
80203924:	f800283a 	ret

80203928 <vFTDIStart>:

void vFTDIStart( void ){
80203928:	defffe04 	addi	sp,sp,-8
8020392c:	df000115 	stw	fp,4(sp)
80203930:	df000104 	addi	fp,sp,4
	TFtdiModule *pxFtdiModule = (TFtdiModule *) FTDI_MODULE_BASE_ADDR;
80203934:	00a00034 	movhi	r2,32768
80203938:	e0bfff15 	stw	r2,-4(fp)
	pxFtdiModule->xFtdiFtdiModuleControl.bModuleStart = TRUE;
8020393c:	e0bfff17 	ldw	r2,-4(fp)
80203940:	00c00044 	movi	r3,1
80203944:	10c01015 	stw	r3,64(r2)
}
80203948:	0001883a 	nop
8020394c:	e037883a 	mov	sp,fp
80203950:	df000017 	ldw	fp,0(sp)
80203954:	dec00104 	addi	sp,sp,4
80203958:	f800283a 	ret

8020395c <vFTDIClear>:

void vFTDIClear( void ){
8020395c:	defffe04 	addi	sp,sp,-8
80203960:	df000115 	stw	fp,4(sp)
80203964:	df000104 	addi	fp,sp,4
	TFtdiModule *pxFtdiModule = (TFtdiModule *) FTDI_MODULE_BASE_ADDR;
80203968:	00a00034 	movhi	r2,32768
8020396c:	e0bfff15 	stw	r2,-4(fp)
	pxFtdiModule->xFtdiFtdiModuleControl.bModuleClear = TRUE;
80203970:	e0bfff17 	ldw	r2,-4(fp)
80203974:	00c00044 	movi	r3,1
80203978:	10c01215 	stw	r3,72(r2)
}
8020397c:	0001883a 	nop
80203980:	e037883a 	mov	sp,fp
80203984:	df000017 	ldw	fp,0(sp)
80203988:	dec00104 	addi	sp,sp,4
8020398c:	f800283a 	ret

80203990 <vFTDIAbort>:

void vFTDIAbort( void ){
80203990:	defffe04 	addi	sp,sp,-8
80203994:	df000115 	stw	fp,4(sp)
80203998:	df000104 	addi	fp,sp,4
	TFtdiModule *pxFtdiModule = (TFtdiModule *) FTDI_MODULE_BASE_ADDR;
8020399c:	00a00034 	movhi	r2,32768
802039a0:	e0bfff15 	stw	r2,-4(fp)
	pxFtdiModule->xFtdiHalfCcdReqControl.bAbortHalfCcdReq = TRUE;
802039a4:	e0bfff17 	ldw	r2,-4(fp)
802039a8:	00c00044 	movi	r3,1
802039ac:	10c01815 	stw	r3,96(r2)
}
802039b0:	0001883a 	nop
802039b4:	e037883a 	mov	sp,fp
802039b8:	df000017 	ldw	fp,0(sp)
802039bc:	dec00104 	addi	sp,sp,4
802039c0:	f800283a 	ret

802039c4 <ucFTDIGetError>:

alt_u8 ucFTDIGetError( void ){
802039c4:	defffd04 	addi	sp,sp,-12
802039c8:	df000215 	stw	fp,8(sp)
802039cc:	df000204 	addi	fp,sp,8
	alt_u8 ucErrorCode = 0;
802039d0:	e03ffe05 	stb	zero,-8(fp)

	TFtdiModule *pxFtdiModule = (TFtdiModule *) FTDI_MODULE_BASE_ADDR;
802039d4:	00a00034 	movhi	r2,32768
802039d8:	e0bfff15 	stw	r2,-4(fp)
	ucErrorCode = (alt_u8)(pxFtdiModule->xFtdiRxCommError.usiRxCommErrCode);
802039dc:	e0bfff17 	ldw	r2,-4(fp)
802039e0:	10803a0b 	ldhu	r2,232(r2)
802039e4:	e0bffe05 	stb	r2,-8(fp)

	return ucErrorCode;
802039e8:	e0bffe03 	ldbu	r2,-8(fp)
}
802039ec:	e037883a 	mov	sp,fp
802039f0:	df000017 	ldw	fp,0(sp)
802039f4:	dec00104 	addi	sp,sp,4
802039f8:	f800283a 	ret

802039fc <uliFTDInDataLeftInBuffer>:

alt_u32 uliFTDInDataLeftInBuffer( void ){
802039fc:	defffd04 	addi	sp,sp,-12
80203a00:	df000215 	stw	fp,8(sp)
80203a04:	df000204 	addi	fp,sp,8
	alt_u32 uliBufferUsedBytes = 0;
80203a08:	e03ffe15 	stw	zero,-8(fp)

	TFtdiModule *pxFtdiModule = (TFtdiModule *) FTDI_MODULE_BASE_ADDR;
80203a0c:	00a00034 	movhi	r2,32768
80203a10:	e0bfff15 	stw	r2,-4(fp)
	uliBufferUsedBytes = pxFtdiModule->xFtdiRxBufferStatus.usiRxDbuffUsedBytes;
80203a14:	e0bfff17 	ldw	r2,-4(fp)
80203a18:	10802b0b 	ldhu	r2,172(r2)
80203a1c:	10bfffcc 	andi	r2,r2,65535
80203a20:	e0bffe15 	stw	r2,-8(fp)

	return uliBufferUsedBytes;
80203a24:	e0bffe17 	ldw	r2,-8(fp)
}
80203a28:	e037883a 	mov	sp,fp
80203a2c:	df000017 	ldw	fp,0(sp)
80203a30:	dec00104 	addi	sp,sp,4
80203a34:	f800283a 	ret

80203a38 <bFTDIRequestFullImage>:

bool bFTDIRequestFullImage( alt_u8 ucFee, alt_u8 ucCCD, alt_u8 ucSide, alt_u16 usiEP, alt_u16 usiHalfWidth, alt_u16 usiHeight ){
80203a38:	defff704 	addi	sp,sp,-36
80203a3c:	df000815 	stw	fp,32(sp)
80203a40:	df000804 	addi	fp,sp,32
80203a44:	2013883a 	mov	r9,r4
80203a48:	2811883a 	mov	r8,r5
80203a4c:	300b883a 	mov	r5,r6
80203a50:	3809883a 	mov	r4,r7
80203a54:	e0c00117 	ldw	r3,4(fp)
80203a58:	e0800217 	ldw	r2,8(fp)
80203a5c:	e27ffa05 	stb	r9,-24(fp)
80203a60:	e23ffb05 	stb	r8,-20(fp)
80203a64:	e17ffc05 	stb	r5,-16(fp)
80203a68:	e13ffd0d 	sth	r4,-12(fp)
80203a6c:	e0fffe0d 	sth	r3,-8(fp)
80203a70:	e0bfff0d 	sth	r2,-4(fp)
	bool bStatus = FALSE;
80203a74:	e03ff815 	stw	zero,-32(fp)

	TFtdiModule *pxFtdiModule = (TFtdiModule *) FTDI_MODULE_BASE_ADDR;
80203a78:	00a00034 	movhi	r2,32768
80203a7c:	e0bff915 	stw	r2,-28(fp)

	if ((ucFee < 6) && (ucCCD < 4) && (ucSide < 2) && (usiHalfWidth <= 4540 ) && (usiHeight <= 2295)) {
80203a80:	e0bffa03 	ldbu	r2,-24(fp)
80203a84:	108001a8 	cmpgeui	r2,r2,6
80203a88:	1000231e 	bne	r2,zero,80203b18 <bFTDIRequestFullImage+0xe0>
80203a8c:	e0bffb03 	ldbu	r2,-20(fp)
80203a90:	10800128 	cmpgeui	r2,r2,4
80203a94:	1000201e 	bne	r2,zero,80203b18 <bFTDIRequestFullImage+0xe0>
80203a98:	e0bffc03 	ldbu	r2,-16(fp)
80203a9c:	108000a8 	cmpgeui	r2,r2,2
80203aa0:	10001d1e 	bne	r2,zero,80203b18 <bFTDIRequestFullImage+0xe0>
80203aa4:	e0bffe0b 	ldhu	r2,-8(fp)
80203aa8:	10846f68 	cmpgeui	r2,r2,4541
80203aac:	10001a1e 	bne	r2,zero,80203b18 <bFTDIRequestFullImage+0xe0>
80203ab0:	e0bfff0b 	ldhu	r2,-4(fp)
80203ab4:	10823e28 	cmpgeui	r2,r2,2296
80203ab8:	1000171e 	bne	r2,zero,80203b18 <bFTDIRequestFullImage+0xe0>

		pxFtdiModule->xFtdiHalfCcdReqControl.ucHalfCcdFeeNumber = ucFee;
80203abc:	e0bff917 	ldw	r2,-28(fp)
80203ac0:	e0fffa03 	ldbu	r3,-24(fp)
80203ac4:	10c01485 	stb	r3,82(r2)
		pxFtdiModule->xFtdiHalfCcdReqControl.ucHalfCcdCcdNumber = ucCCD;
80203ac8:	e0bff917 	ldw	r2,-28(fp)
80203acc:	e0fffb03 	ldbu	r3,-20(fp)
80203ad0:	10c014c5 	stb	r3,83(r2)
		pxFtdiModule->xFtdiHalfCcdReqControl.ucHalfCcdCcdSide = ucSide;
80203ad4:	e0bff917 	ldw	r2,-28(fp)
80203ad8:	e0fffc03 	ldbu	r3,-16(fp)
80203adc:	10c01505 	stb	r3,84(r2)
		pxFtdiModule->xFtdiHalfCcdReqControl.usiHalfCcdExpNumber = usiEP;
80203ae0:	e0bff917 	ldw	r2,-28(fp)
80203ae4:	e0fffd0b 	ldhu	r3,-12(fp)
80203ae8:	10c0168d 	sth	r3,90(r2)
		pxFtdiModule->xFtdiHalfCcdReqControl.usiHalfCcdCcdWidth = usiHalfWidth;
80203aec:	e0bff917 	ldw	r2,-28(fp)
80203af0:	e0fffe0b 	ldhu	r3,-8(fp)
80203af4:	10c0160d 	sth	r3,88(r2)
		pxFtdiModule->xFtdiHalfCcdReqControl.usiHalfCcdCcdHeight = usiHeight;
80203af8:	e0bff917 	ldw	r2,-28(fp)
80203afc:	e0ffff0b 	ldhu	r3,-4(fp)
80203b00:	10c0158d 	sth	r3,86(r2)

		pxFtdiModule->xFtdiHalfCcdReqControl.bRequestHalfCcd = TRUE;
80203b04:	e0bff917 	ldw	r2,-28(fp)
80203b08:	00c00044 	movi	r3,1
80203b0c:	10c01715 	stw	r3,92(r2)

		bStatus = TRUE;
80203b10:	00800044 	movi	r2,1
80203b14:	e0bff815 	stw	r2,-32(fp)
	}

	return bStatus;
80203b18:	e0bff817 	ldw	r2,-32(fp)
}
80203b1c:	e037883a 	mov	sp,fp
80203b20:	df000017 	ldw	fp,0(sp)
80203b24:	dec00104 	addi	sp,sp,4
80203b28:	f800283a 	ret

80203b2c <vFTDIResetFullImage>:

void vFTDIResetFullImage( void ){
80203b2c:	defffe04 	addi	sp,sp,-8
80203b30:	df000115 	stw	fp,4(sp)
80203b34:	df000104 	addi	fp,sp,4
	TFtdiModule *pxFtdiModule = (TFtdiModule *) FTDI_MODULE_BASE_ADDR;
80203b38:	00a00034 	movhi	r2,32768
80203b3c:	e0bfff15 	stw	r2,-4(fp)
	pxFtdiModule->xFtdiHalfCcdReqControl.bRstHalfCcdController = TRUE;
80203b40:	e0bfff17 	ldw	r2,-4(fp)
80203b44:	00c00044 	movi	r3,1
80203b48:	10c01915 	stw	r3,100(r2)
}
80203b4c:	0001883a 	nop
80203b50:	e037883a 	mov	sp,fp
80203b54:	df000017 	ldw	fp,0(sp)
80203b58:	dec00104 	addi	sp,sp,4
80203b5c:	f800283a 	ret

80203b60 <vFTDIRxBufferIRQHandler>:

void vFTDIRxBufferIRQHandler(void* pvContext) {
80203b60:	defffd04 	addi	sp,sp,-12
80203b64:	df000215 	stw	fp,8(sp)
80203b68:	df000204 	addi	fp,sp,8
80203b6c:	e13fff15 	stw	r4,-4(fp)
	// Use context value according to your app logic...
	//*viRxBuffHoldContext = ...;
	// if (*viRxBuffHoldContext == '0') {}...
	// App logic sequence...

	TFtdiModule *pxFtdiModule = (TFtdiModule *) FTDI_MODULE_BASE_ADDR;
80203b70:	00a00034 	movhi	r2,32768
80203b74:	e0bffe15 	stw	r2,-8(fp)

	/* Rx Buffer 0 Readable Flag */
	if (pxFtdiModule->xFtdiRxIrqFlag.bRxBuff0RdableIrqFlag) {
80203b78:	e0bffe17 	ldw	r2,-8(fp)
80203b7c:	10800617 	ldw	r2,24(r2)
80203b80:	10000326 	beq	r2,zero,80203b90 <vFTDIRxBufferIRQHandler+0x30>
		pxFtdiModule->xFtdiRxIrqFlagClr.bRxBuff0RdableIrqFlagClr = TRUE;
80203b84:	e0bffe17 	ldw	r2,-8(fp)
80203b88:	00c00044 	movi	r3,1
80203b8c:	10c00b15 	stw	r3,44(r2)


	}

	/* Rx Buffer 1 Readable Flag */
	if (pxFtdiModule->xFtdiRxIrqFlag.bRxBuff1RdableIrqFlag) {
80203b90:	e0bffe17 	ldw	r2,-8(fp)
80203b94:	10800717 	ldw	r2,28(r2)
80203b98:	10000326 	beq	r2,zero,80203ba8 <vFTDIRxBufferIRQHandler+0x48>
		pxFtdiModule->xFtdiRxIrqFlagClr.bRxBuff1RdableIrqFlagClr = TRUE;
80203b9c:	e0bffe17 	ldw	r2,-8(fp)
80203ba0:	00c00044 	movi	r3,1
80203ba4:	10c00c15 	stw	r3,48(r2)


	}

	/* Rx Buffer Last Readable Flag */
	if (pxFtdiModule->xFtdiRxIrqFlag.bRxBuffLastRdableIrqFlag) {
80203ba8:	e0bffe17 	ldw	r2,-8(fp)
80203bac:	10800817 	ldw	r2,32(r2)
80203bb0:	10000326 	beq	r2,zero,80203bc0 <vFTDIRxBufferIRQHandler+0x60>
		pxFtdiModule->xFtdiRxIrqFlagClr.bRxBuffLastRdableIrqFlagClr = TRUE;
80203bb4:	e0bffe17 	ldw	r2,-8(fp)
80203bb8:	00c00044 	movi	r3,1
80203bbc:	10c00d15 	stw	r3,52(r2)


	}

	/* Rx Buffer Last Empty Flag */
	if (pxFtdiModule->xFtdiRxIrqFlag.bRxBuffLastEmptyIrqFlag) {
80203bc0:	e0bffe17 	ldw	r2,-8(fp)
80203bc4:	10800917 	ldw	r2,36(r2)
80203bc8:	10000326 	beq	r2,zero,80203bd8 <vFTDIRxBufferIRQHandler+0x78>
		pxFtdiModule->xFtdiRxIrqFlagClr.bRxBuffLastEmptyIrqFlagClr = TRUE;
80203bcc:	e0bffe17 	ldw	r2,-8(fp)
80203bd0:	00c00044 	movi	r3,1
80203bd4:	10c00e15 	stw	r3,56(r2)


	}

	/* Rx Communication Error Flag */
	if (pxFtdiModule->xFtdiRxIrqFlag.bRxCommErrIrqFlag) {
80203bd8:	e0bffe17 	ldw	r2,-8(fp)
80203bdc:	10800a17 	ldw	r2,40(r2)
80203be0:	10000326 	beq	r2,zero,80203bf0 <vFTDIRxBufferIRQHandler+0x90>
		pxFtdiModule->xFtdiRxIrqFlagClr.bRxCommErrIrqFlagClr = TRUE;
80203be4:	e0bffe17 	ldw	r2,-8(fp)
80203be8:	00c00044 	movi	r3,1
80203bec:	10c00f15 	stw	r3,60(r2)
		/* Rx Communication Error flag treatment */


	}

}
80203bf0:	0001883a 	nop
80203bf4:	e037883a 	mov	sp,fp
80203bf8:	df000017 	ldw	fp,0(sp)
80203bfc:	dec00104 	addi	sp,sp,4
80203c00:	f800283a 	ret

80203c04 <vFTDIIrqRxBuffInit>:

void vFTDIIrqRxBuffInit(void) {
80203c04:	defffd04 	addi	sp,sp,-12
80203c08:	dfc00215 	stw	ra,8(sp)
80203c0c:	df000115 	stw	fp,4(sp)
80203c10:	df000104 	addi	fp,sp,4
	void* pvHoldContext;

	// Recast the hold_context pointer to match the alt_irq_register() function
	// prototype.
	pvHoldContext = (void*) &viRxBuffHoldContext;
80203c14:	d0a01904 	addi	r2,gp,-32668
80203c18:	e0bfff15 	stw	r2,-4(fp)
	// Register the interrupt handler
	alt_irq_register(FTDI_RX_BUFFER_IRQ, pvHoldContext, vFTDIRxBufferIRQHandler);
80203c1c:	01a00834 	movhi	r6,32800
80203c20:	318ed804 	addi	r6,r6,15200
80203c24:	e17fff17 	ldw	r5,-4(fp)
80203c28:	010002c4 	movi	r4,11
80203c2c:	0216d700 	call	80216d70 <alt_irq_register>

}
80203c30:	0001883a 	nop
80203c34:	e037883a 	mov	sp,fp
80203c38:	dfc00117 	ldw	ra,4(sp)
80203c3c:	df000017 	ldw	fp,0(sp)
80203c40:	dec00204 	addi	sp,sp,8
80203c44:	f800283a 	ret

80203c48 <vFTDIIrqGlobalEn>:

void vFTDIIrqGlobalEn(bool bEnable){
80203c48:	defffd04 	addi	sp,sp,-12
80203c4c:	df000215 	stw	fp,8(sp)
80203c50:	df000204 	addi	fp,sp,8
80203c54:	e13fff15 	stw	r4,-4(fp)
	TFtdiModule *pxFtdiModule = (TFtdiModule *) FTDI_MODULE_BASE_ADDR;
80203c58:	00a00034 	movhi	r2,32768
80203c5c:	e0bffe15 	stw	r2,-8(fp)
	pxFtdiModule->xFtdiFtdiIrqControl.bFtdiGlobalIrqEn = bEnable;
80203c60:	e0bffe17 	ldw	r2,-8(fp)
80203c64:	e0ffff17 	ldw	r3,-4(fp)
80203c68:	10c00015 	stw	r3,0(r2)
}
80203c6c:	0001883a 	nop
80203c70:	e037883a 	mov	sp,fp
80203c74:	df000017 	ldw	fp,0(sp)
80203c78:	dec00104 	addi	sp,sp,4
80203c7c:	f800283a 	ret

80203c80 <vFTDIIrqRxBuff0RdableEn>:

void vFTDIIrqRxBuff0RdableEn(bool bEnable){
80203c80:	defffd04 	addi	sp,sp,-12
80203c84:	df000215 	stw	fp,8(sp)
80203c88:	df000204 	addi	fp,sp,8
80203c8c:	e13fff15 	stw	r4,-4(fp)
	TFtdiModule *pxFtdiModule = (TFtdiModule *) FTDI_MODULE_BASE_ADDR;
80203c90:	00a00034 	movhi	r2,32768
80203c94:	e0bffe15 	stw	r2,-8(fp)
	pxFtdiModule->xFtdiRxIrqControl.bRxBuff0RdableIrqEn = bEnable;
80203c98:	e0bffe17 	ldw	r2,-8(fp)
80203c9c:	e0ffff17 	ldw	r3,-4(fp)
80203ca0:	10c00115 	stw	r3,4(r2)
}
80203ca4:	0001883a 	nop
80203ca8:	e037883a 	mov	sp,fp
80203cac:	df000017 	ldw	fp,0(sp)
80203cb0:	dec00104 	addi	sp,sp,4
80203cb4:	f800283a 	ret

80203cb8 <vFTDIIrqRxBuff1RdableEn>:

void vFTDIIrqRxBuff1RdableEn(bool bEnable){
80203cb8:	defffd04 	addi	sp,sp,-12
80203cbc:	df000215 	stw	fp,8(sp)
80203cc0:	df000204 	addi	fp,sp,8
80203cc4:	e13fff15 	stw	r4,-4(fp)
	TFtdiModule *pxFtdiModule = (TFtdiModule *) FTDI_MODULE_BASE_ADDR;
80203cc8:	00a00034 	movhi	r2,32768
80203ccc:	e0bffe15 	stw	r2,-8(fp)
	pxFtdiModule->xFtdiRxIrqControl.bRxBuff1RdableIrqEn = bEnable;
80203cd0:	e0bffe17 	ldw	r2,-8(fp)
80203cd4:	e0ffff17 	ldw	r3,-4(fp)
80203cd8:	10c00215 	stw	r3,8(r2)
}
80203cdc:	0001883a 	nop
80203ce0:	e037883a 	mov	sp,fp
80203ce4:	df000017 	ldw	fp,0(sp)
80203ce8:	dec00104 	addi	sp,sp,4
80203cec:	f800283a 	ret

80203cf0 <vFTDIIrqRxBuffLastRdableEn>:

void vFTDIIrqRxBuffLastRdableEn(bool bEnable){
80203cf0:	defffd04 	addi	sp,sp,-12
80203cf4:	df000215 	stw	fp,8(sp)
80203cf8:	df000204 	addi	fp,sp,8
80203cfc:	e13fff15 	stw	r4,-4(fp)
	TFtdiModule *pxFtdiModule = (TFtdiModule *) FTDI_MODULE_BASE_ADDR;
80203d00:	00a00034 	movhi	r2,32768
80203d04:	e0bffe15 	stw	r2,-8(fp)
	pxFtdiModule->xFtdiRxIrqControl.bRxBuffLastRdableIrqEn = bEnable;
80203d08:	e0bffe17 	ldw	r2,-8(fp)
80203d0c:	e0ffff17 	ldw	r3,-4(fp)
80203d10:	10c00315 	stw	r3,12(r2)
}
80203d14:	0001883a 	nop
80203d18:	e037883a 	mov	sp,fp
80203d1c:	df000017 	ldw	fp,0(sp)
80203d20:	dec00104 	addi	sp,sp,4
80203d24:	f800283a 	ret

80203d28 <vFTDIIrqRxBuffLastEmptyEn>:

void vFTDIIrqRxBuffLastEmptyEn(bool bEnable){
80203d28:	defffd04 	addi	sp,sp,-12
80203d2c:	df000215 	stw	fp,8(sp)
80203d30:	df000204 	addi	fp,sp,8
80203d34:	e13fff15 	stw	r4,-4(fp)
	TFtdiModule *pxFtdiModule = (TFtdiModule *) FTDI_MODULE_BASE_ADDR;
80203d38:	00a00034 	movhi	r2,32768
80203d3c:	e0bffe15 	stw	r2,-8(fp)
	pxFtdiModule->xFtdiRxIrqControl.bRxBuffLastEmptyIrqEn = bEnable;
80203d40:	e0bffe17 	ldw	r2,-8(fp)
80203d44:	e0ffff17 	ldw	r3,-4(fp)
80203d48:	10c00415 	stw	r3,16(r2)
}
80203d4c:	0001883a 	nop
80203d50:	e037883a 	mov	sp,fp
80203d54:	df000017 	ldw	fp,0(sp)
80203d58:	dec00104 	addi	sp,sp,4
80203d5c:	f800283a 	ret

80203d60 <vFTDIIrqRxCommErrEn>:

void vFTDIIrqRxCommErrEn(bool bEnable){
80203d60:	defffd04 	addi	sp,sp,-12
80203d64:	df000215 	stw	fp,8(sp)
80203d68:	df000204 	addi	fp,sp,8
80203d6c:	e13fff15 	stw	r4,-4(fp)
	TFtdiModule *pxFtdiModule = (TFtdiModule *) FTDI_MODULE_BASE_ADDR;
80203d70:	00a00034 	movhi	r2,32768
80203d74:	e0bffe15 	stw	r2,-8(fp)
	pxFtdiModule->xFtdiRxIrqControl.bRxCommErrIrqEn = bEnable;
80203d78:	e0bffe17 	ldw	r2,-8(fp)
80203d7c:	e0ffff17 	ldw	r3,-4(fp)
80203d80:	10c00515 	stw	r3,20(r2)
}
80203d84:	0001883a 	nop
80203d88:	e037883a 	mov	sp,fp
80203d8c:	df000017 	ldw	fp,0(sp)
80203d90:	dec00104 	addi	sp,sp,4
80203d94:	f800283a 	ret

80203d98 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
80203d98:	defffa04 	addi	sp,sp,-24
80203d9c:	dfc00515 	stw	ra,20(sp)
80203da0:	df000415 	stw	fp,16(sp)
80203da4:	df000404 	addi	fp,sp,16
80203da8:	e13ffd15 	stw	r4,-12(fp)
80203dac:	e17ffe15 	stw	r5,-8(fp)
80203db0:	3005883a 	mov	r2,r6
80203db4:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
80203db8:	00800044 	movi	r2,1
80203dbc:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
80203dc0:	e17ffe17 	ldw	r5,-8(fp)
80203dc4:	e13ffd17 	ldw	r4,-12(fp)
80203dc8:	02041480 	call	80204148 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
80203dcc:	e0bfff03 	ldbu	r2,-4(fp)
80203dd0:	10803fcc 	andi	r2,r2,255
80203dd4:	100d883a 	mov	r6,r2
80203dd8:	e17ffe17 	ldw	r5,-8(fp)
80203ddc:	e13ffd17 	ldw	r4,-12(fp)
80203de0:	020424c0 	call	8020424c <i2c_write>
80203de4:	1000011e 	bne	r2,zero,80203dec <I2C_TestAdress+0x54>
        bSuccess = FALSE;
80203de8:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
80203dec:	e17ffe17 	ldw	r5,-8(fp)
80203df0:	e13ffd17 	ldw	r4,-12(fp)
80203df4:	02041d40 	call	802041d4 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
80203df8:	0106d604 	movi	r4,7000
80203dfc:	02175940 	call	80217594 <usleep>
    
    return bSuccess;
80203e00:	e0bffc17 	ldw	r2,-16(fp)

}
80203e04:	e037883a 	mov	sp,fp
80203e08:	dfc00117 	ldw	ra,4(sp)
80203e0c:	df000017 	ldw	fp,0(sp)
80203e10:	dec00204 	addi	sp,sp,8
80203e14:	f800283a 	ret

80203e18 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
80203e18:	defff804 	addi	sp,sp,-32
80203e1c:	dfc00715 	stw	ra,28(sp)
80203e20:	df000615 	stw	fp,24(sp)
80203e24:	df000604 	addi	fp,sp,24
80203e28:	e13ffb15 	stw	r4,-20(fp)
80203e2c:	e17ffc15 	stw	r5,-16(fp)
80203e30:	3009883a 	mov	r4,r6
80203e34:	3807883a 	mov	r3,r7
80203e38:	e0800217 	ldw	r2,8(fp)
80203e3c:	e13ffd05 	stb	r4,-12(fp)
80203e40:	e0fffe05 	stb	r3,-8(fp)
80203e44:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
80203e48:	00800044 	movi	r2,1
80203e4c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
80203e50:	e17ffc17 	ldw	r5,-16(fp)
80203e54:	e13ffb17 	ldw	r4,-20(fp)
80203e58:	02041480 	call	80204148 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
80203e5c:	e0bffd03 	ldbu	r2,-12(fp)
80203e60:	10803fcc 	andi	r2,r2,255
80203e64:	100d883a 	mov	r6,r2
80203e68:	e17ffc17 	ldw	r5,-16(fp)
80203e6c:	e13ffb17 	ldw	r4,-20(fp)
80203e70:	020424c0 	call	8020424c <i2c_write>
80203e74:	1000011e 	bne	r2,zero,80203e7c <I2C_Write+0x64>
        bSuccess = FALSE;
80203e78:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
80203e7c:	e0bffa17 	ldw	r2,-24(fp)
80203e80:	10000726 	beq	r2,zero,80203ea0 <I2C_Write+0x88>
80203e84:	e0bffe03 	ldbu	r2,-8(fp)
80203e88:	100d883a 	mov	r6,r2
80203e8c:	e17ffc17 	ldw	r5,-16(fp)
80203e90:	e13ffb17 	ldw	r4,-20(fp)
80203e94:	020424c0 	call	8020424c <i2c_write>
80203e98:	1000011e 	bne	r2,zero,80203ea0 <I2C_Write+0x88>
        bSuccess = FALSE;
80203e9c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
80203ea0:	e0bffa17 	ldw	r2,-24(fp)
80203ea4:	10000726 	beq	r2,zero,80203ec4 <I2C_Write+0xac>
80203ea8:	e0bfff03 	ldbu	r2,-4(fp)
80203eac:	100d883a 	mov	r6,r2
80203eb0:	e17ffc17 	ldw	r5,-16(fp)
80203eb4:	e13ffb17 	ldw	r4,-20(fp)
80203eb8:	020424c0 	call	8020424c <i2c_write>
80203ebc:	1000011e 	bne	r2,zero,80203ec4 <I2C_Write+0xac>
        bSuccess = FALSE;
80203ec0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
80203ec4:	e17ffc17 	ldw	r5,-16(fp)
80203ec8:	e13ffb17 	ldw	r4,-20(fp)
80203ecc:	02041d40 	call	802041d4 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
80203ed0:	0106d604 	movi	r4,7000
80203ed4:	02175940 	call	80217594 <usleep>
    
    return bSuccess;
80203ed8:	e0bffa17 	ldw	r2,-24(fp)

}
80203edc:	e037883a 	mov	sp,fp
80203ee0:	dfc00117 	ldw	ra,4(sp)
80203ee4:	df000017 	ldw	fp,0(sp)
80203ee8:	dec00204 	addi	sp,sp,8
80203eec:	f800283a 	ret

80203ef0 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
80203ef0:	defff904 	addi	sp,sp,-28
80203ef4:	dfc00615 	stw	ra,24(sp)
80203ef8:	df000515 	stw	fp,20(sp)
80203efc:	df000504 	addi	fp,sp,20
80203f00:	e13ffc15 	stw	r4,-16(fp)
80203f04:	e17ffd15 	stw	r5,-12(fp)
80203f08:	3007883a 	mov	r3,r6
80203f0c:	3805883a 	mov	r2,r7
80203f10:	e0fffe05 	stb	r3,-8(fp)
80203f14:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
80203f18:	00800044 	movi	r2,1
80203f1c:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
80203f20:	e17ffd17 	ldw	r5,-12(fp)
80203f24:	e13ffc17 	ldw	r4,-16(fp)
80203f28:	02041480 	call	80204148 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
80203f2c:	e0bffe03 	ldbu	r2,-8(fp)
80203f30:	10803fcc 	andi	r2,r2,255
80203f34:	100d883a 	mov	r6,r2
80203f38:	e17ffd17 	ldw	r5,-12(fp)
80203f3c:	e13ffc17 	ldw	r4,-16(fp)
80203f40:	020424c0 	call	8020424c <i2c_write>
80203f44:	1000011e 	bne	r2,zero,80203f4c <I2C_Read+0x5c>
        bSuccess = FALSE;
80203f48:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
80203f4c:	e0bffb17 	ldw	r2,-20(fp)
80203f50:	10000726 	beq	r2,zero,80203f70 <I2C_Read+0x80>
80203f54:	e0bfff03 	ldbu	r2,-4(fp)
80203f58:	100d883a 	mov	r6,r2
80203f5c:	e17ffd17 	ldw	r5,-12(fp)
80203f60:	e13ffc17 	ldw	r4,-16(fp)
80203f64:	020424c0 	call	8020424c <i2c_write>
80203f68:	1000011e 	bne	r2,zero,80203f70 <I2C_Read+0x80>
        bSuccess = FALSE;
80203f6c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
80203f70:	e17ffd17 	ldw	r5,-12(fp)
80203f74:	e13ffc17 	ldw	r4,-16(fp)
80203f78:	02041480 	call	80204148 <i2c_start>
    DeviceAddr |= 1; // Read
80203f7c:	e0bffe03 	ldbu	r2,-8(fp)
80203f80:	10800054 	ori	r2,r2,1
80203f84:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
80203f88:	e0bffb17 	ldw	r2,-20(fp)
80203f8c:	10000826 	beq	r2,zero,80203fb0 <I2C_Read+0xc0>
80203f90:	e0bffe03 	ldbu	r2,-8(fp)
80203f94:	10803fcc 	andi	r2,r2,255
80203f98:	100d883a 	mov	r6,r2
80203f9c:	e17ffd17 	ldw	r5,-12(fp)
80203fa0:	e13ffc17 	ldw	r4,-16(fp)
80203fa4:	020424c0 	call	8020424c <i2c_write>
80203fa8:	1000011e 	bne	r2,zero,80203fb0 <I2C_Read+0xc0>
        bSuccess = FALSE;
80203fac:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
80203fb0:	e0bffb17 	ldw	r2,-20(fp)
80203fb4:	10000526 	beq	r2,zero,80203fcc <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
80203fb8:	000f883a 	mov	r7,zero
80203fbc:	e1800217 	ldw	r6,8(fp)
80203fc0:	e17ffd17 	ldw	r5,-12(fp)
80203fc4:	e13ffc17 	ldw	r4,-16(fp)
80203fc8:	020437c0 	call	8020437c <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
80203fcc:	e17ffd17 	ldw	r5,-12(fp)
80203fd0:	e13ffc17 	ldw	r4,-16(fp)
80203fd4:	02041d40 	call	802041d4 <i2c_stop>
    
    return bSuccess;
80203fd8:	e0bffb17 	ldw	r2,-20(fp)
}
80203fdc:	e037883a 	mov	sp,fp
80203fe0:	dfc00117 	ldw	ra,4(sp)
80203fe4:	df000017 	ldw	fp,0(sp)
80203fe8:	dec00204 	addi	sp,sp,8
80203fec:	f800283a 	ret

80203ff0 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
80203ff0:	defff604 	addi	sp,sp,-40
80203ff4:	dfc00915 	stw	ra,36(sp)
80203ff8:	df000815 	stw	fp,32(sp)
80203ffc:	df000804 	addi	fp,sp,32
80204000:	e13ffb15 	stw	r4,-20(fp)
80204004:	e17ffc15 	stw	r5,-16(fp)
80204008:	3007883a 	mov	r3,r6
8020400c:	e1fffe15 	stw	r7,-8(fp)
80204010:	e0800217 	ldw	r2,8(fp)
80204014:	e0fffd05 	stb	r3,-12(fp)
80204018:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
8020401c:	00800044 	movi	r2,1
80204020:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
80204024:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
80204028:	e17ffc17 	ldw	r5,-16(fp)
8020402c:	e13ffb17 	ldw	r4,-20(fp)
80204030:	02041480 	call	80204148 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
80204034:	e0bffd03 	ldbu	r2,-12(fp)
80204038:	10803fcc 	andi	r2,r2,255
8020403c:	100d883a 	mov	r6,r2
80204040:	e17ffc17 	ldw	r5,-16(fp)
80204044:	e13ffb17 	ldw	r4,-20(fp)
80204048:	020424c0 	call	8020424c <i2c_write>
8020404c:	1000011e 	bne	r2,zero,80204054 <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
80204050:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
80204054:	e0bff917 	ldw	r2,-28(fp)
80204058:	10000726 	beq	r2,zero,80204078 <I2C_MultipleRead+0x88>
8020405c:	e0bffa03 	ldbu	r2,-24(fp)
80204060:	100d883a 	mov	r6,r2
80204064:	e17ffc17 	ldw	r5,-16(fp)
80204068:	e13ffb17 	ldw	r4,-20(fp)
8020406c:	020424c0 	call	8020424c <i2c_write>
80204070:	1000011e 	bne	r2,zero,80204078 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
80204074:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
80204078:	e0bff917 	ldw	r2,-28(fp)
8020407c:	10000326 	beq	r2,zero,8020408c <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
80204080:	e17ffc17 	ldw	r5,-16(fp)
80204084:	e13ffb17 	ldw	r4,-20(fp)
80204088:	02041480 	call	80204148 <i2c_start>
    DeviceAddr |= 1; // Read
8020408c:	e0bffd03 	ldbu	r2,-12(fp)
80204090:	10800054 	ori	r2,r2,1
80204094:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
80204098:	e0bff917 	ldw	r2,-28(fp)
8020409c:	10000826 	beq	r2,zero,802040c0 <I2C_MultipleRead+0xd0>
802040a0:	e0bffd03 	ldbu	r2,-12(fp)
802040a4:	10803fcc 	andi	r2,r2,255
802040a8:	100d883a 	mov	r6,r2
802040ac:	e17ffc17 	ldw	r5,-16(fp)
802040b0:	e13ffb17 	ldw	r4,-20(fp)
802040b4:	020424c0 	call	8020424c <i2c_write>
802040b8:	1000011e 	bne	r2,zero,802040c0 <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
802040bc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
802040c0:	e0bff917 	ldw	r2,-28(fp)
802040c4:	10001726 	beq	r2,zero,80204124 <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
802040c8:	e03ff815 	stw	zero,-32(fp)
802040cc:	00001006 	br	80204110 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
802040d0:	e0bff817 	ldw	r2,-32(fp)
802040d4:	e0fffe17 	ldw	r3,-8(fp)
802040d8:	1889883a 	add	r4,r3,r2
802040dc:	e0bfff0b 	ldhu	r2,-4(fp)
802040e0:	10ffffc4 	addi	r3,r2,-1
802040e4:	e0bff817 	ldw	r2,-32(fp)
802040e8:	1884c03a 	cmpne	r2,r3,r2
802040ec:	10803fcc 	andi	r2,r2,255
802040f0:	100f883a 	mov	r7,r2
802040f4:	200d883a 	mov	r6,r4
802040f8:	e17ffc17 	ldw	r5,-16(fp)
802040fc:	e13ffb17 	ldw	r4,-20(fp)
80204100:	020437c0 	call	8020437c <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
80204104:	e0bff817 	ldw	r2,-32(fp)
80204108:	10800044 	addi	r2,r2,1
8020410c:	e0bff815 	stw	r2,-32(fp)
80204110:	e0bfff0b 	ldhu	r2,-4(fp)
80204114:	e0fff817 	ldw	r3,-32(fp)
80204118:	1880020e 	bge	r3,r2,80204124 <I2C_MultipleRead+0x134>
8020411c:	e0bff917 	ldw	r2,-28(fp)
80204120:	103feb1e 	bne	r2,zero,802040d0 <__reset+0xfa1e40d0>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
80204124:	e17ffc17 	ldw	r5,-16(fp)
80204128:	e13ffb17 	ldw	r4,-20(fp)
8020412c:	02041d40 	call	802041d4 <i2c_stop>
    
    return bSuccess;    
80204130:	e0bff917 	ldw	r2,-28(fp)
    
}
80204134:	e037883a 	mov	sp,fp
80204138:	dfc00117 	ldw	ra,4(sp)
8020413c:	df000017 	ldw	fp,0(sp)
80204140:	dec00204 	addi	sp,sp,8
80204144:	f800283a 	ret

80204148 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
80204148:	defffc04 	addi	sp,sp,-16
8020414c:	dfc00315 	stw	ra,12(sp)
80204150:	df000215 	stw	fp,8(sp)
80204154:	df000204 	addi	fp,sp,8
80204158:	e13ffe15 	stw	r4,-8(fp)
8020415c:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
80204160:	e0bfff17 	ldw	r2,-4(fp)
80204164:	10800104 	addi	r2,r2,4
80204168:	1007883a 	mov	r3,r2
8020416c:	00800044 	movi	r2,1
80204170:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
80204174:	e0bfff17 	ldw	r2,-4(fp)
80204178:	00c00044 	movi	r3,1
8020417c:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
80204180:	e0bffe17 	ldw	r2,-8(fp)
80204184:	00c00044 	movi	r3,1
80204188:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
8020418c:	01000044 	movi	r4,1
80204190:	02175940 	call	80217594 <usleep>
     
    SDA_LOW(data_base); // data low
80204194:	e0bfff17 	ldw	r2,-4(fp)
80204198:	0007883a 	mov	r3,zero
8020419c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
802041a0:	01000044 	movi	r4,1
802041a4:	02175940 	call	80217594 <usleep>
    SCL_LOW(clk_base); // clock low
802041a8:	e0bffe17 	ldw	r2,-8(fp)
802041ac:	0007883a 	mov	r3,zero
802041b0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
802041b4:	01000044 	movi	r4,1
802041b8:	02175940 	call	80217594 <usleep>
}
802041bc:	0001883a 	nop
802041c0:	e037883a 	mov	sp,fp
802041c4:	dfc00117 	ldw	ra,4(sp)
802041c8:	df000017 	ldw	fp,0(sp)
802041cc:	dec00204 	addi	sp,sp,8
802041d0:	f800283a 	ret

802041d4 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
802041d4:	defffc04 	addi	sp,sp,-16
802041d8:	dfc00315 	stw	ra,12(sp)
802041dc:	df000215 	stw	fp,8(sp)
802041e0:	df000204 	addi	fp,sp,8
802041e4:	e13ffe15 	stw	r4,-8(fp)
802041e8:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
802041ec:	e0bfff17 	ldw	r2,-4(fp)
802041f0:	10800104 	addi	r2,r2,4
802041f4:	1007883a 	mov	r3,r2
802041f8:	00800044 	movi	r2,1
802041fc:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
80204200:	e0bfff17 	ldw	r2,-4(fp)
80204204:	0007883a 	mov	r3,zero
80204208:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
8020420c:	e0bffe17 	ldw	r2,-8(fp)
80204210:	00c00044 	movi	r3,1
80204214:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
80204218:	01000044 	movi	r4,1
8020421c:	02175940 	call	80217594 <usleep>
    SDA_HIGH(data_base); // data high
80204220:	e0bfff17 	ldw	r2,-4(fp)
80204224:	00c00044 	movi	r3,1
80204228:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
8020422c:	01000044 	movi	r4,1
80204230:	02175940 	call	80217594 <usleep>
    

    
}
80204234:	0001883a 	nop
80204238:	e037883a 	mov	sp,fp
8020423c:	dfc00117 	ldw	ra,4(sp)
80204240:	df000017 	ldw	fp,0(sp)
80204244:	dec00204 	addi	sp,sp,8
80204248:	f800283a 	ret

8020424c <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
8020424c:	defff804 	addi	sp,sp,-32
80204250:	dfc00715 	stw	ra,28(sp)
80204254:	df000615 	stw	fp,24(sp)
80204258:	df000604 	addi	fp,sp,24
8020425c:	e13ffd15 	stw	r4,-12(fp)
80204260:	e17ffe15 	stw	r5,-8(fp)
80204264:	3005883a 	mov	r2,r6
80204268:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
8020426c:	00bfe004 	movi	r2,-128
80204270:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
80204274:	e0bffe17 	ldw	r2,-8(fp)
80204278:	10800104 	addi	r2,r2,4
8020427c:	1007883a 	mov	r3,r2
80204280:	00800044 	movi	r2,1
80204284:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
80204288:	e03ffb15 	stw	zero,-20(fp)
8020428c:	00001f06 	br	8020430c <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
80204290:	e0bffd17 	ldw	r2,-12(fp)
80204294:	0007883a 	mov	r3,zero
80204298:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
8020429c:	e0ffff03 	ldbu	r3,-4(fp)
802042a0:	e0bffa03 	ldbu	r2,-24(fp)
802042a4:	1884703a 	and	r2,r3,r2
802042a8:	10803fcc 	andi	r2,r2,255
802042ac:	10000426 	beq	r2,zero,802042c0 <i2c_write+0x74>
            SDA_HIGH(data_base);
802042b0:	e0bffe17 	ldw	r2,-8(fp)
802042b4:	00c00044 	movi	r3,1
802042b8:	10c00035 	stwio	r3,0(r2)
802042bc:	00000306 	br	802042cc <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
802042c0:	e0bffe17 	ldw	r2,-8(fp)
802042c4:	0007883a 	mov	r3,zero
802042c8:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
802042cc:	e0bffa03 	ldbu	r2,-24(fp)
802042d0:	1004d07a 	srli	r2,r2,1
802042d4:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
802042d8:	e0bffd17 	ldw	r2,-12(fp)
802042dc:	00c00044 	movi	r3,1
802042e0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
802042e4:	01000044 	movi	r4,1
802042e8:	02175940 	call	80217594 <usleep>
        SCL_LOW(clk_base);
802042ec:	e0bffd17 	ldw	r2,-12(fp)
802042f0:	0007883a 	mov	r3,zero
802042f4:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
802042f8:	01000044 	movi	r4,1
802042fc:	02175940 	call	80217594 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
80204300:	e0bffb17 	ldw	r2,-20(fp)
80204304:	10800044 	addi	r2,r2,1
80204308:	e0bffb15 	stw	r2,-20(fp)
8020430c:	e0bffb17 	ldw	r2,-20(fp)
80204310:	10800210 	cmplti	r2,r2,8
80204314:	103fde1e 	bne	r2,zero,80204290 <__reset+0xfa1e4290>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
80204318:	e0bffe17 	ldw	r2,-8(fp)
8020431c:	10800104 	addi	r2,r2,4
80204320:	0007883a 	mov	r3,zero
80204324:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
80204328:	e0bffd17 	ldw	r2,-12(fp)
8020432c:	00c00044 	movi	r3,1
80204330:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
80204334:	01000044 	movi	r4,1
80204338:	02175940 	call	80217594 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
8020433c:	e0bffe17 	ldw	r2,-8(fp)
80204340:	10800037 	ldwio	r2,0(r2)
80204344:	1005003a 	cmpeq	r2,r2,zero
80204348:	10803fcc 	andi	r2,r2,255
8020434c:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
80204350:	e0bffd17 	ldw	r2,-12(fp)
80204354:	0007883a 	mov	r3,zero
80204358:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
8020435c:	01000044 	movi	r4,1
80204360:	02175940 	call	80217594 <usleep>
    return bAck;
80204364:	e0bffc17 	ldw	r2,-16(fp)
}    
80204368:	e037883a 	mov	sp,fp
8020436c:	dfc00117 	ldw	ra,4(sp)
80204370:	df000017 	ldw	fp,0(sp)
80204374:	dec00204 	addi	sp,sp,8
80204378:	f800283a 	ret

8020437c <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
8020437c:	defff804 	addi	sp,sp,-32
80204380:	dfc00715 	stw	ra,28(sp)
80204384:	df000615 	stw	fp,24(sp)
80204388:	df000604 	addi	fp,sp,24
8020438c:	e13ffc15 	stw	r4,-16(fp)
80204390:	e17ffd15 	stw	r5,-12(fp)
80204394:	e1bffe15 	stw	r6,-8(fp)
80204398:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
8020439c:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
802043a0:	e0bffd17 	ldw	r2,-12(fp)
802043a4:	10800104 	addi	r2,r2,4
802043a8:	0007883a 	mov	r3,zero
802043ac:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
802043b0:	e0bffc17 	ldw	r2,-16(fp)
802043b4:	0007883a 	mov	r3,zero
802043b8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
802043bc:	01000044 	movi	r4,1
802043c0:	02175940 	call	80217594 <usleep>

    for(i=0;i<8;i++){
802043c4:	e03ffb15 	stw	zero,-20(fp)
802043c8:	00001606 	br	80204424 <i2c_read+0xa8>
        Data <<= 1;
802043cc:	e0bffa03 	ldbu	r2,-24(fp)
802043d0:	1085883a 	add	r2,r2,r2
802043d4:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
802043d8:	e0bffc17 	ldw	r2,-16(fp)
802043dc:	00c00044 	movi	r3,1
802043e0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
802043e4:	01000044 	movi	r4,1
802043e8:	02175940 	call	80217594 <usleep>
        if (SDA_READ(data_base))  // read data   
802043ec:	e0bffd17 	ldw	r2,-12(fp)
802043f0:	10800037 	ldwio	r2,0(r2)
802043f4:	10000326 	beq	r2,zero,80204404 <i2c_read+0x88>
            Data |= 0x01;
802043f8:	e0bffa03 	ldbu	r2,-24(fp)
802043fc:	10800054 	ori	r2,r2,1
80204400:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
80204404:	e0bffc17 	ldw	r2,-16(fp)
80204408:	0007883a 	mov	r3,zero
8020440c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
80204410:	01000044 	movi	r4,1
80204414:	02175940 	call	80217594 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
80204418:	e0bffb17 	ldw	r2,-20(fp)
8020441c:	10800044 	addi	r2,r2,1
80204420:	e0bffb15 	stw	r2,-20(fp)
80204424:	e0bffb17 	ldw	r2,-20(fp)
80204428:	10800210 	cmplti	r2,r2,8
8020442c:	103fe71e 	bne	r2,zero,802043cc <__reset+0xfa1e43cc>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
80204430:	e0bffc17 	ldw	r2,-16(fp)
80204434:	0007883a 	mov	r3,zero
80204438:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
8020443c:	e0bffd17 	ldw	r2,-12(fp)
80204440:	10800104 	addi	r2,r2,4
80204444:	1007883a 	mov	r3,r2
80204448:	00800044 	movi	r2,1
8020444c:	18800035 	stwio	r2,0(r3)
    if (bAck)
80204450:	e0bfff17 	ldw	r2,-4(fp)
80204454:	10000426 	beq	r2,zero,80204468 <i2c_read+0xec>
        SDA_LOW(data_base);
80204458:	e0bffd17 	ldw	r2,-12(fp)
8020445c:	0007883a 	mov	r3,zero
80204460:	10c00035 	stwio	r3,0(r2)
80204464:	00000306 	br	80204474 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
80204468:	e0bffd17 	ldw	r2,-12(fp)
8020446c:	00c00044 	movi	r3,1
80204470:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
80204474:	e0bffc17 	ldw	r2,-16(fp)
80204478:	00c00044 	movi	r3,1
8020447c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
80204480:	01000044 	movi	r4,1
80204484:	02175940 	call	80217594 <usleep>
    SCL_LOW(clk_base); // clock low
80204488:	e0bffc17 	ldw	r2,-16(fp)
8020448c:	0007883a 	mov	r3,zero
80204490:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
80204494:	01000044 	movi	r4,1
80204498:	02175940 	call	80217594 <usleep>
    SDA_LOW(data_base);  // data low
8020449c:	e0bffd17 	ldw	r2,-12(fp)
802044a0:	0007883a 	mov	r3,zero
802044a4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
802044a8:	01000044 	movi	r4,1
802044ac:	02175940 	call	80217594 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
802044b0:	e0bffe17 	ldw	r2,-8(fp)
802044b4:	e0fffa03 	ldbu	r3,-24(fp)
802044b8:	10c00005 	stb	r3,0(r2)
}
802044bc:	0001883a 	nop
802044c0:	e037883a 	mov	sp,fp
802044c4:	dfc00117 	ldw	ra,4(sp)
802044c8:	df000017 	ldw	fp,0(sp)
802044cc:	dec00204 	addi	sp,sp,8
802044d0:	f800283a 	ret

802044d4 <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
802044d4:	defffd04 	addi	sp,sp,-12
802044d8:	df000215 	stw	fp,8(sp)
802044dc:	df000204 	addi	fp,sp,8
802044e0:	e13ffe15 	stw	r4,-8(fp)
802044e4:	2805883a 	mov	r2,r5
802044e8:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
802044ec:	e0bffe17 	ldw	r2,-8(fp)
802044f0:	10800058 	cmpnei	r2,r2,1
802044f4:	1000071e 	bne	r2,zero,80204514 <bSetBoardLeds+0x40>
	LedsBoardControl &= (~LedsMask);
802044f8:	e0bfff03 	ldbu	r2,-4(fp)
802044fc:	0084303a 	nor	r2,zero,r2
80204500:	1007883a 	mov	r3,r2
80204504:	d0a01a03 	ldbu	r2,-32664(gp)
80204508:	1884703a 	and	r2,r3,r2
8020450c:	d0a01a05 	stb	r2,-32664(gp)
80204510:	00000406 	br	80204524 <bSetBoardLeds+0x50>
  } else {
	LedsBoardControl |= LedsMask;
80204514:	d0e01a03 	ldbu	r3,-32664(gp)
80204518:	e0bfff03 	ldbu	r2,-4(fp)
8020451c:	1884b03a 	or	r2,r3,r2
80204520:	d0a01a05 	stb	r2,-32664(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
80204524:	d0a01a03 	ldbu	r2,-32664(gp)
80204528:	10c03fcc 	andi	r3,r2,255
8020452c:	00a04034 	movhi	r2,33024
80204530:	10816404 	addi	r2,r2,1424
80204534:	10c00035 	stwio	r3,0(r2)

  return TRUE;
80204538:	00800044 	movi	r2,1
}
8020453c:	e037883a 	mov	sp,fp
80204540:	df000017 	ldw	fp,0(sp)
80204544:	dec00104 	addi	sp,sp,4
80204548:	f800283a 	ret

8020454c <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
8020454c:	defffd04 	addi	sp,sp,-12
80204550:	df000215 	stw	fp,8(sp)
80204554:	df000204 	addi	fp,sp,8
80204558:	e13ffe15 	stw	r4,-8(fp)
8020455c:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
80204560:	e0bffe17 	ldw	r2,-8(fp)
80204564:	10800058 	cmpnei	r2,r2,1
80204568:	1000051e 	bne	r2,zero,80204580 <bSetPainelLeds+0x34>
	LedsPainelControl |= LedsMask;
8020456c:	d0e00017 	ldw	r3,-32768(gp)
80204570:	e0bfff17 	ldw	r2,-4(fp)
80204574:	1884b03a 	or	r2,r3,r2
80204578:	d0a00015 	stw	r2,-32768(gp)
8020457c:	00000506 	br	80204594 <bSetPainelLeds+0x48>
  } else {
	LedsPainelControl &= (~LedsMask);
80204580:	e0bfff17 	ldw	r2,-4(fp)
80204584:	0086303a 	nor	r3,zero,r2
80204588:	d0a00017 	ldw	r2,-32768(gp)
8020458c:	1884703a 	and	r2,r3,r2
80204590:	d0a00015 	stw	r2,-32768(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
80204594:	d0a00017 	ldw	r2,-32768(gp)
80204598:	1007883a 	mov	r3,r2
8020459c:	00a04034 	movhi	r2,33024
802045a0:	10813004 	addi	r2,r2,1216
802045a4:	10c00035 	stwio	r3,0(r2)

  return TRUE;
802045a8:	00800044 	movi	r2,1
}
802045ac:	e037883a 	mov	sp,fp
802045b0:	df000017 	ldw	fp,0(sp)
802045b4:	dec00104 	addi	sp,sp,4
802045b8:	f800283a 	ret

802045bc <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
802045bc:	defffc04 	addi	sp,sp,-16
802045c0:	df000315 	stw	fp,12(sp)
802045c4:	df000304 	addi	fp,sp,12
802045c8:	e13ffd15 	stw	r4,-12(fp)
802045cc:	e17ffe15 	stw	r5,-8(fp)
802045d0:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
802045d4:	e0bffd17 	ldw	r2,-12(fp)
802045d8:	10800037 	ldwio	r2,0(r2)
802045dc:	1080010c 	andi	r2,r2,4
802045e0:	10000226 	beq	r2,zero,802045ec <msgdma_write_extended_descriptor+0x30>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
802045e4:	00bff904 	movi	r2,-28
802045e8:	00003d06 	br	802046e0 <msgdma_write_extended_descriptor+0x124>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
802045ec:	e0bfff17 	ldw	r2,-4(fp)
802045f0:	10800017 	ldw	r2,0(r2)
802045f4:	1007883a 	mov	r3,r2
802045f8:	e0bffe17 	ldw	r2,-8(fp)
802045fc:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
80204600:	e0bffe17 	ldw	r2,-8(fp)
80204604:	10800104 	addi	r2,r2,4
80204608:	e0ffff17 	ldw	r3,-4(fp)
8020460c:	18c00117 	ldw	r3,4(r3)
80204610:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base,
80204614:	e0bffe17 	ldw	r2,-8(fp)
80204618:	10800204 	addi	r2,r2,8
8020461c:	e0ffff17 	ldw	r3,-4(fp)
80204620:	18c00217 	ldw	r3,8(r3)
80204624:	10c00035 	stwio	r3,0(r2)
			descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
80204628:	e0bffe17 	ldw	r2,-8(fp)
8020462c:	10800304 	addi	r2,r2,12
80204630:	e0ffff17 	ldw	r3,-4(fp)
80204634:	18c0030b 	ldhu	r3,12(r3)
80204638:	18ffffcc 	andi	r3,r3,65535
8020463c:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
80204640:	e0bffe17 	ldw	r2,-8(fp)
80204644:	10800384 	addi	r2,r2,14
80204648:	e0ffff17 	ldw	r3,-4(fp)
8020464c:	18c00383 	ldbu	r3,14(r3)
80204650:	18c03fcc 	andi	r3,r3,255
80204654:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
80204658:	e0bffe17 	ldw	r2,-8(fp)
8020465c:	108003c4 	addi	r2,r2,15
80204660:	e0ffff17 	ldw	r3,-4(fp)
80204664:	18c003c3 	ldbu	r3,15(r3)
80204668:	18c03fcc 	andi	r3,r3,255
8020466c:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
80204670:	e0bffe17 	ldw	r2,-8(fp)
80204674:	10800404 	addi	r2,r2,16
80204678:	e0ffff17 	ldw	r3,-4(fp)
8020467c:	18c0040b 	ldhu	r3,16(r3)
80204680:	18ffffcc 	andi	r3,r3,65535
80204684:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
80204688:	e0bffe17 	ldw	r2,-8(fp)
8020468c:	10800484 	addi	r2,r2,18
80204690:	e0ffff17 	ldw	r3,-4(fp)
80204694:	18c0048b 	ldhu	r3,18(r3)
80204698:	18ffffcc 	andi	r3,r3,65535
8020469c:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base,
802046a0:	e0bffe17 	ldw	r2,-8(fp)
802046a4:	10800504 	addi	r2,r2,20
802046a8:	e0ffff17 	ldw	r3,-4(fp)
802046ac:	18c00517 	ldw	r3,20(r3)
802046b0:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base,
802046b4:	e0bffe17 	ldw	r2,-8(fp)
802046b8:	10800604 	addi	r2,r2,24
802046bc:	e0ffff17 	ldw	r3,-4(fp)
802046c0:	18c00617 	ldw	r3,24(r3)
802046c4:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
802046c8:	e0bffe17 	ldw	r2,-8(fp)
802046cc:	10800704 	addi	r2,r2,28
802046d0:	e0ffff17 	ldw	r3,-4(fp)
802046d4:	18c00717 	ldw	r3,28(r3)
802046d8:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
802046dc:	0005883a 	mov	r2,zero
}
802046e0:	e037883a 	mov	sp,fp
802046e4:	df000017 	ldw	fp,0(sp)
802046e8:	dec00104 	addi	sp,sp,4
802046ec:	f800283a 	ret

802046f0 <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
802046f0:	defff604 	addi	sp,sp,-40
802046f4:	df000915 	stw	fp,36(sp)
802046f8:	df000904 	addi	fp,sp,36
802046fc:	e13ff715 	stw	r4,-36(fp)
80204700:	e17ff815 	stw	r5,-32(fp)
80204704:	e1bff915 	stw	r6,-28(fp)
80204708:	e1fffa15 	stw	r7,-24(fp)
8020470c:	e1800517 	ldw	r6,20(fp)
80204710:	e1400617 	ldw	r5,24(fp)
80204714:	e1000717 	ldw	r4,28(fp)
80204718:	e0c00817 	ldw	r3,32(fp)
8020471c:	e0800917 	ldw	r2,36(fp)
80204720:	e1bffb0d 	sth	r6,-20(fp)
80204724:	e17ffc05 	stb	r5,-16(fp)
80204728:	e13ffd05 	stb	r4,-12(fp)
8020472c:	e0fffe0d 	sth	r3,-8(fp)
80204730:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
80204734:	e0bff717 	ldw	r2,-36(fp)
80204738:	10c01217 	ldw	r3,72(r2)
8020473c:	e0800117 	ldw	r2,4(fp)
80204740:	18801936 	bltu	r3,r2,802047a8 <msgdma_construct_extended_descriptor+0xb8>
80204744:	e13ff717 	ldw	r4,-36(fp)
80204748:	20801317 	ldw	r2,76(r4)
8020474c:	20c01417 	ldw	r3,80(r4)
80204750:	e13ffe0b 	ldhu	r4,-8(fp)
80204754:	213fffcc 	andi	r4,r4,65535
80204758:	2015883a 	mov	r10,r4
8020475c:	0017883a 	mov	r11,zero
80204760:	1ac01136 	bltu	r3,r11,802047a8 <msgdma_construct_extended_descriptor+0xb8>
80204764:	58c0011e 	bne	r11,r3,8020476c <msgdma_construct_extended_descriptor+0x7c>
80204768:	12800f36 	bltu	r2,r10,802047a8 <msgdma_construct_extended_descriptor+0xb8>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
8020476c:	e13ff717 	ldw	r4,-36(fp)
80204770:	20801317 	ldw	r2,76(r4)
80204774:	20c01417 	ldw	r3,80(r4)
80204778:	e13fff0b 	ldhu	r4,-4(fp)
8020477c:	213fffcc 	andi	r4,r4,65535
80204780:	2011883a 	mov	r8,r4
80204784:	0013883a 	mov	r9,zero
80204788:	1a400736 	bltu	r3,r9,802047a8 <msgdma_construct_extended_descriptor+0xb8>
8020478c:	48c0011e 	bne	r9,r3,80204794 <msgdma_construct_extended_descriptor+0xa4>
80204790:	12000536 	bltu	r2,r8,802047a8 <msgdma_construct_extended_descriptor+0xb8>
80204794:	e0bff717 	ldw	r2,-36(fp)
80204798:	10801703 	ldbu	r2,92(r2)
8020479c:	10803fcc 	andi	r2,r2,255
802047a0:	10800060 	cmpeqi	r2,r2,1
802047a4:	1000021e 	bne	r2,zero,802047b0 <msgdma_construct_extended_descriptor+0xc0>
		return -EINVAL;
802047a8:	00bffa84 	movi	r2,-22
802047ac:	00002306 	br	8020483c <msgdma_construct_extended_descriptor+0x14c>
	}

	descriptor->read_address_low = read_address;
802047b0:	e0bff817 	ldw	r2,-32(fp)
802047b4:	e0fff917 	ldw	r3,-28(fp)
802047b8:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
802047bc:	e0bff817 	ldw	r2,-32(fp)
802047c0:	e0fffa17 	ldw	r3,-24(fp)
802047c4:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
802047c8:	e0bff817 	ldw	r2,-32(fp)
802047cc:	e0c00117 	ldw	r3,4(fp)
802047d0:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
802047d4:	e0bff817 	ldw	r2,-32(fp)
802047d8:	e0fffb0b 	ldhu	r3,-20(fp)
802047dc:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
802047e0:	e0bff817 	ldw	r2,-32(fp)
802047e4:	e0fffc03 	ldbu	r3,-16(fp)
802047e8:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
802047ec:	e0bff817 	ldw	r2,-32(fp)
802047f0:	e0fffd03 	ldbu	r3,-12(fp)
802047f4:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
802047f8:	e0bff817 	ldw	r2,-32(fp)
802047fc:	e0fffe0b 	ldhu	r3,-8(fp)
80204800:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
80204804:	e0bff817 	ldw	r2,-32(fp)
80204808:	e0ffff0b 	ldhu	r3,-4(fp)
8020480c:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
80204810:	e0bff817 	ldw	r2,-32(fp)
80204814:	e0c00317 	ldw	r3,12(fp)
80204818:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
8020481c:	e0bff817 	ldw	r2,-32(fp)
80204820:	e0c00417 	ldw	r3,16(fp)
80204824:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80204828:	e0800217 	ldw	r2,8(fp)
8020482c:	10e00034 	orhi	r3,r2,32768
80204830:	e0bff817 	ldw	r2,-32(fp)
80204834:	10c00715 	stw	r3,28(r2)

	return 0;
80204838:	0005883a 	mov	r2,zero

}
8020483c:	e037883a 	mov	sp,fp
80204840:	df000017 	ldw	fp,0(sp)
80204844:	dec00104 	addi	sp,sp,4
80204848:	f800283a 	ret

8020484c <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
8020484c:	defff004 	addi	sp,sp,-64
80204850:	dfc00f15 	stw	ra,60(sp)
80204854:	df000e15 	stw	fp,56(sp)
80204858:	df000e04 	addi	fp,sp,56
8020485c:	e13ffd15 	stw	r4,-12(fp)
80204860:	e17ffe15 	stw	r5,-8(fp)
80204864:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
80204868:	e03ff315 	stw	zero,-52(fp)
	alt_irq_context context = 0;
8020486c:	e03ff415 	stw	zero,-48(fp)
	alt_u16 counter = 0;
80204870:	e03ff20d 	sth	zero,-56(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80204874:	e0bffd17 	ldw	r2,-12(fp)
80204878:	10800317 	ldw	r2,12(r2)
8020487c:	10800204 	addi	r2,r2,8
80204880:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
80204884:	10bfffcc 	andi	r2,r2,65535
80204888:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8020488c:	e0bffd17 	ldw	r2,-12(fp)
80204890:	10800317 	ldw	r2,12(r2)
80204894:	10800204 	addi	r2,r2,8
80204898:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
8020489c:	1004d43a 	srli	r2,r2,16
802048a0:	e0bff615 	stw	r2,-40(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
802048a4:	e0bffd17 	ldw	r2,-12(fp)
802048a8:	10800917 	ldw	r2,36(r2)
802048ac:	e0fff617 	ldw	r3,-40(fp)
802048b0:	1880042e 	bgeu	r3,r2,802048c4 <msgdma_descriptor_async_transfer+0x78>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
802048b4:	e0bffd17 	ldw	r2,-12(fp)
802048b8:	10800917 	ldw	r2,36(r2)
802048bc:	e0fff517 	ldw	r3,-44(fp)
802048c0:	18800236 	bltu	r3,r2,802048cc <msgdma_descriptor_async_transfer+0x80>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
802048c4:	00bff904 	movi	r2,-28
802048c8:	00007d06 	br	80204ac0 <msgdma_descriptor_async_transfer+0x274>
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
802048cc:	00800804 	movi	r2,32
802048d0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802048d4:	0005303a 	rdctl	r2,status
802048d8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802048dc:	e0fff717 	ldw	r3,-36(fp)
802048e0:	00bfff84 	movi	r2,-2
802048e4:	1884703a 	and	r2,r3,r2
802048e8:	1001703a 	wrctl	status,r2
  
  return context;
802048ec:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
802048f0:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
802048f4:	e0bffd17 	ldw	r2,-12(fp)
802048f8:	10800317 	ldw	r2,12(r2)
802048fc:	10800104 	addi	r2,r2,4
80204900:	e0fff317 	ldw	r3,-52(fp)
80204904:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
80204908:	e0bffd17 	ldw	r2,-12(fp)
8020490c:	10800317 	ldw	r2,12(r2)
80204910:	e0fffd17 	ldw	r3,-12(fp)
80204914:	18c00317 	ldw	r3,12(r3)
80204918:	18c00037 	ldwio	r3,0(r3)
8020491c:	10c00035 	stwio	r3,0(r2)
80204920:	e0bff417 	ldw	r2,-48(fp)
80204924:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80204928:	e0bffc17 	ldw	r2,-16(fp)
8020492c:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
80204930:	e0bffe17 	ldw	r2,-8(fp)
80204934:	10000826 	beq	r2,zero,80204958 <msgdma_descriptor_async_transfer+0x10c>
80204938:	e0bfff17 	ldw	r2,-4(fp)
8020493c:	1000061e 	bne	r2,zero,80204958 <msgdma_descriptor_async_transfer+0x10c>
		counter = 0; /* reset counter */
80204940:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#if DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
80204944:	012008b4 	movhi	r4,32802
80204948:	21352c04 	addi	r4,r4,-11088
8020494c:	0206d140 	call	80206d14 <puts>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
80204950:	00bff084 	movi	r2,-62
80204954:	00005a06 	br	80204ac0 <msgdma_descriptor_async_transfer+0x274>
	} else if (NULL == standard_desc && NULL != extended_desc) {
80204958:	e0bffe17 	ldw	r2,-8(fp)
8020495c:	10001b1e 	bne	r2,zero,802049cc <msgdma_descriptor_async_transfer+0x180>
80204960:	e0bfff17 	ldw	r2,-4(fp)
80204964:	10001926 	beq	r2,zero,802049cc <msgdma_descriptor_async_transfer+0x180>
		counter = 0; /* reset counter */
80204968:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
8020496c:	00000d06 	br	802049a4 <msgdma_descriptor_async_transfer+0x158>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
80204970:	01000044 	movi	r4,1
80204974:	0216a040 	call	80216a04 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
80204978:	e0bff20b 	ldhu	r2,-56(fp)
8020497c:	1084e230 	cmpltui	r2,r2,5000
80204980:	1000051e 	bne	r2,zero,80204998 <msgdma_descriptor_async_transfer+0x14c>
			{
				#if DEBUG_ON
					debug(fp, "time out after 5 msec while waiting free FIFO buffer for storing extended descriptor\n");
80204984:	012008b4 	movhi	r4,32802
80204988:	21353404 	addi	r4,r4,-11056
8020498c:	0206d140 	call	80206d14 <puts>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
80204990:	00bff084 	movi	r2,-62
80204994:	00004a06 	br	80204ac0 <msgdma_descriptor_async_transfer+0x274>
			}
			counter++;
80204998:	e0bff20b 	ldhu	r2,-56(fp)
8020499c:	10800044 	addi	r2,r2,1
802049a0:	e0bff20d 	sth	r2,-56(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
802049a4:	e0bffd17 	ldw	r2,-12(fp)
802049a8:	10c00317 	ldw	r3,12(r2)
802049ac:	e0bffd17 	ldw	r2,-12(fp)
802049b0:	10800417 	ldw	r2,16(r2)
802049b4:	e1bfff17 	ldw	r6,-4(fp)
802049b8:	100b883a 	mov	r5,r2
802049bc:	1809883a 	mov	r4,r3
802049c0:	02045bc0 	call	802045bc <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
802049c4:	103fea1e 	bne	r2,zero,80204970 <__reset+0xfa1e4970>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
802049c8:	00000206 	br	802049d4 <msgdma_descriptor_async_transfer+0x188>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
802049cc:	00bfffc4 	movi	r2,-1
802049d0:	00003b06 	br	80204ac0 <msgdma_descriptor_async_transfer+0x274>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
802049d4:	e0bffd17 	ldw	r2,-12(fp)
802049d8:	10800b17 	ldw	r2,44(r2)
802049dc:	10001c26 	beq	r2,zero,80204a50 <msgdma_descriptor_async_transfer+0x204>

		control |= (dev->control |
802049e0:	e0bffd17 	ldw	r2,-12(fp)
802049e4:	10c00d17 	ldw	r3,52(r2)
802049e8:	e0bff317 	ldw	r2,-52(fp)
802049ec:	1884b03a 	or	r2,r3,r2
802049f0:	10800514 	ori	r2,r2,20
802049f4:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
802049f8:	e0fff317 	ldw	r3,-52(fp)
802049fc:	00bff7c4 	movi	r2,-33
80204a00:	1884703a 	and	r2,r3,r2
80204a04:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80204a08:	0005303a 	rdctl	r2,status
80204a0c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80204a10:	e0fff917 	ldw	r3,-28(fp)
80204a14:	00bfff84 	movi	r2,-2
80204a18:	1884703a 	and	r2,r3,r2
80204a1c:	1001703a 	wrctl	status,r2
  
  return context;
80204a20:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
80204a24:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80204a28:	e0bffd17 	ldw	r2,-12(fp)
80204a2c:	10800317 	ldw	r2,12(r2)
80204a30:	10800104 	addi	r2,r2,4
80204a34:	e0fff317 	ldw	r3,-52(fp)
80204a38:	10c00035 	stwio	r3,0(r2)
80204a3c:	e0bff417 	ldw	r2,-48(fp)
80204a40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80204a44:	e0bffb17 	ldw	r2,-20(fp)
80204a48:	1001703a 	wrctl	status,r2
80204a4c:	00001b06 	br	80204abc <msgdma_descriptor_async_transfer+0x270>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
80204a50:	e0bffd17 	ldw	r2,-12(fp)
80204a54:	10c00d17 	ldw	r3,52(r2)
80204a58:	e0bff317 	ldw	r2,-52(fp)
80204a5c:	1884b03a 	or	r2,r3,r2
80204a60:	10800114 	ori	r2,r2,4
80204a64:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
80204a68:	e0fff317 	ldw	r3,-52(fp)
80204a6c:	00bff3c4 	movi	r2,-49
80204a70:	1884703a 	and	r2,r3,r2
80204a74:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80204a78:	0005303a 	rdctl	r2,status
80204a7c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80204a80:	e0fffa17 	ldw	r3,-24(fp)
80204a84:	00bfff84 	movi	r2,-2
80204a88:	1884703a 	and	r2,r3,r2
80204a8c:	1001703a 	wrctl	status,r2
  
  return context;
80204a90:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
80204a94:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80204a98:	e0bffd17 	ldw	r2,-12(fp)
80204a9c:	10800317 	ldw	r2,12(r2)
80204aa0:	10800104 	addi	r2,r2,4
80204aa4:	e0fff317 	ldw	r3,-52(fp)
80204aa8:	10c00035 	stwio	r3,0(r2)
80204aac:	e0bff417 	ldw	r2,-48(fp)
80204ab0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80204ab4:	e0bff817 	ldw	r2,-32(fp)
80204ab8:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
80204abc:	0005883a 	mov	r2,zero
}
80204ac0:	e037883a 	mov	sp,fp
80204ac4:	dfc00117 	ldw	ra,4(sp)
80204ac8:	df000017 	ldw	fp,0(sp)
80204acc:	dec00204 	addi	sp,sp,8
80204ad0:	f800283a 	ret

80204ad4 <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
80204ad4:	defff004 	addi	sp,sp,-64
80204ad8:	dfc00f15 	stw	ra,60(sp)
80204adc:	df000e15 	stw	fp,56(sp)
80204ae0:	df000e04 	addi	fp,sp,56
80204ae4:	e13ffd15 	stw	r4,-12(fp)
80204ae8:	e17ffe15 	stw	r5,-8(fp)
80204aec:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
80204af0:	e03ff615 	stw	zero,-40(fp)
	alt_irq_context context = 0;
80204af4:	e03ff715 	stw	zero,-36(fp)
	alt_u32 csr_status = 0;
80204af8:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
80204afc:	e03ff30d 	sth	zero,-52(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80204b00:	e0bffd17 	ldw	r2,-12(fp)
80204b04:	10800317 	ldw	r2,12(r2)
80204b08:	10800204 	addi	r2,r2,8
80204b0c:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
80204b10:	10bfffcc 	andi	r2,r2,65535
80204b14:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80204b18:	e0bffd17 	ldw	r2,-12(fp)
80204b1c:	10800317 	ldw	r2,12(r2)
80204b20:	10800204 	addi	r2,r2,8
80204b24:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
80204b28:	1004d43a 	srli	r2,r2,16
80204b2c:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
80204b30:	00807804 	movi	r2,480
80204b34:	e0bff815 	stw	r2,-32(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
80204b38:	00002006 	br	80204bbc <msgdma_descriptor_sync_transfer+0xe8>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
80204b3c:	01000044 	movi	r4,1
80204b40:	0216a040 	call	80216a04 <alt_busy_sleep>
#if DEBUG_ON
		fprintf(fp,"\n-- DMA can't write in the descriptor \n ");
80204b44:	d0a01d17 	ldw	r2,-32652(gp)
80204b48:	100f883a 	mov	r7,r2
80204b4c:	01800a04 	movi	r6,40
80204b50:	01400044 	movi	r5,1
80204b54:	012008b4 	movhi	r4,32802
80204b58:	21354a04 	addi	r4,r4,-10968
80204b5c:	0206a6c0 	call	80206a6c <fwrite>
#endif
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
80204b60:	e0bff30b 	ldhu	r2,-52(fp)
80204b64:	1084e230 	cmpltui	r2,r2,5000
80204b68:	1000051e 	bne	r2,zero,80204b80 <msgdma_descriptor_sync_transfer+0xac>
		{
#if DEBUG_ON
		debug(fp, "time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
80204b6c:	012008b4 	movhi	r4,32802
80204b70:	21355504 	addi	r4,r4,-10924
80204b74:	0206d140 	call	80206d14 <puts>
#endif
			return -ETIME;
80204b78:	00bff084 	movi	r2,-62
80204b7c:	0000a206 	br	80204e08 <msgdma_descriptor_sync_transfer+0x334>
		}
		counter++;
80204b80:	e0bff30b 	ldhu	r2,-52(fp)
80204b84:	10800044 	addi	r2,r2,1
80204b88:	e0bff30d 	sth	r2,-52(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80204b8c:	e0bffd17 	ldw	r2,-12(fp)
80204b90:	10800317 	ldw	r2,12(r2)
80204b94:	10800204 	addi	r2,r2,8
80204b98:	10800037 	ldwio	r2,0(r2)
		debug(fp, "time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
80204b9c:	10bfffcc 	andi	r2,r2,65535
80204ba0:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80204ba4:	e0bffd17 	ldw	r2,-12(fp)
80204ba8:	10800317 	ldw	r2,12(r2)
80204bac:	10800204 	addi	r2,r2,8
80204bb0:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
80204bb4:	1004d43a 	srli	r2,r2,16
80204bb8:	e0bff515 	stw	r2,-44(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
80204bbc:	e0bffd17 	ldw	r2,-12(fp)
80204bc0:	10800917 	ldw	r2,36(r2)
80204bc4:	e0fff517 	ldw	r3,-44(fp)
80204bc8:	18bfdc2e 	bgeu	r3,r2,80204b3c <__reset+0xfa1e4b3c>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
80204bcc:	e0bffd17 	ldw	r2,-12(fp)
80204bd0:	10800917 	ldw	r2,36(r2)
80204bd4:	e0fff417 	ldw	r3,-48(fp)
80204bd8:	18bfd82e 	bgeu	r3,r2,80204b3c <__reset+0xfa1e4b3c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80204bdc:	0005303a 	rdctl	r2,status
80204be0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80204be4:	e0fffc17 	ldw	r3,-16(fp)
80204be8:	00bfff84 	movi	r2,-2
80204bec:	1884703a 	and	r2,r3,r2
80204bf0:	1001703a 	wrctl	status,r2
  
  return context;
80204bf4:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
80204bf8:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80204bfc:	e0bffd17 	ldw	r2,-12(fp)
80204c00:	10800317 	ldw	r2,12(r2)
80204c04:	10800104 	addi	r2,r2,4
80204c08:	00c00804 	movi	r3,32
80204c0c:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
80204c10:	e0bffd17 	ldw	r2,-12(fp)
80204c14:	10800317 	ldw	r2,12(r2)
80204c18:	e0fffd17 	ldw	r3,-12(fp)
80204c1c:	18c00317 	ldw	r3,12(r3)
80204c20:	18c00037 	ldwio	r3,0(r3)
80204c24:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
80204c28:	e0bffe17 	ldw	r2,-8(fp)
80204c2c:	10000826 	beq	r2,zero,80204c50 <msgdma_descriptor_sync_transfer+0x17c>
80204c30:	e0bfff17 	ldw	r2,-4(fp)
80204c34:	1000061e 	bne	r2,zero,80204c50 <msgdma_descriptor_sync_transfer+0x17c>
		counter = 0; /* reset counter */
80204c38:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		#if DEBUG_ON
			debug(fp, "invalid dma descriptor option\n");
80204c3c:	012008b4 	movhi	r4,32802
80204c40:	21352c04 	addi	r4,r4,-11088
80204c44:	0206d140 	call	80206d14 <puts>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
80204c48:	00bff084 	movi	r2,-62
80204c4c:	00006e06 	br	80204e08 <msgdma_descriptor_sync_transfer+0x334>
	} else if (NULL == standard_desc && NULL != extended_desc) {
80204c50:	e0bffe17 	ldw	r2,-8(fp)
80204c54:	10001b1e 	bne	r2,zero,80204cc4 <msgdma_descriptor_sync_transfer+0x1f0>
80204c58:	e0bfff17 	ldw	r2,-4(fp)
80204c5c:	10001926 	beq	r2,zero,80204cc4 <msgdma_descriptor_sync_transfer+0x1f0>
		counter = 0; /* reset counter */
80204c60:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
80204c64:	00000d06 	br	80204c9c <msgdma_descriptor_sync_transfer+0x1c8>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
80204c68:	01000044 	movi	r4,1
80204c6c:	0216a040 	call	80216a04 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
80204c70:	e0bff30b 	ldhu	r2,-52(fp)
80204c74:	1084e230 	cmpltui	r2,r2,5000
80204c78:	1000051e 	bne	r2,zero,80204c90 <msgdma_descriptor_sync_transfer+0x1bc>
			{
				#if DEBUG_ON
					debug(fp, "time out after 5 msec while writing extended descriptor to FIFO\n");
80204c7c:	012008b4 	movhi	r4,32802
80204c80:	21356804 	addi	r4,r4,-10848
80204c84:	0206d140 	call	80206d14 <puts>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
80204c88:	00bff084 	movi	r2,-62
80204c8c:	00005e06 	br	80204e08 <msgdma_descriptor_sync_transfer+0x334>
			}
			counter++;
80204c90:	e0bff30b 	ldhu	r2,-52(fp)
80204c94:	10800044 	addi	r2,r2,1
80204c98:	e0bff30d 	sth	r2,-52(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
80204c9c:	e0bffd17 	ldw	r2,-12(fp)
80204ca0:	10c00317 	ldw	r3,12(r2)
80204ca4:	e0bffd17 	ldw	r2,-12(fp)
80204ca8:	10800417 	ldw	r2,16(r2)
80204cac:	e1bfff17 	ldw	r6,-4(fp)
80204cb0:	100b883a 	mov	r5,r2
80204cb4:	1809883a 	mov	r4,r3
80204cb8:	02045bc0 	call	802045bc <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
80204cbc:	103fea1e 	bne	r2,zero,80204c68 <__reset+0xfa1e4c68>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
80204cc0:	00000206 	br	80204ccc <msgdma_descriptor_sync_transfer+0x1f8>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
80204cc4:	00bfffc4 	movi	r2,-1
80204cc8:	00004f06 	br	80204e08 <msgdma_descriptor_sync_transfer+0x334>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80204ccc:	e0bffd17 	ldw	r2,-12(fp)
80204cd0:	10800317 	ldw	r2,12(r2)
80204cd4:	10800104 	addi	r2,r2,4
80204cd8:	e0fffd17 	ldw	r3,-12(fp)
80204cdc:	19000d17 	ldw	r4,52(r3)
80204ce0:	00fff2c4 	movi	r3,-53
80204ce4:	20c6703a 	and	r3,r4,r3
80204ce8:	18c00114 	ori	r3,r3,4
80204cec:	10c00035 	stwio	r3,0(r2)
80204cf0:	e0bff717 	ldw	r2,-36(fp)
80204cf4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80204cf8:	e0bffb17 	ldw	r2,-20(fp)
80204cfc:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
80204d00:	e03ff30d 	sth	zero,-52(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80204d04:	e0bffd17 	ldw	r2,-12(fp)
80204d08:	10800317 	ldw	r2,12(r2)
80204d0c:	10800037 	ldwio	r2,0(r2)
80204d10:	e0bff215 	stw	r2,-56(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
80204d14:	00001106 	br	80204d5c <msgdma_descriptor_sync_transfer+0x288>
		alt_busy_sleep(1); /* delay 1us */
80204d18:	01000044 	movi	r4,1
80204d1c:	0216a040 	call	80216a04 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
80204d20:	e0bff30b 	ldhu	r2,-52(fp)
80204d24:	1084e230 	cmpltui	r2,r2,5000
80204d28:	1000051e 	bne	r2,zero,80204d40 <msgdma_descriptor_sync_transfer+0x26c>
		{
			#if DEBUG_ON
				debug(fp, "time out after 5 msec while waiting for any pending transfer complete\n");
80204d2c:	012008b4 	movhi	r4,32802
80204d30:	21357804 	addi	r4,r4,-10784
80204d34:	0206d140 	call	80206d14 <puts>
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);

			return -ETIME;
80204d38:	00bff084 	movi	r2,-62
80204d3c:	00003206 	br	80204e08 <msgdma_descriptor_sync_transfer+0x334>
		}
		counter++;
80204d40:	e0bff30b 	ldhu	r2,-52(fp)
80204d44:	10800044 	addi	r2,r2,1
80204d48:	e0bff30d 	sth	r2,-52(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80204d4c:	e0bffd17 	ldw	r2,-12(fp)
80204d50:	10800317 	ldw	r2,12(r2)
80204d54:	10800037 	ldwio	r2,0(r2)
80204d58:	e0bff215 	stw	r2,-56(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
80204d5c:	e0fff217 	ldw	r3,-56(fp)
80204d60:	e0bff817 	ldw	r2,-32(fp)
80204d64:	1884703a 	and	r2,r3,r2
80204d68:	1000031e 	bne	r2,zero,80204d78 <msgdma_descriptor_sync_transfer+0x2a4>
80204d6c:	e0bff217 	ldw	r2,-56(fp)
80204d70:	1080004c 	andi	r2,r2,1
80204d74:	103fe81e 	bne	r2,zero,80204d18 <__reset+0xfa1e4d18>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
80204d78:	e0fff217 	ldw	r3,-56(fp)
80204d7c:	e0bff817 	ldw	r2,-32(fp)
80204d80:	1884703a 	and	r2,r3,r2
80204d84:	10000226 	beq	r2,zero,80204d90 <msgdma_descriptor_sync_transfer+0x2bc>
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return error;
80204d88:	e0bff817 	ldw	r2,-32(fp)
80204d8c:	00001e06 	br	80204e08 <msgdma_descriptor_sync_transfer+0x334>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
80204d90:	e0bffd17 	ldw	r2,-12(fp)
80204d94:	10800317 	ldw	r2,12(r2)
80204d98:	10800104 	addi	r2,r2,4
80204d9c:	10800037 	ldwio	r2,0(r2)
80204da0:	10800814 	ori	r2,r2,32
80204da4:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80204da8:	0005303a 	rdctl	r2,status
80204dac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80204db0:	e0fff917 	ldw	r3,-28(fp)
80204db4:	00bfff84 	movi	r2,-2
80204db8:	1884703a 	and	r2,r3,r2
80204dbc:	1001703a 	wrctl	status,r2
  
  return context;
80204dc0:	e0bff917 	ldw	r2,-28(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
80204dc4:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80204dc8:	e0bffd17 	ldw	r2,-12(fp)
80204dcc:	10800317 	ldw	r2,12(r2)
80204dd0:	10800104 	addi	r2,r2,4
80204dd4:	e0fff617 	ldw	r3,-40(fp)
80204dd8:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
80204ddc:	e0bffd17 	ldw	r2,-12(fp)
80204de0:	10800317 	ldw	r2,12(r2)
80204de4:	e0fffd17 	ldw	r3,-12(fp)
80204de8:	18c00317 	ldw	r3,12(r3)
80204dec:	18c00037 	ldwio	r3,0(r3)
80204df0:	10c00035 	stwio	r3,0(r2)
80204df4:	e0bff717 	ldw	r2,-36(fp)
80204df8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80204dfc:	e0bffa17 	ldw	r2,-24(fp)
80204e00:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
80204e04:	0005883a 	mov	r2,zero

}
80204e08:	e037883a 	mov	sp,fp
80204e0c:	dfc00117 	ldw	ra,4(sp)
80204e10:	df000017 	ldw	fp,0(sp)
80204e14:	dec00204 	addi	sp,sp,8
80204e18:	f800283a 	ret

80204e1c <iMsgdmaConstructExtendedMmToMmDescriptor>:
int iMsgdmaConstructExtendedMmToMmDescriptor(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDescriptor, alt_u32 *puliReadAddress,
		alt_u32 *puliWriteAddress, alt_u32 uliLength, alt_u32 uliControl,
		alt_u32 *puliReadAddressHigh, alt_u32 *puliWriteAddressHigh,
		alt_u16 usiSequenceNumber, alt_u8 ucReadBurstCount,
		alt_u8 ucWriteBurstCount, alt_u16 usiReadStride, alt_u16 usiWriteStride) {
80204e1c:	deffec04 	addi	sp,sp,-80
80204e20:	dfc01315 	stw	ra,76(sp)
80204e24:	df001215 	stw	fp,72(sp)
80204e28:	df001204 	addi	fp,sp,72
80204e2c:	e13ff715 	stw	r4,-36(fp)
80204e30:	e17ff815 	stw	r5,-32(fp)
80204e34:	e1bff915 	stw	r6,-28(fp)
80204e38:	e1fffa15 	stw	r7,-24(fp)
80204e3c:	e1800617 	ldw	r6,24(fp)
80204e40:	e1400717 	ldw	r5,28(fp)
80204e44:	e1000817 	ldw	r4,32(fp)
80204e48:	e0c00917 	ldw	r3,36(fp)
80204e4c:	e0800a17 	ldw	r2,40(fp)
80204e50:	e1bffb0d 	sth	r6,-20(fp)
80204e54:	e17ffc05 	stb	r5,-16(fp)
80204e58:	e13ffd05 	stb	r4,-12(fp)
80204e5c:	e0fffe0d 	sth	r3,-8(fp)
80204e60:	e0bfff0d 	sth	r2,-4(fp)

	return msgdma_construct_extended_descriptor(pxDev, pxDescriptor,
80204e64:	e0bffb0b 	ldhu	r2,-20(fp)
80204e68:	e0fffc03 	ldbu	r3,-16(fp)
80204e6c:	e13ffd03 	ldbu	r4,-12(fp)
80204e70:	e17ffe0b 	ldhu	r5,-8(fp)
80204e74:	e1bfff0b 	ldhu	r6,-4(fp)
80204e78:	d9800815 	stw	r6,32(sp)
80204e7c:	d9400715 	stw	r5,28(sp)
80204e80:	d9000615 	stw	r4,24(sp)
80204e84:	d8c00515 	stw	r3,20(sp)
80204e88:	d8800415 	stw	r2,16(sp)
80204e8c:	e0800517 	ldw	r2,20(fp)
80204e90:	d8800315 	stw	r2,12(sp)
80204e94:	e0800417 	ldw	r2,16(fp)
80204e98:	d8800215 	stw	r2,8(sp)
80204e9c:	e0800317 	ldw	r2,12(fp)
80204ea0:	d8800115 	stw	r2,4(sp)
80204ea4:	e0800217 	ldw	r2,8(fp)
80204ea8:	d8800015 	stw	r2,0(sp)
80204eac:	e1fffa17 	ldw	r7,-24(fp)
80204eb0:	e1bff917 	ldw	r6,-28(fp)
80204eb4:	e17ff817 	ldw	r5,-32(fp)
80204eb8:	e13ff717 	ldw	r4,-36(fp)
80204ebc:	02046f00 	call	802046f0 <msgdma_construct_extended_descriptor>
			puliReadAddress, puliWriteAddress, uliLength, uliControl,
			puliReadAddressHigh, puliWriteAddressHigh, usiSequenceNumber,
			ucReadBurstCount, ucWriteBurstCount, usiReadStride, usiWriteStride);

}
80204ec0:	e037883a 	mov	sp,fp
80204ec4:	dfc00117 	ldw	ra,4(sp)
80204ec8:	df000017 	ldw	fp,0(sp)
80204ecc:	dec00204 	addi	sp,sp,8
80204ed0:	f800283a 	ret

80204ed4 <iMsgdmaExtendedDescriptorAsyncTransfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int iMsgdmaExtendedDescriptorAsyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
80204ed4:	defffc04 	addi	sp,sp,-16
80204ed8:	dfc00315 	stw	ra,12(sp)
80204edc:	df000215 	stw	fp,8(sp)
80204ee0:	df000204 	addi	fp,sp,8
80204ee4:	e13ffe15 	stw	r4,-8(fp)
80204ee8:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(pxDev, NULL, pxDesc);
80204eec:	e1bfff17 	ldw	r6,-4(fp)
80204ef0:	000b883a 	mov	r5,zero
80204ef4:	e13ffe17 	ldw	r4,-8(fp)
80204ef8:	020484c0 	call	8020484c <msgdma_descriptor_async_transfer>
}
80204efc:	e037883a 	mov	sp,fp
80204f00:	dfc00117 	ldw	ra,4(sp)
80204f04:	df000017 	ldw	fp,0(sp)
80204f08:	dec00204 	addi	sp,sp,8
80204f0c:	f800283a 	ret

80204f10 <iMsgdmaExtendedDescriptorSyncTransfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int iMsgdmaExtendedDescriptorSyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
80204f10:	defffc04 	addi	sp,sp,-16
80204f14:	dfc00315 	stw	ra,12(sp)
80204f18:	df000215 	stw	fp,8(sp)
80204f1c:	df000204 	addi	fp,sp,8
80204f20:	e13ffe15 	stw	r4,-8(fp)
80204f24:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(pxDev, NULL, pxDesc);
80204f28:	e1bfff17 	ldw	r6,-4(fp)
80204f2c:	000b883a 	mov	r5,zero
80204f30:	e13ffe17 	ldw	r4,-8(fp)
80204f34:	0204ad40 	call	80204ad4 <msgdma_descriptor_sync_transfer>
}
80204f38:	e037883a 	mov	sp,fp
80204f3c:	dfc00117 	ldw	ra,4(sp)
80204f40:	df000017 	ldw	fp,0(sp)
80204f44:	dec00204 	addi	sp,sp,8
80204f48:	f800283a 	ret

80204f4c <POWER_SPI_RW>:
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(CSENSE_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(CSENSE_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock
// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN,
		bool bSGL, alt_u32 *pValue) {
80204f4c:	defff204 	addi	sp,sp,-56
80204f50:	dfc00d15 	stw	ra,52(sp)
80204f54:	df000c15 	stw	fp,48(sp)
80204f58:	df000c04 	addi	fp,sp,48
80204f5c:	2007883a 	mov	r3,r4
80204f60:	2805883a 	mov	r2,r5
80204f64:	e1bffe15 	stw	r6,-8(fp)
80204f68:	e1ffff15 	stw	r7,-4(fp)
80204f6c:	e0fffc05 	stb	r3,-16(fp)
80204f70:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u8 Config8;
	alt_u32 Value32 = 0, Mask32;
80204f74:	e03ff515 	stw	zero,-44(fp)
	int i, nWait = 0, nZeroCnt;
80204f78:	e03ff815 	stw	zero,-32(fp)
	const int nMaxWait = 1000000;
80204f7c:	008003f4 	movhi	r2,15
80204f80:	10909004 	addi	r2,r2,16960
80204f84:	e0bffa15 	stw	r2,-24(fp)

	//
	Config8 = 0x80;
80204f88:	00bfe004 	movi	r2,-128
80204f8c:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bEN) ? 0x20 : 0x00;
80204f90:	e0bffe17 	ldw	r2,-8(fp)
80204f94:	10000226 	beq	r2,zero,80204fa0 <POWER_SPI_RW+0x54>
80204f98:	00800804 	movi	r2,32
80204f9c:	00000106 	br	80204fa4 <POWER_SPI_RW+0x58>
80204fa0:	0005883a 	mov	r2,zero
80204fa4:	e0fff403 	ldbu	r3,-48(fp)
80204fa8:	10c4b03a 	or	r2,r2,r3
80204fac:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSGL) ? 0x10 : 0x00;
80204fb0:	e0800217 	ldw	r2,8(fp)
80204fb4:	10000226 	beq	r2,zero,80204fc0 <POWER_SPI_RW+0x74>
80204fb8:	00800404 	movi	r2,16
80204fbc:	00000106 	br	80204fc4 <POWER_SPI_RW+0x78>
80204fc0:	0005883a 	mov	r2,zero
80204fc4:	e0fff403 	ldbu	r3,-48(fp)
80204fc8:	10c4b03a 	or	r2,r2,r3
80204fcc:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSIGN) ? 0x08 : 0x00;
80204fd0:	e0bfff17 	ldw	r2,-4(fp)
80204fd4:	10000226 	beq	r2,zero,80204fe0 <POWER_SPI_RW+0x94>
80204fd8:	00800204 	movi	r2,8
80204fdc:	00000106 	br	80204fe4 <POWER_SPI_RW+0x98>
80204fe0:	0005883a 	mov	r2,zero
80204fe4:	e0fff403 	ldbu	r3,-48(fp)
80204fe8:	10c4b03a 	or	r2,r2,r3
80204fec:	e0bff405 	stb	r2,-48(fp)
	Config8 |= NextChannel & 0x07; // channel
80204ff0:	e0bffd03 	ldbu	r2,-12(fp)
80204ff4:	108001cc 	andi	r2,r2,7
80204ff8:	1007883a 	mov	r3,r2
80204ffc:	e0bff403 	ldbu	r2,-48(fp)
80205000:	1884b03a 	or	r2,r3,r2
80205004:	e0bff405 	stb	r2,-48(fp)

	SPI_FO(0); // use internal conversion clock
80205008:	0007883a 	mov	r3,zero
8020500c:	00a04034 	movhi	r2,33024
80205010:	10813404 	addi	r2,r2,1232
80205014:	10c00035 	stwio	r3,0(r2)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
80205018:	0007883a 	mov	r3,zero
8020501c:	00a04034 	movhi	r2,33024
80205020:	10813c04 	addi	r2,r2,1264
80205024:	10c00035 	stwio	r3,0(r2)
	SPI_CS_N(IcIndex, 0);  // chip select: active
80205028:	e0bffc03 	ldbu	r2,-16(fp)
8020502c:	1000021e 	bne	r2,zero,80205038 <POWER_SPI_RW+0xec>
80205030:	00c00084 	movi	r3,2
80205034:	00000106 	br	8020503c <POWER_SPI_RW+0xf0>
80205038:	00c00044 	movi	r3,1
8020503c:	00a04034 	movhi	r2,33024
80205040:	10813804 	addi	r2,r2,1248
80205044:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
80205048:	010003c4 	movi	r4,15
8020504c:	02175940 	call	80217594 <usleep>

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
80205050:	00000306 	br	80205060 <POWER_SPI_RW+0x114>
		nWait++;
80205054:	e0bff817 	ldw	r2,-32(fp)
80205058:	10800044 	addi	r2,r2,1
8020505c:	e0bff815 	stw	r2,-32(fp)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
	SPI_CS_N(IcIndex, 0);  // chip select: active
	SPI_DELAY;

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
80205060:	00a04034 	movhi	r2,33024
80205064:	10814404 	addi	r2,r2,1296
80205068:	10800037 	ldwio	r2,0(r2)
8020506c:	1080004c 	andi	r2,r2,1
80205070:	10000326 	beq	r2,zero,80205080 <POWER_SPI_RW+0x134>
80205074:	e0fff817 	ldw	r3,-32(fp)
80205078:	e0bffa17 	ldw	r2,-24(fp)
8020507c:	18bff516 	blt	r3,r2,80205054 <__reset+0xfa1e5054>
		nWait++;
	}

	if (SPI_SDO) {
80205080:	00a04034 	movhi	r2,33024
80205084:	10814404 	addi	r2,r2,1296
80205088:	10800037 	ldwio	r2,0(r2)
8020508c:	1080004c 	andi	r2,r2,1
80205090:	10000626 	beq	r2,zero,802050ac <POWER_SPI_RW+0x160>
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
80205094:	00c000c4 	movi	r3,3
80205098:	00a04034 	movhi	r2,33024
8020509c:	10813804 	addi	r2,r2,1248
802050a0:	10c00035 	stwio	r3,0(r2)
		return FALSE;
802050a4:	0005883a 	mov	r2,zero
802050a8:	0000db06 	br	80205418 <POWER_SPI_RW+0x4cc>
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
802050ac:	e03ff715 	stw	zero,-36(fp)
802050b0:	00002406 	br	80205144 <POWER_SPI_RW+0x1f8>
			// ignore EOC/ and DMY bits
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0);    //sdi=nextch.7; // put data on pin
802050b4:	e0bff403 	ldbu	r2,-48(fp)
802050b8:	10803fcc 	andi	r2,r2,255
802050bc:	1004d1fa 	srli	r2,r2,7
802050c0:	10c03fcc 	andi	r3,r2,255
802050c4:	00a04034 	movhi	r2,33024
802050c8:	10814004 	addi	r2,r2,1280
802050cc:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
802050d0:	e0bff403 	ldbu	r2,-48(fp)
802050d4:	1085883a 	add	r2,r2,r2
802050d8:	e0bff405 	stb	r2,-48(fp)
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
802050dc:	e0bff517 	ldw	r2,-44(fp)
802050e0:	1085883a 	add	r2,r2,r2
802050e4:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
802050e8:	00a04034 	movhi	r2,33024
802050ec:	10814404 	addi	r2,r2,1296
802050f0:	10800037 	ldwio	r2,0(r2)
802050f4:	1080004c 	andi	r2,r2,1
802050f8:	1007883a 	mov	r3,r2
802050fc:	e0bff517 	ldw	r2,-44(fp)
80205100:	10c4b03a 	or	r2,r2,r3
80205104:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
80205108:	00c00044 	movi	r3,1
8020510c:	00a04034 	movhi	r2,33024
80205110:	10813c04 	addi	r2,r2,1264
80205114:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80205118:	010003c4 	movi	r4,15
8020511c:	02175940 	call	80217594 <usleep>
		SPI_SCK(0); //sck=0; // clock low
80205120:	0007883a 	mov	r3,zero
80205124:	00a04034 	movhi	r2,33024
80205128:	10813c04 	addi	r2,r2,1264
8020512c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80205130:	010003c4 	movi	r4,15
80205134:	02175940 	call	80217594 <usleep>
	if (SPI_SDO) {
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
		return FALSE;
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
80205138:	e0bff717 	ldw	r2,-36(fp)
8020513c:	10800044 	addi	r2,r2,1
80205140:	e0bff715 	stw	r2,-36(fp)
80205144:	e0bff717 	ldw	r2,-36(fp)
80205148:	10800090 	cmplti	r2,r2,2
8020514c:	103fd91e 	bne	r2,zero,802050b4 <__reset+0xfa1e50b4>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
80205150:	e03ff715 	stw	zero,-36(fp)
80205154:	00002406 	br	802051e8 <POWER_SPI_RW+0x29c>
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0); //sdi=nextch.7; // put data on pin
80205158:	e0bff403 	ldbu	r2,-48(fp)
8020515c:	10803fcc 	andi	r2,r2,255
80205160:	1004d1fa 	srli	r2,r2,7
80205164:	10c03fcc 	andi	r3,r2,255
80205168:	00a04034 	movhi	r2,33024
8020516c:	10814004 	addi	r2,r2,1280
80205170:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
80205174:	e0bff403 	ldbu	r2,-48(fp)
80205178:	1085883a 	add	r2,r2,r2
8020517c:	e0bff405 	stb	r2,-48(fp)

		Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
80205180:	e0bff517 	ldw	r2,-44(fp)
80205184:	1085883a 	add	r2,r2,r2
80205188:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
8020518c:	00a04034 	movhi	r2,33024
80205190:	10814404 	addi	r2,r2,1296
80205194:	10800037 	ldwio	r2,0(r2)
80205198:	1080004c 	andi	r2,r2,1
8020519c:	1007883a 	mov	r3,r2
802051a0:	e0bff517 	ldw	r2,-44(fp)
802051a4:	10c4b03a 	or	r2,r2,r3
802051a8:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
802051ac:	00c00044 	movi	r3,1
802051b0:	00a04034 	movhi	r2,33024
802051b4:	10813c04 	addi	r2,r2,1264
802051b8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802051bc:	010003c4 	movi	r4,15
802051c0:	02175940 	call	80217594 <usleep>
		SPI_SCK(0); //sck=0; // clock low
802051c4:	0007883a 	mov	r3,zero
802051c8:	00a04034 	movhi	r2,33024
802051cc:	10813c04 	addi	r2,r2,1264
802051d0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802051d4:	010003c4 	movi	r4,15
802051d8:	02175940 	call	80217594 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
802051dc:	e0bff717 	ldw	r2,-36(fp)
802051e0:	10800044 	addi	r2,r2,1
802051e4:	e0bff715 	stw	r2,-36(fp)
802051e8:	e0bff717 	ldw	r2,-36(fp)
802051ec:	10800210 	cmplti	r2,r2,8
802051f0:	103fd91e 	bne	r2,zero,80205158 <__reset+0xfa1e5158>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
802051f4:	e03ff715 	stw	zero,-36(fp)
802051f8:	00001a06 	br	80205264 <POWER_SPI_RW+0x318>
			{
		Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
802051fc:	e0bff517 	ldw	r2,-44(fp)
80205200:	1085883a 	add	r2,r2,r2
80205204:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
80205208:	00a04034 	movhi	r2,33024
8020520c:	10814404 	addi	r2,r2,1296
80205210:	10800037 	ldwio	r2,0(r2)
80205214:	1080004c 	andi	r2,r2,1
80205218:	1007883a 	mov	r3,r2
8020521c:	e0bff517 	ldw	r2,-44(fp)
80205220:	10c4b03a 	or	r2,r2,r3
80205224:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
80205228:	00c00044 	movi	r3,1
8020522c:	00a04034 	movhi	r2,33024
80205230:	10813c04 	addi	r2,r2,1264
80205234:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80205238:	010003c4 	movi	r4,15
8020523c:	02175940 	call	80217594 <usleep>
		SPI_SCK(0); //sck=0; // clock low
80205240:	0007883a 	mov	r3,zero
80205244:	00a04034 	movhi	r2,33024
80205248:	10813c04 	addi	r2,r2,1264
8020524c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80205250:	010003c4 	movi	r4,15
80205254:	02175940 	call	80217594 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
80205258:	e0bff717 	ldw	r2,-36(fp)
8020525c:	10800044 	addi	r2,r2,1
80205260:	e0bff715 	stw	r2,-36(fp)
80205264:	e0bff717 	ldw	r2,-36(fp)
80205268:	10800210 	cmplti	r2,r2,8
8020526c:	103fe31e 	bne	r2,zero,802051fc <__reset+0xfa1e51fc>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
80205270:	e03ff715 	stw	zero,-36(fp)
80205274:	00001a06 	br	802052e0 <POWER_SPI_RW+0x394>
			{
		Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
80205278:	e0bff517 	ldw	r2,-44(fp)
8020527c:	1085883a 	add	r2,r2,r2
80205280:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_1.0 = sdo; // load lsb
80205284:	00a04034 	movhi	r2,33024
80205288:	10814404 	addi	r2,r2,1296
8020528c:	10800037 	ldwio	r2,0(r2)
80205290:	1080004c 	andi	r2,r2,1
80205294:	1007883a 	mov	r3,r2
80205298:	e0bff517 	ldw	r2,-44(fp)
8020529c:	10c4b03a 	or	r2,r2,r3
802052a0:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
802052a4:	00c00044 	movi	r3,1
802052a8:	00a04034 	movhi	r2,33024
802052ac:	10813c04 	addi	r2,r2,1264
802052b0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802052b4:	010003c4 	movi	r4,15
802052b8:	02175940 	call	80217594 <usleep>
		SPI_SCK(0); //sck=0; // clock low
802052bc:	0007883a 	mov	r3,zero
802052c0:	00a04034 	movhi	r2,33024
802052c4:	10813c04 	addi	r2,r2,1264
802052c8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802052cc:	010003c4 	movi	r4,15
802052d0:	02175940 	call	80217594 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
802052d4:	e0bff717 	ldw	r2,-36(fp)
802052d8:	10800044 	addi	r2,r2,1
802052dc:	e0bff715 	stw	r2,-36(fp)
802052e0:	e0bff717 	ldw	r2,-36(fp)
802052e4:	10800210 	cmplti	r2,r2,8
802052e8:	103fe31e 	bne	r2,zero,80205278 <__reset+0xfa1e5278>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
802052ec:	e03ff715 	stw	zero,-36(fp)
802052f0:	00001a06 	br	8020535c <POWER_SPI_RW+0x410>
			{
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
802052f4:	e0bff517 	ldw	r2,-44(fp)
802052f8:	1085883a 	add	r2,r2,r2
802052fc:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
80205300:	00a04034 	movhi	r2,33024
80205304:	10814404 	addi	r2,r2,1296
80205308:	10800037 	ldwio	r2,0(r2)
8020530c:	1080004c 	andi	r2,r2,1
80205310:	1007883a 	mov	r3,r2
80205314:	e0bff517 	ldw	r2,-44(fp)
80205318:	10c4b03a 	or	r2,r2,r3
8020531c:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
80205320:	00c00044 	movi	r3,1
80205324:	00a04034 	movhi	r2,33024
80205328:	10813c04 	addi	r2,r2,1264
8020532c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80205330:	010003c4 	movi	r4,15
80205334:	02175940 	call	80217594 <usleep>
		SPI_SCK(0); //sck=0; // clock low
80205338:	0007883a 	mov	r3,zero
8020533c:	00a04034 	movhi	r2,33024
80205340:	10813c04 	addi	r2,r2,1264
80205344:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80205348:	010003c4 	movi	r4,15
8020534c:	02175940 	call	80217594 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
80205350:	e0bff717 	ldw	r2,-36(fp)
80205354:	10800044 	addi	r2,r2,1
80205358:	e0bff715 	stw	r2,-36(fp)
8020535c:	e0bff717 	ldw	r2,-36(fp)
80205360:	10800190 	cmplti	r2,r2,6
80205364:	103fe31e 	bne	r2,zero,802052f4 <__reset+0xfa1e52f4>
		SPI_SCK(1); //sck=1; // clock high
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}
	SPI_SCK(1);
80205368:	00c00044 	movi	r3,1
8020536c:	00a04034 	movhi	r2,33024
80205370:	10813c04 	addi	r2,r2,1264
80205374:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
80205378:	010003c4 	movi	r4,15
8020537c:	02175940 	call	80217594 <usleep>
	SPI_CS_N(IcIndex, 1);  // chip select: inactive
80205380:	00c000c4 	movi	r3,3
80205384:	00a04034 	movhi	r2,33024
80205388:	10813804 	addi	r2,r2,1248
8020538c:	10c00035 	stwio	r3,0(r2)

	// check parity
	nZeroCnt = 0;
80205390:	e03ff915 	stw	zero,-28(fp)
	Mask32 = 0x01;
80205394:	00800044 	movi	r2,1
80205398:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < 32; i++) {
8020539c:	e03ff715 	stw	zero,-36(fp)
802053a0:	00000d06 	br	802053d8 <POWER_SPI_RW+0x48c>
		if ((Value32 & Mask32) == 0x00) {
802053a4:	e0fff517 	ldw	r3,-44(fp)
802053a8:	e0bff617 	ldw	r2,-40(fp)
802053ac:	1884703a 	and	r2,r3,r2
802053b0:	1000031e 	bne	r2,zero,802053c0 <POWER_SPI_RW+0x474>
			nZeroCnt++;
802053b4:	e0bff917 	ldw	r2,-28(fp)
802053b8:	10800044 	addi	r2,r2,1
802053bc:	e0bff915 	stw	r2,-28(fp)
		}
		Mask32 <<= 1;
802053c0:	e0bff617 	ldw	r2,-40(fp)
802053c4:	1085883a 	add	r2,r2,r2
802053c8:	e0bff615 	stw	r2,-40(fp)
	SPI_CS_N(IcIndex, 1);  // chip select: inactive

	// check parity
	nZeroCnt = 0;
	Mask32 = 0x01;
	for (i = 0; i < 32; i++) {
802053cc:	e0bff717 	ldw	r2,-36(fp)
802053d0:	10800044 	addi	r2,r2,1
802053d4:	e0bff715 	stw	r2,-36(fp)
802053d8:	e0bff717 	ldw	r2,-36(fp)
802053dc:	10800810 	cmplti	r2,r2,32
802053e0:	103ff01e 	bne	r2,zero,802053a4 <__reset+0xfa1e53a4>
		if ((Value32 & Mask32) == 0x00) {
			nZeroCnt++;
		}
		Mask32 <<= 1;
	}
	bSuccess = (nZeroCnt & 0x01) ? FALSE : TRUE;
802053e4:	e0bff917 	ldw	r2,-28(fp)
802053e8:	1080004c 	andi	r2,r2,1
802053ec:	1005003a 	cmpeq	r2,r2,zero
802053f0:	10803fcc 	andi	r2,r2,255
802053f4:	e0bffb15 	stw	r2,-20(fp)
	if (!bSuccess) {
802053f8:	e0bffb17 	ldw	r2,-20(fp)
802053fc:	1000021e 	bne	r2,zero,80205408 <POWER_SPI_RW+0x4bc>
		return FALSE;
80205400:	0005883a 	mov	r2,zero
80205404:	00000406 	br	80205418 <POWER_SPI_RW+0x4cc>
	}

	*pValue = Value32;
80205408:	e0800317 	ldw	r2,12(fp)
8020540c:	e0fff517 	ldw	r3,-44(fp)
80205410:	10c00015 	stw	r3,0(r2)

	return bSuccess;
80205414:	e0bffb17 	ldw	r2,-20(fp)
}
80205418:	e037883a 	mov	sp,fp
8020541c:	dfc00117 	ldw	ra,4(sp)
80205420:	df000017 	ldw	fp,0(sp)
80205424:	dec00204 	addi	sp,sp,8
80205428:	f800283a 	ret

8020542c <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
8020542c:	defffd04 	addi	sp,sp,-12
80205430:	df000215 	stw	fp,8(sp)
80205434:	df000204 	addi	fp,sp,8
80205438:	2005883a 	mov	r2,r4
8020543c:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
80205440:	e0bfff03 	ldbu	r2,-4(fp)
80205444:	10c00168 	cmpgeui	r3,r2,5
80205448:	18001c1e 	bne	r3,zero,802054bc <bSSDisplayConfig+0x90>
8020544c:	100690ba 	slli	r3,r2,2
80205450:	00a00834 	movhi	r2,32800
80205454:	10951904 	addi	r2,r2,21604
80205458:	1885883a 	add	r2,r3,r2
8020545c:	10800017 	ldw	r2,0(r2)
80205460:	1000683a 	jmp	r2
80205464:	80205478 	rdprs	zero,r16,-32431
80205468:	80205484 	addi	zero,r16,-32430
8020546c:	80205490 	cmplti	zero,r16,-32430
80205470:	802054a4 	muli	zero,r16,-32430
80205474:	802054b4 	orhi	zero,r16,33106
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
80205478:	00800cc4 	movi	r2,51
8020547c:	d0a01a45 	stb	r2,-32663(gp)
	    break;
80205480:	00001006 	br	802054c4 <bSSDisplayConfig+0x98>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
80205484:	00801544 	movi	r2,85
80205488:	d0a01a45 	stb	r2,-32663(gp)
	    break;
8020548c:	00000d06 	br	802054c4 <bSSDisplayConfig+0x98>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
80205490:	d0e01a43 	ldbu	r3,-32663(gp)
80205494:	00bff744 	movi	r2,-35
80205498:	1884703a 	and	r2,r3,r2
8020549c:	d0a01a45 	stb	r2,-32663(gp)
	    break;
802054a0:	00000806 	br	802054c4 <bSSDisplayConfig+0x98>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
802054a4:	d0a01a43 	ldbu	r2,-32663(gp)
802054a8:	10800894 	ori	r2,r2,34
802054ac:	d0a01a45 	stb	r2,-32663(gp)
	    break;
802054b0:	00000406 	br	802054c4 <bSSDisplayConfig+0x98>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
802054b4:	d0201a45 	stb	zero,-32663(gp)
	    break;
802054b8:	00000206 	br	802054c4 <bSSDisplayConfig+0x98>
		
		default:
		    return FALSE;
802054bc:	0005883a 	mov	r2,zero
802054c0:	00000806 	br	802054e4 <bSSDisplayConfig+0xb8>
	}

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
802054c4:	00a04034 	movhi	r2,33024
802054c8:	10817404 	addi	r2,r2,1488
802054cc:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
802054d0:	d0a01a43 	ldbu	r2,-32663(gp)
802054d4:	10c03fcc 	andi	r3,r2,255
802054d8:	e0bffe17 	ldw	r2,-8(fp)
802054dc:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
802054e0:	00800044 	movi	r2,1
}
802054e4:	e037883a 	mov	sp,fp
802054e8:	df000017 	ldw	fp,0(sp)
802054ec:	dec00104 	addi	sp,sp,4
802054f0:	f800283a 	ret

802054f4 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
802054f4:	defffd04 	addi	sp,sp,-12
802054f8:	df000215 	stw	fp,8(sp)
802054fc:	df000204 	addi	fp,sp,8
80205500:	2005883a 	mov	r2,r4
80205504:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
80205508:	00a04034 	movhi	r2,33024
8020550c:	10817404 	addi	r2,r2,1488
80205510:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
80205514:	e0bffe17 	ldw	r2,-8(fp)
80205518:	10800104 	addi	r2,r2,4
8020551c:	e0ffff03 	ldbu	r3,-4(fp)
80205520:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
80205524:	00800044 	movi	r2,1
}
80205528:	e037883a 	mov	sp,fp
8020552c:	df000017 	ldw	fp,0(sp)
80205530:	dec00104 	addi	sp,sp,4
80205534:	f800283a 	ret

80205538 <vFtdiHandleIrq>:
	TPixelBlock xPixelBlocks[162802];
} THalfCcdImage;

static volatile int viFtdiHoldContext;

void vFtdiHandleIrq(void* pvContext) {
80205538:	defffb04 	addi	sp,sp,-20
8020553c:	dfc00415 	stw	ra,16(sp)
80205540:	df000315 	stw	fp,12(sp)
80205544:	df000304 	addi	fp,sp,12
80205548:	e13fff15 	stw	r4,-4(fp)
	//volatile int* pviHoldContext = (volatile int*) pvContext;
	volatile TFtdiModule *vpxFtdiModule = (TFtdiModule *)USB_3_FTDI_0_BASE;
8020554c:	00a00034 	movhi	r2,32768
80205550:	e0bffd15 	stw	r2,-12(fp)
	alt_u32 uliTransferSize = 0;
80205554:	e03ffe15 	stw	zero,-8(fp)

	if (vpxFtdiModule->xFtdiRxIrqFlag.bRxBuff0RdableIrqFlag) {
80205558:	e0bffd17 	ldw	r2,-12(fp)
8020555c:	10800617 	ldw	r2,24(r2)
80205560:	10001326 	beq	r2,zero,802055b0 <vFtdiHandleIrq+0x78>
		vpxFtdiModule->xFtdiRxIrqFlagClr.bRxBuff0RdableIrqFlagClr = TRUE;
80205564:	e0bffd17 	ldw	r2,-12(fp)
80205568:	00c00044 	movi	r3,1
8020556c:	10c00b15 	stw	r3,44(r2)

		uliTransferSize = vpxFtdiModule->xFtdiRxBufferStatus.usiRxBuff0UsedBytes;
80205570:	e0bffd17 	ldw	r2,-12(fp)
80205574:	1080230b 	ldhu	r2,140(r2)
80205578:	10bfffcc 	andi	r2,r2,65535
8020557c:	e0bffe15 	stw	r2,-8(fp)
		bSdmaDmaM2FtdiTransfer((alt_u32 *)uliPaylodOffset, uliTransferSize, eSdmaRxFtdi);
80205580:	d0a01f17 	ldw	r2,-32644(gp)
80205584:	1007883a 	mov	r3,r2
80205588:	e0bffe17 	ldw	r2,-8(fp)
8020558c:	10bfffcc 	andi	r2,r2,65535
80205590:	01800044 	movi	r6,1
80205594:	100b883a 	mov	r5,r2
80205598:	1809883a 	mov	r4,r3
8020559c:	020324c0 	call	8020324c <bSdmaDmaM2FtdiTransfer>
		uliPaylodOffset += uliTransferSize;
802055a0:	d0e01f17 	ldw	r3,-32644(gp)
802055a4:	e0bffe17 	ldw	r2,-8(fp)
802055a8:	1885883a 	add	r2,r3,r2
802055ac:	d0a01f15 	stw	r2,-32644(gp)

	}

	if (vpxFtdiModule->xFtdiRxIrqFlag.bRxBuff1RdableIrqFlag) {
802055b0:	e0bffd17 	ldw	r2,-12(fp)
802055b4:	10800717 	ldw	r2,28(r2)
802055b8:	10001826 	beq	r2,zero,8020561c <vFtdiHandleIrq+0xe4>
		vpxFtdiModule->xFtdiRxIrqFlagClr.bRxBuff1RdableIrqFlagClr = TRUE;
802055bc:	e0bffd17 	ldw	r2,-12(fp)
802055c0:	00c00044 	movi	r3,1
802055c4:	10c00c15 	stw	r3,48(r2)

		uliTransferSize = vpxFtdiModule->xFtdiRxBufferStatus.usiRxBuff1UsedBytes;
802055c8:	e0bffd17 	ldw	r2,-12(fp)
802055cc:	1080270b 	ldhu	r2,156(r2)
802055d0:	10bfffcc 	andi	r2,r2,65535
802055d4:	e0bffe15 	stw	r2,-8(fp)
		bSdmaDmaM2FtdiTransfer((alt_u32 *)uliPaylodOffset, uliTransferSize, eSdmaRxFtdi);
802055d8:	d0a01f17 	ldw	r2,-32644(gp)
802055dc:	1007883a 	mov	r3,r2
802055e0:	e0bffe17 	ldw	r2,-8(fp)
802055e4:	10bfffcc 	andi	r2,r2,65535
802055e8:	01800044 	movi	r6,1
802055ec:	100b883a 	mov	r5,r2
802055f0:	1809883a 	mov	r4,r3
802055f4:	020324c0 	call	8020324c <bSdmaDmaM2FtdiTransfer>
		uliPaylodOffset += uliTransferSize;
802055f8:	d0e01f17 	ldw	r3,-32644(gp)
802055fc:	e0bffe17 	ldw	r2,-8(fp)
80205600:	1885883a 	add	r2,r3,r2
80205604:	d0a01f15 	stw	r2,-32644(gp)

		if (uliTransferSize < FTDI_BUFFER_SIZE_TRANSFER) {
80205608:	e0bffe17 	ldw	r2,-8(fp)
8020560c:	10880028 	cmpgeui	r2,r2,8192
80205610:	1000021e 	bne	r2,zero,8020561c <vFtdiHandleIrq+0xe4>
			bStopRx = TRUE;
80205614:	00800044 	movi	r2,1
80205618:	d0a02015 	stw	r2,-32640(gp)
		}

	}

	if (vpxFtdiModule->xFtdiRxIrqFlag.bRxBuffLastRdableIrqFlag) {
8020561c:	e0bffd17 	ldw	r2,-12(fp)
80205620:	10800817 	ldw	r2,32(r2)
80205624:	10001826 	beq	r2,zero,80205688 <vFtdiHandleIrq+0x150>
		vpxFtdiModule->xFtdiRxIrqFlagClr.bRxBuffLastRdableIrqFlagClr = TRUE;
80205628:	e0bffd17 	ldw	r2,-12(fp)
8020562c:	00c00044 	movi	r3,1
80205630:	10c00d15 	stw	r3,52(r2)

		uliTransferSize = vpxFtdiModule->xFtdiRxBufferStatus.usiRxDbuffUsedBytes;
80205634:	e0bffd17 	ldw	r2,-12(fp)
80205638:	10802b0b 	ldhu	r2,172(r2)
8020563c:	10bfffcc 	andi	r2,r2,65535
80205640:	e0bffe15 	stw	r2,-8(fp)
		bSdmaDmaM2FtdiTransfer((alt_u32 *)uliPaylodOffset, uliTransferSize, eSdmaRxFtdi);
80205644:	d0a01f17 	ldw	r2,-32644(gp)
80205648:	1007883a 	mov	r3,r2
8020564c:	e0bffe17 	ldw	r2,-8(fp)
80205650:	10bfffcc 	andi	r2,r2,65535
80205654:	01800044 	movi	r6,1
80205658:	100b883a 	mov	r5,r2
8020565c:	1809883a 	mov	r4,r3
80205660:	020324c0 	call	8020324c <bSdmaDmaM2FtdiTransfer>
		uliPaylodOffset += uliTransferSize;
80205664:	d0e01f17 	ldw	r3,-32644(gp)
80205668:	e0bffe17 	ldw	r2,-8(fp)
8020566c:	1885883a 	add	r2,r3,r2
80205670:	d0a01f15 	stw	r2,-32644(gp)

		if (uliTransferSize < FTDI_BUFFER_SIZE_TRANSFER) {
80205674:	e0bffe17 	ldw	r2,-8(fp)
80205678:	10880028 	cmpgeui	r2,r2,8192
8020567c:	1000021e 	bne	r2,zero,80205688 <vFtdiHandleIrq+0x150>
			bStopRx = TRUE;
80205680:	00800044 	movi	r2,1
80205684:	d0a02015 	stw	r2,-32640(gp)
		}

	}

	if (vpxFtdiModule->xFtdiRxIrqFlag.bRxBuffLastEmptyIrqFlag) {
80205688:	e0bffd17 	ldw	r2,-12(fp)
8020568c:	10800917 	ldw	r2,36(r2)
80205690:	10000626 	beq	r2,zero,802056ac <vFtdiHandleIrq+0x174>
		vpxFtdiModule->xFtdiRxIrqFlagClr.bRxBuffLastEmptyIrqFlagClr = TRUE;
80205694:	e0bffd17 	ldw	r2,-12(fp)
80205698:	00c00044 	movi	r3,1
8020569c:	10c00e15 	stw	r3,56(r2)

		uliTransferSize = 0;
802056a0:	e03ffe15 	stw	zero,-8(fp)
		bStopRx = TRUE;
802056a4:	00800044 	movi	r2,1
802056a8:	d0a02015 	stw	r2,-32640(gp)

	}

	if (vpxFtdiModule->xFtdiRxIrqFlag.bRxCommErrIrqFlag) {
802056ac:	e0bffd17 	ldw	r2,-12(fp)
802056b0:	10800a17 	ldw	r2,40(r2)
802056b4:	10000626 	beq	r2,zero,802056d0 <vFtdiHandleIrq+0x198>
		vpxFtdiModule->xFtdiRxIrqFlagClr.bRxCommErrIrqFlagClr = TRUE;
802056b8:	e0bffd17 	ldw	r2,-12(fp)
802056bc:	00c00044 	movi	r3,1
802056c0:	10c00f15 	stw	r3,60(r2)

		uliTransferSize = 0;
802056c4:	e03ffe15 	stw	zero,-8(fp)
		bStopRx = TRUE;
802056c8:	00800044 	movi	r2,1
802056cc:	d0a02015 	stw	r2,-32640(gp)

	}

}
802056d0:	0001883a 	nop
802056d4:	e037883a 	mov	sp,fp
802056d8:	dfc00117 	ldw	ra,4(sp)
802056dc:	df000017 	ldw	fp,0(sp)
802056e0:	dec00204 	addi	sp,sp,8
802056e4:	f800283a 	ret

802056e8 <main>:

int main() {
802056e8:	deffee04 	addi	sp,sp,-72
802056ec:	dfc01115 	stw	ra,68(sp)
802056f0:	df001015 	stw	fp,64(sp)
802056f4:	dc000f15 	stw	r16,60(sp)
802056f8:	df001004 	addi	fp,sp,64
	printf("Hello from Nios II!\n\n");
802056fc:	012008b4 	movhi	r4,32802
80205700:	21358a04 	addi	r4,r4,-10712
80205704:	0206d140 	call	80206d14 <puts>

	THalfCcdImage *pxHalfCcdImage = (THalfCcdImage *) DDR2_EXT_ADDR_WINDOWED_BASE;
80205708:	e03ffc15 	stw	zero,-16(fp)

	TFtdiModule *pxFtdi = (TFtdiModule *) USB_3_FTDI_0_BASE;
8020570c:	00a00034 	movhi	r2,32768
80205710:	e0bffd15 	stw	r2,-12(fp)

	bDdr2SwitchMemory(DDR2_M2_ID);
80205714:	01000044 	movi	r4,1
80205718:	02012940 	call	80201294 <bDdr2SwitchMemory>
	bSdmaInitM2Dma();
8020571c:	02026c40 	call	802026c4 <bSdmaInitM2Dma>

	// Stop and Clear Channel
	pxFtdi->xFtdiFtdiModuleControl.bModuleLoopbackEn = FALSE;
80205720:	e0bffd17 	ldw	r2,-12(fp)
80205724:	10001315 	stw	zero,76(r2)
	pxFtdi->xFtdiFtdiModuleControl.bModuleStop = TRUE;
80205728:	e0bffd17 	ldw	r2,-12(fp)
8020572c:	00c00044 	movi	r3,1
80205730:	10c01115 	stw	r3,68(r2)
	pxFtdi->xFtdiFtdiModuleControl.bModuleClear = TRUE;
80205734:	e0bffd17 	ldw	r2,-12(fp)
80205738:	00c00044 	movi	r3,1
8020573c:	10c01215 	stw	r3,72(r2)
//	printf("Loopback Enabled! \n");
//
//	while (1) {}

	//Enable IRQs
	pxFtdi->xFtdiRxIrqControl.bRxBuff0RdableIrqEn = TRUE;
80205740:	e0bffd17 	ldw	r2,-12(fp)
80205744:	00c00044 	movi	r3,1
80205748:	10c00115 	stw	r3,4(r2)
	pxFtdi->xFtdiRxIrqControl.bRxBuff1RdableIrqEn = TRUE;
8020574c:	e0bffd17 	ldw	r2,-12(fp)
80205750:	00c00044 	movi	r3,1
80205754:	10c00215 	stw	r3,8(r2)
	pxFtdi->xFtdiRxIrqControl.bRxBuffLastRdableIrqEn = TRUE;
80205758:	e0bffd17 	ldw	r2,-12(fp)
8020575c:	00c00044 	movi	r3,1
80205760:	10c00315 	stw	r3,12(r2)
	pxFtdi->xFtdiRxIrqControl.bRxBuffLastEmptyIrqEn = TRUE;
80205764:	e0bffd17 	ldw	r2,-12(fp)
80205768:	00c00044 	movi	r3,1
8020576c:	10c00415 	stw	r3,16(r2)
	pxFtdi->xFtdiRxIrqControl.bRxCommErrIrqEn = TRUE;
80205770:	e0bffd17 	ldw	r2,-12(fp)
80205774:	00c00044 	movi	r3,1
80205778:	10c00515 	stw	r3,20(r2)
	pxFtdi->xFtdiFtdiIrqControl.bFtdiGlobalIrqEn = TRUE;
8020577c:	e0bffd17 	ldw	r2,-12(fp)
80205780:	00c00044 	movi	r3,1
80205784:	10c00015 	stw	r3,0(r2)
	vFtdiInitIrq();
80205788:	0205a2c0 	call	80205a2c <vFtdiInitIrq>

	alt_u32 uliDataCnt = 0;
8020578c:	e03ff715 	stw	zero,-36(fp)
	alt_u64 *pulliDataAddr = (alt_u64 *)DDR2_EXT_ADDR_WINDOWED_BASE;
80205790:	e03ff815 	stw	zero,-32(fp)
	for (uliDataCnt = 0; uliDataCnt < 2767634; uliDataCnt++) {
80205794:	e03ff715 	stw	zero,-36(fp)
80205798:	00000d06 	br	802057d0 <main+0xe8>
		*pulliDataAddr = 0x5555555555555555;
8020579c:	e0fff817 	ldw	r3,-32(fp)
802057a0:	00955574 	movhi	r2,21845
802057a4:	10955544 	addi	r2,r2,21845
802057a8:	18800015 	stw	r2,0(r3)
802057ac:	00955574 	movhi	r2,21845
802057b0:	10955544 	addi	r2,r2,21845
802057b4:	18800115 	stw	r2,4(r3)
		pulliDataAddr++;
802057b8:	e0bff817 	ldw	r2,-32(fp)
802057bc:	10800204 	addi	r2,r2,8
802057c0:	e0bff815 	stw	r2,-32(fp)
	pxFtdi->xFtdiFtdiIrqControl.bFtdiGlobalIrqEn = TRUE;
	vFtdiInitIrq();

	alt_u32 uliDataCnt = 0;
	alt_u64 *pulliDataAddr = (alt_u64 *)DDR2_EXT_ADDR_WINDOWED_BASE;
	for (uliDataCnt = 0; uliDataCnt < 2767634; uliDataCnt++) {
802057c4:	e0bff717 	ldw	r2,-36(fp)
802057c8:	10800044 	addi	r2,r2,1
802057cc:	e0bff715 	stw	r2,-36(fp)
802057d0:	e0fff717 	ldw	r3,-36(fp)
802057d4:	00800ab4 	movhi	r2,42
802057d8:	108ec444 	addi	r2,r2,15121
802057dc:	10ffef2e 	bgeu	r2,r3,8020579c <__reset+0xfa1e579c>
		*pulliDataAddr = 0x5555555555555555;
		pulliDataAddr++;
	}

	usleep(1*1000*1000);
802057e0:	010003f4 	movhi	r4,15
802057e4:	21109004 	addi	r4,r4,16960
802057e8:	02175940 	call	80217594 <usleep>

	printf("Ready! \n\n");
802057ec:	012008b4 	movhi	r4,32802
802057f0:	21359004 	addi	r4,r4,-10688
802057f4:	0206d140 	call	80206d14 <puts>

	alt_u8 ucCcdCnt = 0;
802057f8:	e03ff905 	stb	zero,-28(fp)
	alt_u8 ucFeeCnt = 0;
802057fc:	e03ff945 	stb	zero,-27(fp)
	alt_u16 usiExpNumCnt = 0;
80205800:	e03ff98d 	sth	zero,-26(fp)
	alt_u32 uliTransactionCnt = 0;
80205804:	e03ffa15 	stw	zero,-24(fp)

//	vProtocolUsbTestAck(DDR2_EXT_ADDR_WINDOWED_BASE, 0x4000000, DDR2_M2_ID, ucFeeCnt, ucCcdCnt, 0, 5000, 3000, usiExpNumCnt, FALSE, TRUE);

	int iTimeSync = 0;
80205808:	e03ffe15 	stw	zero,-8(fp)
	int iTimeSyncElapsed = 0;
8020580c:	e03ffb15 	stw	zero,-20(fp)

	for (usiExpNumCnt = 0; usiExpNumCnt < 28; usiExpNumCnt++) {
80205810:	e03ff98d 	sth	zero,-26(fp)
80205814:	00007e06 	br	80205a10 <main+0x328>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80205818:	d0a02d17 	ldw	r2,-32588(gp)
		iTimeStart = alt_nticks();
8020581c:	d0a01e15 	stw	r2,-32648(gp)
80205820:	d0a02d17 	ldw	r2,-32588(gp)
		iTimeSync = alt_nticks();
80205824:	e0bffe15 	stw	r2,-8(fp)
		for (ucFeeCnt = 0; ucFeeCnt < 6; ucFeeCnt++) {
80205828:	e03ff945 	stb	zero,-27(fp)
8020582c:	00003c06 	br	80205920 <main+0x238>
			for (ucCcdCnt = 0; ucCcdCnt < 4; ucCcdCnt++) {
80205830:	e03ff905 	stb	zero,-28(fp)
80205834:	00003406 	br	80205908 <main+0x220>
				printf("Transaction: %ld \n", uliTransactionCnt); uliTransactionCnt++;
80205838:	e17ffa17 	ldw	r5,-24(fp)
8020583c:	012008b4 	movhi	r4,32802
80205840:	21359304 	addi	r4,r4,-10676
80205844:	0206c180 	call	80206c18 <printf>
80205848:	e0bffa17 	ldw	r2,-24(fp)
8020584c:	10800044 	addi	r2,r2,1
80205850:	e0bffa15 	stw	r2,-24(fp)
//				vProtocolUsbTestAck(DDR2_EXT_ADDR_WINDOWED_BASE, 0x4000000, DDR2_M2_ID, ucFeeCnt, ucCcdCnt, 0, 50, 50, usiExpNumCnt, FALSE, FALSE);
				vProtocolUsbTestAck(DDR2_EXT_ADDR_WINDOWED_BASE, 0x4000000, DDR2_M2_ID, 3, 2, 1, 100, 50, 5, FALSE, FALSE);
80205854:	d8000615 	stw	zero,24(sp)
80205858:	d8000515 	stw	zero,20(sp)
8020585c:	00800144 	movi	r2,5
80205860:	d8800415 	stw	r2,16(sp)
80205864:	00800c84 	movi	r2,50
80205868:	d8800315 	stw	r2,12(sp)
8020586c:	00801904 	movi	r2,100
80205870:	d8800215 	stw	r2,8(sp)
80205874:	00800044 	movi	r2,1
80205878:	d8800115 	stw	r2,4(sp)
8020587c:	00800084 	movi	r2,2
80205880:	d8800015 	stw	r2,0(sp)
80205884:	01c000c4 	movi	r7,3
80205888:	01800044 	movi	r6,1
8020588c:	01410034 	movhi	r5,1024
80205890:	0009883a 	mov	r4,zero
80205894:	0205a7c0 	call	80205a7c <vProtocolUsbTestAck>
				printf("Transaction: %ld \n", uliTransactionCnt); uliTransactionCnt++;
80205898:	e17ffa17 	ldw	r5,-24(fp)
8020589c:	012008b4 	movhi	r4,32802
802058a0:	21359304 	addi	r4,r4,-10676
802058a4:	0206c180 	call	80206c18 <printf>
802058a8:	e0bffa17 	ldw	r2,-24(fp)
802058ac:	10800044 	addi	r2,r2,1
802058b0:	e0bffa15 	stw	r2,-24(fp)
				vProtocolUsbTestAck(DDR2_EXT_ADDR_WINDOWED_BASE, 0x4000000, DDR2_M2_ID, ucFeeCnt, ucCcdCnt, 1, 50, 50, usiExpNumCnt, FALSE, FALSE);
802058b4:	e13ff943 	ldbu	r4,-27(fp)
802058b8:	e0bff903 	ldbu	r2,-28(fp)
802058bc:	e0fff98b 	ldhu	r3,-26(fp)
802058c0:	d8000615 	stw	zero,24(sp)
802058c4:	d8000515 	stw	zero,20(sp)
802058c8:	d8c00415 	stw	r3,16(sp)
802058cc:	00c00c84 	movi	r3,50
802058d0:	d8c00315 	stw	r3,12(sp)
802058d4:	00c00c84 	movi	r3,50
802058d8:	d8c00215 	stw	r3,8(sp)
802058dc:	00c00044 	movi	r3,1
802058e0:	d8c00115 	stw	r3,4(sp)
802058e4:	d8800015 	stw	r2,0(sp)
802058e8:	200f883a 	mov	r7,r4
802058ec:	01800044 	movi	r6,1
802058f0:	01410034 	movhi	r5,1024
802058f4:	0009883a 	mov	r4,zero
802058f8:	0205a7c0 	call	80205a7c <vProtocolUsbTestAck>

	for (usiExpNumCnt = 0; usiExpNumCnt < 28; usiExpNumCnt++) {
		iTimeStart = alt_nticks();
		iTimeSync = alt_nticks();
		for (ucFeeCnt = 0; ucFeeCnt < 6; ucFeeCnt++) {
			for (ucCcdCnt = 0; ucCcdCnt < 4; ucCcdCnt++) {
802058fc:	e0bff903 	ldbu	r2,-28(fp)
80205900:	10800044 	addi	r2,r2,1
80205904:	e0bff905 	stb	r2,-28(fp)
80205908:	e0bff903 	ldbu	r2,-28(fp)
8020590c:	10800130 	cmpltui	r2,r2,4
80205910:	103fc91e 	bne	r2,zero,80205838 <__reset+0xfa1e5838>
	int iTimeSyncElapsed = 0;

	for (usiExpNumCnt = 0; usiExpNumCnt < 28; usiExpNumCnt++) {
		iTimeStart = alt_nticks();
		iTimeSync = alt_nticks();
		for (ucFeeCnt = 0; ucFeeCnt < 6; ucFeeCnt++) {
80205914:	e0bff943 	ldbu	r2,-27(fp)
80205918:	10800044 	addi	r2,r2,1
8020591c:	e0bff945 	stb	r2,-27(fp)
80205920:	e0bff943 	ldbu	r2,-27(fp)
80205924:	108001b0 	cmpltui	r2,r2,6
80205928:	103fc11e 	bne	r2,zero,80205830 <__reset+0xfa1e5830>
8020592c:	d0a02d17 	ldw	r2,-32588(gp)
				printf("Transaction: %ld \n", uliTransactionCnt); uliTransactionCnt++;
				vProtocolUsbTestAck(DDR2_EXT_ADDR_WINDOWED_BASE, 0x4000000, DDR2_M2_ID, ucFeeCnt, ucCcdCnt, 1, 50, 50, usiExpNumCnt, FALSE, FALSE);
			}
		}

		iTimeElapsed = alt_nticks() - iTimeStart;
80205930:	d0e01e17 	ldw	r3,-32648(gp)
80205934:	10c5c83a 	sub	r2,r2,r3
80205938:	d0a01b15 	stw	r2,-32660(gp)
		printf("USB data written, size=%d bytes, %.3f sec\n", 0, (float) iTimeElapsed / (float) alt_ticks_per_second());
8020593c:	d0a01b17 	ldw	r2,-32660(gp)
80205940:	1009883a 	mov	r4,r2
80205944:	02066180 	call	80206618 <__floatsisf>
80205948:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8020594c:	d0a02c17 	ldw	r2,-32592(gp)
80205950:	1009883a 	mov	r4,r2
80205954:	020673c0 	call	8020673c <__floatunsisf>
80205958:	1007883a 	mov	r3,r2
8020595c:	180b883a 	mov	r5,r3
80205960:	8009883a 	mov	r4,r16
80205964:	02061100 	call	80206110 <__divsf3>
80205968:	1007883a 	mov	r3,r2
8020596c:	1805883a 	mov	r2,r3
80205970:	1009883a 	mov	r4,r2
80205974:	020682c0 	call	8020682c <__extendsfdf2>
80205978:	1009883a 	mov	r4,r2
8020597c:	180b883a 	mov	r5,r3
80205980:	200d883a 	mov	r6,r4
80205984:	280f883a 	mov	r7,r5
80205988:	000b883a 	mov	r5,zero
8020598c:	012008b4 	movhi	r4,32802
80205990:	21359804 	addi	r4,r4,-10656
80205994:	0206c180 	call	80206c18 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80205998:	d0e02d17 	ldw	r3,-32588(gp)

		iTimeSyncElapsed = alt_nticks() - iTimeSync;
8020599c:	e0bffe17 	ldw	r2,-8(fp)
802059a0:	1885c83a 	sub	r2,r3,r2
802059a4:	e0bffb15 	stw	r2,-20(fp)
		while (((float) iTimeSyncElapsed / (float) alt_ticks_per_second()) < 25.0) {
802059a8:	00000606 	br	802059c4 <main+0x2dc>
			usleep(1000);
802059ac:	0100fa04 	movi	r4,1000
802059b0:	02175940 	call	80217594 <usleep>
802059b4:	d0e02d17 	ldw	r3,-32588(gp)
			iTimeSyncElapsed = alt_nticks() - iTimeSync;
802059b8:	e0bffe17 	ldw	r2,-8(fp)
802059bc:	1885c83a 	sub	r2,r3,r2
802059c0:	e0bffb15 	stw	r2,-20(fp)

		iTimeElapsed = alt_nticks() - iTimeStart;
		printf("USB data written, size=%d bytes, %.3f sec\n", 0, (float) iTimeElapsed / (float) alt_ticks_per_second());

		iTimeSyncElapsed = alt_nticks() - iTimeSync;
		while (((float) iTimeSyncElapsed / (float) alt_ticks_per_second()) < 25.0) {
802059c4:	e13ffb17 	ldw	r4,-20(fp)
802059c8:	02066180 	call	80206618 <__floatsisf>
802059cc:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
802059d0:	d0a02c17 	ldw	r2,-32592(gp)
802059d4:	1009883a 	mov	r4,r2
802059d8:	020673c0 	call	8020673c <__floatunsisf>
802059dc:	1007883a 	mov	r3,r2
802059e0:	180b883a 	mov	r5,r3
802059e4:	8009883a 	mov	r4,r16
802059e8:	02061100 	call	80206110 <__divsf3>
802059ec:	1007883a 	mov	r3,r2
802059f0:	1805883a 	mov	r2,r3
802059f4:	01507234 	movhi	r5,16840
802059f8:	1009883a 	mov	r4,r2
802059fc:	02065500 	call	80206550 <__lesf2>
80205a00:	103fea16 	blt	r2,zero,802059ac <__reset+0xfa1e59ac>
//	vProtocolUsbTestAck(DDR2_EXT_ADDR_WINDOWED_BASE, 0x4000000, DDR2_M2_ID, ucFeeCnt, ucCcdCnt, 0, 5000, 3000, usiExpNumCnt, FALSE, TRUE);

	int iTimeSync = 0;
	int iTimeSyncElapsed = 0;

	for (usiExpNumCnt = 0; usiExpNumCnt < 28; usiExpNumCnt++) {
80205a04:	e0bff98b 	ldhu	r2,-26(fp)
80205a08:	10800044 	addi	r2,r2,1
80205a0c:	e0bff98d 	sth	r2,-26(fp)
80205a10:	e0bff98b 	ldhu	r2,-26(fp)
80205a14:	10800730 	cmpltui	r2,r2,28
80205a18:	103f7f1e 	bne	r2,zero,80205818 <__reset+0xfa1e5818>
//			iTimeSyncElapsed = alt_nticks() - iTimeSync;
//		}
//
//	}

	printf("Finished!! \n");
80205a1c:	012008b4 	movhi	r4,32802
80205a20:	2135a304 	addi	r4,r4,-10612
80205a24:	0206d140 	call	80206d14 <puts>

	while (1) {}
80205a28:	003fff06 	br	80205a28 <__reset+0xfa1e5a28>

80205a2c <vFtdiInitIrq>:

	return 0;
}

bool vFtdiInitIrq(void) {
80205a2c:	defffc04 	addi	sp,sp,-16
80205a30:	dfc00315 	stw	ra,12(sp)
80205a34:	df000215 	stw	fp,8(sp)
80205a38:	df000204 	addi	fp,sp,8
	bool bStatus = FALSE;
80205a3c:	e03ffe15 	stw	zero,-8(fp)
	void* pvHoldContext;

	// Recast the hold_context pointer to match the alt_irq_register() function
	// prototype.
	pvHoldContext = (void*) &viFtdiHoldContext;
80205a40:	d0a01c04 	addi	r2,gp,-32656
80205a44:	e0bfff15 	stw	r2,-4(fp)
	// Register the interrupt handler
	alt_irq_register(7, pvHoldContext, vFtdiHandleIrq);
80205a48:	01a00834 	movhi	r6,32800
80205a4c:	31954e04 	addi	r6,r6,21816
80205a50:	e17fff17 	ldw	r5,-4(fp)
80205a54:	010001c4 	movi	r4,7
80205a58:	0216d700 	call	80216d70 <alt_irq_register>
	bStatus = TRUE;
80205a5c:	00800044 	movi	r2,1
80205a60:	e0bffe15 	stw	r2,-8(fp)

	return bStatus;
80205a64:	e0bffe17 	ldw	r2,-8(fp)
}
80205a68:	e037883a 	mov	sp,fp
80205a6c:	dfc00117 	ldw	ra,4(sp)
80205a70:	df000017 	ldw	fp,0(sp)
80205a74:	dec00204 	addi	sp,sp,8
80205a78:	f800283a 	ret

80205a7c <vProtocolUsbTestAck>:
//
//	}
//
//}

void vProtocolUsbTestAck(alt_u32 uliMemOffset, alt_u32 uliMemOffInc, alt_u8 ucMemId, alt_u8 ucFee, alt_u8 ucCcd, alt_u8 ucSide, alt_u16 usiHeight, alt_u16 usiWidth, alt_u16 usiExpNum, bool bMemDump, bool bVerbose){
80205a7c:	deffea04 	addi	sp,sp,-88
80205a80:	dfc01515 	stw	ra,84(sp)
80205a84:	df001415 	stw	fp,80(sp)
80205a88:	df001404 	addi	fp,sp,80
80205a8c:	e13ff715 	stw	r4,-36(fp)
80205a90:	e17ff815 	stw	r5,-32(fp)
80205a94:	3011883a 	mov	r8,r6
80205a98:	e1800217 	ldw	r6,8(fp)
80205a9c:	e1400317 	ldw	r5,12(fp)
80205aa0:	e1000417 	ldw	r4,16(fp)
80205aa4:	e0c00517 	ldw	r3,20(fp)
80205aa8:	e0800617 	ldw	r2,24(fp)
80205aac:	e23ff905 	stb	r8,-28(fp)
80205ab0:	e1fffa05 	stb	r7,-24(fp)
80205ab4:	e1bffb05 	stb	r6,-20(fp)
80205ab8:	e17ffc05 	stb	r5,-16(fp)
80205abc:	e13ffd0d 	sth	r4,-12(fp)
80205ac0:	e0fffe0d 	sth	r3,-8(fp)
80205ac4:	e0bfff0d 	sth	r2,-4(fp)

	TFtdiModule *pxFtdi = (TFtdiModule *) USB_3_FTDI_0_BASE;
80205ac8:	00a00034 	movhi	r2,32768
80205acc:	e0bff215 	stw	r2,-56(fp)
	THalfCcdImage *pxHalfCcdImage = (THalfCcdImage *) DDR2_EXT_ADDR_WINDOWED_BASE;
80205ad0:	e03ff315 	stw	zero,-52(fp)

	uliPaylodOffset = uliMemOffset;
80205ad4:	e0bff717 	ldw	r2,-36(fp)
80205ad8:	d0a01f15 	stw	r2,-32644(gp)
	alt_u32 uliPatternOff = uliPaylodOffset + uliMemOffInc;
80205adc:	d0e01f17 	ldw	r3,-32644(gp)
80205ae0:	e0bff817 	ldw	r2,-32(fp)
80205ae4:	1885883a 	add	r2,r3,r2
80205ae8:	e0bff415 	stw	r2,-48(fp)

	// Start Channel
	pxFtdi->xFtdiFtdiModuleControl.bModuleStart = TRUE;
80205aec:	e0bff217 	ldw	r2,-56(fp)
80205af0:	00c00044 	movi	r3,1
80205af4:	10c01015 	stw	r3,64(r2)

	printf("Starting Full-Image Request test: \n");
80205af8:	012008b4 	movhi	r4,32802
80205afc:	2135a604 	addi	r4,r4,-10600
80205b00:	0206d140 	call	80206d14 <puts>
	printf("FEE[%d], CCD[%d], SIDE[%d], HEIGHT[%d], WIDTH[%d], EXP.NUM.[%d] \n", ucFee, ucCcd, ucSide, usiHeight, usiWidth, usiExpNum);
80205b04:	e17ffa03 	ldbu	r5,-24(fp)
80205b08:	e1bffb03 	ldbu	r6,-20(fp)
80205b0c:	e1fffc03 	ldbu	r7,-16(fp)
80205b10:	e0bffd0b 	ldhu	r2,-12(fp)
80205b14:	e0fffe0b 	ldhu	r3,-8(fp)
80205b18:	e13fff0b 	ldhu	r4,-4(fp)
80205b1c:	d9000215 	stw	r4,8(sp)
80205b20:	d8c00115 	stw	r3,4(sp)
80205b24:	d8800015 	stw	r2,0(sp)
80205b28:	012008b4 	movhi	r4,32802
80205b2c:	2135af04 	addi	r4,r4,-10564
80205b30:	0206c180 	call	80206c18 <printf>

	// Transmitt Request Header
	pxFtdi->xFtdiHalfCcdReqControl.ucHalfCcdFeeNumber = ucFee;
80205b34:	e0bff217 	ldw	r2,-56(fp)
80205b38:	e0fffa03 	ldbu	r3,-24(fp)
80205b3c:	10c01485 	stb	r3,82(r2)
	pxFtdi->xFtdiHalfCcdReqControl.ucHalfCcdCcdNumber = ucCcd;
80205b40:	e0bff217 	ldw	r2,-56(fp)
80205b44:	e0fffb03 	ldbu	r3,-20(fp)
80205b48:	10c014c5 	stb	r3,83(r2)
	pxFtdi->xFtdiHalfCcdReqControl.ucHalfCcdCcdSide = ucSide;
80205b4c:	e0bff217 	ldw	r2,-56(fp)
80205b50:	e0fffc03 	ldbu	r3,-16(fp)
80205b54:	10c01505 	stb	r3,84(r2)
	pxFtdi->xFtdiHalfCcdReqControl.usiHalfCcdCcdHeight = usiHeight;
80205b58:	e0bff217 	ldw	r2,-56(fp)
80205b5c:	e0fffd0b 	ldhu	r3,-12(fp)
80205b60:	10c0158d 	sth	r3,86(r2)
	pxFtdi->xFtdiHalfCcdReqControl.usiHalfCcdCcdWidth = usiWidth;
80205b64:	e0bff217 	ldw	r2,-56(fp)
80205b68:	e0fffe0b 	ldhu	r3,-8(fp)
80205b6c:	10c0160d 	sth	r3,88(r2)
	pxFtdi->xFtdiHalfCcdReqControl.usiHalfCcdExpNumber = usiExpNum;
80205b70:	e0bff217 	ldw	r2,-56(fp)
80205b74:	e0ffff0b 	ldhu	r3,-4(fp)
80205b78:	10c0168d 	sth	r3,90(r2)
	pxFtdi->xFtdiHalfCcdReqControl.usiHalfCcdReqTimeout = 0;
80205b7c:	e0bff217 	ldw	r2,-56(fp)
80205b80:	1000140d 	sth	zero,80(r2)
	pxFtdi->xFtdiHalfCcdReqControl.bRequestHalfCcd = TRUE;
80205b84:	e0bff217 	ldw	r2,-56(fp)
80205b88:	00c00044 	movi	r3,1
80205b8c:	10c01715 	stw	r3,92(r2)
//	printf("0x17: 0x%08lX \n",(alt_u32)(&(pxFtdi->xFtdiHalfCcdReqControl.bRequestHalfCcd)));
//	printf("0x18: 0x%08lX \n",(alt_u32)(&(pxFtdi->xFtdiHalfCcdReqControl.bAbortHalfCcdReq)));
//	printf("0x19: 0x%08lX \n",(alt_u32)(&(pxFtdi->xFtdiHalfCcdReqControl.bRstHalfCcdController)));

	// Wait for an error or Rx Data
	bStopRx = FALSE;
80205b90:	d0202015 	stw	zero,-32640(gp)
	alt_u32 uliTransferSize = 0;
80205b94:	e03ff515 	stw	zero,-44(fp)
	alt_u32 uliTransferCnt = 0;
80205b98:	e03ff615 	stw	zero,-40(fp)

//	while (pxFtdi->xFtdiHalfCcdReplyStatus.bHalfCcdControllerBusy) {
//
//	}

	while (!bStopRx) {}
80205b9c:	0001883a 	nop
80205ba0:	d0a02017 	ldw	r2,-32640(gp)
80205ba4:	103ffe26 	beq	r2,zero,80205ba0 <__reset+0xfa1e5ba0>
//		}

//	}

	// Check Contents
	vFillCheckMemoryPattern(uliPatternOff, uliMemOffset, pxFtdi->xFtdiHalfCcdReplyStatus.uliHalfCcdImgLengthBytes, ucMemId, ucCcd, ucSide, usiHeight, usiWidth, usiExpNum, bMemDump);
80205ba8:	e0bff217 	ldw	r2,-56(fp)
80205bac:	12001d17 	ldw	r8,116(r2)
80205bb0:	e27ff903 	ldbu	r9,-28(fp)
80205bb4:	e0bffb03 	ldbu	r2,-20(fp)
80205bb8:	e0fffc03 	ldbu	r3,-16(fp)
80205bbc:	e13ffd0b 	ldhu	r4,-12(fp)
80205bc0:	e17ffe0b 	ldhu	r5,-8(fp)
80205bc4:	e1bfff0b 	ldhu	r6,-4(fp)
80205bc8:	e1c00717 	ldw	r7,28(fp)
80205bcc:	d9c00515 	stw	r7,20(sp)
80205bd0:	d9800415 	stw	r6,16(sp)
80205bd4:	d9400315 	stw	r5,12(sp)
80205bd8:	d9000215 	stw	r4,8(sp)
80205bdc:	d8c00115 	stw	r3,4(sp)
80205be0:	d8800015 	stw	r2,0(sp)
80205be4:	480f883a 	mov	r7,r9
80205be8:	400d883a 	mov	r6,r8
80205bec:	e17ff717 	ldw	r5,-36(fp)
80205bf0:	e13ff417 	ldw	r4,-48(fp)
80205bf4:	0205c500 	call	80205c50 <vFillCheckMemoryPattern>

	pxFtdi->xFtdiHalfCcdReqControl.bRstHalfCcdController = TRUE;
80205bf8:	e0bff217 	ldw	r2,-56(fp)
80205bfc:	00c00044 	movi	r3,1
80205c00:	10c01915 	stw	r3,100(r2)

	usleep(1);
80205c04:	01000044 	movi	r4,1
80205c08:	02175940 	call	80217594 <usleep>

	pxFtdi->xFtdiFtdiModuleControl.bModuleStop = TRUE;
80205c0c:	e0bff217 	ldw	r2,-56(fp)
80205c10:	00c00044 	movi	r3,1
80205c14:	10c01115 	stw	r3,68(r2)
	pxFtdi->xFtdiFtdiModuleControl.bModuleClear = TRUE;
80205c18:	e0bff217 	ldw	r2,-56(fp)
80205c1c:	00c00044 	movi	r3,1
80205c20:	10c01215 	stw	r3,72(r2)

//		usleep(1*1000*1000);
//		usleep(100*1000);
	usleep(1);
80205c24:	01000044 	movi	r4,1
80205c28:	02175940 	call	80217594 <usleep>

	printf("\n\n");
80205c2c:	012008b4 	movhi	r4,32802
80205c30:	2135c004 	addi	r4,r4,-10496
80205c34:	0206d140 	call	80206d14 <puts>

}
80205c38:	0001883a 	nop
80205c3c:	e037883a 	mov	sp,fp
80205c40:	dfc00117 	ldw	ra,4(sp)
80205c44:	df000017 	ldw	fp,0(sp)
80205c48:	dec00204 	addi	sp,sp,8
80205c4c:	f800283a 	ret

80205c50 <vFillCheckMemoryPattern>:

void vFillCheckMemoryPattern(alt_u32 uliMemPatternOffset, alt_u32 uliMemPayloadOffset, alt_u32 uliPayloadLength, alt_u8 ucMemId, alt_u8 ucCcd, alt_u8 ucSide, alt_u16 usiHeight, alt_u16 usiWidth, alt_u16 usiExpNum, bool bMemDump){
80205c50:	deffee04 	addi	sp,sp,-72
80205c54:	dfc01115 	stw	ra,68(sp)
80205c58:	df001015 	stw	fp,64(sp)
80205c5c:	df001004 	addi	fp,sp,64
80205c60:	e13ff715 	stw	r4,-36(fp)
80205c64:	e17ff815 	stw	r5,-32(fp)
80205c68:	e1bff915 	stw	r6,-28(fp)
80205c6c:	e1800217 	ldw	r6,8(fp)
80205c70:	e1400317 	ldw	r5,12(fp)
80205c74:	e1000417 	ldw	r4,16(fp)
80205c78:	e0c00517 	ldw	r3,20(fp)
80205c7c:	e0800617 	ldw	r2,24(fp)
80205c80:	e1fffa05 	stb	r7,-24(fp)
80205c84:	e1bffb05 	stb	r6,-20(fp)
80205c88:	e17ffc05 	stb	r5,-16(fp)
80205c8c:	e13ffd0d 	sth	r4,-12(fp)
80205c90:	e0fffe0d 	sth	r3,-8(fp)
80205c94:	e0bfff0d 	sth	r2,-4(fp)

	// Generate Pattern
	pattern_createPattern(ucMemId, uliMemPatternOffset, ucCcd, ucSide, usiWidth, usiHeight, (alt_u8)usiExpNum);
80205c98:	e23ffa03 	ldbu	r8,-24(fp)
80205c9c:	e17ffb03 	ldbu	r5,-20(fp)
80205ca0:	e1bffc03 	ldbu	r6,-16(fp)
80205ca4:	e0bffe0b 	ldhu	r2,-8(fp)
80205ca8:	e0fffd0b 	ldhu	r3,-12(fp)
80205cac:	e13fff0b 	ldhu	r4,-4(fp)
80205cb0:	21003fcc 	andi	r4,r4,255
80205cb4:	d9000215 	stw	r4,8(sp)
80205cb8:	d8c00115 	stw	r3,4(sp)
80205cbc:	d8800015 	stw	r2,0(sp)
80205cc0:	300f883a 	mov	r7,r6
80205cc4:	280d883a 	mov	r6,r5
80205cc8:	e17ff717 	ldw	r5,-36(fp)
80205ccc:	4009883a 	mov	r4,r8
80205cd0:	0205ec80 	call	80205ec8 <pattern_createPattern>

	// Check and Dump Pattern 32b
	alt_u16 ucErrorCnt = 0;
80205cd4:	e03ff30d 	sth	zero,-52(fp)
	alt_u32 ucDataCnt = 0;
80205cd8:	e03ff415 	stw	zero,-48(fp)
	alt_u64 *puliDataAddr = (alt_u64 *)uliMemPatternOffset;
80205cdc:	e0bff717 	ldw	r2,-36(fp)
80205ce0:	e0bff515 	stw	r2,-44(fp)
	alt_u64 *puliPayloadAddr = (alt_u64 *)uliMemPayloadOffset;
80205ce4:	e0bff817 	ldw	r2,-32(fp)
80205ce8:	e0bff615 	stw	r2,-40(fp)
//	puliPayloadAddr += 4;
	for (ucDataCnt = 0; ucDataCnt < (uliPayloadLength)/8; ucDataCnt++) {
80205cec:	e03ff415 	stw	zero,-48(fp)
80205cf0:	00003406 	br	80205dc4 <vFillCheckMemoryPattern+0x174>
		if (bMemDump) {
80205cf4:	e0800717 	ldw	r2,28(fp)
80205cf8:	10000d26 	beq	r2,zero,80205d30 <vFillCheckMemoryPattern+0xe0>
//			printf("Addr: 0x%08lX, Data: 0x%016llX \n", (alt_u32)puliDataAddr, (alt_u64)(*puliDataAddr));
			printf("Payload: 0x%016llX, Pattern: 0x%016llX \n", (alt_u64)(*puliPayloadAddr), (alt_u64)(*puliDataAddr));
80205cfc:	e0bff617 	ldw	r2,-40(fp)
80205d00:	12000017 	ldw	r8,0(r2)
80205d04:	12400117 	ldw	r9,4(r2)
80205d08:	e13ff517 	ldw	r4,-44(fp)
80205d0c:	20800017 	ldw	r2,0(r4)
80205d10:	20c00117 	ldw	r3,4(r4)
80205d14:	d8c00015 	stw	r3,0(sp)
80205d18:	100f883a 	mov	r7,r2
80205d1c:	400b883a 	mov	r5,r8
80205d20:	480d883a 	mov	r6,r9
80205d24:	012008b4 	movhi	r4,32802
80205d28:	2135c104 	addi	r4,r4,-10492
80205d2c:	0206c180 	call	80206c18 <printf>

//		if (ucDataCnt >= 6374820/8) {
//			printf("Addr: 0x%08lX, Payload: 0x%016llX, Pattern: 0x%016llX \n", (alt_u32)puliDataAddr, (alt_u64)(*puliPayloadAddr), (alt_u64)(*puliDataAddr));
//		}

		if ((alt_u64)(*puliDataAddr) != (alt_u64)(*puliPayloadAddr)) {
80205d30:	e0bff517 	ldw	r2,-44(fp)
80205d34:	11000017 	ldw	r4,0(r2)
80205d38:	11400117 	ldw	r5,4(r2)
80205d3c:	e1bff617 	ldw	r6,-40(fp)
80205d40:	30800017 	ldw	r2,0(r6)
80205d44:	30c00117 	ldw	r3,4(r6)
80205d48:	2080011e 	bne	r4,r2,80205d50 <vFillCheckMemoryPattern+0x100>
80205d4c:	28c01426 	beq	r5,r3,80205da0 <vFillCheckMemoryPattern+0x150>
			ucErrorCnt++;
80205d50:	e0bff30b 	ldhu	r2,-52(fp)
80205d54:	10800044 	addi	r2,r2,1
80205d58:	e0bff30d 	sth	r2,-52(fp)
			if (!bMemDump) {
80205d5c:	e0800717 	ldw	r2,28(fp)
80205d60:	10000f1e 	bne	r2,zero,80205da0 <vFillCheckMemoryPattern+0x150>
				printf("Addr: 0x%08lX, Payload: 0x%016llX, Pattern: 0x%016llX \n", (alt_u32)puliDataAddr, (alt_u64)(*puliPayloadAddr), (alt_u64)(*puliDataAddr));
80205d64:	e23ff517 	ldw	r8,-44(fp)
80205d68:	e0bff617 	ldw	r2,-40(fp)
80205d6c:	11000017 	ldw	r4,0(r2)
80205d70:	11400117 	ldw	r5,4(r2)
80205d74:	e1bff517 	ldw	r6,-44(fp)
80205d78:	30800017 	ldw	r2,0(r6)
80205d7c:	30c00117 	ldw	r3,4(r6)
80205d80:	d8800015 	stw	r2,0(sp)
80205d84:	d8c00115 	stw	r3,4(sp)
80205d88:	200d883a 	mov	r6,r4
80205d8c:	280f883a 	mov	r7,r5
80205d90:	400b883a 	mov	r5,r8
80205d94:	012008b4 	movhi	r4,32802
80205d98:	2135cc04 	addi	r4,r4,-10448
80205d9c:	0206c180 	call	80206c18 <printf>
			}
		}
		puliDataAddr++; puliPayloadAddr++;
80205da0:	e0bff517 	ldw	r2,-44(fp)
80205da4:	10800204 	addi	r2,r2,8
80205da8:	e0bff515 	stw	r2,-44(fp)
80205dac:	e0bff617 	ldw	r2,-40(fp)
80205db0:	10800204 	addi	r2,r2,8
80205db4:	e0bff615 	stw	r2,-40(fp)
	alt_u16 ucErrorCnt = 0;
	alt_u32 ucDataCnt = 0;
	alt_u64 *puliDataAddr = (alt_u64 *)uliMemPatternOffset;
	alt_u64 *puliPayloadAddr = (alt_u64 *)uliMemPayloadOffset;
//	puliPayloadAddr += 4;
	for (ucDataCnt = 0; ucDataCnt < (uliPayloadLength)/8; ucDataCnt++) {
80205db8:	e0bff417 	ldw	r2,-48(fp)
80205dbc:	10800044 	addi	r2,r2,1
80205dc0:	e0bff415 	stw	r2,-48(fp)
80205dc4:	e0bff917 	ldw	r2,-28(fp)
80205dc8:	1004d0fa 	srli	r2,r2,3
80205dcc:	e0fff417 	ldw	r3,-48(fp)
80205dd0:	18bfc836 	bltu	r3,r2,80205cf4 <__reset+0xfa1e5cf4>
			}
		}
		puliDataAddr++; puliPayloadAddr++;
	}

	if (ucErrorCnt > 0) {
80205dd4:	e0bff30b 	ldhu	r2,-52(fp)
80205dd8:	10000626 	beq	r2,zero,80205df4 <vFillCheckMemoryPattern+0x1a4>
		printf("Pattern and Payload does not match!! %04d errors!! \n", ucErrorCnt);
80205ddc:	e0bff30b 	ldhu	r2,-52(fp)
80205de0:	100b883a 	mov	r5,r2
80205de4:	012008b4 	movhi	r4,32802
80205de8:	2135da04 	addi	r4,r4,-10392
80205dec:	0206c180 	call	80206c18 <printf>
	} else {
		printf("Pattern and Payload match!! Payload Length: %ldB\n", uliPayloadLength);
	}

}
80205df0:	00000406 	br	80205e04 <vFillCheckMemoryPattern+0x1b4>
	}

	if (ucErrorCnt > 0) {
		printf("Pattern and Payload does not match!! %04d errors!! \n", ucErrorCnt);
	} else {
		printf("Pattern and Payload match!! Payload Length: %ldB\n", uliPayloadLength);
80205df4:	e17ff917 	ldw	r5,-28(fp)
80205df8:	012008b4 	movhi	r4,32802
80205dfc:	2135e804 	addi	r4,r4,-10336
80205e00:	0206c180 	call	80206c18 <printf>
	}

}
80205e04:	0001883a 	nop
80205e08:	e037883a 	mov	sp,fp
80205e0c:	dfc00117 	ldw	ra,4(sp)
80205e10:	df000017 	ldw	fp,0(sp)
80205e14:	dec00204 	addi	sp,sp,8
80205e18:	f800283a 	ret

80205e1c <uliLittleToBigEndianPixel>:
//
//	return uliBigEndianDword;
//}


alt_u32 uliLittleToBigEndianPixel(alt_u32 uliLittleEndianDword){
80205e1c:	defffc04 	addi	sp,sp,-16
80205e20:	df000315 	stw	fp,12(sp)
80205e24:	df000304 	addi	fp,sp,12
80205e28:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliBigEndianDword;

	alt_u16 uiWords[2];
	uiWords[0] = (alt_u16)((uliLittleEndianDword & 0x0000FFFF) >> 0);
80205e2c:	e0bfff17 	ldw	r2,-4(fp)
80205e30:	e0bffe0d 	sth	r2,-8(fp)
	uiWords[1] = (alt_u16)((uliLittleEndianDword & 0xFFFF0000) >> 16);
80205e34:	e0bfff17 	ldw	r2,-4(fp)
80205e38:	1004d43a 	srli	r2,r2,16
80205e3c:	e0bffe8d 	sth	r2,-6(fp)

	uliBigEndianDword = (alt_u32)(
		((uiWords[0] << 16) & 0xFFFF0000) |
80205e40:	e0bffe0b 	ldhu	r2,-8(fp)
80205e44:	10bfffcc 	andi	r2,r2,65535
80205e48:	1004943a 	slli	r2,r2,16
80205e4c:	1007883a 	mov	r3,r2
		((uiWords[1] << 0) & 0x0000FFFF));
80205e50:	e0bffe8b 	ldhu	r2,-6(fp)

	alt_u16 uiWords[2];
	uiWords[0] = (alt_u16)((uliLittleEndianDword & 0x0000FFFF) >> 0);
	uiWords[1] = (alt_u16)((uliLittleEndianDword & 0xFFFF0000) >> 16);

	uliBigEndianDword = (alt_u32)(
80205e54:	10bfffcc 	andi	r2,r2,65535
80205e58:	1884b03a 	or	r2,r3,r2
80205e5c:	e0bffd15 	stw	r2,-12(fp)
		((uiWords[0] << 16) & 0xFFFF0000) |
		((uiWords[1] << 0) & 0x0000FFFF));

	return uliBigEndianDword;
80205e60:	e0bffd17 	ldw	r2,-12(fp)
}
80205e64:	e037883a 	mov	sp,fp
80205e68:	df000017 	ldw	fp,0(sp)
80205e6c:	dec00104 	addi	sp,sp,4
80205e70:	f800283a 	ret

80205e74 <vLittleToBigEndianMask>:

void vLittleToBigEndianMask(alt_u32 uliLittleEndianDword[2]){
80205e74:	defffd04 	addi	sp,sp,-12
80205e78:	df000215 	stw	fp,8(sp)
80205e7c:	df000204 	addi	fp,sp,8
80205e80:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliTemp = 0;
80205e84:	e03ffe15 	stw	zero,-8(fp)

	uliTemp = uliLittleEndianDword[0];
80205e88:	e0bfff17 	ldw	r2,-4(fp)
80205e8c:	10800017 	ldw	r2,0(r2)
80205e90:	e0bffe15 	stw	r2,-8(fp)
	uliLittleEndianDword[0] = uliLittleEndianDword[1];
80205e94:	e0bfff17 	ldw	r2,-4(fp)
80205e98:	10c00117 	ldw	r3,4(r2)
80205e9c:	e0bfff17 	ldw	r2,-4(fp)
80205ea0:	10c00015 	stw	r3,0(r2)
	uliLittleEndianDword[1] = uliTemp;
80205ea4:	e0bfff17 	ldw	r2,-4(fp)
80205ea8:	10800104 	addi	r2,r2,4
80205eac:	e0fffe17 	ldw	r3,-8(fp)
80205eb0:	10c00015 	stw	r3,0(r2)

}
80205eb4:	0001883a 	nop
80205eb8:	e037883a 	mov	sp,fp
80205ebc:	df000017 	ldw	fp,0(sp)
80205ec0:	dec00104 	addi	sp,sp,4
80205ec4:	f800283a 	ret

80205ec8 <pattern_createPattern>:
#include "pattern.h"

alt_u32 pattern_createPattern(alt_u8 mem_number, alt_u32 mem_offset, alt_u8 ccd_number, alt_u8 ccd_side, alt_u32 width_cols, alt_u32 height_rows, alt_u8 timecode)
{
80205ec8:	deffef04 	addi	sp,sp,-68
80205ecc:	dfc01015 	stw	ra,64(sp)
80205ed0:	df000f15 	stw	fp,60(sp)
80205ed4:	dcc00e15 	stw	r19,56(sp)
80205ed8:	dc800d15 	stw	r18,52(sp)
80205edc:	dc400c15 	stw	r17,48(sp)
80205ee0:	dc000b15 	stw	r16,44(sp)
80205ee4:	df000f04 	addi	fp,sp,60
80205ee8:	2011883a 	mov	r8,r4
80205eec:	e17ff815 	stw	r5,-32(fp)
80205ef0:	3009883a 	mov	r4,r6
80205ef4:	3807883a 	mov	r3,r7
80205ef8:	e0800417 	ldw	r2,16(fp)
80205efc:	e23ff705 	stb	r8,-36(fp)
80205f00:	e13ff905 	stb	r4,-28(fp)
80205f04:	e0fffa05 	stb	r3,-24(fp)
80205f08:	e0bffb05 	stb	r2,-20(fp)
	bDdr2SwitchMemory(mem_number); // Switch to the desired memory
80205f0c:	e0bff703 	ldbu	r2,-36(fp)
80205f10:	1009883a 	mov	r4,r2
80205f14:	02012940 	call	80201294 <bDdr2SwitchMemory>
	alt_u32 offset = mem_offset;
80205f18:	e0bff817 	ldw	r2,-32(fp)
80205f1c:	e0bff115 	stw	r2,-60(fp)
	alt_u8 i = 0;
80205f20:	e03ff205 	stb	zero,-56(fp)
	TSdmaPixelDataBlock *pxPixelData = (TSdmaPixelDataBlock *) (DDR2_EXT_ADDR_WINDOWED_BASE + offset); // Address the structure
80205f24:	e0bff117 	ldw	r2,-60(fp)
80205f28:	e0bff315 	stw	r2,-52(fp)
	for (alt_u32 row = 0; row < height_rows; row++) // row sweep
80205f2c:	e03ff415 	stw	zero,-48(fp)
80205f30:	00003706 	br	80206010 <pattern_createPattern+0x148>
	{
		for (alt_u32 col = 0; col < width_cols; col++) // column sweep
80205f34:	e03ff515 	stw	zero,-44(fp)
80205f38:	00002f06 	br	80205ff8 <pattern_createPattern+0x130>
		{
			if (i == 64) // filled one block of memory, time to save full pattern and readress the structure
80205f3c:	e0bff203 	ldbu	r2,-56(fp)
80205f40:	10801018 	cmpnei	r2,r2,64
80205f44:	10000b1e 	bne	r2,zero,80205f74 <pattern_createPattern+0xac>
			{
				pxPixelData->ulliMask = PATTERN_MEMORY_FULLMASK;
80205f48:	e0bff317 	ldw	r2,-52(fp)
80205f4c:	00ffffc4 	movi	r3,-1
80205f50:	10c02015 	stw	r3,128(r2)
80205f54:	00ffffc4 	movi	r3,-1
80205f58:	10c02115 	stw	r3,132(r2)
				offset += sizeof(TSdmaPixelDataBlock);
80205f5c:	e0bff117 	ldw	r2,-60(fp)
80205f60:	10802204 	addi	r2,r2,136
80205f64:	e0bff115 	stw	r2,-60(fp)
				pxPixelData = (TSdmaPixelDataBlock *) (DDR2_EXT_ADDR_WINDOWED_BASE + offset);
80205f68:	e0bff117 	ldw	r2,-60(fp)
80205f6c:	e0bff315 	stw	r2,-52(fp)
				i = 0;
80205f70:	e03ff205 	stb	zero,-56(fp)
			}
			// Generate pattern pixel (16-bits)
			pxPixelData->usiPixel[i++] = PATTERN_MASK_TIMECODE(timecode) | PATTERN_MASK_CCDNUMBER(ccd_number) | PATTERN_MASK_CCDSIDE(ccd_side) | PATTERN_MASK_ROW(row) | PATTERN_MASK_COLUMN(col);
80205f74:	e0bff203 	ldbu	r2,-56(fp)
80205f78:	10c00044 	addi	r3,r2,1
80205f7c:	e0fff205 	stb	r3,-56(fp)
80205f80:	10803fcc 	andi	r2,r2,255
80205f84:	e0fffb03 	ldbu	r3,-20(fp)
80205f88:	1806937a 	slli	r3,r3,13
80205f8c:	1809883a 	mov	r4,r3
80205f90:	e0fff903 	ldbu	r3,-28(fp)
80205f94:	18c000cc 	andi	r3,r3,3
80205f98:	180692fa 	slli	r3,r3,11
80205f9c:	20c6b03a 	or	r3,r4,r3
80205fa0:	1809883a 	mov	r4,r3
80205fa4:	e0fffa03 	ldbu	r3,-24(fp)
80205fa8:	18c0004c 	andi	r3,r3,1
80205fac:	180692ba 	slli	r3,r3,10
80205fb0:	20c6b03a 	or	r3,r4,r3
80205fb4:	1809883a 	mov	r4,r3
80205fb8:	e0fff417 	ldw	r3,-48(fp)
80205fbc:	18c007cc 	andi	r3,r3,31
80205fc0:	1806917a 	slli	r3,r3,5
80205fc4:	20c6b03a 	or	r3,r4,r3
80205fc8:	1809883a 	mov	r4,r3
80205fcc:	e0fff517 	ldw	r3,-44(fp)
80205fd0:	18c007cc 	andi	r3,r3,31
80205fd4:	20c6b03a 	or	r3,r4,r3
80205fd8:	1809883a 	mov	r4,r3
80205fdc:	e0fff317 	ldw	r3,-52(fp)
80205fe0:	1085883a 	add	r2,r2,r2
80205fe4:	1885883a 	add	r2,r3,r2
80205fe8:	1100000d 	sth	r4,0(r2)
	alt_u32 offset = mem_offset;
	alt_u8 i = 0;
	TSdmaPixelDataBlock *pxPixelData = (TSdmaPixelDataBlock *) (DDR2_EXT_ADDR_WINDOWED_BASE + offset); // Address the structure
	for (alt_u32 row = 0; row < height_rows; row++) // row sweep
	{
		for (alt_u32 col = 0; col < width_cols; col++) // column sweep
80205fec:	e0bff517 	ldw	r2,-44(fp)
80205ff0:	10800044 	addi	r2,r2,1
80205ff4:	e0bff515 	stw	r2,-44(fp)
80205ff8:	e0fff517 	ldw	r3,-44(fp)
80205ffc:	e0800217 	ldw	r2,8(fp)
80206000:	18bfce36 	bltu	r3,r2,80205f3c <__reset+0xfa1e5f3c>
{
	bDdr2SwitchMemory(mem_number); // Switch to the desired memory
	alt_u32 offset = mem_offset;
	alt_u8 i = 0;
	TSdmaPixelDataBlock *pxPixelData = (TSdmaPixelDataBlock *) (DDR2_EXT_ADDR_WINDOWED_BASE + offset); // Address the structure
	for (alt_u32 row = 0; row < height_rows; row++) // row sweep
80206004:	e0bff417 	ldw	r2,-48(fp)
80206008:	10800044 	addi	r2,r2,1
8020600c:	e0bff415 	stw	r2,-48(fp)
80206010:	e0fff417 	ldw	r3,-48(fp)
80206014:	e0800317 	ldw	r2,12(fp)
80206018:	18bfc636 	bltu	r3,r2,80205f34 <__reset+0xfa1e5f34>
//			pxPixelData->usiPixel[i++] = PATTERN_MASK_TIMECODE(PATTERN_TIMECODE_VALUE) | PATTERN_MASK_CCDNUMBER(ccd_number) | PATTERN_MASK_CCDSIDE(ccd_side) | PATTERN_MASK_ROW(row) | PATTERN_MASK_COLUMN(col);
			//pxPixelData->usiPixel[i++] = 0xFFFF;
		}
	}
	//pxPixelData->ulliMask = xSimMeb.xFeeControl.xNfee[0].xMemMap.xCommon.ucPaddingMask.ullWord;
	pxPixelData->ulliMask = 0;
8020601c:	e0bff317 	ldw	r2,-52(fp)
80206020:	10002015 	stw	zero,128(r2)
80206024:	10002115 	stw	zero,132(r2)
	for (alt_u8 j = 0; j < i; j++) // create the mask (i.e.: if i stops at block 3 , the mask will be 0b00...0111)
80206028:	e03ff605 	stb	zero,-40(fp)
8020602c:	00001c06 	br	802060a0 <pattern_createPattern+0x1d8>
	{
		pxPixelData->ulliMask |= 0x8000000000000000 >> j;
80206030:	e13ff317 	ldw	r4,-52(fp)
80206034:	20802017 	ldw	r2,128(r4)
80206038:	20c02117 	ldw	r3,132(r4)
8020603c:	e13ff603 	ldbu	r4,-40(fp)
80206040:	217ff804 	addi	r5,r4,-32
80206044:	28000416 	blt	r5,zero,80206058 <pattern_createPattern+0x190>
80206048:	01200034 	movhi	r4,32768
8020604c:	2160d83a 	srl	r16,r4,r5
80206050:	0023883a 	mov	r17,zero
80206054:	00000a06 	br	80206080 <pattern_createPattern+0x1b8>
80206058:	01600034 	movhi	r5,32768
8020605c:	280c907a 	slli	r6,r5,1
80206060:	014007c4 	movi	r5,31
80206064:	290bc83a 	sub	r5,r5,r4
80206068:	314a983a 	sll	r5,r6,r5
8020606c:	000d883a 	mov	r6,zero
80206070:	3120d83a 	srl	r16,r6,r4
80206074:	2c20b03a 	or	r16,r5,r16
80206078:	01600034 	movhi	r5,32768
8020607c:	2922d83a 	srl	r17,r5,r4
80206080:	1424b03a 	or	r18,r2,r16
80206084:	1c66b03a 	or	r19,r3,r17
80206088:	e0bff317 	ldw	r2,-52(fp)
8020608c:	14802015 	stw	r18,128(r2)
80206090:	14c02115 	stw	r19,132(r2)
			//pxPixelData->usiPixel[i++] = 0xFFFF;
		}
	}
	//pxPixelData->ulliMask = xSimMeb.xFeeControl.xNfee[0].xMemMap.xCommon.ucPaddingMask.ullWord;
	pxPixelData->ulliMask = 0;
	for (alt_u8 j = 0; j < i; j++) // create the mask (i.e.: if i stops at block 3 , the mask will be 0b00...0111)
80206094:	e0bff603 	ldbu	r2,-40(fp)
80206098:	10800044 	addi	r2,r2,1
8020609c:	e0bff605 	stb	r2,-40(fp)
802060a0:	e0fff603 	ldbu	r3,-40(fp)
802060a4:	e0bff203 	ldbu	r2,-56(fp)
802060a8:	18bfe136 	bltu	r3,r2,80206030 <__reset+0xfa1e6030>
	{
		pxPixelData->ulliMask |= 0x8000000000000000 >> j;
	}

	while (i < 64) {
802060ac:	00000806 	br	802060d0 <pattern_createPattern+0x208>
		pxPixelData->usiPixel[i++] = 0x0000;
802060b0:	e0bff203 	ldbu	r2,-56(fp)
802060b4:	10c00044 	addi	r3,r2,1
802060b8:	e0fff205 	stb	r3,-56(fp)
802060bc:	10803fcc 	andi	r2,r2,255
802060c0:	e0fff317 	ldw	r3,-52(fp)
802060c4:	1085883a 	add	r2,r2,r2
802060c8:	1885883a 	add	r2,r3,r2
802060cc:	1000000d 	sth	zero,0(r2)
	for (alt_u8 j = 0; j < i; j++) // create the mask (i.e.: if i stops at block 3 , the mask will be 0b00...0111)
	{
		pxPixelData->ulliMask |= 0x8000000000000000 >> j;
	}

	while (i < 64) {
802060d0:	e0bff203 	ldbu	r2,-56(fp)
802060d4:	10801030 	cmpltui	r2,r2,64
802060d8:	103ff51e 	bne	r2,zero,802060b0 <__reset+0xfa1e60b0>
		pxPixelData->usiPixel[i++] = 0x0000;
	}

	offset += sizeof(TSdmaPixelDataBlock); // increment offset so we return the next available memory block
802060dc:	e0bff117 	ldw	r2,-60(fp)
802060e0:	10802204 	addi	r2,r2,136
802060e4:	e0bff115 	stw	r2,-60(fp)
	return offset;
802060e8:	e0bff117 	ldw	r2,-60(fp)
}
802060ec:	e6fffc04 	addi	sp,fp,-16
802060f0:	dfc00517 	ldw	ra,20(sp)
802060f4:	df000417 	ldw	fp,16(sp)
802060f8:	dcc00317 	ldw	r19,12(sp)
802060fc:	dc800217 	ldw	r18,8(sp)
80206100:	dc400117 	ldw	r17,4(sp)
80206104:	dc000017 	ldw	r16,0(sp)
80206108:	dec00604 	addi	sp,sp,24
8020610c:	f800283a 	ret

80206110 <__divsf3>:
80206110:	defff504 	addi	sp,sp,-44
80206114:	200cd5fa 	srli	r6,r4,23
80206118:	dcc00415 	stw	r19,16(sp)
8020611c:	2026d7fa 	srli	r19,r4,31
80206120:	00c02034 	movhi	r3,128
80206124:	dd800715 	stw	r22,28(sp)
80206128:	dd000515 	stw	r20,20(sp)
8020612c:	dc800315 	stw	r18,12(sp)
80206130:	18ffffc4 	addi	r3,r3,-1
80206134:	dfc00a15 	stw	ra,40(sp)
80206138:	df000915 	stw	fp,36(sp)
8020613c:	ddc00815 	stw	r23,32(sp)
80206140:	dd400615 	stw	r21,24(sp)
80206144:	dc400215 	stw	r17,8(sp)
80206148:	dc000115 	stw	r16,4(sp)
8020614c:	35003fcc 	andi	r20,r6,255
80206150:	1924703a 	and	r18,r3,r4
80206154:	9d803fcc 	andi	r22,r19,255
80206158:	a0005226 	beq	r20,zero,802062a4 <__divsf3+0x194>
8020615c:	00803fc4 	movi	r2,255
80206160:	a0802e26 	beq	r20,r2,8020621c <__divsf3+0x10c>
80206164:	91002034 	orhi	r4,r18,128
80206168:	202490fa 	slli	r18,r4,3
8020616c:	a53fe044 	addi	r20,r20,-127
80206170:	0021883a 	mov	r16,zero
80206174:	002f883a 	mov	r23,zero
80206178:	280cd5fa 	srli	r6,r5,23
8020617c:	282ad7fa 	srli	r21,r5,31
80206180:	00c02034 	movhi	r3,128
80206184:	18ffffc4 	addi	r3,r3,-1
80206188:	31803fcc 	andi	r6,r6,255
8020618c:	1962703a 	and	r17,r3,r5
80206190:	af003fcc 	andi	fp,r21,255
80206194:	30004a26 	beq	r6,zero,802062c0 <__divsf3+0x1b0>
80206198:	00803fc4 	movi	r2,255
8020619c:	30804526 	beq	r6,r2,802062b4 <__divsf3+0x1a4>
802061a0:	89402034 	orhi	r5,r17,128
802061a4:	282290fa 	slli	r17,r5,3
802061a8:	31bfe044 	addi	r6,r6,-127
802061ac:	000b883a 	mov	r5,zero
802061b0:	2c20b03a 	or	r16,r5,r16
802061b4:	802090ba 	slli	r16,r16,2
802061b8:	00a00834 	movhi	r2,32800
802061bc:	10987704 	addi	r2,r2,25052
802061c0:	80a1883a 	add	r16,r16,r2
802061c4:	81000017 	ldw	r4,0(r16)
802061c8:	9d46f03a 	xor	r3,r19,r21
802061cc:	180f883a 	mov	r7,r3
802061d0:	18803fcc 	andi	r2,r3,255
802061d4:	a18dc83a 	sub	r6,r20,r6
802061d8:	2000683a 	jmp	r4
802061dc:	802063c0 	call	8802063c <__reset+0x200063c>
802061e0:	80206244 	addi	zero,r16,-32375
802061e4:	802063b4 	orhi	zero,r16,33166
802061e8:	80206230 	cmpltui	zero,r16,33160
802061ec:	802063b4 	orhi	zero,r16,33166
802061f0:	8020638c 	andi	zero,r16,33166
802061f4:	802063b4 	orhi	zero,r16,33166
802061f8:	80206230 	cmpltui	zero,r16,33160
802061fc:	80206244 	addi	zero,r16,-32375
80206200:	80206244 	addi	zero,r16,-32375
80206204:	8020638c 	andi	zero,r16,33166
80206208:	80206230 	cmpltui	zero,r16,33160
8020620c:	802064a0 	cmpeqi	zero,r16,-32366
80206210:	802064a0 	cmpeqi	zero,r16,-32366
80206214:	802064a0 	cmpeqi	zero,r16,-32366
80206218:	80206454 	ori	zero,r16,33169
8020621c:	9000581e 	bne	r18,zero,80206380 <__divsf3+0x270>
80206220:	04000204 	movi	r16,8
80206224:	05c00084 	movi	r23,2
80206228:	003fd306 	br	80206178 <__reset+0xfa1e6178>
8020622c:	0023883a 	mov	r17,zero
80206230:	e02d883a 	mov	r22,fp
80206234:	282f883a 	mov	r23,r5
80206238:	00800084 	movi	r2,2
8020623c:	b8808f1e 	bne	r23,r2,8020647c <__divsf3+0x36c>
80206240:	b005883a 	mov	r2,r22
80206244:	11c0004c 	andi	r7,r2,1
80206248:	013fffc4 	movi	r4,-1
8020624c:	000d883a 	mov	r6,zero
80206250:	21003fcc 	andi	r4,r4,255
80206254:	200895fa 	slli	r4,r4,23
80206258:	38803fcc 	andi	r2,r7,255
8020625c:	00c02034 	movhi	r3,128
80206260:	100497fa 	slli	r2,r2,31
80206264:	18ffffc4 	addi	r3,r3,-1
80206268:	30c6703a 	and	r3,r6,r3
8020626c:	1906b03a 	or	r3,r3,r4
80206270:	1884b03a 	or	r2,r3,r2
80206274:	dfc00a17 	ldw	ra,40(sp)
80206278:	df000917 	ldw	fp,36(sp)
8020627c:	ddc00817 	ldw	r23,32(sp)
80206280:	dd800717 	ldw	r22,28(sp)
80206284:	dd400617 	ldw	r21,24(sp)
80206288:	dd000517 	ldw	r20,20(sp)
8020628c:	dcc00417 	ldw	r19,16(sp)
80206290:	dc800317 	ldw	r18,12(sp)
80206294:	dc400217 	ldw	r17,8(sp)
80206298:	dc000117 	ldw	r16,4(sp)
8020629c:	dec00b04 	addi	sp,sp,44
802062a0:	f800283a 	ret
802062a4:	90002b1e 	bne	r18,zero,80206354 <__divsf3+0x244>
802062a8:	04000104 	movi	r16,4
802062ac:	05c00044 	movi	r23,1
802062b0:	003fb106 	br	80206178 <__reset+0xfa1e6178>
802062b4:	8800251e 	bne	r17,zero,8020634c <__divsf3+0x23c>
802062b8:	01400084 	movi	r5,2
802062bc:	00000206 	br	802062c8 <__divsf3+0x1b8>
802062c0:	88001a1e 	bne	r17,zero,8020632c <__divsf3+0x21c>
802062c4:	01400044 	movi	r5,1
802062c8:	8160b03a 	or	r16,r16,r5
802062cc:	802090ba 	slli	r16,r16,2
802062d0:	00e00834 	movhi	r3,32800
802062d4:	18d8bb04 	addi	r3,r3,25324
802062d8:	80e1883a 	add	r16,r16,r3
802062dc:	80c00017 	ldw	r3,0(r16)
802062e0:	9d44f03a 	xor	r2,r19,r21
802062e4:	a18dc83a 	sub	r6,r20,r6
802062e8:	1800683a 	jmp	r3
802062ec:	80206244 	addi	zero,r16,-32375
802062f0:	80206244 	addi	zero,r16,-32375
802062f4:	80206490 	cmplti	zero,r16,-32366
802062f8:	8020622c 	andhi	zero,r16,33160
802062fc:	80206490 	cmplti	zero,r16,-32366
80206300:	8020638c 	andi	zero,r16,33166
80206304:	80206490 	cmplti	zero,r16,-32366
80206308:	8020622c 	andhi	zero,r16,33160
8020630c:	80206244 	addi	zero,r16,-32375
80206310:	80206244 	addi	zero,r16,-32375
80206314:	8020638c 	andi	zero,r16,33166
80206318:	8020622c 	andhi	zero,r16,33160
8020631c:	802064a0 	cmpeqi	zero,r16,-32366
80206320:	802064a0 	cmpeqi	zero,r16,-32366
80206324:	802064a0 	cmpeqi	zero,r16,-32366
80206328:	802064b8 	rdprs	zero,r16,-32366
8020632c:	8809883a 	mov	r4,r17
80206330:	020693c0 	call	8020693c <__clzsi2>
80206334:	10fffec4 	addi	r3,r2,-5
80206338:	10801d84 	addi	r2,r2,118
8020633c:	88e2983a 	sll	r17,r17,r3
80206340:	008dc83a 	sub	r6,zero,r2
80206344:	000b883a 	mov	r5,zero
80206348:	003f9906 	br	802061b0 <__reset+0xfa1e61b0>
8020634c:	014000c4 	movi	r5,3
80206350:	003f9706 	br	802061b0 <__reset+0xfa1e61b0>
80206354:	9009883a 	mov	r4,r18
80206358:	d9400015 	stw	r5,0(sp)
8020635c:	020693c0 	call	8020693c <__clzsi2>
80206360:	10fffec4 	addi	r3,r2,-5
80206364:	11801d84 	addi	r6,r2,118
80206368:	90e4983a 	sll	r18,r18,r3
8020636c:	01a9c83a 	sub	r20,zero,r6
80206370:	0021883a 	mov	r16,zero
80206374:	002f883a 	mov	r23,zero
80206378:	d9400017 	ldw	r5,0(sp)
8020637c:	003f7e06 	br	80206178 <__reset+0xfa1e6178>
80206380:	04000304 	movi	r16,12
80206384:	05c000c4 	movi	r23,3
80206388:	003f7b06 	br	80206178 <__reset+0xfa1e6178>
8020638c:	01802034 	movhi	r6,128
80206390:	000f883a 	mov	r7,zero
80206394:	31bfffc4 	addi	r6,r6,-1
80206398:	013fffc4 	movi	r4,-1
8020639c:	003fac06 	br	80206250 <__reset+0xfa1e6250>
802063a0:	01400044 	movi	r5,1
802063a4:	2909c83a 	sub	r4,r5,r4
802063a8:	00c006c4 	movi	r3,27
802063ac:	19004b0e 	bge	r3,r4,802064dc <__divsf3+0x3cc>
802063b0:	114e703a 	and	r7,r2,r5
802063b4:	0009883a 	mov	r4,zero
802063b8:	000d883a 	mov	r6,zero
802063bc:	003fa406 	br	80206250 <__reset+0xfa1e6250>
802063c0:	9006917a 	slli	r3,r18,5
802063c4:	8822917a 	slli	r17,r17,5
802063c8:	1c40372e 	bgeu	r3,r17,802064a8 <__divsf3+0x398>
802063cc:	31bfffc4 	addi	r6,r6,-1
802063d0:	010006c4 	movi	r4,27
802063d4:	000b883a 	mov	r5,zero
802063d8:	180f883a 	mov	r7,r3
802063dc:	294b883a 	add	r5,r5,r5
802063e0:	18c7883a 	add	r3,r3,r3
802063e4:	38000116 	blt	r7,zero,802063ec <__divsf3+0x2dc>
802063e8:	1c400236 	bltu	r3,r17,802063f4 <__divsf3+0x2e4>
802063ec:	1c47c83a 	sub	r3,r3,r17
802063f0:	29400054 	ori	r5,r5,1
802063f4:	213fffc4 	addi	r4,r4,-1
802063f8:	203ff71e 	bne	r4,zero,802063d8 <__reset+0xfa1e63d8>
802063fc:	1806c03a 	cmpne	r3,r3,zero
80206400:	1962b03a 	or	r17,r3,r5
80206404:	31001fc4 	addi	r4,r6,127
80206408:	013fe50e 	bge	zero,r4,802063a0 <__reset+0xfa1e63a0>
8020640c:	88c001cc 	andi	r3,r17,7
80206410:	18000426 	beq	r3,zero,80206424 <__divsf3+0x314>
80206414:	88c003cc 	andi	r3,r17,15
80206418:	01400104 	movi	r5,4
8020641c:	19400126 	beq	r3,r5,80206424 <__divsf3+0x314>
80206420:	8963883a 	add	r17,r17,r5
80206424:	88c2002c 	andhi	r3,r17,2048
80206428:	18000426 	beq	r3,zero,8020643c <__divsf3+0x32c>
8020642c:	00fe0034 	movhi	r3,63488
80206430:	18ffffc4 	addi	r3,r3,-1
80206434:	31002004 	addi	r4,r6,128
80206438:	88e2703a 	and	r17,r17,r3
8020643c:	00c03f84 	movi	r3,254
80206440:	193f8016 	blt	r3,r4,80206244 <__reset+0xfa1e6244>
80206444:	880c91ba 	slli	r6,r17,6
80206448:	11c0004c 	andi	r7,r2,1
8020644c:	300cd27a 	srli	r6,r6,9
80206450:	003f7f06 	br	80206250 <__reset+0xfa1e6250>
80206454:	9080102c 	andhi	r2,r18,64
80206458:	10000226 	beq	r2,zero,80206464 <__divsf3+0x354>
8020645c:	8880102c 	andhi	r2,r17,64
80206460:	10001826 	beq	r2,zero,802064c4 <__divsf3+0x3b4>
80206464:	00802034 	movhi	r2,128
80206468:	91801034 	orhi	r6,r18,64
8020646c:	10bfffc4 	addi	r2,r2,-1
80206470:	980f883a 	mov	r7,r19
80206474:	308c703a 	and	r6,r6,r2
80206478:	003fc706 	br	80206398 <__reset+0xfa1e6398>
8020647c:	008000c4 	movi	r2,3
80206480:	b8802d26 	beq	r23,r2,80206538 <__divsf3+0x428>
80206484:	00c00044 	movi	r3,1
80206488:	b005883a 	mov	r2,r22
8020648c:	b8ffdd1e 	bne	r23,r3,80206404 <__reset+0xfa1e6404>
80206490:	11c0004c 	andi	r7,r2,1
80206494:	0009883a 	mov	r4,zero
80206498:	000d883a 	mov	r6,zero
8020649c:	003f6c06 	br	80206250 <__reset+0xfa1e6250>
802064a0:	9023883a 	mov	r17,r18
802064a4:	003f6406 	br	80206238 <__reset+0xfa1e6238>
802064a8:	1c47c83a 	sub	r3,r3,r17
802064ac:	01000684 	movi	r4,26
802064b0:	01400044 	movi	r5,1
802064b4:	003fc806 	br	802063d8 <__reset+0xfa1e63d8>
802064b8:	9080102c 	andhi	r2,r18,64
802064bc:	103fe926 	beq	r2,zero,80206464 <__reset+0xfa1e6464>
802064c0:	0023883a 	mov	r17,zero
802064c4:	00802034 	movhi	r2,128
802064c8:	89801034 	orhi	r6,r17,64
802064cc:	10bfffc4 	addi	r2,r2,-1
802064d0:	a80f883a 	mov	r7,r21
802064d4:	308c703a 	and	r6,r6,r2
802064d8:	003faf06 	br	80206398 <__reset+0xfa1e6398>
802064dc:	01c00804 	movi	r7,32
802064e0:	390fc83a 	sub	r7,r7,r4
802064e4:	89ce983a 	sll	r7,r17,r7
802064e8:	890ad83a 	srl	r5,r17,r4
802064ec:	380ec03a 	cmpne	r7,r7,zero
802064f0:	29cab03a 	or	r5,r5,r7
802064f4:	28c001cc 	andi	r3,r5,7
802064f8:	18000426 	beq	r3,zero,8020650c <__divsf3+0x3fc>
802064fc:	28c003cc 	andi	r3,r5,15
80206500:	01000104 	movi	r4,4
80206504:	19000126 	beq	r3,r4,8020650c <__divsf3+0x3fc>
80206508:	290b883a 	add	r5,r5,r4
8020650c:	28c1002c 	andhi	r3,r5,1024
80206510:	18000426 	beq	r3,zero,80206524 <__divsf3+0x414>
80206514:	11c0004c 	andi	r7,r2,1
80206518:	01000044 	movi	r4,1
8020651c:	000d883a 	mov	r6,zero
80206520:	003f4b06 	br	80206250 <__reset+0xfa1e6250>
80206524:	280a91ba 	slli	r5,r5,6
80206528:	11c0004c 	andi	r7,r2,1
8020652c:	0009883a 	mov	r4,zero
80206530:	280cd27a 	srli	r6,r5,9
80206534:	003f4606 	br	80206250 <__reset+0xfa1e6250>
80206538:	00802034 	movhi	r2,128
8020653c:	89801034 	orhi	r6,r17,64
80206540:	10bfffc4 	addi	r2,r2,-1
80206544:	b00f883a 	mov	r7,r22
80206548:	308c703a 	and	r6,r6,r2
8020654c:	003f9206 	br	80206398 <__reset+0xfa1e6398>

80206550 <__lesf2>:
80206550:	2004d5fa 	srli	r2,r4,23
80206554:	280cd5fa 	srli	r6,r5,23
80206558:	00c02034 	movhi	r3,128
8020655c:	18ffffc4 	addi	r3,r3,-1
80206560:	10803fcc 	andi	r2,r2,255
80206564:	01c03fc4 	movi	r7,255
80206568:	1910703a 	and	r8,r3,r4
8020656c:	31803fcc 	andi	r6,r6,255
80206570:	1946703a 	and	r3,r3,r5
80206574:	2008d7fa 	srli	r4,r4,31
80206578:	280ad7fa 	srli	r5,r5,31
8020657c:	11c01b26 	beq	r2,r7,802065ec <__lesf2+0x9c>
80206580:	01c03fc4 	movi	r7,255
80206584:	31c01126 	beq	r6,r7,802065cc <__lesf2+0x7c>
80206588:	1000071e 	bne	r2,zero,802065a8 <__lesf2+0x58>
8020658c:	400f003a 	cmpeq	r7,r8,zero
80206590:	21003fcc 	andi	r4,r4,255
80206594:	3000081e 	bne	r6,zero,802065b8 <__lesf2+0x68>
80206598:	1800071e 	bne	r3,zero,802065b8 <__lesf2+0x68>
8020659c:	0005883a 	mov	r2,zero
802065a0:	40000f1e 	bne	r8,zero,802065e0 <__lesf2+0x90>
802065a4:	f800283a 	ret
802065a8:	21003fcc 	andi	r4,r4,255
802065ac:	30000a1e 	bne	r6,zero,802065d8 <__lesf2+0x88>
802065b0:	18000b26 	beq	r3,zero,802065e0 <__lesf2+0x90>
802065b4:	000f883a 	mov	r7,zero
802065b8:	29403fcc 	andi	r5,r5,255
802065bc:	38000726 	beq	r7,zero,802065dc <__lesf2+0x8c>
802065c0:	28000826 	beq	r5,zero,802065e4 <__lesf2+0x94>
802065c4:	00800044 	movi	r2,1
802065c8:	f800283a 	ret
802065cc:	183fee26 	beq	r3,zero,80206588 <__reset+0xfa1e6588>
802065d0:	00800084 	movi	r2,2
802065d4:	f800283a 	ret
802065d8:	29403fcc 	andi	r5,r5,255
802065dc:	21400626 	beq	r4,r5,802065f8 <__lesf2+0xa8>
802065e0:	203ff826 	beq	r4,zero,802065c4 <__reset+0xfa1e65c4>
802065e4:	00bfffc4 	movi	r2,-1
802065e8:	f800283a 	ret
802065ec:	403fe426 	beq	r8,zero,80206580 <__reset+0xfa1e6580>
802065f0:	00800084 	movi	r2,2
802065f4:	f800283a 	ret
802065f8:	30bff916 	blt	r6,r2,802065e0 <__reset+0xfa1e65e0>
802065fc:	11800216 	blt	r2,r6,80206608 <__lesf2+0xb8>
80206600:	1a3ff736 	bltu	r3,r8,802065e0 <__reset+0xfa1e65e0>
80206604:	40c0022e 	bgeu	r8,r3,80206610 <__lesf2+0xc0>
80206608:	203fee1e 	bne	r4,zero,802065c4 <__reset+0xfa1e65c4>
8020660c:	003ff506 	br	802065e4 <__reset+0xfa1e65e4>
80206610:	0005883a 	mov	r2,zero
80206614:	f800283a 	ret

80206618 <__floatsisf>:
80206618:	defffd04 	addi	sp,sp,-12
8020661c:	dfc00215 	stw	ra,8(sp)
80206620:	dc400115 	stw	r17,4(sp)
80206624:	dc000015 	stw	r16,0(sp)
80206628:	20003526 	beq	r4,zero,80206700 <__floatsisf+0xe8>
8020662c:	2021883a 	mov	r16,r4
80206630:	2022d7fa 	srli	r17,r4,31
80206634:	20003616 	blt	r4,zero,80206710 <__floatsisf+0xf8>
80206638:	8009883a 	mov	r4,r16
8020663c:	020693c0 	call	8020693c <__clzsi2>
80206640:	00c02784 	movi	r3,158
80206644:	1887c83a 	sub	r3,r3,r2
80206648:	01002584 	movi	r4,150
8020664c:	20c01416 	blt	r4,r3,802066a0 <__floatsisf+0x88>
80206650:	20c9c83a 	sub	r4,r4,r3
80206654:	8120983a 	sll	r16,r16,r4
80206658:	00802034 	movhi	r2,128
8020665c:	10bfffc4 	addi	r2,r2,-1
80206660:	8809883a 	mov	r4,r17
80206664:	80a0703a 	and	r16,r16,r2
80206668:	18803fcc 	andi	r2,r3,255
8020666c:	100695fa 	slli	r3,r2,23
80206670:	20803fcc 	andi	r2,r4,255
80206674:	100897fa 	slli	r4,r2,31
80206678:	00802034 	movhi	r2,128
8020667c:	10bfffc4 	addi	r2,r2,-1
80206680:	8084703a 	and	r2,r16,r2
80206684:	10c4b03a 	or	r2,r2,r3
80206688:	1104b03a 	or	r2,r2,r4
8020668c:	dfc00217 	ldw	ra,8(sp)
80206690:	dc400117 	ldw	r17,4(sp)
80206694:	dc000017 	ldw	r16,0(sp)
80206698:	dec00304 	addi	sp,sp,12
8020669c:	f800283a 	ret
802066a0:	01002644 	movi	r4,153
802066a4:	20c01c16 	blt	r4,r3,80206718 <__floatsisf+0x100>
802066a8:	20c9c83a 	sub	r4,r4,r3
802066ac:	8120983a 	sll	r16,r16,r4
802066b0:	013f0034 	movhi	r4,64512
802066b4:	213fffc4 	addi	r4,r4,-1
802066b8:	814001cc 	andi	r5,r16,7
802066bc:	8108703a 	and	r4,r16,r4
802066c0:	28000426 	beq	r5,zero,802066d4 <__floatsisf+0xbc>
802066c4:	840003cc 	andi	r16,r16,15
802066c8:	01400104 	movi	r5,4
802066cc:	81400126 	beq	r16,r5,802066d4 <__floatsisf+0xbc>
802066d0:	2149883a 	add	r4,r4,r5
802066d4:	2141002c 	andhi	r5,r4,1024
802066d8:	28000526 	beq	r5,zero,802066f0 <__floatsisf+0xd8>
802066dc:	00c027c4 	movi	r3,159
802066e0:	1887c83a 	sub	r3,r3,r2
802066e4:	00bf0034 	movhi	r2,64512
802066e8:	10bfffc4 	addi	r2,r2,-1
802066ec:	2088703a 	and	r4,r4,r2
802066f0:	202091ba 	slli	r16,r4,6
802066f4:	8809883a 	mov	r4,r17
802066f8:	8020d27a 	srli	r16,r16,9
802066fc:	003fda06 	br	80206668 <__reset+0xfa1e6668>
80206700:	0009883a 	mov	r4,zero
80206704:	0007883a 	mov	r3,zero
80206708:	0021883a 	mov	r16,zero
8020670c:	003fd606 	br	80206668 <__reset+0xfa1e6668>
80206710:	0121c83a 	sub	r16,zero,r4
80206714:	003fc806 	br	80206638 <__reset+0xfa1e6638>
80206718:	01002e44 	movi	r4,185
8020671c:	20c9c83a 	sub	r4,r4,r3
80206720:	01400144 	movi	r5,5
80206724:	8108983a 	sll	r4,r16,r4
80206728:	288bc83a 	sub	r5,r5,r2
8020672c:	8160d83a 	srl	r16,r16,r5
80206730:	2008c03a 	cmpne	r4,r4,zero
80206734:	8120b03a 	or	r16,r16,r4
80206738:	003fdd06 	br	802066b0 <__reset+0xfa1e66b0>

8020673c <__floatunsisf>:
8020673c:	defffe04 	addi	sp,sp,-8
80206740:	dfc00115 	stw	ra,4(sp)
80206744:	dc000015 	stw	r16,0(sp)
80206748:	20002c26 	beq	r4,zero,802067fc <__floatunsisf+0xc0>
8020674c:	2021883a 	mov	r16,r4
80206750:	020693c0 	call	8020693c <__clzsi2>
80206754:	00c02784 	movi	r3,158
80206758:	1887c83a 	sub	r3,r3,r2
8020675c:	01002584 	movi	r4,150
80206760:	20c00f16 	blt	r4,r3,802067a0 <__floatunsisf+0x64>
80206764:	20c9c83a 	sub	r4,r4,r3
80206768:	8108983a 	sll	r4,r16,r4
8020676c:	00802034 	movhi	r2,128
80206770:	10bfffc4 	addi	r2,r2,-1
80206774:	2088703a 	and	r4,r4,r2
80206778:	18803fcc 	andi	r2,r3,255
8020677c:	100695fa 	slli	r3,r2,23
80206780:	00802034 	movhi	r2,128
80206784:	10bfffc4 	addi	r2,r2,-1
80206788:	2084703a 	and	r2,r4,r2
8020678c:	10c4b03a 	or	r2,r2,r3
80206790:	dfc00117 	ldw	ra,4(sp)
80206794:	dc000017 	ldw	r16,0(sp)
80206798:	dec00204 	addi	sp,sp,8
8020679c:	f800283a 	ret
802067a0:	01002644 	movi	r4,153
802067a4:	20c01816 	blt	r4,r3,80206808 <__floatunsisf+0xcc>
802067a8:	20c9c83a 	sub	r4,r4,r3
802067ac:	8108983a 	sll	r4,r16,r4
802067b0:	017f0034 	movhi	r5,64512
802067b4:	297fffc4 	addi	r5,r5,-1
802067b8:	218001cc 	andi	r6,r4,7
802067bc:	214a703a 	and	r5,r4,r5
802067c0:	30000426 	beq	r6,zero,802067d4 <__floatunsisf+0x98>
802067c4:	210003cc 	andi	r4,r4,15
802067c8:	01800104 	movi	r6,4
802067cc:	21800126 	beq	r4,r6,802067d4 <__floatunsisf+0x98>
802067d0:	298b883a 	add	r5,r5,r6
802067d4:	2901002c 	andhi	r4,r5,1024
802067d8:	20000526 	beq	r4,zero,802067f0 <__floatunsisf+0xb4>
802067dc:	00c027c4 	movi	r3,159
802067e0:	1887c83a 	sub	r3,r3,r2
802067e4:	00bf0034 	movhi	r2,64512
802067e8:	10bfffc4 	addi	r2,r2,-1
802067ec:	288a703a 	and	r5,r5,r2
802067f0:	280891ba 	slli	r4,r5,6
802067f4:	2008d27a 	srli	r4,r4,9
802067f8:	003fdf06 	br	80206778 <__reset+0xfa1e6778>
802067fc:	0007883a 	mov	r3,zero
80206800:	0009883a 	mov	r4,zero
80206804:	003fdc06 	br	80206778 <__reset+0xfa1e6778>
80206808:	01402e44 	movi	r5,185
8020680c:	28cbc83a 	sub	r5,r5,r3
80206810:	01000144 	movi	r4,5
80206814:	2089c83a 	sub	r4,r4,r2
80206818:	814a983a 	sll	r5,r16,r5
8020681c:	8108d83a 	srl	r4,r16,r4
80206820:	2820c03a 	cmpne	r16,r5,zero
80206824:	2408b03a 	or	r4,r4,r16
80206828:	003fe106 	br	802067b0 <__reset+0xfa1e67b0>

8020682c <__extendsfdf2>:
8020682c:	200ad5fa 	srli	r5,r4,23
80206830:	defffd04 	addi	sp,sp,-12
80206834:	dc400115 	stw	r17,4(sp)
80206838:	29403fcc 	andi	r5,r5,255
8020683c:	29800044 	addi	r6,r5,1
80206840:	04402034 	movhi	r17,128
80206844:	dc000015 	stw	r16,0(sp)
80206848:	8c7fffc4 	addi	r17,r17,-1
8020684c:	dfc00215 	stw	ra,8(sp)
80206850:	31803fcc 	andi	r6,r6,255
80206854:	00800044 	movi	r2,1
80206858:	8922703a 	and	r17,r17,r4
8020685c:	2020d7fa 	srli	r16,r4,31
80206860:	1180110e 	bge	r2,r6,802068a8 <__extendsfdf2+0x7c>
80206864:	880cd0fa 	srli	r6,r17,3
80206868:	8822977a 	slli	r17,r17,29
8020686c:	2940e004 	addi	r5,r5,896
80206870:	2941ffcc 	andi	r5,r5,2047
80206874:	2804953a 	slli	r2,r5,20
80206878:	01400434 	movhi	r5,16
8020687c:	800697fa 	slli	r3,r16,31
80206880:	297fffc4 	addi	r5,r5,-1
80206884:	314a703a 	and	r5,r6,r5
80206888:	288ab03a 	or	r5,r5,r2
8020688c:	28c6b03a 	or	r3,r5,r3
80206890:	8805883a 	mov	r2,r17
80206894:	dfc00217 	ldw	ra,8(sp)
80206898:	dc400117 	ldw	r17,4(sp)
8020689c:	dc000017 	ldw	r16,0(sp)
802068a0:	dec00304 	addi	sp,sp,12
802068a4:	f800283a 	ret
802068a8:	2800111e 	bne	r5,zero,802068f0 <__extendsfdf2+0xc4>
802068ac:	88001c26 	beq	r17,zero,80206920 <__extendsfdf2+0xf4>
802068b0:	8809883a 	mov	r4,r17
802068b4:	020693c0 	call	8020693c <__clzsi2>
802068b8:	00c00284 	movi	r3,10
802068bc:	18801b16 	blt	r3,r2,8020692c <__extendsfdf2+0x100>
802068c0:	018002c4 	movi	r6,11
802068c4:	308dc83a 	sub	r6,r6,r2
802068c8:	11000544 	addi	r4,r2,21
802068cc:	8986d83a 	srl	r3,r17,r6
802068d0:	8922983a 	sll	r17,r17,r4
802068d4:	0180e244 	movi	r6,905
802068d8:	01400434 	movhi	r5,16
802068dc:	3085c83a 	sub	r2,r6,r2
802068e0:	297fffc4 	addi	r5,r5,-1
802068e4:	194c703a 	and	r6,r3,r5
802068e8:	1141ffcc 	andi	r5,r2,2047
802068ec:	003fe006 	br	80206870 <__reset+0xfa1e6870>
802068f0:	88000826 	beq	r17,zero,80206914 <__extendsfdf2+0xe8>
802068f4:	880cd0fa 	srli	r6,r17,3
802068f8:	00800434 	movhi	r2,16
802068fc:	10bfffc4 	addi	r2,r2,-1
80206900:	31800234 	orhi	r6,r6,8
80206904:	8822977a 	slli	r17,r17,29
80206908:	308c703a 	and	r6,r6,r2
8020690c:	0141ffc4 	movi	r5,2047
80206910:	003fd706 	br	80206870 <__reset+0xfa1e6870>
80206914:	0141ffc4 	movi	r5,2047
80206918:	000d883a 	mov	r6,zero
8020691c:	003fd406 	br	80206870 <__reset+0xfa1e6870>
80206920:	000b883a 	mov	r5,zero
80206924:	000d883a 	mov	r6,zero
80206928:	003fd106 	br	80206870 <__reset+0xfa1e6870>
8020692c:	11bffd44 	addi	r6,r2,-11
80206930:	8986983a 	sll	r3,r17,r6
80206934:	0023883a 	mov	r17,zero
80206938:	003fe606 	br	802068d4 <__reset+0xfa1e68d4>

8020693c <__clzsi2>:
8020693c:	00bfffd4 	movui	r2,65535
80206940:	11000536 	bltu	r2,r4,80206958 <__clzsi2+0x1c>
80206944:	00803fc4 	movi	r2,255
80206948:	11000f36 	bltu	r2,r4,80206988 <__clzsi2+0x4c>
8020694c:	00800804 	movi	r2,32
80206950:	0007883a 	mov	r3,zero
80206954:	00000506 	br	8020696c <__clzsi2+0x30>
80206958:	00804034 	movhi	r2,256
8020695c:	10bfffc4 	addi	r2,r2,-1
80206960:	11000c2e 	bgeu	r2,r4,80206994 <__clzsi2+0x58>
80206964:	00800204 	movi	r2,8
80206968:	00c00604 	movi	r3,24
8020696c:	20c8d83a 	srl	r4,r4,r3
80206970:	00e008b4 	movhi	r3,32802
80206974:	18f5f484 	addi	r3,r3,-10286
80206978:	1909883a 	add	r4,r3,r4
8020697c:	20c00003 	ldbu	r3,0(r4)
80206980:	10c5c83a 	sub	r2,r2,r3
80206984:	f800283a 	ret
80206988:	00800604 	movi	r2,24
8020698c:	00c00204 	movi	r3,8
80206990:	003ff606 	br	8020696c <__reset+0xfa1e696c>
80206994:	00800404 	movi	r2,16
80206998:	1007883a 	mov	r3,r2
8020699c:	003ff306 	br	8020696c <__reset+0xfa1e696c>

802069a0 <_fwrite_r>:
802069a0:	defff504 	addi	sp,sp,-44
802069a4:	dc800815 	stw	r18,32(sp)
802069a8:	39a5383a 	mul	r18,r7,r6
802069ac:	d8800304 	addi	r2,sp,12
802069b0:	d8800015 	stw	r2,0(sp)
802069b4:	00800044 	movi	r2,1
802069b8:	dcc00915 	stw	r19,36(sp)
802069bc:	dc400715 	stw	r17,28(sp)
802069c0:	dc000615 	stw	r16,24(sp)
802069c4:	d9400315 	stw	r5,12(sp)
802069c8:	dfc00a15 	stw	ra,40(sp)
802069cc:	dc800415 	stw	r18,16(sp)
802069d0:	dc800215 	stw	r18,8(sp)
802069d4:	d8800115 	stw	r2,4(sp)
802069d8:	3027883a 	mov	r19,r6
802069dc:	3821883a 	mov	r16,r7
802069e0:	2023883a 	mov	r17,r4
802069e4:	d9400b17 	ldw	r5,44(sp)
802069e8:	20000226 	beq	r4,zero,802069f4 <_fwrite_r+0x54>
802069ec:	20800e17 	ldw	r2,56(r4)
802069f0:	10001a26 	beq	r2,zero,80206a5c <_fwrite_r+0xbc>
802069f4:	2880030b 	ldhu	r2,12(r5)
802069f8:	10c8000c 	andi	r3,r2,8192
802069fc:	1800061e 	bne	r3,zero,80206a18 <_fwrite_r+0x78>
80206a00:	29001917 	ldw	r4,100(r5)
80206a04:	00f7ffc4 	movi	r3,-8193
80206a08:	10880014 	ori	r2,r2,8192
80206a0c:	20c6703a 	and	r3,r4,r3
80206a10:	2880030d 	sth	r2,12(r5)
80206a14:	28c01915 	stw	r3,100(r5)
80206a18:	d80d883a 	mov	r6,sp
80206a1c:	8809883a 	mov	r4,r17
80206a20:	020d7840 	call	8020d784 <__sfvwrite_r>
80206a24:	10000b26 	beq	r2,zero,80206a54 <_fwrite_r+0xb4>
80206a28:	d9000217 	ldw	r4,8(sp)
80206a2c:	980b883a 	mov	r5,r19
80206a30:	9109c83a 	sub	r4,r18,r4
80206a34:	02143440 	call	80214344 <__udivsi3>
80206a38:	dfc00a17 	ldw	ra,40(sp)
80206a3c:	dcc00917 	ldw	r19,36(sp)
80206a40:	dc800817 	ldw	r18,32(sp)
80206a44:	dc400717 	ldw	r17,28(sp)
80206a48:	dc000617 	ldw	r16,24(sp)
80206a4c:	dec00b04 	addi	sp,sp,44
80206a50:	f800283a 	ret
80206a54:	8005883a 	mov	r2,r16
80206a58:	003ff706 	br	80206a38 <__reset+0xfa1e6a38>
80206a5c:	d9400515 	stw	r5,20(sp)
80206a60:	020d3000 	call	8020d300 <__sinit>
80206a64:	d9400517 	ldw	r5,20(sp)
80206a68:	003fe206 	br	802069f4 <__reset+0xfa1e69f4>

80206a6c <fwrite>:
80206a6c:	defffe04 	addi	sp,sp,-8
80206a70:	00a008b4 	movhi	r2,32802
80206a74:	d9c00015 	stw	r7,0(sp)
80206a78:	10be7d04 	addi	r2,r2,-1548
80206a7c:	300f883a 	mov	r7,r6
80206a80:	280d883a 	mov	r6,r5
80206a84:	200b883a 	mov	r5,r4
80206a88:	11000017 	ldw	r4,0(r2)
80206a8c:	dfc00115 	stw	ra,4(sp)
80206a90:	02069a00 	call	802069a0 <_fwrite_r>
80206a94:	dfc00117 	ldw	ra,4(sp)
80206a98:	dec00204 	addi	sp,sp,8
80206a9c:	f800283a 	ret

80206aa0 <memcpy>:
80206aa0:	defffd04 	addi	sp,sp,-12
80206aa4:	dfc00215 	stw	ra,8(sp)
80206aa8:	dc400115 	stw	r17,4(sp)
80206aac:	dc000015 	stw	r16,0(sp)
80206ab0:	00c003c4 	movi	r3,15
80206ab4:	2005883a 	mov	r2,r4
80206ab8:	1980452e 	bgeu	r3,r6,80206bd0 <memcpy+0x130>
80206abc:	2906b03a 	or	r3,r5,r4
80206ac0:	18c000cc 	andi	r3,r3,3
80206ac4:	1800441e 	bne	r3,zero,80206bd8 <memcpy+0x138>
80206ac8:	347ffc04 	addi	r17,r6,-16
80206acc:	8822d13a 	srli	r17,r17,4
80206ad0:	28c00104 	addi	r3,r5,4
80206ad4:	23400104 	addi	r13,r4,4
80206ad8:	8820913a 	slli	r16,r17,4
80206adc:	2b000204 	addi	r12,r5,8
80206ae0:	22c00204 	addi	r11,r4,8
80206ae4:	84000504 	addi	r16,r16,20
80206ae8:	2a800304 	addi	r10,r5,12
80206aec:	22400304 	addi	r9,r4,12
80206af0:	2c21883a 	add	r16,r5,r16
80206af4:	2811883a 	mov	r8,r5
80206af8:	200f883a 	mov	r7,r4
80206afc:	41000017 	ldw	r4,0(r8)
80206b00:	1fc00017 	ldw	ra,0(r3)
80206b04:	63c00017 	ldw	r15,0(r12)
80206b08:	39000015 	stw	r4,0(r7)
80206b0c:	53800017 	ldw	r14,0(r10)
80206b10:	6fc00015 	stw	ra,0(r13)
80206b14:	5bc00015 	stw	r15,0(r11)
80206b18:	4b800015 	stw	r14,0(r9)
80206b1c:	18c00404 	addi	r3,r3,16
80206b20:	39c00404 	addi	r7,r7,16
80206b24:	42000404 	addi	r8,r8,16
80206b28:	6b400404 	addi	r13,r13,16
80206b2c:	63000404 	addi	r12,r12,16
80206b30:	5ac00404 	addi	r11,r11,16
80206b34:	52800404 	addi	r10,r10,16
80206b38:	4a400404 	addi	r9,r9,16
80206b3c:	1c3fef1e 	bne	r3,r16,80206afc <__reset+0xfa1e6afc>
80206b40:	89c00044 	addi	r7,r17,1
80206b44:	380e913a 	slli	r7,r7,4
80206b48:	310003cc 	andi	r4,r6,15
80206b4c:	02c000c4 	movi	r11,3
80206b50:	11c7883a 	add	r3,r2,r7
80206b54:	29cb883a 	add	r5,r5,r7
80206b58:	5900212e 	bgeu	r11,r4,80206be0 <memcpy+0x140>
80206b5c:	1813883a 	mov	r9,r3
80206b60:	2811883a 	mov	r8,r5
80206b64:	200f883a 	mov	r7,r4
80206b68:	42800017 	ldw	r10,0(r8)
80206b6c:	4a400104 	addi	r9,r9,4
80206b70:	39ffff04 	addi	r7,r7,-4
80206b74:	4abfff15 	stw	r10,-4(r9)
80206b78:	42000104 	addi	r8,r8,4
80206b7c:	59fffa36 	bltu	r11,r7,80206b68 <__reset+0xfa1e6b68>
80206b80:	213fff04 	addi	r4,r4,-4
80206b84:	2008d0ba 	srli	r4,r4,2
80206b88:	318000cc 	andi	r6,r6,3
80206b8c:	21000044 	addi	r4,r4,1
80206b90:	2109883a 	add	r4,r4,r4
80206b94:	2109883a 	add	r4,r4,r4
80206b98:	1907883a 	add	r3,r3,r4
80206b9c:	290b883a 	add	r5,r5,r4
80206ba0:	30000626 	beq	r6,zero,80206bbc <memcpy+0x11c>
80206ba4:	198d883a 	add	r6,r3,r6
80206ba8:	29c00003 	ldbu	r7,0(r5)
80206bac:	18c00044 	addi	r3,r3,1
80206bb0:	29400044 	addi	r5,r5,1
80206bb4:	19ffffc5 	stb	r7,-1(r3)
80206bb8:	19bffb1e 	bne	r3,r6,80206ba8 <__reset+0xfa1e6ba8>
80206bbc:	dfc00217 	ldw	ra,8(sp)
80206bc0:	dc400117 	ldw	r17,4(sp)
80206bc4:	dc000017 	ldw	r16,0(sp)
80206bc8:	dec00304 	addi	sp,sp,12
80206bcc:	f800283a 	ret
80206bd0:	2007883a 	mov	r3,r4
80206bd4:	003ff206 	br	80206ba0 <__reset+0xfa1e6ba0>
80206bd8:	2007883a 	mov	r3,r4
80206bdc:	003ff106 	br	80206ba4 <__reset+0xfa1e6ba4>
80206be0:	200d883a 	mov	r6,r4
80206be4:	003fee06 	br	80206ba0 <__reset+0xfa1e6ba0>

80206be8 <_printf_r>:
80206be8:	defffd04 	addi	sp,sp,-12
80206bec:	2805883a 	mov	r2,r5
80206bf0:	dfc00015 	stw	ra,0(sp)
80206bf4:	d9800115 	stw	r6,4(sp)
80206bf8:	d9c00215 	stw	r7,8(sp)
80206bfc:	21400217 	ldw	r5,8(r4)
80206c00:	d9c00104 	addi	r7,sp,4
80206c04:	100d883a 	mov	r6,r2
80206c08:	020905c0 	call	8020905c <___vfprintf_internal_r>
80206c0c:	dfc00017 	ldw	ra,0(sp)
80206c10:	dec00304 	addi	sp,sp,12
80206c14:	f800283a 	ret

80206c18 <printf>:
80206c18:	defffc04 	addi	sp,sp,-16
80206c1c:	dfc00015 	stw	ra,0(sp)
80206c20:	d9400115 	stw	r5,4(sp)
80206c24:	d9800215 	stw	r6,8(sp)
80206c28:	d9c00315 	stw	r7,12(sp)
80206c2c:	00a008b4 	movhi	r2,32802
80206c30:	10be7d04 	addi	r2,r2,-1548
80206c34:	10800017 	ldw	r2,0(r2)
80206c38:	200b883a 	mov	r5,r4
80206c3c:	d9800104 	addi	r6,sp,4
80206c40:	11000217 	ldw	r4,8(r2)
80206c44:	020b2540 	call	8020b254 <__vfprintf_internal>
80206c48:	dfc00017 	ldw	ra,0(sp)
80206c4c:	dec00404 	addi	sp,sp,16
80206c50:	f800283a 	ret

80206c54 <_puts_r>:
80206c54:	defff604 	addi	sp,sp,-40
80206c58:	dc000715 	stw	r16,28(sp)
80206c5c:	2021883a 	mov	r16,r4
80206c60:	2809883a 	mov	r4,r5
80206c64:	dc400815 	stw	r17,32(sp)
80206c68:	dfc00915 	stw	ra,36(sp)
80206c6c:	2823883a 	mov	r17,r5
80206c70:	0206dec0 	call	80206dec <strlen>
80206c74:	10c00044 	addi	r3,r2,1
80206c78:	d8800115 	stw	r2,4(sp)
80206c7c:	00a008b4 	movhi	r2,32802
80206c80:	10b63604 	addi	r2,r2,-10024
80206c84:	d8800215 	stw	r2,8(sp)
80206c88:	00800044 	movi	r2,1
80206c8c:	d8800315 	stw	r2,12(sp)
80206c90:	00800084 	movi	r2,2
80206c94:	dc400015 	stw	r17,0(sp)
80206c98:	d8c00615 	stw	r3,24(sp)
80206c9c:	dec00415 	stw	sp,16(sp)
80206ca0:	d8800515 	stw	r2,20(sp)
80206ca4:	80000226 	beq	r16,zero,80206cb0 <_puts_r+0x5c>
80206ca8:	80800e17 	ldw	r2,56(r16)
80206cac:	10001426 	beq	r2,zero,80206d00 <_puts_r+0xac>
80206cb0:	81400217 	ldw	r5,8(r16)
80206cb4:	2880030b 	ldhu	r2,12(r5)
80206cb8:	10c8000c 	andi	r3,r2,8192
80206cbc:	1800061e 	bne	r3,zero,80206cd8 <_puts_r+0x84>
80206cc0:	29001917 	ldw	r4,100(r5)
80206cc4:	00f7ffc4 	movi	r3,-8193
80206cc8:	10880014 	ori	r2,r2,8192
80206ccc:	20c6703a 	and	r3,r4,r3
80206cd0:	2880030d 	sth	r2,12(r5)
80206cd4:	28c01915 	stw	r3,100(r5)
80206cd8:	d9800404 	addi	r6,sp,16
80206cdc:	8009883a 	mov	r4,r16
80206ce0:	020d7840 	call	8020d784 <__sfvwrite_r>
80206ce4:	1000091e 	bne	r2,zero,80206d0c <_puts_r+0xb8>
80206ce8:	00800284 	movi	r2,10
80206cec:	dfc00917 	ldw	ra,36(sp)
80206cf0:	dc400817 	ldw	r17,32(sp)
80206cf4:	dc000717 	ldw	r16,28(sp)
80206cf8:	dec00a04 	addi	sp,sp,40
80206cfc:	f800283a 	ret
80206d00:	8009883a 	mov	r4,r16
80206d04:	020d3000 	call	8020d300 <__sinit>
80206d08:	003fe906 	br	80206cb0 <__reset+0xfa1e6cb0>
80206d0c:	00bfffc4 	movi	r2,-1
80206d10:	003ff606 	br	80206cec <__reset+0xfa1e6cec>

80206d14 <puts>:
80206d14:	00a008b4 	movhi	r2,32802
80206d18:	10be7d04 	addi	r2,r2,-1548
80206d1c:	200b883a 	mov	r5,r4
80206d20:	11000017 	ldw	r4,0(r2)
80206d24:	0206c541 	jmpi	80206c54 <_puts_r>

80206d28 <_sprintf_r>:
80206d28:	deffe404 	addi	sp,sp,-112
80206d2c:	2807883a 	mov	r3,r5
80206d30:	dfc01a15 	stw	ra,104(sp)
80206d34:	d9c01b15 	stw	r7,108(sp)
80206d38:	00a00034 	movhi	r2,32768
80206d3c:	10bfffc4 	addi	r2,r2,-1
80206d40:	02008204 	movi	r8,520
80206d44:	d8800215 	stw	r2,8(sp)
80206d48:	d8800515 	stw	r2,20(sp)
80206d4c:	d9c01b04 	addi	r7,sp,108
80206d50:	d80b883a 	mov	r5,sp
80206d54:	00bfffc4 	movi	r2,-1
80206d58:	d8c00015 	stw	r3,0(sp)
80206d5c:	d8c00415 	stw	r3,16(sp)
80206d60:	da00030d 	sth	r8,12(sp)
80206d64:	d880038d 	sth	r2,14(sp)
80206d68:	0206e840 	call	80206e84 <___svfprintf_internal_r>
80206d6c:	d8c00017 	ldw	r3,0(sp)
80206d70:	18000005 	stb	zero,0(r3)
80206d74:	dfc01a17 	ldw	ra,104(sp)
80206d78:	dec01c04 	addi	sp,sp,112
80206d7c:	f800283a 	ret

80206d80 <sprintf>:
80206d80:	deffe304 	addi	sp,sp,-116
80206d84:	2007883a 	mov	r3,r4
80206d88:	dfc01a15 	stw	ra,104(sp)
80206d8c:	d9801b15 	stw	r6,108(sp)
80206d90:	d9c01c15 	stw	r7,112(sp)
80206d94:	012008b4 	movhi	r4,32802
80206d98:	213e7d04 	addi	r4,r4,-1548
80206d9c:	21000017 	ldw	r4,0(r4)
80206da0:	00a00034 	movhi	r2,32768
80206da4:	10bfffc4 	addi	r2,r2,-1
80206da8:	280d883a 	mov	r6,r5
80206dac:	02008204 	movi	r8,520
80206db0:	d8800215 	stw	r2,8(sp)
80206db4:	d8800515 	stw	r2,20(sp)
80206db8:	d9c01b04 	addi	r7,sp,108
80206dbc:	d80b883a 	mov	r5,sp
80206dc0:	00bfffc4 	movi	r2,-1
80206dc4:	d8c00015 	stw	r3,0(sp)
80206dc8:	d8c00415 	stw	r3,16(sp)
80206dcc:	da00030d 	sth	r8,12(sp)
80206dd0:	d880038d 	sth	r2,14(sp)
80206dd4:	0206e840 	call	80206e84 <___svfprintf_internal_r>
80206dd8:	d8c00017 	ldw	r3,0(sp)
80206ddc:	18000005 	stb	zero,0(r3)
80206de0:	dfc01a17 	ldw	ra,104(sp)
80206de4:	dec01d04 	addi	sp,sp,116
80206de8:	f800283a 	ret

80206dec <strlen>:
80206dec:	208000cc 	andi	r2,r4,3
80206df0:	10002026 	beq	r2,zero,80206e74 <strlen+0x88>
80206df4:	20800007 	ldb	r2,0(r4)
80206df8:	10002026 	beq	r2,zero,80206e7c <strlen+0x90>
80206dfc:	2005883a 	mov	r2,r4
80206e00:	00000206 	br	80206e0c <strlen+0x20>
80206e04:	10c00007 	ldb	r3,0(r2)
80206e08:	18001826 	beq	r3,zero,80206e6c <strlen+0x80>
80206e0c:	10800044 	addi	r2,r2,1
80206e10:	10c000cc 	andi	r3,r2,3
80206e14:	183ffb1e 	bne	r3,zero,80206e04 <__reset+0xfa1e6e04>
80206e18:	10c00017 	ldw	r3,0(r2)
80206e1c:	01ffbff4 	movhi	r7,65279
80206e20:	39ffbfc4 	addi	r7,r7,-257
80206e24:	00ca303a 	nor	r5,zero,r3
80206e28:	01a02074 	movhi	r6,32897
80206e2c:	19c7883a 	add	r3,r3,r7
80206e30:	31a02004 	addi	r6,r6,-32640
80206e34:	1946703a 	and	r3,r3,r5
80206e38:	1986703a 	and	r3,r3,r6
80206e3c:	1800091e 	bne	r3,zero,80206e64 <strlen+0x78>
80206e40:	10800104 	addi	r2,r2,4
80206e44:	10c00017 	ldw	r3,0(r2)
80206e48:	19cb883a 	add	r5,r3,r7
80206e4c:	00c6303a 	nor	r3,zero,r3
80206e50:	28c6703a 	and	r3,r5,r3
80206e54:	1986703a 	and	r3,r3,r6
80206e58:	183ff926 	beq	r3,zero,80206e40 <__reset+0xfa1e6e40>
80206e5c:	00000106 	br	80206e64 <strlen+0x78>
80206e60:	10800044 	addi	r2,r2,1
80206e64:	10c00007 	ldb	r3,0(r2)
80206e68:	183ffd1e 	bne	r3,zero,80206e60 <__reset+0xfa1e6e60>
80206e6c:	1105c83a 	sub	r2,r2,r4
80206e70:	f800283a 	ret
80206e74:	2005883a 	mov	r2,r4
80206e78:	003fe706 	br	80206e18 <__reset+0xfa1e6e18>
80206e7c:	0005883a 	mov	r2,zero
80206e80:	f800283a 	ret

80206e84 <___svfprintf_internal_r>:
80206e84:	deffb704 	addi	sp,sp,-292
80206e88:	dfc04815 	stw	ra,288(sp)
80206e8c:	ddc04615 	stw	r23,280(sp)
80206e90:	d9402c15 	stw	r5,176(sp)
80206e94:	d9003915 	stw	r4,228(sp)
80206e98:	302f883a 	mov	r23,r6
80206e9c:	d9c02d15 	stw	r7,180(sp)
80206ea0:	df004715 	stw	fp,284(sp)
80206ea4:	dd804515 	stw	r22,276(sp)
80206ea8:	dd404415 	stw	r21,272(sp)
80206eac:	dd004315 	stw	r20,268(sp)
80206eb0:	dcc04215 	stw	r19,264(sp)
80206eb4:	dc804115 	stw	r18,260(sp)
80206eb8:	dc404015 	stw	r17,256(sp)
80206ebc:	dc003f15 	stw	r16,252(sp)
80206ec0:	020de740 	call	8020de74 <_localeconv_r>
80206ec4:	10800017 	ldw	r2,0(r2)
80206ec8:	1009883a 	mov	r4,r2
80206ecc:	d8803415 	stw	r2,208(sp)
80206ed0:	0206dec0 	call	80206dec <strlen>
80206ed4:	d8c02c17 	ldw	r3,176(sp)
80206ed8:	d8803815 	stw	r2,224(sp)
80206edc:	1880030b 	ldhu	r2,12(r3)
80206ee0:	1080200c 	andi	r2,r2,128
80206ee4:	10000226 	beq	r2,zero,80206ef0 <___svfprintf_internal_r+0x6c>
80206ee8:	18800417 	ldw	r2,16(r3)
80206eec:	10067f26 	beq	r2,zero,802088ec <___svfprintf_internal_r+0x1a68>
80206ef0:	dcc03917 	ldw	r19,228(sp)
80206ef4:	d8c00404 	addi	r3,sp,16
80206ef8:	056008b4 	movhi	r21,32802
80206efc:	d9001e04 	addi	r4,sp,120
80206f00:	ad764784 	addi	r21,r21,-9954
80206f04:	d8c01e15 	stw	r3,120(sp)
80206f08:	d8002015 	stw	zero,128(sp)
80206f0c:	d8001f15 	stw	zero,124(sp)
80206f10:	d8003315 	stw	zero,204(sp)
80206f14:	d8003615 	stw	zero,216(sp)
80206f18:	d8003715 	stw	zero,220(sp)
80206f1c:	1811883a 	mov	r8,r3
80206f20:	d8003a15 	stw	zero,232(sp)
80206f24:	d8003b15 	stw	zero,236(sp)
80206f28:	d8002f15 	stw	zero,188(sp)
80206f2c:	d9002815 	stw	r4,160(sp)
80206f30:	b8800007 	ldb	r2,0(r23)
80206f34:	10026726 	beq	r2,zero,802078d4 <___svfprintf_internal_r+0xa50>
80206f38:	00c00944 	movi	r3,37
80206f3c:	b821883a 	mov	r16,r23
80206f40:	10c0021e 	bne	r2,r3,80206f4c <___svfprintf_internal_r+0xc8>
80206f44:	00001406 	br	80206f98 <___svfprintf_internal_r+0x114>
80206f48:	10c00326 	beq	r2,r3,80206f58 <___svfprintf_internal_r+0xd4>
80206f4c:	84000044 	addi	r16,r16,1
80206f50:	80800007 	ldb	r2,0(r16)
80206f54:	103ffc1e 	bne	r2,zero,80206f48 <__reset+0xfa1e6f48>
80206f58:	85e3c83a 	sub	r17,r16,r23
80206f5c:	88000e26 	beq	r17,zero,80206f98 <___svfprintf_internal_r+0x114>
80206f60:	d8c02017 	ldw	r3,128(sp)
80206f64:	d8801f17 	ldw	r2,124(sp)
80206f68:	45c00015 	stw	r23,0(r8)
80206f6c:	1c47883a 	add	r3,r3,r17
80206f70:	10800044 	addi	r2,r2,1
80206f74:	d8c02015 	stw	r3,128(sp)
80206f78:	44400115 	stw	r17,4(r8)
80206f7c:	d8801f15 	stw	r2,124(sp)
80206f80:	00c001c4 	movi	r3,7
80206f84:	18809716 	blt	r3,r2,802071e4 <___svfprintf_internal_r+0x360>
80206f88:	42000204 	addi	r8,r8,8
80206f8c:	d9402f17 	ldw	r5,188(sp)
80206f90:	2c4b883a 	add	r5,r5,r17
80206f94:	d9402f15 	stw	r5,188(sp)
80206f98:	80800007 	ldb	r2,0(r16)
80206f9c:	10009826 	beq	r2,zero,80207200 <___svfprintf_internal_r+0x37c>
80206fa0:	84400047 	ldb	r17,1(r16)
80206fa4:	00bfffc4 	movi	r2,-1
80206fa8:	85c00044 	addi	r23,r16,1
80206fac:	d8002785 	stb	zero,158(sp)
80206fb0:	0007883a 	mov	r3,zero
80206fb4:	000f883a 	mov	r7,zero
80206fb8:	d8802915 	stw	r2,164(sp)
80206fbc:	d8003115 	stw	zero,196(sp)
80206fc0:	0025883a 	mov	r18,zero
80206fc4:	01401604 	movi	r5,88
80206fc8:	01800244 	movi	r6,9
80206fcc:	02800a84 	movi	r10,42
80206fd0:	02401b04 	movi	r9,108
80206fd4:	bdc00044 	addi	r23,r23,1
80206fd8:	88bff804 	addi	r2,r17,-32
80206fdc:	2882f036 	bltu	r5,r2,80207ba0 <___svfprintf_internal_r+0xd1c>
80206fe0:	100490ba 	slli	r2,r2,2
80206fe4:	01200834 	movhi	r4,32800
80206fe8:	211bfe04 	addi	r4,r4,28664
80206fec:	1105883a 	add	r2,r2,r4
80206ff0:	10800017 	ldw	r2,0(r2)
80206ff4:	1000683a 	jmp	r2
80206ff8:	80207b08 	cmpgei	zero,r16,-32276
80206ffc:	80207ba0 	cmpeqi	zero,r16,-32274
80207000:	80207ba0 	cmpeqi	zero,r16,-32274
80207004:	80207afc 	xorhi	zero,r16,33259
80207008:	80207ba0 	cmpeqi	zero,r16,-32274
8020700c:	80207ba0 	cmpeqi	zero,r16,-32274
80207010:	80207ba0 	cmpeqi	zero,r16,-32274
80207014:	80207ba0 	cmpeqi	zero,r16,-32274
80207018:	80207ba0 	cmpeqi	zero,r16,-32274
8020701c:	80207ba0 	cmpeqi	zero,r16,-32274
80207020:	8020725c 	xori	zero,r16,33225
80207024:	80207a38 	rdprs	zero,r16,-32280
80207028:	80207ba0 	cmpeqi	zero,r16,-32274
8020702c:	8020716c 	andhi	zero,r16,33221
80207030:	80207284 	addi	zero,r16,-32310
80207034:	80207ba0 	cmpeqi	zero,r16,-32274
80207038:	802072f8 	rdprs	zero,r16,-32309
8020703c:	802072c4 	addi	zero,r16,-32309
80207040:	802072c4 	addi	zero,r16,-32309
80207044:	802072c4 	addi	zero,r16,-32309
80207048:	802072c4 	addi	zero,r16,-32309
8020704c:	802072c4 	addi	zero,r16,-32309
80207050:	802072c4 	addi	zero,r16,-32309
80207054:	802072c4 	addi	zero,r16,-32309
80207058:	802072c4 	addi	zero,r16,-32309
8020705c:	802072c4 	addi	zero,r16,-32309
80207060:	80207ba0 	cmpeqi	zero,r16,-32274
80207064:	80207ba0 	cmpeqi	zero,r16,-32274
80207068:	80207ba0 	cmpeqi	zero,r16,-32274
8020706c:	80207ba0 	cmpeqi	zero,r16,-32274
80207070:	80207ba0 	cmpeqi	zero,r16,-32274
80207074:	80207ba0 	cmpeqi	zero,r16,-32274
80207078:	80207ba0 	cmpeqi	zero,r16,-32274
8020707c:	80207ba0 	cmpeqi	zero,r16,-32274
80207080:	80207ba0 	cmpeqi	zero,r16,-32274
80207084:	80207ba0 	cmpeqi	zero,r16,-32274
80207088:	802073b0 	cmpltui	zero,r16,33230
8020708c:	80207304 	addi	zero,r16,-32308
80207090:	80207ba0 	cmpeqi	zero,r16,-32274
80207094:	80207304 	addi	zero,r16,-32308
80207098:	80207ba0 	cmpeqi	zero,r16,-32274
8020709c:	80207ba0 	cmpeqi	zero,r16,-32274
802070a0:	80207ba0 	cmpeqi	zero,r16,-32274
802070a4:	80207ba0 	cmpeqi	zero,r16,-32274
802070a8:	802073a4 	muli	zero,r16,-32306
802070ac:	80207ba0 	cmpeqi	zero,r16,-32274
802070b0:	80207ba0 	cmpeqi	zero,r16,-32274
802070b4:	8020746c 	andhi	zero,r16,33233
802070b8:	80207ba0 	cmpeqi	zero,r16,-32274
802070bc:	80207ba0 	cmpeqi	zero,r16,-32274
802070c0:	80207ba0 	cmpeqi	zero,r16,-32274
802070c4:	80207ba0 	cmpeqi	zero,r16,-32274
802070c8:	80207ba0 	cmpeqi	zero,r16,-32274
802070cc:	802078dc 	xori	zero,r16,33251
802070d0:	80207ba0 	cmpeqi	zero,r16,-32274
802070d4:	80207ba0 	cmpeqi	zero,r16,-32274
802070d8:	8020793c 	xorhi	zero,r16,33252
802070dc:	80207ba0 	cmpeqi	zero,r16,-32274
802070e0:	80207ba0 	cmpeqi	zero,r16,-32274
802070e4:	80207ba0 	cmpeqi	zero,r16,-32274
802070e8:	80207ba0 	cmpeqi	zero,r16,-32274
802070ec:	80207ba0 	cmpeqi	zero,r16,-32274
802070f0:	80207ba0 	cmpeqi	zero,r16,-32274
802070f4:	80207ba0 	cmpeqi	zero,r16,-32274
802070f8:	80207ba0 	cmpeqi	zero,r16,-32274
802070fc:	80207ba0 	cmpeqi	zero,r16,-32274
80207100:	80207ba0 	cmpeqi	zero,r16,-32274
80207104:	802079ec 	andhi	zero,r16,33255
80207108:	80207b28 	cmpgeui	zero,r16,33260
8020710c:	80207304 	addi	zero,r16,-32308
80207110:	80207304 	addi	zero,r16,-32308
80207114:	80207304 	addi	zero,r16,-32308
80207118:	80207b7c 	xorhi	zero,r16,33261
8020711c:	80207b28 	cmpgeui	zero,r16,33260
80207120:	80207ba0 	cmpeqi	zero,r16,-32274
80207124:	80207ba0 	cmpeqi	zero,r16,-32274
80207128:	80207b38 	rdprs	zero,r16,-32276
8020712c:	80207ba0 	cmpeqi	zero,r16,-32274
80207130:	80207b48 	cmpgei	zero,r16,-32275
80207134:	80207a28 	cmpgeui	zero,r16,33256
80207138:	80207178 	rdprs	zero,r16,-32315
8020713c:	80207a48 	cmpgei	zero,r16,-32279
80207140:	80207ba0 	cmpeqi	zero,r16,-32274
80207144:	80207a54 	ori	zero,r16,33257
80207148:	80207ba0 	cmpeqi	zero,r16,-32274
8020714c:	80207ab0 	cmpltui	zero,r16,33258
80207150:	80207ba0 	cmpeqi	zero,r16,-32274
80207154:	80207ba0 	cmpeqi	zero,r16,-32274
80207158:	80207ac0 	call	880207ac <__reset+0x20007ac>
8020715c:	d9003117 	ldw	r4,196(sp)
80207160:	d8802d15 	stw	r2,180(sp)
80207164:	0109c83a 	sub	r4,zero,r4
80207168:	d9003115 	stw	r4,196(sp)
8020716c:	94800114 	ori	r18,r18,4
80207170:	bc400007 	ldb	r17,0(r23)
80207174:	003f9706 	br	80206fd4 <__reset+0xfa1e6fd4>
80207178:	00800c04 	movi	r2,48
8020717c:	d9002d17 	ldw	r4,180(sp)
80207180:	d9402917 	ldw	r5,164(sp)
80207184:	d8802705 	stb	r2,156(sp)
80207188:	00801e04 	movi	r2,120
8020718c:	d8802745 	stb	r2,157(sp)
80207190:	d8002785 	stb	zero,158(sp)
80207194:	20c00104 	addi	r3,r4,4
80207198:	25000017 	ldw	r20,0(r4)
8020719c:	002d883a 	mov	r22,zero
802071a0:	90800094 	ori	r2,r18,2
802071a4:	28028616 	blt	r5,zero,80207bc0 <___svfprintf_internal_r+0xd3c>
802071a8:	00bfdfc4 	movi	r2,-129
802071ac:	90a4703a 	and	r18,r18,r2
802071b0:	d8c02d15 	stw	r3,180(sp)
802071b4:	94800094 	ori	r18,r18,2
802071b8:	a002731e 	bne	r20,zero,80207b88 <___svfprintf_internal_r+0xd04>
802071bc:	00a008b4 	movhi	r2,32802
802071c0:	10b64004 	addi	r2,r2,-9984
802071c4:	d8803a15 	stw	r2,232(sp)
802071c8:	04401e04 	movi	r17,120
802071cc:	d8c02917 	ldw	r3,164(sp)
802071d0:	0039883a 	mov	fp,zero
802071d4:	1801d526 	beq	r3,zero,8020792c <___svfprintf_internal_r+0xaa8>
802071d8:	0029883a 	mov	r20,zero
802071dc:	002d883a 	mov	r22,zero
802071e0:	0001f106 	br	802079a8 <___svfprintf_internal_r+0xb24>
802071e4:	d9402c17 	ldw	r5,176(sp)
802071e8:	d9801e04 	addi	r6,sp,120
802071ec:	9809883a 	mov	r4,r19
802071f0:	02104140 	call	80210414 <__ssprint_r>
802071f4:	1000081e 	bne	r2,zero,80207218 <___svfprintf_internal_r+0x394>
802071f8:	da000404 	addi	r8,sp,16
802071fc:	003f6306 	br	80206f8c <__reset+0xfa1e6f8c>
80207200:	d8802017 	ldw	r2,128(sp)
80207204:	10000426 	beq	r2,zero,80207218 <___svfprintf_internal_r+0x394>
80207208:	d9402c17 	ldw	r5,176(sp)
8020720c:	d9003917 	ldw	r4,228(sp)
80207210:	d9801e04 	addi	r6,sp,120
80207214:	02104140 	call	80210414 <__ssprint_r>
80207218:	d8802c17 	ldw	r2,176(sp)
8020721c:	10c0030b 	ldhu	r3,12(r2)
80207220:	d8802f17 	ldw	r2,188(sp)
80207224:	18c0100c 	andi	r3,r3,64
80207228:	1805f51e 	bne	r3,zero,80208a00 <___svfprintf_internal_r+0x1b7c>
8020722c:	dfc04817 	ldw	ra,288(sp)
80207230:	df004717 	ldw	fp,284(sp)
80207234:	ddc04617 	ldw	r23,280(sp)
80207238:	dd804517 	ldw	r22,276(sp)
8020723c:	dd404417 	ldw	r21,272(sp)
80207240:	dd004317 	ldw	r20,268(sp)
80207244:	dcc04217 	ldw	r19,264(sp)
80207248:	dc804117 	ldw	r18,260(sp)
8020724c:	dc404017 	ldw	r17,256(sp)
80207250:	dc003f17 	ldw	r16,252(sp)
80207254:	dec04904 	addi	sp,sp,292
80207258:	f800283a 	ret
8020725c:	d8802d17 	ldw	r2,180(sp)
80207260:	d9002d17 	ldw	r4,180(sp)
80207264:	10800017 	ldw	r2,0(r2)
80207268:	d8803115 	stw	r2,196(sp)
8020726c:	20800104 	addi	r2,r4,4
80207270:	d9003117 	ldw	r4,196(sp)
80207274:	203fb916 	blt	r4,zero,8020715c <__reset+0xfa1e715c>
80207278:	d8802d15 	stw	r2,180(sp)
8020727c:	bc400007 	ldb	r17,0(r23)
80207280:	003f5406 	br	80206fd4 <__reset+0xfa1e6fd4>
80207284:	bc400007 	ldb	r17,0(r23)
80207288:	bac00044 	addi	r11,r23,1
8020728c:	8a873926 	beq	r17,r10,80208f74 <___svfprintf_internal_r+0x20f0>
80207290:	88bff404 	addi	r2,r17,-48
80207294:	0009883a 	mov	r4,zero
80207298:	30868836 	bltu	r6,r2,80208cbc <___svfprintf_internal_r+0x1e38>
8020729c:	5c400007 	ldb	r17,0(r11)
802072a0:	210002a4 	muli	r4,r4,10
802072a4:	5dc00044 	addi	r23,r11,1
802072a8:	b817883a 	mov	r11,r23
802072ac:	2089883a 	add	r4,r4,r2
802072b0:	88bff404 	addi	r2,r17,-48
802072b4:	30bff92e 	bgeu	r6,r2,8020729c <__reset+0xfa1e729c>
802072b8:	2005d716 	blt	r4,zero,80208a18 <___svfprintf_internal_r+0x1b94>
802072bc:	d9002915 	stw	r4,164(sp)
802072c0:	003f4506 	br	80206fd8 <__reset+0xfa1e6fd8>
802072c4:	b809883a 	mov	r4,r23
802072c8:	d8003115 	stw	zero,196(sp)
802072cc:	88bff404 	addi	r2,r17,-48
802072d0:	0017883a 	mov	r11,zero
802072d4:	24400007 	ldb	r17,0(r4)
802072d8:	5ac002a4 	muli	r11,r11,10
802072dc:	bdc00044 	addi	r23,r23,1
802072e0:	b809883a 	mov	r4,r23
802072e4:	12d7883a 	add	r11,r2,r11
802072e8:	88bff404 	addi	r2,r17,-48
802072ec:	30bff92e 	bgeu	r6,r2,802072d4 <__reset+0xfa1e72d4>
802072f0:	dac03115 	stw	r11,196(sp)
802072f4:	003f3806 	br	80206fd8 <__reset+0xfa1e6fd8>
802072f8:	94802014 	ori	r18,r18,128
802072fc:	bc400007 	ldb	r17,0(r23)
80207300:	003f3406 	br	80206fd4 <__reset+0xfa1e6fd4>
80207304:	18c03fcc 	andi	r3,r3,255
80207308:	1807471e 	bne	r3,zero,80209028 <___svfprintf_internal_r+0x21a4>
8020730c:	9080020c 	andi	r2,r18,8
80207310:	10047d26 	beq	r2,zero,80208508 <___svfprintf_internal_r+0x1684>
80207314:	d8c02d17 	ldw	r3,180(sp)
80207318:	d9002d17 	ldw	r4,180(sp)
8020731c:	d9402d17 	ldw	r5,180(sp)
80207320:	18c00017 	ldw	r3,0(r3)
80207324:	21000117 	ldw	r4,4(r4)
80207328:	29400204 	addi	r5,r5,8
8020732c:	d8c03615 	stw	r3,216(sp)
80207330:	d9003715 	stw	r4,220(sp)
80207334:	d9402d15 	stw	r5,180(sp)
80207338:	d9003617 	ldw	r4,216(sp)
8020733c:	d9403717 	ldw	r5,220(sp)
80207340:	da003e15 	stw	r8,248(sp)
80207344:	04000044 	movi	r16,1
80207348:	02101340 	call	80210134 <__fpclassifyd>
8020734c:	da003e17 	ldw	r8,248(sp)
80207350:	14044b1e 	bne	r2,r16,80208480 <___svfprintf_internal_r+0x15fc>
80207354:	d9003617 	ldw	r4,216(sp)
80207358:	d9403717 	ldw	r5,220(sp)
8020735c:	000d883a 	mov	r6,zero
80207360:	000f883a 	mov	r7,zero
80207364:	02156f80 	call	802156f8 <__ledf2>
80207368:	da003e17 	ldw	r8,248(sp)
8020736c:	1005f316 	blt	r2,zero,80208b3c <___svfprintf_internal_r+0x1cb8>
80207370:	df002783 	ldbu	fp,158(sp)
80207374:	008011c4 	movi	r2,71
80207378:	1445590e 	bge	r2,r17,802088e0 <___svfprintf_internal_r+0x1a5c>
8020737c:	042008b4 	movhi	r16,32802
80207380:	84363804 	addi	r16,r16,-10016
80207384:	00c000c4 	movi	r3,3
80207388:	00bfdfc4 	movi	r2,-129
8020738c:	d8c02a15 	stw	r3,168(sp)
80207390:	90a4703a 	and	r18,r18,r2
80207394:	d8c02e15 	stw	r3,184(sp)
80207398:	d8002915 	stw	zero,164(sp)
8020739c:	d8003215 	stw	zero,200(sp)
802073a0:	00006606 	br	8020753c <___svfprintf_internal_r+0x6b8>
802073a4:	94800214 	ori	r18,r18,8
802073a8:	bc400007 	ldb	r17,0(r23)
802073ac:	003f0906 	br	80206fd4 <__reset+0xfa1e6fd4>
802073b0:	18c03fcc 	andi	r3,r3,255
802073b4:	1807181e 	bne	r3,zero,80209018 <___svfprintf_internal_r+0x2194>
802073b8:	94800414 	ori	r18,r18,16
802073bc:	9080080c 	andi	r2,r18,32
802073c0:	10039626 	beq	r2,zero,8020821c <___svfprintf_internal_r+0x1398>
802073c4:	d9402d17 	ldw	r5,180(sp)
802073c8:	28800117 	ldw	r2,4(r5)
802073cc:	2d000017 	ldw	r20,0(r5)
802073d0:	29400204 	addi	r5,r5,8
802073d4:	d9402d15 	stw	r5,180(sp)
802073d8:	102d883a 	mov	r22,r2
802073dc:	10039816 	blt	r2,zero,80208240 <___svfprintf_internal_r+0x13bc>
802073e0:	d9402917 	ldw	r5,164(sp)
802073e4:	df002783 	ldbu	fp,158(sp)
802073e8:	2803ab16 	blt	r5,zero,80208298 <___svfprintf_internal_r+0x1414>
802073ec:	00ffdfc4 	movi	r3,-129
802073f0:	a584b03a 	or	r2,r20,r22
802073f4:	90e4703a 	and	r18,r18,r3
802073f8:	10014a26 	beq	r2,zero,80207924 <___svfprintf_internal_r+0xaa0>
802073fc:	b0034b26 	beq	r22,zero,8020812c <___svfprintf_internal_r+0x12a8>
80207400:	dc402a15 	stw	r17,168(sp)
80207404:	dc001e04 	addi	r16,sp,120
80207408:	b023883a 	mov	r17,r22
8020740c:	402d883a 	mov	r22,r8
80207410:	a009883a 	mov	r4,r20
80207414:	880b883a 	mov	r5,r17
80207418:	01800284 	movi	r6,10
8020741c:	000f883a 	mov	r7,zero
80207420:	0213d140 	call	80213d14 <__umoddi3>
80207424:	10800c04 	addi	r2,r2,48
80207428:	843fffc4 	addi	r16,r16,-1
8020742c:	a009883a 	mov	r4,r20
80207430:	880b883a 	mov	r5,r17
80207434:	80800005 	stb	r2,0(r16)
80207438:	01800284 	movi	r6,10
8020743c:	000f883a 	mov	r7,zero
80207440:	021379c0 	call	8021379c <__udivdi3>
80207444:	1029883a 	mov	r20,r2
80207448:	10c4b03a 	or	r2,r2,r3
8020744c:	1823883a 	mov	r17,r3
80207450:	103fef1e 	bne	r2,zero,80207410 <__reset+0xfa1e7410>
80207454:	d8c02817 	ldw	r3,160(sp)
80207458:	dc402a17 	ldw	r17,168(sp)
8020745c:	b011883a 	mov	r8,r22
80207460:	1c07c83a 	sub	r3,r3,r16
80207464:	d8c02e15 	stw	r3,184(sp)
80207468:	00002e06 	br	80207524 <___svfprintf_internal_r+0x6a0>
8020746c:	18c03fcc 	andi	r3,r3,255
80207470:	1806e71e 	bne	r3,zero,80209010 <___svfprintf_internal_r+0x218c>
80207474:	94800414 	ori	r18,r18,16
80207478:	9080080c 	andi	r2,r18,32
8020747c:	1002d426 	beq	r2,zero,80207fd0 <___svfprintf_internal_r+0x114c>
80207480:	d9402d17 	ldw	r5,180(sp)
80207484:	d8c02917 	ldw	r3,164(sp)
80207488:	d8002785 	stb	zero,158(sp)
8020748c:	28800204 	addi	r2,r5,8
80207490:	2d000017 	ldw	r20,0(r5)
80207494:	2d800117 	ldw	r22,4(r5)
80207498:	18041516 	blt	r3,zero,802084f0 <___svfprintf_internal_r+0x166c>
8020749c:	013fdfc4 	movi	r4,-129
802074a0:	a586b03a 	or	r3,r20,r22
802074a4:	d8802d15 	stw	r2,180(sp)
802074a8:	9124703a 	and	r18,r18,r4
802074ac:	1802d51e 	bne	r3,zero,80208004 <___svfprintf_internal_r+0x1180>
802074b0:	d9402917 	ldw	r5,164(sp)
802074b4:	0039883a 	mov	fp,zero
802074b8:	2806be26 	beq	r5,zero,80208fb4 <___svfprintf_internal_r+0x2130>
802074bc:	0029883a 	mov	r20,zero
802074c0:	002d883a 	mov	r22,zero
802074c4:	dc001e04 	addi	r16,sp,120
802074c8:	a006d0fa 	srli	r3,r20,3
802074cc:	b008977a 	slli	r4,r22,29
802074d0:	b02cd0fa 	srli	r22,r22,3
802074d4:	a50001cc 	andi	r20,r20,7
802074d8:	a0800c04 	addi	r2,r20,48
802074dc:	843fffc4 	addi	r16,r16,-1
802074e0:	20e8b03a 	or	r20,r4,r3
802074e4:	80800005 	stb	r2,0(r16)
802074e8:	a586b03a 	or	r3,r20,r22
802074ec:	183ff61e 	bne	r3,zero,802074c8 <__reset+0xfa1e74c8>
802074f0:	90c0004c 	andi	r3,r18,1
802074f4:	18013926 	beq	r3,zero,802079dc <___svfprintf_internal_r+0xb58>
802074f8:	10803fcc 	andi	r2,r2,255
802074fc:	1080201c 	xori	r2,r2,128
80207500:	10bfe004 	addi	r2,r2,-128
80207504:	00c00c04 	movi	r3,48
80207508:	10c13426 	beq	r2,r3,802079dc <___svfprintf_internal_r+0xb58>
8020750c:	80ffffc5 	stb	r3,-1(r16)
80207510:	d8c02817 	ldw	r3,160(sp)
80207514:	80bfffc4 	addi	r2,r16,-1
80207518:	1021883a 	mov	r16,r2
8020751c:	1887c83a 	sub	r3,r3,r2
80207520:	d8c02e15 	stw	r3,184(sp)
80207524:	d8802e17 	ldw	r2,184(sp)
80207528:	d9002917 	ldw	r4,164(sp)
8020752c:	1100010e 	bge	r2,r4,80207534 <___svfprintf_internal_r+0x6b0>
80207530:	2005883a 	mov	r2,r4
80207534:	d8802a15 	stw	r2,168(sp)
80207538:	d8003215 	stw	zero,200(sp)
8020753c:	e7003fcc 	andi	fp,fp,255
80207540:	e700201c 	xori	fp,fp,128
80207544:	e73fe004 	addi	fp,fp,-128
80207548:	e0000326 	beq	fp,zero,80207558 <___svfprintf_internal_r+0x6d4>
8020754c:	d8c02a17 	ldw	r3,168(sp)
80207550:	18c00044 	addi	r3,r3,1
80207554:	d8c02a15 	stw	r3,168(sp)
80207558:	90c0008c 	andi	r3,r18,2
8020755c:	d8c02b15 	stw	r3,172(sp)
80207560:	18000326 	beq	r3,zero,80207570 <___svfprintf_internal_r+0x6ec>
80207564:	d8c02a17 	ldw	r3,168(sp)
80207568:	18c00084 	addi	r3,r3,2
8020756c:	d8c02a15 	stw	r3,168(sp)
80207570:	90c0210c 	andi	r3,r18,132
80207574:	d8c03015 	stw	r3,192(sp)
80207578:	1801a11e 	bne	r3,zero,80207c00 <___svfprintf_internal_r+0xd7c>
8020757c:	d9003117 	ldw	r4,196(sp)
80207580:	d8c02a17 	ldw	r3,168(sp)
80207584:	20e9c83a 	sub	r20,r4,r3
80207588:	05019d0e 	bge	zero,r20,80207c00 <___svfprintf_internal_r+0xd7c>
8020758c:	02400404 	movi	r9,16
80207590:	d8c02017 	ldw	r3,128(sp)
80207594:	d8801f17 	ldw	r2,124(sp)
80207598:	4d051b0e 	bge	r9,r20,80208a08 <___svfprintf_internal_r+0x1b84>
8020759c:	016008b4 	movhi	r5,32802
802075a0:	29764b84 	addi	r5,r5,-9938
802075a4:	dc403c15 	stw	r17,240(sp)
802075a8:	d9403515 	stw	r5,212(sp)
802075ac:	a023883a 	mov	r17,r20
802075b0:	482d883a 	mov	r22,r9
802075b4:	9029883a 	mov	r20,r18
802075b8:	070001c4 	movi	fp,7
802075bc:	8025883a 	mov	r18,r16
802075c0:	dc002c17 	ldw	r16,176(sp)
802075c4:	00000306 	br	802075d4 <___svfprintf_internal_r+0x750>
802075c8:	8c7ffc04 	addi	r17,r17,-16
802075cc:	42000204 	addi	r8,r8,8
802075d0:	b440130e 	bge	r22,r17,80207620 <___svfprintf_internal_r+0x79c>
802075d4:	012008b4 	movhi	r4,32802
802075d8:	18c00404 	addi	r3,r3,16
802075dc:	10800044 	addi	r2,r2,1
802075e0:	21364b84 	addi	r4,r4,-9938
802075e4:	41000015 	stw	r4,0(r8)
802075e8:	45800115 	stw	r22,4(r8)
802075ec:	d8c02015 	stw	r3,128(sp)
802075f0:	d8801f15 	stw	r2,124(sp)
802075f4:	e0bff40e 	bge	fp,r2,802075c8 <__reset+0xfa1e75c8>
802075f8:	d9801e04 	addi	r6,sp,120
802075fc:	800b883a 	mov	r5,r16
80207600:	9809883a 	mov	r4,r19
80207604:	02104140 	call	80210414 <__ssprint_r>
80207608:	103f031e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
8020760c:	8c7ffc04 	addi	r17,r17,-16
80207610:	d8c02017 	ldw	r3,128(sp)
80207614:	d8801f17 	ldw	r2,124(sp)
80207618:	da000404 	addi	r8,sp,16
8020761c:	b47fed16 	blt	r22,r17,802075d4 <__reset+0xfa1e75d4>
80207620:	9021883a 	mov	r16,r18
80207624:	a025883a 	mov	r18,r20
80207628:	8829883a 	mov	r20,r17
8020762c:	dc403c17 	ldw	r17,240(sp)
80207630:	d9403517 	ldw	r5,212(sp)
80207634:	a0c7883a 	add	r3,r20,r3
80207638:	10800044 	addi	r2,r2,1
8020763c:	41400015 	stw	r5,0(r8)
80207640:	45000115 	stw	r20,4(r8)
80207644:	d8c02015 	stw	r3,128(sp)
80207648:	d8801f15 	stw	r2,124(sp)
8020764c:	010001c4 	movi	r4,7
80207650:	20829f16 	blt	r4,r2,802080d0 <___svfprintf_internal_r+0x124c>
80207654:	df002787 	ldb	fp,158(sp)
80207658:	42000204 	addi	r8,r8,8
8020765c:	e0000c26 	beq	fp,zero,80207690 <___svfprintf_internal_r+0x80c>
80207660:	d8801f17 	ldw	r2,124(sp)
80207664:	d9002784 	addi	r4,sp,158
80207668:	18c00044 	addi	r3,r3,1
8020766c:	10800044 	addi	r2,r2,1
80207670:	41000015 	stw	r4,0(r8)
80207674:	01000044 	movi	r4,1
80207678:	41000115 	stw	r4,4(r8)
8020767c:	d8c02015 	stw	r3,128(sp)
80207680:	d8801f15 	stw	r2,124(sp)
80207684:	010001c4 	movi	r4,7
80207688:	20823816 	blt	r4,r2,80207f6c <___svfprintf_internal_r+0x10e8>
8020768c:	42000204 	addi	r8,r8,8
80207690:	d8802b17 	ldw	r2,172(sp)
80207694:	10000c26 	beq	r2,zero,802076c8 <___svfprintf_internal_r+0x844>
80207698:	d8801f17 	ldw	r2,124(sp)
8020769c:	d9002704 	addi	r4,sp,156
802076a0:	18c00084 	addi	r3,r3,2
802076a4:	10800044 	addi	r2,r2,1
802076a8:	41000015 	stw	r4,0(r8)
802076ac:	01000084 	movi	r4,2
802076b0:	41000115 	stw	r4,4(r8)
802076b4:	d8c02015 	stw	r3,128(sp)
802076b8:	d8801f15 	stw	r2,124(sp)
802076bc:	010001c4 	movi	r4,7
802076c0:	20823216 	blt	r4,r2,80207f8c <___svfprintf_internal_r+0x1108>
802076c4:	42000204 	addi	r8,r8,8
802076c8:	d9003017 	ldw	r4,192(sp)
802076cc:	00802004 	movi	r2,128
802076d0:	20819726 	beq	r4,r2,80207d30 <___svfprintf_internal_r+0xeac>
802076d4:	d9402917 	ldw	r5,164(sp)
802076d8:	d8802e17 	ldw	r2,184(sp)
802076dc:	28adc83a 	sub	r22,r5,r2
802076e0:	05802f0e 	bge	zero,r22,802077a0 <___svfprintf_internal_r+0x91c>
802076e4:	07000404 	movi	fp,16
802076e8:	d8801f17 	ldw	r2,124(sp)
802076ec:	e583c00e 	bge	fp,r22,802085f0 <___svfprintf_internal_r+0x176c>
802076f0:	016008b4 	movhi	r5,32802
802076f4:	29764784 	addi	r5,r5,-9954
802076f8:	dc402915 	stw	r17,164(sp)
802076fc:	d9402b15 	stw	r5,172(sp)
80207700:	b023883a 	mov	r17,r22
80207704:	050001c4 	movi	r20,7
80207708:	902d883a 	mov	r22,r18
8020770c:	8025883a 	mov	r18,r16
80207710:	dc002c17 	ldw	r16,176(sp)
80207714:	00000306 	br	80207724 <___svfprintf_internal_r+0x8a0>
80207718:	8c7ffc04 	addi	r17,r17,-16
8020771c:	42000204 	addi	r8,r8,8
80207720:	e440110e 	bge	fp,r17,80207768 <___svfprintf_internal_r+0x8e4>
80207724:	18c00404 	addi	r3,r3,16
80207728:	10800044 	addi	r2,r2,1
8020772c:	45400015 	stw	r21,0(r8)
80207730:	47000115 	stw	fp,4(r8)
80207734:	d8c02015 	stw	r3,128(sp)
80207738:	d8801f15 	stw	r2,124(sp)
8020773c:	a0bff60e 	bge	r20,r2,80207718 <__reset+0xfa1e7718>
80207740:	d9801e04 	addi	r6,sp,120
80207744:	800b883a 	mov	r5,r16
80207748:	9809883a 	mov	r4,r19
8020774c:	02104140 	call	80210414 <__ssprint_r>
80207750:	103eb11e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
80207754:	8c7ffc04 	addi	r17,r17,-16
80207758:	d8c02017 	ldw	r3,128(sp)
8020775c:	d8801f17 	ldw	r2,124(sp)
80207760:	da000404 	addi	r8,sp,16
80207764:	e47fef16 	blt	fp,r17,80207724 <__reset+0xfa1e7724>
80207768:	9021883a 	mov	r16,r18
8020776c:	b025883a 	mov	r18,r22
80207770:	882d883a 	mov	r22,r17
80207774:	dc402917 	ldw	r17,164(sp)
80207778:	d9002b17 	ldw	r4,172(sp)
8020777c:	1d87883a 	add	r3,r3,r22
80207780:	10800044 	addi	r2,r2,1
80207784:	41000015 	stw	r4,0(r8)
80207788:	45800115 	stw	r22,4(r8)
8020778c:	d8c02015 	stw	r3,128(sp)
80207790:	d8801f15 	stw	r2,124(sp)
80207794:	010001c4 	movi	r4,7
80207798:	2081ec16 	blt	r4,r2,80207f4c <___svfprintf_internal_r+0x10c8>
8020779c:	42000204 	addi	r8,r8,8
802077a0:	9080400c 	andi	r2,r18,256
802077a4:	1001181e 	bne	r2,zero,80207c08 <___svfprintf_internal_r+0xd84>
802077a8:	d9402e17 	ldw	r5,184(sp)
802077ac:	d8801f17 	ldw	r2,124(sp)
802077b0:	44000015 	stw	r16,0(r8)
802077b4:	1947883a 	add	r3,r3,r5
802077b8:	10800044 	addi	r2,r2,1
802077bc:	41400115 	stw	r5,4(r8)
802077c0:	d8c02015 	stw	r3,128(sp)
802077c4:	d8801f15 	stw	r2,124(sp)
802077c8:	010001c4 	movi	r4,7
802077cc:	2081d116 	blt	r4,r2,80207f14 <___svfprintf_internal_r+0x1090>
802077d0:	42000204 	addi	r8,r8,8
802077d4:	9480010c 	andi	r18,r18,4
802077d8:	90003226 	beq	r18,zero,802078a4 <___svfprintf_internal_r+0xa20>
802077dc:	d9403117 	ldw	r5,196(sp)
802077e0:	d8802a17 	ldw	r2,168(sp)
802077e4:	28a1c83a 	sub	r16,r5,r2
802077e8:	04002e0e 	bge	zero,r16,802078a4 <___svfprintf_internal_r+0xa20>
802077ec:	04400404 	movi	r17,16
802077f0:	d8801f17 	ldw	r2,124(sp)
802077f4:	8c04b90e 	bge	r17,r16,80208adc <___svfprintf_internal_r+0x1c58>
802077f8:	016008b4 	movhi	r5,32802
802077fc:	29764b84 	addi	r5,r5,-9938
80207800:	d9403515 	stw	r5,212(sp)
80207804:	048001c4 	movi	r18,7
80207808:	dd002c17 	ldw	r20,176(sp)
8020780c:	00000306 	br	8020781c <___svfprintf_internal_r+0x998>
80207810:	843ffc04 	addi	r16,r16,-16
80207814:	42000204 	addi	r8,r8,8
80207818:	8c00130e 	bge	r17,r16,80207868 <___svfprintf_internal_r+0x9e4>
8020781c:	012008b4 	movhi	r4,32802
80207820:	18c00404 	addi	r3,r3,16
80207824:	10800044 	addi	r2,r2,1
80207828:	21364b84 	addi	r4,r4,-9938
8020782c:	41000015 	stw	r4,0(r8)
80207830:	44400115 	stw	r17,4(r8)
80207834:	d8c02015 	stw	r3,128(sp)
80207838:	d8801f15 	stw	r2,124(sp)
8020783c:	90bff40e 	bge	r18,r2,80207810 <__reset+0xfa1e7810>
80207840:	d9801e04 	addi	r6,sp,120
80207844:	a00b883a 	mov	r5,r20
80207848:	9809883a 	mov	r4,r19
8020784c:	02104140 	call	80210414 <__ssprint_r>
80207850:	103e711e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
80207854:	843ffc04 	addi	r16,r16,-16
80207858:	d8c02017 	ldw	r3,128(sp)
8020785c:	d8801f17 	ldw	r2,124(sp)
80207860:	da000404 	addi	r8,sp,16
80207864:	8c3fed16 	blt	r17,r16,8020781c <__reset+0xfa1e781c>
80207868:	d9403517 	ldw	r5,212(sp)
8020786c:	1c07883a 	add	r3,r3,r16
80207870:	10800044 	addi	r2,r2,1
80207874:	41400015 	stw	r5,0(r8)
80207878:	44000115 	stw	r16,4(r8)
8020787c:	d8c02015 	stw	r3,128(sp)
80207880:	d8801f15 	stw	r2,124(sp)
80207884:	010001c4 	movi	r4,7
80207888:	2080060e 	bge	r4,r2,802078a4 <___svfprintf_internal_r+0xa20>
8020788c:	d9402c17 	ldw	r5,176(sp)
80207890:	d9801e04 	addi	r6,sp,120
80207894:	9809883a 	mov	r4,r19
80207898:	02104140 	call	80210414 <__ssprint_r>
8020789c:	103e5e1e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
802078a0:	d8c02017 	ldw	r3,128(sp)
802078a4:	d8803117 	ldw	r2,196(sp)
802078a8:	d9002a17 	ldw	r4,168(sp)
802078ac:	1100010e 	bge	r2,r4,802078b4 <___svfprintf_internal_r+0xa30>
802078b0:	2005883a 	mov	r2,r4
802078b4:	d9402f17 	ldw	r5,188(sp)
802078b8:	288b883a 	add	r5,r5,r2
802078bc:	d9402f15 	stw	r5,188(sp)
802078c0:	18019c1e 	bne	r3,zero,80207f34 <___svfprintf_internal_r+0x10b0>
802078c4:	b8800007 	ldb	r2,0(r23)
802078c8:	d8001f15 	stw	zero,124(sp)
802078cc:	da000404 	addi	r8,sp,16
802078d0:	103d991e 	bne	r2,zero,80206f38 <__reset+0xfa1e6f38>
802078d4:	b821883a 	mov	r16,r23
802078d8:	003daf06 	br	80206f98 <__reset+0xfa1e6f98>
802078dc:	18c03fcc 	andi	r3,r3,255
802078e0:	1805c71e 	bne	r3,zero,80209000 <___svfprintf_internal_r+0x217c>
802078e4:	94800414 	ori	r18,r18,16
802078e8:	9080080c 	andi	r2,r18,32
802078ec:	10020126 	beq	r2,zero,802080f4 <___svfprintf_internal_r+0x1270>
802078f0:	d8802d17 	ldw	r2,180(sp)
802078f4:	d9002917 	ldw	r4,164(sp)
802078f8:	d8002785 	stb	zero,158(sp)
802078fc:	10c00204 	addi	r3,r2,8
80207900:	15000017 	ldw	r20,0(r2)
80207904:	15800117 	ldw	r22,4(r2)
80207908:	20038e16 	blt	r4,zero,80208744 <___svfprintf_internal_r+0x18c0>
8020790c:	013fdfc4 	movi	r4,-129
80207910:	a584b03a 	or	r2,r20,r22
80207914:	d8c02d15 	stw	r3,180(sp)
80207918:	9124703a 	and	r18,r18,r4
8020791c:	0039883a 	mov	fp,zero
80207920:	103eb61e 	bne	r2,zero,802073fc <__reset+0xfa1e73fc>
80207924:	d8802917 	ldw	r2,164(sp)
80207928:	1002c81e 	bne	r2,zero,8020844c <___svfprintf_internal_r+0x15c8>
8020792c:	d8002915 	stw	zero,164(sp)
80207930:	d8002e15 	stw	zero,184(sp)
80207934:	dc001e04 	addi	r16,sp,120
80207938:	003efa06 	br	80207524 <__reset+0xfa1e7524>
8020793c:	18c03fcc 	andi	r3,r3,255
80207940:	1805ad1e 	bne	r3,zero,80208ff8 <___svfprintf_internal_r+0x2174>
80207944:	016008b4 	movhi	r5,32802
80207948:	29763b04 	addi	r5,r5,-10004
8020794c:	d9403a15 	stw	r5,232(sp)
80207950:	9080080c 	andi	r2,r18,32
80207954:	10006126 	beq	r2,zero,80207adc <___svfprintf_internal_r+0xc58>
80207958:	d8802d17 	ldw	r2,180(sp)
8020795c:	15000017 	ldw	r20,0(r2)
80207960:	15800117 	ldw	r22,4(r2)
80207964:	10800204 	addi	r2,r2,8
80207968:	d8802d15 	stw	r2,180(sp)
8020796c:	9080004c 	andi	r2,r18,1
80207970:	10018e26 	beq	r2,zero,80207fac <___svfprintf_internal_r+0x1128>
80207974:	a584b03a 	or	r2,r20,r22
80207978:	10030926 	beq	r2,zero,802085a0 <___svfprintf_internal_r+0x171c>
8020797c:	d8c02917 	ldw	r3,164(sp)
80207980:	00800c04 	movi	r2,48
80207984:	d8802705 	stb	r2,156(sp)
80207988:	dc402745 	stb	r17,157(sp)
8020798c:	d8002785 	stb	zero,158(sp)
80207990:	90800094 	ori	r2,r18,2
80207994:	18048716 	blt	r3,zero,80208bb4 <___svfprintf_internal_r+0x1d30>
80207998:	00bfdfc4 	movi	r2,-129
8020799c:	90a4703a 	and	r18,r18,r2
802079a0:	94800094 	ori	r18,r18,2
802079a4:	0039883a 	mov	fp,zero
802079a8:	d9003a17 	ldw	r4,232(sp)
802079ac:	dc001e04 	addi	r16,sp,120
802079b0:	a08003cc 	andi	r2,r20,15
802079b4:	b006973a 	slli	r3,r22,28
802079b8:	2085883a 	add	r2,r4,r2
802079bc:	a028d13a 	srli	r20,r20,4
802079c0:	10800003 	ldbu	r2,0(r2)
802079c4:	b02cd13a 	srli	r22,r22,4
802079c8:	843fffc4 	addi	r16,r16,-1
802079cc:	1d28b03a 	or	r20,r3,r20
802079d0:	80800005 	stb	r2,0(r16)
802079d4:	a584b03a 	or	r2,r20,r22
802079d8:	103ff51e 	bne	r2,zero,802079b0 <__reset+0xfa1e79b0>
802079dc:	d8c02817 	ldw	r3,160(sp)
802079e0:	1c07c83a 	sub	r3,r3,r16
802079e4:	d8c02e15 	stw	r3,184(sp)
802079e8:	003ece06 	br	80207524 <__reset+0xfa1e7524>
802079ec:	d8c02d17 	ldw	r3,180(sp)
802079f0:	d9002d17 	ldw	r4,180(sp)
802079f4:	d8002785 	stb	zero,158(sp)
802079f8:	18800017 	ldw	r2,0(r3)
802079fc:	21000104 	addi	r4,r4,4
80207a00:	00c00044 	movi	r3,1
80207a04:	d8c02a15 	stw	r3,168(sp)
80207a08:	d8801405 	stb	r2,80(sp)
80207a0c:	d9002d15 	stw	r4,180(sp)
80207a10:	d8c02e15 	stw	r3,184(sp)
80207a14:	d8002915 	stw	zero,164(sp)
80207a18:	d8003215 	stw	zero,200(sp)
80207a1c:	dc001404 	addi	r16,sp,80
80207a20:	0039883a 	mov	fp,zero
80207a24:	003ecc06 	br	80207558 <__reset+0xfa1e7558>
80207a28:	18c03fcc 	andi	r3,r3,255
80207a2c:	183e9226 	beq	r3,zero,80207478 <__reset+0xfa1e7478>
80207a30:	d9c02785 	stb	r7,158(sp)
80207a34:	003e9006 	br	80207478 <__reset+0xfa1e7478>
80207a38:	00c00044 	movi	r3,1
80207a3c:	01c00ac4 	movi	r7,43
80207a40:	bc400007 	ldb	r17,0(r23)
80207a44:	003d6306 	br	80206fd4 <__reset+0xfa1e6fd4>
80207a48:	94800814 	ori	r18,r18,32
80207a4c:	bc400007 	ldb	r17,0(r23)
80207a50:	003d6006 	br	80206fd4 <__reset+0xfa1e6fd4>
80207a54:	d8c02d17 	ldw	r3,180(sp)
80207a58:	d8002785 	stb	zero,158(sp)
80207a5c:	1c000017 	ldw	r16,0(r3)
80207a60:	1d000104 	addi	r20,r3,4
80207a64:	80040f26 	beq	r16,zero,80208aa4 <___svfprintf_internal_r+0x1c20>
80207a68:	d9002917 	ldw	r4,164(sp)
80207a6c:	2003dc16 	blt	r4,zero,802089e0 <___svfprintf_internal_r+0x1b5c>
80207a70:	200d883a 	mov	r6,r4
80207a74:	000b883a 	mov	r5,zero
80207a78:	8009883a 	mov	r4,r16
80207a7c:	da003e15 	stw	r8,248(sp)
80207a80:	020e86c0 	call	8020e86c <memchr>
80207a84:	da003e17 	ldw	r8,248(sp)
80207a88:	10045826 	beq	r2,zero,80208bec <___svfprintf_internal_r+0x1d68>
80207a8c:	1405c83a 	sub	r2,r2,r16
80207a90:	d8802e15 	stw	r2,184(sp)
80207a94:	1003d816 	blt	r2,zero,802089f8 <___svfprintf_internal_r+0x1b74>
80207a98:	df002783 	ldbu	fp,158(sp)
80207a9c:	d8802a15 	stw	r2,168(sp)
80207aa0:	dd002d15 	stw	r20,180(sp)
80207aa4:	d8002915 	stw	zero,164(sp)
80207aa8:	d8003215 	stw	zero,200(sp)
80207aac:	003ea306 	br	8020753c <__reset+0xfa1e753c>
80207ab0:	18c03fcc 	andi	r3,r3,255
80207ab4:	183f8c26 	beq	r3,zero,802078e8 <__reset+0xfa1e78e8>
80207ab8:	d9c02785 	stb	r7,158(sp)
80207abc:	003f8a06 	br	802078e8 <__reset+0xfa1e78e8>
80207ac0:	18c03fcc 	andi	r3,r3,255
80207ac4:	1805631e 	bne	r3,zero,80209054 <___svfprintf_internal_r+0x21d0>
80207ac8:	016008b4 	movhi	r5,32802
80207acc:	29764004 	addi	r5,r5,-9984
80207ad0:	d9403a15 	stw	r5,232(sp)
80207ad4:	9080080c 	andi	r2,r18,32
80207ad8:	103f9f1e 	bne	r2,zero,80207958 <__reset+0xfa1e7958>
80207adc:	9080040c 	andi	r2,r18,16
80207ae0:	10029c26 	beq	r2,zero,80208554 <___svfprintf_internal_r+0x16d0>
80207ae4:	d8c02d17 	ldw	r3,180(sp)
80207ae8:	002d883a 	mov	r22,zero
80207aec:	1d000017 	ldw	r20,0(r3)
80207af0:	18c00104 	addi	r3,r3,4
80207af4:	d8c02d15 	stw	r3,180(sp)
80207af8:	003f9c06 	br	8020796c <__reset+0xfa1e796c>
80207afc:	94800054 	ori	r18,r18,1
80207b00:	bc400007 	ldb	r17,0(r23)
80207b04:	003d3306 	br	80206fd4 <__reset+0xfa1e6fd4>
80207b08:	38803fcc 	andi	r2,r7,255
80207b0c:	1080201c 	xori	r2,r2,128
80207b10:	10bfe004 	addi	r2,r2,-128
80207b14:	1002971e 	bne	r2,zero,80208574 <___svfprintf_internal_r+0x16f0>
80207b18:	00c00044 	movi	r3,1
80207b1c:	01c00804 	movi	r7,32
80207b20:	bc400007 	ldb	r17,0(r23)
80207b24:	003d2b06 	br	80206fd4 <__reset+0xfa1e6fd4>
80207b28:	18c03fcc 	andi	r3,r3,255
80207b2c:	183e2326 	beq	r3,zero,802073bc <__reset+0xfa1e73bc>
80207b30:	d9c02785 	stb	r7,158(sp)
80207b34:	003e2106 	br	802073bc <__reset+0xfa1e73bc>
80207b38:	bc400007 	ldb	r17,0(r23)
80207b3c:	8a430426 	beq	r17,r9,80208750 <___svfprintf_internal_r+0x18cc>
80207b40:	94800414 	ori	r18,r18,16
80207b44:	003d2306 	br	80206fd4 <__reset+0xfa1e6fd4>
80207b48:	18c03fcc 	andi	r3,r3,255
80207b4c:	18053f1e 	bne	r3,zero,8020904c <___svfprintf_internal_r+0x21c8>
80207b50:	9080080c 	andi	r2,r18,32
80207b54:	10028926 	beq	r2,zero,8020857c <___svfprintf_internal_r+0x16f8>
80207b58:	d9402d17 	ldw	r5,180(sp)
80207b5c:	d9002f17 	ldw	r4,188(sp)
80207b60:	28800017 	ldw	r2,0(r5)
80207b64:	2007d7fa 	srai	r3,r4,31
80207b68:	29400104 	addi	r5,r5,4
80207b6c:	d9402d15 	stw	r5,180(sp)
80207b70:	11000015 	stw	r4,0(r2)
80207b74:	10c00115 	stw	r3,4(r2)
80207b78:	003ced06 	br	80206f30 <__reset+0xfa1e6f30>
80207b7c:	94801014 	ori	r18,r18,64
80207b80:	bc400007 	ldb	r17,0(r23)
80207b84:	003d1306 	br	80206fd4 <__reset+0xfa1e6fd4>
80207b88:	012008b4 	movhi	r4,32802
80207b8c:	21364004 	addi	r4,r4,-9984
80207b90:	0039883a 	mov	fp,zero
80207b94:	d9003a15 	stw	r4,232(sp)
80207b98:	04401e04 	movi	r17,120
80207b9c:	003f8206 	br	802079a8 <__reset+0xfa1e79a8>
80207ba0:	18c03fcc 	andi	r3,r3,255
80207ba4:	1805221e 	bne	r3,zero,80209030 <___svfprintf_internal_r+0x21ac>
80207ba8:	883d9526 	beq	r17,zero,80207200 <__reset+0xfa1e7200>
80207bac:	00c00044 	movi	r3,1
80207bb0:	d8c02a15 	stw	r3,168(sp)
80207bb4:	dc401405 	stb	r17,80(sp)
80207bb8:	d8002785 	stb	zero,158(sp)
80207bbc:	003f9406 	br	80207a10 <__reset+0xfa1e7a10>
80207bc0:	012008b4 	movhi	r4,32802
80207bc4:	21364004 	addi	r4,r4,-9984
80207bc8:	d9003a15 	stw	r4,232(sp)
80207bcc:	d8c02d15 	stw	r3,180(sp)
80207bd0:	1025883a 	mov	r18,r2
80207bd4:	04401e04 	movi	r17,120
80207bd8:	a584b03a 	or	r2,r20,r22
80207bdc:	1000fa1e 	bne	r2,zero,80207fc8 <___svfprintf_internal_r+0x1144>
80207be0:	0039883a 	mov	fp,zero
80207be4:	00800084 	movi	r2,2
80207be8:	10803fcc 	andi	r2,r2,255
80207bec:	00c00044 	movi	r3,1
80207bf0:	10c21626 	beq	r2,r3,8020844c <___svfprintf_internal_r+0x15c8>
80207bf4:	00c00084 	movi	r3,2
80207bf8:	10fe301e 	bne	r2,r3,802074bc <__reset+0xfa1e74bc>
80207bfc:	003d7606 	br	802071d8 <__reset+0xfa1e71d8>
80207c00:	d8c02017 	ldw	r3,128(sp)
80207c04:	003e9506 	br	8020765c <__reset+0xfa1e765c>
80207c08:	00801944 	movi	r2,101
80207c0c:	14407c0e 	bge	r2,r17,80207e00 <___svfprintf_internal_r+0xf7c>
80207c10:	d9003617 	ldw	r4,216(sp)
80207c14:	d9403717 	ldw	r5,220(sp)
80207c18:	000d883a 	mov	r6,zero
80207c1c:	000f883a 	mov	r7,zero
80207c20:	d8c03d15 	stw	r3,244(sp)
80207c24:	da003e15 	stw	r8,248(sp)
80207c28:	02155940 	call	80215594 <__eqdf2>
80207c2c:	d8c03d17 	ldw	r3,244(sp)
80207c30:	da003e17 	ldw	r8,248(sp)
80207c34:	1000f51e 	bne	r2,zero,8020800c <___svfprintf_internal_r+0x1188>
80207c38:	d8801f17 	ldw	r2,124(sp)
80207c3c:	012008b4 	movhi	r4,32802
80207c40:	21364704 	addi	r4,r4,-9956
80207c44:	18c00044 	addi	r3,r3,1
80207c48:	10800044 	addi	r2,r2,1
80207c4c:	41000015 	stw	r4,0(r8)
80207c50:	01000044 	movi	r4,1
80207c54:	41000115 	stw	r4,4(r8)
80207c58:	d8c02015 	stw	r3,128(sp)
80207c5c:	d8801f15 	stw	r2,124(sp)
80207c60:	010001c4 	movi	r4,7
80207c64:	20826616 	blt	r4,r2,80208600 <___svfprintf_internal_r+0x177c>
80207c68:	42000204 	addi	r8,r8,8
80207c6c:	d8802617 	ldw	r2,152(sp)
80207c70:	d9403317 	ldw	r5,204(sp)
80207c74:	11400216 	blt	r2,r5,80207c80 <___svfprintf_internal_r+0xdfc>
80207c78:	9080004c 	andi	r2,r18,1
80207c7c:	103ed526 	beq	r2,zero,802077d4 <__reset+0xfa1e77d4>
80207c80:	d8803817 	ldw	r2,224(sp)
80207c84:	d9003417 	ldw	r4,208(sp)
80207c88:	d9403817 	ldw	r5,224(sp)
80207c8c:	1887883a 	add	r3,r3,r2
80207c90:	d8801f17 	ldw	r2,124(sp)
80207c94:	41000015 	stw	r4,0(r8)
80207c98:	41400115 	stw	r5,4(r8)
80207c9c:	10800044 	addi	r2,r2,1
80207ca0:	d8c02015 	stw	r3,128(sp)
80207ca4:	d8801f15 	stw	r2,124(sp)
80207ca8:	010001c4 	movi	r4,7
80207cac:	2082af16 	blt	r4,r2,8020876c <___svfprintf_internal_r+0x18e8>
80207cb0:	42000204 	addi	r8,r8,8
80207cb4:	d8803317 	ldw	r2,204(sp)
80207cb8:	143fffc4 	addi	r16,r2,-1
80207cbc:	043ec50e 	bge	zero,r16,802077d4 <__reset+0xfa1e77d4>
80207cc0:	04400404 	movi	r17,16
80207cc4:	d8801f17 	ldw	r2,124(sp)
80207cc8:	8c00860e 	bge	r17,r16,80207ee4 <___svfprintf_internal_r+0x1060>
80207ccc:	016008b4 	movhi	r5,32802
80207cd0:	29764784 	addi	r5,r5,-9954
80207cd4:	d9402b15 	stw	r5,172(sp)
80207cd8:	058001c4 	movi	r22,7
80207cdc:	dd002c17 	ldw	r20,176(sp)
80207ce0:	00000306 	br	80207cf0 <___svfprintf_internal_r+0xe6c>
80207ce4:	42000204 	addi	r8,r8,8
80207ce8:	843ffc04 	addi	r16,r16,-16
80207cec:	8c00800e 	bge	r17,r16,80207ef0 <___svfprintf_internal_r+0x106c>
80207cf0:	18c00404 	addi	r3,r3,16
80207cf4:	10800044 	addi	r2,r2,1
80207cf8:	45400015 	stw	r21,0(r8)
80207cfc:	44400115 	stw	r17,4(r8)
80207d00:	d8c02015 	stw	r3,128(sp)
80207d04:	d8801f15 	stw	r2,124(sp)
80207d08:	b0bff60e 	bge	r22,r2,80207ce4 <__reset+0xfa1e7ce4>
80207d0c:	d9801e04 	addi	r6,sp,120
80207d10:	a00b883a 	mov	r5,r20
80207d14:	9809883a 	mov	r4,r19
80207d18:	02104140 	call	80210414 <__ssprint_r>
80207d1c:	103d3e1e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
80207d20:	d8c02017 	ldw	r3,128(sp)
80207d24:	d8801f17 	ldw	r2,124(sp)
80207d28:	da000404 	addi	r8,sp,16
80207d2c:	003fee06 	br	80207ce8 <__reset+0xfa1e7ce8>
80207d30:	d9403117 	ldw	r5,196(sp)
80207d34:	d8802a17 	ldw	r2,168(sp)
80207d38:	28adc83a 	sub	r22,r5,r2
80207d3c:	05be650e 	bge	zero,r22,802076d4 <__reset+0xfa1e76d4>
80207d40:	07000404 	movi	fp,16
80207d44:	d8801f17 	ldw	r2,124(sp)
80207d48:	e583a20e 	bge	fp,r22,80208bd4 <___svfprintf_internal_r+0x1d50>
80207d4c:	016008b4 	movhi	r5,32802
80207d50:	29764784 	addi	r5,r5,-9954
80207d54:	dc403015 	stw	r17,192(sp)
80207d58:	d9402b15 	stw	r5,172(sp)
80207d5c:	b023883a 	mov	r17,r22
80207d60:	050001c4 	movi	r20,7
80207d64:	902d883a 	mov	r22,r18
80207d68:	8025883a 	mov	r18,r16
80207d6c:	dc002c17 	ldw	r16,176(sp)
80207d70:	00000306 	br	80207d80 <___svfprintf_internal_r+0xefc>
80207d74:	8c7ffc04 	addi	r17,r17,-16
80207d78:	42000204 	addi	r8,r8,8
80207d7c:	e440110e 	bge	fp,r17,80207dc4 <___svfprintf_internal_r+0xf40>
80207d80:	18c00404 	addi	r3,r3,16
80207d84:	10800044 	addi	r2,r2,1
80207d88:	45400015 	stw	r21,0(r8)
80207d8c:	47000115 	stw	fp,4(r8)
80207d90:	d8c02015 	stw	r3,128(sp)
80207d94:	d8801f15 	stw	r2,124(sp)
80207d98:	a0bff60e 	bge	r20,r2,80207d74 <__reset+0xfa1e7d74>
80207d9c:	d9801e04 	addi	r6,sp,120
80207da0:	800b883a 	mov	r5,r16
80207da4:	9809883a 	mov	r4,r19
80207da8:	02104140 	call	80210414 <__ssprint_r>
80207dac:	103d1a1e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
80207db0:	8c7ffc04 	addi	r17,r17,-16
80207db4:	d8c02017 	ldw	r3,128(sp)
80207db8:	d8801f17 	ldw	r2,124(sp)
80207dbc:	da000404 	addi	r8,sp,16
80207dc0:	e47fef16 	blt	fp,r17,80207d80 <__reset+0xfa1e7d80>
80207dc4:	9021883a 	mov	r16,r18
80207dc8:	b025883a 	mov	r18,r22
80207dcc:	882d883a 	mov	r22,r17
80207dd0:	dc403017 	ldw	r17,192(sp)
80207dd4:	d9002b17 	ldw	r4,172(sp)
80207dd8:	1d87883a 	add	r3,r3,r22
80207ddc:	10800044 	addi	r2,r2,1
80207de0:	41000015 	stw	r4,0(r8)
80207de4:	45800115 	stw	r22,4(r8)
80207de8:	d8c02015 	stw	r3,128(sp)
80207dec:	d8801f15 	stw	r2,124(sp)
80207df0:	010001c4 	movi	r4,7
80207df4:	20819a16 	blt	r4,r2,80208460 <___svfprintf_internal_r+0x15dc>
80207df8:	42000204 	addi	r8,r8,8
80207dfc:	003e3506 	br	802076d4 <__reset+0xfa1e76d4>
80207e00:	d9403317 	ldw	r5,204(sp)
80207e04:	00800044 	movi	r2,1
80207e08:	18c00044 	addi	r3,r3,1
80207e0c:	1141710e 	bge	r2,r5,802083d4 <___svfprintf_internal_r+0x1550>
80207e10:	dc401f17 	ldw	r17,124(sp)
80207e14:	00800044 	movi	r2,1
80207e18:	40800115 	stw	r2,4(r8)
80207e1c:	8c400044 	addi	r17,r17,1
80207e20:	44000015 	stw	r16,0(r8)
80207e24:	d8c02015 	stw	r3,128(sp)
80207e28:	dc401f15 	stw	r17,124(sp)
80207e2c:	008001c4 	movi	r2,7
80207e30:	14417416 	blt	r2,r17,80208404 <___svfprintf_internal_r+0x1580>
80207e34:	42000204 	addi	r8,r8,8
80207e38:	d8803817 	ldw	r2,224(sp)
80207e3c:	d9003417 	ldw	r4,208(sp)
80207e40:	8c400044 	addi	r17,r17,1
80207e44:	10c7883a 	add	r3,r2,r3
80207e48:	40800115 	stw	r2,4(r8)
80207e4c:	41000015 	stw	r4,0(r8)
80207e50:	d8c02015 	stw	r3,128(sp)
80207e54:	dc401f15 	stw	r17,124(sp)
80207e58:	008001c4 	movi	r2,7
80207e5c:	14417216 	blt	r2,r17,80208428 <___svfprintf_internal_r+0x15a4>
80207e60:	45800204 	addi	r22,r8,8
80207e64:	d9003617 	ldw	r4,216(sp)
80207e68:	d9403717 	ldw	r5,220(sp)
80207e6c:	000d883a 	mov	r6,zero
80207e70:	000f883a 	mov	r7,zero
80207e74:	d8c03d15 	stw	r3,244(sp)
80207e78:	02155940 	call	80215594 <__eqdf2>
80207e7c:	d8c03d17 	ldw	r3,244(sp)
80207e80:	1000b326 	beq	r2,zero,80208150 <___svfprintf_internal_r+0x12cc>
80207e84:	d9403317 	ldw	r5,204(sp)
80207e88:	84000044 	addi	r16,r16,1
80207e8c:	8c400044 	addi	r17,r17,1
80207e90:	28bfffc4 	addi	r2,r5,-1
80207e94:	1887883a 	add	r3,r3,r2
80207e98:	b0800115 	stw	r2,4(r22)
80207e9c:	b4000015 	stw	r16,0(r22)
80207ea0:	d8c02015 	stw	r3,128(sp)
80207ea4:	dc401f15 	stw	r17,124(sp)
80207ea8:	008001c4 	movi	r2,7
80207eac:	1440d216 	blt	r2,r17,802081f8 <___svfprintf_internal_r+0x1374>
80207eb0:	b5800204 	addi	r22,r22,8
80207eb4:	d9003b17 	ldw	r4,236(sp)
80207eb8:	df0022c4 	addi	fp,sp,139
80207ebc:	8c400044 	addi	r17,r17,1
80207ec0:	20c7883a 	add	r3,r4,r3
80207ec4:	b7000015 	stw	fp,0(r22)
80207ec8:	b1000115 	stw	r4,4(r22)
80207ecc:	d8c02015 	stw	r3,128(sp)
80207ed0:	dc401f15 	stw	r17,124(sp)
80207ed4:	008001c4 	movi	r2,7
80207ed8:	14400e16 	blt	r2,r17,80207f14 <___svfprintf_internal_r+0x1090>
80207edc:	b2000204 	addi	r8,r22,8
80207ee0:	003e3c06 	br	802077d4 <__reset+0xfa1e77d4>
80207ee4:	012008b4 	movhi	r4,32802
80207ee8:	21364784 	addi	r4,r4,-9954
80207eec:	d9002b15 	stw	r4,172(sp)
80207ef0:	d9002b17 	ldw	r4,172(sp)
80207ef4:	1c07883a 	add	r3,r3,r16
80207ef8:	44000115 	stw	r16,4(r8)
80207efc:	41000015 	stw	r4,0(r8)
80207f00:	10800044 	addi	r2,r2,1
80207f04:	d8c02015 	stw	r3,128(sp)
80207f08:	d8801f15 	stw	r2,124(sp)
80207f0c:	010001c4 	movi	r4,7
80207f10:	20be2f0e 	bge	r4,r2,802077d0 <__reset+0xfa1e77d0>
80207f14:	d9402c17 	ldw	r5,176(sp)
80207f18:	d9801e04 	addi	r6,sp,120
80207f1c:	9809883a 	mov	r4,r19
80207f20:	02104140 	call	80210414 <__ssprint_r>
80207f24:	103cbc1e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
80207f28:	d8c02017 	ldw	r3,128(sp)
80207f2c:	da000404 	addi	r8,sp,16
80207f30:	003e2806 	br	802077d4 <__reset+0xfa1e77d4>
80207f34:	d9402c17 	ldw	r5,176(sp)
80207f38:	d9801e04 	addi	r6,sp,120
80207f3c:	9809883a 	mov	r4,r19
80207f40:	02104140 	call	80210414 <__ssprint_r>
80207f44:	103e5f26 	beq	r2,zero,802078c4 <__reset+0xfa1e78c4>
80207f48:	003cb306 	br	80207218 <__reset+0xfa1e7218>
80207f4c:	d9402c17 	ldw	r5,176(sp)
80207f50:	d9801e04 	addi	r6,sp,120
80207f54:	9809883a 	mov	r4,r19
80207f58:	02104140 	call	80210414 <__ssprint_r>
80207f5c:	103cae1e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
80207f60:	d8c02017 	ldw	r3,128(sp)
80207f64:	da000404 	addi	r8,sp,16
80207f68:	003e0d06 	br	802077a0 <__reset+0xfa1e77a0>
80207f6c:	d9402c17 	ldw	r5,176(sp)
80207f70:	d9801e04 	addi	r6,sp,120
80207f74:	9809883a 	mov	r4,r19
80207f78:	02104140 	call	80210414 <__ssprint_r>
80207f7c:	103ca61e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
80207f80:	d8c02017 	ldw	r3,128(sp)
80207f84:	da000404 	addi	r8,sp,16
80207f88:	003dc106 	br	80207690 <__reset+0xfa1e7690>
80207f8c:	d9402c17 	ldw	r5,176(sp)
80207f90:	d9801e04 	addi	r6,sp,120
80207f94:	9809883a 	mov	r4,r19
80207f98:	02104140 	call	80210414 <__ssprint_r>
80207f9c:	103c9e1e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
80207fa0:	d8c02017 	ldw	r3,128(sp)
80207fa4:	da000404 	addi	r8,sp,16
80207fa8:	003dc706 	br	802076c8 <__reset+0xfa1e76c8>
80207fac:	d8802917 	ldw	r2,164(sp)
80207fb0:	d8002785 	stb	zero,158(sp)
80207fb4:	103f0816 	blt	r2,zero,80207bd8 <__reset+0xfa1e7bd8>
80207fb8:	00ffdfc4 	movi	r3,-129
80207fbc:	a584b03a 	or	r2,r20,r22
80207fc0:	90e4703a 	and	r18,r18,r3
80207fc4:	103c8126 	beq	r2,zero,802071cc <__reset+0xfa1e71cc>
80207fc8:	0039883a 	mov	fp,zero
80207fcc:	003e7606 	br	802079a8 <__reset+0xfa1e79a8>
80207fd0:	9080040c 	andi	r2,r18,16
80207fd4:	10013d26 	beq	r2,zero,802084cc <___svfprintf_internal_r+0x1648>
80207fd8:	d9002d17 	ldw	r4,180(sp)
80207fdc:	d9402917 	ldw	r5,164(sp)
80207fe0:	d8002785 	stb	zero,158(sp)
80207fe4:	20800104 	addi	r2,r4,4
80207fe8:	25000017 	ldw	r20,0(r4)
80207fec:	002d883a 	mov	r22,zero
80207ff0:	28013f16 	blt	r5,zero,802084f0 <___svfprintf_internal_r+0x166c>
80207ff4:	00ffdfc4 	movi	r3,-129
80207ff8:	d8802d15 	stw	r2,180(sp)
80207ffc:	90e4703a 	and	r18,r18,r3
80208000:	a03d2b26 	beq	r20,zero,802074b0 <__reset+0xfa1e74b0>
80208004:	0039883a 	mov	fp,zero
80208008:	003d2e06 	br	802074c4 <__reset+0xfa1e74c4>
8020800c:	dc402617 	ldw	r17,152(sp)
80208010:	0441830e 	bge	zero,r17,80208620 <___svfprintf_internal_r+0x179c>
80208014:	dc403217 	ldw	r17,200(sp)
80208018:	d8803317 	ldw	r2,204(sp)
8020801c:	1440010e 	bge	r2,r17,80208024 <___svfprintf_internal_r+0x11a0>
80208020:	1023883a 	mov	r17,r2
80208024:	04400a0e 	bge	zero,r17,80208050 <___svfprintf_internal_r+0x11cc>
80208028:	d8801f17 	ldw	r2,124(sp)
8020802c:	1c47883a 	add	r3,r3,r17
80208030:	44000015 	stw	r16,0(r8)
80208034:	10800044 	addi	r2,r2,1
80208038:	44400115 	stw	r17,4(r8)
8020803c:	d8c02015 	stw	r3,128(sp)
80208040:	d8801f15 	stw	r2,124(sp)
80208044:	010001c4 	movi	r4,7
80208048:	20827516 	blt	r4,r2,80208a20 <___svfprintf_internal_r+0x1b9c>
8020804c:	42000204 	addi	r8,r8,8
80208050:	88027b16 	blt	r17,zero,80208a40 <___svfprintf_internal_r+0x1bbc>
80208054:	d9003217 	ldw	r4,200(sp)
80208058:	2463c83a 	sub	r17,r4,r17
8020805c:	0440990e 	bge	zero,r17,802082c4 <___svfprintf_internal_r+0x1440>
80208060:	05800404 	movi	r22,16
80208064:	d8801f17 	ldw	r2,124(sp)
80208068:	b441530e 	bge	r22,r17,802085b8 <___svfprintf_internal_r+0x1734>
8020806c:	012008b4 	movhi	r4,32802
80208070:	21364784 	addi	r4,r4,-9954
80208074:	d9002b15 	stw	r4,172(sp)
80208078:	070001c4 	movi	fp,7
8020807c:	dd002c17 	ldw	r20,176(sp)
80208080:	00000306 	br	80208090 <___svfprintf_internal_r+0x120c>
80208084:	42000204 	addi	r8,r8,8
80208088:	8c7ffc04 	addi	r17,r17,-16
8020808c:	b4414d0e 	bge	r22,r17,802085c4 <___svfprintf_internal_r+0x1740>
80208090:	18c00404 	addi	r3,r3,16
80208094:	10800044 	addi	r2,r2,1
80208098:	45400015 	stw	r21,0(r8)
8020809c:	45800115 	stw	r22,4(r8)
802080a0:	d8c02015 	stw	r3,128(sp)
802080a4:	d8801f15 	stw	r2,124(sp)
802080a8:	e0bff60e 	bge	fp,r2,80208084 <__reset+0xfa1e8084>
802080ac:	d9801e04 	addi	r6,sp,120
802080b0:	a00b883a 	mov	r5,r20
802080b4:	9809883a 	mov	r4,r19
802080b8:	02104140 	call	80210414 <__ssprint_r>
802080bc:	103c561e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
802080c0:	d8c02017 	ldw	r3,128(sp)
802080c4:	d8801f17 	ldw	r2,124(sp)
802080c8:	da000404 	addi	r8,sp,16
802080cc:	003fee06 	br	80208088 <__reset+0xfa1e8088>
802080d0:	d9402c17 	ldw	r5,176(sp)
802080d4:	d9801e04 	addi	r6,sp,120
802080d8:	9809883a 	mov	r4,r19
802080dc:	02104140 	call	80210414 <__ssprint_r>
802080e0:	103c4d1e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
802080e4:	d8c02017 	ldw	r3,128(sp)
802080e8:	df002787 	ldb	fp,158(sp)
802080ec:	da000404 	addi	r8,sp,16
802080f0:	003d5a06 	br	8020765c <__reset+0xfa1e765c>
802080f4:	9080040c 	andi	r2,r18,16
802080f8:	10005c26 	beq	r2,zero,8020826c <___svfprintf_internal_r+0x13e8>
802080fc:	d9402d17 	ldw	r5,180(sp)
80208100:	d8c02917 	ldw	r3,164(sp)
80208104:	d8002785 	stb	zero,158(sp)
80208108:	28800104 	addi	r2,r5,4
8020810c:	2d000017 	ldw	r20,0(r5)
80208110:	002d883a 	mov	r22,zero
80208114:	18005e16 	blt	r3,zero,80208290 <___svfprintf_internal_r+0x140c>
80208118:	00ffdfc4 	movi	r3,-129
8020811c:	d8802d15 	stw	r2,180(sp)
80208120:	90e4703a 	and	r18,r18,r3
80208124:	0039883a 	mov	fp,zero
80208128:	a03dfe26 	beq	r20,zero,80207924 <__reset+0xfa1e7924>
8020812c:	00800244 	movi	r2,9
80208130:	153cb336 	bltu	r2,r20,80207400 <__reset+0xfa1e7400>
80208134:	a5000c04 	addi	r20,r20,48
80208138:	dc001dc4 	addi	r16,sp,119
8020813c:	dd001dc5 	stb	r20,119(sp)
80208140:	d8c02817 	ldw	r3,160(sp)
80208144:	1c07c83a 	sub	r3,r3,r16
80208148:	d8c02e15 	stw	r3,184(sp)
8020814c:	003cf506 	br	80207524 <__reset+0xfa1e7524>
80208150:	d8803317 	ldw	r2,204(sp)
80208154:	143fffc4 	addi	r16,r2,-1
80208158:	043f560e 	bge	zero,r16,80207eb4 <__reset+0xfa1e7eb4>
8020815c:	07000404 	movi	fp,16
80208160:	e403530e 	bge	fp,r16,80208eb0 <___svfprintf_internal_r+0x202c>
80208164:	016008b4 	movhi	r5,32802
80208168:	29764784 	addi	r5,r5,-9954
8020816c:	d9402b15 	stw	r5,172(sp)
80208170:	01c001c4 	movi	r7,7
80208174:	dd002c17 	ldw	r20,176(sp)
80208178:	00000306 	br	80208188 <___svfprintf_internal_r+0x1304>
8020817c:	843ffc04 	addi	r16,r16,-16
80208180:	b5800204 	addi	r22,r22,8
80208184:	e400130e 	bge	fp,r16,802081d4 <___svfprintf_internal_r+0x1350>
80208188:	18c00404 	addi	r3,r3,16
8020818c:	8c400044 	addi	r17,r17,1
80208190:	b5400015 	stw	r21,0(r22)
80208194:	b7000115 	stw	fp,4(r22)
80208198:	d8c02015 	stw	r3,128(sp)
8020819c:	dc401f15 	stw	r17,124(sp)
802081a0:	3c7ff60e 	bge	r7,r17,8020817c <__reset+0xfa1e817c>
802081a4:	d9801e04 	addi	r6,sp,120
802081a8:	a00b883a 	mov	r5,r20
802081ac:	9809883a 	mov	r4,r19
802081b0:	d9c03d15 	stw	r7,244(sp)
802081b4:	02104140 	call	80210414 <__ssprint_r>
802081b8:	d9c03d17 	ldw	r7,244(sp)
802081bc:	103c161e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
802081c0:	843ffc04 	addi	r16,r16,-16
802081c4:	d8c02017 	ldw	r3,128(sp)
802081c8:	dc401f17 	ldw	r17,124(sp)
802081cc:	dd800404 	addi	r22,sp,16
802081d0:	e43fed16 	blt	fp,r16,80208188 <__reset+0xfa1e8188>
802081d4:	d8802b17 	ldw	r2,172(sp)
802081d8:	1c07883a 	add	r3,r3,r16
802081dc:	8c400044 	addi	r17,r17,1
802081e0:	b0800015 	stw	r2,0(r22)
802081e4:	b4000115 	stw	r16,4(r22)
802081e8:	d8c02015 	stw	r3,128(sp)
802081ec:	dc401f15 	stw	r17,124(sp)
802081f0:	008001c4 	movi	r2,7
802081f4:	147f2e0e 	bge	r2,r17,80207eb0 <__reset+0xfa1e7eb0>
802081f8:	d9402c17 	ldw	r5,176(sp)
802081fc:	d9801e04 	addi	r6,sp,120
80208200:	9809883a 	mov	r4,r19
80208204:	02104140 	call	80210414 <__ssprint_r>
80208208:	103c031e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
8020820c:	d8c02017 	ldw	r3,128(sp)
80208210:	dc401f17 	ldw	r17,124(sp)
80208214:	dd800404 	addi	r22,sp,16
80208218:	003f2606 	br	80207eb4 <__reset+0xfa1e7eb4>
8020821c:	9080040c 	andi	r2,r18,16
80208220:	1000c326 	beq	r2,zero,80208530 <___svfprintf_internal_r+0x16ac>
80208224:	d8802d17 	ldw	r2,180(sp)
80208228:	15000017 	ldw	r20,0(r2)
8020822c:	10800104 	addi	r2,r2,4
80208230:	d8802d15 	stw	r2,180(sp)
80208234:	a02dd7fa 	srai	r22,r20,31
80208238:	b005883a 	mov	r2,r22
8020823c:	103c680e 	bge	r2,zero,802073e0 <__reset+0xfa1e73e0>
80208240:	0529c83a 	sub	r20,zero,r20
80208244:	a004c03a 	cmpne	r2,r20,zero
80208248:	05adc83a 	sub	r22,zero,r22
8020824c:	b0adc83a 	sub	r22,r22,r2
80208250:	d8802917 	ldw	r2,164(sp)
80208254:	07000b44 	movi	fp,45
80208258:	df002785 	stb	fp,158(sp)
8020825c:	10022e16 	blt	r2,zero,80208b18 <___svfprintf_internal_r+0x1c94>
80208260:	00bfdfc4 	movi	r2,-129
80208264:	90a4703a 	and	r18,r18,r2
80208268:	003c6406 	br	802073fc <__reset+0xfa1e73fc>
8020826c:	9080100c 	andi	r2,r18,64
80208270:	d8002785 	stb	zero,158(sp)
80208274:	10012526 	beq	r2,zero,8020870c <___svfprintf_internal_r+0x1888>
80208278:	d9002d17 	ldw	r4,180(sp)
8020827c:	d9402917 	ldw	r5,164(sp)
80208280:	002d883a 	mov	r22,zero
80208284:	20800104 	addi	r2,r4,4
80208288:	2500000b 	ldhu	r20,0(r4)
8020828c:	283fa20e 	bge	r5,zero,80208118 <__reset+0xfa1e8118>
80208290:	d8802d15 	stw	r2,180(sp)
80208294:	0039883a 	mov	fp,zero
80208298:	a584b03a 	or	r2,r20,r22
8020829c:	103c571e 	bne	r2,zero,802073fc <__reset+0xfa1e73fc>
802082a0:	00800044 	movi	r2,1
802082a4:	003e5006 	br	80207be8 <__reset+0xfa1e7be8>
802082a8:	d9402c17 	ldw	r5,176(sp)
802082ac:	d9801e04 	addi	r6,sp,120
802082b0:	9809883a 	mov	r4,r19
802082b4:	02104140 	call	80210414 <__ssprint_r>
802082b8:	103bd71e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
802082bc:	d8c02017 	ldw	r3,128(sp)
802082c0:	da000404 	addi	r8,sp,16
802082c4:	d9003217 	ldw	r4,200(sp)
802082c8:	d8802617 	ldw	r2,152(sp)
802082cc:	d9403317 	ldw	r5,204(sp)
802082d0:	8123883a 	add	r17,r16,r4
802082d4:	11400216 	blt	r2,r5,802082e0 <___svfprintf_internal_r+0x145c>
802082d8:	9100004c 	andi	r4,r18,1
802082dc:	20000d26 	beq	r4,zero,80208314 <___svfprintf_internal_r+0x1490>
802082e0:	d9003817 	ldw	r4,224(sp)
802082e4:	d9403417 	ldw	r5,208(sp)
802082e8:	1907883a 	add	r3,r3,r4
802082ec:	d9001f17 	ldw	r4,124(sp)
802082f0:	41400015 	stw	r5,0(r8)
802082f4:	d9403817 	ldw	r5,224(sp)
802082f8:	21000044 	addi	r4,r4,1
802082fc:	d8c02015 	stw	r3,128(sp)
80208300:	41400115 	stw	r5,4(r8)
80208304:	d9001f15 	stw	r4,124(sp)
80208308:	014001c4 	movi	r5,7
8020830c:	2901dc16 	blt	r5,r4,80208a80 <___svfprintf_internal_r+0x1bfc>
80208310:	42000204 	addi	r8,r8,8
80208314:	d9003317 	ldw	r4,204(sp)
80208318:	8121883a 	add	r16,r16,r4
8020831c:	2085c83a 	sub	r2,r4,r2
80208320:	8461c83a 	sub	r16,r16,r17
80208324:	1400010e 	bge	r2,r16,8020832c <___svfprintf_internal_r+0x14a8>
80208328:	1021883a 	mov	r16,r2
8020832c:	04000a0e 	bge	zero,r16,80208358 <___svfprintf_internal_r+0x14d4>
80208330:	d9001f17 	ldw	r4,124(sp)
80208334:	1c07883a 	add	r3,r3,r16
80208338:	44400015 	stw	r17,0(r8)
8020833c:	21000044 	addi	r4,r4,1
80208340:	44000115 	stw	r16,4(r8)
80208344:	d8c02015 	stw	r3,128(sp)
80208348:	d9001f15 	stw	r4,124(sp)
8020834c:	014001c4 	movi	r5,7
80208350:	2901e616 	blt	r5,r4,80208aec <___svfprintf_internal_r+0x1c68>
80208354:	42000204 	addi	r8,r8,8
80208358:	8001f616 	blt	r16,zero,80208b34 <___svfprintf_internal_r+0x1cb0>
8020835c:	1421c83a 	sub	r16,r2,r16
80208360:	043d1c0e 	bge	zero,r16,802077d4 <__reset+0xfa1e77d4>
80208364:	04400404 	movi	r17,16
80208368:	d8801f17 	ldw	r2,124(sp)
8020836c:	8c3edd0e 	bge	r17,r16,80207ee4 <__reset+0xfa1e7ee4>
80208370:	016008b4 	movhi	r5,32802
80208374:	29764784 	addi	r5,r5,-9954
80208378:	d9402b15 	stw	r5,172(sp)
8020837c:	058001c4 	movi	r22,7
80208380:	dd002c17 	ldw	r20,176(sp)
80208384:	00000306 	br	80208394 <___svfprintf_internal_r+0x1510>
80208388:	42000204 	addi	r8,r8,8
8020838c:	843ffc04 	addi	r16,r16,-16
80208390:	8c3ed70e 	bge	r17,r16,80207ef0 <__reset+0xfa1e7ef0>
80208394:	18c00404 	addi	r3,r3,16
80208398:	10800044 	addi	r2,r2,1
8020839c:	45400015 	stw	r21,0(r8)
802083a0:	44400115 	stw	r17,4(r8)
802083a4:	d8c02015 	stw	r3,128(sp)
802083a8:	d8801f15 	stw	r2,124(sp)
802083ac:	b0bff60e 	bge	r22,r2,80208388 <__reset+0xfa1e8388>
802083b0:	d9801e04 	addi	r6,sp,120
802083b4:	a00b883a 	mov	r5,r20
802083b8:	9809883a 	mov	r4,r19
802083bc:	02104140 	call	80210414 <__ssprint_r>
802083c0:	103b951e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
802083c4:	d8c02017 	ldw	r3,128(sp)
802083c8:	d8801f17 	ldw	r2,124(sp)
802083cc:	da000404 	addi	r8,sp,16
802083d0:	003fee06 	br	8020838c <__reset+0xfa1e838c>
802083d4:	9088703a 	and	r4,r18,r2
802083d8:	203e8d1e 	bne	r4,zero,80207e10 <__reset+0xfa1e7e10>
802083dc:	dc401f17 	ldw	r17,124(sp)
802083e0:	40800115 	stw	r2,4(r8)
802083e4:	44000015 	stw	r16,0(r8)
802083e8:	8c400044 	addi	r17,r17,1
802083ec:	d8c02015 	stw	r3,128(sp)
802083f0:	dc401f15 	stw	r17,124(sp)
802083f4:	008001c4 	movi	r2,7
802083f8:	147f7f16 	blt	r2,r17,802081f8 <__reset+0xfa1e81f8>
802083fc:	45800204 	addi	r22,r8,8
80208400:	003eac06 	br	80207eb4 <__reset+0xfa1e7eb4>
80208404:	d9402c17 	ldw	r5,176(sp)
80208408:	d9801e04 	addi	r6,sp,120
8020840c:	9809883a 	mov	r4,r19
80208410:	02104140 	call	80210414 <__ssprint_r>
80208414:	103b801e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
80208418:	d8c02017 	ldw	r3,128(sp)
8020841c:	dc401f17 	ldw	r17,124(sp)
80208420:	da000404 	addi	r8,sp,16
80208424:	003e8406 	br	80207e38 <__reset+0xfa1e7e38>
80208428:	d9402c17 	ldw	r5,176(sp)
8020842c:	d9801e04 	addi	r6,sp,120
80208430:	9809883a 	mov	r4,r19
80208434:	02104140 	call	80210414 <__ssprint_r>
80208438:	103b771e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
8020843c:	d8c02017 	ldw	r3,128(sp)
80208440:	dc401f17 	ldw	r17,124(sp)
80208444:	dd800404 	addi	r22,sp,16
80208448:	003e8606 	br	80207e64 <__reset+0xfa1e7e64>
8020844c:	0029883a 	mov	r20,zero
80208450:	a5000c04 	addi	r20,r20,48
80208454:	dc001dc4 	addi	r16,sp,119
80208458:	dd001dc5 	stb	r20,119(sp)
8020845c:	003f3806 	br	80208140 <__reset+0xfa1e8140>
80208460:	d9402c17 	ldw	r5,176(sp)
80208464:	d9801e04 	addi	r6,sp,120
80208468:	9809883a 	mov	r4,r19
8020846c:	02104140 	call	80210414 <__ssprint_r>
80208470:	103b691e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
80208474:	d8c02017 	ldw	r3,128(sp)
80208478:	da000404 	addi	r8,sp,16
8020847c:	003c9506 	br	802076d4 <__reset+0xfa1e76d4>
80208480:	d9003617 	ldw	r4,216(sp)
80208484:	d9403717 	ldw	r5,220(sp)
80208488:	da003e15 	stw	r8,248(sp)
8020848c:	02101340 	call	80210134 <__fpclassifyd>
80208490:	da003e17 	ldw	r8,248(sp)
80208494:	1000bd1e 	bne	r2,zero,8020878c <___svfprintf_internal_r+0x1908>
80208498:	008011c4 	movi	r2,71
8020849c:	14411e0e 	bge	r2,r17,80208918 <___svfprintf_internal_r+0x1a94>
802084a0:	042008b4 	movhi	r16,32802
802084a4:	84363a04 	addi	r16,r16,-10008
802084a8:	00c000c4 	movi	r3,3
802084ac:	00bfdfc4 	movi	r2,-129
802084b0:	d8c02a15 	stw	r3,168(sp)
802084b4:	90a4703a 	and	r18,r18,r2
802084b8:	df002783 	ldbu	fp,158(sp)
802084bc:	d8c02e15 	stw	r3,184(sp)
802084c0:	d8002915 	stw	zero,164(sp)
802084c4:	d8003215 	stw	zero,200(sp)
802084c8:	003c1c06 	br	8020753c <__reset+0xfa1e753c>
802084cc:	9080100c 	andi	r2,r18,64
802084d0:	d8002785 	stb	zero,158(sp)
802084d4:	10009426 	beq	r2,zero,80208728 <___svfprintf_internal_r+0x18a4>
802084d8:	d8c02d17 	ldw	r3,180(sp)
802084dc:	d9002917 	ldw	r4,164(sp)
802084e0:	002d883a 	mov	r22,zero
802084e4:	18800104 	addi	r2,r3,4
802084e8:	1d00000b 	ldhu	r20,0(r3)
802084ec:	203ec10e 	bge	r4,zero,80207ff4 <__reset+0xfa1e7ff4>
802084f0:	a586b03a 	or	r3,r20,r22
802084f4:	d8802d15 	stw	r2,180(sp)
802084f8:	183ec21e 	bne	r3,zero,80208004 <__reset+0xfa1e8004>
802084fc:	0039883a 	mov	fp,zero
80208500:	0005883a 	mov	r2,zero
80208504:	003db806 	br	80207be8 <__reset+0xfa1e7be8>
80208508:	d8802d17 	ldw	r2,180(sp)
8020850c:	d8c02d17 	ldw	r3,180(sp)
80208510:	d9002d17 	ldw	r4,180(sp)
80208514:	10800017 	ldw	r2,0(r2)
80208518:	18c00117 	ldw	r3,4(r3)
8020851c:	21000204 	addi	r4,r4,8
80208520:	d8803615 	stw	r2,216(sp)
80208524:	d8c03715 	stw	r3,220(sp)
80208528:	d9002d15 	stw	r4,180(sp)
8020852c:	003b8206 	br	80207338 <__reset+0xfa1e7338>
80208530:	9080100c 	andi	r2,r18,64
80208534:	10010726 	beq	r2,zero,80208954 <___svfprintf_internal_r+0x1ad0>
80208538:	d8c02d17 	ldw	r3,180(sp)
8020853c:	1d00000f 	ldh	r20,0(r3)
80208540:	18c00104 	addi	r3,r3,4
80208544:	d8c02d15 	stw	r3,180(sp)
80208548:	a02dd7fa 	srai	r22,r20,31
8020854c:	b005883a 	mov	r2,r22
80208550:	003ba206 	br	802073dc <__reset+0xfa1e73dc>
80208554:	9080100c 	andi	r2,r18,64
80208558:	10010526 	beq	r2,zero,80208970 <___svfprintf_internal_r+0x1aec>
8020855c:	d9002d17 	ldw	r4,180(sp)
80208560:	002d883a 	mov	r22,zero
80208564:	2500000b 	ldhu	r20,0(r4)
80208568:	21000104 	addi	r4,r4,4
8020856c:	d9002d15 	stw	r4,180(sp)
80208570:	003cfe06 	br	8020796c <__reset+0xfa1e796c>
80208574:	bc400007 	ldb	r17,0(r23)
80208578:	003a9606 	br	80206fd4 <__reset+0xfa1e6fd4>
8020857c:	9080040c 	andi	r2,r18,16
80208580:	10010126 	beq	r2,zero,80208988 <___svfprintf_internal_r+0x1b04>
80208584:	d9402d17 	ldw	r5,180(sp)
80208588:	d8c02f17 	ldw	r3,188(sp)
8020858c:	28800017 	ldw	r2,0(r5)
80208590:	29400104 	addi	r5,r5,4
80208594:	d9402d15 	stw	r5,180(sp)
80208598:	10c00015 	stw	r3,0(r2)
8020859c:	003a6406 	br	80206f30 <__reset+0xfa1e6f30>
802085a0:	d9002917 	ldw	r4,164(sp)
802085a4:	d8002785 	stb	zero,158(sp)
802085a8:	203d8d16 	blt	r4,zero,80207be0 <__reset+0xfa1e7be0>
802085ac:	00bfdfc4 	movi	r2,-129
802085b0:	90a4703a 	and	r18,r18,r2
802085b4:	003b0506 	br	802071cc <__reset+0xfa1e71cc>
802085b8:	016008b4 	movhi	r5,32802
802085bc:	29764784 	addi	r5,r5,-9954
802085c0:	d9402b15 	stw	r5,172(sp)
802085c4:	d9402b17 	ldw	r5,172(sp)
802085c8:	1c47883a 	add	r3,r3,r17
802085cc:	10800044 	addi	r2,r2,1
802085d0:	41400015 	stw	r5,0(r8)
802085d4:	44400115 	stw	r17,4(r8)
802085d8:	d8c02015 	stw	r3,128(sp)
802085dc:	d8801f15 	stw	r2,124(sp)
802085e0:	010001c4 	movi	r4,7
802085e4:	20bf3016 	blt	r4,r2,802082a8 <__reset+0xfa1e82a8>
802085e8:	42000204 	addi	r8,r8,8
802085ec:	003f3506 	br	802082c4 <__reset+0xfa1e82c4>
802085f0:	012008b4 	movhi	r4,32802
802085f4:	21364784 	addi	r4,r4,-9954
802085f8:	d9002b15 	stw	r4,172(sp)
802085fc:	003c5e06 	br	80207778 <__reset+0xfa1e7778>
80208600:	d9402c17 	ldw	r5,176(sp)
80208604:	d9801e04 	addi	r6,sp,120
80208608:	9809883a 	mov	r4,r19
8020860c:	02104140 	call	80210414 <__ssprint_r>
80208610:	103b011e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
80208614:	d8c02017 	ldw	r3,128(sp)
80208618:	da000404 	addi	r8,sp,16
8020861c:	003d9306 	br	80207c6c <__reset+0xfa1e7c6c>
80208620:	d8801f17 	ldw	r2,124(sp)
80208624:	016008b4 	movhi	r5,32802
80208628:	01000044 	movi	r4,1
8020862c:	18c00044 	addi	r3,r3,1
80208630:	10800044 	addi	r2,r2,1
80208634:	29764704 	addi	r5,r5,-9956
80208638:	41000115 	stw	r4,4(r8)
8020863c:	41400015 	stw	r5,0(r8)
80208640:	d8c02015 	stw	r3,128(sp)
80208644:	d8801f15 	stw	r2,124(sp)
80208648:	010001c4 	movi	r4,7
8020864c:	2080b516 	blt	r4,r2,80208924 <___svfprintf_internal_r+0x1aa0>
80208650:	42000204 	addi	r8,r8,8
80208654:	8800041e 	bne	r17,zero,80208668 <___svfprintf_internal_r+0x17e4>
80208658:	d8803317 	ldw	r2,204(sp)
8020865c:	1000021e 	bne	r2,zero,80208668 <___svfprintf_internal_r+0x17e4>
80208660:	9080004c 	andi	r2,r18,1
80208664:	103c5b26 	beq	r2,zero,802077d4 <__reset+0xfa1e77d4>
80208668:	d9003817 	ldw	r4,224(sp)
8020866c:	d8801f17 	ldw	r2,124(sp)
80208670:	d9403417 	ldw	r5,208(sp)
80208674:	20c7883a 	add	r3,r4,r3
80208678:	10800044 	addi	r2,r2,1
8020867c:	41000115 	stw	r4,4(r8)
80208680:	41400015 	stw	r5,0(r8)
80208684:	d8c02015 	stw	r3,128(sp)
80208688:	d8801f15 	stw	r2,124(sp)
8020868c:	010001c4 	movi	r4,7
80208690:	20818016 	blt	r4,r2,80208c94 <___svfprintf_internal_r+0x1e10>
80208694:	42000204 	addi	r8,r8,8
80208698:	0463c83a 	sub	r17,zero,r17
8020869c:	0440cb0e 	bge	zero,r17,802089cc <___svfprintf_internal_r+0x1b48>
802086a0:	05800404 	movi	r22,16
802086a4:	b440e80e 	bge	r22,r17,80208a48 <___svfprintf_internal_r+0x1bc4>
802086a8:	016008b4 	movhi	r5,32802
802086ac:	29764784 	addi	r5,r5,-9954
802086b0:	d9402b15 	stw	r5,172(sp)
802086b4:	070001c4 	movi	fp,7
802086b8:	dd002c17 	ldw	r20,176(sp)
802086bc:	00000306 	br	802086cc <___svfprintf_internal_r+0x1848>
802086c0:	42000204 	addi	r8,r8,8
802086c4:	8c7ffc04 	addi	r17,r17,-16
802086c8:	b440e20e 	bge	r22,r17,80208a54 <___svfprintf_internal_r+0x1bd0>
802086cc:	18c00404 	addi	r3,r3,16
802086d0:	10800044 	addi	r2,r2,1
802086d4:	45400015 	stw	r21,0(r8)
802086d8:	45800115 	stw	r22,4(r8)
802086dc:	d8c02015 	stw	r3,128(sp)
802086e0:	d8801f15 	stw	r2,124(sp)
802086e4:	e0bff60e 	bge	fp,r2,802086c0 <__reset+0xfa1e86c0>
802086e8:	d9801e04 	addi	r6,sp,120
802086ec:	a00b883a 	mov	r5,r20
802086f0:	9809883a 	mov	r4,r19
802086f4:	02104140 	call	80210414 <__ssprint_r>
802086f8:	103ac71e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
802086fc:	d8c02017 	ldw	r3,128(sp)
80208700:	d8801f17 	ldw	r2,124(sp)
80208704:	da000404 	addi	r8,sp,16
80208708:	003fee06 	br	802086c4 <__reset+0xfa1e86c4>
8020870c:	d8c02d17 	ldw	r3,180(sp)
80208710:	d9002917 	ldw	r4,164(sp)
80208714:	002d883a 	mov	r22,zero
80208718:	18800104 	addi	r2,r3,4
8020871c:	1d000017 	ldw	r20,0(r3)
80208720:	203e7d0e 	bge	r4,zero,80208118 <__reset+0xfa1e8118>
80208724:	003eda06 	br	80208290 <__reset+0xfa1e8290>
80208728:	d9402d17 	ldw	r5,180(sp)
8020872c:	d8c02917 	ldw	r3,164(sp)
80208730:	002d883a 	mov	r22,zero
80208734:	28800104 	addi	r2,r5,4
80208738:	2d000017 	ldw	r20,0(r5)
8020873c:	183e2d0e 	bge	r3,zero,80207ff4 <__reset+0xfa1e7ff4>
80208740:	003f6b06 	br	802084f0 <__reset+0xfa1e84f0>
80208744:	d8c02d15 	stw	r3,180(sp)
80208748:	0039883a 	mov	fp,zero
8020874c:	003ed206 	br	80208298 <__reset+0xfa1e8298>
80208750:	bc400043 	ldbu	r17,1(r23)
80208754:	94800814 	ori	r18,r18,32
80208758:	bdc00044 	addi	r23,r23,1
8020875c:	8c403fcc 	andi	r17,r17,255
80208760:	8c40201c 	xori	r17,r17,128
80208764:	8c7fe004 	addi	r17,r17,-128
80208768:	003a1a06 	br	80206fd4 <__reset+0xfa1e6fd4>
8020876c:	d9402c17 	ldw	r5,176(sp)
80208770:	d9801e04 	addi	r6,sp,120
80208774:	9809883a 	mov	r4,r19
80208778:	02104140 	call	80210414 <__ssprint_r>
8020877c:	103aa61e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
80208780:	d8c02017 	ldw	r3,128(sp)
80208784:	da000404 	addi	r8,sp,16
80208788:	003d4a06 	br	80207cb4 <__reset+0xfa1e7cb4>
8020878c:	d9002917 	ldw	r4,164(sp)
80208790:	05bff7c4 	movi	r22,-33
80208794:	00bfffc4 	movi	r2,-1
80208798:	8dac703a 	and	r22,r17,r22
8020879c:	20806a26 	beq	r4,r2,80208948 <___svfprintf_internal_r+0x1ac4>
802087a0:	008011c4 	movi	r2,71
802087a4:	b0813726 	beq	r22,r2,80208c84 <___svfprintf_internal_r+0x1e00>
802087a8:	d9003717 	ldw	r4,220(sp)
802087ac:	90c04014 	ori	r3,r18,256
802087b0:	d8c02b15 	stw	r3,172(sp)
802087b4:	20015d16 	blt	r4,zero,80208d2c <___svfprintf_internal_r+0x1ea8>
802087b8:	dd003717 	ldw	r20,220(sp)
802087bc:	d8002a05 	stb	zero,168(sp)
802087c0:	00801984 	movi	r2,102
802087c4:	88814026 	beq	r17,r2,80208cc8 <___svfprintf_internal_r+0x1e44>
802087c8:	00801184 	movi	r2,70
802087cc:	88817126 	beq	r17,r2,80208d94 <___svfprintf_internal_r+0x1f10>
802087d0:	00801144 	movi	r2,69
802087d4:	b0816226 	beq	r22,r2,80208d60 <___svfprintf_internal_r+0x1edc>
802087d8:	d8c02917 	ldw	r3,164(sp)
802087dc:	d8802104 	addi	r2,sp,132
802087e0:	d8800315 	stw	r2,12(sp)
802087e4:	d9403617 	ldw	r5,216(sp)
802087e8:	d8802504 	addi	r2,sp,148
802087ec:	d8800215 	stw	r2,8(sp)
802087f0:	d8802604 	addi	r2,sp,152
802087f4:	d8c00015 	stw	r3,0(sp)
802087f8:	d8800115 	stw	r2,4(sp)
802087fc:	01c00084 	movi	r7,2
80208800:	a00d883a 	mov	r6,r20
80208804:	9809883a 	mov	r4,r19
80208808:	d8c03d15 	stw	r3,244(sp)
8020880c:	da003e15 	stw	r8,248(sp)
80208810:	020b6800 	call	8020b680 <_dtoa_r>
80208814:	1021883a 	mov	r16,r2
80208818:	008019c4 	movi	r2,103
8020881c:	d8c03d17 	ldw	r3,244(sp)
80208820:	da003e17 	ldw	r8,248(sp)
80208824:	8880e726 	beq	r17,r2,80208bc4 <___svfprintf_internal_r+0x1d40>
80208828:	008011c4 	movi	r2,71
8020882c:	8880d426 	beq	r17,r2,80208b80 <___svfprintf_internal_r+0x1cfc>
80208830:	80f9883a 	add	fp,r16,r3
80208834:	d9003617 	ldw	r4,216(sp)
80208838:	000d883a 	mov	r6,zero
8020883c:	000f883a 	mov	r7,zero
80208840:	a00b883a 	mov	r5,r20
80208844:	da003e15 	stw	r8,248(sp)
80208848:	02155940 	call	80215594 <__eqdf2>
8020884c:	da003e17 	ldw	r8,248(sp)
80208850:	1000e426 	beq	r2,zero,80208be4 <___svfprintf_internal_r+0x1d60>
80208854:	d8802117 	ldw	r2,132(sp)
80208858:	1700062e 	bgeu	r2,fp,80208874 <___svfprintf_internal_r+0x19f0>
8020885c:	01000c04 	movi	r4,48
80208860:	10c00044 	addi	r3,r2,1
80208864:	d8c02115 	stw	r3,132(sp)
80208868:	11000005 	stb	r4,0(r2)
8020886c:	d8802117 	ldw	r2,132(sp)
80208870:	173ffb36 	bltu	r2,fp,80208860 <__reset+0xfa1e8860>
80208874:	1405c83a 	sub	r2,r2,r16
80208878:	d8803315 	stw	r2,204(sp)
8020887c:	008011c4 	movi	r2,71
80208880:	b080c526 	beq	r22,r2,80208b98 <___svfprintf_internal_r+0x1d14>
80208884:	00801944 	movi	r2,101
80208888:	1441d90e 	bge	r2,r17,80208ff0 <___svfprintf_internal_r+0x216c>
8020888c:	d8c02617 	ldw	r3,152(sp)
80208890:	00801984 	movi	r2,102
80208894:	d8c03215 	stw	r3,200(sp)
80208898:	88813426 	beq	r17,r2,80208d6c <___svfprintf_internal_r+0x1ee8>
8020889c:	d8c03217 	ldw	r3,200(sp)
802088a0:	d9003317 	ldw	r4,204(sp)
802088a4:	19012516 	blt	r3,r4,80208d3c <___svfprintf_internal_r+0x1eb8>
802088a8:	9480004c 	andi	r18,r18,1
802088ac:	9001841e 	bne	r18,zero,80208ec0 <___svfprintf_internal_r+0x203c>
802088b0:	1805883a 	mov	r2,r3
802088b4:	1801cc16 	blt	r3,zero,80208fe8 <___svfprintf_internal_r+0x2164>
802088b8:	d8c03217 	ldw	r3,200(sp)
802088bc:	044019c4 	movi	r17,103
802088c0:	d8c02e15 	stw	r3,184(sp)
802088c4:	df002a07 	ldb	fp,168(sp)
802088c8:	e000a61e 	bne	fp,zero,80208b64 <___svfprintf_internal_r+0x1ce0>
802088cc:	df002783 	ldbu	fp,158(sp)
802088d0:	d8802a15 	stw	r2,168(sp)
802088d4:	dc802b17 	ldw	r18,172(sp)
802088d8:	d8002915 	stw	zero,164(sp)
802088dc:	003b1706 	br	8020753c <__reset+0xfa1e753c>
802088e0:	042008b4 	movhi	r16,32802
802088e4:	84363704 	addi	r16,r16,-10020
802088e8:	003aa606 	br	80207384 <__reset+0xfa1e7384>
802088ec:	d9003917 	ldw	r4,228(sp)
802088f0:	04001004 	movi	r16,64
802088f4:	800b883a 	mov	r5,r16
802088f8:	020e0600 	call	8020e060 <_malloc_r>
802088fc:	d9002c17 	ldw	r4,176(sp)
80208900:	20800015 	stw	r2,0(r4)
80208904:	20800415 	stw	r2,16(r4)
80208908:	1001cb26 	beq	r2,zero,80209038 <___svfprintf_internal_r+0x21b4>
8020890c:	d8802c17 	ldw	r2,176(sp)
80208910:	14000515 	stw	r16,20(r2)
80208914:	00397606 	br	80206ef0 <__reset+0xfa1e6ef0>
80208918:	042008b4 	movhi	r16,32802
8020891c:	84363904 	addi	r16,r16,-10012
80208920:	003ee106 	br	802084a8 <__reset+0xfa1e84a8>
80208924:	d9402c17 	ldw	r5,176(sp)
80208928:	d9801e04 	addi	r6,sp,120
8020892c:	9809883a 	mov	r4,r19
80208930:	02104140 	call	80210414 <__ssprint_r>
80208934:	103a381e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
80208938:	dc402617 	ldw	r17,152(sp)
8020893c:	d8c02017 	ldw	r3,128(sp)
80208940:	da000404 	addi	r8,sp,16
80208944:	003f4306 	br	80208654 <__reset+0xfa1e8654>
80208948:	01400184 	movi	r5,6
8020894c:	d9402915 	stw	r5,164(sp)
80208950:	003f9506 	br	802087a8 <__reset+0xfa1e87a8>
80208954:	d9002d17 	ldw	r4,180(sp)
80208958:	25000017 	ldw	r20,0(r4)
8020895c:	21000104 	addi	r4,r4,4
80208960:	d9002d15 	stw	r4,180(sp)
80208964:	a02dd7fa 	srai	r22,r20,31
80208968:	b005883a 	mov	r2,r22
8020896c:	003a9b06 	br	802073dc <__reset+0xfa1e73dc>
80208970:	d9402d17 	ldw	r5,180(sp)
80208974:	002d883a 	mov	r22,zero
80208978:	2d000017 	ldw	r20,0(r5)
8020897c:	29400104 	addi	r5,r5,4
80208980:	d9402d15 	stw	r5,180(sp)
80208984:	003bf906 	br	8020796c <__reset+0xfa1e796c>
80208988:	9480100c 	andi	r18,r18,64
8020898c:	90006e26 	beq	r18,zero,80208b48 <___svfprintf_internal_r+0x1cc4>
80208990:	d9002d17 	ldw	r4,180(sp)
80208994:	d9402f17 	ldw	r5,188(sp)
80208998:	20800017 	ldw	r2,0(r4)
8020899c:	21000104 	addi	r4,r4,4
802089a0:	d9002d15 	stw	r4,180(sp)
802089a4:	1140000d 	sth	r5,0(r2)
802089a8:	00396106 	br	80206f30 <__reset+0xfa1e6f30>
802089ac:	d9402c17 	ldw	r5,176(sp)
802089b0:	d9801e04 	addi	r6,sp,120
802089b4:	9809883a 	mov	r4,r19
802089b8:	02104140 	call	80210414 <__ssprint_r>
802089bc:	103a161e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
802089c0:	d8c02017 	ldw	r3,128(sp)
802089c4:	d8801f17 	ldw	r2,124(sp)
802089c8:	da000404 	addi	r8,sp,16
802089cc:	d9403317 	ldw	r5,204(sp)
802089d0:	10800044 	addi	r2,r2,1
802089d4:	44000015 	stw	r16,0(r8)
802089d8:	28c7883a 	add	r3,r5,r3
802089dc:	003b7706 	br	802077bc <__reset+0xfa1e77bc>
802089e0:	8009883a 	mov	r4,r16
802089e4:	da003e15 	stw	r8,248(sp)
802089e8:	0206dec0 	call	80206dec <strlen>
802089ec:	d8802e15 	stw	r2,184(sp)
802089f0:	da003e17 	ldw	r8,248(sp)
802089f4:	103c280e 	bge	r2,zero,80207a98 <__reset+0xfa1e7a98>
802089f8:	0005883a 	mov	r2,zero
802089fc:	003c2606 	br	80207a98 <__reset+0xfa1e7a98>
80208a00:	00bfffc4 	movi	r2,-1
80208a04:	003a0906 	br	8020722c <__reset+0xfa1e722c>
80208a08:	012008b4 	movhi	r4,32802
80208a0c:	21364b84 	addi	r4,r4,-9938
80208a10:	d9003515 	stw	r4,212(sp)
80208a14:	003b0606 	br	80207630 <__reset+0xfa1e7630>
80208a18:	013fffc4 	movi	r4,-1
80208a1c:	003a2706 	br	802072bc <__reset+0xfa1e72bc>
80208a20:	d9402c17 	ldw	r5,176(sp)
80208a24:	d9801e04 	addi	r6,sp,120
80208a28:	9809883a 	mov	r4,r19
80208a2c:	02104140 	call	80210414 <__ssprint_r>
80208a30:	1039f91e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
80208a34:	d8c02017 	ldw	r3,128(sp)
80208a38:	da000404 	addi	r8,sp,16
80208a3c:	003d8406 	br	80208050 <__reset+0xfa1e8050>
80208a40:	0023883a 	mov	r17,zero
80208a44:	003d8306 	br	80208054 <__reset+0xfa1e8054>
80208a48:	012008b4 	movhi	r4,32802
80208a4c:	21364784 	addi	r4,r4,-9954
80208a50:	d9002b15 	stw	r4,172(sp)
80208a54:	d9002b17 	ldw	r4,172(sp)
80208a58:	1c47883a 	add	r3,r3,r17
80208a5c:	10800044 	addi	r2,r2,1
80208a60:	41000015 	stw	r4,0(r8)
80208a64:	44400115 	stw	r17,4(r8)
80208a68:	d8c02015 	stw	r3,128(sp)
80208a6c:	d8801f15 	stw	r2,124(sp)
80208a70:	010001c4 	movi	r4,7
80208a74:	20bfcd16 	blt	r4,r2,802089ac <__reset+0xfa1e89ac>
80208a78:	42000204 	addi	r8,r8,8
80208a7c:	003fd306 	br	802089cc <__reset+0xfa1e89cc>
80208a80:	d9402c17 	ldw	r5,176(sp)
80208a84:	d9801e04 	addi	r6,sp,120
80208a88:	9809883a 	mov	r4,r19
80208a8c:	02104140 	call	80210414 <__ssprint_r>
80208a90:	1039e11e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
80208a94:	d8802617 	ldw	r2,152(sp)
80208a98:	d8c02017 	ldw	r3,128(sp)
80208a9c:	da000404 	addi	r8,sp,16
80208aa0:	003e1c06 	br	80208314 <__reset+0xfa1e8314>
80208aa4:	d8802917 	ldw	r2,164(sp)
80208aa8:	00c00184 	movi	r3,6
80208aac:	1880012e 	bgeu	r3,r2,80208ab4 <___svfprintf_internal_r+0x1c30>
80208ab0:	1805883a 	mov	r2,r3
80208ab4:	d8802e15 	stw	r2,184(sp)
80208ab8:	1000f316 	blt	r2,zero,80208e88 <___svfprintf_internal_r+0x2004>
80208abc:	042008b4 	movhi	r16,32802
80208ac0:	d8802a15 	stw	r2,168(sp)
80208ac4:	dd002d15 	stw	r20,180(sp)
80208ac8:	d8002915 	stw	zero,164(sp)
80208acc:	d8003215 	stw	zero,200(sp)
80208ad0:	84364504 	addi	r16,r16,-9964
80208ad4:	0039883a 	mov	fp,zero
80208ad8:	003a9f06 	br	80207558 <__reset+0xfa1e7558>
80208adc:	012008b4 	movhi	r4,32802
80208ae0:	21364b84 	addi	r4,r4,-9938
80208ae4:	d9003515 	stw	r4,212(sp)
80208ae8:	003b5f06 	br	80207868 <__reset+0xfa1e7868>
80208aec:	d9402c17 	ldw	r5,176(sp)
80208af0:	d9801e04 	addi	r6,sp,120
80208af4:	9809883a 	mov	r4,r19
80208af8:	02104140 	call	80210414 <__ssprint_r>
80208afc:	1039c61e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
80208b00:	d8802617 	ldw	r2,152(sp)
80208b04:	d9403317 	ldw	r5,204(sp)
80208b08:	d8c02017 	ldw	r3,128(sp)
80208b0c:	da000404 	addi	r8,sp,16
80208b10:	2885c83a 	sub	r2,r5,r2
80208b14:	003e1006 	br	80208358 <__reset+0xfa1e8358>
80208b18:	00800044 	movi	r2,1
80208b1c:	10803fcc 	andi	r2,r2,255
80208b20:	00c00044 	movi	r3,1
80208b24:	10fa3526 	beq	r2,r3,802073fc <__reset+0xfa1e73fc>
80208b28:	00c00084 	movi	r3,2
80208b2c:	10fb9e26 	beq	r2,r3,802079a8 <__reset+0xfa1e79a8>
80208b30:	003a6406 	br	802074c4 <__reset+0xfa1e74c4>
80208b34:	0021883a 	mov	r16,zero
80208b38:	003e0806 	br	8020835c <__reset+0xfa1e835c>
80208b3c:	07000b44 	movi	fp,45
80208b40:	df002785 	stb	fp,158(sp)
80208b44:	003a0b06 	br	80207374 <__reset+0xfa1e7374>
80208b48:	d8c02d17 	ldw	r3,180(sp)
80208b4c:	d9002f17 	ldw	r4,188(sp)
80208b50:	18800017 	ldw	r2,0(r3)
80208b54:	18c00104 	addi	r3,r3,4
80208b58:	d8c02d15 	stw	r3,180(sp)
80208b5c:	11000015 	stw	r4,0(r2)
80208b60:	0038f306 	br	80206f30 <__reset+0xfa1e6f30>
80208b64:	00c00b44 	movi	r3,45
80208b68:	d8c02785 	stb	r3,158(sp)
80208b6c:	d8802a15 	stw	r2,168(sp)
80208b70:	dc802b17 	ldw	r18,172(sp)
80208b74:	d8002915 	stw	zero,164(sp)
80208b78:	07000b44 	movi	fp,45
80208b7c:	003a7306 	br	8020754c <__reset+0xfa1e754c>
80208b80:	9080004c 	andi	r2,r18,1
80208b84:	1000941e 	bne	r2,zero,80208dd8 <___svfprintf_internal_r+0x1f54>
80208b88:	d8802117 	ldw	r2,132(sp)
80208b8c:	1405c83a 	sub	r2,r2,r16
80208b90:	d8803315 	stw	r2,204(sp)
80208b94:	b441161e 	bne	r22,r17,80208ff0 <___svfprintf_internal_r+0x216c>
80208b98:	dd802617 	ldw	r22,152(sp)
80208b9c:	00bfff44 	movi	r2,-3
80208ba0:	b0801a16 	blt	r22,r2,80208c0c <___svfprintf_internal_r+0x1d88>
80208ba4:	d9402917 	ldw	r5,164(sp)
80208ba8:	2d801816 	blt	r5,r22,80208c0c <___svfprintf_internal_r+0x1d88>
80208bac:	dd803215 	stw	r22,200(sp)
80208bb0:	003f3a06 	br	8020889c <__reset+0xfa1e889c>
80208bb4:	1025883a 	mov	r18,r2
80208bb8:	0039883a 	mov	fp,zero
80208bbc:	00800084 	movi	r2,2
80208bc0:	003fd606 	br	80208b1c <__reset+0xfa1e8b1c>
80208bc4:	9080004c 	andi	r2,r18,1
80208bc8:	103f191e 	bne	r2,zero,80208830 <__reset+0xfa1e8830>
80208bcc:	d8802117 	ldw	r2,132(sp)
80208bd0:	003f2806 	br	80208874 <__reset+0xfa1e8874>
80208bd4:	012008b4 	movhi	r4,32802
80208bd8:	21364784 	addi	r4,r4,-9954
80208bdc:	d9002b15 	stw	r4,172(sp)
80208be0:	003c7c06 	br	80207dd4 <__reset+0xfa1e7dd4>
80208be4:	e005883a 	mov	r2,fp
80208be8:	003f2206 	br	80208874 <__reset+0xfa1e8874>
80208bec:	d9402917 	ldw	r5,164(sp)
80208bf0:	df002783 	ldbu	fp,158(sp)
80208bf4:	dd002d15 	stw	r20,180(sp)
80208bf8:	d9402a15 	stw	r5,168(sp)
80208bfc:	d9402e15 	stw	r5,184(sp)
80208c00:	d8002915 	stw	zero,164(sp)
80208c04:	d8003215 	stw	zero,200(sp)
80208c08:	003a4c06 	br	8020753c <__reset+0xfa1e753c>
80208c0c:	8c7fff84 	addi	r17,r17,-2
80208c10:	b5bfffc4 	addi	r22,r22,-1
80208c14:	dd802615 	stw	r22,152(sp)
80208c18:	dc4022c5 	stb	r17,139(sp)
80208c1c:	b000c316 	blt	r22,zero,80208f2c <___svfprintf_internal_r+0x20a8>
80208c20:	00800ac4 	movi	r2,43
80208c24:	d8802305 	stb	r2,140(sp)
80208c28:	00800244 	movi	r2,9
80208c2c:	15806e16 	blt	r2,r22,80208de8 <___svfprintf_internal_r+0x1f64>
80208c30:	00800c04 	movi	r2,48
80208c34:	b5800c04 	addi	r22,r22,48
80208c38:	d8802345 	stb	r2,141(sp)
80208c3c:	dd802385 	stb	r22,142(sp)
80208c40:	d88023c4 	addi	r2,sp,143
80208c44:	df0022c4 	addi	fp,sp,139
80208c48:	d8c03317 	ldw	r3,204(sp)
80208c4c:	1739c83a 	sub	fp,r2,fp
80208c50:	d9003317 	ldw	r4,204(sp)
80208c54:	e0c7883a 	add	r3,fp,r3
80208c58:	df003b15 	stw	fp,236(sp)
80208c5c:	d8c02e15 	stw	r3,184(sp)
80208c60:	00800044 	movi	r2,1
80208c64:	1100b70e 	bge	r2,r4,80208f44 <___svfprintf_internal_r+0x20c0>
80208c68:	d8c02e17 	ldw	r3,184(sp)
80208c6c:	18c00044 	addi	r3,r3,1
80208c70:	d8c02e15 	stw	r3,184(sp)
80208c74:	1805883a 	mov	r2,r3
80208c78:	1800b016 	blt	r3,zero,80208f3c <___svfprintf_internal_r+0x20b8>
80208c7c:	d8003215 	stw	zero,200(sp)
80208c80:	003f1006 	br	802088c4 <__reset+0xfa1e88c4>
80208c84:	d8802917 	ldw	r2,164(sp)
80208c88:	103ec71e 	bne	r2,zero,802087a8 <__reset+0xfa1e87a8>
80208c8c:	dc002915 	stw	r16,164(sp)
80208c90:	003ec506 	br	802087a8 <__reset+0xfa1e87a8>
80208c94:	d9402c17 	ldw	r5,176(sp)
80208c98:	d9801e04 	addi	r6,sp,120
80208c9c:	9809883a 	mov	r4,r19
80208ca0:	02104140 	call	80210414 <__ssprint_r>
80208ca4:	10395c1e 	bne	r2,zero,80207218 <__reset+0xfa1e7218>
80208ca8:	dc402617 	ldw	r17,152(sp)
80208cac:	d8c02017 	ldw	r3,128(sp)
80208cb0:	d8801f17 	ldw	r2,124(sp)
80208cb4:	da000404 	addi	r8,sp,16
80208cb8:	003e7706 	br	80208698 <__reset+0xfa1e8698>
80208cbc:	582f883a 	mov	r23,r11
80208cc0:	d8002915 	stw	zero,164(sp)
80208cc4:	0038c406 	br	80206fd8 <__reset+0xfa1e6fd8>
80208cc8:	d8c02917 	ldw	r3,164(sp)
80208ccc:	d8802104 	addi	r2,sp,132
80208cd0:	d8800315 	stw	r2,12(sp)
80208cd4:	d9403617 	ldw	r5,216(sp)
80208cd8:	d8802504 	addi	r2,sp,148
80208cdc:	d8800215 	stw	r2,8(sp)
80208ce0:	d8802604 	addi	r2,sp,152
80208ce4:	d8c00015 	stw	r3,0(sp)
80208ce8:	9809883a 	mov	r4,r19
80208cec:	d8800115 	stw	r2,4(sp)
80208cf0:	01c000c4 	movi	r7,3
80208cf4:	a00d883a 	mov	r6,r20
80208cf8:	da003e15 	stw	r8,248(sp)
80208cfc:	020b6800 	call	8020b680 <_dtoa_r>
80208d00:	d9002917 	ldw	r4,164(sp)
80208d04:	da003e17 	ldw	r8,248(sp)
80208d08:	1021883a 	mov	r16,r2
80208d0c:	1139883a 	add	fp,r2,r4
80208d10:	2007883a 	mov	r3,r4
80208d14:	81000007 	ldb	r4,0(r16)
80208d18:	00800c04 	movi	r2,48
80208d1c:	20806f26 	beq	r4,r2,80208edc <___svfprintf_internal_r+0x2058>
80208d20:	d8c02617 	ldw	r3,152(sp)
80208d24:	e0f9883a 	add	fp,fp,r3
80208d28:	003ec206 	br	80208834 <__reset+0xfa1e8834>
80208d2c:	00c00b44 	movi	r3,45
80208d30:	2520003c 	xorhi	r20,r4,32768
80208d34:	d8c02a05 	stb	r3,168(sp)
80208d38:	003ea106 	br	802087c0 <__reset+0xfa1e87c0>
80208d3c:	d8c03217 	ldw	r3,200(sp)
80208d40:	00c0890e 	bge	zero,r3,80208f68 <___svfprintf_internal_r+0x20e4>
80208d44:	00800044 	movi	r2,1
80208d48:	d9003317 	ldw	r4,204(sp)
80208d4c:	1105883a 	add	r2,r2,r4
80208d50:	d8802e15 	stw	r2,184(sp)
80208d54:	10005f16 	blt	r2,zero,80208ed4 <___svfprintf_internal_r+0x2050>
80208d58:	044019c4 	movi	r17,103
80208d5c:	003ed906 	br	802088c4 <__reset+0xfa1e88c4>
80208d60:	d9002917 	ldw	r4,164(sp)
80208d64:	20c00044 	addi	r3,r4,1
80208d68:	003e9c06 	br	802087dc <__reset+0xfa1e87dc>
80208d6c:	d9002917 	ldw	r4,164(sp)
80208d70:	00c0680e 	bge	zero,r3,80208f14 <___svfprintf_internal_r+0x2090>
80208d74:	2000461e 	bne	r4,zero,80208e90 <___svfprintf_internal_r+0x200c>
80208d78:	9480004c 	andi	r18,r18,1
80208d7c:	9000441e 	bne	r18,zero,80208e90 <___svfprintf_internal_r+0x200c>
80208d80:	1805883a 	mov	r2,r3
80208d84:	1800a016 	blt	r3,zero,80209008 <___svfprintf_internal_r+0x2184>
80208d88:	d8c03217 	ldw	r3,200(sp)
80208d8c:	d8c02e15 	stw	r3,184(sp)
80208d90:	003ecc06 	br	802088c4 <__reset+0xfa1e88c4>
80208d94:	d9402917 	ldw	r5,164(sp)
80208d98:	d8802104 	addi	r2,sp,132
80208d9c:	d8800315 	stw	r2,12(sp)
80208da0:	d9400015 	stw	r5,0(sp)
80208da4:	d8802504 	addi	r2,sp,148
80208da8:	d9403617 	ldw	r5,216(sp)
80208dac:	d8800215 	stw	r2,8(sp)
80208db0:	d8802604 	addi	r2,sp,152
80208db4:	d8800115 	stw	r2,4(sp)
80208db8:	01c000c4 	movi	r7,3
80208dbc:	a00d883a 	mov	r6,r20
80208dc0:	9809883a 	mov	r4,r19
80208dc4:	da003e15 	stw	r8,248(sp)
80208dc8:	020b6800 	call	8020b680 <_dtoa_r>
80208dcc:	d8c02917 	ldw	r3,164(sp)
80208dd0:	da003e17 	ldw	r8,248(sp)
80208dd4:	1021883a 	mov	r16,r2
80208dd8:	00801184 	movi	r2,70
80208ddc:	80f9883a 	add	fp,r16,r3
80208de0:	88bfcc26 	beq	r17,r2,80208d14 <__reset+0xfa1e8d14>
80208de4:	003e9306 	br	80208834 <__reset+0xfa1e8834>
80208de8:	df0022c4 	addi	fp,sp,139
80208dec:	dc002915 	stw	r16,164(sp)
80208df0:	9829883a 	mov	r20,r19
80208df4:	e021883a 	mov	r16,fp
80208df8:	4027883a 	mov	r19,r8
80208dfc:	b009883a 	mov	r4,r22
80208e00:	01400284 	movi	r5,10
80208e04:	02142d00 	call	802142d0 <__modsi3>
80208e08:	10800c04 	addi	r2,r2,48
80208e0c:	843fffc4 	addi	r16,r16,-1
80208e10:	b009883a 	mov	r4,r22
80208e14:	01400284 	movi	r5,10
80208e18:	80800005 	stb	r2,0(r16)
80208e1c:	021424c0 	call	8021424c <__divsi3>
80208e20:	102d883a 	mov	r22,r2
80208e24:	00800244 	movi	r2,9
80208e28:	15bff416 	blt	r2,r22,80208dfc <__reset+0xfa1e8dfc>
80208e2c:	9811883a 	mov	r8,r19
80208e30:	b0800c04 	addi	r2,r22,48
80208e34:	a027883a 	mov	r19,r20
80208e38:	8029883a 	mov	r20,r16
80208e3c:	a17fffc4 	addi	r5,r20,-1
80208e40:	a0bfffc5 	stb	r2,-1(r20)
80208e44:	dc002917 	ldw	r16,164(sp)
80208e48:	2f00752e 	bgeu	r5,fp,80209020 <___svfprintf_internal_r+0x219c>
80208e4c:	d9c02384 	addi	r7,sp,142
80208e50:	3d0fc83a 	sub	r7,r7,r20
80208e54:	d9002344 	addi	r4,sp,141
80208e58:	e1cf883a 	add	r7,fp,r7
80208e5c:	00000106 	br	80208e64 <___svfprintf_internal_r+0x1fe0>
80208e60:	28800003 	ldbu	r2,0(r5)
80208e64:	20800005 	stb	r2,0(r4)
80208e68:	21000044 	addi	r4,r4,1
80208e6c:	29400044 	addi	r5,r5,1
80208e70:	21fffb1e 	bne	r4,r7,80208e60 <__reset+0xfa1e8e60>
80208e74:	d8802304 	addi	r2,sp,140
80208e78:	1505c83a 	sub	r2,r2,r20
80208e7c:	d8c02344 	addi	r3,sp,141
80208e80:	1885883a 	add	r2,r3,r2
80208e84:	003f7006 	br	80208c48 <__reset+0xfa1e8c48>
80208e88:	0005883a 	mov	r2,zero
80208e8c:	003f0b06 	br	80208abc <__reset+0xfa1e8abc>
80208e90:	d9002917 	ldw	r4,164(sp)
80208e94:	d8c03217 	ldw	r3,200(sp)
80208e98:	20800044 	addi	r2,r4,1
80208e9c:	1885883a 	add	r2,r3,r2
80208ea0:	d8802e15 	stw	r2,184(sp)
80208ea4:	103e870e 	bge	r2,zero,802088c4 <__reset+0xfa1e88c4>
80208ea8:	0005883a 	mov	r2,zero
80208eac:	003e8506 	br	802088c4 <__reset+0xfa1e88c4>
80208eb0:	012008b4 	movhi	r4,32802
80208eb4:	21364784 	addi	r4,r4,-9954
80208eb8:	d9002b15 	stw	r4,172(sp)
80208ebc:	003cc506 	br	802081d4 <__reset+0xfa1e81d4>
80208ec0:	d8c03217 	ldw	r3,200(sp)
80208ec4:	18c00044 	addi	r3,r3,1
80208ec8:	d8c02e15 	stw	r3,184(sp)
80208ecc:	1805883a 	mov	r2,r3
80208ed0:	183fa10e 	bge	r3,zero,80208d58 <__reset+0xfa1e8d58>
80208ed4:	0005883a 	mov	r2,zero
80208ed8:	003f9f06 	br	80208d58 <__reset+0xfa1e8d58>
80208edc:	d9003617 	ldw	r4,216(sp)
80208ee0:	000d883a 	mov	r6,zero
80208ee4:	000f883a 	mov	r7,zero
80208ee8:	a00b883a 	mov	r5,r20
80208eec:	d8c03d15 	stw	r3,244(sp)
80208ef0:	da003e15 	stw	r8,248(sp)
80208ef4:	02155940 	call	80215594 <__eqdf2>
80208ef8:	d8c03d17 	ldw	r3,244(sp)
80208efc:	da003e17 	ldw	r8,248(sp)
80208f00:	103f8726 	beq	r2,zero,80208d20 <__reset+0xfa1e8d20>
80208f04:	00800044 	movi	r2,1
80208f08:	10c7c83a 	sub	r3,r2,r3
80208f0c:	d8c02615 	stw	r3,152(sp)
80208f10:	003f8406 	br	80208d24 <__reset+0xfa1e8d24>
80208f14:	20000e1e 	bne	r4,zero,80208f50 <___svfprintf_internal_r+0x20cc>
80208f18:	9480004c 	andi	r18,r18,1
80208f1c:	90000c1e 	bne	r18,zero,80208f50 <___svfprintf_internal_r+0x20cc>
80208f20:	00800044 	movi	r2,1
80208f24:	d8802e15 	stw	r2,184(sp)
80208f28:	003e6606 	br	802088c4 <__reset+0xfa1e88c4>
80208f2c:	00800b44 	movi	r2,45
80208f30:	05adc83a 	sub	r22,zero,r22
80208f34:	d8802305 	stb	r2,140(sp)
80208f38:	003f3b06 	br	80208c28 <__reset+0xfa1e8c28>
80208f3c:	0005883a 	mov	r2,zero
80208f40:	003f4e06 	br	80208c7c <__reset+0xfa1e8c7c>
80208f44:	90a4703a 	and	r18,r18,r2
80208f48:	903f4a26 	beq	r18,zero,80208c74 <__reset+0xfa1e8c74>
80208f4c:	003f4606 	br	80208c68 <__reset+0xfa1e8c68>
80208f50:	d8c02917 	ldw	r3,164(sp)
80208f54:	18c00084 	addi	r3,r3,2
80208f58:	d8c02e15 	stw	r3,184(sp)
80208f5c:	1805883a 	mov	r2,r3
80208f60:	183e580e 	bge	r3,zero,802088c4 <__reset+0xfa1e88c4>
80208f64:	003fd006 	br	80208ea8 <__reset+0xfa1e8ea8>
80208f68:	00800084 	movi	r2,2
80208f6c:	10c5c83a 	sub	r2,r2,r3
80208f70:	003f7506 	br	80208d48 <__reset+0xfa1e8d48>
80208f74:	d8802d17 	ldw	r2,180(sp)
80208f78:	d9002d17 	ldw	r4,180(sp)
80208f7c:	bc400043 	ldbu	r17,1(r23)
80208f80:	10800017 	ldw	r2,0(r2)
80208f84:	582f883a 	mov	r23,r11
80208f88:	d8802915 	stw	r2,164(sp)
80208f8c:	20800104 	addi	r2,r4,4
80208f90:	d9002917 	ldw	r4,164(sp)
80208f94:	d8802d15 	stw	r2,180(sp)
80208f98:	203df00e 	bge	r4,zero,8020875c <__reset+0xfa1e875c>
80208f9c:	8c403fcc 	andi	r17,r17,255
80208fa0:	00bfffc4 	movi	r2,-1
80208fa4:	8c40201c 	xori	r17,r17,128
80208fa8:	d8802915 	stw	r2,164(sp)
80208fac:	8c7fe004 	addi	r17,r17,-128
80208fb0:	00380806 	br	80206fd4 <__reset+0xfa1e6fd4>
80208fb4:	9080004c 	andi	r2,r18,1
80208fb8:	0039883a 	mov	fp,zero
80208fbc:	10000726 	beq	r2,zero,80208fdc <___svfprintf_internal_r+0x2158>
80208fc0:	d8c02817 	ldw	r3,160(sp)
80208fc4:	dc001dc4 	addi	r16,sp,119
80208fc8:	00800c04 	movi	r2,48
80208fcc:	1c07c83a 	sub	r3,r3,r16
80208fd0:	d8801dc5 	stb	r2,119(sp)
80208fd4:	d8c02e15 	stw	r3,184(sp)
80208fd8:	00395206 	br	80207524 <__reset+0xfa1e7524>
80208fdc:	d8002e15 	stw	zero,184(sp)
80208fe0:	dc001e04 	addi	r16,sp,120
80208fe4:	00394f06 	br	80207524 <__reset+0xfa1e7524>
80208fe8:	0005883a 	mov	r2,zero
80208fec:	003e3206 	br	802088b8 <__reset+0xfa1e88b8>
80208ff0:	dd802617 	ldw	r22,152(sp)
80208ff4:	003f0606 	br	80208c10 <__reset+0xfa1e8c10>
80208ff8:	d9c02785 	stb	r7,158(sp)
80208ffc:	003a5106 	br	80207944 <__reset+0xfa1e7944>
80209000:	d9c02785 	stb	r7,158(sp)
80209004:	003a3706 	br	802078e4 <__reset+0xfa1e78e4>
80209008:	0005883a 	mov	r2,zero
8020900c:	003f5e06 	br	80208d88 <__reset+0xfa1e8d88>
80209010:	d9c02785 	stb	r7,158(sp)
80209014:	00391706 	br	80207474 <__reset+0xfa1e7474>
80209018:	d9c02785 	stb	r7,158(sp)
8020901c:	0038e606 	br	802073b8 <__reset+0xfa1e73b8>
80209020:	d8802344 	addi	r2,sp,141
80209024:	003f0806 	br	80208c48 <__reset+0xfa1e8c48>
80209028:	d9c02785 	stb	r7,158(sp)
8020902c:	0038b706 	br	8020730c <__reset+0xfa1e730c>
80209030:	d9c02785 	stb	r7,158(sp)
80209034:	003adc06 	br	80207ba8 <__reset+0xfa1e7ba8>
80209038:	d9403917 	ldw	r5,228(sp)
8020903c:	00800304 	movi	r2,12
80209040:	28800015 	stw	r2,0(r5)
80209044:	00bfffc4 	movi	r2,-1
80209048:	00387806 	br	8020722c <__reset+0xfa1e722c>
8020904c:	d9c02785 	stb	r7,158(sp)
80209050:	003abf06 	br	80207b50 <__reset+0xfa1e7b50>
80209054:	d9c02785 	stb	r7,158(sp)
80209058:	003a9b06 	br	80207ac8 <__reset+0xfa1e7ac8>

8020905c <___vfprintf_internal_r>:
8020905c:	deffb804 	addi	sp,sp,-288
80209060:	dfc04715 	stw	ra,284(sp)
80209064:	ddc04515 	stw	r23,276(sp)
80209068:	dd404315 	stw	r21,268(sp)
8020906c:	d9002c15 	stw	r4,176(sp)
80209070:	282f883a 	mov	r23,r5
80209074:	302b883a 	mov	r21,r6
80209078:	d9c02d15 	stw	r7,180(sp)
8020907c:	df004615 	stw	fp,280(sp)
80209080:	dd804415 	stw	r22,272(sp)
80209084:	dd004215 	stw	r20,264(sp)
80209088:	dcc04115 	stw	r19,260(sp)
8020908c:	dc804015 	stw	r18,256(sp)
80209090:	dc403f15 	stw	r17,252(sp)
80209094:	dc003e15 	stw	r16,248(sp)
80209098:	020de740 	call	8020de74 <_localeconv_r>
8020909c:	10800017 	ldw	r2,0(r2)
802090a0:	1009883a 	mov	r4,r2
802090a4:	d8803415 	stw	r2,208(sp)
802090a8:	0206dec0 	call	80206dec <strlen>
802090ac:	d8803715 	stw	r2,220(sp)
802090b0:	d8802c17 	ldw	r2,176(sp)
802090b4:	10000226 	beq	r2,zero,802090c0 <___vfprintf_internal_r+0x64>
802090b8:	10800e17 	ldw	r2,56(r2)
802090bc:	1000f926 	beq	r2,zero,802094a4 <___vfprintf_internal_r+0x448>
802090c0:	b880030b 	ldhu	r2,12(r23)
802090c4:	10c8000c 	andi	r3,r2,8192
802090c8:	1800061e 	bne	r3,zero,802090e4 <___vfprintf_internal_r+0x88>
802090cc:	b9001917 	ldw	r4,100(r23)
802090d0:	00f7ffc4 	movi	r3,-8193
802090d4:	10880014 	ori	r2,r2,8192
802090d8:	20c6703a 	and	r3,r4,r3
802090dc:	b880030d 	sth	r2,12(r23)
802090e0:	b8c01915 	stw	r3,100(r23)
802090e4:	10c0020c 	andi	r3,r2,8
802090e8:	1800c126 	beq	r3,zero,802093f0 <___vfprintf_internal_r+0x394>
802090ec:	b8c00417 	ldw	r3,16(r23)
802090f0:	1800bf26 	beq	r3,zero,802093f0 <___vfprintf_internal_r+0x394>
802090f4:	1080068c 	andi	r2,r2,26
802090f8:	00c00284 	movi	r3,10
802090fc:	10c0c426 	beq	r2,r3,80209410 <___vfprintf_internal_r+0x3b4>
80209100:	d8c00404 	addi	r3,sp,16
80209104:	052008b4 	movhi	r20,32802
80209108:	d9001e04 	addi	r4,sp,120
8020910c:	a5364f84 	addi	r20,r20,-9922
80209110:	d8c01e15 	stw	r3,120(sp)
80209114:	d8002015 	stw	zero,128(sp)
80209118:	d8001f15 	stw	zero,124(sp)
8020911c:	d8003315 	stw	zero,204(sp)
80209120:	d8003615 	stw	zero,216(sp)
80209124:	d8003815 	stw	zero,224(sp)
80209128:	1811883a 	mov	r8,r3
8020912c:	d8003915 	stw	zero,228(sp)
80209130:	d8003a15 	stw	zero,232(sp)
80209134:	d8002f15 	stw	zero,188(sp)
80209138:	d9002815 	stw	r4,160(sp)
8020913c:	a8800007 	ldb	r2,0(r21)
80209140:	10027b26 	beq	r2,zero,80209b30 <___vfprintf_internal_r+0xad4>
80209144:	00c00944 	movi	r3,37
80209148:	a821883a 	mov	r16,r21
8020914c:	10c0021e 	bne	r2,r3,80209158 <___vfprintf_internal_r+0xfc>
80209150:	00001406 	br	802091a4 <___vfprintf_internal_r+0x148>
80209154:	10c00326 	beq	r2,r3,80209164 <___vfprintf_internal_r+0x108>
80209158:	84000044 	addi	r16,r16,1
8020915c:	80800007 	ldb	r2,0(r16)
80209160:	103ffc1e 	bne	r2,zero,80209154 <__reset+0xfa1e9154>
80209164:	8563c83a 	sub	r17,r16,r21
80209168:	88000e26 	beq	r17,zero,802091a4 <___vfprintf_internal_r+0x148>
8020916c:	d8c02017 	ldw	r3,128(sp)
80209170:	d8801f17 	ldw	r2,124(sp)
80209174:	45400015 	stw	r21,0(r8)
80209178:	1c47883a 	add	r3,r3,r17
8020917c:	10800044 	addi	r2,r2,1
80209180:	d8c02015 	stw	r3,128(sp)
80209184:	44400115 	stw	r17,4(r8)
80209188:	d8801f15 	stw	r2,124(sp)
8020918c:	00c001c4 	movi	r3,7
80209190:	1880a716 	blt	r3,r2,80209430 <___vfprintf_internal_r+0x3d4>
80209194:	42000204 	addi	r8,r8,8
80209198:	d9402f17 	ldw	r5,188(sp)
8020919c:	2c4b883a 	add	r5,r5,r17
802091a0:	d9402f15 	stw	r5,188(sp)
802091a4:	80800007 	ldb	r2,0(r16)
802091a8:	1000a826 	beq	r2,zero,8020944c <___vfprintf_internal_r+0x3f0>
802091ac:	84400047 	ldb	r17,1(r16)
802091b0:	00bfffc4 	movi	r2,-1
802091b4:	85400044 	addi	r21,r16,1
802091b8:	d8002785 	stb	zero,158(sp)
802091bc:	0007883a 	mov	r3,zero
802091c0:	000f883a 	mov	r7,zero
802091c4:	d8802915 	stw	r2,164(sp)
802091c8:	d8003115 	stw	zero,196(sp)
802091cc:	0025883a 	mov	r18,zero
802091d0:	01401604 	movi	r5,88
802091d4:	01800244 	movi	r6,9
802091d8:	02800a84 	movi	r10,42
802091dc:	02401b04 	movi	r9,108
802091e0:	ad400044 	addi	r21,r21,1
802091e4:	88bff804 	addi	r2,r17,-32
802091e8:	28830436 	bltu	r5,r2,80209dfc <___vfprintf_internal_r+0xda0>
802091ec:	100490ba 	slli	r2,r2,2
802091f0:	01200874 	movhi	r4,32801
802091f4:	21248104 	addi	r4,r4,-28156
802091f8:	1105883a 	add	r2,r2,r4
802091fc:	10800017 	ldw	r2,0(r2)
80209200:	1000683a 	jmp	r2
80209204:	80209d1c 	xori	zero,r16,33396
80209208:	80209dfc 	xorhi	zero,r16,33399
8020920c:	80209dfc 	xorhi	zero,r16,33399
80209210:	80209d3c 	xorhi	zero,r16,33396
80209214:	80209dfc 	xorhi	zero,r16,33399
80209218:	80209dfc 	xorhi	zero,r16,33399
8020921c:	80209dfc 	xorhi	zero,r16,33399
80209220:	80209dfc 	xorhi	zero,r16,33399
80209224:	80209dfc 	xorhi	zero,r16,33399
80209228:	80209dfc 	xorhi	zero,r16,33399
8020922c:	802094b0 	cmpltui	zero,r16,33362
80209230:	80209c58 	cmpnei	zero,r16,-32143
80209234:	80209dfc 	xorhi	zero,r16,33399
80209238:	80209378 	rdprs	zero,r16,-32179
8020923c:	802094d8 	cmpnei	zero,r16,-32173
80209240:	80209dfc 	xorhi	zero,r16,33399
80209244:	80209518 	cmpnei	zero,r16,-32172
80209248:	80209524 	muli	zero,r16,-32172
8020924c:	80209524 	muli	zero,r16,-32172
80209250:	80209524 	muli	zero,r16,-32172
80209254:	80209524 	muli	zero,r16,-32172
80209258:	80209524 	muli	zero,r16,-32172
8020925c:	80209524 	muli	zero,r16,-32172
80209260:	80209524 	muli	zero,r16,-32172
80209264:	80209524 	muli	zero,r16,-32172
80209268:	80209524 	muli	zero,r16,-32172
8020926c:	80209dfc 	xorhi	zero,r16,33399
80209270:	80209dfc 	xorhi	zero,r16,33399
80209274:	80209dfc 	xorhi	zero,r16,33399
80209278:	80209dfc 	xorhi	zero,r16,33399
8020927c:	80209dfc 	xorhi	zero,r16,33399
80209280:	80209dfc 	xorhi	zero,r16,33399
80209284:	80209dfc 	xorhi	zero,r16,33399
80209288:	80209dfc 	xorhi	zero,r16,33399
8020928c:	80209dfc 	xorhi	zero,r16,33399
80209290:	80209dfc 	xorhi	zero,r16,33399
80209294:	80209558 	cmpnei	zero,r16,-32171
80209298:	80209614 	ori	zero,r16,33368
8020929c:	80209dfc 	xorhi	zero,r16,33399
802092a0:	80209614 	ori	zero,r16,33368
802092a4:	80209dfc 	xorhi	zero,r16,33399
802092a8:	80209dfc 	xorhi	zero,r16,33399
802092ac:	80209dfc 	xorhi	zero,r16,33399
802092b0:	80209dfc 	xorhi	zero,r16,33399
802092b4:	802096b4 	orhi	zero,r16,33370
802092b8:	80209dfc 	xorhi	zero,r16,33399
802092bc:	80209dfc 	xorhi	zero,r16,33399
802092c0:	802096c0 	call	8802096c <__reset+0x200096c>
802092c4:	80209dfc 	xorhi	zero,r16,33399
802092c8:	80209dfc 	xorhi	zero,r16,33399
802092cc:	80209dfc 	xorhi	zero,r16,33399
802092d0:	80209dfc 	xorhi	zero,r16,33399
802092d4:	80209dfc 	xorhi	zero,r16,33399
802092d8:	80209b38 	rdprs	zero,r16,-32148
802092dc:	80209dfc 	xorhi	zero,r16,33399
802092e0:	80209dfc 	xorhi	zero,r16,33399
802092e4:	80209b98 	cmpnei	zero,r16,-32146
802092e8:	80209dfc 	xorhi	zero,r16,33399
802092ec:	80209dfc 	xorhi	zero,r16,33399
802092f0:	80209dfc 	xorhi	zero,r16,33399
802092f4:	80209dfc 	xorhi	zero,r16,33399
802092f8:	80209dfc 	xorhi	zero,r16,33399
802092fc:	80209dfc 	xorhi	zero,r16,33399
80209300:	80209dfc 	xorhi	zero,r16,33399
80209304:	80209dfc 	xorhi	zero,r16,33399
80209308:	80209dfc 	xorhi	zero,r16,33399
8020930c:	80209dfc 	xorhi	zero,r16,33399
80209310:	80209da8 	cmpgeui	zero,r16,33398
80209314:	80209d48 	cmpgei	zero,r16,-32139
80209318:	80209614 	ori	zero,r16,33368
8020931c:	80209614 	ori	zero,r16,33368
80209320:	80209614 	ori	zero,r16,33368
80209324:	80209d58 	cmpnei	zero,r16,-32139
80209328:	80209d48 	cmpgei	zero,r16,-32139
8020932c:	80209dfc 	xorhi	zero,r16,33399
80209330:	80209dfc 	xorhi	zero,r16,33399
80209334:	80209d64 	muli	zero,r16,-32139
80209338:	80209dfc 	xorhi	zero,r16,33399
8020933c:	80209d74 	orhi	zero,r16,33397
80209340:	80209c48 	cmpgei	zero,r16,-32143
80209344:	80209384 	addi	zero,r16,-32178
80209348:	80209c68 	cmpgeui	zero,r16,33393
8020934c:	80209dfc 	xorhi	zero,r16,33399
80209350:	80209c74 	orhi	zero,r16,33393
80209354:	80209dfc 	xorhi	zero,r16,33399
80209358:	80209cd0 	cmplti	zero,r16,-32141
8020935c:	80209dfc 	xorhi	zero,r16,33399
80209360:	80209dfc 	xorhi	zero,r16,33399
80209364:	80209ce0 	cmpeqi	zero,r16,-32141
80209368:	d9003117 	ldw	r4,196(sp)
8020936c:	d8802d15 	stw	r2,180(sp)
80209370:	0109c83a 	sub	r4,zero,r4
80209374:	d9003115 	stw	r4,196(sp)
80209378:	94800114 	ori	r18,r18,4
8020937c:	ac400007 	ldb	r17,0(r21)
80209380:	003f9706 	br	802091e0 <__reset+0xfa1e91e0>
80209384:	00800c04 	movi	r2,48
80209388:	d9002d17 	ldw	r4,180(sp)
8020938c:	d9402917 	ldw	r5,164(sp)
80209390:	d8802705 	stb	r2,156(sp)
80209394:	00801e04 	movi	r2,120
80209398:	d8802745 	stb	r2,157(sp)
8020939c:	d8002785 	stb	zero,158(sp)
802093a0:	20c00104 	addi	r3,r4,4
802093a4:	24c00017 	ldw	r19,0(r4)
802093a8:	002d883a 	mov	r22,zero
802093ac:	90800094 	ori	r2,r18,2
802093b0:	28029a16 	blt	r5,zero,80209e1c <___vfprintf_internal_r+0xdc0>
802093b4:	00bfdfc4 	movi	r2,-129
802093b8:	90a4703a 	and	r18,r18,r2
802093bc:	d8c02d15 	stw	r3,180(sp)
802093c0:	94800094 	ori	r18,r18,2
802093c4:	9802871e 	bne	r19,zero,80209de4 <___vfprintf_internal_r+0xd88>
802093c8:	00a008b4 	movhi	r2,32802
802093cc:	10b64004 	addi	r2,r2,-9984
802093d0:	d8803915 	stw	r2,228(sp)
802093d4:	04401e04 	movi	r17,120
802093d8:	d8802917 	ldw	r2,164(sp)
802093dc:	0039883a 	mov	fp,zero
802093e0:	1001e926 	beq	r2,zero,80209b88 <___vfprintf_internal_r+0xb2c>
802093e4:	0027883a 	mov	r19,zero
802093e8:	002d883a 	mov	r22,zero
802093ec:	00020506 	br	80209c04 <___vfprintf_internal_r+0xba8>
802093f0:	d9002c17 	ldw	r4,176(sp)
802093f4:	b80b883a 	mov	r5,r23
802093f8:	020b32c0 	call	8020b32c <__swsetup_r>
802093fc:	1005ac1e 	bne	r2,zero,8020aab0 <___vfprintf_internal_r+0x1a54>
80209400:	b880030b 	ldhu	r2,12(r23)
80209404:	00c00284 	movi	r3,10
80209408:	1080068c 	andi	r2,r2,26
8020940c:	10ff3c1e 	bne	r2,r3,80209100 <__reset+0xfa1e9100>
80209410:	b880038f 	ldh	r2,14(r23)
80209414:	103f3a16 	blt	r2,zero,80209100 <__reset+0xfa1e9100>
80209418:	d9c02d17 	ldw	r7,180(sp)
8020941c:	d9002c17 	ldw	r4,176(sp)
80209420:	a80d883a 	mov	r6,r21
80209424:	b80b883a 	mov	r5,r23
80209428:	020b2700 	call	8020b270 <__sbprintf>
8020942c:	00001106 	br	80209474 <___vfprintf_internal_r+0x418>
80209430:	d9002c17 	ldw	r4,176(sp)
80209434:	d9801e04 	addi	r6,sp,120
80209438:	b80b883a 	mov	r5,r23
8020943c:	021191c0 	call	8021191c <__sprint_r>
80209440:	1000081e 	bne	r2,zero,80209464 <___vfprintf_internal_r+0x408>
80209444:	da000404 	addi	r8,sp,16
80209448:	003f5306 	br	80209198 <__reset+0xfa1e9198>
8020944c:	d8802017 	ldw	r2,128(sp)
80209450:	10000426 	beq	r2,zero,80209464 <___vfprintf_internal_r+0x408>
80209454:	d9002c17 	ldw	r4,176(sp)
80209458:	d9801e04 	addi	r6,sp,120
8020945c:	b80b883a 	mov	r5,r23
80209460:	021191c0 	call	8021191c <__sprint_r>
80209464:	b880030b 	ldhu	r2,12(r23)
80209468:	1080100c 	andi	r2,r2,64
8020946c:	1005901e 	bne	r2,zero,8020aab0 <___vfprintf_internal_r+0x1a54>
80209470:	d8802f17 	ldw	r2,188(sp)
80209474:	dfc04717 	ldw	ra,284(sp)
80209478:	df004617 	ldw	fp,280(sp)
8020947c:	ddc04517 	ldw	r23,276(sp)
80209480:	dd804417 	ldw	r22,272(sp)
80209484:	dd404317 	ldw	r21,268(sp)
80209488:	dd004217 	ldw	r20,264(sp)
8020948c:	dcc04117 	ldw	r19,260(sp)
80209490:	dc804017 	ldw	r18,256(sp)
80209494:	dc403f17 	ldw	r17,252(sp)
80209498:	dc003e17 	ldw	r16,248(sp)
8020949c:	dec04804 	addi	sp,sp,288
802094a0:	f800283a 	ret
802094a4:	d9002c17 	ldw	r4,176(sp)
802094a8:	020d3000 	call	8020d300 <__sinit>
802094ac:	003f0406 	br	802090c0 <__reset+0xfa1e90c0>
802094b0:	d8802d17 	ldw	r2,180(sp)
802094b4:	d9002d17 	ldw	r4,180(sp)
802094b8:	10800017 	ldw	r2,0(r2)
802094bc:	d8803115 	stw	r2,196(sp)
802094c0:	20800104 	addi	r2,r4,4
802094c4:	d9003117 	ldw	r4,196(sp)
802094c8:	203fa716 	blt	r4,zero,80209368 <__reset+0xfa1e9368>
802094cc:	d8802d15 	stw	r2,180(sp)
802094d0:	ac400007 	ldb	r17,0(r21)
802094d4:	003f4206 	br	802091e0 <__reset+0xfa1e91e0>
802094d8:	ac400007 	ldb	r17,0(r21)
802094dc:	aac00044 	addi	r11,r21,1
802094e0:	8a872826 	beq	r17,r10,8020b184 <___vfprintf_internal_r+0x2128>
802094e4:	88bff404 	addi	r2,r17,-48
802094e8:	0009883a 	mov	r4,zero
802094ec:	30867d36 	bltu	r6,r2,8020aee4 <___vfprintf_internal_r+0x1e88>
802094f0:	5c400007 	ldb	r17,0(r11)
802094f4:	210002a4 	muli	r4,r4,10
802094f8:	5d400044 	addi	r21,r11,1
802094fc:	a817883a 	mov	r11,r21
80209500:	2089883a 	add	r4,r4,r2
80209504:	88bff404 	addi	r2,r17,-48
80209508:	30bff92e 	bgeu	r6,r2,802094f0 <__reset+0xfa1e94f0>
8020950c:	2005c916 	blt	r4,zero,8020ac34 <___vfprintf_internal_r+0x1bd8>
80209510:	d9002915 	stw	r4,164(sp)
80209514:	003f3306 	br	802091e4 <__reset+0xfa1e91e4>
80209518:	94802014 	ori	r18,r18,128
8020951c:	ac400007 	ldb	r17,0(r21)
80209520:	003f2f06 	br	802091e0 <__reset+0xfa1e91e0>
80209524:	a809883a 	mov	r4,r21
80209528:	d8003115 	stw	zero,196(sp)
8020952c:	88bff404 	addi	r2,r17,-48
80209530:	0017883a 	mov	r11,zero
80209534:	24400007 	ldb	r17,0(r4)
80209538:	5ac002a4 	muli	r11,r11,10
8020953c:	ad400044 	addi	r21,r21,1
80209540:	a809883a 	mov	r4,r21
80209544:	12d7883a 	add	r11,r2,r11
80209548:	88bff404 	addi	r2,r17,-48
8020954c:	30bff92e 	bgeu	r6,r2,80209534 <__reset+0xfa1e9534>
80209550:	dac03115 	stw	r11,196(sp)
80209554:	003f2306 	br	802091e4 <__reset+0xfa1e91e4>
80209558:	18c03fcc 	andi	r3,r3,255
8020955c:	18072b1e 	bne	r3,zero,8020b20c <___vfprintf_internal_r+0x21b0>
80209560:	94800414 	ori	r18,r18,16
80209564:	9080080c 	andi	r2,r18,32
80209568:	10037b26 	beq	r2,zero,8020a358 <___vfprintf_internal_r+0x12fc>
8020956c:	d9402d17 	ldw	r5,180(sp)
80209570:	28800117 	ldw	r2,4(r5)
80209574:	2cc00017 	ldw	r19,0(r5)
80209578:	29400204 	addi	r5,r5,8
8020957c:	d9402d15 	stw	r5,180(sp)
80209580:	102d883a 	mov	r22,r2
80209584:	10044b16 	blt	r2,zero,8020a6b4 <___vfprintf_internal_r+0x1658>
80209588:	d9402917 	ldw	r5,164(sp)
8020958c:	df002783 	ldbu	fp,158(sp)
80209590:	2803bc16 	blt	r5,zero,8020a484 <___vfprintf_internal_r+0x1428>
80209594:	00ffdfc4 	movi	r3,-129
80209598:	9d84b03a 	or	r2,r19,r22
8020959c:	90e4703a 	and	r18,r18,r3
802095a0:	10017726 	beq	r2,zero,80209b80 <___vfprintf_internal_r+0xb24>
802095a4:	b0038326 	beq	r22,zero,8020a3b4 <___vfprintf_internal_r+0x1358>
802095a8:	dc402a15 	stw	r17,168(sp)
802095ac:	dc001e04 	addi	r16,sp,120
802095b0:	b023883a 	mov	r17,r22
802095b4:	402d883a 	mov	r22,r8
802095b8:	9809883a 	mov	r4,r19
802095bc:	880b883a 	mov	r5,r17
802095c0:	01800284 	movi	r6,10
802095c4:	000f883a 	mov	r7,zero
802095c8:	0213d140 	call	80213d14 <__umoddi3>
802095cc:	10800c04 	addi	r2,r2,48
802095d0:	843fffc4 	addi	r16,r16,-1
802095d4:	9809883a 	mov	r4,r19
802095d8:	880b883a 	mov	r5,r17
802095dc:	80800005 	stb	r2,0(r16)
802095e0:	01800284 	movi	r6,10
802095e4:	000f883a 	mov	r7,zero
802095e8:	021379c0 	call	8021379c <__udivdi3>
802095ec:	1027883a 	mov	r19,r2
802095f0:	10c4b03a 	or	r2,r2,r3
802095f4:	1823883a 	mov	r17,r3
802095f8:	103fef1e 	bne	r2,zero,802095b8 <__reset+0xfa1e95b8>
802095fc:	d8c02817 	ldw	r3,160(sp)
80209600:	dc402a17 	ldw	r17,168(sp)
80209604:	b011883a 	mov	r8,r22
80209608:	1c07c83a 	sub	r3,r3,r16
8020960c:	d8c02e15 	stw	r3,184(sp)
80209610:	00005906 	br	80209778 <___vfprintf_internal_r+0x71c>
80209614:	18c03fcc 	andi	r3,r3,255
80209618:	1806fa1e 	bne	r3,zero,8020b204 <___vfprintf_internal_r+0x21a8>
8020961c:	9080020c 	andi	r2,r18,8
80209620:	10048a26 	beq	r2,zero,8020a84c <___vfprintf_internal_r+0x17f0>
80209624:	d8c02d17 	ldw	r3,180(sp)
80209628:	d9002d17 	ldw	r4,180(sp)
8020962c:	d9402d17 	ldw	r5,180(sp)
80209630:	18c00017 	ldw	r3,0(r3)
80209634:	21000117 	ldw	r4,4(r4)
80209638:	29400204 	addi	r5,r5,8
8020963c:	d8c03615 	stw	r3,216(sp)
80209640:	d9003815 	stw	r4,224(sp)
80209644:	d9402d15 	stw	r5,180(sp)
80209648:	d9003617 	ldw	r4,216(sp)
8020964c:	d9403817 	ldw	r5,224(sp)
80209650:	da003d15 	stw	r8,244(sp)
80209654:	04000044 	movi	r16,1
80209658:	02101340 	call	80210134 <__fpclassifyd>
8020965c:	da003d17 	ldw	r8,244(sp)
80209660:	14041f1e 	bne	r2,r16,8020a6e0 <___vfprintf_internal_r+0x1684>
80209664:	d9003617 	ldw	r4,216(sp)
80209668:	d9403817 	ldw	r5,224(sp)
8020966c:	000d883a 	mov	r6,zero
80209670:	000f883a 	mov	r7,zero
80209674:	02156f80 	call	802156f8 <__ledf2>
80209678:	da003d17 	ldw	r8,244(sp)
8020967c:	1005be16 	blt	r2,zero,8020ad78 <___vfprintf_internal_r+0x1d1c>
80209680:	df002783 	ldbu	fp,158(sp)
80209684:	008011c4 	movi	r2,71
80209688:	1445330e 	bge	r2,r17,8020ab58 <___vfprintf_internal_r+0x1afc>
8020968c:	042008b4 	movhi	r16,32802
80209690:	84363804 	addi	r16,r16,-10016
80209694:	00c000c4 	movi	r3,3
80209698:	00bfdfc4 	movi	r2,-129
8020969c:	d8c02a15 	stw	r3,168(sp)
802096a0:	90a4703a 	and	r18,r18,r2
802096a4:	d8c02e15 	stw	r3,184(sp)
802096a8:	d8002915 	stw	zero,164(sp)
802096ac:	d8003215 	stw	zero,200(sp)
802096b0:	00003706 	br	80209790 <___vfprintf_internal_r+0x734>
802096b4:	94800214 	ori	r18,r18,8
802096b8:	ac400007 	ldb	r17,0(r21)
802096bc:	003ec806 	br	802091e0 <__reset+0xfa1e91e0>
802096c0:	18c03fcc 	andi	r3,r3,255
802096c4:	1806db1e 	bne	r3,zero,8020b234 <___vfprintf_internal_r+0x21d8>
802096c8:	94800414 	ori	r18,r18,16
802096cc:	9080080c 	andi	r2,r18,32
802096d0:	1002d826 	beq	r2,zero,8020a234 <___vfprintf_internal_r+0x11d8>
802096d4:	d9402d17 	ldw	r5,180(sp)
802096d8:	d8c02917 	ldw	r3,164(sp)
802096dc:	d8002785 	stb	zero,158(sp)
802096e0:	28800204 	addi	r2,r5,8
802096e4:	2cc00017 	ldw	r19,0(r5)
802096e8:	2d800117 	ldw	r22,4(r5)
802096ec:	18048f16 	blt	r3,zero,8020a92c <___vfprintf_internal_r+0x18d0>
802096f0:	013fdfc4 	movi	r4,-129
802096f4:	9d86b03a 	or	r3,r19,r22
802096f8:	d8802d15 	stw	r2,180(sp)
802096fc:	9124703a 	and	r18,r18,r4
80209700:	1802d91e 	bne	r3,zero,8020a268 <___vfprintf_internal_r+0x120c>
80209704:	d8c02917 	ldw	r3,164(sp)
80209708:	0039883a 	mov	fp,zero
8020970c:	1805c326 	beq	r3,zero,8020ae1c <___vfprintf_internal_r+0x1dc0>
80209710:	0027883a 	mov	r19,zero
80209714:	002d883a 	mov	r22,zero
80209718:	dc001e04 	addi	r16,sp,120
8020971c:	9806d0fa 	srli	r3,r19,3
80209720:	b008977a 	slli	r4,r22,29
80209724:	b02cd0fa 	srli	r22,r22,3
80209728:	9cc001cc 	andi	r19,r19,7
8020972c:	98800c04 	addi	r2,r19,48
80209730:	843fffc4 	addi	r16,r16,-1
80209734:	20e6b03a 	or	r19,r4,r3
80209738:	80800005 	stb	r2,0(r16)
8020973c:	9d86b03a 	or	r3,r19,r22
80209740:	183ff61e 	bne	r3,zero,8020971c <__reset+0xfa1e971c>
80209744:	90c0004c 	andi	r3,r18,1
80209748:	18013b26 	beq	r3,zero,80209c38 <___vfprintf_internal_r+0xbdc>
8020974c:	10803fcc 	andi	r2,r2,255
80209750:	1080201c 	xori	r2,r2,128
80209754:	10bfe004 	addi	r2,r2,-128
80209758:	00c00c04 	movi	r3,48
8020975c:	10c13626 	beq	r2,r3,80209c38 <___vfprintf_internal_r+0xbdc>
80209760:	80ffffc5 	stb	r3,-1(r16)
80209764:	d8c02817 	ldw	r3,160(sp)
80209768:	80bfffc4 	addi	r2,r16,-1
8020976c:	1021883a 	mov	r16,r2
80209770:	1887c83a 	sub	r3,r3,r2
80209774:	d8c02e15 	stw	r3,184(sp)
80209778:	d8802e17 	ldw	r2,184(sp)
8020977c:	d9002917 	ldw	r4,164(sp)
80209780:	1100010e 	bge	r2,r4,80209788 <___vfprintf_internal_r+0x72c>
80209784:	2005883a 	mov	r2,r4
80209788:	d8802a15 	stw	r2,168(sp)
8020978c:	d8003215 	stw	zero,200(sp)
80209790:	e7003fcc 	andi	fp,fp,255
80209794:	e700201c 	xori	fp,fp,128
80209798:	e73fe004 	addi	fp,fp,-128
8020979c:	e0000326 	beq	fp,zero,802097ac <___vfprintf_internal_r+0x750>
802097a0:	d8c02a17 	ldw	r3,168(sp)
802097a4:	18c00044 	addi	r3,r3,1
802097a8:	d8c02a15 	stw	r3,168(sp)
802097ac:	90c0008c 	andi	r3,r18,2
802097b0:	d8c02b15 	stw	r3,172(sp)
802097b4:	18000326 	beq	r3,zero,802097c4 <___vfprintf_internal_r+0x768>
802097b8:	d8c02a17 	ldw	r3,168(sp)
802097bc:	18c00084 	addi	r3,r3,2
802097c0:	d8c02a15 	stw	r3,168(sp)
802097c4:	90c0210c 	andi	r3,r18,132
802097c8:	d8c03015 	stw	r3,192(sp)
802097cc:	1801a31e 	bne	r3,zero,80209e5c <___vfprintf_internal_r+0xe00>
802097d0:	d9003117 	ldw	r4,196(sp)
802097d4:	d8c02a17 	ldw	r3,168(sp)
802097d8:	20e7c83a 	sub	r19,r4,r3
802097dc:	04c19f0e 	bge	zero,r19,80209e5c <___vfprintf_internal_r+0xe00>
802097e0:	02400404 	movi	r9,16
802097e4:	d8c02017 	ldw	r3,128(sp)
802097e8:	d8801f17 	ldw	r2,124(sp)
802097ec:	4cc50d0e 	bge	r9,r19,8020ac24 <___vfprintf_internal_r+0x1bc8>
802097f0:	016008b4 	movhi	r5,32802
802097f4:	29765384 	addi	r5,r5,-9906
802097f8:	dc403b15 	stw	r17,236(sp)
802097fc:	d9403515 	stw	r5,212(sp)
80209800:	9823883a 	mov	r17,r19
80209804:	482d883a 	mov	r22,r9
80209808:	9027883a 	mov	r19,r18
8020980c:	070001c4 	movi	fp,7
80209810:	8025883a 	mov	r18,r16
80209814:	dc002c17 	ldw	r16,176(sp)
80209818:	00000306 	br	80209828 <___vfprintf_internal_r+0x7cc>
8020981c:	8c7ffc04 	addi	r17,r17,-16
80209820:	42000204 	addi	r8,r8,8
80209824:	b440130e 	bge	r22,r17,80209874 <___vfprintf_internal_r+0x818>
80209828:	012008b4 	movhi	r4,32802
8020982c:	18c00404 	addi	r3,r3,16
80209830:	10800044 	addi	r2,r2,1
80209834:	21365384 	addi	r4,r4,-9906
80209838:	41000015 	stw	r4,0(r8)
8020983c:	45800115 	stw	r22,4(r8)
80209840:	d8c02015 	stw	r3,128(sp)
80209844:	d8801f15 	stw	r2,124(sp)
80209848:	e0bff40e 	bge	fp,r2,8020981c <__reset+0xfa1e981c>
8020984c:	d9801e04 	addi	r6,sp,120
80209850:	b80b883a 	mov	r5,r23
80209854:	8009883a 	mov	r4,r16
80209858:	021191c0 	call	8021191c <__sprint_r>
8020985c:	103f011e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
80209860:	8c7ffc04 	addi	r17,r17,-16
80209864:	d8c02017 	ldw	r3,128(sp)
80209868:	d8801f17 	ldw	r2,124(sp)
8020986c:	da000404 	addi	r8,sp,16
80209870:	b47fed16 	blt	r22,r17,80209828 <__reset+0xfa1e9828>
80209874:	9021883a 	mov	r16,r18
80209878:	9825883a 	mov	r18,r19
8020987c:	8827883a 	mov	r19,r17
80209880:	dc403b17 	ldw	r17,236(sp)
80209884:	d9403517 	ldw	r5,212(sp)
80209888:	98c7883a 	add	r3,r19,r3
8020988c:	10800044 	addi	r2,r2,1
80209890:	41400015 	stw	r5,0(r8)
80209894:	44c00115 	stw	r19,4(r8)
80209898:	d8c02015 	stw	r3,128(sp)
8020989c:	d8801f15 	stw	r2,124(sp)
802098a0:	010001c4 	movi	r4,7
802098a4:	2082a316 	blt	r4,r2,8020a334 <___vfprintf_internal_r+0x12d8>
802098a8:	df002787 	ldb	fp,158(sp)
802098ac:	42000204 	addi	r8,r8,8
802098b0:	e0000c26 	beq	fp,zero,802098e4 <___vfprintf_internal_r+0x888>
802098b4:	d8801f17 	ldw	r2,124(sp)
802098b8:	d9002784 	addi	r4,sp,158
802098bc:	18c00044 	addi	r3,r3,1
802098c0:	10800044 	addi	r2,r2,1
802098c4:	41000015 	stw	r4,0(r8)
802098c8:	01000044 	movi	r4,1
802098cc:	41000115 	stw	r4,4(r8)
802098d0:	d8c02015 	stw	r3,128(sp)
802098d4:	d8801f15 	stw	r2,124(sp)
802098d8:	010001c4 	movi	r4,7
802098dc:	20823c16 	blt	r4,r2,8020a1d0 <___vfprintf_internal_r+0x1174>
802098e0:	42000204 	addi	r8,r8,8
802098e4:	d8802b17 	ldw	r2,172(sp)
802098e8:	10000c26 	beq	r2,zero,8020991c <___vfprintf_internal_r+0x8c0>
802098ec:	d8801f17 	ldw	r2,124(sp)
802098f0:	d9002704 	addi	r4,sp,156
802098f4:	18c00084 	addi	r3,r3,2
802098f8:	10800044 	addi	r2,r2,1
802098fc:	41000015 	stw	r4,0(r8)
80209900:	01000084 	movi	r4,2
80209904:	41000115 	stw	r4,4(r8)
80209908:	d8c02015 	stw	r3,128(sp)
8020990c:	d8801f15 	stw	r2,124(sp)
80209910:	010001c4 	movi	r4,7
80209914:	20823616 	blt	r4,r2,8020a1f0 <___vfprintf_internal_r+0x1194>
80209918:	42000204 	addi	r8,r8,8
8020991c:	d9003017 	ldw	r4,192(sp)
80209920:	00802004 	movi	r2,128
80209924:	20819926 	beq	r4,r2,80209f8c <___vfprintf_internal_r+0xf30>
80209928:	d9402917 	ldw	r5,164(sp)
8020992c:	d8802e17 	ldw	r2,184(sp)
80209930:	28adc83a 	sub	r22,r5,r2
80209934:	0580310e 	bge	zero,r22,802099fc <___vfprintf_internal_r+0x9a0>
80209938:	07000404 	movi	fp,16
8020993c:	d8801f17 	ldw	r2,124(sp)
80209940:	e584140e 	bge	fp,r22,8020a994 <___vfprintf_internal_r+0x1938>
80209944:	016008b4 	movhi	r5,32802
80209948:	29764f84 	addi	r5,r5,-9922
8020994c:	dc402915 	stw	r17,164(sp)
80209950:	d9402b15 	stw	r5,172(sp)
80209954:	b023883a 	mov	r17,r22
80209958:	04c001c4 	movi	r19,7
8020995c:	a82d883a 	mov	r22,r21
80209960:	902b883a 	mov	r21,r18
80209964:	8025883a 	mov	r18,r16
80209968:	dc002c17 	ldw	r16,176(sp)
8020996c:	00000306 	br	8020997c <___vfprintf_internal_r+0x920>
80209970:	8c7ffc04 	addi	r17,r17,-16
80209974:	42000204 	addi	r8,r8,8
80209978:	e440110e 	bge	fp,r17,802099c0 <___vfprintf_internal_r+0x964>
8020997c:	18c00404 	addi	r3,r3,16
80209980:	10800044 	addi	r2,r2,1
80209984:	45000015 	stw	r20,0(r8)
80209988:	47000115 	stw	fp,4(r8)
8020998c:	d8c02015 	stw	r3,128(sp)
80209990:	d8801f15 	stw	r2,124(sp)
80209994:	98bff60e 	bge	r19,r2,80209970 <__reset+0xfa1e9970>
80209998:	d9801e04 	addi	r6,sp,120
8020999c:	b80b883a 	mov	r5,r23
802099a0:	8009883a 	mov	r4,r16
802099a4:	021191c0 	call	8021191c <__sprint_r>
802099a8:	103eae1e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
802099ac:	8c7ffc04 	addi	r17,r17,-16
802099b0:	d8c02017 	ldw	r3,128(sp)
802099b4:	d8801f17 	ldw	r2,124(sp)
802099b8:	da000404 	addi	r8,sp,16
802099bc:	e47fef16 	blt	fp,r17,8020997c <__reset+0xfa1e997c>
802099c0:	9021883a 	mov	r16,r18
802099c4:	a825883a 	mov	r18,r21
802099c8:	b02b883a 	mov	r21,r22
802099cc:	882d883a 	mov	r22,r17
802099d0:	dc402917 	ldw	r17,164(sp)
802099d4:	d9002b17 	ldw	r4,172(sp)
802099d8:	1d87883a 	add	r3,r3,r22
802099dc:	10800044 	addi	r2,r2,1
802099e0:	41000015 	stw	r4,0(r8)
802099e4:	45800115 	stw	r22,4(r8)
802099e8:	d8c02015 	stw	r3,128(sp)
802099ec:	d8801f15 	stw	r2,124(sp)
802099f0:	010001c4 	movi	r4,7
802099f4:	2081ee16 	blt	r4,r2,8020a1b0 <___vfprintf_internal_r+0x1154>
802099f8:	42000204 	addi	r8,r8,8
802099fc:	9080400c 	andi	r2,r18,256
80209a00:	1001181e 	bne	r2,zero,80209e64 <___vfprintf_internal_r+0xe08>
80209a04:	d9402e17 	ldw	r5,184(sp)
80209a08:	d8801f17 	ldw	r2,124(sp)
80209a0c:	44000015 	stw	r16,0(r8)
80209a10:	1947883a 	add	r3,r3,r5
80209a14:	10800044 	addi	r2,r2,1
80209a18:	41400115 	stw	r5,4(r8)
80209a1c:	d8c02015 	stw	r3,128(sp)
80209a20:	d8801f15 	stw	r2,124(sp)
80209a24:	010001c4 	movi	r4,7
80209a28:	2081d316 	blt	r4,r2,8020a178 <___vfprintf_internal_r+0x111c>
80209a2c:	42000204 	addi	r8,r8,8
80209a30:	9480010c 	andi	r18,r18,4
80209a34:	90003226 	beq	r18,zero,80209b00 <___vfprintf_internal_r+0xaa4>
80209a38:	d9403117 	ldw	r5,196(sp)
80209a3c:	d8802a17 	ldw	r2,168(sp)
80209a40:	28a1c83a 	sub	r16,r5,r2
80209a44:	04002e0e 	bge	zero,r16,80209b00 <___vfprintf_internal_r+0xaa4>
80209a48:	04400404 	movi	r17,16
80209a4c:	d8801f17 	ldw	r2,124(sp)
80209a50:	8c04a20e 	bge	r17,r16,8020acdc <___vfprintf_internal_r+0x1c80>
80209a54:	016008b4 	movhi	r5,32802
80209a58:	29765384 	addi	r5,r5,-9906
80209a5c:	d9403515 	stw	r5,212(sp)
80209a60:	048001c4 	movi	r18,7
80209a64:	dcc02c17 	ldw	r19,176(sp)
80209a68:	00000306 	br	80209a78 <___vfprintf_internal_r+0xa1c>
80209a6c:	843ffc04 	addi	r16,r16,-16
80209a70:	42000204 	addi	r8,r8,8
80209a74:	8c00130e 	bge	r17,r16,80209ac4 <___vfprintf_internal_r+0xa68>
80209a78:	012008b4 	movhi	r4,32802
80209a7c:	18c00404 	addi	r3,r3,16
80209a80:	10800044 	addi	r2,r2,1
80209a84:	21365384 	addi	r4,r4,-9906
80209a88:	41000015 	stw	r4,0(r8)
80209a8c:	44400115 	stw	r17,4(r8)
80209a90:	d8c02015 	stw	r3,128(sp)
80209a94:	d8801f15 	stw	r2,124(sp)
80209a98:	90bff40e 	bge	r18,r2,80209a6c <__reset+0xfa1e9a6c>
80209a9c:	d9801e04 	addi	r6,sp,120
80209aa0:	b80b883a 	mov	r5,r23
80209aa4:	9809883a 	mov	r4,r19
80209aa8:	021191c0 	call	8021191c <__sprint_r>
80209aac:	103e6d1e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
80209ab0:	843ffc04 	addi	r16,r16,-16
80209ab4:	d8c02017 	ldw	r3,128(sp)
80209ab8:	d8801f17 	ldw	r2,124(sp)
80209abc:	da000404 	addi	r8,sp,16
80209ac0:	8c3fed16 	blt	r17,r16,80209a78 <__reset+0xfa1e9a78>
80209ac4:	d9403517 	ldw	r5,212(sp)
80209ac8:	1c07883a 	add	r3,r3,r16
80209acc:	10800044 	addi	r2,r2,1
80209ad0:	41400015 	stw	r5,0(r8)
80209ad4:	44000115 	stw	r16,4(r8)
80209ad8:	d8c02015 	stw	r3,128(sp)
80209adc:	d8801f15 	stw	r2,124(sp)
80209ae0:	010001c4 	movi	r4,7
80209ae4:	2080060e 	bge	r4,r2,80209b00 <___vfprintf_internal_r+0xaa4>
80209ae8:	d9002c17 	ldw	r4,176(sp)
80209aec:	d9801e04 	addi	r6,sp,120
80209af0:	b80b883a 	mov	r5,r23
80209af4:	021191c0 	call	8021191c <__sprint_r>
80209af8:	103e5a1e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
80209afc:	d8c02017 	ldw	r3,128(sp)
80209b00:	d8803117 	ldw	r2,196(sp)
80209b04:	d9002a17 	ldw	r4,168(sp)
80209b08:	1100010e 	bge	r2,r4,80209b10 <___vfprintf_internal_r+0xab4>
80209b0c:	2005883a 	mov	r2,r4
80209b10:	d9402f17 	ldw	r5,188(sp)
80209b14:	288b883a 	add	r5,r5,r2
80209b18:	d9402f15 	stw	r5,188(sp)
80209b1c:	18019e1e 	bne	r3,zero,8020a198 <___vfprintf_internal_r+0x113c>
80209b20:	a8800007 	ldb	r2,0(r21)
80209b24:	d8001f15 	stw	zero,124(sp)
80209b28:	da000404 	addi	r8,sp,16
80209b2c:	103d851e 	bne	r2,zero,80209144 <__reset+0xfa1e9144>
80209b30:	a821883a 	mov	r16,r21
80209b34:	003d9b06 	br	802091a4 <__reset+0xfa1e91a4>
80209b38:	18c03fcc 	andi	r3,r3,255
80209b3c:	1805c11e 	bne	r3,zero,8020b244 <___vfprintf_internal_r+0x21e8>
80209b40:	94800414 	ori	r18,r18,16
80209b44:	9080080c 	andi	r2,r18,32
80209b48:	10020c26 	beq	r2,zero,8020a37c <___vfprintf_internal_r+0x1320>
80209b4c:	d8802d17 	ldw	r2,180(sp)
80209b50:	d9002917 	ldw	r4,164(sp)
80209b54:	d8002785 	stb	zero,158(sp)
80209b58:	10c00204 	addi	r3,r2,8
80209b5c:	14c00017 	ldw	r19,0(r2)
80209b60:	15800117 	ldw	r22,4(r2)
80209b64:	20040f16 	blt	r4,zero,8020aba4 <___vfprintf_internal_r+0x1b48>
80209b68:	013fdfc4 	movi	r4,-129
80209b6c:	9d84b03a 	or	r2,r19,r22
80209b70:	d8c02d15 	stw	r3,180(sp)
80209b74:	9124703a 	and	r18,r18,r4
80209b78:	0039883a 	mov	fp,zero
80209b7c:	103e891e 	bne	r2,zero,802095a4 <__reset+0xfa1e95a4>
80209b80:	d9002917 	ldw	r4,164(sp)
80209b84:	2002c11e 	bne	r4,zero,8020a68c <___vfprintf_internal_r+0x1630>
80209b88:	d8002915 	stw	zero,164(sp)
80209b8c:	d8002e15 	stw	zero,184(sp)
80209b90:	dc001e04 	addi	r16,sp,120
80209b94:	003ef806 	br	80209778 <__reset+0xfa1e9778>
80209b98:	18c03fcc 	andi	r3,r3,255
80209b9c:	18059d1e 	bne	r3,zero,8020b214 <___vfprintf_internal_r+0x21b8>
80209ba0:	016008b4 	movhi	r5,32802
80209ba4:	29763b04 	addi	r5,r5,-10004
80209ba8:	d9403915 	stw	r5,228(sp)
80209bac:	9080080c 	andi	r2,r18,32
80209bb0:	10005226 	beq	r2,zero,80209cfc <___vfprintf_internal_r+0xca0>
80209bb4:	d8802d17 	ldw	r2,180(sp)
80209bb8:	14c00017 	ldw	r19,0(r2)
80209bbc:	15800117 	ldw	r22,4(r2)
80209bc0:	10800204 	addi	r2,r2,8
80209bc4:	d8802d15 	stw	r2,180(sp)
80209bc8:	9080004c 	andi	r2,r18,1
80209bcc:	10019026 	beq	r2,zero,8020a210 <___vfprintf_internal_r+0x11b4>
80209bd0:	9d84b03a 	or	r2,r19,r22
80209bd4:	10036926 	beq	r2,zero,8020a97c <___vfprintf_internal_r+0x1920>
80209bd8:	d8c02917 	ldw	r3,164(sp)
80209bdc:	00800c04 	movi	r2,48
80209be0:	d8802705 	stb	r2,156(sp)
80209be4:	dc402745 	stb	r17,157(sp)
80209be8:	d8002785 	stb	zero,158(sp)
80209bec:	90800094 	ori	r2,r18,2
80209bf0:	18045d16 	blt	r3,zero,8020ad68 <___vfprintf_internal_r+0x1d0c>
80209bf4:	00bfdfc4 	movi	r2,-129
80209bf8:	90a4703a 	and	r18,r18,r2
80209bfc:	94800094 	ori	r18,r18,2
80209c00:	0039883a 	mov	fp,zero
80209c04:	d9003917 	ldw	r4,228(sp)
80209c08:	dc001e04 	addi	r16,sp,120
80209c0c:	988003cc 	andi	r2,r19,15
80209c10:	b006973a 	slli	r3,r22,28
80209c14:	2085883a 	add	r2,r4,r2
80209c18:	9826d13a 	srli	r19,r19,4
80209c1c:	10800003 	ldbu	r2,0(r2)
80209c20:	b02cd13a 	srli	r22,r22,4
80209c24:	843fffc4 	addi	r16,r16,-1
80209c28:	1ce6b03a 	or	r19,r3,r19
80209c2c:	80800005 	stb	r2,0(r16)
80209c30:	9d84b03a 	or	r2,r19,r22
80209c34:	103ff51e 	bne	r2,zero,80209c0c <__reset+0xfa1e9c0c>
80209c38:	d8c02817 	ldw	r3,160(sp)
80209c3c:	1c07c83a 	sub	r3,r3,r16
80209c40:	d8c02e15 	stw	r3,184(sp)
80209c44:	003ecc06 	br	80209778 <__reset+0xfa1e9778>
80209c48:	18c03fcc 	andi	r3,r3,255
80209c4c:	183e9f26 	beq	r3,zero,802096cc <__reset+0xfa1e96cc>
80209c50:	d9c02785 	stb	r7,158(sp)
80209c54:	003e9d06 	br	802096cc <__reset+0xfa1e96cc>
80209c58:	00c00044 	movi	r3,1
80209c5c:	01c00ac4 	movi	r7,43
80209c60:	ac400007 	ldb	r17,0(r21)
80209c64:	003d5e06 	br	802091e0 <__reset+0xfa1e91e0>
80209c68:	94800814 	ori	r18,r18,32
80209c6c:	ac400007 	ldb	r17,0(r21)
80209c70:	003d5b06 	br	802091e0 <__reset+0xfa1e91e0>
80209c74:	d8c02d17 	ldw	r3,180(sp)
80209c78:	d8002785 	stb	zero,158(sp)
80209c7c:	1c000017 	ldw	r16,0(r3)
80209c80:	1cc00104 	addi	r19,r3,4
80209c84:	80041926 	beq	r16,zero,8020acec <___vfprintf_internal_r+0x1c90>
80209c88:	d9002917 	ldw	r4,164(sp)
80209c8c:	2003d016 	blt	r4,zero,8020abd0 <___vfprintf_internal_r+0x1b74>
80209c90:	200d883a 	mov	r6,r4
80209c94:	000b883a 	mov	r5,zero
80209c98:	8009883a 	mov	r4,r16
80209c9c:	da003d15 	stw	r8,244(sp)
80209ca0:	020e86c0 	call	8020e86c <memchr>
80209ca4:	da003d17 	ldw	r8,244(sp)
80209ca8:	10045426 	beq	r2,zero,8020adfc <___vfprintf_internal_r+0x1da0>
80209cac:	1405c83a 	sub	r2,r2,r16
80209cb0:	d8802e15 	stw	r2,184(sp)
80209cb4:	1003cc16 	blt	r2,zero,8020abe8 <___vfprintf_internal_r+0x1b8c>
80209cb8:	df002783 	ldbu	fp,158(sp)
80209cbc:	d8802a15 	stw	r2,168(sp)
80209cc0:	dcc02d15 	stw	r19,180(sp)
80209cc4:	d8002915 	stw	zero,164(sp)
80209cc8:	d8003215 	stw	zero,200(sp)
80209ccc:	003eb006 	br	80209790 <__reset+0xfa1e9790>
80209cd0:	18c03fcc 	andi	r3,r3,255
80209cd4:	183f9b26 	beq	r3,zero,80209b44 <__reset+0xfa1e9b44>
80209cd8:	d9c02785 	stb	r7,158(sp)
80209cdc:	003f9906 	br	80209b44 <__reset+0xfa1e9b44>
80209ce0:	18c03fcc 	andi	r3,r3,255
80209ce4:	1805551e 	bne	r3,zero,8020b23c <___vfprintf_internal_r+0x21e0>
80209ce8:	016008b4 	movhi	r5,32802
80209cec:	29764004 	addi	r5,r5,-9984
80209cf0:	d9403915 	stw	r5,228(sp)
80209cf4:	9080080c 	andi	r2,r18,32
80209cf8:	103fae1e 	bne	r2,zero,80209bb4 <__reset+0xfa1e9bb4>
80209cfc:	9080040c 	andi	r2,r18,16
80209d00:	1002de26 	beq	r2,zero,8020a87c <___vfprintf_internal_r+0x1820>
80209d04:	d8c02d17 	ldw	r3,180(sp)
80209d08:	002d883a 	mov	r22,zero
80209d0c:	1cc00017 	ldw	r19,0(r3)
80209d10:	18c00104 	addi	r3,r3,4
80209d14:	d8c02d15 	stw	r3,180(sp)
80209d18:	003fab06 	br	80209bc8 <__reset+0xfa1e9bc8>
80209d1c:	38803fcc 	andi	r2,r7,255
80209d20:	1080201c 	xori	r2,r2,128
80209d24:	10bfe004 	addi	r2,r2,-128
80209d28:	1002d21e 	bne	r2,zero,8020a874 <___vfprintf_internal_r+0x1818>
80209d2c:	00c00044 	movi	r3,1
80209d30:	01c00804 	movi	r7,32
80209d34:	ac400007 	ldb	r17,0(r21)
80209d38:	003d2906 	br	802091e0 <__reset+0xfa1e91e0>
80209d3c:	94800054 	ori	r18,r18,1
80209d40:	ac400007 	ldb	r17,0(r21)
80209d44:	003d2606 	br	802091e0 <__reset+0xfa1e91e0>
80209d48:	18c03fcc 	andi	r3,r3,255
80209d4c:	183e0526 	beq	r3,zero,80209564 <__reset+0xfa1e9564>
80209d50:	d9c02785 	stb	r7,158(sp)
80209d54:	003e0306 	br	80209564 <__reset+0xfa1e9564>
80209d58:	94801014 	ori	r18,r18,64
80209d5c:	ac400007 	ldb	r17,0(r21)
80209d60:	003d1f06 	br	802091e0 <__reset+0xfa1e91e0>
80209d64:	ac400007 	ldb	r17,0(r21)
80209d68:	8a438726 	beq	r17,r9,8020ab88 <___vfprintf_internal_r+0x1b2c>
80209d6c:	94800414 	ori	r18,r18,16
80209d70:	003d1b06 	br	802091e0 <__reset+0xfa1e91e0>
80209d74:	18c03fcc 	andi	r3,r3,255
80209d78:	1805341e 	bne	r3,zero,8020b24c <___vfprintf_internal_r+0x21f0>
80209d7c:	9080080c 	andi	r2,r18,32
80209d80:	1002cd26 	beq	r2,zero,8020a8b8 <___vfprintf_internal_r+0x185c>
80209d84:	d9402d17 	ldw	r5,180(sp)
80209d88:	d9002f17 	ldw	r4,188(sp)
80209d8c:	28800017 	ldw	r2,0(r5)
80209d90:	2007d7fa 	srai	r3,r4,31
80209d94:	29400104 	addi	r5,r5,4
80209d98:	d9402d15 	stw	r5,180(sp)
80209d9c:	11000015 	stw	r4,0(r2)
80209da0:	10c00115 	stw	r3,4(r2)
80209da4:	003ce506 	br	8020913c <__reset+0xfa1e913c>
80209da8:	d8c02d17 	ldw	r3,180(sp)
80209dac:	d9002d17 	ldw	r4,180(sp)
80209db0:	d8002785 	stb	zero,158(sp)
80209db4:	18800017 	ldw	r2,0(r3)
80209db8:	21000104 	addi	r4,r4,4
80209dbc:	00c00044 	movi	r3,1
80209dc0:	d8c02a15 	stw	r3,168(sp)
80209dc4:	d8801405 	stb	r2,80(sp)
80209dc8:	d9002d15 	stw	r4,180(sp)
80209dcc:	d8c02e15 	stw	r3,184(sp)
80209dd0:	d8002915 	stw	zero,164(sp)
80209dd4:	d8003215 	stw	zero,200(sp)
80209dd8:	dc001404 	addi	r16,sp,80
80209ddc:	0039883a 	mov	fp,zero
80209de0:	003e7206 	br	802097ac <__reset+0xfa1e97ac>
80209de4:	012008b4 	movhi	r4,32802
80209de8:	21364004 	addi	r4,r4,-9984
80209dec:	0039883a 	mov	fp,zero
80209df0:	d9003915 	stw	r4,228(sp)
80209df4:	04401e04 	movi	r17,120
80209df8:	003f8206 	br	80209c04 <__reset+0xfa1e9c04>
80209dfc:	18c03fcc 	andi	r3,r3,255
80209e00:	1805061e 	bne	r3,zero,8020b21c <___vfprintf_internal_r+0x21c0>
80209e04:	883d9126 	beq	r17,zero,8020944c <__reset+0xfa1e944c>
80209e08:	00c00044 	movi	r3,1
80209e0c:	d8c02a15 	stw	r3,168(sp)
80209e10:	dc401405 	stb	r17,80(sp)
80209e14:	d8002785 	stb	zero,158(sp)
80209e18:	003fec06 	br	80209dcc <__reset+0xfa1e9dcc>
80209e1c:	016008b4 	movhi	r5,32802
80209e20:	29764004 	addi	r5,r5,-9984
80209e24:	d9403915 	stw	r5,228(sp)
80209e28:	d8c02d15 	stw	r3,180(sp)
80209e2c:	1025883a 	mov	r18,r2
80209e30:	04401e04 	movi	r17,120
80209e34:	9d84b03a 	or	r2,r19,r22
80209e38:	1000fc1e 	bne	r2,zero,8020a22c <___vfprintf_internal_r+0x11d0>
80209e3c:	0039883a 	mov	fp,zero
80209e40:	00800084 	movi	r2,2
80209e44:	10803fcc 	andi	r2,r2,255
80209e48:	00c00044 	movi	r3,1
80209e4c:	10c20f26 	beq	r2,r3,8020a68c <___vfprintf_internal_r+0x1630>
80209e50:	00c00084 	movi	r3,2
80209e54:	10fd6326 	beq	r2,r3,802093e4 <__reset+0xfa1e93e4>
80209e58:	003e2d06 	br	80209710 <__reset+0xfa1e9710>
80209e5c:	d8c02017 	ldw	r3,128(sp)
80209e60:	003e9306 	br	802098b0 <__reset+0xfa1e98b0>
80209e64:	00801944 	movi	r2,101
80209e68:	14407e0e 	bge	r2,r17,8020a064 <___vfprintf_internal_r+0x1008>
80209e6c:	d9003617 	ldw	r4,216(sp)
80209e70:	d9403817 	ldw	r5,224(sp)
80209e74:	000d883a 	mov	r6,zero
80209e78:	000f883a 	mov	r7,zero
80209e7c:	d8c03c15 	stw	r3,240(sp)
80209e80:	da003d15 	stw	r8,244(sp)
80209e84:	02155940 	call	80215594 <__eqdf2>
80209e88:	d8c03c17 	ldw	r3,240(sp)
80209e8c:	da003d17 	ldw	r8,244(sp)
80209e90:	1000f71e 	bne	r2,zero,8020a270 <___vfprintf_internal_r+0x1214>
80209e94:	d8801f17 	ldw	r2,124(sp)
80209e98:	012008b4 	movhi	r4,32802
80209e9c:	21364704 	addi	r4,r4,-9956
80209ea0:	18c00044 	addi	r3,r3,1
80209ea4:	10800044 	addi	r2,r2,1
80209ea8:	41000015 	stw	r4,0(r8)
80209eac:	01000044 	movi	r4,1
80209eb0:	41000115 	stw	r4,4(r8)
80209eb4:	d8c02015 	stw	r3,128(sp)
80209eb8:	d8801f15 	stw	r2,124(sp)
80209ebc:	010001c4 	movi	r4,7
80209ec0:	2082b816 	blt	r4,r2,8020a9a4 <___vfprintf_internal_r+0x1948>
80209ec4:	42000204 	addi	r8,r8,8
80209ec8:	d8802617 	ldw	r2,152(sp)
80209ecc:	d9403317 	ldw	r5,204(sp)
80209ed0:	11400216 	blt	r2,r5,80209edc <___vfprintf_internal_r+0xe80>
80209ed4:	9080004c 	andi	r2,r18,1
80209ed8:	103ed526 	beq	r2,zero,80209a30 <__reset+0xfa1e9a30>
80209edc:	d8803717 	ldw	r2,220(sp)
80209ee0:	d9003417 	ldw	r4,208(sp)
80209ee4:	d9403717 	ldw	r5,220(sp)
80209ee8:	1887883a 	add	r3,r3,r2
80209eec:	d8801f17 	ldw	r2,124(sp)
80209ef0:	41000015 	stw	r4,0(r8)
80209ef4:	41400115 	stw	r5,4(r8)
80209ef8:	10800044 	addi	r2,r2,1
80209efc:	d8c02015 	stw	r3,128(sp)
80209f00:	d8801f15 	stw	r2,124(sp)
80209f04:	010001c4 	movi	r4,7
80209f08:	20832916 	blt	r4,r2,8020abb0 <___vfprintf_internal_r+0x1b54>
80209f0c:	42000204 	addi	r8,r8,8
80209f10:	d8803317 	ldw	r2,204(sp)
80209f14:	143fffc4 	addi	r16,r2,-1
80209f18:	043ec50e 	bge	zero,r16,80209a30 <__reset+0xfa1e9a30>
80209f1c:	04400404 	movi	r17,16
80209f20:	d8801f17 	ldw	r2,124(sp)
80209f24:	8c00880e 	bge	r17,r16,8020a148 <___vfprintf_internal_r+0x10ec>
80209f28:	016008b4 	movhi	r5,32802
80209f2c:	29764f84 	addi	r5,r5,-9922
80209f30:	d9402b15 	stw	r5,172(sp)
80209f34:	058001c4 	movi	r22,7
80209f38:	dcc02c17 	ldw	r19,176(sp)
80209f3c:	00000306 	br	80209f4c <___vfprintf_internal_r+0xef0>
80209f40:	42000204 	addi	r8,r8,8
80209f44:	843ffc04 	addi	r16,r16,-16
80209f48:	8c00820e 	bge	r17,r16,8020a154 <___vfprintf_internal_r+0x10f8>
80209f4c:	18c00404 	addi	r3,r3,16
80209f50:	10800044 	addi	r2,r2,1
80209f54:	45000015 	stw	r20,0(r8)
80209f58:	44400115 	stw	r17,4(r8)
80209f5c:	d8c02015 	stw	r3,128(sp)
80209f60:	d8801f15 	stw	r2,124(sp)
80209f64:	b0bff60e 	bge	r22,r2,80209f40 <__reset+0xfa1e9f40>
80209f68:	d9801e04 	addi	r6,sp,120
80209f6c:	b80b883a 	mov	r5,r23
80209f70:	9809883a 	mov	r4,r19
80209f74:	021191c0 	call	8021191c <__sprint_r>
80209f78:	103d3a1e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
80209f7c:	d8c02017 	ldw	r3,128(sp)
80209f80:	d8801f17 	ldw	r2,124(sp)
80209f84:	da000404 	addi	r8,sp,16
80209f88:	003fee06 	br	80209f44 <__reset+0xfa1e9f44>
80209f8c:	d9403117 	ldw	r5,196(sp)
80209f90:	d8802a17 	ldw	r2,168(sp)
80209f94:	28adc83a 	sub	r22,r5,r2
80209f98:	05be630e 	bge	zero,r22,80209928 <__reset+0xfa1e9928>
80209f9c:	07000404 	movi	fp,16
80209fa0:	d8801f17 	ldw	r2,124(sp)
80209fa4:	e5838f0e 	bge	fp,r22,8020ade4 <___vfprintf_internal_r+0x1d88>
80209fa8:	016008b4 	movhi	r5,32802
80209fac:	29764f84 	addi	r5,r5,-9922
80209fb0:	dc403015 	stw	r17,192(sp)
80209fb4:	d9402b15 	stw	r5,172(sp)
80209fb8:	b023883a 	mov	r17,r22
80209fbc:	04c001c4 	movi	r19,7
80209fc0:	a82d883a 	mov	r22,r21
80209fc4:	902b883a 	mov	r21,r18
80209fc8:	8025883a 	mov	r18,r16
80209fcc:	dc002c17 	ldw	r16,176(sp)
80209fd0:	00000306 	br	80209fe0 <___vfprintf_internal_r+0xf84>
80209fd4:	8c7ffc04 	addi	r17,r17,-16
80209fd8:	42000204 	addi	r8,r8,8
80209fdc:	e440110e 	bge	fp,r17,8020a024 <___vfprintf_internal_r+0xfc8>
80209fe0:	18c00404 	addi	r3,r3,16
80209fe4:	10800044 	addi	r2,r2,1
80209fe8:	45000015 	stw	r20,0(r8)
80209fec:	47000115 	stw	fp,4(r8)
80209ff0:	d8c02015 	stw	r3,128(sp)
80209ff4:	d8801f15 	stw	r2,124(sp)
80209ff8:	98bff60e 	bge	r19,r2,80209fd4 <__reset+0xfa1e9fd4>
80209ffc:	d9801e04 	addi	r6,sp,120
8020a000:	b80b883a 	mov	r5,r23
8020a004:	8009883a 	mov	r4,r16
8020a008:	021191c0 	call	8021191c <__sprint_r>
8020a00c:	103d151e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020a010:	8c7ffc04 	addi	r17,r17,-16
8020a014:	d8c02017 	ldw	r3,128(sp)
8020a018:	d8801f17 	ldw	r2,124(sp)
8020a01c:	da000404 	addi	r8,sp,16
8020a020:	e47fef16 	blt	fp,r17,80209fe0 <__reset+0xfa1e9fe0>
8020a024:	9021883a 	mov	r16,r18
8020a028:	a825883a 	mov	r18,r21
8020a02c:	b02b883a 	mov	r21,r22
8020a030:	882d883a 	mov	r22,r17
8020a034:	dc403017 	ldw	r17,192(sp)
8020a038:	d9002b17 	ldw	r4,172(sp)
8020a03c:	1d87883a 	add	r3,r3,r22
8020a040:	10800044 	addi	r2,r2,1
8020a044:	41000015 	stw	r4,0(r8)
8020a048:	45800115 	stw	r22,4(r8)
8020a04c:	d8c02015 	stw	r3,128(sp)
8020a050:	d8801f15 	stw	r2,124(sp)
8020a054:	010001c4 	movi	r4,7
8020a058:	20818e16 	blt	r4,r2,8020a694 <___vfprintf_internal_r+0x1638>
8020a05c:	42000204 	addi	r8,r8,8
8020a060:	003e3106 	br	80209928 <__reset+0xfa1e9928>
8020a064:	d9403317 	ldw	r5,204(sp)
8020a068:	00800044 	movi	r2,1
8020a06c:	18c00044 	addi	r3,r3,1
8020a070:	1141530e 	bge	r2,r5,8020a5c0 <___vfprintf_internal_r+0x1564>
8020a074:	dc401f17 	ldw	r17,124(sp)
8020a078:	00800044 	movi	r2,1
8020a07c:	40800115 	stw	r2,4(r8)
8020a080:	8c400044 	addi	r17,r17,1
8020a084:	44000015 	stw	r16,0(r8)
8020a088:	d8c02015 	stw	r3,128(sp)
8020a08c:	dc401f15 	stw	r17,124(sp)
8020a090:	008001c4 	movi	r2,7
8020a094:	14416b16 	blt	r2,r17,8020a644 <___vfprintf_internal_r+0x15e8>
8020a098:	42000204 	addi	r8,r8,8
8020a09c:	d8803717 	ldw	r2,220(sp)
8020a0a0:	d9003417 	ldw	r4,208(sp)
8020a0a4:	8c400044 	addi	r17,r17,1
8020a0a8:	10c7883a 	add	r3,r2,r3
8020a0ac:	40800115 	stw	r2,4(r8)
8020a0b0:	41000015 	stw	r4,0(r8)
8020a0b4:	d8c02015 	stw	r3,128(sp)
8020a0b8:	dc401f15 	stw	r17,124(sp)
8020a0bc:	008001c4 	movi	r2,7
8020a0c0:	14416916 	blt	r2,r17,8020a668 <___vfprintf_internal_r+0x160c>
8020a0c4:	45800204 	addi	r22,r8,8
8020a0c8:	d9003617 	ldw	r4,216(sp)
8020a0cc:	d9403817 	ldw	r5,224(sp)
8020a0d0:	000d883a 	mov	r6,zero
8020a0d4:	000f883a 	mov	r7,zero
8020a0d8:	d8c03c15 	stw	r3,240(sp)
8020a0dc:	02155940 	call	80215594 <__eqdf2>
8020a0e0:	d8c03c17 	ldw	r3,240(sp)
8020a0e4:	1000bc26 	beq	r2,zero,8020a3d8 <___vfprintf_internal_r+0x137c>
8020a0e8:	d9403317 	ldw	r5,204(sp)
8020a0ec:	84000044 	addi	r16,r16,1
8020a0f0:	8c400044 	addi	r17,r17,1
8020a0f4:	28bfffc4 	addi	r2,r5,-1
8020a0f8:	1887883a 	add	r3,r3,r2
8020a0fc:	b0800115 	stw	r2,4(r22)
8020a100:	b4000015 	stw	r16,0(r22)
8020a104:	d8c02015 	stw	r3,128(sp)
8020a108:	dc401f15 	stw	r17,124(sp)
8020a10c:	008001c4 	movi	r2,7
8020a110:	14414316 	blt	r2,r17,8020a620 <___vfprintf_internal_r+0x15c4>
8020a114:	b5800204 	addi	r22,r22,8
8020a118:	d9003a17 	ldw	r4,232(sp)
8020a11c:	df0022c4 	addi	fp,sp,139
8020a120:	8c400044 	addi	r17,r17,1
8020a124:	20c7883a 	add	r3,r4,r3
8020a128:	b7000015 	stw	fp,0(r22)
8020a12c:	b1000115 	stw	r4,4(r22)
8020a130:	d8c02015 	stw	r3,128(sp)
8020a134:	dc401f15 	stw	r17,124(sp)
8020a138:	008001c4 	movi	r2,7
8020a13c:	14400e16 	blt	r2,r17,8020a178 <___vfprintf_internal_r+0x111c>
8020a140:	b2000204 	addi	r8,r22,8
8020a144:	003e3a06 	br	80209a30 <__reset+0xfa1e9a30>
8020a148:	012008b4 	movhi	r4,32802
8020a14c:	21364f84 	addi	r4,r4,-9922
8020a150:	d9002b15 	stw	r4,172(sp)
8020a154:	d9002b17 	ldw	r4,172(sp)
8020a158:	1c07883a 	add	r3,r3,r16
8020a15c:	44000115 	stw	r16,4(r8)
8020a160:	41000015 	stw	r4,0(r8)
8020a164:	10800044 	addi	r2,r2,1
8020a168:	d8c02015 	stw	r3,128(sp)
8020a16c:	d8801f15 	stw	r2,124(sp)
8020a170:	010001c4 	movi	r4,7
8020a174:	20be2d0e 	bge	r4,r2,80209a2c <__reset+0xfa1e9a2c>
8020a178:	d9002c17 	ldw	r4,176(sp)
8020a17c:	d9801e04 	addi	r6,sp,120
8020a180:	b80b883a 	mov	r5,r23
8020a184:	021191c0 	call	8021191c <__sprint_r>
8020a188:	103cb61e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020a18c:	d8c02017 	ldw	r3,128(sp)
8020a190:	da000404 	addi	r8,sp,16
8020a194:	003e2606 	br	80209a30 <__reset+0xfa1e9a30>
8020a198:	d9002c17 	ldw	r4,176(sp)
8020a19c:	d9801e04 	addi	r6,sp,120
8020a1a0:	b80b883a 	mov	r5,r23
8020a1a4:	021191c0 	call	8021191c <__sprint_r>
8020a1a8:	103e5d26 	beq	r2,zero,80209b20 <__reset+0xfa1e9b20>
8020a1ac:	003cad06 	br	80209464 <__reset+0xfa1e9464>
8020a1b0:	d9002c17 	ldw	r4,176(sp)
8020a1b4:	d9801e04 	addi	r6,sp,120
8020a1b8:	b80b883a 	mov	r5,r23
8020a1bc:	021191c0 	call	8021191c <__sprint_r>
8020a1c0:	103ca81e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020a1c4:	d8c02017 	ldw	r3,128(sp)
8020a1c8:	da000404 	addi	r8,sp,16
8020a1cc:	003e0b06 	br	802099fc <__reset+0xfa1e99fc>
8020a1d0:	d9002c17 	ldw	r4,176(sp)
8020a1d4:	d9801e04 	addi	r6,sp,120
8020a1d8:	b80b883a 	mov	r5,r23
8020a1dc:	021191c0 	call	8021191c <__sprint_r>
8020a1e0:	103ca01e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020a1e4:	d8c02017 	ldw	r3,128(sp)
8020a1e8:	da000404 	addi	r8,sp,16
8020a1ec:	003dbd06 	br	802098e4 <__reset+0xfa1e98e4>
8020a1f0:	d9002c17 	ldw	r4,176(sp)
8020a1f4:	d9801e04 	addi	r6,sp,120
8020a1f8:	b80b883a 	mov	r5,r23
8020a1fc:	021191c0 	call	8021191c <__sprint_r>
8020a200:	103c981e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020a204:	d8c02017 	ldw	r3,128(sp)
8020a208:	da000404 	addi	r8,sp,16
8020a20c:	003dc306 	br	8020991c <__reset+0xfa1e991c>
8020a210:	d8802917 	ldw	r2,164(sp)
8020a214:	d8002785 	stb	zero,158(sp)
8020a218:	103f0616 	blt	r2,zero,80209e34 <__reset+0xfa1e9e34>
8020a21c:	00ffdfc4 	movi	r3,-129
8020a220:	9d84b03a 	or	r2,r19,r22
8020a224:	90e4703a 	and	r18,r18,r3
8020a228:	103c6b26 	beq	r2,zero,802093d8 <__reset+0xfa1e93d8>
8020a22c:	0039883a 	mov	fp,zero
8020a230:	003e7406 	br	80209c04 <__reset+0xfa1e9c04>
8020a234:	9080040c 	andi	r2,r18,16
8020a238:	1001b326 	beq	r2,zero,8020a908 <___vfprintf_internal_r+0x18ac>
8020a23c:	d9002d17 	ldw	r4,180(sp)
8020a240:	d9402917 	ldw	r5,164(sp)
8020a244:	d8002785 	stb	zero,158(sp)
8020a248:	20800104 	addi	r2,r4,4
8020a24c:	24c00017 	ldw	r19,0(r4)
8020a250:	002d883a 	mov	r22,zero
8020a254:	2801b516 	blt	r5,zero,8020a92c <___vfprintf_internal_r+0x18d0>
8020a258:	00ffdfc4 	movi	r3,-129
8020a25c:	d8802d15 	stw	r2,180(sp)
8020a260:	90e4703a 	and	r18,r18,r3
8020a264:	983d2726 	beq	r19,zero,80209704 <__reset+0xfa1e9704>
8020a268:	0039883a 	mov	fp,zero
8020a26c:	003d2a06 	br	80209718 <__reset+0xfa1e9718>
8020a270:	dc402617 	ldw	r17,152(sp)
8020a274:	0441d30e 	bge	zero,r17,8020a9c4 <___vfprintf_internal_r+0x1968>
8020a278:	dc403217 	ldw	r17,200(sp)
8020a27c:	d8803317 	ldw	r2,204(sp)
8020a280:	1440010e 	bge	r2,r17,8020a288 <___vfprintf_internal_r+0x122c>
8020a284:	1023883a 	mov	r17,r2
8020a288:	04400a0e 	bge	zero,r17,8020a2b4 <___vfprintf_internal_r+0x1258>
8020a28c:	d8801f17 	ldw	r2,124(sp)
8020a290:	1c47883a 	add	r3,r3,r17
8020a294:	44000015 	stw	r16,0(r8)
8020a298:	10800044 	addi	r2,r2,1
8020a29c:	44400115 	stw	r17,4(r8)
8020a2a0:	d8c02015 	stw	r3,128(sp)
8020a2a4:	d8801f15 	stw	r2,124(sp)
8020a2a8:	010001c4 	movi	r4,7
8020a2ac:	20826516 	blt	r4,r2,8020ac44 <___vfprintf_internal_r+0x1be8>
8020a2b0:	42000204 	addi	r8,r8,8
8020a2b4:	88026116 	blt	r17,zero,8020ac3c <___vfprintf_internal_r+0x1be0>
8020a2b8:	d9003217 	ldw	r4,200(sp)
8020a2bc:	2463c83a 	sub	r17,r4,r17
8020a2c0:	04407b0e 	bge	zero,r17,8020a4b0 <___vfprintf_internal_r+0x1454>
8020a2c4:	05800404 	movi	r22,16
8020a2c8:	d8801f17 	ldw	r2,124(sp)
8020a2cc:	b4419d0e 	bge	r22,r17,8020a944 <___vfprintf_internal_r+0x18e8>
8020a2d0:	012008b4 	movhi	r4,32802
8020a2d4:	21364f84 	addi	r4,r4,-9922
8020a2d8:	d9002b15 	stw	r4,172(sp)
8020a2dc:	070001c4 	movi	fp,7
8020a2e0:	dcc02c17 	ldw	r19,176(sp)
8020a2e4:	00000306 	br	8020a2f4 <___vfprintf_internal_r+0x1298>
8020a2e8:	42000204 	addi	r8,r8,8
8020a2ec:	8c7ffc04 	addi	r17,r17,-16
8020a2f0:	b441970e 	bge	r22,r17,8020a950 <___vfprintf_internal_r+0x18f4>
8020a2f4:	18c00404 	addi	r3,r3,16
8020a2f8:	10800044 	addi	r2,r2,1
8020a2fc:	45000015 	stw	r20,0(r8)
8020a300:	45800115 	stw	r22,4(r8)
8020a304:	d8c02015 	stw	r3,128(sp)
8020a308:	d8801f15 	stw	r2,124(sp)
8020a30c:	e0bff60e 	bge	fp,r2,8020a2e8 <__reset+0xfa1ea2e8>
8020a310:	d9801e04 	addi	r6,sp,120
8020a314:	b80b883a 	mov	r5,r23
8020a318:	9809883a 	mov	r4,r19
8020a31c:	021191c0 	call	8021191c <__sprint_r>
8020a320:	103c501e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020a324:	d8c02017 	ldw	r3,128(sp)
8020a328:	d8801f17 	ldw	r2,124(sp)
8020a32c:	da000404 	addi	r8,sp,16
8020a330:	003fee06 	br	8020a2ec <__reset+0xfa1ea2ec>
8020a334:	d9002c17 	ldw	r4,176(sp)
8020a338:	d9801e04 	addi	r6,sp,120
8020a33c:	b80b883a 	mov	r5,r23
8020a340:	021191c0 	call	8021191c <__sprint_r>
8020a344:	103c471e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020a348:	d8c02017 	ldw	r3,128(sp)
8020a34c:	df002787 	ldb	fp,158(sp)
8020a350:	da000404 	addi	r8,sp,16
8020a354:	003d5606 	br	802098b0 <__reset+0xfa1e98b0>
8020a358:	9080040c 	andi	r2,r18,16
8020a35c:	10016126 	beq	r2,zero,8020a8e4 <___vfprintf_internal_r+0x1888>
8020a360:	d8802d17 	ldw	r2,180(sp)
8020a364:	14c00017 	ldw	r19,0(r2)
8020a368:	10800104 	addi	r2,r2,4
8020a36c:	d8802d15 	stw	r2,180(sp)
8020a370:	982dd7fa 	srai	r22,r19,31
8020a374:	b005883a 	mov	r2,r22
8020a378:	003c8206 	br	80209584 <__reset+0xfa1e9584>
8020a37c:	9080040c 	andi	r2,r18,16
8020a380:	10003526 	beq	r2,zero,8020a458 <___vfprintf_internal_r+0x13fc>
8020a384:	d9402d17 	ldw	r5,180(sp)
8020a388:	d8c02917 	ldw	r3,164(sp)
8020a38c:	d8002785 	stb	zero,158(sp)
8020a390:	28800104 	addi	r2,r5,4
8020a394:	2cc00017 	ldw	r19,0(r5)
8020a398:	002d883a 	mov	r22,zero
8020a39c:	18003716 	blt	r3,zero,8020a47c <___vfprintf_internal_r+0x1420>
8020a3a0:	00ffdfc4 	movi	r3,-129
8020a3a4:	d8802d15 	stw	r2,180(sp)
8020a3a8:	90e4703a 	and	r18,r18,r3
8020a3ac:	0039883a 	mov	fp,zero
8020a3b0:	983df326 	beq	r19,zero,80209b80 <__reset+0xfa1e9b80>
8020a3b4:	00800244 	movi	r2,9
8020a3b8:	14fc7b36 	bltu	r2,r19,802095a8 <__reset+0xfa1e95a8>
8020a3bc:	d8c02817 	ldw	r3,160(sp)
8020a3c0:	dc001dc4 	addi	r16,sp,119
8020a3c4:	9cc00c04 	addi	r19,r19,48
8020a3c8:	1c07c83a 	sub	r3,r3,r16
8020a3cc:	dcc01dc5 	stb	r19,119(sp)
8020a3d0:	d8c02e15 	stw	r3,184(sp)
8020a3d4:	003ce806 	br	80209778 <__reset+0xfa1e9778>
8020a3d8:	d8803317 	ldw	r2,204(sp)
8020a3dc:	143fffc4 	addi	r16,r2,-1
8020a3e0:	043f4d0e 	bge	zero,r16,8020a118 <__reset+0xfa1ea118>
8020a3e4:	07000404 	movi	fp,16
8020a3e8:	e400810e 	bge	fp,r16,8020a5f0 <___vfprintf_internal_r+0x1594>
8020a3ec:	016008b4 	movhi	r5,32802
8020a3f0:	29764f84 	addi	r5,r5,-9922
8020a3f4:	d9402b15 	stw	r5,172(sp)
8020a3f8:	01c001c4 	movi	r7,7
8020a3fc:	dcc02c17 	ldw	r19,176(sp)
8020a400:	00000306 	br	8020a410 <___vfprintf_internal_r+0x13b4>
8020a404:	b5800204 	addi	r22,r22,8
8020a408:	843ffc04 	addi	r16,r16,-16
8020a40c:	e4007b0e 	bge	fp,r16,8020a5fc <___vfprintf_internal_r+0x15a0>
8020a410:	18c00404 	addi	r3,r3,16
8020a414:	8c400044 	addi	r17,r17,1
8020a418:	b5000015 	stw	r20,0(r22)
8020a41c:	b7000115 	stw	fp,4(r22)
8020a420:	d8c02015 	stw	r3,128(sp)
8020a424:	dc401f15 	stw	r17,124(sp)
8020a428:	3c7ff60e 	bge	r7,r17,8020a404 <__reset+0xfa1ea404>
8020a42c:	d9801e04 	addi	r6,sp,120
8020a430:	b80b883a 	mov	r5,r23
8020a434:	9809883a 	mov	r4,r19
8020a438:	d9c03c15 	stw	r7,240(sp)
8020a43c:	021191c0 	call	8021191c <__sprint_r>
8020a440:	d9c03c17 	ldw	r7,240(sp)
8020a444:	103c071e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020a448:	d8c02017 	ldw	r3,128(sp)
8020a44c:	dc401f17 	ldw	r17,124(sp)
8020a450:	dd800404 	addi	r22,sp,16
8020a454:	003fec06 	br	8020a408 <__reset+0xfa1ea408>
8020a458:	9080100c 	andi	r2,r18,64
8020a45c:	d8002785 	stb	zero,158(sp)
8020a460:	10010e26 	beq	r2,zero,8020a89c <___vfprintf_internal_r+0x1840>
8020a464:	d9002d17 	ldw	r4,180(sp)
8020a468:	d9402917 	ldw	r5,164(sp)
8020a46c:	002d883a 	mov	r22,zero
8020a470:	20800104 	addi	r2,r4,4
8020a474:	24c0000b 	ldhu	r19,0(r4)
8020a478:	283fc90e 	bge	r5,zero,8020a3a0 <__reset+0xfa1ea3a0>
8020a47c:	d8802d15 	stw	r2,180(sp)
8020a480:	0039883a 	mov	fp,zero
8020a484:	9d84b03a 	or	r2,r19,r22
8020a488:	103c461e 	bne	r2,zero,802095a4 <__reset+0xfa1e95a4>
8020a48c:	00800044 	movi	r2,1
8020a490:	003e6c06 	br	80209e44 <__reset+0xfa1e9e44>
8020a494:	d9002c17 	ldw	r4,176(sp)
8020a498:	d9801e04 	addi	r6,sp,120
8020a49c:	b80b883a 	mov	r5,r23
8020a4a0:	021191c0 	call	8021191c <__sprint_r>
8020a4a4:	103bef1e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020a4a8:	d8c02017 	ldw	r3,128(sp)
8020a4ac:	da000404 	addi	r8,sp,16
8020a4b0:	d9003217 	ldw	r4,200(sp)
8020a4b4:	d8802617 	ldw	r2,152(sp)
8020a4b8:	d9403317 	ldw	r5,204(sp)
8020a4bc:	8123883a 	add	r17,r16,r4
8020a4c0:	11400216 	blt	r2,r5,8020a4cc <___vfprintf_internal_r+0x1470>
8020a4c4:	9100004c 	andi	r4,r18,1
8020a4c8:	20000d26 	beq	r4,zero,8020a500 <___vfprintf_internal_r+0x14a4>
8020a4cc:	d9003717 	ldw	r4,220(sp)
8020a4d0:	d9403417 	ldw	r5,208(sp)
8020a4d4:	1907883a 	add	r3,r3,r4
8020a4d8:	d9001f17 	ldw	r4,124(sp)
8020a4dc:	41400015 	stw	r5,0(r8)
8020a4e0:	d9403717 	ldw	r5,220(sp)
8020a4e4:	21000044 	addi	r4,r4,1
8020a4e8:	d8c02015 	stw	r3,128(sp)
8020a4ec:	41400115 	stw	r5,4(r8)
8020a4f0:	d9001f15 	stw	r4,124(sp)
8020a4f4:	014001c4 	movi	r5,7
8020a4f8:	2901e816 	blt	r5,r4,8020ac9c <___vfprintf_internal_r+0x1c40>
8020a4fc:	42000204 	addi	r8,r8,8
8020a500:	d9003317 	ldw	r4,204(sp)
8020a504:	8121883a 	add	r16,r16,r4
8020a508:	2085c83a 	sub	r2,r4,r2
8020a50c:	8461c83a 	sub	r16,r16,r17
8020a510:	1400010e 	bge	r2,r16,8020a518 <___vfprintf_internal_r+0x14bc>
8020a514:	1021883a 	mov	r16,r2
8020a518:	04000a0e 	bge	zero,r16,8020a544 <___vfprintf_internal_r+0x14e8>
8020a51c:	d9001f17 	ldw	r4,124(sp)
8020a520:	1c07883a 	add	r3,r3,r16
8020a524:	44400015 	stw	r17,0(r8)
8020a528:	21000044 	addi	r4,r4,1
8020a52c:	44000115 	stw	r16,4(r8)
8020a530:	d8c02015 	stw	r3,128(sp)
8020a534:	d9001f15 	stw	r4,124(sp)
8020a538:	014001c4 	movi	r5,7
8020a53c:	2901fb16 	blt	r5,r4,8020ad2c <___vfprintf_internal_r+0x1cd0>
8020a540:	42000204 	addi	r8,r8,8
8020a544:	8001f716 	blt	r16,zero,8020ad24 <___vfprintf_internal_r+0x1cc8>
8020a548:	1421c83a 	sub	r16,r2,r16
8020a54c:	043d380e 	bge	zero,r16,80209a30 <__reset+0xfa1e9a30>
8020a550:	04400404 	movi	r17,16
8020a554:	d8801f17 	ldw	r2,124(sp)
8020a558:	8c3efb0e 	bge	r17,r16,8020a148 <__reset+0xfa1ea148>
8020a55c:	016008b4 	movhi	r5,32802
8020a560:	29764f84 	addi	r5,r5,-9922
8020a564:	d9402b15 	stw	r5,172(sp)
8020a568:	058001c4 	movi	r22,7
8020a56c:	dcc02c17 	ldw	r19,176(sp)
8020a570:	00000306 	br	8020a580 <___vfprintf_internal_r+0x1524>
8020a574:	42000204 	addi	r8,r8,8
8020a578:	843ffc04 	addi	r16,r16,-16
8020a57c:	8c3ef50e 	bge	r17,r16,8020a154 <__reset+0xfa1ea154>
8020a580:	18c00404 	addi	r3,r3,16
8020a584:	10800044 	addi	r2,r2,1
8020a588:	45000015 	stw	r20,0(r8)
8020a58c:	44400115 	stw	r17,4(r8)
8020a590:	d8c02015 	stw	r3,128(sp)
8020a594:	d8801f15 	stw	r2,124(sp)
8020a598:	b0bff60e 	bge	r22,r2,8020a574 <__reset+0xfa1ea574>
8020a59c:	d9801e04 	addi	r6,sp,120
8020a5a0:	b80b883a 	mov	r5,r23
8020a5a4:	9809883a 	mov	r4,r19
8020a5a8:	021191c0 	call	8021191c <__sprint_r>
8020a5ac:	103bad1e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020a5b0:	d8c02017 	ldw	r3,128(sp)
8020a5b4:	d8801f17 	ldw	r2,124(sp)
8020a5b8:	da000404 	addi	r8,sp,16
8020a5bc:	003fee06 	br	8020a578 <__reset+0xfa1ea578>
8020a5c0:	9088703a 	and	r4,r18,r2
8020a5c4:	203eab1e 	bne	r4,zero,8020a074 <__reset+0xfa1ea074>
8020a5c8:	dc401f17 	ldw	r17,124(sp)
8020a5cc:	40800115 	stw	r2,4(r8)
8020a5d0:	44000015 	stw	r16,0(r8)
8020a5d4:	8c400044 	addi	r17,r17,1
8020a5d8:	d8c02015 	stw	r3,128(sp)
8020a5dc:	dc401f15 	stw	r17,124(sp)
8020a5e0:	008001c4 	movi	r2,7
8020a5e4:	14400e16 	blt	r2,r17,8020a620 <___vfprintf_internal_r+0x15c4>
8020a5e8:	45800204 	addi	r22,r8,8
8020a5ec:	003eca06 	br	8020a118 <__reset+0xfa1ea118>
8020a5f0:	012008b4 	movhi	r4,32802
8020a5f4:	21364f84 	addi	r4,r4,-9922
8020a5f8:	d9002b15 	stw	r4,172(sp)
8020a5fc:	d8802b17 	ldw	r2,172(sp)
8020a600:	1c07883a 	add	r3,r3,r16
8020a604:	8c400044 	addi	r17,r17,1
8020a608:	b0800015 	stw	r2,0(r22)
8020a60c:	b4000115 	stw	r16,4(r22)
8020a610:	d8c02015 	stw	r3,128(sp)
8020a614:	dc401f15 	stw	r17,124(sp)
8020a618:	008001c4 	movi	r2,7
8020a61c:	147ebd0e 	bge	r2,r17,8020a114 <__reset+0xfa1ea114>
8020a620:	d9002c17 	ldw	r4,176(sp)
8020a624:	d9801e04 	addi	r6,sp,120
8020a628:	b80b883a 	mov	r5,r23
8020a62c:	021191c0 	call	8021191c <__sprint_r>
8020a630:	103b8c1e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020a634:	d8c02017 	ldw	r3,128(sp)
8020a638:	dc401f17 	ldw	r17,124(sp)
8020a63c:	dd800404 	addi	r22,sp,16
8020a640:	003eb506 	br	8020a118 <__reset+0xfa1ea118>
8020a644:	d9002c17 	ldw	r4,176(sp)
8020a648:	d9801e04 	addi	r6,sp,120
8020a64c:	b80b883a 	mov	r5,r23
8020a650:	021191c0 	call	8021191c <__sprint_r>
8020a654:	103b831e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020a658:	d8c02017 	ldw	r3,128(sp)
8020a65c:	dc401f17 	ldw	r17,124(sp)
8020a660:	da000404 	addi	r8,sp,16
8020a664:	003e8d06 	br	8020a09c <__reset+0xfa1ea09c>
8020a668:	d9002c17 	ldw	r4,176(sp)
8020a66c:	d9801e04 	addi	r6,sp,120
8020a670:	b80b883a 	mov	r5,r23
8020a674:	021191c0 	call	8021191c <__sprint_r>
8020a678:	103b7a1e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020a67c:	d8c02017 	ldw	r3,128(sp)
8020a680:	dc401f17 	ldw	r17,124(sp)
8020a684:	dd800404 	addi	r22,sp,16
8020a688:	003e8f06 	br	8020a0c8 <__reset+0xfa1ea0c8>
8020a68c:	0027883a 	mov	r19,zero
8020a690:	003f4a06 	br	8020a3bc <__reset+0xfa1ea3bc>
8020a694:	d9002c17 	ldw	r4,176(sp)
8020a698:	d9801e04 	addi	r6,sp,120
8020a69c:	b80b883a 	mov	r5,r23
8020a6a0:	021191c0 	call	8021191c <__sprint_r>
8020a6a4:	103b6f1e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020a6a8:	d8c02017 	ldw	r3,128(sp)
8020a6ac:	da000404 	addi	r8,sp,16
8020a6b0:	003c9d06 	br	80209928 <__reset+0xfa1e9928>
8020a6b4:	04e7c83a 	sub	r19,zero,r19
8020a6b8:	9804c03a 	cmpne	r2,r19,zero
8020a6bc:	05adc83a 	sub	r22,zero,r22
8020a6c0:	b0adc83a 	sub	r22,r22,r2
8020a6c4:	d8802917 	ldw	r2,164(sp)
8020a6c8:	07000b44 	movi	fp,45
8020a6cc:	df002785 	stb	fp,158(sp)
8020a6d0:	10017b16 	blt	r2,zero,8020acc0 <___vfprintf_internal_r+0x1c64>
8020a6d4:	00bfdfc4 	movi	r2,-129
8020a6d8:	90a4703a 	and	r18,r18,r2
8020a6dc:	003bb106 	br	802095a4 <__reset+0xfa1e95a4>
8020a6e0:	d9003617 	ldw	r4,216(sp)
8020a6e4:	d9403817 	ldw	r5,224(sp)
8020a6e8:	da003d15 	stw	r8,244(sp)
8020a6ec:	02101340 	call	80210134 <__fpclassifyd>
8020a6f0:	da003d17 	ldw	r8,244(sp)
8020a6f4:	1000f026 	beq	r2,zero,8020aab8 <___vfprintf_internal_r+0x1a5c>
8020a6f8:	d9002917 	ldw	r4,164(sp)
8020a6fc:	05bff7c4 	movi	r22,-33
8020a700:	00bfffc4 	movi	r2,-1
8020a704:	8dac703a 	and	r22,r17,r22
8020a708:	20820026 	beq	r4,r2,8020af0c <___vfprintf_internal_r+0x1eb0>
8020a70c:	008011c4 	movi	r2,71
8020a710:	b081f726 	beq	r22,r2,8020aef0 <___vfprintf_internal_r+0x1e94>
8020a714:	d9003817 	ldw	r4,224(sp)
8020a718:	90c04014 	ori	r3,r18,256
8020a71c:	d8c02b15 	stw	r3,172(sp)
8020a720:	20021516 	blt	r4,zero,8020af78 <___vfprintf_internal_r+0x1f1c>
8020a724:	dcc03817 	ldw	r19,224(sp)
8020a728:	d8002a05 	stb	zero,168(sp)
8020a72c:	00801984 	movi	r2,102
8020a730:	8881f926 	beq	r17,r2,8020af18 <___vfprintf_internal_r+0x1ebc>
8020a734:	00801184 	movi	r2,70
8020a738:	88821c26 	beq	r17,r2,8020afac <___vfprintf_internal_r+0x1f50>
8020a73c:	00801144 	movi	r2,69
8020a740:	b081ef26 	beq	r22,r2,8020af00 <___vfprintf_internal_r+0x1ea4>
8020a744:	d8c02917 	ldw	r3,164(sp)
8020a748:	d8802104 	addi	r2,sp,132
8020a74c:	d8800315 	stw	r2,12(sp)
8020a750:	d9403617 	ldw	r5,216(sp)
8020a754:	d8802504 	addi	r2,sp,148
8020a758:	d9002c17 	ldw	r4,176(sp)
8020a75c:	d8800215 	stw	r2,8(sp)
8020a760:	d8802604 	addi	r2,sp,152
8020a764:	d8c00015 	stw	r3,0(sp)
8020a768:	d8800115 	stw	r2,4(sp)
8020a76c:	01c00084 	movi	r7,2
8020a770:	980d883a 	mov	r6,r19
8020a774:	d8c03c15 	stw	r3,240(sp)
8020a778:	da003d15 	stw	r8,244(sp)
8020a77c:	020b6800 	call	8020b680 <_dtoa_r>
8020a780:	1021883a 	mov	r16,r2
8020a784:	008019c4 	movi	r2,103
8020a788:	d8c03c17 	ldw	r3,240(sp)
8020a78c:	da003d17 	ldw	r8,244(sp)
8020a790:	88817126 	beq	r17,r2,8020ad58 <___vfprintf_internal_r+0x1cfc>
8020a794:	008011c4 	movi	r2,71
8020a798:	88829226 	beq	r17,r2,8020b1e4 <___vfprintf_internal_r+0x2188>
8020a79c:	80f9883a 	add	fp,r16,r3
8020a7a0:	d9003617 	ldw	r4,216(sp)
8020a7a4:	000d883a 	mov	r6,zero
8020a7a8:	000f883a 	mov	r7,zero
8020a7ac:	980b883a 	mov	r5,r19
8020a7b0:	da003d15 	stw	r8,244(sp)
8020a7b4:	02155940 	call	80215594 <__eqdf2>
8020a7b8:	da003d17 	ldw	r8,244(sp)
8020a7bc:	10018d26 	beq	r2,zero,8020adf4 <___vfprintf_internal_r+0x1d98>
8020a7c0:	d8802117 	ldw	r2,132(sp)
8020a7c4:	1700062e 	bgeu	r2,fp,8020a7e0 <___vfprintf_internal_r+0x1784>
8020a7c8:	01000c04 	movi	r4,48
8020a7cc:	10c00044 	addi	r3,r2,1
8020a7d0:	d8c02115 	stw	r3,132(sp)
8020a7d4:	11000005 	stb	r4,0(r2)
8020a7d8:	d8802117 	ldw	r2,132(sp)
8020a7dc:	173ffb36 	bltu	r2,fp,8020a7cc <__reset+0xfa1ea7cc>
8020a7e0:	1405c83a 	sub	r2,r2,r16
8020a7e4:	d8803315 	stw	r2,204(sp)
8020a7e8:	008011c4 	movi	r2,71
8020a7ec:	b0817626 	beq	r22,r2,8020adc8 <___vfprintf_internal_r+0x1d6c>
8020a7f0:	00801944 	movi	r2,101
8020a7f4:	1442810e 	bge	r2,r17,8020b1fc <___vfprintf_internal_r+0x21a0>
8020a7f8:	d8c02617 	ldw	r3,152(sp)
8020a7fc:	00801984 	movi	r2,102
8020a800:	d8c03215 	stw	r3,200(sp)
8020a804:	8881fe26 	beq	r17,r2,8020b000 <___vfprintf_internal_r+0x1fa4>
8020a808:	d8c03217 	ldw	r3,200(sp)
8020a80c:	d9003317 	ldw	r4,204(sp)
8020a810:	1901dd16 	blt	r3,r4,8020af88 <___vfprintf_internal_r+0x1f2c>
8020a814:	9480004c 	andi	r18,r18,1
8020a818:	90022b1e 	bne	r18,zero,8020b0c8 <___vfprintf_internal_r+0x206c>
8020a81c:	1805883a 	mov	r2,r3
8020a820:	18028016 	blt	r3,zero,8020b224 <___vfprintf_internal_r+0x21c8>
8020a824:	d8c03217 	ldw	r3,200(sp)
8020a828:	044019c4 	movi	r17,103
8020a82c:	d8c02e15 	stw	r3,184(sp)
8020a830:	df002a07 	ldb	fp,168(sp)
8020a834:	e001531e 	bne	fp,zero,8020ad84 <___vfprintf_internal_r+0x1d28>
8020a838:	df002783 	ldbu	fp,158(sp)
8020a83c:	d8802a15 	stw	r2,168(sp)
8020a840:	dc802b17 	ldw	r18,172(sp)
8020a844:	d8002915 	stw	zero,164(sp)
8020a848:	003bd106 	br	80209790 <__reset+0xfa1e9790>
8020a84c:	d8802d17 	ldw	r2,180(sp)
8020a850:	d8c02d17 	ldw	r3,180(sp)
8020a854:	d9002d17 	ldw	r4,180(sp)
8020a858:	10800017 	ldw	r2,0(r2)
8020a85c:	18c00117 	ldw	r3,4(r3)
8020a860:	21000204 	addi	r4,r4,8
8020a864:	d8803615 	stw	r2,216(sp)
8020a868:	d8c03815 	stw	r3,224(sp)
8020a86c:	d9002d15 	stw	r4,180(sp)
8020a870:	003b7506 	br	80209648 <__reset+0xfa1e9648>
8020a874:	ac400007 	ldb	r17,0(r21)
8020a878:	003a5906 	br	802091e0 <__reset+0xfa1e91e0>
8020a87c:	9080100c 	andi	r2,r18,64
8020a880:	1000a826 	beq	r2,zero,8020ab24 <___vfprintf_internal_r+0x1ac8>
8020a884:	d9002d17 	ldw	r4,180(sp)
8020a888:	002d883a 	mov	r22,zero
8020a88c:	24c0000b 	ldhu	r19,0(r4)
8020a890:	21000104 	addi	r4,r4,4
8020a894:	d9002d15 	stw	r4,180(sp)
8020a898:	003ccb06 	br	80209bc8 <__reset+0xfa1e9bc8>
8020a89c:	d8c02d17 	ldw	r3,180(sp)
8020a8a0:	d9002917 	ldw	r4,164(sp)
8020a8a4:	002d883a 	mov	r22,zero
8020a8a8:	18800104 	addi	r2,r3,4
8020a8ac:	1cc00017 	ldw	r19,0(r3)
8020a8b0:	203ebb0e 	bge	r4,zero,8020a3a0 <__reset+0xfa1ea3a0>
8020a8b4:	003ef106 	br	8020a47c <__reset+0xfa1ea47c>
8020a8b8:	9080040c 	andi	r2,r18,16
8020a8bc:	1000921e 	bne	r2,zero,8020ab08 <___vfprintf_internal_r+0x1aac>
8020a8c0:	9480100c 	andi	r18,r18,64
8020a8c4:	90013926 	beq	r18,zero,8020adac <___vfprintf_internal_r+0x1d50>
8020a8c8:	d9002d17 	ldw	r4,180(sp)
8020a8cc:	d9402f17 	ldw	r5,188(sp)
8020a8d0:	20800017 	ldw	r2,0(r4)
8020a8d4:	21000104 	addi	r4,r4,4
8020a8d8:	d9002d15 	stw	r4,180(sp)
8020a8dc:	1140000d 	sth	r5,0(r2)
8020a8e0:	003a1606 	br	8020913c <__reset+0xfa1e913c>
8020a8e4:	9080100c 	andi	r2,r18,64
8020a8e8:	10008026 	beq	r2,zero,8020aaec <___vfprintf_internal_r+0x1a90>
8020a8ec:	d8c02d17 	ldw	r3,180(sp)
8020a8f0:	1cc0000f 	ldh	r19,0(r3)
8020a8f4:	18c00104 	addi	r3,r3,4
8020a8f8:	d8c02d15 	stw	r3,180(sp)
8020a8fc:	982dd7fa 	srai	r22,r19,31
8020a900:	b005883a 	mov	r2,r22
8020a904:	003b1f06 	br	80209584 <__reset+0xfa1e9584>
8020a908:	9080100c 	andi	r2,r18,64
8020a90c:	d8002785 	stb	zero,158(sp)
8020a910:	10008a1e 	bne	r2,zero,8020ab3c <___vfprintf_internal_r+0x1ae0>
8020a914:	d9402d17 	ldw	r5,180(sp)
8020a918:	d8c02917 	ldw	r3,164(sp)
8020a91c:	002d883a 	mov	r22,zero
8020a920:	28800104 	addi	r2,r5,4
8020a924:	2cc00017 	ldw	r19,0(r5)
8020a928:	183e4b0e 	bge	r3,zero,8020a258 <__reset+0xfa1ea258>
8020a92c:	9d86b03a 	or	r3,r19,r22
8020a930:	d8802d15 	stw	r2,180(sp)
8020a934:	183e4c1e 	bne	r3,zero,8020a268 <__reset+0xfa1ea268>
8020a938:	0039883a 	mov	fp,zero
8020a93c:	0005883a 	mov	r2,zero
8020a940:	003d4006 	br	80209e44 <__reset+0xfa1e9e44>
8020a944:	016008b4 	movhi	r5,32802
8020a948:	29764f84 	addi	r5,r5,-9922
8020a94c:	d9402b15 	stw	r5,172(sp)
8020a950:	d9402b17 	ldw	r5,172(sp)
8020a954:	1c47883a 	add	r3,r3,r17
8020a958:	10800044 	addi	r2,r2,1
8020a95c:	41400015 	stw	r5,0(r8)
8020a960:	44400115 	stw	r17,4(r8)
8020a964:	d8c02015 	stw	r3,128(sp)
8020a968:	d8801f15 	stw	r2,124(sp)
8020a96c:	010001c4 	movi	r4,7
8020a970:	20bec816 	blt	r4,r2,8020a494 <__reset+0xfa1ea494>
8020a974:	42000204 	addi	r8,r8,8
8020a978:	003ecd06 	br	8020a4b0 <__reset+0xfa1ea4b0>
8020a97c:	d9002917 	ldw	r4,164(sp)
8020a980:	d8002785 	stb	zero,158(sp)
8020a984:	203d2d16 	blt	r4,zero,80209e3c <__reset+0xfa1e9e3c>
8020a988:	00bfdfc4 	movi	r2,-129
8020a98c:	90a4703a 	and	r18,r18,r2
8020a990:	003a9106 	br	802093d8 <__reset+0xfa1e93d8>
8020a994:	012008b4 	movhi	r4,32802
8020a998:	21364f84 	addi	r4,r4,-9922
8020a99c:	d9002b15 	stw	r4,172(sp)
8020a9a0:	003c0c06 	br	802099d4 <__reset+0xfa1e99d4>
8020a9a4:	d9002c17 	ldw	r4,176(sp)
8020a9a8:	d9801e04 	addi	r6,sp,120
8020a9ac:	b80b883a 	mov	r5,r23
8020a9b0:	021191c0 	call	8021191c <__sprint_r>
8020a9b4:	103aab1e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020a9b8:	d8c02017 	ldw	r3,128(sp)
8020a9bc:	da000404 	addi	r8,sp,16
8020a9c0:	003d4106 	br	80209ec8 <__reset+0xfa1e9ec8>
8020a9c4:	d8801f17 	ldw	r2,124(sp)
8020a9c8:	016008b4 	movhi	r5,32802
8020a9cc:	01000044 	movi	r4,1
8020a9d0:	18c00044 	addi	r3,r3,1
8020a9d4:	10800044 	addi	r2,r2,1
8020a9d8:	29764704 	addi	r5,r5,-9956
8020a9dc:	41000115 	stw	r4,4(r8)
8020a9e0:	41400015 	stw	r5,0(r8)
8020a9e4:	d8c02015 	stw	r3,128(sp)
8020a9e8:	d8801f15 	stw	r2,124(sp)
8020a9ec:	010001c4 	movi	r4,7
8020a9f0:	20805c16 	blt	r4,r2,8020ab64 <___vfprintf_internal_r+0x1b08>
8020a9f4:	42000204 	addi	r8,r8,8
8020a9f8:	8800041e 	bne	r17,zero,8020aa0c <___vfprintf_internal_r+0x19b0>
8020a9fc:	d8803317 	ldw	r2,204(sp)
8020aa00:	1000021e 	bne	r2,zero,8020aa0c <___vfprintf_internal_r+0x19b0>
8020aa04:	9080004c 	andi	r2,r18,1
8020aa08:	103c0926 	beq	r2,zero,80209a30 <__reset+0xfa1e9a30>
8020aa0c:	d9003717 	ldw	r4,220(sp)
8020aa10:	d8801f17 	ldw	r2,124(sp)
8020aa14:	d9403417 	ldw	r5,208(sp)
8020aa18:	20c7883a 	add	r3,r4,r3
8020aa1c:	10800044 	addi	r2,r2,1
8020aa20:	41000115 	stw	r4,4(r8)
8020aa24:	41400015 	stw	r5,0(r8)
8020aa28:	d8c02015 	stw	r3,128(sp)
8020aa2c:	d8801f15 	stw	r2,124(sp)
8020aa30:	010001c4 	movi	r4,7
8020aa34:	20812116 	blt	r4,r2,8020aebc <___vfprintf_internal_r+0x1e60>
8020aa38:	42000204 	addi	r8,r8,8
8020aa3c:	0463c83a 	sub	r17,zero,r17
8020aa40:	0440730e 	bge	zero,r17,8020ac10 <___vfprintf_internal_r+0x1bb4>
8020aa44:	05800404 	movi	r22,16
8020aa48:	b440860e 	bge	r22,r17,8020ac64 <___vfprintf_internal_r+0x1c08>
8020aa4c:	016008b4 	movhi	r5,32802
8020aa50:	29764f84 	addi	r5,r5,-9922
8020aa54:	d9402b15 	stw	r5,172(sp)
8020aa58:	070001c4 	movi	fp,7
8020aa5c:	dcc02c17 	ldw	r19,176(sp)
8020aa60:	00000306 	br	8020aa70 <___vfprintf_internal_r+0x1a14>
8020aa64:	42000204 	addi	r8,r8,8
8020aa68:	8c7ffc04 	addi	r17,r17,-16
8020aa6c:	b440800e 	bge	r22,r17,8020ac70 <___vfprintf_internal_r+0x1c14>
8020aa70:	18c00404 	addi	r3,r3,16
8020aa74:	10800044 	addi	r2,r2,1
8020aa78:	45000015 	stw	r20,0(r8)
8020aa7c:	45800115 	stw	r22,4(r8)
8020aa80:	d8c02015 	stw	r3,128(sp)
8020aa84:	d8801f15 	stw	r2,124(sp)
8020aa88:	e0bff60e 	bge	fp,r2,8020aa64 <__reset+0xfa1eaa64>
8020aa8c:	d9801e04 	addi	r6,sp,120
8020aa90:	b80b883a 	mov	r5,r23
8020aa94:	9809883a 	mov	r4,r19
8020aa98:	021191c0 	call	8021191c <__sprint_r>
8020aa9c:	103a711e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020aaa0:	d8c02017 	ldw	r3,128(sp)
8020aaa4:	d8801f17 	ldw	r2,124(sp)
8020aaa8:	da000404 	addi	r8,sp,16
8020aaac:	003fee06 	br	8020aa68 <__reset+0xfa1eaa68>
8020aab0:	00bfffc4 	movi	r2,-1
8020aab4:	003a6f06 	br	80209474 <__reset+0xfa1e9474>
8020aab8:	008011c4 	movi	r2,71
8020aabc:	1440b816 	blt	r2,r17,8020ada0 <___vfprintf_internal_r+0x1d44>
8020aac0:	042008b4 	movhi	r16,32802
8020aac4:	84363904 	addi	r16,r16,-10012
8020aac8:	00c000c4 	movi	r3,3
8020aacc:	00bfdfc4 	movi	r2,-129
8020aad0:	d8c02a15 	stw	r3,168(sp)
8020aad4:	90a4703a 	and	r18,r18,r2
8020aad8:	df002783 	ldbu	fp,158(sp)
8020aadc:	d8c02e15 	stw	r3,184(sp)
8020aae0:	d8002915 	stw	zero,164(sp)
8020aae4:	d8003215 	stw	zero,200(sp)
8020aae8:	003b2906 	br	80209790 <__reset+0xfa1e9790>
8020aaec:	d9002d17 	ldw	r4,180(sp)
8020aaf0:	24c00017 	ldw	r19,0(r4)
8020aaf4:	21000104 	addi	r4,r4,4
8020aaf8:	d9002d15 	stw	r4,180(sp)
8020aafc:	982dd7fa 	srai	r22,r19,31
8020ab00:	b005883a 	mov	r2,r22
8020ab04:	003a9f06 	br	80209584 <__reset+0xfa1e9584>
8020ab08:	d9402d17 	ldw	r5,180(sp)
8020ab0c:	d8c02f17 	ldw	r3,188(sp)
8020ab10:	28800017 	ldw	r2,0(r5)
8020ab14:	29400104 	addi	r5,r5,4
8020ab18:	d9402d15 	stw	r5,180(sp)
8020ab1c:	10c00015 	stw	r3,0(r2)
8020ab20:	00398606 	br	8020913c <__reset+0xfa1e913c>
8020ab24:	d9402d17 	ldw	r5,180(sp)
8020ab28:	002d883a 	mov	r22,zero
8020ab2c:	2cc00017 	ldw	r19,0(r5)
8020ab30:	29400104 	addi	r5,r5,4
8020ab34:	d9402d15 	stw	r5,180(sp)
8020ab38:	003c2306 	br	80209bc8 <__reset+0xfa1e9bc8>
8020ab3c:	d8c02d17 	ldw	r3,180(sp)
8020ab40:	d9002917 	ldw	r4,164(sp)
8020ab44:	002d883a 	mov	r22,zero
8020ab48:	18800104 	addi	r2,r3,4
8020ab4c:	1cc0000b 	ldhu	r19,0(r3)
8020ab50:	203dc10e 	bge	r4,zero,8020a258 <__reset+0xfa1ea258>
8020ab54:	003f7506 	br	8020a92c <__reset+0xfa1ea92c>
8020ab58:	042008b4 	movhi	r16,32802
8020ab5c:	84363704 	addi	r16,r16,-10020
8020ab60:	003acc06 	br	80209694 <__reset+0xfa1e9694>
8020ab64:	d9002c17 	ldw	r4,176(sp)
8020ab68:	d9801e04 	addi	r6,sp,120
8020ab6c:	b80b883a 	mov	r5,r23
8020ab70:	021191c0 	call	8021191c <__sprint_r>
8020ab74:	103a3b1e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020ab78:	dc402617 	ldw	r17,152(sp)
8020ab7c:	d8c02017 	ldw	r3,128(sp)
8020ab80:	da000404 	addi	r8,sp,16
8020ab84:	003f9c06 	br	8020a9f8 <__reset+0xfa1ea9f8>
8020ab88:	ac400043 	ldbu	r17,1(r21)
8020ab8c:	94800814 	ori	r18,r18,32
8020ab90:	ad400044 	addi	r21,r21,1
8020ab94:	8c403fcc 	andi	r17,r17,255
8020ab98:	8c40201c 	xori	r17,r17,128
8020ab9c:	8c7fe004 	addi	r17,r17,-128
8020aba0:	00398f06 	br	802091e0 <__reset+0xfa1e91e0>
8020aba4:	d8c02d15 	stw	r3,180(sp)
8020aba8:	0039883a 	mov	fp,zero
8020abac:	003e3506 	br	8020a484 <__reset+0xfa1ea484>
8020abb0:	d9002c17 	ldw	r4,176(sp)
8020abb4:	d9801e04 	addi	r6,sp,120
8020abb8:	b80b883a 	mov	r5,r23
8020abbc:	021191c0 	call	8021191c <__sprint_r>
8020abc0:	103a281e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020abc4:	d8c02017 	ldw	r3,128(sp)
8020abc8:	da000404 	addi	r8,sp,16
8020abcc:	003cd006 	br	80209f10 <__reset+0xfa1e9f10>
8020abd0:	8009883a 	mov	r4,r16
8020abd4:	da003d15 	stw	r8,244(sp)
8020abd8:	0206dec0 	call	80206dec <strlen>
8020abdc:	d8802e15 	stw	r2,184(sp)
8020abe0:	da003d17 	ldw	r8,244(sp)
8020abe4:	103c340e 	bge	r2,zero,80209cb8 <__reset+0xfa1e9cb8>
8020abe8:	0005883a 	mov	r2,zero
8020abec:	003c3206 	br	80209cb8 <__reset+0xfa1e9cb8>
8020abf0:	d9002c17 	ldw	r4,176(sp)
8020abf4:	d9801e04 	addi	r6,sp,120
8020abf8:	b80b883a 	mov	r5,r23
8020abfc:	021191c0 	call	8021191c <__sprint_r>
8020ac00:	103a181e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020ac04:	d8c02017 	ldw	r3,128(sp)
8020ac08:	d8801f17 	ldw	r2,124(sp)
8020ac0c:	da000404 	addi	r8,sp,16
8020ac10:	d9403317 	ldw	r5,204(sp)
8020ac14:	10800044 	addi	r2,r2,1
8020ac18:	44000015 	stw	r16,0(r8)
8020ac1c:	28c7883a 	add	r3,r5,r3
8020ac20:	003b7d06 	br	80209a18 <__reset+0xfa1e9a18>
8020ac24:	012008b4 	movhi	r4,32802
8020ac28:	21365384 	addi	r4,r4,-9906
8020ac2c:	d9003515 	stw	r4,212(sp)
8020ac30:	003b1406 	br	80209884 <__reset+0xfa1e9884>
8020ac34:	013fffc4 	movi	r4,-1
8020ac38:	003a3506 	br	80209510 <__reset+0xfa1e9510>
8020ac3c:	0023883a 	mov	r17,zero
8020ac40:	003d9d06 	br	8020a2b8 <__reset+0xfa1ea2b8>
8020ac44:	d9002c17 	ldw	r4,176(sp)
8020ac48:	d9801e04 	addi	r6,sp,120
8020ac4c:	b80b883a 	mov	r5,r23
8020ac50:	021191c0 	call	8021191c <__sprint_r>
8020ac54:	103a031e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020ac58:	d8c02017 	ldw	r3,128(sp)
8020ac5c:	da000404 	addi	r8,sp,16
8020ac60:	003d9406 	br	8020a2b4 <__reset+0xfa1ea2b4>
8020ac64:	012008b4 	movhi	r4,32802
8020ac68:	21364f84 	addi	r4,r4,-9922
8020ac6c:	d9002b15 	stw	r4,172(sp)
8020ac70:	d9002b17 	ldw	r4,172(sp)
8020ac74:	1c47883a 	add	r3,r3,r17
8020ac78:	10800044 	addi	r2,r2,1
8020ac7c:	41000015 	stw	r4,0(r8)
8020ac80:	44400115 	stw	r17,4(r8)
8020ac84:	d8c02015 	stw	r3,128(sp)
8020ac88:	d8801f15 	stw	r2,124(sp)
8020ac8c:	010001c4 	movi	r4,7
8020ac90:	20bfd716 	blt	r4,r2,8020abf0 <__reset+0xfa1eabf0>
8020ac94:	42000204 	addi	r8,r8,8
8020ac98:	003fdd06 	br	8020ac10 <__reset+0xfa1eac10>
8020ac9c:	d9002c17 	ldw	r4,176(sp)
8020aca0:	d9801e04 	addi	r6,sp,120
8020aca4:	b80b883a 	mov	r5,r23
8020aca8:	021191c0 	call	8021191c <__sprint_r>
8020acac:	1039ed1e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020acb0:	d8802617 	ldw	r2,152(sp)
8020acb4:	d8c02017 	ldw	r3,128(sp)
8020acb8:	da000404 	addi	r8,sp,16
8020acbc:	003e1006 	br	8020a500 <__reset+0xfa1ea500>
8020acc0:	00800044 	movi	r2,1
8020acc4:	10803fcc 	andi	r2,r2,255
8020acc8:	00c00044 	movi	r3,1
8020accc:	10fa3526 	beq	r2,r3,802095a4 <__reset+0xfa1e95a4>
8020acd0:	00c00084 	movi	r3,2
8020acd4:	10fbcb26 	beq	r2,r3,80209c04 <__reset+0xfa1e9c04>
8020acd8:	003a8f06 	br	80209718 <__reset+0xfa1e9718>
8020acdc:	012008b4 	movhi	r4,32802
8020ace0:	21365384 	addi	r4,r4,-9906
8020ace4:	d9003515 	stw	r4,212(sp)
8020ace8:	003b7606 	br	80209ac4 <__reset+0xfa1e9ac4>
8020acec:	d8802917 	ldw	r2,164(sp)
8020acf0:	00c00184 	movi	r3,6
8020acf4:	1880012e 	bgeu	r3,r2,8020acfc <___vfprintf_internal_r+0x1ca0>
8020acf8:	1805883a 	mov	r2,r3
8020acfc:	d8802e15 	stw	r2,184(sp)
8020ad00:	1000ef16 	blt	r2,zero,8020b0c0 <___vfprintf_internal_r+0x2064>
8020ad04:	042008b4 	movhi	r16,32802
8020ad08:	d8802a15 	stw	r2,168(sp)
8020ad0c:	dcc02d15 	stw	r19,180(sp)
8020ad10:	d8002915 	stw	zero,164(sp)
8020ad14:	d8003215 	stw	zero,200(sp)
8020ad18:	84364504 	addi	r16,r16,-9964
8020ad1c:	0039883a 	mov	fp,zero
8020ad20:	003aa206 	br	802097ac <__reset+0xfa1e97ac>
8020ad24:	0021883a 	mov	r16,zero
8020ad28:	003e0706 	br	8020a548 <__reset+0xfa1ea548>
8020ad2c:	d9002c17 	ldw	r4,176(sp)
8020ad30:	d9801e04 	addi	r6,sp,120
8020ad34:	b80b883a 	mov	r5,r23
8020ad38:	021191c0 	call	8021191c <__sprint_r>
8020ad3c:	1039c91e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020ad40:	d8802617 	ldw	r2,152(sp)
8020ad44:	d9403317 	ldw	r5,204(sp)
8020ad48:	d8c02017 	ldw	r3,128(sp)
8020ad4c:	da000404 	addi	r8,sp,16
8020ad50:	2885c83a 	sub	r2,r5,r2
8020ad54:	003dfb06 	br	8020a544 <__reset+0xfa1ea544>
8020ad58:	9080004c 	andi	r2,r18,1
8020ad5c:	103e8f1e 	bne	r2,zero,8020a79c <__reset+0xfa1ea79c>
8020ad60:	d8802117 	ldw	r2,132(sp)
8020ad64:	003e9e06 	br	8020a7e0 <__reset+0xfa1ea7e0>
8020ad68:	1025883a 	mov	r18,r2
8020ad6c:	0039883a 	mov	fp,zero
8020ad70:	00800084 	movi	r2,2
8020ad74:	003fd306 	br	8020acc4 <__reset+0xfa1eacc4>
8020ad78:	07000b44 	movi	fp,45
8020ad7c:	df002785 	stb	fp,158(sp)
8020ad80:	003a4006 	br	80209684 <__reset+0xfa1e9684>
8020ad84:	00c00b44 	movi	r3,45
8020ad88:	d8c02785 	stb	r3,158(sp)
8020ad8c:	d8802a15 	stw	r2,168(sp)
8020ad90:	dc802b17 	ldw	r18,172(sp)
8020ad94:	d8002915 	stw	zero,164(sp)
8020ad98:	07000b44 	movi	fp,45
8020ad9c:	003a8006 	br	802097a0 <__reset+0xfa1e97a0>
8020ada0:	042008b4 	movhi	r16,32802
8020ada4:	84363a04 	addi	r16,r16,-10008
8020ada8:	003f4706 	br	8020aac8 <__reset+0xfa1eaac8>
8020adac:	d8c02d17 	ldw	r3,180(sp)
8020adb0:	d9002f17 	ldw	r4,188(sp)
8020adb4:	18800017 	ldw	r2,0(r3)
8020adb8:	18c00104 	addi	r3,r3,4
8020adbc:	d8c02d15 	stw	r3,180(sp)
8020adc0:	11000015 	stw	r4,0(r2)
8020adc4:	0038dd06 	br	8020913c <__reset+0xfa1e913c>
8020adc8:	dd802617 	ldw	r22,152(sp)
8020adcc:	00bfff44 	movi	r2,-3
8020add0:	b0801c16 	blt	r22,r2,8020ae44 <___vfprintf_internal_r+0x1de8>
8020add4:	d9402917 	ldw	r5,164(sp)
8020add8:	2d801a16 	blt	r5,r22,8020ae44 <___vfprintf_internal_r+0x1de8>
8020addc:	dd803215 	stw	r22,200(sp)
8020ade0:	003e8906 	br	8020a808 <__reset+0xfa1ea808>
8020ade4:	012008b4 	movhi	r4,32802
8020ade8:	21364f84 	addi	r4,r4,-9922
8020adec:	d9002b15 	stw	r4,172(sp)
8020adf0:	003c9106 	br	8020a038 <__reset+0xfa1ea038>
8020adf4:	e005883a 	mov	r2,fp
8020adf8:	003e7906 	br	8020a7e0 <__reset+0xfa1ea7e0>
8020adfc:	d9402917 	ldw	r5,164(sp)
8020ae00:	df002783 	ldbu	fp,158(sp)
8020ae04:	dcc02d15 	stw	r19,180(sp)
8020ae08:	d9402a15 	stw	r5,168(sp)
8020ae0c:	d9402e15 	stw	r5,184(sp)
8020ae10:	d8002915 	stw	zero,164(sp)
8020ae14:	d8003215 	stw	zero,200(sp)
8020ae18:	003a5d06 	br	80209790 <__reset+0xfa1e9790>
8020ae1c:	9080004c 	andi	r2,r18,1
8020ae20:	0039883a 	mov	fp,zero
8020ae24:	10000426 	beq	r2,zero,8020ae38 <___vfprintf_internal_r+0x1ddc>
8020ae28:	00800c04 	movi	r2,48
8020ae2c:	dc001dc4 	addi	r16,sp,119
8020ae30:	d8801dc5 	stb	r2,119(sp)
8020ae34:	003b8006 	br	80209c38 <__reset+0xfa1e9c38>
8020ae38:	d8002e15 	stw	zero,184(sp)
8020ae3c:	dc001e04 	addi	r16,sp,120
8020ae40:	003a4d06 	br	80209778 <__reset+0xfa1e9778>
8020ae44:	8c7fff84 	addi	r17,r17,-2
8020ae48:	b5bfffc4 	addi	r22,r22,-1
8020ae4c:	dd802615 	stw	r22,152(sp)
8020ae50:	dc4022c5 	stb	r17,139(sp)
8020ae54:	b000bf16 	blt	r22,zero,8020b154 <___vfprintf_internal_r+0x20f8>
8020ae58:	00800ac4 	movi	r2,43
8020ae5c:	d8802305 	stb	r2,140(sp)
8020ae60:	00800244 	movi	r2,9
8020ae64:	15807016 	blt	r2,r22,8020b028 <___vfprintf_internal_r+0x1fcc>
8020ae68:	00800c04 	movi	r2,48
8020ae6c:	b5800c04 	addi	r22,r22,48
8020ae70:	d8802345 	stb	r2,141(sp)
8020ae74:	dd802385 	stb	r22,142(sp)
8020ae78:	d88023c4 	addi	r2,sp,143
8020ae7c:	df0022c4 	addi	fp,sp,139
8020ae80:	d8c03317 	ldw	r3,204(sp)
8020ae84:	1739c83a 	sub	fp,r2,fp
8020ae88:	d9003317 	ldw	r4,204(sp)
8020ae8c:	e0c7883a 	add	r3,fp,r3
8020ae90:	df003a15 	stw	fp,232(sp)
8020ae94:	d8c02e15 	stw	r3,184(sp)
8020ae98:	00800044 	movi	r2,1
8020ae9c:	1100b30e 	bge	r2,r4,8020b16c <___vfprintf_internal_r+0x2110>
8020aea0:	d8c02e17 	ldw	r3,184(sp)
8020aea4:	18c00044 	addi	r3,r3,1
8020aea8:	d8c02e15 	stw	r3,184(sp)
8020aeac:	1805883a 	mov	r2,r3
8020aeb0:	1800ac16 	blt	r3,zero,8020b164 <___vfprintf_internal_r+0x2108>
8020aeb4:	d8003215 	stw	zero,200(sp)
8020aeb8:	003e5d06 	br	8020a830 <__reset+0xfa1ea830>
8020aebc:	d9002c17 	ldw	r4,176(sp)
8020aec0:	d9801e04 	addi	r6,sp,120
8020aec4:	b80b883a 	mov	r5,r23
8020aec8:	021191c0 	call	8021191c <__sprint_r>
8020aecc:	1039651e 	bne	r2,zero,80209464 <__reset+0xfa1e9464>
8020aed0:	dc402617 	ldw	r17,152(sp)
8020aed4:	d8c02017 	ldw	r3,128(sp)
8020aed8:	d8801f17 	ldw	r2,124(sp)
8020aedc:	da000404 	addi	r8,sp,16
8020aee0:	003ed606 	br	8020aa3c <__reset+0xfa1eaa3c>
8020aee4:	582b883a 	mov	r21,r11
8020aee8:	d8002915 	stw	zero,164(sp)
8020aeec:	0038bd06 	br	802091e4 <__reset+0xfa1e91e4>
8020aef0:	d8802917 	ldw	r2,164(sp)
8020aef4:	103e071e 	bne	r2,zero,8020a714 <__reset+0xfa1ea714>
8020aef8:	dc002915 	stw	r16,164(sp)
8020aefc:	003e0506 	br	8020a714 <__reset+0xfa1ea714>
8020af00:	d9002917 	ldw	r4,164(sp)
8020af04:	20c00044 	addi	r3,r4,1
8020af08:	003e0f06 	br	8020a748 <__reset+0xfa1ea748>
8020af0c:	01400184 	movi	r5,6
8020af10:	d9402915 	stw	r5,164(sp)
8020af14:	003dff06 	br	8020a714 <__reset+0xfa1ea714>
8020af18:	d8802104 	addi	r2,sp,132
8020af1c:	d8800315 	stw	r2,12(sp)
8020af20:	d8802504 	addi	r2,sp,148
8020af24:	d8800215 	stw	r2,8(sp)
8020af28:	d8802604 	addi	r2,sp,152
8020af2c:	d8800115 	stw	r2,4(sp)
8020af30:	d8802917 	ldw	r2,164(sp)
8020af34:	d9403617 	ldw	r5,216(sp)
8020af38:	d9002c17 	ldw	r4,176(sp)
8020af3c:	d8800015 	stw	r2,0(sp)
8020af40:	01c000c4 	movi	r7,3
8020af44:	980d883a 	mov	r6,r19
8020af48:	da003d15 	stw	r8,244(sp)
8020af4c:	020b6800 	call	8020b680 <_dtoa_r>
8020af50:	d8c02917 	ldw	r3,164(sp)
8020af54:	da003d17 	ldw	r8,244(sp)
8020af58:	1021883a 	mov	r16,r2
8020af5c:	10f9883a 	add	fp,r2,r3
8020af60:	81000007 	ldb	r4,0(r16)
8020af64:	00800c04 	movi	r2,48
8020af68:	20805e26 	beq	r4,r2,8020b0e4 <___vfprintf_internal_r+0x2088>
8020af6c:	d8c02617 	ldw	r3,152(sp)
8020af70:	e0f9883a 	add	fp,fp,r3
8020af74:	003e0a06 	br	8020a7a0 <__reset+0xfa1ea7a0>
8020af78:	00c00b44 	movi	r3,45
8020af7c:	24e0003c 	xorhi	r19,r4,32768
8020af80:	d8c02a05 	stb	r3,168(sp)
8020af84:	003de906 	br	8020a72c <__reset+0xfa1ea72c>
8020af88:	d8c03217 	ldw	r3,200(sp)
8020af8c:	00c07a0e 	bge	zero,r3,8020b178 <___vfprintf_internal_r+0x211c>
8020af90:	00800044 	movi	r2,1
8020af94:	d9003317 	ldw	r4,204(sp)
8020af98:	1105883a 	add	r2,r2,r4
8020af9c:	d8802e15 	stw	r2,184(sp)
8020afa0:	10004e16 	blt	r2,zero,8020b0dc <___vfprintf_internal_r+0x2080>
8020afa4:	044019c4 	movi	r17,103
8020afa8:	003e2106 	br	8020a830 <__reset+0xfa1ea830>
8020afac:	d9002917 	ldw	r4,164(sp)
8020afb0:	d8802104 	addi	r2,sp,132
8020afb4:	d8800315 	stw	r2,12(sp)
8020afb8:	d9000015 	stw	r4,0(sp)
8020afbc:	d8802504 	addi	r2,sp,148
8020afc0:	d9403617 	ldw	r5,216(sp)
8020afc4:	d9002c17 	ldw	r4,176(sp)
8020afc8:	d8800215 	stw	r2,8(sp)
8020afcc:	d8802604 	addi	r2,sp,152
8020afd0:	d8800115 	stw	r2,4(sp)
8020afd4:	01c000c4 	movi	r7,3
8020afd8:	980d883a 	mov	r6,r19
8020afdc:	da003d15 	stw	r8,244(sp)
8020afe0:	020b6800 	call	8020b680 <_dtoa_r>
8020afe4:	d8c02917 	ldw	r3,164(sp)
8020afe8:	da003d17 	ldw	r8,244(sp)
8020afec:	1021883a 	mov	r16,r2
8020aff0:	00801184 	movi	r2,70
8020aff4:	80f9883a 	add	fp,r16,r3
8020aff8:	88bfd926 	beq	r17,r2,8020af60 <__reset+0xfa1eaf60>
8020affc:	003de806 	br	8020a7a0 <__reset+0xfa1ea7a0>
8020b000:	d9002917 	ldw	r4,164(sp)
8020b004:	00c04d0e 	bge	zero,r3,8020b13c <___vfprintf_internal_r+0x20e0>
8020b008:	2000441e 	bne	r4,zero,8020b11c <___vfprintf_internal_r+0x20c0>
8020b00c:	9480004c 	andi	r18,r18,1
8020b010:	9000421e 	bne	r18,zero,8020b11c <___vfprintf_internal_r+0x20c0>
8020b014:	1805883a 	mov	r2,r3
8020b018:	18007016 	blt	r3,zero,8020b1dc <___vfprintf_internal_r+0x2180>
8020b01c:	d8c03217 	ldw	r3,200(sp)
8020b020:	d8c02e15 	stw	r3,184(sp)
8020b024:	003e0206 	br	8020a830 <__reset+0xfa1ea830>
8020b028:	df0022c4 	addi	fp,sp,139
8020b02c:	dc002915 	stw	r16,164(sp)
8020b030:	4027883a 	mov	r19,r8
8020b034:	e021883a 	mov	r16,fp
8020b038:	b009883a 	mov	r4,r22
8020b03c:	01400284 	movi	r5,10
8020b040:	02142d00 	call	802142d0 <__modsi3>
8020b044:	10800c04 	addi	r2,r2,48
8020b048:	843fffc4 	addi	r16,r16,-1
8020b04c:	b009883a 	mov	r4,r22
8020b050:	01400284 	movi	r5,10
8020b054:	80800005 	stb	r2,0(r16)
8020b058:	021424c0 	call	8021424c <__divsi3>
8020b05c:	102d883a 	mov	r22,r2
8020b060:	00800244 	movi	r2,9
8020b064:	15bff416 	blt	r2,r22,8020b038 <__reset+0xfa1eb038>
8020b068:	9811883a 	mov	r8,r19
8020b06c:	b0800c04 	addi	r2,r22,48
8020b070:	8027883a 	mov	r19,r16
8020b074:	997fffc4 	addi	r5,r19,-1
8020b078:	98bfffc5 	stb	r2,-1(r19)
8020b07c:	dc002917 	ldw	r16,164(sp)
8020b080:	2f006a2e 	bgeu	r5,fp,8020b22c <___vfprintf_internal_r+0x21d0>
8020b084:	d9c02384 	addi	r7,sp,142
8020b088:	3ccfc83a 	sub	r7,r7,r19
8020b08c:	d9002344 	addi	r4,sp,141
8020b090:	e1cf883a 	add	r7,fp,r7
8020b094:	00000106 	br	8020b09c <___vfprintf_internal_r+0x2040>
8020b098:	28800003 	ldbu	r2,0(r5)
8020b09c:	20800005 	stb	r2,0(r4)
8020b0a0:	21000044 	addi	r4,r4,1
8020b0a4:	29400044 	addi	r5,r5,1
8020b0a8:	393ffb1e 	bne	r7,r4,8020b098 <__reset+0xfa1eb098>
8020b0ac:	d8802304 	addi	r2,sp,140
8020b0b0:	14c5c83a 	sub	r2,r2,r19
8020b0b4:	d8c02344 	addi	r3,sp,141
8020b0b8:	1885883a 	add	r2,r3,r2
8020b0bc:	003f7006 	br	8020ae80 <__reset+0xfa1eae80>
8020b0c0:	0005883a 	mov	r2,zero
8020b0c4:	003f0f06 	br	8020ad04 <__reset+0xfa1ead04>
8020b0c8:	d8c03217 	ldw	r3,200(sp)
8020b0cc:	18c00044 	addi	r3,r3,1
8020b0d0:	d8c02e15 	stw	r3,184(sp)
8020b0d4:	1805883a 	mov	r2,r3
8020b0d8:	183fb20e 	bge	r3,zero,8020afa4 <__reset+0xfa1eafa4>
8020b0dc:	0005883a 	mov	r2,zero
8020b0e0:	003fb006 	br	8020afa4 <__reset+0xfa1eafa4>
8020b0e4:	d9003617 	ldw	r4,216(sp)
8020b0e8:	000d883a 	mov	r6,zero
8020b0ec:	000f883a 	mov	r7,zero
8020b0f0:	980b883a 	mov	r5,r19
8020b0f4:	d8c03c15 	stw	r3,240(sp)
8020b0f8:	da003d15 	stw	r8,244(sp)
8020b0fc:	02155940 	call	80215594 <__eqdf2>
8020b100:	d8c03c17 	ldw	r3,240(sp)
8020b104:	da003d17 	ldw	r8,244(sp)
8020b108:	103f9826 	beq	r2,zero,8020af6c <__reset+0xfa1eaf6c>
8020b10c:	00800044 	movi	r2,1
8020b110:	10c7c83a 	sub	r3,r2,r3
8020b114:	d8c02615 	stw	r3,152(sp)
8020b118:	003f9506 	br	8020af70 <__reset+0xfa1eaf70>
8020b11c:	d9002917 	ldw	r4,164(sp)
8020b120:	d8c03217 	ldw	r3,200(sp)
8020b124:	20800044 	addi	r2,r4,1
8020b128:	1885883a 	add	r2,r3,r2
8020b12c:	d8802e15 	stw	r2,184(sp)
8020b130:	103dbf0e 	bge	r2,zero,8020a830 <__reset+0xfa1ea830>
8020b134:	0005883a 	mov	r2,zero
8020b138:	003dbd06 	br	8020a830 <__reset+0xfa1ea830>
8020b13c:	2000211e 	bne	r4,zero,8020b1c4 <___vfprintf_internal_r+0x2168>
8020b140:	9480004c 	andi	r18,r18,1
8020b144:	90001f1e 	bne	r18,zero,8020b1c4 <___vfprintf_internal_r+0x2168>
8020b148:	00800044 	movi	r2,1
8020b14c:	d8802e15 	stw	r2,184(sp)
8020b150:	003db706 	br	8020a830 <__reset+0xfa1ea830>
8020b154:	00800b44 	movi	r2,45
8020b158:	05adc83a 	sub	r22,zero,r22
8020b15c:	d8802305 	stb	r2,140(sp)
8020b160:	003f3f06 	br	8020ae60 <__reset+0xfa1eae60>
8020b164:	0005883a 	mov	r2,zero
8020b168:	003f5206 	br	8020aeb4 <__reset+0xfa1eaeb4>
8020b16c:	90a4703a 	and	r18,r18,r2
8020b170:	903f4e26 	beq	r18,zero,8020aeac <__reset+0xfa1eaeac>
8020b174:	003f4a06 	br	8020aea0 <__reset+0xfa1eaea0>
8020b178:	00800084 	movi	r2,2
8020b17c:	10c5c83a 	sub	r2,r2,r3
8020b180:	003f8406 	br	8020af94 <__reset+0xfa1eaf94>
8020b184:	d8802d17 	ldw	r2,180(sp)
8020b188:	d9002d17 	ldw	r4,180(sp)
8020b18c:	ac400043 	ldbu	r17,1(r21)
8020b190:	10800017 	ldw	r2,0(r2)
8020b194:	582b883a 	mov	r21,r11
8020b198:	d8802915 	stw	r2,164(sp)
8020b19c:	20800104 	addi	r2,r4,4
8020b1a0:	d9002917 	ldw	r4,164(sp)
8020b1a4:	d8802d15 	stw	r2,180(sp)
8020b1a8:	203e7a0e 	bge	r4,zero,8020ab94 <__reset+0xfa1eab94>
8020b1ac:	8c403fcc 	andi	r17,r17,255
8020b1b0:	00bfffc4 	movi	r2,-1
8020b1b4:	8c40201c 	xori	r17,r17,128
8020b1b8:	d8802915 	stw	r2,164(sp)
8020b1bc:	8c7fe004 	addi	r17,r17,-128
8020b1c0:	00380706 	br	802091e0 <__reset+0xfa1e91e0>
8020b1c4:	d8c02917 	ldw	r3,164(sp)
8020b1c8:	18c00084 	addi	r3,r3,2
8020b1cc:	d8c02e15 	stw	r3,184(sp)
8020b1d0:	1805883a 	mov	r2,r3
8020b1d4:	183d960e 	bge	r3,zero,8020a830 <__reset+0xfa1ea830>
8020b1d8:	003fd606 	br	8020b134 <__reset+0xfa1eb134>
8020b1dc:	0005883a 	mov	r2,zero
8020b1e0:	003f8e06 	br	8020b01c <__reset+0xfa1eb01c>
8020b1e4:	9080004c 	andi	r2,r18,1
8020b1e8:	103f811e 	bne	r2,zero,8020aff0 <__reset+0xfa1eaff0>
8020b1ec:	d8802117 	ldw	r2,132(sp)
8020b1f0:	1405c83a 	sub	r2,r2,r16
8020b1f4:	d8803315 	stw	r2,204(sp)
8020b1f8:	b47ef326 	beq	r22,r17,8020adc8 <__reset+0xfa1eadc8>
8020b1fc:	dd802617 	ldw	r22,152(sp)
8020b200:	003f1106 	br	8020ae48 <__reset+0xfa1eae48>
8020b204:	d9c02785 	stb	r7,158(sp)
8020b208:	00390406 	br	8020961c <__reset+0xfa1e961c>
8020b20c:	d9c02785 	stb	r7,158(sp)
8020b210:	0038d306 	br	80209560 <__reset+0xfa1e9560>
8020b214:	d9c02785 	stb	r7,158(sp)
8020b218:	003a6106 	br	80209ba0 <__reset+0xfa1e9ba0>
8020b21c:	d9c02785 	stb	r7,158(sp)
8020b220:	003af806 	br	80209e04 <__reset+0xfa1e9e04>
8020b224:	0005883a 	mov	r2,zero
8020b228:	003d7e06 	br	8020a824 <__reset+0xfa1ea824>
8020b22c:	d8802344 	addi	r2,sp,141
8020b230:	003f1306 	br	8020ae80 <__reset+0xfa1eae80>
8020b234:	d9c02785 	stb	r7,158(sp)
8020b238:	00392306 	br	802096c8 <__reset+0xfa1e96c8>
8020b23c:	d9c02785 	stb	r7,158(sp)
8020b240:	003aa906 	br	80209ce8 <__reset+0xfa1e9ce8>
8020b244:	d9c02785 	stb	r7,158(sp)
8020b248:	003a3d06 	br	80209b40 <__reset+0xfa1e9b40>
8020b24c:	d9c02785 	stb	r7,158(sp)
8020b250:	003aca06 	br	80209d7c <__reset+0xfa1e9d7c>

8020b254 <__vfprintf_internal>:
8020b254:	00a008b4 	movhi	r2,32802
8020b258:	10be7d04 	addi	r2,r2,-1548
8020b25c:	300f883a 	mov	r7,r6
8020b260:	280d883a 	mov	r6,r5
8020b264:	200b883a 	mov	r5,r4
8020b268:	11000017 	ldw	r4,0(r2)
8020b26c:	020905c1 	jmpi	8020905c <___vfprintf_internal_r>

8020b270 <__sbprintf>:
8020b270:	2880030b 	ldhu	r2,12(r5)
8020b274:	2ac01917 	ldw	r11,100(r5)
8020b278:	2a80038b 	ldhu	r10,14(r5)
8020b27c:	2a400717 	ldw	r9,28(r5)
8020b280:	2a000917 	ldw	r8,36(r5)
8020b284:	defee204 	addi	sp,sp,-1144
8020b288:	00c10004 	movi	r3,1024
8020b28c:	dc011a15 	stw	r16,1128(sp)
8020b290:	10bfff4c 	andi	r2,r2,65533
8020b294:	2821883a 	mov	r16,r5
8020b298:	d8cb883a 	add	r5,sp,r3
8020b29c:	dc811c15 	stw	r18,1136(sp)
8020b2a0:	dc411b15 	stw	r17,1132(sp)
8020b2a4:	dfc11d15 	stw	ra,1140(sp)
8020b2a8:	2025883a 	mov	r18,r4
8020b2ac:	d881030d 	sth	r2,1036(sp)
8020b2b0:	dac11915 	stw	r11,1124(sp)
8020b2b4:	da81038d 	sth	r10,1038(sp)
8020b2b8:	da410715 	stw	r9,1052(sp)
8020b2bc:	da010915 	stw	r8,1060(sp)
8020b2c0:	dec10015 	stw	sp,1024(sp)
8020b2c4:	dec10415 	stw	sp,1040(sp)
8020b2c8:	d8c10215 	stw	r3,1032(sp)
8020b2cc:	d8c10515 	stw	r3,1044(sp)
8020b2d0:	d8010615 	stw	zero,1048(sp)
8020b2d4:	020905c0 	call	8020905c <___vfprintf_internal_r>
8020b2d8:	1023883a 	mov	r17,r2
8020b2dc:	10000416 	blt	r2,zero,8020b2f0 <__sbprintf+0x80>
8020b2e0:	d9410004 	addi	r5,sp,1024
8020b2e4:	9009883a 	mov	r4,r18
8020b2e8:	020cf240 	call	8020cf24 <_fflush_r>
8020b2ec:	10000d1e 	bne	r2,zero,8020b324 <__sbprintf+0xb4>
8020b2f0:	d881030b 	ldhu	r2,1036(sp)
8020b2f4:	1080100c 	andi	r2,r2,64
8020b2f8:	10000326 	beq	r2,zero,8020b308 <__sbprintf+0x98>
8020b2fc:	8080030b 	ldhu	r2,12(r16)
8020b300:	10801014 	ori	r2,r2,64
8020b304:	8080030d 	sth	r2,12(r16)
8020b308:	8805883a 	mov	r2,r17
8020b30c:	dfc11d17 	ldw	ra,1140(sp)
8020b310:	dc811c17 	ldw	r18,1136(sp)
8020b314:	dc411b17 	ldw	r17,1132(sp)
8020b318:	dc011a17 	ldw	r16,1128(sp)
8020b31c:	dec11e04 	addi	sp,sp,1144
8020b320:	f800283a 	ret
8020b324:	047fffc4 	movi	r17,-1
8020b328:	003ff106 	br	8020b2f0 <__reset+0xfa1eb2f0>

8020b32c <__swsetup_r>:
8020b32c:	00a008b4 	movhi	r2,32802
8020b330:	defffd04 	addi	sp,sp,-12
8020b334:	10be7d04 	addi	r2,r2,-1548
8020b338:	dc400115 	stw	r17,4(sp)
8020b33c:	2023883a 	mov	r17,r4
8020b340:	11000017 	ldw	r4,0(r2)
8020b344:	dc000015 	stw	r16,0(sp)
8020b348:	dfc00215 	stw	ra,8(sp)
8020b34c:	2821883a 	mov	r16,r5
8020b350:	20000226 	beq	r4,zero,8020b35c <__swsetup_r+0x30>
8020b354:	20800e17 	ldw	r2,56(r4)
8020b358:	10003126 	beq	r2,zero,8020b420 <__swsetup_r+0xf4>
8020b35c:	8080030b 	ldhu	r2,12(r16)
8020b360:	10c0020c 	andi	r3,r2,8
8020b364:	1009883a 	mov	r4,r2
8020b368:	18000f26 	beq	r3,zero,8020b3a8 <__swsetup_r+0x7c>
8020b36c:	80c00417 	ldw	r3,16(r16)
8020b370:	18001526 	beq	r3,zero,8020b3c8 <__swsetup_r+0x9c>
8020b374:	1100004c 	andi	r4,r2,1
8020b378:	20001c1e 	bne	r4,zero,8020b3ec <__swsetup_r+0xc0>
8020b37c:	1080008c 	andi	r2,r2,2
8020b380:	1000291e 	bne	r2,zero,8020b428 <__swsetup_r+0xfc>
8020b384:	80800517 	ldw	r2,20(r16)
8020b388:	80800215 	stw	r2,8(r16)
8020b38c:	18001c26 	beq	r3,zero,8020b400 <__swsetup_r+0xd4>
8020b390:	0005883a 	mov	r2,zero
8020b394:	dfc00217 	ldw	ra,8(sp)
8020b398:	dc400117 	ldw	r17,4(sp)
8020b39c:	dc000017 	ldw	r16,0(sp)
8020b3a0:	dec00304 	addi	sp,sp,12
8020b3a4:	f800283a 	ret
8020b3a8:	2080040c 	andi	r2,r4,16
8020b3ac:	10002e26 	beq	r2,zero,8020b468 <__swsetup_r+0x13c>
8020b3b0:	2080010c 	andi	r2,r4,4
8020b3b4:	10001e1e 	bne	r2,zero,8020b430 <__swsetup_r+0x104>
8020b3b8:	80c00417 	ldw	r3,16(r16)
8020b3bc:	20800214 	ori	r2,r4,8
8020b3c0:	8080030d 	sth	r2,12(r16)
8020b3c4:	183feb1e 	bne	r3,zero,8020b374 <__reset+0xfa1eb374>
8020b3c8:	1100a00c 	andi	r4,r2,640
8020b3cc:	01408004 	movi	r5,512
8020b3d0:	217fe826 	beq	r4,r5,8020b374 <__reset+0xfa1eb374>
8020b3d4:	800b883a 	mov	r5,r16
8020b3d8:	8809883a 	mov	r4,r17
8020b3dc:	020dea40 	call	8020dea4 <__smakebuf_r>
8020b3e0:	8080030b 	ldhu	r2,12(r16)
8020b3e4:	80c00417 	ldw	r3,16(r16)
8020b3e8:	003fe206 	br	8020b374 <__reset+0xfa1eb374>
8020b3ec:	80800517 	ldw	r2,20(r16)
8020b3f0:	80000215 	stw	zero,8(r16)
8020b3f4:	0085c83a 	sub	r2,zero,r2
8020b3f8:	80800615 	stw	r2,24(r16)
8020b3fc:	183fe41e 	bne	r3,zero,8020b390 <__reset+0xfa1eb390>
8020b400:	80c0030b 	ldhu	r3,12(r16)
8020b404:	0005883a 	mov	r2,zero
8020b408:	1900200c 	andi	r4,r3,128
8020b40c:	203fe126 	beq	r4,zero,8020b394 <__reset+0xfa1eb394>
8020b410:	18c01014 	ori	r3,r3,64
8020b414:	80c0030d 	sth	r3,12(r16)
8020b418:	00bfffc4 	movi	r2,-1
8020b41c:	003fdd06 	br	8020b394 <__reset+0xfa1eb394>
8020b420:	020d3000 	call	8020d300 <__sinit>
8020b424:	003fcd06 	br	8020b35c <__reset+0xfa1eb35c>
8020b428:	0005883a 	mov	r2,zero
8020b42c:	003fd606 	br	8020b388 <__reset+0xfa1eb388>
8020b430:	81400c17 	ldw	r5,48(r16)
8020b434:	28000626 	beq	r5,zero,8020b450 <__swsetup_r+0x124>
8020b438:	80801004 	addi	r2,r16,64
8020b43c:	28800326 	beq	r5,r2,8020b44c <__swsetup_r+0x120>
8020b440:	8809883a 	mov	r4,r17
8020b444:	020d4740 	call	8020d474 <_free_r>
8020b448:	8100030b 	ldhu	r4,12(r16)
8020b44c:	80000c15 	stw	zero,48(r16)
8020b450:	80c00417 	ldw	r3,16(r16)
8020b454:	00bff6c4 	movi	r2,-37
8020b458:	1108703a 	and	r4,r2,r4
8020b45c:	80000115 	stw	zero,4(r16)
8020b460:	80c00015 	stw	r3,0(r16)
8020b464:	003fd506 	br	8020b3bc <__reset+0xfa1eb3bc>
8020b468:	00800244 	movi	r2,9
8020b46c:	88800015 	stw	r2,0(r17)
8020b470:	20801014 	ori	r2,r4,64
8020b474:	8080030d 	sth	r2,12(r16)
8020b478:	00bfffc4 	movi	r2,-1
8020b47c:	003fc506 	br	8020b394 <__reset+0xfa1eb394>

8020b480 <quorem>:
8020b480:	defff704 	addi	sp,sp,-36
8020b484:	dc800215 	stw	r18,8(sp)
8020b488:	20800417 	ldw	r2,16(r4)
8020b48c:	2c800417 	ldw	r18,16(r5)
8020b490:	dfc00815 	stw	ra,32(sp)
8020b494:	ddc00715 	stw	r23,28(sp)
8020b498:	dd800615 	stw	r22,24(sp)
8020b49c:	dd400515 	stw	r21,20(sp)
8020b4a0:	dd000415 	stw	r20,16(sp)
8020b4a4:	dcc00315 	stw	r19,12(sp)
8020b4a8:	dc400115 	stw	r17,4(sp)
8020b4ac:	dc000015 	stw	r16,0(sp)
8020b4b0:	14807116 	blt	r2,r18,8020b678 <quorem+0x1f8>
8020b4b4:	94bfffc4 	addi	r18,r18,-1
8020b4b8:	94ad883a 	add	r22,r18,r18
8020b4bc:	b5ad883a 	add	r22,r22,r22
8020b4c0:	2c400504 	addi	r17,r5,20
8020b4c4:	8da9883a 	add	r20,r17,r22
8020b4c8:	25400504 	addi	r21,r4,20
8020b4cc:	282f883a 	mov	r23,r5
8020b4d0:	adad883a 	add	r22,r21,r22
8020b4d4:	a1400017 	ldw	r5,0(r20)
8020b4d8:	2021883a 	mov	r16,r4
8020b4dc:	b1000017 	ldw	r4,0(r22)
8020b4e0:	29400044 	addi	r5,r5,1
8020b4e4:	02143440 	call	80214344 <__udivsi3>
8020b4e8:	1027883a 	mov	r19,r2
8020b4ec:	10002c26 	beq	r2,zero,8020b5a0 <quorem+0x120>
8020b4f0:	a813883a 	mov	r9,r21
8020b4f4:	880b883a 	mov	r5,r17
8020b4f8:	0009883a 	mov	r4,zero
8020b4fc:	000d883a 	mov	r6,zero
8020b500:	2a000017 	ldw	r8,0(r5)
8020b504:	49c00017 	ldw	r7,0(r9)
8020b508:	29400104 	addi	r5,r5,4
8020b50c:	40bfffcc 	andi	r2,r8,65535
8020b510:	14c5383a 	mul	r2,r2,r19
8020b514:	4010d43a 	srli	r8,r8,16
8020b518:	38ffffcc 	andi	r3,r7,65535
8020b51c:	1105883a 	add	r2,r2,r4
8020b520:	1008d43a 	srli	r4,r2,16
8020b524:	44d1383a 	mul	r8,r8,r19
8020b528:	198d883a 	add	r6,r3,r6
8020b52c:	10ffffcc 	andi	r3,r2,65535
8020b530:	30c7c83a 	sub	r3,r6,r3
8020b534:	380ed43a 	srli	r7,r7,16
8020b538:	4105883a 	add	r2,r8,r4
8020b53c:	180dd43a 	srai	r6,r3,16
8020b540:	113fffcc 	andi	r4,r2,65535
8020b544:	390fc83a 	sub	r7,r7,r4
8020b548:	398d883a 	add	r6,r7,r6
8020b54c:	300e943a 	slli	r7,r6,16
8020b550:	18ffffcc 	andi	r3,r3,65535
8020b554:	1008d43a 	srli	r4,r2,16
8020b558:	38ceb03a 	or	r7,r7,r3
8020b55c:	49c00015 	stw	r7,0(r9)
8020b560:	300dd43a 	srai	r6,r6,16
8020b564:	4a400104 	addi	r9,r9,4
8020b568:	a17fe52e 	bgeu	r20,r5,8020b500 <__reset+0xfa1eb500>
8020b56c:	b0800017 	ldw	r2,0(r22)
8020b570:	10000b1e 	bne	r2,zero,8020b5a0 <quorem+0x120>
8020b574:	b0bfff04 	addi	r2,r22,-4
8020b578:	a880082e 	bgeu	r21,r2,8020b59c <quorem+0x11c>
8020b57c:	b0ffff17 	ldw	r3,-4(r22)
8020b580:	18000326 	beq	r3,zero,8020b590 <quorem+0x110>
8020b584:	00000506 	br	8020b59c <quorem+0x11c>
8020b588:	10c00017 	ldw	r3,0(r2)
8020b58c:	1800031e 	bne	r3,zero,8020b59c <quorem+0x11c>
8020b590:	10bfff04 	addi	r2,r2,-4
8020b594:	94bfffc4 	addi	r18,r18,-1
8020b598:	a8bffb36 	bltu	r21,r2,8020b588 <__reset+0xfa1eb588>
8020b59c:	84800415 	stw	r18,16(r16)
8020b5a0:	b80b883a 	mov	r5,r23
8020b5a4:	8009883a 	mov	r4,r16
8020b5a8:	020f49c0 	call	8020f49c <__mcmp>
8020b5ac:	10002616 	blt	r2,zero,8020b648 <quorem+0x1c8>
8020b5b0:	9cc00044 	addi	r19,r19,1
8020b5b4:	a805883a 	mov	r2,r21
8020b5b8:	000b883a 	mov	r5,zero
8020b5bc:	11000017 	ldw	r4,0(r2)
8020b5c0:	89800017 	ldw	r6,0(r17)
8020b5c4:	10800104 	addi	r2,r2,4
8020b5c8:	20ffffcc 	andi	r3,r4,65535
8020b5cc:	194b883a 	add	r5,r3,r5
8020b5d0:	30ffffcc 	andi	r3,r6,65535
8020b5d4:	28c7c83a 	sub	r3,r5,r3
8020b5d8:	300cd43a 	srli	r6,r6,16
8020b5dc:	2008d43a 	srli	r4,r4,16
8020b5e0:	180bd43a 	srai	r5,r3,16
8020b5e4:	18ffffcc 	andi	r3,r3,65535
8020b5e8:	2189c83a 	sub	r4,r4,r6
8020b5ec:	2149883a 	add	r4,r4,r5
8020b5f0:	200c943a 	slli	r6,r4,16
8020b5f4:	8c400104 	addi	r17,r17,4
8020b5f8:	200bd43a 	srai	r5,r4,16
8020b5fc:	30c6b03a 	or	r3,r6,r3
8020b600:	10ffff15 	stw	r3,-4(r2)
8020b604:	a47fed2e 	bgeu	r20,r17,8020b5bc <__reset+0xfa1eb5bc>
8020b608:	9485883a 	add	r2,r18,r18
8020b60c:	1085883a 	add	r2,r2,r2
8020b610:	a887883a 	add	r3,r21,r2
8020b614:	18800017 	ldw	r2,0(r3)
8020b618:	10000b1e 	bne	r2,zero,8020b648 <quorem+0x1c8>
8020b61c:	18bfff04 	addi	r2,r3,-4
8020b620:	a880082e 	bgeu	r21,r2,8020b644 <quorem+0x1c4>
8020b624:	18ffff17 	ldw	r3,-4(r3)
8020b628:	18000326 	beq	r3,zero,8020b638 <quorem+0x1b8>
8020b62c:	00000506 	br	8020b644 <quorem+0x1c4>
8020b630:	10c00017 	ldw	r3,0(r2)
8020b634:	1800031e 	bne	r3,zero,8020b644 <quorem+0x1c4>
8020b638:	10bfff04 	addi	r2,r2,-4
8020b63c:	94bfffc4 	addi	r18,r18,-1
8020b640:	a8bffb36 	bltu	r21,r2,8020b630 <__reset+0xfa1eb630>
8020b644:	84800415 	stw	r18,16(r16)
8020b648:	9805883a 	mov	r2,r19
8020b64c:	dfc00817 	ldw	ra,32(sp)
8020b650:	ddc00717 	ldw	r23,28(sp)
8020b654:	dd800617 	ldw	r22,24(sp)
8020b658:	dd400517 	ldw	r21,20(sp)
8020b65c:	dd000417 	ldw	r20,16(sp)
8020b660:	dcc00317 	ldw	r19,12(sp)
8020b664:	dc800217 	ldw	r18,8(sp)
8020b668:	dc400117 	ldw	r17,4(sp)
8020b66c:	dc000017 	ldw	r16,0(sp)
8020b670:	dec00904 	addi	sp,sp,36
8020b674:	f800283a 	ret
8020b678:	0005883a 	mov	r2,zero
8020b67c:	003ff306 	br	8020b64c <__reset+0xfa1eb64c>

8020b680 <_dtoa_r>:
8020b680:	20801017 	ldw	r2,64(r4)
8020b684:	deffde04 	addi	sp,sp,-136
8020b688:	df002015 	stw	fp,128(sp)
8020b68c:	dcc01b15 	stw	r19,108(sp)
8020b690:	dc801a15 	stw	r18,104(sp)
8020b694:	dc401915 	stw	r17,100(sp)
8020b698:	dc001815 	stw	r16,96(sp)
8020b69c:	dfc02115 	stw	ra,132(sp)
8020b6a0:	ddc01f15 	stw	r23,124(sp)
8020b6a4:	dd801e15 	stw	r22,120(sp)
8020b6a8:	dd401d15 	stw	r21,116(sp)
8020b6ac:	dd001c15 	stw	r20,112(sp)
8020b6b0:	d9c00315 	stw	r7,12(sp)
8020b6b4:	2039883a 	mov	fp,r4
8020b6b8:	3023883a 	mov	r17,r6
8020b6bc:	2825883a 	mov	r18,r5
8020b6c0:	dc002417 	ldw	r16,144(sp)
8020b6c4:	3027883a 	mov	r19,r6
8020b6c8:	10000826 	beq	r2,zero,8020b6ec <_dtoa_r+0x6c>
8020b6cc:	21801117 	ldw	r6,68(r4)
8020b6d0:	00c00044 	movi	r3,1
8020b6d4:	100b883a 	mov	r5,r2
8020b6d8:	1986983a 	sll	r3,r3,r6
8020b6dc:	11800115 	stw	r6,4(r2)
8020b6e0:	10c00215 	stw	r3,8(r2)
8020b6e4:	020ec7c0 	call	8020ec7c <_Bfree>
8020b6e8:	e0001015 	stw	zero,64(fp)
8020b6ec:	88002e16 	blt	r17,zero,8020b7a8 <_dtoa_r+0x128>
8020b6f0:	80000015 	stw	zero,0(r16)
8020b6f4:	889ffc2c 	andhi	r2,r17,32752
8020b6f8:	00dffc34 	movhi	r3,32752
8020b6fc:	10c01c26 	beq	r2,r3,8020b770 <_dtoa_r+0xf0>
8020b700:	000d883a 	mov	r6,zero
8020b704:	000f883a 	mov	r7,zero
8020b708:	9009883a 	mov	r4,r18
8020b70c:	980b883a 	mov	r5,r19
8020b710:	02155940 	call	80215594 <__eqdf2>
8020b714:	10002b1e 	bne	r2,zero,8020b7c4 <_dtoa_r+0x144>
8020b718:	d9c02317 	ldw	r7,140(sp)
8020b71c:	00800044 	movi	r2,1
8020b720:	38800015 	stw	r2,0(r7)
8020b724:	d8802517 	ldw	r2,148(sp)
8020b728:	10019e26 	beq	r2,zero,8020bda4 <_dtoa_r+0x724>
8020b72c:	d8c02517 	ldw	r3,148(sp)
8020b730:	00a008b4 	movhi	r2,32802
8020b734:	10b64744 	addi	r2,r2,-9955
8020b738:	18800015 	stw	r2,0(r3)
8020b73c:	10bfffc4 	addi	r2,r2,-1
8020b740:	dfc02117 	ldw	ra,132(sp)
8020b744:	df002017 	ldw	fp,128(sp)
8020b748:	ddc01f17 	ldw	r23,124(sp)
8020b74c:	dd801e17 	ldw	r22,120(sp)
8020b750:	dd401d17 	ldw	r21,116(sp)
8020b754:	dd001c17 	ldw	r20,112(sp)
8020b758:	dcc01b17 	ldw	r19,108(sp)
8020b75c:	dc801a17 	ldw	r18,104(sp)
8020b760:	dc401917 	ldw	r17,100(sp)
8020b764:	dc001817 	ldw	r16,96(sp)
8020b768:	dec02204 	addi	sp,sp,136
8020b76c:	f800283a 	ret
8020b770:	d8c02317 	ldw	r3,140(sp)
8020b774:	0089c3c4 	movi	r2,9999
8020b778:	18800015 	stw	r2,0(r3)
8020b77c:	90017726 	beq	r18,zero,8020bd5c <_dtoa_r+0x6dc>
8020b780:	00a008b4 	movhi	r2,32802
8020b784:	10b65b04 	addi	r2,r2,-9876
8020b788:	d9002517 	ldw	r4,148(sp)
8020b78c:	203fec26 	beq	r4,zero,8020b740 <__reset+0xfa1eb740>
8020b790:	10c000c7 	ldb	r3,3(r2)
8020b794:	1801781e 	bne	r3,zero,8020bd78 <_dtoa_r+0x6f8>
8020b798:	10c000c4 	addi	r3,r2,3
8020b79c:	d9802517 	ldw	r6,148(sp)
8020b7a0:	30c00015 	stw	r3,0(r6)
8020b7a4:	003fe606 	br	8020b740 <__reset+0xfa1eb740>
8020b7a8:	04e00034 	movhi	r19,32768
8020b7ac:	9cffffc4 	addi	r19,r19,-1
8020b7b0:	00800044 	movi	r2,1
8020b7b4:	8ce6703a 	and	r19,r17,r19
8020b7b8:	80800015 	stw	r2,0(r16)
8020b7bc:	9823883a 	mov	r17,r19
8020b7c0:	003fcc06 	br	8020b6f4 <__reset+0xfa1eb6f4>
8020b7c4:	d8800204 	addi	r2,sp,8
8020b7c8:	d8800015 	stw	r2,0(sp)
8020b7cc:	d9c00104 	addi	r7,sp,4
8020b7d0:	900b883a 	mov	r5,r18
8020b7d4:	980d883a 	mov	r6,r19
8020b7d8:	e009883a 	mov	r4,fp
8020b7dc:	8820d53a 	srli	r16,r17,20
8020b7e0:	020f8680 	call	8020f868 <__d2b>
8020b7e4:	d8800915 	stw	r2,36(sp)
8020b7e8:	8001651e 	bne	r16,zero,8020bd80 <_dtoa_r+0x700>
8020b7ec:	dd800217 	ldw	r22,8(sp)
8020b7f0:	dc000117 	ldw	r16,4(sp)
8020b7f4:	00800804 	movi	r2,32
8020b7f8:	b421883a 	add	r16,r22,r16
8020b7fc:	80c10c84 	addi	r3,r16,1074
8020b800:	10c2d10e 	bge	r2,r3,8020c348 <_dtoa_r+0xcc8>
8020b804:	00801004 	movi	r2,64
8020b808:	81010484 	addi	r4,r16,1042
8020b80c:	10c7c83a 	sub	r3,r2,r3
8020b810:	9108d83a 	srl	r4,r18,r4
8020b814:	88e2983a 	sll	r17,r17,r3
8020b818:	2448b03a 	or	r4,r4,r17
8020b81c:	021695c0 	call	8021695c <__floatunsidf>
8020b820:	017f8434 	movhi	r5,65040
8020b824:	01800044 	movi	r6,1
8020b828:	1009883a 	mov	r4,r2
8020b82c:	194b883a 	add	r5,r3,r5
8020b830:	843fffc4 	addi	r16,r16,-1
8020b834:	d9801115 	stw	r6,68(sp)
8020b838:	000d883a 	mov	r6,zero
8020b83c:	01cffe34 	movhi	r7,16376
8020b840:	0215f040 	call	80215f04 <__subdf3>
8020b844:	0198dbf4 	movhi	r6,25455
8020b848:	01cff4f4 	movhi	r7,16339
8020b84c:	3190d844 	addi	r6,r6,17249
8020b850:	39e1e9c4 	addi	r7,r7,-30809
8020b854:	1009883a 	mov	r4,r2
8020b858:	180b883a 	mov	r5,r3
8020b85c:	02157ec0 	call	802157ec <__muldf3>
8020b860:	01a2d874 	movhi	r6,35681
8020b864:	01cff1f4 	movhi	r7,16327
8020b868:	31b22cc4 	addi	r6,r6,-14157
8020b86c:	39e28a04 	addi	r7,r7,-30168
8020b870:	180b883a 	mov	r5,r3
8020b874:	1009883a 	mov	r4,r2
8020b878:	02144000 	call	80214400 <__adddf3>
8020b87c:	8009883a 	mov	r4,r16
8020b880:	1029883a 	mov	r20,r2
8020b884:	1823883a 	mov	r17,r3
8020b888:	02168800 	call	80216880 <__floatsidf>
8020b88c:	019427f4 	movhi	r6,20639
8020b890:	01cff4f4 	movhi	r7,16339
8020b894:	319e7ec4 	addi	r6,r6,31227
8020b898:	39d104c4 	addi	r7,r7,17427
8020b89c:	1009883a 	mov	r4,r2
8020b8a0:	180b883a 	mov	r5,r3
8020b8a4:	02157ec0 	call	802157ec <__muldf3>
8020b8a8:	100d883a 	mov	r6,r2
8020b8ac:	180f883a 	mov	r7,r3
8020b8b0:	a009883a 	mov	r4,r20
8020b8b4:	880b883a 	mov	r5,r17
8020b8b8:	02144000 	call	80214400 <__adddf3>
8020b8bc:	1009883a 	mov	r4,r2
8020b8c0:	180b883a 	mov	r5,r3
8020b8c4:	1029883a 	mov	r20,r2
8020b8c8:	1823883a 	mov	r17,r3
8020b8cc:	02168000 	call	80216800 <__fixdfsi>
8020b8d0:	000d883a 	mov	r6,zero
8020b8d4:	000f883a 	mov	r7,zero
8020b8d8:	a009883a 	mov	r4,r20
8020b8dc:	880b883a 	mov	r5,r17
8020b8e0:	d8800515 	stw	r2,20(sp)
8020b8e4:	02156f80 	call	802156f8 <__ledf2>
8020b8e8:	10028716 	blt	r2,zero,8020c308 <_dtoa_r+0xc88>
8020b8ec:	d8c00517 	ldw	r3,20(sp)
8020b8f0:	00800584 	movi	r2,22
8020b8f4:	10c27536 	bltu	r2,r3,8020c2cc <_dtoa_r+0xc4c>
8020b8f8:	180490fa 	slli	r2,r3,3
8020b8fc:	00e008b4 	movhi	r3,32802
8020b900:	18f67604 	addi	r3,r3,-9768
8020b904:	1885883a 	add	r2,r3,r2
8020b908:	11000017 	ldw	r4,0(r2)
8020b90c:	11400117 	ldw	r5,4(r2)
8020b910:	900d883a 	mov	r6,r18
8020b914:	980f883a 	mov	r7,r19
8020b918:	021561c0 	call	8021561c <__gedf2>
8020b91c:	00828d0e 	bge	zero,r2,8020c354 <_dtoa_r+0xcd4>
8020b920:	d9000517 	ldw	r4,20(sp)
8020b924:	d8000e15 	stw	zero,56(sp)
8020b928:	213fffc4 	addi	r4,r4,-1
8020b92c:	d9000515 	stw	r4,20(sp)
8020b930:	b42dc83a 	sub	r22,r22,r16
8020b934:	b5bfffc4 	addi	r22,r22,-1
8020b938:	b0026f16 	blt	r22,zero,8020c2f8 <_dtoa_r+0xc78>
8020b93c:	d8000815 	stw	zero,32(sp)
8020b940:	d9c00517 	ldw	r7,20(sp)
8020b944:	38026416 	blt	r7,zero,8020c2d8 <_dtoa_r+0xc58>
8020b948:	b1ed883a 	add	r22,r22,r7
8020b94c:	d9c00d15 	stw	r7,52(sp)
8020b950:	d8000a15 	stw	zero,40(sp)
8020b954:	d9800317 	ldw	r6,12(sp)
8020b958:	00800244 	movi	r2,9
8020b95c:	11811436 	bltu	r2,r6,8020bdb0 <_dtoa_r+0x730>
8020b960:	00800144 	movi	r2,5
8020b964:	1184e10e 	bge	r2,r6,8020ccec <_dtoa_r+0x166c>
8020b968:	31bfff04 	addi	r6,r6,-4
8020b96c:	d9800315 	stw	r6,12(sp)
8020b970:	0023883a 	mov	r17,zero
8020b974:	d9800317 	ldw	r6,12(sp)
8020b978:	008000c4 	movi	r2,3
8020b97c:	30836726 	beq	r6,r2,8020c71c <_dtoa_r+0x109c>
8020b980:	1183410e 	bge	r2,r6,8020c688 <_dtoa_r+0x1008>
8020b984:	d9c00317 	ldw	r7,12(sp)
8020b988:	00800104 	movi	r2,4
8020b98c:	38827c26 	beq	r7,r2,8020c380 <_dtoa_r+0xd00>
8020b990:	00800144 	movi	r2,5
8020b994:	3884c41e 	bne	r7,r2,8020cca8 <_dtoa_r+0x1628>
8020b998:	00800044 	movi	r2,1
8020b99c:	d8800b15 	stw	r2,44(sp)
8020b9a0:	d8c00517 	ldw	r3,20(sp)
8020b9a4:	d9002217 	ldw	r4,136(sp)
8020b9a8:	1907883a 	add	r3,r3,r4
8020b9ac:	19800044 	addi	r6,r3,1
8020b9b0:	d8c00c15 	stw	r3,48(sp)
8020b9b4:	d9800615 	stw	r6,24(sp)
8020b9b8:	0183a40e 	bge	zero,r6,8020c84c <_dtoa_r+0x11cc>
8020b9bc:	d9800617 	ldw	r6,24(sp)
8020b9c0:	3021883a 	mov	r16,r6
8020b9c4:	e0001115 	stw	zero,68(fp)
8020b9c8:	008005c4 	movi	r2,23
8020b9cc:	1184c92e 	bgeu	r2,r6,8020ccf4 <_dtoa_r+0x1674>
8020b9d0:	00c00044 	movi	r3,1
8020b9d4:	00800104 	movi	r2,4
8020b9d8:	1085883a 	add	r2,r2,r2
8020b9dc:	11000504 	addi	r4,r2,20
8020b9e0:	180b883a 	mov	r5,r3
8020b9e4:	18c00044 	addi	r3,r3,1
8020b9e8:	313ffb2e 	bgeu	r6,r4,8020b9d8 <__reset+0xfa1eb9d8>
8020b9ec:	e1401115 	stw	r5,68(fp)
8020b9f0:	e009883a 	mov	r4,fp
8020b9f4:	020ebd40 	call	8020ebd4 <_Balloc>
8020b9f8:	d8800715 	stw	r2,28(sp)
8020b9fc:	e0801015 	stw	r2,64(fp)
8020ba00:	00800384 	movi	r2,14
8020ba04:	1400f736 	bltu	r2,r16,8020bde4 <_dtoa_r+0x764>
8020ba08:	8800f626 	beq	r17,zero,8020bde4 <_dtoa_r+0x764>
8020ba0c:	d9c00517 	ldw	r7,20(sp)
8020ba10:	01c39a0e 	bge	zero,r7,8020c87c <_dtoa_r+0x11fc>
8020ba14:	388003cc 	andi	r2,r7,15
8020ba18:	100490fa 	slli	r2,r2,3
8020ba1c:	382bd13a 	srai	r21,r7,4
8020ba20:	00e008b4 	movhi	r3,32802
8020ba24:	18f67604 	addi	r3,r3,-9768
8020ba28:	1885883a 	add	r2,r3,r2
8020ba2c:	a8c0040c 	andi	r3,r21,16
8020ba30:	12400017 	ldw	r9,0(r2)
8020ba34:	12000117 	ldw	r8,4(r2)
8020ba38:	18037926 	beq	r3,zero,8020c820 <_dtoa_r+0x11a0>
8020ba3c:	00a008b4 	movhi	r2,32802
8020ba40:	10b66c04 	addi	r2,r2,-9808
8020ba44:	11800817 	ldw	r6,32(r2)
8020ba48:	11c00917 	ldw	r7,36(r2)
8020ba4c:	9009883a 	mov	r4,r18
8020ba50:	980b883a 	mov	r5,r19
8020ba54:	da001715 	stw	r8,92(sp)
8020ba58:	da401615 	stw	r9,88(sp)
8020ba5c:	0214cac0 	call	80214cac <__divdf3>
8020ba60:	da001717 	ldw	r8,92(sp)
8020ba64:	da401617 	ldw	r9,88(sp)
8020ba68:	ad4003cc 	andi	r21,r21,15
8020ba6c:	040000c4 	movi	r16,3
8020ba70:	1023883a 	mov	r17,r2
8020ba74:	1829883a 	mov	r20,r3
8020ba78:	a8001126 	beq	r21,zero,8020bac0 <_dtoa_r+0x440>
8020ba7c:	05e008b4 	movhi	r23,32802
8020ba80:	bdf66c04 	addi	r23,r23,-9808
8020ba84:	4805883a 	mov	r2,r9
8020ba88:	4007883a 	mov	r3,r8
8020ba8c:	a980004c 	andi	r6,r21,1
8020ba90:	1009883a 	mov	r4,r2
8020ba94:	a82bd07a 	srai	r21,r21,1
8020ba98:	180b883a 	mov	r5,r3
8020ba9c:	30000426 	beq	r6,zero,8020bab0 <_dtoa_r+0x430>
8020baa0:	b9800017 	ldw	r6,0(r23)
8020baa4:	b9c00117 	ldw	r7,4(r23)
8020baa8:	84000044 	addi	r16,r16,1
8020baac:	02157ec0 	call	802157ec <__muldf3>
8020bab0:	bdc00204 	addi	r23,r23,8
8020bab4:	a83ff51e 	bne	r21,zero,8020ba8c <__reset+0xfa1eba8c>
8020bab8:	1013883a 	mov	r9,r2
8020babc:	1811883a 	mov	r8,r3
8020bac0:	480d883a 	mov	r6,r9
8020bac4:	400f883a 	mov	r7,r8
8020bac8:	8809883a 	mov	r4,r17
8020bacc:	a00b883a 	mov	r5,r20
8020bad0:	0214cac0 	call	80214cac <__divdf3>
8020bad4:	d8800f15 	stw	r2,60(sp)
8020bad8:	d8c01015 	stw	r3,64(sp)
8020badc:	d8c00e17 	ldw	r3,56(sp)
8020bae0:	18000626 	beq	r3,zero,8020bafc <_dtoa_r+0x47c>
8020bae4:	d9000f17 	ldw	r4,60(sp)
8020bae8:	d9401017 	ldw	r5,64(sp)
8020baec:	000d883a 	mov	r6,zero
8020baf0:	01cffc34 	movhi	r7,16368
8020baf4:	02156f80 	call	802156f8 <__ledf2>
8020baf8:	10040b16 	blt	r2,zero,8020cb28 <_dtoa_r+0x14a8>
8020bafc:	8009883a 	mov	r4,r16
8020bb00:	02168800 	call	80216880 <__floatsidf>
8020bb04:	d9800f17 	ldw	r6,60(sp)
8020bb08:	d9c01017 	ldw	r7,64(sp)
8020bb0c:	1009883a 	mov	r4,r2
8020bb10:	180b883a 	mov	r5,r3
8020bb14:	02157ec0 	call	802157ec <__muldf3>
8020bb18:	000d883a 	mov	r6,zero
8020bb1c:	01d00734 	movhi	r7,16412
8020bb20:	1009883a 	mov	r4,r2
8020bb24:	180b883a 	mov	r5,r3
8020bb28:	02144000 	call	80214400 <__adddf3>
8020bb2c:	1021883a 	mov	r16,r2
8020bb30:	d8800617 	ldw	r2,24(sp)
8020bb34:	047f3034 	movhi	r17,64704
8020bb38:	1c63883a 	add	r17,r3,r17
8020bb3c:	10031826 	beq	r2,zero,8020c7a0 <_dtoa_r+0x1120>
8020bb40:	d8c00517 	ldw	r3,20(sp)
8020bb44:	db000617 	ldw	r12,24(sp)
8020bb48:	d8c01315 	stw	r3,76(sp)
8020bb4c:	d9000b17 	ldw	r4,44(sp)
8020bb50:	20038f26 	beq	r4,zero,8020c990 <_dtoa_r+0x1310>
8020bb54:	60bfffc4 	addi	r2,r12,-1
8020bb58:	100490fa 	slli	r2,r2,3
8020bb5c:	00e008b4 	movhi	r3,32802
8020bb60:	18f67604 	addi	r3,r3,-9768
8020bb64:	1885883a 	add	r2,r3,r2
8020bb68:	11800017 	ldw	r6,0(r2)
8020bb6c:	11c00117 	ldw	r7,4(r2)
8020bb70:	d8800717 	ldw	r2,28(sp)
8020bb74:	0009883a 	mov	r4,zero
8020bb78:	014ff834 	movhi	r5,16352
8020bb7c:	db001615 	stw	r12,88(sp)
8020bb80:	15c00044 	addi	r23,r2,1
8020bb84:	0214cac0 	call	80214cac <__divdf3>
8020bb88:	800d883a 	mov	r6,r16
8020bb8c:	880f883a 	mov	r7,r17
8020bb90:	1009883a 	mov	r4,r2
8020bb94:	180b883a 	mov	r5,r3
8020bb98:	0215f040 	call	80215f04 <__subdf3>
8020bb9c:	d9401017 	ldw	r5,64(sp)
8020bba0:	d9000f17 	ldw	r4,60(sp)
8020bba4:	102b883a 	mov	r21,r2
8020bba8:	d8c01215 	stw	r3,72(sp)
8020bbac:	02168000 	call	80216800 <__fixdfsi>
8020bbb0:	1009883a 	mov	r4,r2
8020bbb4:	1029883a 	mov	r20,r2
8020bbb8:	02168800 	call	80216880 <__floatsidf>
8020bbbc:	d9000f17 	ldw	r4,60(sp)
8020bbc0:	d9401017 	ldw	r5,64(sp)
8020bbc4:	100d883a 	mov	r6,r2
8020bbc8:	180f883a 	mov	r7,r3
8020bbcc:	0215f040 	call	80215f04 <__subdf3>
8020bbd0:	1823883a 	mov	r17,r3
8020bbd4:	d8c00717 	ldw	r3,28(sp)
8020bbd8:	d9401217 	ldw	r5,72(sp)
8020bbdc:	a2000c04 	addi	r8,r20,48
8020bbe0:	1021883a 	mov	r16,r2
8020bbe4:	1a000005 	stb	r8,0(r3)
8020bbe8:	800d883a 	mov	r6,r16
8020bbec:	880f883a 	mov	r7,r17
8020bbf0:	a809883a 	mov	r4,r21
8020bbf4:	4029883a 	mov	r20,r8
8020bbf8:	021561c0 	call	8021561c <__gedf2>
8020bbfc:	00841d16 	blt	zero,r2,8020cc74 <_dtoa_r+0x15f4>
8020bc00:	800d883a 	mov	r6,r16
8020bc04:	880f883a 	mov	r7,r17
8020bc08:	0009883a 	mov	r4,zero
8020bc0c:	014ffc34 	movhi	r5,16368
8020bc10:	0215f040 	call	80215f04 <__subdf3>
8020bc14:	d9401217 	ldw	r5,72(sp)
8020bc18:	100d883a 	mov	r6,r2
8020bc1c:	180f883a 	mov	r7,r3
8020bc20:	a809883a 	mov	r4,r21
8020bc24:	021561c0 	call	8021561c <__gedf2>
8020bc28:	db001617 	ldw	r12,88(sp)
8020bc2c:	00840e16 	blt	zero,r2,8020cc68 <_dtoa_r+0x15e8>
8020bc30:	00800044 	movi	r2,1
8020bc34:	13006b0e 	bge	r2,r12,8020bde4 <_dtoa_r+0x764>
8020bc38:	d9000717 	ldw	r4,28(sp)
8020bc3c:	dd800f15 	stw	r22,60(sp)
8020bc40:	dcc01015 	stw	r19,64(sp)
8020bc44:	2319883a 	add	r12,r4,r12
8020bc48:	dcc01217 	ldw	r19,72(sp)
8020bc4c:	602d883a 	mov	r22,r12
8020bc50:	dc801215 	stw	r18,72(sp)
8020bc54:	b825883a 	mov	r18,r23
8020bc58:	00000906 	br	8020bc80 <_dtoa_r+0x600>
8020bc5c:	0215f040 	call	80215f04 <__subdf3>
8020bc60:	a80d883a 	mov	r6,r21
8020bc64:	980f883a 	mov	r7,r19
8020bc68:	1009883a 	mov	r4,r2
8020bc6c:	180b883a 	mov	r5,r3
8020bc70:	02156f80 	call	802156f8 <__ledf2>
8020bc74:	1003e816 	blt	r2,zero,8020cc18 <_dtoa_r+0x1598>
8020bc78:	b825883a 	mov	r18,r23
8020bc7c:	bd83e926 	beq	r23,r22,8020cc24 <_dtoa_r+0x15a4>
8020bc80:	a809883a 	mov	r4,r21
8020bc84:	980b883a 	mov	r5,r19
8020bc88:	000d883a 	mov	r6,zero
8020bc8c:	01d00934 	movhi	r7,16420
8020bc90:	02157ec0 	call	802157ec <__muldf3>
8020bc94:	000d883a 	mov	r6,zero
8020bc98:	01d00934 	movhi	r7,16420
8020bc9c:	8009883a 	mov	r4,r16
8020bca0:	880b883a 	mov	r5,r17
8020bca4:	102b883a 	mov	r21,r2
8020bca8:	1827883a 	mov	r19,r3
8020bcac:	02157ec0 	call	802157ec <__muldf3>
8020bcb0:	180b883a 	mov	r5,r3
8020bcb4:	1009883a 	mov	r4,r2
8020bcb8:	1821883a 	mov	r16,r3
8020bcbc:	1023883a 	mov	r17,r2
8020bcc0:	02168000 	call	80216800 <__fixdfsi>
8020bcc4:	1009883a 	mov	r4,r2
8020bcc8:	1029883a 	mov	r20,r2
8020bccc:	02168800 	call	80216880 <__floatsidf>
8020bcd0:	8809883a 	mov	r4,r17
8020bcd4:	800b883a 	mov	r5,r16
8020bcd8:	100d883a 	mov	r6,r2
8020bcdc:	180f883a 	mov	r7,r3
8020bce0:	0215f040 	call	80215f04 <__subdf3>
8020bce4:	a5000c04 	addi	r20,r20,48
8020bce8:	a80d883a 	mov	r6,r21
8020bcec:	980f883a 	mov	r7,r19
8020bcf0:	1009883a 	mov	r4,r2
8020bcf4:	180b883a 	mov	r5,r3
8020bcf8:	95000005 	stb	r20,0(r18)
8020bcfc:	1021883a 	mov	r16,r2
8020bd00:	1823883a 	mov	r17,r3
8020bd04:	02156f80 	call	802156f8 <__ledf2>
8020bd08:	bdc00044 	addi	r23,r23,1
8020bd0c:	800d883a 	mov	r6,r16
8020bd10:	880f883a 	mov	r7,r17
8020bd14:	0009883a 	mov	r4,zero
8020bd18:	014ffc34 	movhi	r5,16368
8020bd1c:	103fcf0e 	bge	r2,zero,8020bc5c <__reset+0xfa1ebc5c>
8020bd20:	d8c01317 	ldw	r3,76(sp)
8020bd24:	d8c00515 	stw	r3,20(sp)
8020bd28:	d9400917 	ldw	r5,36(sp)
8020bd2c:	e009883a 	mov	r4,fp
8020bd30:	020ec7c0 	call	8020ec7c <_Bfree>
8020bd34:	d9000517 	ldw	r4,20(sp)
8020bd38:	d9802317 	ldw	r6,140(sp)
8020bd3c:	d9c02517 	ldw	r7,148(sp)
8020bd40:	b8000005 	stb	zero,0(r23)
8020bd44:	20800044 	addi	r2,r4,1
8020bd48:	30800015 	stw	r2,0(r6)
8020bd4c:	3802aa26 	beq	r7,zero,8020c7f8 <_dtoa_r+0x1178>
8020bd50:	3dc00015 	stw	r23,0(r7)
8020bd54:	d8800717 	ldw	r2,28(sp)
8020bd58:	003e7906 	br	8020b740 <__reset+0xfa1eb740>
8020bd5c:	00800434 	movhi	r2,16
8020bd60:	10bfffc4 	addi	r2,r2,-1
8020bd64:	88a2703a 	and	r17,r17,r2
8020bd68:	883e851e 	bne	r17,zero,8020b780 <__reset+0xfa1eb780>
8020bd6c:	00a008b4 	movhi	r2,32802
8020bd70:	10b65804 	addi	r2,r2,-9888
8020bd74:	003e8406 	br	8020b788 <__reset+0xfa1eb788>
8020bd78:	10c00204 	addi	r3,r2,8
8020bd7c:	003e8706 	br	8020b79c <__reset+0xfa1eb79c>
8020bd80:	01400434 	movhi	r5,16
8020bd84:	297fffc4 	addi	r5,r5,-1
8020bd88:	994a703a 	and	r5,r19,r5
8020bd8c:	9009883a 	mov	r4,r18
8020bd90:	843f0044 	addi	r16,r16,-1023
8020bd94:	294ffc34 	orhi	r5,r5,16368
8020bd98:	dd800217 	ldw	r22,8(sp)
8020bd9c:	d8001115 	stw	zero,68(sp)
8020bda0:	003ea506 	br	8020b838 <__reset+0xfa1eb838>
8020bda4:	00a008b4 	movhi	r2,32802
8020bda8:	10b64704 	addi	r2,r2,-9956
8020bdac:	003e6406 	br	8020b740 <__reset+0xfa1eb740>
8020bdb0:	e0001115 	stw	zero,68(fp)
8020bdb4:	000b883a 	mov	r5,zero
8020bdb8:	e009883a 	mov	r4,fp
8020bdbc:	020ebd40 	call	8020ebd4 <_Balloc>
8020bdc0:	01bfffc4 	movi	r6,-1
8020bdc4:	01c00044 	movi	r7,1
8020bdc8:	d8800715 	stw	r2,28(sp)
8020bdcc:	d9800c15 	stw	r6,48(sp)
8020bdd0:	e0801015 	stw	r2,64(fp)
8020bdd4:	d8000315 	stw	zero,12(sp)
8020bdd8:	d9c00b15 	stw	r7,44(sp)
8020bddc:	d9800615 	stw	r6,24(sp)
8020bde0:	d8002215 	stw	zero,136(sp)
8020bde4:	d8800117 	ldw	r2,4(sp)
8020bde8:	10008916 	blt	r2,zero,8020c010 <_dtoa_r+0x990>
8020bdec:	d9000517 	ldw	r4,20(sp)
8020bdf0:	00c00384 	movi	r3,14
8020bdf4:	19008616 	blt	r3,r4,8020c010 <_dtoa_r+0x990>
8020bdf8:	200490fa 	slli	r2,r4,3
8020bdfc:	00e008b4 	movhi	r3,32802
8020be00:	d9802217 	ldw	r6,136(sp)
8020be04:	18f67604 	addi	r3,r3,-9768
8020be08:	1885883a 	add	r2,r3,r2
8020be0c:	14000017 	ldw	r16,0(r2)
8020be10:	14400117 	ldw	r17,4(r2)
8020be14:	30016316 	blt	r6,zero,8020c3a4 <_dtoa_r+0xd24>
8020be18:	800d883a 	mov	r6,r16
8020be1c:	880f883a 	mov	r7,r17
8020be20:	9009883a 	mov	r4,r18
8020be24:	980b883a 	mov	r5,r19
8020be28:	0214cac0 	call	80214cac <__divdf3>
8020be2c:	180b883a 	mov	r5,r3
8020be30:	1009883a 	mov	r4,r2
8020be34:	02168000 	call	80216800 <__fixdfsi>
8020be38:	1009883a 	mov	r4,r2
8020be3c:	102b883a 	mov	r21,r2
8020be40:	02168800 	call	80216880 <__floatsidf>
8020be44:	800d883a 	mov	r6,r16
8020be48:	880f883a 	mov	r7,r17
8020be4c:	1009883a 	mov	r4,r2
8020be50:	180b883a 	mov	r5,r3
8020be54:	02157ec0 	call	802157ec <__muldf3>
8020be58:	100d883a 	mov	r6,r2
8020be5c:	180f883a 	mov	r7,r3
8020be60:	9009883a 	mov	r4,r18
8020be64:	980b883a 	mov	r5,r19
8020be68:	0215f040 	call	80215f04 <__subdf3>
8020be6c:	d9c00717 	ldw	r7,28(sp)
8020be70:	1009883a 	mov	r4,r2
8020be74:	a8800c04 	addi	r2,r21,48
8020be78:	38800005 	stb	r2,0(r7)
8020be7c:	3dc00044 	addi	r23,r7,1
8020be80:	d9c00617 	ldw	r7,24(sp)
8020be84:	01800044 	movi	r6,1
8020be88:	180b883a 	mov	r5,r3
8020be8c:	2005883a 	mov	r2,r4
8020be90:	39803826 	beq	r7,r6,8020bf74 <_dtoa_r+0x8f4>
8020be94:	000d883a 	mov	r6,zero
8020be98:	01d00934 	movhi	r7,16420
8020be9c:	02157ec0 	call	802157ec <__muldf3>
8020bea0:	000d883a 	mov	r6,zero
8020bea4:	000f883a 	mov	r7,zero
8020bea8:	1009883a 	mov	r4,r2
8020beac:	180b883a 	mov	r5,r3
8020beb0:	1025883a 	mov	r18,r2
8020beb4:	1827883a 	mov	r19,r3
8020beb8:	02155940 	call	80215594 <__eqdf2>
8020bebc:	103f9a26 	beq	r2,zero,8020bd28 <__reset+0xfa1ebd28>
8020bec0:	d9c00617 	ldw	r7,24(sp)
8020bec4:	d8c00717 	ldw	r3,28(sp)
8020bec8:	b829883a 	mov	r20,r23
8020becc:	38bfffc4 	addi	r2,r7,-1
8020bed0:	18ad883a 	add	r22,r3,r2
8020bed4:	00000a06 	br	8020bf00 <_dtoa_r+0x880>
8020bed8:	02157ec0 	call	802157ec <__muldf3>
8020bedc:	000d883a 	mov	r6,zero
8020bee0:	000f883a 	mov	r7,zero
8020bee4:	1009883a 	mov	r4,r2
8020bee8:	180b883a 	mov	r5,r3
8020beec:	1025883a 	mov	r18,r2
8020bef0:	1827883a 	mov	r19,r3
8020bef4:	b829883a 	mov	r20,r23
8020bef8:	02155940 	call	80215594 <__eqdf2>
8020befc:	103f8a26 	beq	r2,zero,8020bd28 <__reset+0xfa1ebd28>
8020bf00:	800d883a 	mov	r6,r16
8020bf04:	880f883a 	mov	r7,r17
8020bf08:	9009883a 	mov	r4,r18
8020bf0c:	980b883a 	mov	r5,r19
8020bf10:	0214cac0 	call	80214cac <__divdf3>
8020bf14:	180b883a 	mov	r5,r3
8020bf18:	1009883a 	mov	r4,r2
8020bf1c:	02168000 	call	80216800 <__fixdfsi>
8020bf20:	1009883a 	mov	r4,r2
8020bf24:	102b883a 	mov	r21,r2
8020bf28:	02168800 	call	80216880 <__floatsidf>
8020bf2c:	800d883a 	mov	r6,r16
8020bf30:	880f883a 	mov	r7,r17
8020bf34:	1009883a 	mov	r4,r2
8020bf38:	180b883a 	mov	r5,r3
8020bf3c:	02157ec0 	call	802157ec <__muldf3>
8020bf40:	100d883a 	mov	r6,r2
8020bf44:	180f883a 	mov	r7,r3
8020bf48:	9009883a 	mov	r4,r18
8020bf4c:	980b883a 	mov	r5,r19
8020bf50:	0215f040 	call	80215f04 <__subdf3>
8020bf54:	aa000c04 	addi	r8,r21,48
8020bf58:	a2000005 	stb	r8,0(r20)
8020bf5c:	000d883a 	mov	r6,zero
8020bf60:	01d00934 	movhi	r7,16420
8020bf64:	1009883a 	mov	r4,r2
8020bf68:	180b883a 	mov	r5,r3
8020bf6c:	a5c00044 	addi	r23,r20,1
8020bf70:	b53fd91e 	bne	r22,r20,8020bed8 <__reset+0xfa1ebed8>
8020bf74:	100d883a 	mov	r6,r2
8020bf78:	180f883a 	mov	r7,r3
8020bf7c:	1009883a 	mov	r4,r2
8020bf80:	180b883a 	mov	r5,r3
8020bf84:	02144000 	call	80214400 <__adddf3>
8020bf88:	100d883a 	mov	r6,r2
8020bf8c:	180f883a 	mov	r7,r3
8020bf90:	8009883a 	mov	r4,r16
8020bf94:	880b883a 	mov	r5,r17
8020bf98:	1027883a 	mov	r19,r2
8020bf9c:	1825883a 	mov	r18,r3
8020bfa0:	02156f80 	call	802156f8 <__ledf2>
8020bfa4:	10000816 	blt	r2,zero,8020bfc8 <_dtoa_r+0x948>
8020bfa8:	980d883a 	mov	r6,r19
8020bfac:	900f883a 	mov	r7,r18
8020bfb0:	8009883a 	mov	r4,r16
8020bfb4:	880b883a 	mov	r5,r17
8020bfb8:	02155940 	call	80215594 <__eqdf2>
8020bfbc:	103f5a1e 	bne	r2,zero,8020bd28 <__reset+0xfa1ebd28>
8020bfc0:	ad40004c 	andi	r21,r21,1
8020bfc4:	a83f5826 	beq	r21,zero,8020bd28 <__reset+0xfa1ebd28>
8020bfc8:	bd3fffc3 	ldbu	r20,-1(r23)
8020bfcc:	b8bfffc4 	addi	r2,r23,-1
8020bfd0:	1007883a 	mov	r3,r2
8020bfd4:	01400e44 	movi	r5,57
8020bfd8:	d9800717 	ldw	r6,28(sp)
8020bfdc:	00000506 	br	8020bff4 <_dtoa_r+0x974>
8020bfe0:	18ffffc4 	addi	r3,r3,-1
8020bfe4:	11824726 	beq	r2,r6,8020c904 <_dtoa_r+0x1284>
8020bfe8:	1d000003 	ldbu	r20,0(r3)
8020bfec:	102f883a 	mov	r23,r2
8020bff0:	10bfffc4 	addi	r2,r2,-1
8020bff4:	a1003fcc 	andi	r4,r20,255
8020bff8:	2100201c 	xori	r4,r4,128
8020bffc:	213fe004 	addi	r4,r4,-128
8020c000:	217ff726 	beq	r4,r5,8020bfe0 <__reset+0xfa1ebfe0>
8020c004:	a2000044 	addi	r8,r20,1
8020c008:	12000005 	stb	r8,0(r2)
8020c00c:	003f4606 	br	8020bd28 <__reset+0xfa1ebd28>
8020c010:	d9000b17 	ldw	r4,44(sp)
8020c014:	2000c826 	beq	r4,zero,8020c338 <_dtoa_r+0xcb8>
8020c018:	d9800317 	ldw	r6,12(sp)
8020c01c:	00c00044 	movi	r3,1
8020c020:	1980f90e 	bge	r3,r6,8020c408 <_dtoa_r+0xd88>
8020c024:	d8800617 	ldw	r2,24(sp)
8020c028:	d8c00a17 	ldw	r3,40(sp)
8020c02c:	157fffc4 	addi	r21,r2,-1
8020c030:	1d41f316 	blt	r3,r21,8020c800 <_dtoa_r+0x1180>
8020c034:	1d6bc83a 	sub	r21,r3,r21
8020c038:	d9c00617 	ldw	r7,24(sp)
8020c03c:	3802aa16 	blt	r7,zero,8020cae8 <_dtoa_r+0x1468>
8020c040:	dd000817 	ldw	r20,32(sp)
8020c044:	d8800617 	ldw	r2,24(sp)
8020c048:	d8c00817 	ldw	r3,32(sp)
8020c04c:	01400044 	movi	r5,1
8020c050:	e009883a 	mov	r4,fp
8020c054:	1887883a 	add	r3,r3,r2
8020c058:	d8c00815 	stw	r3,32(sp)
8020c05c:	b0ad883a 	add	r22,r22,r2
8020c060:	020efe00 	call	8020efe0 <__i2b>
8020c064:	1023883a 	mov	r17,r2
8020c068:	a0000826 	beq	r20,zero,8020c08c <_dtoa_r+0xa0c>
8020c06c:	0580070e 	bge	zero,r22,8020c08c <_dtoa_r+0xa0c>
8020c070:	a005883a 	mov	r2,r20
8020c074:	b500b916 	blt	r22,r20,8020c35c <_dtoa_r+0xcdc>
8020c078:	d9000817 	ldw	r4,32(sp)
8020c07c:	a0a9c83a 	sub	r20,r20,r2
8020c080:	b0adc83a 	sub	r22,r22,r2
8020c084:	2089c83a 	sub	r4,r4,r2
8020c088:	d9000815 	stw	r4,32(sp)
8020c08c:	d9800a17 	ldw	r6,40(sp)
8020c090:	0181810e 	bge	zero,r6,8020c698 <_dtoa_r+0x1018>
8020c094:	d9c00b17 	ldw	r7,44(sp)
8020c098:	3800b326 	beq	r7,zero,8020c368 <_dtoa_r+0xce8>
8020c09c:	a800b226 	beq	r21,zero,8020c368 <_dtoa_r+0xce8>
8020c0a0:	880b883a 	mov	r5,r17
8020c0a4:	a80d883a 	mov	r6,r21
8020c0a8:	e009883a 	mov	r4,fp
8020c0ac:	020f2140 	call	8020f214 <__pow5mult>
8020c0b0:	d9800917 	ldw	r6,36(sp)
8020c0b4:	100b883a 	mov	r5,r2
8020c0b8:	e009883a 	mov	r4,fp
8020c0bc:	1023883a 	mov	r17,r2
8020c0c0:	020f01c0 	call	8020f01c <__multiply>
8020c0c4:	1021883a 	mov	r16,r2
8020c0c8:	d8800a17 	ldw	r2,40(sp)
8020c0cc:	d9400917 	ldw	r5,36(sp)
8020c0d0:	e009883a 	mov	r4,fp
8020c0d4:	1545c83a 	sub	r2,r2,r21
8020c0d8:	d8800a15 	stw	r2,40(sp)
8020c0dc:	020ec7c0 	call	8020ec7c <_Bfree>
8020c0e0:	d8c00a17 	ldw	r3,40(sp)
8020c0e4:	18009f1e 	bne	r3,zero,8020c364 <_dtoa_r+0xce4>
8020c0e8:	05c00044 	movi	r23,1
8020c0ec:	e009883a 	mov	r4,fp
8020c0f0:	b80b883a 	mov	r5,r23
8020c0f4:	020efe00 	call	8020efe0 <__i2b>
8020c0f8:	d9000d17 	ldw	r4,52(sp)
8020c0fc:	102b883a 	mov	r21,r2
8020c100:	2000ce26 	beq	r4,zero,8020c43c <_dtoa_r+0xdbc>
8020c104:	200d883a 	mov	r6,r4
8020c108:	100b883a 	mov	r5,r2
8020c10c:	e009883a 	mov	r4,fp
8020c110:	020f2140 	call	8020f214 <__pow5mult>
8020c114:	d9800317 	ldw	r6,12(sp)
8020c118:	102b883a 	mov	r21,r2
8020c11c:	b981810e 	bge	r23,r6,8020c724 <_dtoa_r+0x10a4>
8020c120:	0027883a 	mov	r19,zero
8020c124:	a8800417 	ldw	r2,16(r21)
8020c128:	05c00804 	movi	r23,32
8020c12c:	10800104 	addi	r2,r2,4
8020c130:	1085883a 	add	r2,r2,r2
8020c134:	1085883a 	add	r2,r2,r2
8020c138:	a885883a 	add	r2,r21,r2
8020c13c:	11000017 	ldw	r4,0(r2)
8020c140:	020eec80 	call	8020eec8 <__hi0bits>
8020c144:	b885c83a 	sub	r2,r23,r2
8020c148:	1585883a 	add	r2,r2,r22
8020c14c:	108007cc 	andi	r2,r2,31
8020c150:	1000b326 	beq	r2,zero,8020c420 <_dtoa_r+0xda0>
8020c154:	00c00804 	movi	r3,32
8020c158:	1887c83a 	sub	r3,r3,r2
8020c15c:	01000104 	movi	r4,4
8020c160:	20c2cd0e 	bge	r4,r3,8020cc98 <_dtoa_r+0x1618>
8020c164:	00c00704 	movi	r3,28
8020c168:	1885c83a 	sub	r2,r3,r2
8020c16c:	d8c00817 	ldw	r3,32(sp)
8020c170:	a0a9883a 	add	r20,r20,r2
8020c174:	b0ad883a 	add	r22,r22,r2
8020c178:	1887883a 	add	r3,r3,r2
8020c17c:	d8c00815 	stw	r3,32(sp)
8020c180:	d9800817 	ldw	r6,32(sp)
8020c184:	0180040e 	bge	zero,r6,8020c198 <_dtoa_r+0xb18>
8020c188:	800b883a 	mov	r5,r16
8020c18c:	e009883a 	mov	r4,fp
8020c190:	020f3540 	call	8020f354 <__lshift>
8020c194:	1021883a 	mov	r16,r2
8020c198:	0580050e 	bge	zero,r22,8020c1b0 <_dtoa_r+0xb30>
8020c19c:	a80b883a 	mov	r5,r21
8020c1a0:	b00d883a 	mov	r6,r22
8020c1a4:	e009883a 	mov	r4,fp
8020c1a8:	020f3540 	call	8020f354 <__lshift>
8020c1ac:	102b883a 	mov	r21,r2
8020c1b0:	d9c00e17 	ldw	r7,56(sp)
8020c1b4:	3801211e 	bne	r7,zero,8020c63c <_dtoa_r+0xfbc>
8020c1b8:	d9800617 	ldw	r6,24(sp)
8020c1bc:	0181380e 	bge	zero,r6,8020c6a0 <_dtoa_r+0x1020>
8020c1c0:	d8c00b17 	ldw	r3,44(sp)
8020c1c4:	1800ab1e 	bne	r3,zero,8020c474 <_dtoa_r+0xdf4>
8020c1c8:	dc800717 	ldw	r18,28(sp)
8020c1cc:	dcc00617 	ldw	r19,24(sp)
8020c1d0:	9029883a 	mov	r20,r18
8020c1d4:	00000206 	br	8020c1e0 <_dtoa_r+0xb60>
8020c1d8:	020eca40 	call	8020eca4 <__multadd>
8020c1dc:	1021883a 	mov	r16,r2
8020c1e0:	a80b883a 	mov	r5,r21
8020c1e4:	8009883a 	mov	r4,r16
8020c1e8:	020b4800 	call	8020b480 <quorem>
8020c1ec:	10800c04 	addi	r2,r2,48
8020c1f0:	90800005 	stb	r2,0(r18)
8020c1f4:	94800044 	addi	r18,r18,1
8020c1f8:	9507c83a 	sub	r3,r18,r20
8020c1fc:	000f883a 	mov	r7,zero
8020c200:	01800284 	movi	r6,10
8020c204:	800b883a 	mov	r5,r16
8020c208:	e009883a 	mov	r4,fp
8020c20c:	1cfff216 	blt	r3,r19,8020c1d8 <__reset+0xfa1ec1d8>
8020c210:	1011883a 	mov	r8,r2
8020c214:	d8800617 	ldw	r2,24(sp)
8020c218:	0082370e 	bge	zero,r2,8020caf8 <_dtoa_r+0x1478>
8020c21c:	d9000717 	ldw	r4,28(sp)
8020c220:	0025883a 	mov	r18,zero
8020c224:	20af883a 	add	r23,r4,r2
8020c228:	01800044 	movi	r6,1
8020c22c:	800b883a 	mov	r5,r16
8020c230:	e009883a 	mov	r4,fp
8020c234:	da001715 	stw	r8,92(sp)
8020c238:	020f3540 	call	8020f354 <__lshift>
8020c23c:	a80b883a 	mov	r5,r21
8020c240:	1009883a 	mov	r4,r2
8020c244:	d8800915 	stw	r2,36(sp)
8020c248:	020f49c0 	call	8020f49c <__mcmp>
8020c24c:	da001717 	ldw	r8,92(sp)
8020c250:	0081800e 	bge	zero,r2,8020c854 <_dtoa_r+0x11d4>
8020c254:	b93fffc3 	ldbu	r4,-1(r23)
8020c258:	b8bfffc4 	addi	r2,r23,-1
8020c25c:	1007883a 	mov	r3,r2
8020c260:	01800e44 	movi	r6,57
8020c264:	d9c00717 	ldw	r7,28(sp)
8020c268:	00000506 	br	8020c280 <_dtoa_r+0xc00>
8020c26c:	18ffffc4 	addi	r3,r3,-1
8020c270:	11c12326 	beq	r2,r7,8020c700 <_dtoa_r+0x1080>
8020c274:	19000003 	ldbu	r4,0(r3)
8020c278:	102f883a 	mov	r23,r2
8020c27c:	10bfffc4 	addi	r2,r2,-1
8020c280:	21403fcc 	andi	r5,r4,255
8020c284:	2940201c 	xori	r5,r5,128
8020c288:	297fe004 	addi	r5,r5,-128
8020c28c:	29bff726 	beq	r5,r6,8020c26c <__reset+0xfa1ec26c>
8020c290:	21000044 	addi	r4,r4,1
8020c294:	11000005 	stb	r4,0(r2)
8020c298:	a80b883a 	mov	r5,r21
8020c29c:	e009883a 	mov	r4,fp
8020c2a0:	020ec7c0 	call	8020ec7c <_Bfree>
8020c2a4:	883ea026 	beq	r17,zero,8020bd28 <__reset+0xfa1ebd28>
8020c2a8:	90000426 	beq	r18,zero,8020c2bc <_dtoa_r+0xc3c>
8020c2ac:	94400326 	beq	r18,r17,8020c2bc <_dtoa_r+0xc3c>
8020c2b0:	900b883a 	mov	r5,r18
8020c2b4:	e009883a 	mov	r4,fp
8020c2b8:	020ec7c0 	call	8020ec7c <_Bfree>
8020c2bc:	880b883a 	mov	r5,r17
8020c2c0:	e009883a 	mov	r4,fp
8020c2c4:	020ec7c0 	call	8020ec7c <_Bfree>
8020c2c8:	003e9706 	br	8020bd28 <__reset+0xfa1ebd28>
8020c2cc:	01800044 	movi	r6,1
8020c2d0:	d9800e15 	stw	r6,56(sp)
8020c2d4:	003d9606 	br	8020b930 <__reset+0xfa1eb930>
8020c2d8:	d8800817 	ldw	r2,32(sp)
8020c2dc:	d8c00517 	ldw	r3,20(sp)
8020c2e0:	d8000d15 	stw	zero,52(sp)
8020c2e4:	10c5c83a 	sub	r2,r2,r3
8020c2e8:	00c9c83a 	sub	r4,zero,r3
8020c2ec:	d8800815 	stw	r2,32(sp)
8020c2f0:	d9000a15 	stw	r4,40(sp)
8020c2f4:	003d9706 	br	8020b954 <__reset+0xfa1eb954>
8020c2f8:	05adc83a 	sub	r22,zero,r22
8020c2fc:	dd800815 	stw	r22,32(sp)
8020c300:	002d883a 	mov	r22,zero
8020c304:	003d8e06 	br	8020b940 <__reset+0xfa1eb940>
8020c308:	d9000517 	ldw	r4,20(sp)
8020c30c:	02168800 	call	80216880 <__floatsidf>
8020c310:	100d883a 	mov	r6,r2
8020c314:	180f883a 	mov	r7,r3
8020c318:	a009883a 	mov	r4,r20
8020c31c:	880b883a 	mov	r5,r17
8020c320:	02155940 	call	80215594 <__eqdf2>
8020c324:	103d7126 	beq	r2,zero,8020b8ec <__reset+0xfa1eb8ec>
8020c328:	d9c00517 	ldw	r7,20(sp)
8020c32c:	39ffffc4 	addi	r7,r7,-1
8020c330:	d9c00515 	stw	r7,20(sp)
8020c334:	003d6d06 	br	8020b8ec <__reset+0xfa1eb8ec>
8020c338:	dd400a17 	ldw	r21,40(sp)
8020c33c:	dd000817 	ldw	r20,32(sp)
8020c340:	0023883a 	mov	r17,zero
8020c344:	003f4806 	br	8020c068 <__reset+0xfa1ec068>
8020c348:	10e3c83a 	sub	r17,r2,r3
8020c34c:	9448983a 	sll	r4,r18,r17
8020c350:	003d3206 	br	8020b81c <__reset+0xfa1eb81c>
8020c354:	d8000e15 	stw	zero,56(sp)
8020c358:	003d7506 	br	8020b930 <__reset+0xfa1eb930>
8020c35c:	b005883a 	mov	r2,r22
8020c360:	003f4506 	br	8020c078 <__reset+0xfa1ec078>
8020c364:	dc000915 	stw	r16,36(sp)
8020c368:	d9800a17 	ldw	r6,40(sp)
8020c36c:	d9400917 	ldw	r5,36(sp)
8020c370:	e009883a 	mov	r4,fp
8020c374:	020f2140 	call	8020f214 <__pow5mult>
8020c378:	1021883a 	mov	r16,r2
8020c37c:	003f5a06 	br	8020c0e8 <__reset+0xfa1ec0e8>
8020c380:	01c00044 	movi	r7,1
8020c384:	d9c00b15 	stw	r7,44(sp)
8020c388:	d8802217 	ldw	r2,136(sp)
8020c38c:	0081280e 	bge	zero,r2,8020c830 <_dtoa_r+0x11b0>
8020c390:	100d883a 	mov	r6,r2
8020c394:	1021883a 	mov	r16,r2
8020c398:	d8800c15 	stw	r2,48(sp)
8020c39c:	d8800615 	stw	r2,24(sp)
8020c3a0:	003d8806 	br	8020b9c4 <__reset+0xfa1eb9c4>
8020c3a4:	d8800617 	ldw	r2,24(sp)
8020c3a8:	00be9b16 	blt	zero,r2,8020be18 <__reset+0xfa1ebe18>
8020c3ac:	10010f1e 	bne	r2,zero,8020c7ec <_dtoa_r+0x116c>
8020c3b0:	880b883a 	mov	r5,r17
8020c3b4:	000d883a 	mov	r6,zero
8020c3b8:	01d00534 	movhi	r7,16404
8020c3bc:	8009883a 	mov	r4,r16
8020c3c0:	02157ec0 	call	802157ec <__muldf3>
8020c3c4:	900d883a 	mov	r6,r18
8020c3c8:	980f883a 	mov	r7,r19
8020c3cc:	1009883a 	mov	r4,r2
8020c3d0:	180b883a 	mov	r5,r3
8020c3d4:	021561c0 	call	8021561c <__gedf2>
8020c3d8:	002b883a 	mov	r21,zero
8020c3dc:	0023883a 	mov	r17,zero
8020c3e0:	1000bf16 	blt	r2,zero,8020c6e0 <_dtoa_r+0x1060>
8020c3e4:	d9802217 	ldw	r6,136(sp)
8020c3e8:	ddc00717 	ldw	r23,28(sp)
8020c3ec:	018c303a 	nor	r6,zero,r6
8020c3f0:	d9800515 	stw	r6,20(sp)
8020c3f4:	a80b883a 	mov	r5,r21
8020c3f8:	e009883a 	mov	r4,fp
8020c3fc:	020ec7c0 	call	8020ec7c <_Bfree>
8020c400:	883e4926 	beq	r17,zero,8020bd28 <__reset+0xfa1ebd28>
8020c404:	003fad06 	br	8020c2bc <__reset+0xfa1ec2bc>
8020c408:	d9c01117 	ldw	r7,68(sp)
8020c40c:	3801bc26 	beq	r7,zero,8020cb00 <_dtoa_r+0x1480>
8020c410:	10810cc4 	addi	r2,r2,1075
8020c414:	dd400a17 	ldw	r21,40(sp)
8020c418:	dd000817 	ldw	r20,32(sp)
8020c41c:	003f0a06 	br	8020c048 <__reset+0xfa1ec048>
8020c420:	00800704 	movi	r2,28
8020c424:	d9000817 	ldw	r4,32(sp)
8020c428:	a0a9883a 	add	r20,r20,r2
8020c42c:	b0ad883a 	add	r22,r22,r2
8020c430:	2089883a 	add	r4,r4,r2
8020c434:	d9000815 	stw	r4,32(sp)
8020c438:	003f5106 	br	8020c180 <__reset+0xfa1ec180>
8020c43c:	d8c00317 	ldw	r3,12(sp)
8020c440:	b8c1fc0e 	bge	r23,r3,8020cc34 <_dtoa_r+0x15b4>
8020c444:	0027883a 	mov	r19,zero
8020c448:	b805883a 	mov	r2,r23
8020c44c:	003f3e06 	br	8020c148 <__reset+0xfa1ec148>
8020c450:	880b883a 	mov	r5,r17
8020c454:	e009883a 	mov	r4,fp
8020c458:	000f883a 	mov	r7,zero
8020c45c:	01800284 	movi	r6,10
8020c460:	020eca40 	call	8020eca4 <__multadd>
8020c464:	d9000c17 	ldw	r4,48(sp)
8020c468:	1023883a 	mov	r17,r2
8020c46c:	0102040e 	bge	zero,r4,8020cc80 <_dtoa_r+0x1600>
8020c470:	d9000615 	stw	r4,24(sp)
8020c474:	0500050e 	bge	zero,r20,8020c48c <_dtoa_r+0xe0c>
8020c478:	880b883a 	mov	r5,r17
8020c47c:	a00d883a 	mov	r6,r20
8020c480:	e009883a 	mov	r4,fp
8020c484:	020f3540 	call	8020f354 <__lshift>
8020c488:	1023883a 	mov	r17,r2
8020c48c:	9801241e 	bne	r19,zero,8020c920 <_dtoa_r+0x12a0>
8020c490:	8829883a 	mov	r20,r17
8020c494:	d9000617 	ldw	r4,24(sp)
8020c498:	dcc00717 	ldw	r19,28(sp)
8020c49c:	9480004c 	andi	r18,r18,1
8020c4a0:	20bfffc4 	addi	r2,r4,-1
8020c4a4:	9885883a 	add	r2,r19,r2
8020c4a8:	d8800415 	stw	r2,16(sp)
8020c4ac:	dc800615 	stw	r18,24(sp)
8020c4b0:	a80b883a 	mov	r5,r21
8020c4b4:	8009883a 	mov	r4,r16
8020c4b8:	020b4800 	call	8020b480 <quorem>
8020c4bc:	880b883a 	mov	r5,r17
8020c4c0:	8009883a 	mov	r4,r16
8020c4c4:	102f883a 	mov	r23,r2
8020c4c8:	020f49c0 	call	8020f49c <__mcmp>
8020c4cc:	a80b883a 	mov	r5,r21
8020c4d0:	a00d883a 	mov	r6,r20
8020c4d4:	e009883a 	mov	r4,fp
8020c4d8:	102d883a 	mov	r22,r2
8020c4dc:	020f4fc0 	call	8020f4fc <__mdiff>
8020c4e0:	1007883a 	mov	r3,r2
8020c4e4:	10800317 	ldw	r2,12(r2)
8020c4e8:	bc800c04 	addi	r18,r23,48
8020c4ec:	180b883a 	mov	r5,r3
8020c4f0:	10004e1e 	bne	r2,zero,8020c62c <_dtoa_r+0xfac>
8020c4f4:	8009883a 	mov	r4,r16
8020c4f8:	d8c01615 	stw	r3,88(sp)
8020c4fc:	020f49c0 	call	8020f49c <__mcmp>
8020c500:	d8c01617 	ldw	r3,88(sp)
8020c504:	e009883a 	mov	r4,fp
8020c508:	d8801615 	stw	r2,88(sp)
8020c50c:	180b883a 	mov	r5,r3
8020c510:	020ec7c0 	call	8020ec7c <_Bfree>
8020c514:	d8801617 	ldw	r2,88(sp)
8020c518:	1000041e 	bne	r2,zero,8020c52c <_dtoa_r+0xeac>
8020c51c:	d9800317 	ldw	r6,12(sp)
8020c520:	3000021e 	bne	r6,zero,8020c52c <_dtoa_r+0xeac>
8020c524:	d8c00617 	ldw	r3,24(sp)
8020c528:	18003726 	beq	r3,zero,8020c608 <_dtoa_r+0xf88>
8020c52c:	b0002016 	blt	r22,zero,8020c5b0 <_dtoa_r+0xf30>
8020c530:	b000041e 	bne	r22,zero,8020c544 <_dtoa_r+0xec4>
8020c534:	d9000317 	ldw	r4,12(sp)
8020c538:	2000021e 	bne	r4,zero,8020c544 <_dtoa_r+0xec4>
8020c53c:	d8c00617 	ldw	r3,24(sp)
8020c540:	18001b26 	beq	r3,zero,8020c5b0 <_dtoa_r+0xf30>
8020c544:	00810716 	blt	zero,r2,8020c964 <_dtoa_r+0x12e4>
8020c548:	d8c00417 	ldw	r3,16(sp)
8020c54c:	9d800044 	addi	r22,r19,1
8020c550:	9c800005 	stb	r18,0(r19)
8020c554:	b02f883a 	mov	r23,r22
8020c558:	98c10626 	beq	r19,r3,8020c974 <_dtoa_r+0x12f4>
8020c55c:	800b883a 	mov	r5,r16
8020c560:	000f883a 	mov	r7,zero
8020c564:	01800284 	movi	r6,10
8020c568:	e009883a 	mov	r4,fp
8020c56c:	020eca40 	call	8020eca4 <__multadd>
8020c570:	1021883a 	mov	r16,r2
8020c574:	000f883a 	mov	r7,zero
8020c578:	01800284 	movi	r6,10
8020c57c:	880b883a 	mov	r5,r17
8020c580:	e009883a 	mov	r4,fp
8020c584:	8d002526 	beq	r17,r20,8020c61c <_dtoa_r+0xf9c>
8020c588:	020eca40 	call	8020eca4 <__multadd>
8020c58c:	a00b883a 	mov	r5,r20
8020c590:	000f883a 	mov	r7,zero
8020c594:	01800284 	movi	r6,10
8020c598:	e009883a 	mov	r4,fp
8020c59c:	1023883a 	mov	r17,r2
8020c5a0:	020eca40 	call	8020eca4 <__multadd>
8020c5a4:	1029883a 	mov	r20,r2
8020c5a8:	b027883a 	mov	r19,r22
8020c5ac:	003fc006 	br	8020c4b0 <__reset+0xfa1ec4b0>
8020c5b0:	9011883a 	mov	r8,r18
8020c5b4:	00800e0e 	bge	zero,r2,8020c5f0 <_dtoa_r+0xf70>
8020c5b8:	800b883a 	mov	r5,r16
8020c5bc:	01800044 	movi	r6,1
8020c5c0:	e009883a 	mov	r4,fp
8020c5c4:	da001715 	stw	r8,92(sp)
8020c5c8:	020f3540 	call	8020f354 <__lshift>
8020c5cc:	a80b883a 	mov	r5,r21
8020c5d0:	1009883a 	mov	r4,r2
8020c5d4:	1021883a 	mov	r16,r2
8020c5d8:	020f49c0 	call	8020f49c <__mcmp>
8020c5dc:	da001717 	ldw	r8,92(sp)
8020c5e0:	0081960e 	bge	zero,r2,8020cc3c <_dtoa_r+0x15bc>
8020c5e4:	00800e44 	movi	r2,57
8020c5e8:	40817026 	beq	r8,r2,8020cbac <_dtoa_r+0x152c>
8020c5ec:	ba000c44 	addi	r8,r23,49
8020c5f0:	8825883a 	mov	r18,r17
8020c5f4:	9dc00044 	addi	r23,r19,1
8020c5f8:	9a000005 	stb	r8,0(r19)
8020c5fc:	a023883a 	mov	r17,r20
8020c600:	dc000915 	stw	r16,36(sp)
8020c604:	003f2406 	br	8020c298 <__reset+0xfa1ec298>
8020c608:	00800e44 	movi	r2,57
8020c60c:	9011883a 	mov	r8,r18
8020c610:	90816626 	beq	r18,r2,8020cbac <_dtoa_r+0x152c>
8020c614:	05bff516 	blt	zero,r22,8020c5ec <__reset+0xfa1ec5ec>
8020c618:	003ff506 	br	8020c5f0 <__reset+0xfa1ec5f0>
8020c61c:	020eca40 	call	8020eca4 <__multadd>
8020c620:	1023883a 	mov	r17,r2
8020c624:	1029883a 	mov	r20,r2
8020c628:	003fdf06 	br	8020c5a8 <__reset+0xfa1ec5a8>
8020c62c:	e009883a 	mov	r4,fp
8020c630:	020ec7c0 	call	8020ec7c <_Bfree>
8020c634:	00800044 	movi	r2,1
8020c638:	003fbc06 	br	8020c52c <__reset+0xfa1ec52c>
8020c63c:	a80b883a 	mov	r5,r21
8020c640:	8009883a 	mov	r4,r16
8020c644:	020f49c0 	call	8020f49c <__mcmp>
8020c648:	103edb0e 	bge	r2,zero,8020c1b8 <__reset+0xfa1ec1b8>
8020c64c:	800b883a 	mov	r5,r16
8020c650:	000f883a 	mov	r7,zero
8020c654:	01800284 	movi	r6,10
8020c658:	e009883a 	mov	r4,fp
8020c65c:	020eca40 	call	8020eca4 <__multadd>
8020c660:	1021883a 	mov	r16,r2
8020c664:	d8800517 	ldw	r2,20(sp)
8020c668:	d8c00b17 	ldw	r3,44(sp)
8020c66c:	10bfffc4 	addi	r2,r2,-1
8020c670:	d8800515 	stw	r2,20(sp)
8020c674:	183f761e 	bne	r3,zero,8020c450 <__reset+0xfa1ec450>
8020c678:	d9000c17 	ldw	r4,48(sp)
8020c67c:	0101730e 	bge	zero,r4,8020cc4c <_dtoa_r+0x15cc>
8020c680:	d9000615 	stw	r4,24(sp)
8020c684:	003ed006 	br	8020c1c8 <__reset+0xfa1ec1c8>
8020c688:	00800084 	movi	r2,2
8020c68c:	3081861e 	bne	r6,r2,8020cca8 <_dtoa_r+0x1628>
8020c690:	d8000b15 	stw	zero,44(sp)
8020c694:	003f3c06 	br	8020c388 <__reset+0xfa1ec388>
8020c698:	dc000917 	ldw	r16,36(sp)
8020c69c:	003e9206 	br	8020c0e8 <__reset+0xfa1ec0e8>
8020c6a0:	d9c00317 	ldw	r7,12(sp)
8020c6a4:	00800084 	movi	r2,2
8020c6a8:	11fec50e 	bge	r2,r7,8020c1c0 <__reset+0xfa1ec1c0>
8020c6ac:	d9000617 	ldw	r4,24(sp)
8020c6b0:	20013c1e 	bne	r4,zero,8020cba4 <_dtoa_r+0x1524>
8020c6b4:	a80b883a 	mov	r5,r21
8020c6b8:	000f883a 	mov	r7,zero
8020c6bc:	01800144 	movi	r6,5
8020c6c0:	e009883a 	mov	r4,fp
8020c6c4:	020eca40 	call	8020eca4 <__multadd>
8020c6c8:	100b883a 	mov	r5,r2
8020c6cc:	8009883a 	mov	r4,r16
8020c6d0:	102b883a 	mov	r21,r2
8020c6d4:	020f49c0 	call	8020f49c <__mcmp>
8020c6d8:	dc000915 	stw	r16,36(sp)
8020c6dc:	00bf410e 	bge	zero,r2,8020c3e4 <__reset+0xfa1ec3e4>
8020c6e0:	d9c00717 	ldw	r7,28(sp)
8020c6e4:	00800c44 	movi	r2,49
8020c6e8:	38800005 	stb	r2,0(r7)
8020c6ec:	d8800517 	ldw	r2,20(sp)
8020c6f0:	3dc00044 	addi	r23,r7,1
8020c6f4:	10800044 	addi	r2,r2,1
8020c6f8:	d8800515 	stw	r2,20(sp)
8020c6fc:	003f3d06 	br	8020c3f4 <__reset+0xfa1ec3f4>
8020c700:	d9800517 	ldw	r6,20(sp)
8020c704:	d9c00717 	ldw	r7,28(sp)
8020c708:	00800c44 	movi	r2,49
8020c70c:	31800044 	addi	r6,r6,1
8020c710:	d9800515 	stw	r6,20(sp)
8020c714:	38800005 	stb	r2,0(r7)
8020c718:	003edf06 	br	8020c298 <__reset+0xfa1ec298>
8020c71c:	d8000b15 	stw	zero,44(sp)
8020c720:	003c9f06 	br	8020b9a0 <__reset+0xfa1eb9a0>
8020c724:	903e7e1e 	bne	r18,zero,8020c120 <__reset+0xfa1ec120>
8020c728:	00800434 	movhi	r2,16
8020c72c:	10bfffc4 	addi	r2,r2,-1
8020c730:	9884703a 	and	r2,r19,r2
8020c734:	1000ea1e 	bne	r2,zero,8020cae0 <_dtoa_r+0x1460>
8020c738:	9cdffc2c 	andhi	r19,r19,32752
8020c73c:	9800e826 	beq	r19,zero,8020cae0 <_dtoa_r+0x1460>
8020c740:	d9c00817 	ldw	r7,32(sp)
8020c744:	b5800044 	addi	r22,r22,1
8020c748:	04c00044 	movi	r19,1
8020c74c:	39c00044 	addi	r7,r7,1
8020c750:	d9c00815 	stw	r7,32(sp)
8020c754:	d8800d17 	ldw	r2,52(sp)
8020c758:	103e721e 	bne	r2,zero,8020c124 <__reset+0xfa1ec124>
8020c75c:	00800044 	movi	r2,1
8020c760:	003e7906 	br	8020c148 <__reset+0xfa1ec148>
8020c764:	8009883a 	mov	r4,r16
8020c768:	02168800 	call	80216880 <__floatsidf>
8020c76c:	d9800f17 	ldw	r6,60(sp)
8020c770:	d9c01017 	ldw	r7,64(sp)
8020c774:	1009883a 	mov	r4,r2
8020c778:	180b883a 	mov	r5,r3
8020c77c:	02157ec0 	call	802157ec <__muldf3>
8020c780:	000d883a 	mov	r6,zero
8020c784:	01d00734 	movhi	r7,16412
8020c788:	1009883a 	mov	r4,r2
8020c78c:	180b883a 	mov	r5,r3
8020c790:	02144000 	call	80214400 <__adddf3>
8020c794:	047f3034 	movhi	r17,64704
8020c798:	1021883a 	mov	r16,r2
8020c79c:	1c63883a 	add	r17,r3,r17
8020c7a0:	d9000f17 	ldw	r4,60(sp)
8020c7a4:	d9401017 	ldw	r5,64(sp)
8020c7a8:	000d883a 	mov	r6,zero
8020c7ac:	01d00534 	movhi	r7,16404
8020c7b0:	0215f040 	call	80215f04 <__subdf3>
8020c7b4:	800d883a 	mov	r6,r16
8020c7b8:	880f883a 	mov	r7,r17
8020c7bc:	1009883a 	mov	r4,r2
8020c7c0:	180b883a 	mov	r5,r3
8020c7c4:	102b883a 	mov	r21,r2
8020c7c8:	1829883a 	mov	r20,r3
8020c7cc:	021561c0 	call	8021561c <__gedf2>
8020c7d0:	00806c16 	blt	zero,r2,8020c984 <_dtoa_r+0x1304>
8020c7d4:	89e0003c 	xorhi	r7,r17,32768
8020c7d8:	800d883a 	mov	r6,r16
8020c7dc:	a809883a 	mov	r4,r21
8020c7e0:	a00b883a 	mov	r5,r20
8020c7e4:	02156f80 	call	802156f8 <__ledf2>
8020c7e8:	103d7e0e 	bge	r2,zero,8020bde4 <__reset+0xfa1ebde4>
8020c7ec:	002b883a 	mov	r21,zero
8020c7f0:	0023883a 	mov	r17,zero
8020c7f4:	003efb06 	br	8020c3e4 <__reset+0xfa1ec3e4>
8020c7f8:	d8800717 	ldw	r2,28(sp)
8020c7fc:	003bd006 	br	8020b740 <__reset+0xfa1eb740>
8020c800:	d9000a17 	ldw	r4,40(sp)
8020c804:	d9800d17 	ldw	r6,52(sp)
8020c808:	dd400a15 	stw	r21,40(sp)
8020c80c:	a905c83a 	sub	r2,r21,r4
8020c810:	308d883a 	add	r6,r6,r2
8020c814:	d9800d15 	stw	r6,52(sp)
8020c818:	002b883a 	mov	r21,zero
8020c81c:	003e0606 	br	8020c038 <__reset+0xfa1ec038>
8020c820:	9023883a 	mov	r17,r18
8020c824:	9829883a 	mov	r20,r19
8020c828:	04000084 	movi	r16,2
8020c82c:	003c9206 	br	8020ba78 <__reset+0xfa1eba78>
8020c830:	04000044 	movi	r16,1
8020c834:	dc000c15 	stw	r16,48(sp)
8020c838:	dc000615 	stw	r16,24(sp)
8020c83c:	dc002215 	stw	r16,136(sp)
8020c840:	e0001115 	stw	zero,68(fp)
8020c844:	000b883a 	mov	r5,zero
8020c848:	003c6906 	br	8020b9f0 <__reset+0xfa1eb9f0>
8020c84c:	3021883a 	mov	r16,r6
8020c850:	003ffb06 	br	8020c840 <__reset+0xfa1ec840>
8020c854:	1000021e 	bne	r2,zero,8020c860 <_dtoa_r+0x11e0>
8020c858:	4200004c 	andi	r8,r8,1
8020c85c:	403e7d1e 	bne	r8,zero,8020c254 <__reset+0xfa1ec254>
8020c860:	01000c04 	movi	r4,48
8020c864:	00000106 	br	8020c86c <_dtoa_r+0x11ec>
8020c868:	102f883a 	mov	r23,r2
8020c86c:	b8bfffc4 	addi	r2,r23,-1
8020c870:	10c00007 	ldb	r3,0(r2)
8020c874:	193ffc26 	beq	r3,r4,8020c868 <__reset+0xfa1ec868>
8020c878:	003e8706 	br	8020c298 <__reset+0xfa1ec298>
8020c87c:	d8800517 	ldw	r2,20(sp)
8020c880:	00a3c83a 	sub	r17,zero,r2
8020c884:	8800a426 	beq	r17,zero,8020cb18 <_dtoa_r+0x1498>
8020c888:	888003cc 	andi	r2,r17,15
8020c88c:	100490fa 	slli	r2,r2,3
8020c890:	00e008b4 	movhi	r3,32802
8020c894:	18f67604 	addi	r3,r3,-9768
8020c898:	1885883a 	add	r2,r3,r2
8020c89c:	11800017 	ldw	r6,0(r2)
8020c8a0:	11c00117 	ldw	r7,4(r2)
8020c8a4:	9009883a 	mov	r4,r18
8020c8a8:	980b883a 	mov	r5,r19
8020c8ac:	8823d13a 	srai	r17,r17,4
8020c8b0:	02157ec0 	call	802157ec <__muldf3>
8020c8b4:	d8800f15 	stw	r2,60(sp)
8020c8b8:	d8c01015 	stw	r3,64(sp)
8020c8bc:	8800e826 	beq	r17,zero,8020cc60 <_dtoa_r+0x15e0>
8020c8c0:	052008b4 	movhi	r20,32802
8020c8c4:	a5366c04 	addi	r20,r20,-9808
8020c8c8:	04000084 	movi	r16,2
8020c8cc:	8980004c 	andi	r6,r17,1
8020c8d0:	1009883a 	mov	r4,r2
8020c8d4:	8823d07a 	srai	r17,r17,1
8020c8d8:	180b883a 	mov	r5,r3
8020c8dc:	30000426 	beq	r6,zero,8020c8f0 <_dtoa_r+0x1270>
8020c8e0:	a1800017 	ldw	r6,0(r20)
8020c8e4:	a1c00117 	ldw	r7,4(r20)
8020c8e8:	84000044 	addi	r16,r16,1
8020c8ec:	02157ec0 	call	802157ec <__muldf3>
8020c8f0:	a5000204 	addi	r20,r20,8
8020c8f4:	883ff51e 	bne	r17,zero,8020c8cc <__reset+0xfa1ec8cc>
8020c8f8:	d8800f15 	stw	r2,60(sp)
8020c8fc:	d8c01015 	stw	r3,64(sp)
8020c900:	003c7606 	br	8020badc <__reset+0xfa1ebadc>
8020c904:	00c00c04 	movi	r3,48
8020c908:	10c00005 	stb	r3,0(r2)
8020c90c:	d8c00517 	ldw	r3,20(sp)
8020c910:	bd3fffc3 	ldbu	r20,-1(r23)
8020c914:	18c00044 	addi	r3,r3,1
8020c918:	d8c00515 	stw	r3,20(sp)
8020c91c:	003db906 	br	8020c004 <__reset+0xfa1ec004>
8020c920:	89400117 	ldw	r5,4(r17)
8020c924:	e009883a 	mov	r4,fp
8020c928:	020ebd40 	call	8020ebd4 <_Balloc>
8020c92c:	89800417 	ldw	r6,16(r17)
8020c930:	89400304 	addi	r5,r17,12
8020c934:	11000304 	addi	r4,r2,12
8020c938:	31800084 	addi	r6,r6,2
8020c93c:	318d883a 	add	r6,r6,r6
8020c940:	318d883a 	add	r6,r6,r6
8020c944:	1027883a 	mov	r19,r2
8020c948:	0206aa00 	call	80206aa0 <memcpy>
8020c94c:	01800044 	movi	r6,1
8020c950:	980b883a 	mov	r5,r19
8020c954:	e009883a 	mov	r4,fp
8020c958:	020f3540 	call	8020f354 <__lshift>
8020c95c:	1029883a 	mov	r20,r2
8020c960:	003ecc06 	br	8020c494 <__reset+0xfa1ec494>
8020c964:	00800e44 	movi	r2,57
8020c968:	90809026 	beq	r18,r2,8020cbac <_dtoa_r+0x152c>
8020c96c:	92000044 	addi	r8,r18,1
8020c970:	003f1f06 	br	8020c5f0 <__reset+0xfa1ec5f0>
8020c974:	9011883a 	mov	r8,r18
8020c978:	8825883a 	mov	r18,r17
8020c97c:	a023883a 	mov	r17,r20
8020c980:	003e2906 	br	8020c228 <__reset+0xfa1ec228>
8020c984:	002b883a 	mov	r21,zero
8020c988:	0023883a 	mov	r17,zero
8020c98c:	003f5406 	br	8020c6e0 <__reset+0xfa1ec6e0>
8020c990:	61bfffc4 	addi	r6,r12,-1
8020c994:	300490fa 	slli	r2,r6,3
8020c998:	00e008b4 	movhi	r3,32802
8020c99c:	18f67604 	addi	r3,r3,-9768
8020c9a0:	1885883a 	add	r2,r3,r2
8020c9a4:	11000017 	ldw	r4,0(r2)
8020c9a8:	11400117 	ldw	r5,4(r2)
8020c9ac:	d8800717 	ldw	r2,28(sp)
8020c9b0:	880f883a 	mov	r7,r17
8020c9b4:	d9801215 	stw	r6,72(sp)
8020c9b8:	800d883a 	mov	r6,r16
8020c9bc:	db001615 	stw	r12,88(sp)
8020c9c0:	15c00044 	addi	r23,r2,1
8020c9c4:	02157ec0 	call	802157ec <__muldf3>
8020c9c8:	d9401017 	ldw	r5,64(sp)
8020c9cc:	d9000f17 	ldw	r4,60(sp)
8020c9d0:	d8c01515 	stw	r3,84(sp)
8020c9d4:	d8801415 	stw	r2,80(sp)
8020c9d8:	02168000 	call	80216800 <__fixdfsi>
8020c9dc:	1009883a 	mov	r4,r2
8020c9e0:	1021883a 	mov	r16,r2
8020c9e4:	02168800 	call	80216880 <__floatsidf>
8020c9e8:	d9000f17 	ldw	r4,60(sp)
8020c9ec:	d9401017 	ldw	r5,64(sp)
8020c9f0:	100d883a 	mov	r6,r2
8020c9f4:	180f883a 	mov	r7,r3
8020c9f8:	0215f040 	call	80215f04 <__subdf3>
8020c9fc:	1829883a 	mov	r20,r3
8020ca00:	d8c00717 	ldw	r3,28(sp)
8020ca04:	84000c04 	addi	r16,r16,48
8020ca08:	1023883a 	mov	r17,r2
8020ca0c:	1c000005 	stb	r16,0(r3)
8020ca10:	db001617 	ldw	r12,88(sp)
8020ca14:	00800044 	movi	r2,1
8020ca18:	60802226 	beq	r12,r2,8020caa4 <_dtoa_r+0x1424>
8020ca1c:	d9c00717 	ldw	r7,28(sp)
8020ca20:	8805883a 	mov	r2,r17
8020ca24:	b82b883a 	mov	r21,r23
8020ca28:	3b19883a 	add	r12,r7,r12
8020ca2c:	6023883a 	mov	r17,r12
8020ca30:	a007883a 	mov	r3,r20
8020ca34:	dc800f15 	stw	r18,60(sp)
8020ca38:	000d883a 	mov	r6,zero
8020ca3c:	01d00934 	movhi	r7,16420
8020ca40:	1009883a 	mov	r4,r2
8020ca44:	180b883a 	mov	r5,r3
8020ca48:	02157ec0 	call	802157ec <__muldf3>
8020ca4c:	180b883a 	mov	r5,r3
8020ca50:	1009883a 	mov	r4,r2
8020ca54:	1829883a 	mov	r20,r3
8020ca58:	1025883a 	mov	r18,r2
8020ca5c:	02168000 	call	80216800 <__fixdfsi>
8020ca60:	1009883a 	mov	r4,r2
8020ca64:	1021883a 	mov	r16,r2
8020ca68:	02168800 	call	80216880 <__floatsidf>
8020ca6c:	100d883a 	mov	r6,r2
8020ca70:	180f883a 	mov	r7,r3
8020ca74:	9009883a 	mov	r4,r18
8020ca78:	a00b883a 	mov	r5,r20
8020ca7c:	84000c04 	addi	r16,r16,48
8020ca80:	0215f040 	call	80215f04 <__subdf3>
8020ca84:	ad400044 	addi	r21,r21,1
8020ca88:	ac3fffc5 	stb	r16,-1(r21)
8020ca8c:	ac7fea1e 	bne	r21,r17,8020ca38 <__reset+0xfa1eca38>
8020ca90:	1023883a 	mov	r17,r2
8020ca94:	d8801217 	ldw	r2,72(sp)
8020ca98:	dc800f17 	ldw	r18,60(sp)
8020ca9c:	1829883a 	mov	r20,r3
8020caa0:	b8af883a 	add	r23,r23,r2
8020caa4:	d9001417 	ldw	r4,80(sp)
8020caa8:	d9401517 	ldw	r5,84(sp)
8020caac:	000d883a 	mov	r6,zero
8020cab0:	01cff834 	movhi	r7,16352
8020cab4:	02144000 	call	80214400 <__adddf3>
8020cab8:	880d883a 	mov	r6,r17
8020cabc:	a00f883a 	mov	r7,r20
8020cac0:	1009883a 	mov	r4,r2
8020cac4:	180b883a 	mov	r5,r3
8020cac8:	02156f80 	call	802156f8 <__ledf2>
8020cacc:	10003e0e 	bge	r2,zero,8020cbc8 <_dtoa_r+0x1548>
8020cad0:	d9001317 	ldw	r4,76(sp)
8020cad4:	bd3fffc3 	ldbu	r20,-1(r23)
8020cad8:	d9000515 	stw	r4,20(sp)
8020cadc:	003d3b06 	br	8020bfcc <__reset+0xfa1ebfcc>
8020cae0:	0027883a 	mov	r19,zero
8020cae4:	003f1b06 	br	8020c754 <__reset+0xfa1ec754>
8020cae8:	d8800817 	ldw	r2,32(sp)
8020caec:	11e9c83a 	sub	r20,r2,r7
8020caf0:	0005883a 	mov	r2,zero
8020caf4:	003d5406 	br	8020c048 <__reset+0xfa1ec048>
8020caf8:	00800044 	movi	r2,1
8020cafc:	003dc706 	br	8020c21c <__reset+0xfa1ec21c>
8020cb00:	d8c00217 	ldw	r3,8(sp)
8020cb04:	00800d84 	movi	r2,54
8020cb08:	dd400a17 	ldw	r21,40(sp)
8020cb0c:	10c5c83a 	sub	r2,r2,r3
8020cb10:	dd000817 	ldw	r20,32(sp)
8020cb14:	003d4c06 	br	8020c048 <__reset+0xfa1ec048>
8020cb18:	dc800f15 	stw	r18,60(sp)
8020cb1c:	dcc01015 	stw	r19,64(sp)
8020cb20:	04000084 	movi	r16,2
8020cb24:	003bed06 	br	8020badc <__reset+0xfa1ebadc>
8020cb28:	d9000617 	ldw	r4,24(sp)
8020cb2c:	203f0d26 	beq	r4,zero,8020c764 <__reset+0xfa1ec764>
8020cb30:	d9800c17 	ldw	r6,48(sp)
8020cb34:	01bcab0e 	bge	zero,r6,8020bde4 <__reset+0xfa1ebde4>
8020cb38:	d9401017 	ldw	r5,64(sp)
8020cb3c:	d9000f17 	ldw	r4,60(sp)
8020cb40:	000d883a 	mov	r6,zero
8020cb44:	01d00934 	movhi	r7,16420
8020cb48:	02157ec0 	call	802157ec <__muldf3>
8020cb4c:	81000044 	addi	r4,r16,1
8020cb50:	d8800f15 	stw	r2,60(sp)
8020cb54:	d8c01015 	stw	r3,64(sp)
8020cb58:	02168800 	call	80216880 <__floatsidf>
8020cb5c:	d9800f17 	ldw	r6,60(sp)
8020cb60:	d9c01017 	ldw	r7,64(sp)
8020cb64:	1009883a 	mov	r4,r2
8020cb68:	180b883a 	mov	r5,r3
8020cb6c:	02157ec0 	call	802157ec <__muldf3>
8020cb70:	01d00734 	movhi	r7,16412
8020cb74:	000d883a 	mov	r6,zero
8020cb78:	1009883a 	mov	r4,r2
8020cb7c:	180b883a 	mov	r5,r3
8020cb80:	02144000 	call	80214400 <__adddf3>
8020cb84:	d9c00517 	ldw	r7,20(sp)
8020cb88:	047f3034 	movhi	r17,64704
8020cb8c:	1021883a 	mov	r16,r2
8020cb90:	39ffffc4 	addi	r7,r7,-1
8020cb94:	d9c01315 	stw	r7,76(sp)
8020cb98:	1c63883a 	add	r17,r3,r17
8020cb9c:	db000c17 	ldw	r12,48(sp)
8020cba0:	003bea06 	br	8020bb4c <__reset+0xfa1ebb4c>
8020cba4:	dc000915 	stw	r16,36(sp)
8020cba8:	003e0e06 	br	8020c3e4 <__reset+0xfa1ec3e4>
8020cbac:	01000e44 	movi	r4,57
8020cbb0:	8825883a 	mov	r18,r17
8020cbb4:	9dc00044 	addi	r23,r19,1
8020cbb8:	99000005 	stb	r4,0(r19)
8020cbbc:	a023883a 	mov	r17,r20
8020cbc0:	dc000915 	stw	r16,36(sp)
8020cbc4:	003da406 	br	8020c258 <__reset+0xfa1ec258>
8020cbc8:	d9801417 	ldw	r6,80(sp)
8020cbcc:	d9c01517 	ldw	r7,84(sp)
8020cbd0:	0009883a 	mov	r4,zero
8020cbd4:	014ff834 	movhi	r5,16352
8020cbd8:	0215f040 	call	80215f04 <__subdf3>
8020cbdc:	880d883a 	mov	r6,r17
8020cbe0:	a00f883a 	mov	r7,r20
8020cbe4:	1009883a 	mov	r4,r2
8020cbe8:	180b883a 	mov	r5,r3
8020cbec:	021561c0 	call	8021561c <__gedf2>
8020cbf0:	00bc7c0e 	bge	zero,r2,8020bde4 <__reset+0xfa1ebde4>
8020cbf4:	01000c04 	movi	r4,48
8020cbf8:	00000106 	br	8020cc00 <_dtoa_r+0x1580>
8020cbfc:	102f883a 	mov	r23,r2
8020cc00:	b8bfffc4 	addi	r2,r23,-1
8020cc04:	10c00007 	ldb	r3,0(r2)
8020cc08:	193ffc26 	beq	r3,r4,8020cbfc <__reset+0xfa1ecbfc>
8020cc0c:	d9801317 	ldw	r6,76(sp)
8020cc10:	d9800515 	stw	r6,20(sp)
8020cc14:	003c4406 	br	8020bd28 <__reset+0xfa1ebd28>
8020cc18:	d9801317 	ldw	r6,76(sp)
8020cc1c:	d9800515 	stw	r6,20(sp)
8020cc20:	003cea06 	br	8020bfcc <__reset+0xfa1ebfcc>
8020cc24:	dd800f17 	ldw	r22,60(sp)
8020cc28:	dcc01017 	ldw	r19,64(sp)
8020cc2c:	dc801217 	ldw	r18,72(sp)
8020cc30:	003c6c06 	br	8020bde4 <__reset+0xfa1ebde4>
8020cc34:	903e031e 	bne	r18,zero,8020c444 <__reset+0xfa1ec444>
8020cc38:	003ebb06 	br	8020c728 <__reset+0xfa1ec728>
8020cc3c:	103e6c1e 	bne	r2,zero,8020c5f0 <__reset+0xfa1ec5f0>
8020cc40:	4080004c 	andi	r2,r8,1
8020cc44:	103e6a26 	beq	r2,zero,8020c5f0 <__reset+0xfa1ec5f0>
8020cc48:	003e6606 	br	8020c5e4 <__reset+0xfa1ec5e4>
8020cc4c:	d8c00317 	ldw	r3,12(sp)
8020cc50:	00800084 	movi	r2,2
8020cc54:	10c02916 	blt	r2,r3,8020ccfc <_dtoa_r+0x167c>
8020cc58:	d9000c17 	ldw	r4,48(sp)
8020cc5c:	003e8806 	br	8020c680 <__reset+0xfa1ec680>
8020cc60:	04000084 	movi	r16,2
8020cc64:	003b9d06 	br	8020badc <__reset+0xfa1ebadc>
8020cc68:	d9001317 	ldw	r4,76(sp)
8020cc6c:	d9000515 	stw	r4,20(sp)
8020cc70:	003cd606 	br	8020bfcc <__reset+0xfa1ebfcc>
8020cc74:	d8801317 	ldw	r2,76(sp)
8020cc78:	d8800515 	stw	r2,20(sp)
8020cc7c:	003c2a06 	br	8020bd28 <__reset+0xfa1ebd28>
8020cc80:	d9800317 	ldw	r6,12(sp)
8020cc84:	00800084 	movi	r2,2
8020cc88:	11801516 	blt	r2,r6,8020cce0 <_dtoa_r+0x1660>
8020cc8c:	d9c00c17 	ldw	r7,48(sp)
8020cc90:	d9c00615 	stw	r7,24(sp)
8020cc94:	003df706 	br	8020c474 <__reset+0xfa1ec474>
8020cc98:	193d3926 	beq	r3,r4,8020c180 <__reset+0xfa1ec180>
8020cc9c:	00c00f04 	movi	r3,60
8020cca0:	1885c83a 	sub	r2,r3,r2
8020cca4:	003ddf06 	br	8020c424 <__reset+0xfa1ec424>
8020cca8:	e009883a 	mov	r4,fp
8020ccac:	e0001115 	stw	zero,68(fp)
8020ccb0:	000b883a 	mov	r5,zero
8020ccb4:	020ebd40 	call	8020ebd4 <_Balloc>
8020ccb8:	d8800715 	stw	r2,28(sp)
8020ccbc:	d8c00717 	ldw	r3,28(sp)
8020ccc0:	00bfffc4 	movi	r2,-1
8020ccc4:	01000044 	movi	r4,1
8020ccc8:	d8800c15 	stw	r2,48(sp)
8020cccc:	e0c01015 	stw	r3,64(fp)
8020ccd0:	d9000b15 	stw	r4,44(sp)
8020ccd4:	d8800615 	stw	r2,24(sp)
8020ccd8:	d8002215 	stw	zero,136(sp)
8020ccdc:	003c4106 	br	8020bde4 <__reset+0xfa1ebde4>
8020cce0:	d8c00c17 	ldw	r3,48(sp)
8020cce4:	d8c00615 	stw	r3,24(sp)
8020cce8:	003e7006 	br	8020c6ac <__reset+0xfa1ec6ac>
8020ccec:	04400044 	movi	r17,1
8020ccf0:	003b2006 	br	8020b974 <__reset+0xfa1eb974>
8020ccf4:	000b883a 	mov	r5,zero
8020ccf8:	003b3d06 	br	8020b9f0 <__reset+0xfa1eb9f0>
8020ccfc:	d8800c17 	ldw	r2,48(sp)
8020cd00:	d8800615 	stw	r2,24(sp)
8020cd04:	003e6906 	br	8020c6ac <__reset+0xfa1ec6ac>

8020cd08 <__sflush_r>:
8020cd08:	2880030b 	ldhu	r2,12(r5)
8020cd0c:	defffb04 	addi	sp,sp,-20
8020cd10:	dcc00315 	stw	r19,12(sp)
8020cd14:	dc400115 	stw	r17,4(sp)
8020cd18:	dfc00415 	stw	ra,16(sp)
8020cd1c:	dc800215 	stw	r18,8(sp)
8020cd20:	dc000015 	stw	r16,0(sp)
8020cd24:	10c0020c 	andi	r3,r2,8
8020cd28:	2823883a 	mov	r17,r5
8020cd2c:	2027883a 	mov	r19,r4
8020cd30:	1800311e 	bne	r3,zero,8020cdf8 <__sflush_r+0xf0>
8020cd34:	28c00117 	ldw	r3,4(r5)
8020cd38:	10820014 	ori	r2,r2,2048
8020cd3c:	2880030d 	sth	r2,12(r5)
8020cd40:	00c04b0e 	bge	zero,r3,8020ce70 <__sflush_r+0x168>
8020cd44:	8a000a17 	ldw	r8,40(r17)
8020cd48:	40002326 	beq	r8,zero,8020cdd8 <__sflush_r+0xd0>
8020cd4c:	9c000017 	ldw	r16,0(r19)
8020cd50:	10c4000c 	andi	r3,r2,4096
8020cd54:	98000015 	stw	zero,0(r19)
8020cd58:	18004826 	beq	r3,zero,8020ce7c <__sflush_r+0x174>
8020cd5c:	89801417 	ldw	r6,80(r17)
8020cd60:	10c0010c 	andi	r3,r2,4
8020cd64:	18000626 	beq	r3,zero,8020cd80 <__sflush_r+0x78>
8020cd68:	88c00117 	ldw	r3,4(r17)
8020cd6c:	88800c17 	ldw	r2,48(r17)
8020cd70:	30cdc83a 	sub	r6,r6,r3
8020cd74:	10000226 	beq	r2,zero,8020cd80 <__sflush_r+0x78>
8020cd78:	88800f17 	ldw	r2,60(r17)
8020cd7c:	308dc83a 	sub	r6,r6,r2
8020cd80:	89400717 	ldw	r5,28(r17)
8020cd84:	000f883a 	mov	r7,zero
8020cd88:	9809883a 	mov	r4,r19
8020cd8c:	403ee83a 	callr	r8
8020cd90:	00ffffc4 	movi	r3,-1
8020cd94:	10c04426 	beq	r2,r3,8020cea8 <__sflush_r+0x1a0>
8020cd98:	88c0030b 	ldhu	r3,12(r17)
8020cd9c:	89000417 	ldw	r4,16(r17)
8020cda0:	88000115 	stw	zero,4(r17)
8020cda4:	197dffcc 	andi	r5,r3,63487
8020cda8:	8940030d 	sth	r5,12(r17)
8020cdac:	89000015 	stw	r4,0(r17)
8020cdb0:	18c4000c 	andi	r3,r3,4096
8020cdb4:	18002c1e 	bne	r3,zero,8020ce68 <__sflush_r+0x160>
8020cdb8:	89400c17 	ldw	r5,48(r17)
8020cdbc:	9c000015 	stw	r16,0(r19)
8020cdc0:	28000526 	beq	r5,zero,8020cdd8 <__sflush_r+0xd0>
8020cdc4:	88801004 	addi	r2,r17,64
8020cdc8:	28800226 	beq	r5,r2,8020cdd4 <__sflush_r+0xcc>
8020cdcc:	9809883a 	mov	r4,r19
8020cdd0:	020d4740 	call	8020d474 <_free_r>
8020cdd4:	88000c15 	stw	zero,48(r17)
8020cdd8:	0005883a 	mov	r2,zero
8020cddc:	dfc00417 	ldw	ra,16(sp)
8020cde0:	dcc00317 	ldw	r19,12(sp)
8020cde4:	dc800217 	ldw	r18,8(sp)
8020cde8:	dc400117 	ldw	r17,4(sp)
8020cdec:	dc000017 	ldw	r16,0(sp)
8020cdf0:	dec00504 	addi	sp,sp,20
8020cdf4:	f800283a 	ret
8020cdf8:	2c800417 	ldw	r18,16(r5)
8020cdfc:	903ff626 	beq	r18,zero,8020cdd8 <__reset+0xfa1ecdd8>
8020ce00:	2c000017 	ldw	r16,0(r5)
8020ce04:	108000cc 	andi	r2,r2,3
8020ce08:	2c800015 	stw	r18,0(r5)
8020ce0c:	84a1c83a 	sub	r16,r16,r18
8020ce10:	1000131e 	bne	r2,zero,8020ce60 <__sflush_r+0x158>
8020ce14:	28800517 	ldw	r2,20(r5)
8020ce18:	88800215 	stw	r2,8(r17)
8020ce1c:	04000316 	blt	zero,r16,8020ce2c <__sflush_r+0x124>
8020ce20:	003fed06 	br	8020cdd8 <__reset+0xfa1ecdd8>
8020ce24:	90a5883a 	add	r18,r18,r2
8020ce28:	043feb0e 	bge	zero,r16,8020cdd8 <__reset+0xfa1ecdd8>
8020ce2c:	88800917 	ldw	r2,36(r17)
8020ce30:	89400717 	ldw	r5,28(r17)
8020ce34:	800f883a 	mov	r7,r16
8020ce38:	900d883a 	mov	r6,r18
8020ce3c:	9809883a 	mov	r4,r19
8020ce40:	103ee83a 	callr	r2
8020ce44:	80a1c83a 	sub	r16,r16,r2
8020ce48:	00bff616 	blt	zero,r2,8020ce24 <__reset+0xfa1ece24>
8020ce4c:	88c0030b 	ldhu	r3,12(r17)
8020ce50:	00bfffc4 	movi	r2,-1
8020ce54:	18c01014 	ori	r3,r3,64
8020ce58:	88c0030d 	sth	r3,12(r17)
8020ce5c:	003fdf06 	br	8020cddc <__reset+0xfa1ecddc>
8020ce60:	0005883a 	mov	r2,zero
8020ce64:	003fec06 	br	8020ce18 <__reset+0xfa1ece18>
8020ce68:	88801415 	stw	r2,80(r17)
8020ce6c:	003fd206 	br	8020cdb8 <__reset+0xfa1ecdb8>
8020ce70:	28c00f17 	ldw	r3,60(r5)
8020ce74:	00ffb316 	blt	zero,r3,8020cd44 <__reset+0xfa1ecd44>
8020ce78:	003fd706 	br	8020cdd8 <__reset+0xfa1ecdd8>
8020ce7c:	89400717 	ldw	r5,28(r17)
8020ce80:	000d883a 	mov	r6,zero
8020ce84:	01c00044 	movi	r7,1
8020ce88:	9809883a 	mov	r4,r19
8020ce8c:	403ee83a 	callr	r8
8020ce90:	100d883a 	mov	r6,r2
8020ce94:	00bfffc4 	movi	r2,-1
8020ce98:	30801426 	beq	r6,r2,8020ceec <__sflush_r+0x1e4>
8020ce9c:	8880030b 	ldhu	r2,12(r17)
8020cea0:	8a000a17 	ldw	r8,40(r17)
8020cea4:	003fae06 	br	8020cd60 <__reset+0xfa1ecd60>
8020cea8:	98c00017 	ldw	r3,0(r19)
8020ceac:	183fba26 	beq	r3,zero,8020cd98 <__reset+0xfa1ecd98>
8020ceb0:	01000744 	movi	r4,29
8020ceb4:	19000626 	beq	r3,r4,8020ced0 <__sflush_r+0x1c8>
8020ceb8:	01000584 	movi	r4,22
8020cebc:	19000426 	beq	r3,r4,8020ced0 <__sflush_r+0x1c8>
8020cec0:	88c0030b 	ldhu	r3,12(r17)
8020cec4:	18c01014 	ori	r3,r3,64
8020cec8:	88c0030d 	sth	r3,12(r17)
8020cecc:	003fc306 	br	8020cddc <__reset+0xfa1ecddc>
8020ced0:	8880030b 	ldhu	r2,12(r17)
8020ced4:	88c00417 	ldw	r3,16(r17)
8020ced8:	88000115 	stw	zero,4(r17)
8020cedc:	10bdffcc 	andi	r2,r2,63487
8020cee0:	8880030d 	sth	r2,12(r17)
8020cee4:	88c00015 	stw	r3,0(r17)
8020cee8:	003fb306 	br	8020cdb8 <__reset+0xfa1ecdb8>
8020ceec:	98800017 	ldw	r2,0(r19)
8020cef0:	103fea26 	beq	r2,zero,8020ce9c <__reset+0xfa1ece9c>
8020cef4:	00c00744 	movi	r3,29
8020cef8:	10c00226 	beq	r2,r3,8020cf04 <__sflush_r+0x1fc>
8020cefc:	00c00584 	movi	r3,22
8020cf00:	10c0031e 	bne	r2,r3,8020cf10 <__sflush_r+0x208>
8020cf04:	9c000015 	stw	r16,0(r19)
8020cf08:	0005883a 	mov	r2,zero
8020cf0c:	003fb306 	br	8020cddc <__reset+0xfa1ecddc>
8020cf10:	88c0030b 	ldhu	r3,12(r17)
8020cf14:	3005883a 	mov	r2,r6
8020cf18:	18c01014 	ori	r3,r3,64
8020cf1c:	88c0030d 	sth	r3,12(r17)
8020cf20:	003fae06 	br	8020cddc <__reset+0xfa1ecddc>

8020cf24 <_fflush_r>:
8020cf24:	defffd04 	addi	sp,sp,-12
8020cf28:	dc000115 	stw	r16,4(sp)
8020cf2c:	dfc00215 	stw	ra,8(sp)
8020cf30:	2021883a 	mov	r16,r4
8020cf34:	20000226 	beq	r4,zero,8020cf40 <_fflush_r+0x1c>
8020cf38:	20800e17 	ldw	r2,56(r4)
8020cf3c:	10000c26 	beq	r2,zero,8020cf70 <_fflush_r+0x4c>
8020cf40:	2880030f 	ldh	r2,12(r5)
8020cf44:	1000051e 	bne	r2,zero,8020cf5c <_fflush_r+0x38>
8020cf48:	0005883a 	mov	r2,zero
8020cf4c:	dfc00217 	ldw	ra,8(sp)
8020cf50:	dc000117 	ldw	r16,4(sp)
8020cf54:	dec00304 	addi	sp,sp,12
8020cf58:	f800283a 	ret
8020cf5c:	8009883a 	mov	r4,r16
8020cf60:	dfc00217 	ldw	ra,8(sp)
8020cf64:	dc000117 	ldw	r16,4(sp)
8020cf68:	dec00304 	addi	sp,sp,12
8020cf6c:	020cd081 	jmpi	8020cd08 <__sflush_r>
8020cf70:	d9400015 	stw	r5,0(sp)
8020cf74:	020d3000 	call	8020d300 <__sinit>
8020cf78:	d9400017 	ldw	r5,0(sp)
8020cf7c:	003ff006 	br	8020cf40 <__reset+0xfa1ecf40>

8020cf80 <fflush>:
8020cf80:	20000526 	beq	r4,zero,8020cf98 <fflush+0x18>
8020cf84:	00a008b4 	movhi	r2,32802
8020cf88:	10be7d04 	addi	r2,r2,-1548
8020cf8c:	200b883a 	mov	r5,r4
8020cf90:	11000017 	ldw	r4,0(r2)
8020cf94:	020cf241 	jmpi	8020cf24 <_fflush_r>
8020cf98:	00a008b4 	movhi	r2,32802
8020cf9c:	10be7c04 	addi	r2,r2,-1552
8020cfa0:	11000017 	ldw	r4,0(r2)
8020cfa4:	01600874 	movhi	r5,32801
8020cfa8:	2973c904 	addi	r5,r5,-12508
8020cfac:	020dd041 	jmpi	8020dd04 <_fwalk_reent>

8020cfb0 <__fp_unlock>:
8020cfb0:	0005883a 	mov	r2,zero
8020cfb4:	f800283a 	ret

8020cfb8 <_cleanup_r>:
8020cfb8:	01600874 	movhi	r5,32801
8020cfbc:	294bf804 	addi	r5,r5,12256
8020cfc0:	020dd041 	jmpi	8020dd04 <_fwalk_reent>

8020cfc4 <__sinit.part.1>:
8020cfc4:	defff704 	addi	sp,sp,-36
8020cfc8:	00e00874 	movhi	r3,32801
8020cfcc:	dfc00815 	stw	ra,32(sp)
8020cfd0:	ddc00715 	stw	r23,28(sp)
8020cfd4:	dd800615 	stw	r22,24(sp)
8020cfd8:	dd400515 	stw	r21,20(sp)
8020cfdc:	dd000415 	stw	r20,16(sp)
8020cfe0:	dcc00315 	stw	r19,12(sp)
8020cfe4:	dc800215 	stw	r18,8(sp)
8020cfe8:	dc400115 	stw	r17,4(sp)
8020cfec:	dc000015 	stw	r16,0(sp)
8020cff0:	18f3ee04 	addi	r3,r3,-12360
8020cff4:	24000117 	ldw	r16,4(r4)
8020cff8:	20c00f15 	stw	r3,60(r4)
8020cffc:	2080bb04 	addi	r2,r4,748
8020d000:	00c000c4 	movi	r3,3
8020d004:	20c0b915 	stw	r3,740(r4)
8020d008:	2080ba15 	stw	r2,744(r4)
8020d00c:	2000b815 	stw	zero,736(r4)
8020d010:	05c00204 	movi	r23,8
8020d014:	00800104 	movi	r2,4
8020d018:	2025883a 	mov	r18,r4
8020d01c:	b80d883a 	mov	r6,r23
8020d020:	81001704 	addi	r4,r16,92
8020d024:	000b883a 	mov	r5,zero
8020d028:	80000015 	stw	zero,0(r16)
8020d02c:	80000115 	stw	zero,4(r16)
8020d030:	80000215 	stw	zero,8(r16)
8020d034:	8080030d 	sth	r2,12(r16)
8020d038:	80001915 	stw	zero,100(r16)
8020d03c:	8000038d 	sth	zero,14(r16)
8020d040:	80000415 	stw	zero,16(r16)
8020d044:	80000515 	stw	zero,20(r16)
8020d048:	80000615 	stw	zero,24(r16)
8020d04c:	020eaac0 	call	8020eaac <memset>
8020d050:	05a00874 	movhi	r22,32801
8020d054:	94400217 	ldw	r17,8(r18)
8020d058:	05600874 	movhi	r21,32801
8020d05c:	05200874 	movhi	r20,32801
8020d060:	04e00874 	movhi	r19,32801
8020d064:	b5807f04 	addi	r22,r22,508
8020d068:	ad409604 	addi	r21,r21,600
8020d06c:	a500b504 	addi	r20,r20,724
8020d070:	9cc0cc04 	addi	r19,r19,816
8020d074:	85800815 	stw	r22,32(r16)
8020d078:	85400915 	stw	r21,36(r16)
8020d07c:	85000a15 	stw	r20,40(r16)
8020d080:	84c00b15 	stw	r19,44(r16)
8020d084:	84000715 	stw	r16,28(r16)
8020d088:	00800284 	movi	r2,10
8020d08c:	8880030d 	sth	r2,12(r17)
8020d090:	00800044 	movi	r2,1
8020d094:	b80d883a 	mov	r6,r23
8020d098:	89001704 	addi	r4,r17,92
8020d09c:	000b883a 	mov	r5,zero
8020d0a0:	88000015 	stw	zero,0(r17)
8020d0a4:	88000115 	stw	zero,4(r17)
8020d0a8:	88000215 	stw	zero,8(r17)
8020d0ac:	88001915 	stw	zero,100(r17)
8020d0b0:	8880038d 	sth	r2,14(r17)
8020d0b4:	88000415 	stw	zero,16(r17)
8020d0b8:	88000515 	stw	zero,20(r17)
8020d0bc:	88000615 	stw	zero,24(r17)
8020d0c0:	020eaac0 	call	8020eaac <memset>
8020d0c4:	94000317 	ldw	r16,12(r18)
8020d0c8:	00800484 	movi	r2,18
8020d0cc:	8c400715 	stw	r17,28(r17)
8020d0d0:	8d800815 	stw	r22,32(r17)
8020d0d4:	8d400915 	stw	r21,36(r17)
8020d0d8:	8d000a15 	stw	r20,40(r17)
8020d0dc:	8cc00b15 	stw	r19,44(r17)
8020d0e0:	8080030d 	sth	r2,12(r16)
8020d0e4:	00800084 	movi	r2,2
8020d0e8:	80000015 	stw	zero,0(r16)
8020d0ec:	80000115 	stw	zero,4(r16)
8020d0f0:	80000215 	stw	zero,8(r16)
8020d0f4:	80001915 	stw	zero,100(r16)
8020d0f8:	8080038d 	sth	r2,14(r16)
8020d0fc:	80000415 	stw	zero,16(r16)
8020d100:	80000515 	stw	zero,20(r16)
8020d104:	80000615 	stw	zero,24(r16)
8020d108:	b80d883a 	mov	r6,r23
8020d10c:	000b883a 	mov	r5,zero
8020d110:	81001704 	addi	r4,r16,92
8020d114:	020eaac0 	call	8020eaac <memset>
8020d118:	00800044 	movi	r2,1
8020d11c:	84000715 	stw	r16,28(r16)
8020d120:	85800815 	stw	r22,32(r16)
8020d124:	85400915 	stw	r21,36(r16)
8020d128:	85000a15 	stw	r20,40(r16)
8020d12c:	84c00b15 	stw	r19,44(r16)
8020d130:	90800e15 	stw	r2,56(r18)
8020d134:	dfc00817 	ldw	ra,32(sp)
8020d138:	ddc00717 	ldw	r23,28(sp)
8020d13c:	dd800617 	ldw	r22,24(sp)
8020d140:	dd400517 	ldw	r21,20(sp)
8020d144:	dd000417 	ldw	r20,16(sp)
8020d148:	dcc00317 	ldw	r19,12(sp)
8020d14c:	dc800217 	ldw	r18,8(sp)
8020d150:	dc400117 	ldw	r17,4(sp)
8020d154:	dc000017 	ldw	r16,0(sp)
8020d158:	dec00904 	addi	sp,sp,36
8020d15c:	f800283a 	ret

8020d160 <__fp_lock>:
8020d160:	0005883a 	mov	r2,zero
8020d164:	f800283a 	ret

8020d168 <__sfmoreglue>:
8020d168:	defffc04 	addi	sp,sp,-16
8020d16c:	dc400115 	stw	r17,4(sp)
8020d170:	2c7fffc4 	addi	r17,r5,-1
8020d174:	8c401a24 	muli	r17,r17,104
8020d178:	dc800215 	stw	r18,8(sp)
8020d17c:	2825883a 	mov	r18,r5
8020d180:	89401d04 	addi	r5,r17,116
8020d184:	dc000015 	stw	r16,0(sp)
8020d188:	dfc00315 	stw	ra,12(sp)
8020d18c:	020e0600 	call	8020e060 <_malloc_r>
8020d190:	1021883a 	mov	r16,r2
8020d194:	10000726 	beq	r2,zero,8020d1b4 <__sfmoreglue+0x4c>
8020d198:	11000304 	addi	r4,r2,12
8020d19c:	10000015 	stw	zero,0(r2)
8020d1a0:	14800115 	stw	r18,4(r2)
8020d1a4:	11000215 	stw	r4,8(r2)
8020d1a8:	89801a04 	addi	r6,r17,104
8020d1ac:	000b883a 	mov	r5,zero
8020d1b0:	020eaac0 	call	8020eaac <memset>
8020d1b4:	8005883a 	mov	r2,r16
8020d1b8:	dfc00317 	ldw	ra,12(sp)
8020d1bc:	dc800217 	ldw	r18,8(sp)
8020d1c0:	dc400117 	ldw	r17,4(sp)
8020d1c4:	dc000017 	ldw	r16,0(sp)
8020d1c8:	dec00404 	addi	sp,sp,16
8020d1cc:	f800283a 	ret

8020d1d0 <__sfp>:
8020d1d0:	defffb04 	addi	sp,sp,-20
8020d1d4:	dc000015 	stw	r16,0(sp)
8020d1d8:	042008b4 	movhi	r16,32802
8020d1dc:	843e7c04 	addi	r16,r16,-1552
8020d1e0:	dcc00315 	stw	r19,12(sp)
8020d1e4:	2027883a 	mov	r19,r4
8020d1e8:	81000017 	ldw	r4,0(r16)
8020d1ec:	dfc00415 	stw	ra,16(sp)
8020d1f0:	dc800215 	stw	r18,8(sp)
8020d1f4:	20800e17 	ldw	r2,56(r4)
8020d1f8:	dc400115 	stw	r17,4(sp)
8020d1fc:	1000021e 	bne	r2,zero,8020d208 <__sfp+0x38>
8020d200:	020cfc40 	call	8020cfc4 <__sinit.part.1>
8020d204:	81000017 	ldw	r4,0(r16)
8020d208:	2480b804 	addi	r18,r4,736
8020d20c:	047fffc4 	movi	r17,-1
8020d210:	91000117 	ldw	r4,4(r18)
8020d214:	94000217 	ldw	r16,8(r18)
8020d218:	213fffc4 	addi	r4,r4,-1
8020d21c:	20000a16 	blt	r4,zero,8020d248 <__sfp+0x78>
8020d220:	8080030f 	ldh	r2,12(r16)
8020d224:	10000c26 	beq	r2,zero,8020d258 <__sfp+0x88>
8020d228:	80c01d04 	addi	r3,r16,116
8020d22c:	00000206 	br	8020d238 <__sfp+0x68>
8020d230:	18bfe60f 	ldh	r2,-104(r3)
8020d234:	10000826 	beq	r2,zero,8020d258 <__sfp+0x88>
8020d238:	213fffc4 	addi	r4,r4,-1
8020d23c:	1c3ffd04 	addi	r16,r3,-12
8020d240:	18c01a04 	addi	r3,r3,104
8020d244:	247ffa1e 	bne	r4,r17,8020d230 <__reset+0xfa1ed230>
8020d248:	90800017 	ldw	r2,0(r18)
8020d24c:	10001d26 	beq	r2,zero,8020d2c4 <__sfp+0xf4>
8020d250:	1025883a 	mov	r18,r2
8020d254:	003fee06 	br	8020d210 <__reset+0xfa1ed210>
8020d258:	00bfffc4 	movi	r2,-1
8020d25c:	8080038d 	sth	r2,14(r16)
8020d260:	00800044 	movi	r2,1
8020d264:	8080030d 	sth	r2,12(r16)
8020d268:	80001915 	stw	zero,100(r16)
8020d26c:	80000015 	stw	zero,0(r16)
8020d270:	80000215 	stw	zero,8(r16)
8020d274:	80000115 	stw	zero,4(r16)
8020d278:	80000415 	stw	zero,16(r16)
8020d27c:	80000515 	stw	zero,20(r16)
8020d280:	80000615 	stw	zero,24(r16)
8020d284:	01800204 	movi	r6,8
8020d288:	000b883a 	mov	r5,zero
8020d28c:	81001704 	addi	r4,r16,92
8020d290:	020eaac0 	call	8020eaac <memset>
8020d294:	8005883a 	mov	r2,r16
8020d298:	80000c15 	stw	zero,48(r16)
8020d29c:	80000d15 	stw	zero,52(r16)
8020d2a0:	80001115 	stw	zero,68(r16)
8020d2a4:	80001215 	stw	zero,72(r16)
8020d2a8:	dfc00417 	ldw	ra,16(sp)
8020d2ac:	dcc00317 	ldw	r19,12(sp)
8020d2b0:	dc800217 	ldw	r18,8(sp)
8020d2b4:	dc400117 	ldw	r17,4(sp)
8020d2b8:	dc000017 	ldw	r16,0(sp)
8020d2bc:	dec00504 	addi	sp,sp,20
8020d2c0:	f800283a 	ret
8020d2c4:	01400104 	movi	r5,4
8020d2c8:	9809883a 	mov	r4,r19
8020d2cc:	020d1680 	call	8020d168 <__sfmoreglue>
8020d2d0:	90800015 	stw	r2,0(r18)
8020d2d4:	103fde1e 	bne	r2,zero,8020d250 <__reset+0xfa1ed250>
8020d2d8:	00800304 	movi	r2,12
8020d2dc:	98800015 	stw	r2,0(r19)
8020d2e0:	0005883a 	mov	r2,zero
8020d2e4:	003ff006 	br	8020d2a8 <__reset+0xfa1ed2a8>

8020d2e8 <_cleanup>:
8020d2e8:	00a008b4 	movhi	r2,32802
8020d2ec:	10be7c04 	addi	r2,r2,-1552
8020d2f0:	11000017 	ldw	r4,0(r2)
8020d2f4:	01600874 	movhi	r5,32801
8020d2f8:	294bf804 	addi	r5,r5,12256
8020d2fc:	020dd041 	jmpi	8020dd04 <_fwalk_reent>

8020d300 <__sinit>:
8020d300:	20800e17 	ldw	r2,56(r4)
8020d304:	10000126 	beq	r2,zero,8020d30c <__sinit+0xc>
8020d308:	f800283a 	ret
8020d30c:	020cfc41 	jmpi	8020cfc4 <__sinit.part.1>

8020d310 <__sfp_lock_acquire>:
8020d310:	f800283a 	ret

8020d314 <__sfp_lock_release>:
8020d314:	f800283a 	ret

8020d318 <__sinit_lock_acquire>:
8020d318:	f800283a 	ret

8020d31c <__sinit_lock_release>:
8020d31c:	f800283a 	ret

8020d320 <__fp_lock_all>:
8020d320:	00a008b4 	movhi	r2,32802
8020d324:	10be7d04 	addi	r2,r2,-1548
8020d328:	11000017 	ldw	r4,0(r2)
8020d32c:	01600874 	movhi	r5,32801
8020d330:	29745804 	addi	r5,r5,-11936
8020d334:	020dc401 	jmpi	8020dc40 <_fwalk>

8020d338 <__fp_unlock_all>:
8020d338:	00a008b4 	movhi	r2,32802
8020d33c:	10be7d04 	addi	r2,r2,-1548
8020d340:	11000017 	ldw	r4,0(r2)
8020d344:	01600874 	movhi	r5,32801
8020d348:	2973ec04 	addi	r5,r5,-12368
8020d34c:	020dc401 	jmpi	8020dc40 <_fwalk>

8020d350 <_malloc_trim_r>:
8020d350:	defffb04 	addi	sp,sp,-20
8020d354:	dcc00315 	stw	r19,12(sp)
8020d358:	04e008b4 	movhi	r19,32802
8020d35c:	dc800215 	stw	r18,8(sp)
8020d360:	dc400115 	stw	r17,4(sp)
8020d364:	dc000015 	stw	r16,0(sp)
8020d368:	dfc00415 	stw	ra,16(sp)
8020d36c:	2821883a 	mov	r16,r5
8020d370:	9cf88704 	addi	r19,r19,-7652
8020d374:	2025883a 	mov	r18,r4
8020d378:	021715c0 	call	8021715c <__malloc_lock>
8020d37c:	98800217 	ldw	r2,8(r19)
8020d380:	14400117 	ldw	r17,4(r2)
8020d384:	00bfff04 	movi	r2,-4
8020d388:	88a2703a 	and	r17,r17,r2
8020d38c:	8c21c83a 	sub	r16,r17,r16
8020d390:	8403fbc4 	addi	r16,r16,4079
8020d394:	8020d33a 	srli	r16,r16,12
8020d398:	0083ffc4 	movi	r2,4095
8020d39c:	843fffc4 	addi	r16,r16,-1
8020d3a0:	8020933a 	slli	r16,r16,12
8020d3a4:	1400060e 	bge	r2,r16,8020d3c0 <_malloc_trim_r+0x70>
8020d3a8:	000b883a 	mov	r5,zero
8020d3ac:	9009883a 	mov	r4,r18
8020d3b0:	02101a80 	call	802101a8 <_sbrk_r>
8020d3b4:	98c00217 	ldw	r3,8(r19)
8020d3b8:	1c47883a 	add	r3,r3,r17
8020d3bc:	10c00a26 	beq	r2,r3,8020d3e8 <_malloc_trim_r+0x98>
8020d3c0:	9009883a 	mov	r4,r18
8020d3c4:	02171800 	call	80217180 <__malloc_unlock>
8020d3c8:	0005883a 	mov	r2,zero
8020d3cc:	dfc00417 	ldw	ra,16(sp)
8020d3d0:	dcc00317 	ldw	r19,12(sp)
8020d3d4:	dc800217 	ldw	r18,8(sp)
8020d3d8:	dc400117 	ldw	r17,4(sp)
8020d3dc:	dc000017 	ldw	r16,0(sp)
8020d3e0:	dec00504 	addi	sp,sp,20
8020d3e4:	f800283a 	ret
8020d3e8:	040bc83a 	sub	r5,zero,r16
8020d3ec:	9009883a 	mov	r4,r18
8020d3f0:	02101a80 	call	802101a8 <_sbrk_r>
8020d3f4:	00ffffc4 	movi	r3,-1
8020d3f8:	10c00d26 	beq	r2,r3,8020d430 <_malloc_trim_r+0xe0>
8020d3fc:	00e008b4 	movhi	r3,32802
8020d400:	18feaa04 	addi	r3,r3,-1368
8020d404:	18800017 	ldw	r2,0(r3)
8020d408:	99000217 	ldw	r4,8(r19)
8020d40c:	8c23c83a 	sub	r17,r17,r16
8020d410:	8c400054 	ori	r17,r17,1
8020d414:	1421c83a 	sub	r16,r2,r16
8020d418:	24400115 	stw	r17,4(r4)
8020d41c:	9009883a 	mov	r4,r18
8020d420:	1c000015 	stw	r16,0(r3)
8020d424:	02171800 	call	80217180 <__malloc_unlock>
8020d428:	00800044 	movi	r2,1
8020d42c:	003fe706 	br	8020d3cc <__reset+0xfa1ed3cc>
8020d430:	000b883a 	mov	r5,zero
8020d434:	9009883a 	mov	r4,r18
8020d438:	02101a80 	call	802101a8 <_sbrk_r>
8020d43c:	99000217 	ldw	r4,8(r19)
8020d440:	014003c4 	movi	r5,15
8020d444:	1107c83a 	sub	r3,r2,r4
8020d448:	28ffdd0e 	bge	r5,r3,8020d3c0 <__reset+0xfa1ed3c0>
8020d44c:	016008b4 	movhi	r5,32802
8020d450:	297e7f04 	addi	r5,r5,-1540
8020d454:	29400017 	ldw	r5,0(r5)
8020d458:	18c00054 	ori	r3,r3,1
8020d45c:	20c00115 	stw	r3,4(r4)
8020d460:	00e008b4 	movhi	r3,32802
8020d464:	1145c83a 	sub	r2,r2,r5
8020d468:	18feaa04 	addi	r3,r3,-1368
8020d46c:	18800015 	stw	r2,0(r3)
8020d470:	003fd306 	br	8020d3c0 <__reset+0xfa1ed3c0>

8020d474 <_free_r>:
8020d474:	28004126 	beq	r5,zero,8020d57c <_free_r+0x108>
8020d478:	defffd04 	addi	sp,sp,-12
8020d47c:	dc400115 	stw	r17,4(sp)
8020d480:	dc000015 	stw	r16,0(sp)
8020d484:	2023883a 	mov	r17,r4
8020d488:	2821883a 	mov	r16,r5
8020d48c:	dfc00215 	stw	ra,8(sp)
8020d490:	021715c0 	call	8021715c <__malloc_lock>
8020d494:	81ffff17 	ldw	r7,-4(r16)
8020d498:	00bfff84 	movi	r2,-2
8020d49c:	012008b4 	movhi	r4,32802
8020d4a0:	81bffe04 	addi	r6,r16,-8
8020d4a4:	3884703a 	and	r2,r7,r2
8020d4a8:	21388704 	addi	r4,r4,-7652
8020d4ac:	308b883a 	add	r5,r6,r2
8020d4b0:	2a400117 	ldw	r9,4(r5)
8020d4b4:	22000217 	ldw	r8,8(r4)
8020d4b8:	00ffff04 	movi	r3,-4
8020d4bc:	48c6703a 	and	r3,r9,r3
8020d4c0:	2a005726 	beq	r5,r8,8020d620 <_free_r+0x1ac>
8020d4c4:	28c00115 	stw	r3,4(r5)
8020d4c8:	39c0004c 	andi	r7,r7,1
8020d4cc:	3800091e 	bne	r7,zero,8020d4f4 <_free_r+0x80>
8020d4d0:	823ffe17 	ldw	r8,-8(r16)
8020d4d4:	22400204 	addi	r9,r4,8
8020d4d8:	320dc83a 	sub	r6,r6,r8
8020d4dc:	31c00217 	ldw	r7,8(r6)
8020d4e0:	1205883a 	add	r2,r2,r8
8020d4e4:	3a406526 	beq	r7,r9,8020d67c <_free_r+0x208>
8020d4e8:	32000317 	ldw	r8,12(r6)
8020d4ec:	3a000315 	stw	r8,12(r7)
8020d4f0:	41c00215 	stw	r7,8(r8)
8020d4f4:	28cf883a 	add	r7,r5,r3
8020d4f8:	39c00117 	ldw	r7,4(r7)
8020d4fc:	39c0004c 	andi	r7,r7,1
8020d500:	38003a26 	beq	r7,zero,8020d5ec <_free_r+0x178>
8020d504:	10c00054 	ori	r3,r2,1
8020d508:	30c00115 	stw	r3,4(r6)
8020d50c:	3087883a 	add	r3,r6,r2
8020d510:	18800015 	stw	r2,0(r3)
8020d514:	00c07fc4 	movi	r3,511
8020d518:	18801936 	bltu	r3,r2,8020d580 <_free_r+0x10c>
8020d51c:	1004d0fa 	srli	r2,r2,3
8020d520:	01c00044 	movi	r7,1
8020d524:	21400117 	ldw	r5,4(r4)
8020d528:	10c00044 	addi	r3,r2,1
8020d52c:	18c7883a 	add	r3,r3,r3
8020d530:	1005d0ba 	srai	r2,r2,2
8020d534:	18c7883a 	add	r3,r3,r3
8020d538:	18c7883a 	add	r3,r3,r3
8020d53c:	1907883a 	add	r3,r3,r4
8020d540:	3884983a 	sll	r2,r7,r2
8020d544:	19c00017 	ldw	r7,0(r3)
8020d548:	1a3ffe04 	addi	r8,r3,-8
8020d54c:	1144b03a 	or	r2,r2,r5
8020d550:	32000315 	stw	r8,12(r6)
8020d554:	31c00215 	stw	r7,8(r6)
8020d558:	20800115 	stw	r2,4(r4)
8020d55c:	19800015 	stw	r6,0(r3)
8020d560:	39800315 	stw	r6,12(r7)
8020d564:	8809883a 	mov	r4,r17
8020d568:	dfc00217 	ldw	ra,8(sp)
8020d56c:	dc400117 	ldw	r17,4(sp)
8020d570:	dc000017 	ldw	r16,0(sp)
8020d574:	dec00304 	addi	sp,sp,12
8020d578:	02171801 	jmpi	80217180 <__malloc_unlock>
8020d57c:	f800283a 	ret
8020d580:	100ad27a 	srli	r5,r2,9
8020d584:	00c00104 	movi	r3,4
8020d588:	19404a36 	bltu	r3,r5,8020d6b4 <_free_r+0x240>
8020d58c:	100ad1ba 	srli	r5,r2,6
8020d590:	28c00e44 	addi	r3,r5,57
8020d594:	18c7883a 	add	r3,r3,r3
8020d598:	29400e04 	addi	r5,r5,56
8020d59c:	18c7883a 	add	r3,r3,r3
8020d5a0:	18c7883a 	add	r3,r3,r3
8020d5a4:	1909883a 	add	r4,r3,r4
8020d5a8:	20c00017 	ldw	r3,0(r4)
8020d5ac:	01e008b4 	movhi	r7,32802
8020d5b0:	213ffe04 	addi	r4,r4,-8
8020d5b4:	39f88704 	addi	r7,r7,-7652
8020d5b8:	20c04426 	beq	r4,r3,8020d6cc <_free_r+0x258>
8020d5bc:	01ffff04 	movi	r7,-4
8020d5c0:	19400117 	ldw	r5,4(r3)
8020d5c4:	29ca703a 	and	r5,r5,r7
8020d5c8:	1140022e 	bgeu	r2,r5,8020d5d4 <_free_r+0x160>
8020d5cc:	18c00217 	ldw	r3,8(r3)
8020d5d0:	20fffb1e 	bne	r4,r3,8020d5c0 <__reset+0xfa1ed5c0>
8020d5d4:	19000317 	ldw	r4,12(r3)
8020d5d8:	31000315 	stw	r4,12(r6)
8020d5dc:	30c00215 	stw	r3,8(r6)
8020d5e0:	21800215 	stw	r6,8(r4)
8020d5e4:	19800315 	stw	r6,12(r3)
8020d5e8:	003fde06 	br	8020d564 <__reset+0xfa1ed564>
8020d5ec:	29c00217 	ldw	r7,8(r5)
8020d5f0:	10c5883a 	add	r2,r2,r3
8020d5f4:	00e008b4 	movhi	r3,32802
8020d5f8:	18f88904 	addi	r3,r3,-7644
8020d5fc:	38c03b26 	beq	r7,r3,8020d6ec <_free_r+0x278>
8020d600:	2a000317 	ldw	r8,12(r5)
8020d604:	11400054 	ori	r5,r2,1
8020d608:	3087883a 	add	r3,r6,r2
8020d60c:	3a000315 	stw	r8,12(r7)
8020d610:	41c00215 	stw	r7,8(r8)
8020d614:	31400115 	stw	r5,4(r6)
8020d618:	18800015 	stw	r2,0(r3)
8020d61c:	003fbd06 	br	8020d514 <__reset+0xfa1ed514>
8020d620:	39c0004c 	andi	r7,r7,1
8020d624:	10c5883a 	add	r2,r2,r3
8020d628:	3800071e 	bne	r7,zero,8020d648 <_free_r+0x1d4>
8020d62c:	81fffe17 	ldw	r7,-8(r16)
8020d630:	31cdc83a 	sub	r6,r6,r7
8020d634:	30c00317 	ldw	r3,12(r6)
8020d638:	31400217 	ldw	r5,8(r6)
8020d63c:	11c5883a 	add	r2,r2,r7
8020d640:	28c00315 	stw	r3,12(r5)
8020d644:	19400215 	stw	r5,8(r3)
8020d648:	10c00054 	ori	r3,r2,1
8020d64c:	30c00115 	stw	r3,4(r6)
8020d650:	00e008b4 	movhi	r3,32802
8020d654:	18fe8004 	addi	r3,r3,-1536
8020d658:	18c00017 	ldw	r3,0(r3)
8020d65c:	21800215 	stw	r6,8(r4)
8020d660:	10ffc036 	bltu	r2,r3,8020d564 <__reset+0xfa1ed564>
8020d664:	00a008b4 	movhi	r2,32802
8020d668:	10bea104 	addi	r2,r2,-1404
8020d66c:	11400017 	ldw	r5,0(r2)
8020d670:	8809883a 	mov	r4,r17
8020d674:	020d3500 	call	8020d350 <_malloc_trim_r>
8020d678:	003fba06 	br	8020d564 <__reset+0xfa1ed564>
8020d67c:	28c9883a 	add	r4,r5,r3
8020d680:	21000117 	ldw	r4,4(r4)
8020d684:	2100004c 	andi	r4,r4,1
8020d688:	2000391e 	bne	r4,zero,8020d770 <_free_r+0x2fc>
8020d68c:	29c00217 	ldw	r7,8(r5)
8020d690:	29000317 	ldw	r4,12(r5)
8020d694:	1885883a 	add	r2,r3,r2
8020d698:	10c00054 	ori	r3,r2,1
8020d69c:	39000315 	stw	r4,12(r7)
8020d6a0:	21c00215 	stw	r7,8(r4)
8020d6a4:	30c00115 	stw	r3,4(r6)
8020d6a8:	308d883a 	add	r6,r6,r2
8020d6ac:	30800015 	stw	r2,0(r6)
8020d6b0:	003fac06 	br	8020d564 <__reset+0xfa1ed564>
8020d6b4:	00c00504 	movi	r3,20
8020d6b8:	19401536 	bltu	r3,r5,8020d710 <_free_r+0x29c>
8020d6bc:	28c01704 	addi	r3,r5,92
8020d6c0:	18c7883a 	add	r3,r3,r3
8020d6c4:	294016c4 	addi	r5,r5,91
8020d6c8:	003fb406 	br	8020d59c <__reset+0xfa1ed59c>
8020d6cc:	280bd0ba 	srai	r5,r5,2
8020d6d0:	00c00044 	movi	r3,1
8020d6d4:	38800117 	ldw	r2,4(r7)
8020d6d8:	194a983a 	sll	r5,r3,r5
8020d6dc:	2007883a 	mov	r3,r4
8020d6e0:	2884b03a 	or	r2,r5,r2
8020d6e4:	38800115 	stw	r2,4(r7)
8020d6e8:	003fbb06 	br	8020d5d8 <__reset+0xfa1ed5d8>
8020d6ec:	21800515 	stw	r6,20(r4)
8020d6f0:	21800415 	stw	r6,16(r4)
8020d6f4:	10c00054 	ori	r3,r2,1
8020d6f8:	31c00315 	stw	r7,12(r6)
8020d6fc:	31c00215 	stw	r7,8(r6)
8020d700:	30c00115 	stw	r3,4(r6)
8020d704:	308d883a 	add	r6,r6,r2
8020d708:	30800015 	stw	r2,0(r6)
8020d70c:	003f9506 	br	8020d564 <__reset+0xfa1ed564>
8020d710:	00c01504 	movi	r3,84
8020d714:	19400536 	bltu	r3,r5,8020d72c <_free_r+0x2b8>
8020d718:	100ad33a 	srli	r5,r2,12
8020d71c:	28c01bc4 	addi	r3,r5,111
8020d720:	18c7883a 	add	r3,r3,r3
8020d724:	29401b84 	addi	r5,r5,110
8020d728:	003f9c06 	br	8020d59c <__reset+0xfa1ed59c>
8020d72c:	00c05504 	movi	r3,340
8020d730:	19400536 	bltu	r3,r5,8020d748 <_free_r+0x2d4>
8020d734:	100ad3fa 	srli	r5,r2,15
8020d738:	28c01e04 	addi	r3,r5,120
8020d73c:	18c7883a 	add	r3,r3,r3
8020d740:	29401dc4 	addi	r5,r5,119
8020d744:	003f9506 	br	8020d59c <__reset+0xfa1ed59c>
8020d748:	00c15504 	movi	r3,1364
8020d74c:	19400536 	bltu	r3,r5,8020d764 <_free_r+0x2f0>
8020d750:	100ad4ba 	srli	r5,r2,18
8020d754:	28c01f44 	addi	r3,r5,125
8020d758:	18c7883a 	add	r3,r3,r3
8020d75c:	29401f04 	addi	r5,r5,124
8020d760:	003f8e06 	br	8020d59c <__reset+0xfa1ed59c>
8020d764:	00c03f84 	movi	r3,254
8020d768:	01401f84 	movi	r5,126
8020d76c:	003f8b06 	br	8020d59c <__reset+0xfa1ed59c>
8020d770:	10c00054 	ori	r3,r2,1
8020d774:	30c00115 	stw	r3,4(r6)
8020d778:	308d883a 	add	r6,r6,r2
8020d77c:	30800015 	stw	r2,0(r6)
8020d780:	003f7806 	br	8020d564 <__reset+0xfa1ed564>

8020d784 <__sfvwrite_r>:
8020d784:	30800217 	ldw	r2,8(r6)
8020d788:	10006726 	beq	r2,zero,8020d928 <__sfvwrite_r+0x1a4>
8020d78c:	28c0030b 	ldhu	r3,12(r5)
8020d790:	defff404 	addi	sp,sp,-48
8020d794:	dd400715 	stw	r21,28(sp)
8020d798:	dd000615 	stw	r20,24(sp)
8020d79c:	dc000215 	stw	r16,8(sp)
8020d7a0:	dfc00b15 	stw	ra,44(sp)
8020d7a4:	df000a15 	stw	fp,40(sp)
8020d7a8:	ddc00915 	stw	r23,36(sp)
8020d7ac:	dd800815 	stw	r22,32(sp)
8020d7b0:	dcc00515 	stw	r19,20(sp)
8020d7b4:	dc800415 	stw	r18,16(sp)
8020d7b8:	dc400315 	stw	r17,12(sp)
8020d7bc:	1880020c 	andi	r2,r3,8
8020d7c0:	2821883a 	mov	r16,r5
8020d7c4:	202b883a 	mov	r21,r4
8020d7c8:	3029883a 	mov	r20,r6
8020d7cc:	10002726 	beq	r2,zero,8020d86c <__sfvwrite_r+0xe8>
8020d7d0:	28800417 	ldw	r2,16(r5)
8020d7d4:	10002526 	beq	r2,zero,8020d86c <__sfvwrite_r+0xe8>
8020d7d8:	1880008c 	andi	r2,r3,2
8020d7dc:	a4400017 	ldw	r17,0(r20)
8020d7e0:	10002a26 	beq	r2,zero,8020d88c <__sfvwrite_r+0x108>
8020d7e4:	05a00034 	movhi	r22,32768
8020d7e8:	0027883a 	mov	r19,zero
8020d7ec:	0025883a 	mov	r18,zero
8020d7f0:	b5bf0004 	addi	r22,r22,-1024
8020d7f4:	980d883a 	mov	r6,r19
8020d7f8:	a809883a 	mov	r4,r21
8020d7fc:	90004626 	beq	r18,zero,8020d918 <__sfvwrite_r+0x194>
8020d800:	900f883a 	mov	r7,r18
8020d804:	b480022e 	bgeu	r22,r18,8020d810 <__sfvwrite_r+0x8c>
8020d808:	01e00034 	movhi	r7,32768
8020d80c:	39ff0004 	addi	r7,r7,-1024
8020d810:	80800917 	ldw	r2,36(r16)
8020d814:	81400717 	ldw	r5,28(r16)
8020d818:	103ee83a 	callr	r2
8020d81c:	0080570e 	bge	zero,r2,8020d97c <__sfvwrite_r+0x1f8>
8020d820:	a0c00217 	ldw	r3,8(r20)
8020d824:	98a7883a 	add	r19,r19,r2
8020d828:	90a5c83a 	sub	r18,r18,r2
8020d82c:	1885c83a 	sub	r2,r3,r2
8020d830:	a0800215 	stw	r2,8(r20)
8020d834:	103fef1e 	bne	r2,zero,8020d7f4 <__reset+0xfa1ed7f4>
8020d838:	0005883a 	mov	r2,zero
8020d83c:	dfc00b17 	ldw	ra,44(sp)
8020d840:	df000a17 	ldw	fp,40(sp)
8020d844:	ddc00917 	ldw	r23,36(sp)
8020d848:	dd800817 	ldw	r22,32(sp)
8020d84c:	dd400717 	ldw	r21,28(sp)
8020d850:	dd000617 	ldw	r20,24(sp)
8020d854:	dcc00517 	ldw	r19,20(sp)
8020d858:	dc800417 	ldw	r18,16(sp)
8020d85c:	dc400317 	ldw	r17,12(sp)
8020d860:	dc000217 	ldw	r16,8(sp)
8020d864:	dec00c04 	addi	sp,sp,48
8020d868:	f800283a 	ret
8020d86c:	800b883a 	mov	r5,r16
8020d870:	a809883a 	mov	r4,r21
8020d874:	020b32c0 	call	8020b32c <__swsetup_r>
8020d878:	1000eb1e 	bne	r2,zero,8020dc28 <__sfvwrite_r+0x4a4>
8020d87c:	80c0030b 	ldhu	r3,12(r16)
8020d880:	a4400017 	ldw	r17,0(r20)
8020d884:	1880008c 	andi	r2,r3,2
8020d888:	103fd61e 	bne	r2,zero,8020d7e4 <__reset+0xfa1ed7e4>
8020d88c:	1880004c 	andi	r2,r3,1
8020d890:	10003f1e 	bne	r2,zero,8020d990 <__sfvwrite_r+0x20c>
8020d894:	0039883a 	mov	fp,zero
8020d898:	0025883a 	mov	r18,zero
8020d89c:	90001a26 	beq	r18,zero,8020d908 <__sfvwrite_r+0x184>
8020d8a0:	1880800c 	andi	r2,r3,512
8020d8a4:	84c00217 	ldw	r19,8(r16)
8020d8a8:	10002126 	beq	r2,zero,8020d930 <__sfvwrite_r+0x1ac>
8020d8ac:	982f883a 	mov	r23,r19
8020d8b0:	94c09336 	bltu	r18,r19,8020db00 <__sfvwrite_r+0x37c>
8020d8b4:	1881200c 	andi	r2,r3,1152
8020d8b8:	10009e1e 	bne	r2,zero,8020db34 <__sfvwrite_r+0x3b0>
8020d8bc:	81000017 	ldw	r4,0(r16)
8020d8c0:	b80d883a 	mov	r6,r23
8020d8c4:	e00b883a 	mov	r5,fp
8020d8c8:	020e9500 	call	8020e950 <memmove>
8020d8cc:	80c00217 	ldw	r3,8(r16)
8020d8d0:	81000017 	ldw	r4,0(r16)
8020d8d4:	9005883a 	mov	r2,r18
8020d8d8:	1ce7c83a 	sub	r19,r3,r19
8020d8dc:	25cf883a 	add	r7,r4,r23
8020d8e0:	84c00215 	stw	r19,8(r16)
8020d8e4:	81c00015 	stw	r7,0(r16)
8020d8e8:	a0c00217 	ldw	r3,8(r20)
8020d8ec:	e0b9883a 	add	fp,fp,r2
8020d8f0:	90a5c83a 	sub	r18,r18,r2
8020d8f4:	18a7c83a 	sub	r19,r3,r2
8020d8f8:	a4c00215 	stw	r19,8(r20)
8020d8fc:	983fce26 	beq	r19,zero,8020d838 <__reset+0xfa1ed838>
8020d900:	80c0030b 	ldhu	r3,12(r16)
8020d904:	903fe61e 	bne	r18,zero,8020d8a0 <__reset+0xfa1ed8a0>
8020d908:	8f000017 	ldw	fp,0(r17)
8020d90c:	8c800117 	ldw	r18,4(r17)
8020d910:	8c400204 	addi	r17,r17,8
8020d914:	003fe106 	br	8020d89c <__reset+0xfa1ed89c>
8020d918:	8cc00017 	ldw	r19,0(r17)
8020d91c:	8c800117 	ldw	r18,4(r17)
8020d920:	8c400204 	addi	r17,r17,8
8020d924:	003fb306 	br	8020d7f4 <__reset+0xfa1ed7f4>
8020d928:	0005883a 	mov	r2,zero
8020d92c:	f800283a 	ret
8020d930:	81000017 	ldw	r4,0(r16)
8020d934:	80800417 	ldw	r2,16(r16)
8020d938:	11005736 	bltu	r2,r4,8020da98 <__sfvwrite_r+0x314>
8020d93c:	85c00517 	ldw	r23,20(r16)
8020d940:	95c05536 	bltu	r18,r23,8020da98 <__sfvwrite_r+0x314>
8020d944:	00a00034 	movhi	r2,32768
8020d948:	10bfffc4 	addi	r2,r2,-1
8020d94c:	9009883a 	mov	r4,r18
8020d950:	1480012e 	bgeu	r2,r18,8020d958 <__sfvwrite_r+0x1d4>
8020d954:	1009883a 	mov	r4,r2
8020d958:	b80b883a 	mov	r5,r23
8020d95c:	021424c0 	call	8021424c <__divsi3>
8020d960:	15cf383a 	mul	r7,r2,r23
8020d964:	81400717 	ldw	r5,28(r16)
8020d968:	80800917 	ldw	r2,36(r16)
8020d96c:	e00d883a 	mov	r6,fp
8020d970:	a809883a 	mov	r4,r21
8020d974:	103ee83a 	callr	r2
8020d978:	00bfdb16 	blt	zero,r2,8020d8e8 <__reset+0xfa1ed8e8>
8020d97c:	8080030b 	ldhu	r2,12(r16)
8020d980:	10801014 	ori	r2,r2,64
8020d984:	8080030d 	sth	r2,12(r16)
8020d988:	00bfffc4 	movi	r2,-1
8020d98c:	003fab06 	br	8020d83c <__reset+0xfa1ed83c>
8020d990:	0027883a 	mov	r19,zero
8020d994:	0011883a 	mov	r8,zero
8020d998:	0039883a 	mov	fp,zero
8020d99c:	0025883a 	mov	r18,zero
8020d9a0:	90001f26 	beq	r18,zero,8020da20 <__sfvwrite_r+0x29c>
8020d9a4:	40005a26 	beq	r8,zero,8020db10 <__sfvwrite_r+0x38c>
8020d9a8:	982d883a 	mov	r22,r19
8020d9ac:	94c0012e 	bgeu	r18,r19,8020d9b4 <__sfvwrite_r+0x230>
8020d9b0:	902d883a 	mov	r22,r18
8020d9b4:	81000017 	ldw	r4,0(r16)
8020d9b8:	80800417 	ldw	r2,16(r16)
8020d9bc:	b02f883a 	mov	r23,r22
8020d9c0:	81c00517 	ldw	r7,20(r16)
8020d9c4:	1100032e 	bgeu	r2,r4,8020d9d4 <__sfvwrite_r+0x250>
8020d9c8:	80c00217 	ldw	r3,8(r16)
8020d9cc:	38c7883a 	add	r3,r7,r3
8020d9d0:	1d801816 	blt	r3,r22,8020da34 <__sfvwrite_r+0x2b0>
8020d9d4:	b1c03e16 	blt	r22,r7,8020dad0 <__sfvwrite_r+0x34c>
8020d9d8:	80800917 	ldw	r2,36(r16)
8020d9dc:	81400717 	ldw	r5,28(r16)
8020d9e0:	e00d883a 	mov	r6,fp
8020d9e4:	da000115 	stw	r8,4(sp)
8020d9e8:	a809883a 	mov	r4,r21
8020d9ec:	103ee83a 	callr	r2
8020d9f0:	102f883a 	mov	r23,r2
8020d9f4:	da000117 	ldw	r8,4(sp)
8020d9f8:	00bfe00e 	bge	zero,r2,8020d97c <__reset+0xfa1ed97c>
8020d9fc:	9de7c83a 	sub	r19,r19,r23
8020da00:	98001f26 	beq	r19,zero,8020da80 <__sfvwrite_r+0x2fc>
8020da04:	a0800217 	ldw	r2,8(r20)
8020da08:	e5f9883a 	add	fp,fp,r23
8020da0c:	95e5c83a 	sub	r18,r18,r23
8020da10:	15efc83a 	sub	r23,r2,r23
8020da14:	a5c00215 	stw	r23,8(r20)
8020da18:	b83f8726 	beq	r23,zero,8020d838 <__reset+0xfa1ed838>
8020da1c:	903fe11e 	bne	r18,zero,8020d9a4 <__reset+0xfa1ed9a4>
8020da20:	8f000017 	ldw	fp,0(r17)
8020da24:	8c800117 	ldw	r18,4(r17)
8020da28:	0011883a 	mov	r8,zero
8020da2c:	8c400204 	addi	r17,r17,8
8020da30:	003fdb06 	br	8020d9a0 <__reset+0xfa1ed9a0>
8020da34:	180d883a 	mov	r6,r3
8020da38:	e00b883a 	mov	r5,fp
8020da3c:	da000115 	stw	r8,4(sp)
8020da40:	d8c00015 	stw	r3,0(sp)
8020da44:	020e9500 	call	8020e950 <memmove>
8020da48:	d8c00017 	ldw	r3,0(sp)
8020da4c:	80800017 	ldw	r2,0(r16)
8020da50:	800b883a 	mov	r5,r16
8020da54:	a809883a 	mov	r4,r21
8020da58:	10c5883a 	add	r2,r2,r3
8020da5c:	80800015 	stw	r2,0(r16)
8020da60:	d8c00015 	stw	r3,0(sp)
8020da64:	020cf240 	call	8020cf24 <_fflush_r>
8020da68:	d8c00017 	ldw	r3,0(sp)
8020da6c:	da000117 	ldw	r8,4(sp)
8020da70:	103fc21e 	bne	r2,zero,8020d97c <__reset+0xfa1ed97c>
8020da74:	182f883a 	mov	r23,r3
8020da78:	9de7c83a 	sub	r19,r19,r23
8020da7c:	983fe11e 	bne	r19,zero,8020da04 <__reset+0xfa1eda04>
8020da80:	800b883a 	mov	r5,r16
8020da84:	a809883a 	mov	r4,r21
8020da88:	020cf240 	call	8020cf24 <_fflush_r>
8020da8c:	103fbb1e 	bne	r2,zero,8020d97c <__reset+0xfa1ed97c>
8020da90:	0011883a 	mov	r8,zero
8020da94:	003fdb06 	br	8020da04 <__reset+0xfa1eda04>
8020da98:	94c0012e 	bgeu	r18,r19,8020daa0 <__sfvwrite_r+0x31c>
8020da9c:	9027883a 	mov	r19,r18
8020daa0:	980d883a 	mov	r6,r19
8020daa4:	e00b883a 	mov	r5,fp
8020daa8:	020e9500 	call	8020e950 <memmove>
8020daac:	80800217 	ldw	r2,8(r16)
8020dab0:	80c00017 	ldw	r3,0(r16)
8020dab4:	14c5c83a 	sub	r2,r2,r19
8020dab8:	1cc7883a 	add	r3,r3,r19
8020dabc:	80800215 	stw	r2,8(r16)
8020dac0:	80c00015 	stw	r3,0(r16)
8020dac4:	10004326 	beq	r2,zero,8020dbd4 <__sfvwrite_r+0x450>
8020dac8:	9805883a 	mov	r2,r19
8020dacc:	003f8606 	br	8020d8e8 <__reset+0xfa1ed8e8>
8020dad0:	b00d883a 	mov	r6,r22
8020dad4:	e00b883a 	mov	r5,fp
8020dad8:	da000115 	stw	r8,4(sp)
8020dadc:	020e9500 	call	8020e950 <memmove>
8020dae0:	80800217 	ldw	r2,8(r16)
8020dae4:	80c00017 	ldw	r3,0(r16)
8020dae8:	da000117 	ldw	r8,4(sp)
8020daec:	1585c83a 	sub	r2,r2,r22
8020daf0:	1dad883a 	add	r22,r3,r22
8020daf4:	80800215 	stw	r2,8(r16)
8020daf8:	85800015 	stw	r22,0(r16)
8020dafc:	003fbf06 	br	8020d9fc <__reset+0xfa1ed9fc>
8020db00:	81000017 	ldw	r4,0(r16)
8020db04:	9027883a 	mov	r19,r18
8020db08:	902f883a 	mov	r23,r18
8020db0c:	003f6c06 	br	8020d8c0 <__reset+0xfa1ed8c0>
8020db10:	900d883a 	mov	r6,r18
8020db14:	01400284 	movi	r5,10
8020db18:	e009883a 	mov	r4,fp
8020db1c:	020e86c0 	call	8020e86c <memchr>
8020db20:	10003e26 	beq	r2,zero,8020dc1c <__sfvwrite_r+0x498>
8020db24:	10800044 	addi	r2,r2,1
8020db28:	1727c83a 	sub	r19,r2,fp
8020db2c:	02000044 	movi	r8,1
8020db30:	003f9d06 	br	8020d9a8 <__reset+0xfa1ed9a8>
8020db34:	80800517 	ldw	r2,20(r16)
8020db38:	81400417 	ldw	r5,16(r16)
8020db3c:	81c00017 	ldw	r7,0(r16)
8020db40:	10a7883a 	add	r19,r2,r2
8020db44:	9885883a 	add	r2,r19,r2
8020db48:	1026d7fa 	srli	r19,r2,31
8020db4c:	396dc83a 	sub	r22,r7,r5
8020db50:	b1000044 	addi	r4,r22,1
8020db54:	9885883a 	add	r2,r19,r2
8020db58:	1027d07a 	srai	r19,r2,1
8020db5c:	2485883a 	add	r2,r4,r18
8020db60:	980d883a 	mov	r6,r19
8020db64:	9880022e 	bgeu	r19,r2,8020db70 <__sfvwrite_r+0x3ec>
8020db68:	1027883a 	mov	r19,r2
8020db6c:	100d883a 	mov	r6,r2
8020db70:	18c1000c 	andi	r3,r3,1024
8020db74:	18001c26 	beq	r3,zero,8020dbe8 <__sfvwrite_r+0x464>
8020db78:	300b883a 	mov	r5,r6
8020db7c:	a809883a 	mov	r4,r21
8020db80:	020e0600 	call	8020e060 <_malloc_r>
8020db84:	102f883a 	mov	r23,r2
8020db88:	10002926 	beq	r2,zero,8020dc30 <__sfvwrite_r+0x4ac>
8020db8c:	81400417 	ldw	r5,16(r16)
8020db90:	b00d883a 	mov	r6,r22
8020db94:	1009883a 	mov	r4,r2
8020db98:	0206aa00 	call	80206aa0 <memcpy>
8020db9c:	8080030b 	ldhu	r2,12(r16)
8020dba0:	00fedfc4 	movi	r3,-1153
8020dba4:	10c4703a 	and	r2,r2,r3
8020dba8:	10802014 	ori	r2,r2,128
8020dbac:	8080030d 	sth	r2,12(r16)
8020dbb0:	bd89883a 	add	r4,r23,r22
8020dbb4:	9d8fc83a 	sub	r7,r19,r22
8020dbb8:	85c00415 	stw	r23,16(r16)
8020dbbc:	84c00515 	stw	r19,20(r16)
8020dbc0:	81000015 	stw	r4,0(r16)
8020dbc4:	9027883a 	mov	r19,r18
8020dbc8:	81c00215 	stw	r7,8(r16)
8020dbcc:	902f883a 	mov	r23,r18
8020dbd0:	003f3b06 	br	8020d8c0 <__reset+0xfa1ed8c0>
8020dbd4:	800b883a 	mov	r5,r16
8020dbd8:	a809883a 	mov	r4,r21
8020dbdc:	020cf240 	call	8020cf24 <_fflush_r>
8020dbe0:	103fb926 	beq	r2,zero,8020dac8 <__reset+0xfa1edac8>
8020dbe4:	003f6506 	br	8020d97c <__reset+0xfa1ed97c>
8020dbe8:	a809883a 	mov	r4,r21
8020dbec:	020fbd00 	call	8020fbd0 <_realloc_r>
8020dbf0:	102f883a 	mov	r23,r2
8020dbf4:	103fee1e 	bne	r2,zero,8020dbb0 <__reset+0xfa1edbb0>
8020dbf8:	81400417 	ldw	r5,16(r16)
8020dbfc:	a809883a 	mov	r4,r21
8020dc00:	020d4740 	call	8020d474 <_free_r>
8020dc04:	8080030b 	ldhu	r2,12(r16)
8020dc08:	00ffdfc4 	movi	r3,-129
8020dc0c:	1884703a 	and	r2,r3,r2
8020dc10:	00c00304 	movi	r3,12
8020dc14:	a8c00015 	stw	r3,0(r21)
8020dc18:	003f5906 	br	8020d980 <__reset+0xfa1ed980>
8020dc1c:	94c00044 	addi	r19,r18,1
8020dc20:	02000044 	movi	r8,1
8020dc24:	003f6006 	br	8020d9a8 <__reset+0xfa1ed9a8>
8020dc28:	00bfffc4 	movi	r2,-1
8020dc2c:	003f0306 	br	8020d83c <__reset+0xfa1ed83c>
8020dc30:	00800304 	movi	r2,12
8020dc34:	a8800015 	stw	r2,0(r21)
8020dc38:	8080030b 	ldhu	r2,12(r16)
8020dc3c:	003f5006 	br	8020d980 <__reset+0xfa1ed980>

8020dc40 <_fwalk>:
8020dc40:	defff704 	addi	sp,sp,-36
8020dc44:	dd000415 	stw	r20,16(sp)
8020dc48:	dfc00815 	stw	ra,32(sp)
8020dc4c:	ddc00715 	stw	r23,28(sp)
8020dc50:	dd800615 	stw	r22,24(sp)
8020dc54:	dd400515 	stw	r21,20(sp)
8020dc58:	dcc00315 	stw	r19,12(sp)
8020dc5c:	dc800215 	stw	r18,8(sp)
8020dc60:	dc400115 	stw	r17,4(sp)
8020dc64:	dc000015 	stw	r16,0(sp)
8020dc68:	2500b804 	addi	r20,r4,736
8020dc6c:	a0002326 	beq	r20,zero,8020dcfc <_fwalk+0xbc>
8020dc70:	282b883a 	mov	r21,r5
8020dc74:	002f883a 	mov	r23,zero
8020dc78:	05800044 	movi	r22,1
8020dc7c:	04ffffc4 	movi	r19,-1
8020dc80:	a4400117 	ldw	r17,4(r20)
8020dc84:	a4800217 	ldw	r18,8(r20)
8020dc88:	8c7fffc4 	addi	r17,r17,-1
8020dc8c:	88000d16 	blt	r17,zero,8020dcc4 <_fwalk+0x84>
8020dc90:	94000304 	addi	r16,r18,12
8020dc94:	94800384 	addi	r18,r18,14
8020dc98:	8080000b 	ldhu	r2,0(r16)
8020dc9c:	8c7fffc4 	addi	r17,r17,-1
8020dca0:	813ffd04 	addi	r4,r16,-12
8020dca4:	b080042e 	bgeu	r22,r2,8020dcb8 <_fwalk+0x78>
8020dca8:	9080000f 	ldh	r2,0(r18)
8020dcac:	14c00226 	beq	r2,r19,8020dcb8 <_fwalk+0x78>
8020dcb0:	a83ee83a 	callr	r21
8020dcb4:	b8aeb03a 	or	r23,r23,r2
8020dcb8:	84001a04 	addi	r16,r16,104
8020dcbc:	94801a04 	addi	r18,r18,104
8020dcc0:	8cfff51e 	bne	r17,r19,8020dc98 <__reset+0xfa1edc98>
8020dcc4:	a5000017 	ldw	r20,0(r20)
8020dcc8:	a03fed1e 	bne	r20,zero,8020dc80 <__reset+0xfa1edc80>
8020dccc:	b805883a 	mov	r2,r23
8020dcd0:	dfc00817 	ldw	ra,32(sp)
8020dcd4:	ddc00717 	ldw	r23,28(sp)
8020dcd8:	dd800617 	ldw	r22,24(sp)
8020dcdc:	dd400517 	ldw	r21,20(sp)
8020dce0:	dd000417 	ldw	r20,16(sp)
8020dce4:	dcc00317 	ldw	r19,12(sp)
8020dce8:	dc800217 	ldw	r18,8(sp)
8020dcec:	dc400117 	ldw	r17,4(sp)
8020dcf0:	dc000017 	ldw	r16,0(sp)
8020dcf4:	dec00904 	addi	sp,sp,36
8020dcf8:	f800283a 	ret
8020dcfc:	002f883a 	mov	r23,zero
8020dd00:	003ff206 	br	8020dccc <__reset+0xfa1edccc>

8020dd04 <_fwalk_reent>:
8020dd04:	defff704 	addi	sp,sp,-36
8020dd08:	dd000415 	stw	r20,16(sp)
8020dd0c:	dfc00815 	stw	ra,32(sp)
8020dd10:	ddc00715 	stw	r23,28(sp)
8020dd14:	dd800615 	stw	r22,24(sp)
8020dd18:	dd400515 	stw	r21,20(sp)
8020dd1c:	dcc00315 	stw	r19,12(sp)
8020dd20:	dc800215 	stw	r18,8(sp)
8020dd24:	dc400115 	stw	r17,4(sp)
8020dd28:	dc000015 	stw	r16,0(sp)
8020dd2c:	2500b804 	addi	r20,r4,736
8020dd30:	a0002326 	beq	r20,zero,8020ddc0 <_fwalk_reent+0xbc>
8020dd34:	282b883a 	mov	r21,r5
8020dd38:	2027883a 	mov	r19,r4
8020dd3c:	002f883a 	mov	r23,zero
8020dd40:	05800044 	movi	r22,1
8020dd44:	04bfffc4 	movi	r18,-1
8020dd48:	a4400117 	ldw	r17,4(r20)
8020dd4c:	a4000217 	ldw	r16,8(r20)
8020dd50:	8c7fffc4 	addi	r17,r17,-1
8020dd54:	88000c16 	blt	r17,zero,8020dd88 <_fwalk_reent+0x84>
8020dd58:	84000304 	addi	r16,r16,12
8020dd5c:	8080000b 	ldhu	r2,0(r16)
8020dd60:	8c7fffc4 	addi	r17,r17,-1
8020dd64:	817ffd04 	addi	r5,r16,-12
8020dd68:	b080052e 	bgeu	r22,r2,8020dd80 <_fwalk_reent+0x7c>
8020dd6c:	8080008f 	ldh	r2,2(r16)
8020dd70:	9809883a 	mov	r4,r19
8020dd74:	14800226 	beq	r2,r18,8020dd80 <_fwalk_reent+0x7c>
8020dd78:	a83ee83a 	callr	r21
8020dd7c:	b8aeb03a 	or	r23,r23,r2
8020dd80:	84001a04 	addi	r16,r16,104
8020dd84:	8cbff51e 	bne	r17,r18,8020dd5c <__reset+0xfa1edd5c>
8020dd88:	a5000017 	ldw	r20,0(r20)
8020dd8c:	a03fee1e 	bne	r20,zero,8020dd48 <__reset+0xfa1edd48>
8020dd90:	b805883a 	mov	r2,r23
8020dd94:	dfc00817 	ldw	ra,32(sp)
8020dd98:	ddc00717 	ldw	r23,28(sp)
8020dd9c:	dd800617 	ldw	r22,24(sp)
8020dda0:	dd400517 	ldw	r21,20(sp)
8020dda4:	dd000417 	ldw	r20,16(sp)
8020dda8:	dcc00317 	ldw	r19,12(sp)
8020ddac:	dc800217 	ldw	r18,8(sp)
8020ddb0:	dc400117 	ldw	r17,4(sp)
8020ddb4:	dc000017 	ldw	r16,0(sp)
8020ddb8:	dec00904 	addi	sp,sp,36
8020ddbc:	f800283a 	ret
8020ddc0:	002f883a 	mov	r23,zero
8020ddc4:	003ff206 	br	8020dd90 <__reset+0xfa1edd90>

8020ddc8 <_setlocale_r>:
8020ddc8:	30001b26 	beq	r6,zero,8020de38 <_setlocale_r+0x70>
8020ddcc:	016008b4 	movhi	r5,32802
8020ddd0:	defffe04 	addi	sp,sp,-8
8020ddd4:	29765c04 	addi	r5,r5,-9872
8020ddd8:	3009883a 	mov	r4,r6
8020dddc:	dc000015 	stw	r16,0(sp)
8020dde0:	dfc00115 	stw	ra,4(sp)
8020dde4:	3021883a 	mov	r16,r6
8020dde8:	02103380 	call	80210338 <strcmp>
8020ddec:	1000061e 	bne	r2,zero,8020de08 <_setlocale_r+0x40>
8020ddf0:	00a008b4 	movhi	r2,32802
8020ddf4:	10b63504 	addi	r2,r2,-10028
8020ddf8:	dfc00117 	ldw	ra,4(sp)
8020ddfc:	dc000017 	ldw	r16,0(sp)
8020de00:	dec00204 	addi	sp,sp,8
8020de04:	f800283a 	ret
8020de08:	016008b4 	movhi	r5,32802
8020de0c:	29763504 	addi	r5,r5,-10028
8020de10:	8009883a 	mov	r4,r16
8020de14:	02103380 	call	80210338 <strcmp>
8020de18:	103ff526 	beq	r2,zero,8020ddf0 <__reset+0xfa1eddf0>
8020de1c:	016008b4 	movhi	r5,32802
8020de20:	29763f04 	addi	r5,r5,-9988
8020de24:	8009883a 	mov	r4,r16
8020de28:	02103380 	call	80210338 <strcmp>
8020de2c:	103ff026 	beq	r2,zero,8020ddf0 <__reset+0xfa1eddf0>
8020de30:	0005883a 	mov	r2,zero
8020de34:	003ff006 	br	8020ddf8 <__reset+0xfa1eddf8>
8020de38:	00a008b4 	movhi	r2,32802
8020de3c:	10b63504 	addi	r2,r2,-10028
8020de40:	f800283a 	ret

8020de44 <__locale_charset>:
8020de44:	00a008b4 	movhi	r2,32802
8020de48:	10b87104 	addi	r2,r2,-7740
8020de4c:	f800283a 	ret

8020de50 <__locale_mb_cur_max>:
8020de50:	00a008b4 	movhi	r2,32802
8020de54:	10be7e04 	addi	r2,r2,-1544
8020de58:	10800017 	ldw	r2,0(r2)
8020de5c:	f800283a 	ret

8020de60 <__locale_msgcharset>:
8020de60:	00a008b4 	movhi	r2,32802
8020de64:	10b86904 	addi	r2,r2,-7772
8020de68:	f800283a 	ret

8020de6c <__locale_cjk_lang>:
8020de6c:	0005883a 	mov	r2,zero
8020de70:	f800283a 	ret

8020de74 <_localeconv_r>:
8020de74:	00a008b4 	movhi	r2,32802
8020de78:	10b87904 	addi	r2,r2,-7708
8020de7c:	f800283a 	ret

8020de80 <setlocale>:
8020de80:	00a008b4 	movhi	r2,32802
8020de84:	10be7d04 	addi	r2,r2,-1548
8020de88:	280d883a 	mov	r6,r5
8020de8c:	200b883a 	mov	r5,r4
8020de90:	11000017 	ldw	r4,0(r2)
8020de94:	020ddc81 	jmpi	8020ddc8 <_setlocale_r>

8020de98 <localeconv>:
8020de98:	00a008b4 	movhi	r2,32802
8020de9c:	10b87904 	addi	r2,r2,-7708
8020dea0:	f800283a 	ret

8020dea4 <__smakebuf_r>:
8020dea4:	2880030b 	ldhu	r2,12(r5)
8020dea8:	10c0008c 	andi	r3,r2,2
8020deac:	1800411e 	bne	r3,zero,8020dfb4 <__smakebuf_r+0x110>
8020deb0:	deffec04 	addi	sp,sp,-80
8020deb4:	dc000f15 	stw	r16,60(sp)
8020deb8:	2821883a 	mov	r16,r5
8020debc:	2940038f 	ldh	r5,14(r5)
8020dec0:	dc401015 	stw	r17,64(sp)
8020dec4:	dfc01315 	stw	ra,76(sp)
8020dec8:	dcc01215 	stw	r19,72(sp)
8020decc:	dc801115 	stw	r18,68(sp)
8020ded0:	2023883a 	mov	r17,r4
8020ded4:	28001c16 	blt	r5,zero,8020df48 <__smakebuf_r+0xa4>
8020ded8:	d80d883a 	mov	r6,sp
8020dedc:	02132ec0 	call	802132ec <_fstat_r>
8020dee0:	10001816 	blt	r2,zero,8020df44 <__smakebuf_r+0xa0>
8020dee4:	d8800117 	ldw	r2,4(sp)
8020dee8:	00e00014 	movui	r3,32768
8020deec:	10bc000c 	andi	r2,r2,61440
8020def0:	14c80020 	cmpeqi	r19,r2,8192
8020def4:	10c03726 	beq	r2,r3,8020dfd4 <__smakebuf_r+0x130>
8020def8:	80c0030b 	ldhu	r3,12(r16)
8020defc:	18c20014 	ori	r3,r3,2048
8020df00:	80c0030d 	sth	r3,12(r16)
8020df04:	00c80004 	movi	r3,8192
8020df08:	10c0521e 	bne	r2,r3,8020e054 <__smakebuf_r+0x1b0>
8020df0c:	8140038f 	ldh	r5,14(r16)
8020df10:	8809883a 	mov	r4,r17
8020df14:	02133480 	call	80213348 <_isatty_r>
8020df18:	10004c26 	beq	r2,zero,8020e04c <__smakebuf_r+0x1a8>
8020df1c:	8080030b 	ldhu	r2,12(r16)
8020df20:	80c010c4 	addi	r3,r16,67
8020df24:	80c00015 	stw	r3,0(r16)
8020df28:	10800054 	ori	r2,r2,1
8020df2c:	8080030d 	sth	r2,12(r16)
8020df30:	00800044 	movi	r2,1
8020df34:	80c00415 	stw	r3,16(r16)
8020df38:	80800515 	stw	r2,20(r16)
8020df3c:	04810004 	movi	r18,1024
8020df40:	00000706 	br	8020df60 <__smakebuf_r+0xbc>
8020df44:	8080030b 	ldhu	r2,12(r16)
8020df48:	10c0200c 	andi	r3,r2,128
8020df4c:	18001f1e 	bne	r3,zero,8020dfcc <__smakebuf_r+0x128>
8020df50:	04810004 	movi	r18,1024
8020df54:	10820014 	ori	r2,r2,2048
8020df58:	8080030d 	sth	r2,12(r16)
8020df5c:	0027883a 	mov	r19,zero
8020df60:	900b883a 	mov	r5,r18
8020df64:	8809883a 	mov	r4,r17
8020df68:	020e0600 	call	8020e060 <_malloc_r>
8020df6c:	10002c26 	beq	r2,zero,8020e020 <__smakebuf_r+0x17c>
8020df70:	80c0030b 	ldhu	r3,12(r16)
8020df74:	01200874 	movhi	r4,32801
8020df78:	2133ee04 	addi	r4,r4,-12360
8020df7c:	89000f15 	stw	r4,60(r17)
8020df80:	18c02014 	ori	r3,r3,128
8020df84:	80c0030d 	sth	r3,12(r16)
8020df88:	80800015 	stw	r2,0(r16)
8020df8c:	80800415 	stw	r2,16(r16)
8020df90:	84800515 	stw	r18,20(r16)
8020df94:	98001a1e 	bne	r19,zero,8020e000 <__smakebuf_r+0x15c>
8020df98:	dfc01317 	ldw	ra,76(sp)
8020df9c:	dcc01217 	ldw	r19,72(sp)
8020dfa0:	dc801117 	ldw	r18,68(sp)
8020dfa4:	dc401017 	ldw	r17,64(sp)
8020dfa8:	dc000f17 	ldw	r16,60(sp)
8020dfac:	dec01404 	addi	sp,sp,80
8020dfb0:	f800283a 	ret
8020dfb4:	288010c4 	addi	r2,r5,67
8020dfb8:	28800015 	stw	r2,0(r5)
8020dfbc:	28800415 	stw	r2,16(r5)
8020dfc0:	00800044 	movi	r2,1
8020dfc4:	28800515 	stw	r2,20(r5)
8020dfc8:	f800283a 	ret
8020dfcc:	04801004 	movi	r18,64
8020dfd0:	003fe006 	br	8020df54 <__reset+0xfa1edf54>
8020dfd4:	81000a17 	ldw	r4,40(r16)
8020dfd8:	00e00874 	movhi	r3,32801
8020dfdc:	18c0b504 	addi	r3,r3,724
8020dfe0:	20ffc51e 	bne	r4,r3,8020def8 <__reset+0xfa1edef8>
8020dfe4:	8080030b 	ldhu	r2,12(r16)
8020dfe8:	04810004 	movi	r18,1024
8020dfec:	84801315 	stw	r18,76(r16)
8020dff0:	1484b03a 	or	r2,r2,r18
8020dff4:	8080030d 	sth	r2,12(r16)
8020dff8:	0027883a 	mov	r19,zero
8020dffc:	003fd806 	br	8020df60 <__reset+0xfa1edf60>
8020e000:	8140038f 	ldh	r5,14(r16)
8020e004:	8809883a 	mov	r4,r17
8020e008:	02133480 	call	80213348 <_isatty_r>
8020e00c:	103fe226 	beq	r2,zero,8020df98 <__reset+0xfa1edf98>
8020e010:	8080030b 	ldhu	r2,12(r16)
8020e014:	10800054 	ori	r2,r2,1
8020e018:	8080030d 	sth	r2,12(r16)
8020e01c:	003fde06 	br	8020df98 <__reset+0xfa1edf98>
8020e020:	8080030b 	ldhu	r2,12(r16)
8020e024:	10c0800c 	andi	r3,r2,512
8020e028:	183fdb1e 	bne	r3,zero,8020df98 <__reset+0xfa1edf98>
8020e02c:	10800094 	ori	r2,r2,2
8020e030:	80c010c4 	addi	r3,r16,67
8020e034:	8080030d 	sth	r2,12(r16)
8020e038:	00800044 	movi	r2,1
8020e03c:	80c00015 	stw	r3,0(r16)
8020e040:	80c00415 	stw	r3,16(r16)
8020e044:	80800515 	stw	r2,20(r16)
8020e048:	003fd306 	br	8020df98 <__reset+0xfa1edf98>
8020e04c:	04810004 	movi	r18,1024
8020e050:	003fc306 	br	8020df60 <__reset+0xfa1edf60>
8020e054:	0027883a 	mov	r19,zero
8020e058:	04810004 	movi	r18,1024
8020e05c:	003fc006 	br	8020df60 <__reset+0xfa1edf60>

8020e060 <_malloc_r>:
8020e060:	defff504 	addi	sp,sp,-44
8020e064:	dc800315 	stw	r18,12(sp)
8020e068:	dfc00a15 	stw	ra,40(sp)
8020e06c:	df000915 	stw	fp,36(sp)
8020e070:	ddc00815 	stw	r23,32(sp)
8020e074:	dd800715 	stw	r22,28(sp)
8020e078:	dd400615 	stw	r21,24(sp)
8020e07c:	dd000515 	stw	r20,20(sp)
8020e080:	dcc00415 	stw	r19,16(sp)
8020e084:	dc400215 	stw	r17,8(sp)
8020e088:	dc000115 	stw	r16,4(sp)
8020e08c:	288002c4 	addi	r2,r5,11
8020e090:	00c00584 	movi	r3,22
8020e094:	2025883a 	mov	r18,r4
8020e098:	18807f2e 	bgeu	r3,r2,8020e298 <_malloc_r+0x238>
8020e09c:	047ffe04 	movi	r17,-8
8020e0a0:	1462703a 	and	r17,r2,r17
8020e0a4:	8800a316 	blt	r17,zero,8020e334 <_malloc_r+0x2d4>
8020e0a8:	8940a236 	bltu	r17,r5,8020e334 <_malloc_r+0x2d4>
8020e0ac:	021715c0 	call	8021715c <__malloc_lock>
8020e0b0:	00807dc4 	movi	r2,503
8020e0b4:	1441e92e 	bgeu	r2,r17,8020e85c <_malloc_r+0x7fc>
8020e0b8:	8804d27a 	srli	r2,r17,9
8020e0bc:	1000a126 	beq	r2,zero,8020e344 <_malloc_r+0x2e4>
8020e0c0:	00c00104 	movi	r3,4
8020e0c4:	18811e36 	bltu	r3,r2,8020e540 <_malloc_r+0x4e0>
8020e0c8:	8804d1ba 	srli	r2,r17,6
8020e0cc:	12000e44 	addi	r8,r2,57
8020e0d0:	11c00e04 	addi	r7,r2,56
8020e0d4:	4209883a 	add	r4,r8,r8
8020e0d8:	04e008b4 	movhi	r19,32802
8020e0dc:	2109883a 	add	r4,r4,r4
8020e0e0:	9cf88704 	addi	r19,r19,-7652
8020e0e4:	2109883a 	add	r4,r4,r4
8020e0e8:	9909883a 	add	r4,r19,r4
8020e0ec:	24000117 	ldw	r16,4(r4)
8020e0f0:	213ffe04 	addi	r4,r4,-8
8020e0f4:	24009726 	beq	r4,r16,8020e354 <_malloc_r+0x2f4>
8020e0f8:	80800117 	ldw	r2,4(r16)
8020e0fc:	01bfff04 	movi	r6,-4
8020e100:	014003c4 	movi	r5,15
8020e104:	1184703a 	and	r2,r2,r6
8020e108:	1447c83a 	sub	r3,r2,r17
8020e10c:	28c00716 	blt	r5,r3,8020e12c <_malloc_r+0xcc>
8020e110:	1800920e 	bge	r3,zero,8020e35c <_malloc_r+0x2fc>
8020e114:	84000317 	ldw	r16,12(r16)
8020e118:	24008e26 	beq	r4,r16,8020e354 <_malloc_r+0x2f4>
8020e11c:	80800117 	ldw	r2,4(r16)
8020e120:	1184703a 	and	r2,r2,r6
8020e124:	1447c83a 	sub	r3,r2,r17
8020e128:	28fff90e 	bge	r5,r3,8020e110 <__reset+0xfa1ee110>
8020e12c:	3809883a 	mov	r4,r7
8020e130:	01a008b4 	movhi	r6,32802
8020e134:	9c000417 	ldw	r16,16(r19)
8020e138:	31b88704 	addi	r6,r6,-7652
8020e13c:	32000204 	addi	r8,r6,8
8020e140:	82013426 	beq	r16,r8,8020e614 <_malloc_r+0x5b4>
8020e144:	80c00117 	ldw	r3,4(r16)
8020e148:	00bfff04 	movi	r2,-4
8020e14c:	188e703a 	and	r7,r3,r2
8020e150:	3c45c83a 	sub	r2,r7,r17
8020e154:	00c003c4 	movi	r3,15
8020e158:	18811f16 	blt	r3,r2,8020e5d8 <_malloc_r+0x578>
8020e15c:	32000515 	stw	r8,20(r6)
8020e160:	32000415 	stw	r8,16(r6)
8020e164:	10007f0e 	bge	r2,zero,8020e364 <_malloc_r+0x304>
8020e168:	00807fc4 	movi	r2,511
8020e16c:	11c0fd36 	bltu	r2,r7,8020e564 <_malloc_r+0x504>
8020e170:	3806d0fa 	srli	r3,r7,3
8020e174:	01c00044 	movi	r7,1
8020e178:	30800117 	ldw	r2,4(r6)
8020e17c:	19400044 	addi	r5,r3,1
8020e180:	294b883a 	add	r5,r5,r5
8020e184:	1807d0ba 	srai	r3,r3,2
8020e188:	294b883a 	add	r5,r5,r5
8020e18c:	294b883a 	add	r5,r5,r5
8020e190:	298b883a 	add	r5,r5,r6
8020e194:	38c6983a 	sll	r3,r7,r3
8020e198:	29c00017 	ldw	r7,0(r5)
8020e19c:	2a7ffe04 	addi	r9,r5,-8
8020e1a0:	1886b03a 	or	r3,r3,r2
8020e1a4:	82400315 	stw	r9,12(r16)
8020e1a8:	81c00215 	stw	r7,8(r16)
8020e1ac:	30c00115 	stw	r3,4(r6)
8020e1b0:	2c000015 	stw	r16,0(r5)
8020e1b4:	3c000315 	stw	r16,12(r7)
8020e1b8:	2005d0ba 	srai	r2,r4,2
8020e1bc:	01400044 	movi	r5,1
8020e1c0:	288a983a 	sll	r5,r5,r2
8020e1c4:	19406f36 	bltu	r3,r5,8020e384 <_malloc_r+0x324>
8020e1c8:	28c4703a 	and	r2,r5,r3
8020e1cc:	10000a1e 	bne	r2,zero,8020e1f8 <_malloc_r+0x198>
8020e1d0:	00bfff04 	movi	r2,-4
8020e1d4:	294b883a 	add	r5,r5,r5
8020e1d8:	2088703a 	and	r4,r4,r2
8020e1dc:	28c4703a 	and	r2,r5,r3
8020e1e0:	21000104 	addi	r4,r4,4
8020e1e4:	1000041e 	bne	r2,zero,8020e1f8 <_malloc_r+0x198>
8020e1e8:	294b883a 	add	r5,r5,r5
8020e1ec:	28c4703a 	and	r2,r5,r3
8020e1f0:	21000104 	addi	r4,r4,4
8020e1f4:	103ffc26 	beq	r2,zero,8020e1e8 <__reset+0xfa1ee1e8>
8020e1f8:	02bfff04 	movi	r10,-4
8020e1fc:	024003c4 	movi	r9,15
8020e200:	21800044 	addi	r6,r4,1
8020e204:	318d883a 	add	r6,r6,r6
8020e208:	318d883a 	add	r6,r6,r6
8020e20c:	318d883a 	add	r6,r6,r6
8020e210:	998d883a 	add	r6,r19,r6
8020e214:	333ffe04 	addi	r12,r6,-8
8020e218:	2017883a 	mov	r11,r4
8020e21c:	31800104 	addi	r6,r6,4
8020e220:	34000017 	ldw	r16,0(r6)
8020e224:	31fffd04 	addi	r7,r6,-12
8020e228:	81c0041e 	bne	r16,r7,8020e23c <_malloc_r+0x1dc>
8020e22c:	0000fb06 	br	8020e61c <_malloc_r+0x5bc>
8020e230:	1801030e 	bge	r3,zero,8020e640 <_malloc_r+0x5e0>
8020e234:	84000317 	ldw	r16,12(r16)
8020e238:	81c0f826 	beq	r16,r7,8020e61c <_malloc_r+0x5bc>
8020e23c:	80800117 	ldw	r2,4(r16)
8020e240:	1284703a 	and	r2,r2,r10
8020e244:	1447c83a 	sub	r3,r2,r17
8020e248:	48fff90e 	bge	r9,r3,8020e230 <__reset+0xfa1ee230>
8020e24c:	80800317 	ldw	r2,12(r16)
8020e250:	81000217 	ldw	r4,8(r16)
8020e254:	89400054 	ori	r5,r17,1
8020e258:	81400115 	stw	r5,4(r16)
8020e25c:	20800315 	stw	r2,12(r4)
8020e260:	11000215 	stw	r4,8(r2)
8020e264:	8463883a 	add	r17,r16,r17
8020e268:	9c400515 	stw	r17,20(r19)
8020e26c:	9c400415 	stw	r17,16(r19)
8020e270:	18800054 	ori	r2,r3,1
8020e274:	88800115 	stw	r2,4(r17)
8020e278:	8a000315 	stw	r8,12(r17)
8020e27c:	8a000215 	stw	r8,8(r17)
8020e280:	88e3883a 	add	r17,r17,r3
8020e284:	88c00015 	stw	r3,0(r17)
8020e288:	9009883a 	mov	r4,r18
8020e28c:	02171800 	call	80217180 <__malloc_unlock>
8020e290:	80800204 	addi	r2,r16,8
8020e294:	00001b06 	br	8020e304 <_malloc_r+0x2a4>
8020e298:	04400404 	movi	r17,16
8020e29c:	89402536 	bltu	r17,r5,8020e334 <_malloc_r+0x2d4>
8020e2a0:	021715c0 	call	8021715c <__malloc_lock>
8020e2a4:	00800184 	movi	r2,6
8020e2a8:	01000084 	movi	r4,2
8020e2ac:	04e008b4 	movhi	r19,32802
8020e2b0:	1085883a 	add	r2,r2,r2
8020e2b4:	9cf88704 	addi	r19,r19,-7652
8020e2b8:	1085883a 	add	r2,r2,r2
8020e2bc:	9885883a 	add	r2,r19,r2
8020e2c0:	14000117 	ldw	r16,4(r2)
8020e2c4:	10fffe04 	addi	r3,r2,-8
8020e2c8:	80c0d926 	beq	r16,r3,8020e630 <_malloc_r+0x5d0>
8020e2cc:	80c00117 	ldw	r3,4(r16)
8020e2d0:	81000317 	ldw	r4,12(r16)
8020e2d4:	00bfff04 	movi	r2,-4
8020e2d8:	1884703a 	and	r2,r3,r2
8020e2dc:	81400217 	ldw	r5,8(r16)
8020e2e0:	8085883a 	add	r2,r16,r2
8020e2e4:	10c00117 	ldw	r3,4(r2)
8020e2e8:	29000315 	stw	r4,12(r5)
8020e2ec:	21400215 	stw	r5,8(r4)
8020e2f0:	18c00054 	ori	r3,r3,1
8020e2f4:	10c00115 	stw	r3,4(r2)
8020e2f8:	9009883a 	mov	r4,r18
8020e2fc:	02171800 	call	80217180 <__malloc_unlock>
8020e300:	80800204 	addi	r2,r16,8
8020e304:	dfc00a17 	ldw	ra,40(sp)
8020e308:	df000917 	ldw	fp,36(sp)
8020e30c:	ddc00817 	ldw	r23,32(sp)
8020e310:	dd800717 	ldw	r22,28(sp)
8020e314:	dd400617 	ldw	r21,24(sp)
8020e318:	dd000517 	ldw	r20,20(sp)
8020e31c:	dcc00417 	ldw	r19,16(sp)
8020e320:	dc800317 	ldw	r18,12(sp)
8020e324:	dc400217 	ldw	r17,8(sp)
8020e328:	dc000117 	ldw	r16,4(sp)
8020e32c:	dec00b04 	addi	sp,sp,44
8020e330:	f800283a 	ret
8020e334:	00800304 	movi	r2,12
8020e338:	90800015 	stw	r2,0(r18)
8020e33c:	0005883a 	mov	r2,zero
8020e340:	003ff006 	br	8020e304 <__reset+0xfa1ee304>
8020e344:	01002004 	movi	r4,128
8020e348:	02001004 	movi	r8,64
8020e34c:	01c00fc4 	movi	r7,63
8020e350:	003f6106 	br	8020e0d8 <__reset+0xfa1ee0d8>
8020e354:	4009883a 	mov	r4,r8
8020e358:	003f7506 	br	8020e130 <__reset+0xfa1ee130>
8020e35c:	81000317 	ldw	r4,12(r16)
8020e360:	003fde06 	br	8020e2dc <__reset+0xfa1ee2dc>
8020e364:	81c5883a 	add	r2,r16,r7
8020e368:	11400117 	ldw	r5,4(r2)
8020e36c:	9009883a 	mov	r4,r18
8020e370:	29400054 	ori	r5,r5,1
8020e374:	11400115 	stw	r5,4(r2)
8020e378:	02171800 	call	80217180 <__malloc_unlock>
8020e37c:	80800204 	addi	r2,r16,8
8020e380:	003fe006 	br	8020e304 <__reset+0xfa1ee304>
8020e384:	9c000217 	ldw	r16,8(r19)
8020e388:	00bfff04 	movi	r2,-4
8020e38c:	85800117 	ldw	r22,4(r16)
8020e390:	b0ac703a 	and	r22,r22,r2
8020e394:	b4400336 	bltu	r22,r17,8020e3a4 <_malloc_r+0x344>
8020e398:	b445c83a 	sub	r2,r22,r17
8020e39c:	00c003c4 	movi	r3,15
8020e3a0:	18805d16 	blt	r3,r2,8020e518 <_malloc_r+0x4b8>
8020e3a4:	05e008b4 	movhi	r23,32802
8020e3a8:	00a008b4 	movhi	r2,32802
8020e3ac:	10bea104 	addi	r2,r2,-1404
8020e3b0:	bdfe7f04 	addi	r23,r23,-1540
8020e3b4:	15400017 	ldw	r21,0(r2)
8020e3b8:	b8c00017 	ldw	r3,0(r23)
8020e3bc:	00bfffc4 	movi	r2,-1
8020e3c0:	858d883a 	add	r6,r16,r22
8020e3c4:	8d6b883a 	add	r21,r17,r21
8020e3c8:	1880ea26 	beq	r3,r2,8020e774 <_malloc_r+0x714>
8020e3cc:	ad4403c4 	addi	r21,r21,4111
8020e3d0:	00bc0004 	movi	r2,-4096
8020e3d4:	a8aa703a 	and	r21,r21,r2
8020e3d8:	a80b883a 	mov	r5,r21
8020e3dc:	9009883a 	mov	r4,r18
8020e3e0:	d9800015 	stw	r6,0(sp)
8020e3e4:	02101a80 	call	802101a8 <_sbrk_r>
8020e3e8:	1029883a 	mov	r20,r2
8020e3ec:	00bfffc4 	movi	r2,-1
8020e3f0:	d9800017 	ldw	r6,0(sp)
8020e3f4:	a080e826 	beq	r20,r2,8020e798 <_malloc_r+0x738>
8020e3f8:	a180a636 	bltu	r20,r6,8020e694 <_malloc_r+0x634>
8020e3fc:	072008b4 	movhi	fp,32802
8020e400:	e73eaa04 	addi	fp,fp,-1368
8020e404:	e0800017 	ldw	r2,0(fp)
8020e408:	a887883a 	add	r3,r21,r2
8020e40c:	e0c00015 	stw	r3,0(fp)
8020e410:	3500e626 	beq	r6,r20,8020e7ac <_malloc_r+0x74c>
8020e414:	b9000017 	ldw	r4,0(r23)
8020e418:	00bfffc4 	movi	r2,-1
8020e41c:	2080ee26 	beq	r4,r2,8020e7d8 <_malloc_r+0x778>
8020e420:	a185c83a 	sub	r2,r20,r6
8020e424:	10c5883a 	add	r2,r2,r3
8020e428:	e0800015 	stw	r2,0(fp)
8020e42c:	a0c001cc 	andi	r3,r20,7
8020e430:	1800bc26 	beq	r3,zero,8020e724 <_malloc_r+0x6c4>
8020e434:	a0e9c83a 	sub	r20,r20,r3
8020e438:	00840204 	movi	r2,4104
8020e43c:	a5000204 	addi	r20,r20,8
8020e440:	10c7c83a 	sub	r3,r2,r3
8020e444:	a545883a 	add	r2,r20,r21
8020e448:	1083ffcc 	andi	r2,r2,4095
8020e44c:	18abc83a 	sub	r21,r3,r2
8020e450:	a80b883a 	mov	r5,r21
8020e454:	9009883a 	mov	r4,r18
8020e458:	02101a80 	call	802101a8 <_sbrk_r>
8020e45c:	00ffffc4 	movi	r3,-1
8020e460:	10c0e126 	beq	r2,r3,8020e7e8 <_malloc_r+0x788>
8020e464:	1505c83a 	sub	r2,r2,r20
8020e468:	1545883a 	add	r2,r2,r21
8020e46c:	10800054 	ori	r2,r2,1
8020e470:	e0c00017 	ldw	r3,0(fp)
8020e474:	9d000215 	stw	r20,8(r19)
8020e478:	a0800115 	stw	r2,4(r20)
8020e47c:	a8c7883a 	add	r3,r21,r3
8020e480:	e0c00015 	stw	r3,0(fp)
8020e484:	84c00e26 	beq	r16,r19,8020e4c0 <_malloc_r+0x460>
8020e488:	018003c4 	movi	r6,15
8020e48c:	3580a72e 	bgeu	r6,r22,8020e72c <_malloc_r+0x6cc>
8020e490:	81400117 	ldw	r5,4(r16)
8020e494:	013ffe04 	movi	r4,-8
8020e498:	b0bffd04 	addi	r2,r22,-12
8020e49c:	1104703a 	and	r2,r2,r4
8020e4a0:	2900004c 	andi	r4,r5,1
8020e4a4:	2088b03a 	or	r4,r4,r2
8020e4a8:	81000115 	stw	r4,4(r16)
8020e4ac:	01400144 	movi	r5,5
8020e4b0:	8089883a 	add	r4,r16,r2
8020e4b4:	21400115 	stw	r5,4(r4)
8020e4b8:	21400215 	stw	r5,8(r4)
8020e4bc:	3080cd36 	bltu	r6,r2,8020e7f4 <_malloc_r+0x794>
8020e4c0:	00a008b4 	movhi	r2,32802
8020e4c4:	10bea004 	addi	r2,r2,-1408
8020e4c8:	11000017 	ldw	r4,0(r2)
8020e4cc:	20c0012e 	bgeu	r4,r3,8020e4d4 <_malloc_r+0x474>
8020e4d0:	10c00015 	stw	r3,0(r2)
8020e4d4:	00a008b4 	movhi	r2,32802
8020e4d8:	10be9f04 	addi	r2,r2,-1412
8020e4dc:	11000017 	ldw	r4,0(r2)
8020e4e0:	9c000217 	ldw	r16,8(r19)
8020e4e4:	20c0012e 	bgeu	r4,r3,8020e4ec <_malloc_r+0x48c>
8020e4e8:	10c00015 	stw	r3,0(r2)
8020e4ec:	80c00117 	ldw	r3,4(r16)
8020e4f0:	00bfff04 	movi	r2,-4
8020e4f4:	1886703a 	and	r3,r3,r2
8020e4f8:	1c45c83a 	sub	r2,r3,r17
8020e4fc:	1c400236 	bltu	r3,r17,8020e508 <_malloc_r+0x4a8>
8020e500:	00c003c4 	movi	r3,15
8020e504:	18800416 	blt	r3,r2,8020e518 <_malloc_r+0x4b8>
8020e508:	9009883a 	mov	r4,r18
8020e50c:	02171800 	call	80217180 <__malloc_unlock>
8020e510:	0005883a 	mov	r2,zero
8020e514:	003f7b06 	br	8020e304 <__reset+0xfa1ee304>
8020e518:	88c00054 	ori	r3,r17,1
8020e51c:	80c00115 	stw	r3,4(r16)
8020e520:	8463883a 	add	r17,r16,r17
8020e524:	10800054 	ori	r2,r2,1
8020e528:	9c400215 	stw	r17,8(r19)
8020e52c:	88800115 	stw	r2,4(r17)
8020e530:	9009883a 	mov	r4,r18
8020e534:	02171800 	call	80217180 <__malloc_unlock>
8020e538:	80800204 	addi	r2,r16,8
8020e53c:	003f7106 	br	8020e304 <__reset+0xfa1ee304>
8020e540:	00c00504 	movi	r3,20
8020e544:	18804a2e 	bgeu	r3,r2,8020e670 <_malloc_r+0x610>
8020e548:	00c01504 	movi	r3,84
8020e54c:	18806e36 	bltu	r3,r2,8020e708 <_malloc_r+0x6a8>
8020e550:	8804d33a 	srli	r2,r17,12
8020e554:	12001bc4 	addi	r8,r2,111
8020e558:	11c01b84 	addi	r7,r2,110
8020e55c:	4209883a 	add	r4,r8,r8
8020e560:	003edd06 	br	8020e0d8 <__reset+0xfa1ee0d8>
8020e564:	3804d27a 	srli	r2,r7,9
8020e568:	00c00104 	movi	r3,4
8020e56c:	1880442e 	bgeu	r3,r2,8020e680 <_malloc_r+0x620>
8020e570:	00c00504 	movi	r3,20
8020e574:	18808136 	bltu	r3,r2,8020e77c <_malloc_r+0x71c>
8020e578:	11401704 	addi	r5,r2,92
8020e57c:	10c016c4 	addi	r3,r2,91
8020e580:	294b883a 	add	r5,r5,r5
8020e584:	294b883a 	add	r5,r5,r5
8020e588:	294b883a 	add	r5,r5,r5
8020e58c:	994b883a 	add	r5,r19,r5
8020e590:	28800017 	ldw	r2,0(r5)
8020e594:	01a008b4 	movhi	r6,32802
8020e598:	297ffe04 	addi	r5,r5,-8
8020e59c:	31b88704 	addi	r6,r6,-7652
8020e5a0:	28806526 	beq	r5,r2,8020e738 <_malloc_r+0x6d8>
8020e5a4:	01bfff04 	movi	r6,-4
8020e5a8:	10c00117 	ldw	r3,4(r2)
8020e5ac:	1986703a 	and	r3,r3,r6
8020e5b0:	38c0022e 	bgeu	r7,r3,8020e5bc <_malloc_r+0x55c>
8020e5b4:	10800217 	ldw	r2,8(r2)
8020e5b8:	28bffb1e 	bne	r5,r2,8020e5a8 <__reset+0xfa1ee5a8>
8020e5bc:	11400317 	ldw	r5,12(r2)
8020e5c0:	98c00117 	ldw	r3,4(r19)
8020e5c4:	81400315 	stw	r5,12(r16)
8020e5c8:	80800215 	stw	r2,8(r16)
8020e5cc:	2c000215 	stw	r16,8(r5)
8020e5d0:	14000315 	stw	r16,12(r2)
8020e5d4:	003ef806 	br	8020e1b8 <__reset+0xfa1ee1b8>
8020e5d8:	88c00054 	ori	r3,r17,1
8020e5dc:	80c00115 	stw	r3,4(r16)
8020e5e0:	8463883a 	add	r17,r16,r17
8020e5e4:	34400515 	stw	r17,20(r6)
8020e5e8:	34400415 	stw	r17,16(r6)
8020e5ec:	10c00054 	ori	r3,r2,1
8020e5f0:	8a000315 	stw	r8,12(r17)
8020e5f4:	8a000215 	stw	r8,8(r17)
8020e5f8:	88c00115 	stw	r3,4(r17)
8020e5fc:	88a3883a 	add	r17,r17,r2
8020e600:	88800015 	stw	r2,0(r17)
8020e604:	9009883a 	mov	r4,r18
8020e608:	02171800 	call	80217180 <__malloc_unlock>
8020e60c:	80800204 	addi	r2,r16,8
8020e610:	003f3c06 	br	8020e304 <__reset+0xfa1ee304>
8020e614:	30c00117 	ldw	r3,4(r6)
8020e618:	003ee706 	br	8020e1b8 <__reset+0xfa1ee1b8>
8020e61c:	5ac00044 	addi	r11,r11,1
8020e620:	588000cc 	andi	r2,r11,3
8020e624:	31800204 	addi	r6,r6,8
8020e628:	103efd1e 	bne	r2,zero,8020e220 <__reset+0xfa1ee220>
8020e62c:	00002406 	br	8020e6c0 <_malloc_r+0x660>
8020e630:	14000317 	ldw	r16,12(r2)
8020e634:	143f251e 	bne	r2,r16,8020e2cc <__reset+0xfa1ee2cc>
8020e638:	21000084 	addi	r4,r4,2
8020e63c:	003ebc06 	br	8020e130 <__reset+0xfa1ee130>
8020e640:	8085883a 	add	r2,r16,r2
8020e644:	10c00117 	ldw	r3,4(r2)
8020e648:	81000317 	ldw	r4,12(r16)
8020e64c:	81400217 	ldw	r5,8(r16)
8020e650:	18c00054 	ori	r3,r3,1
8020e654:	10c00115 	stw	r3,4(r2)
8020e658:	29000315 	stw	r4,12(r5)
8020e65c:	21400215 	stw	r5,8(r4)
8020e660:	9009883a 	mov	r4,r18
8020e664:	02171800 	call	80217180 <__malloc_unlock>
8020e668:	80800204 	addi	r2,r16,8
8020e66c:	003f2506 	br	8020e304 <__reset+0xfa1ee304>
8020e670:	12001704 	addi	r8,r2,92
8020e674:	11c016c4 	addi	r7,r2,91
8020e678:	4209883a 	add	r4,r8,r8
8020e67c:	003e9606 	br	8020e0d8 <__reset+0xfa1ee0d8>
8020e680:	3804d1ba 	srli	r2,r7,6
8020e684:	11400e44 	addi	r5,r2,57
8020e688:	10c00e04 	addi	r3,r2,56
8020e68c:	294b883a 	add	r5,r5,r5
8020e690:	003fbc06 	br	8020e584 <__reset+0xfa1ee584>
8020e694:	84ff5926 	beq	r16,r19,8020e3fc <__reset+0xfa1ee3fc>
8020e698:	00a008b4 	movhi	r2,32802
8020e69c:	10b88704 	addi	r2,r2,-7652
8020e6a0:	14000217 	ldw	r16,8(r2)
8020e6a4:	00bfff04 	movi	r2,-4
8020e6a8:	80c00117 	ldw	r3,4(r16)
8020e6ac:	1886703a 	and	r3,r3,r2
8020e6b0:	003f9106 	br	8020e4f8 <__reset+0xfa1ee4f8>
8020e6b4:	60800217 	ldw	r2,8(r12)
8020e6b8:	213fffc4 	addi	r4,r4,-1
8020e6bc:	1300651e 	bne	r2,r12,8020e854 <_malloc_r+0x7f4>
8020e6c0:	208000cc 	andi	r2,r4,3
8020e6c4:	633ffe04 	addi	r12,r12,-8
8020e6c8:	103ffa1e 	bne	r2,zero,8020e6b4 <__reset+0xfa1ee6b4>
8020e6cc:	98800117 	ldw	r2,4(r19)
8020e6d0:	0146303a 	nor	r3,zero,r5
8020e6d4:	1884703a 	and	r2,r3,r2
8020e6d8:	98800115 	stw	r2,4(r19)
8020e6dc:	294b883a 	add	r5,r5,r5
8020e6e0:	117f2836 	bltu	r2,r5,8020e384 <__reset+0xfa1ee384>
8020e6e4:	283f2726 	beq	r5,zero,8020e384 <__reset+0xfa1ee384>
8020e6e8:	2886703a 	and	r3,r5,r2
8020e6ec:	5809883a 	mov	r4,r11
8020e6f0:	183ec31e 	bne	r3,zero,8020e200 <__reset+0xfa1ee200>
8020e6f4:	294b883a 	add	r5,r5,r5
8020e6f8:	2886703a 	and	r3,r5,r2
8020e6fc:	21000104 	addi	r4,r4,4
8020e700:	183ffc26 	beq	r3,zero,8020e6f4 <__reset+0xfa1ee6f4>
8020e704:	003ebe06 	br	8020e200 <__reset+0xfa1ee200>
8020e708:	00c05504 	movi	r3,340
8020e70c:	18801236 	bltu	r3,r2,8020e758 <_malloc_r+0x6f8>
8020e710:	8804d3fa 	srli	r2,r17,15
8020e714:	12001e04 	addi	r8,r2,120
8020e718:	11c01dc4 	addi	r7,r2,119
8020e71c:	4209883a 	add	r4,r8,r8
8020e720:	003e6d06 	br	8020e0d8 <__reset+0xfa1ee0d8>
8020e724:	00c40004 	movi	r3,4096
8020e728:	003f4606 	br	8020e444 <__reset+0xfa1ee444>
8020e72c:	00800044 	movi	r2,1
8020e730:	a0800115 	stw	r2,4(r20)
8020e734:	003f7406 	br	8020e508 <__reset+0xfa1ee508>
8020e738:	1805d0ba 	srai	r2,r3,2
8020e73c:	01c00044 	movi	r7,1
8020e740:	30c00117 	ldw	r3,4(r6)
8020e744:	388e983a 	sll	r7,r7,r2
8020e748:	2805883a 	mov	r2,r5
8020e74c:	38c6b03a 	or	r3,r7,r3
8020e750:	30c00115 	stw	r3,4(r6)
8020e754:	003f9b06 	br	8020e5c4 <__reset+0xfa1ee5c4>
8020e758:	00c15504 	movi	r3,1364
8020e75c:	18801a36 	bltu	r3,r2,8020e7c8 <_malloc_r+0x768>
8020e760:	8804d4ba 	srli	r2,r17,18
8020e764:	12001f44 	addi	r8,r2,125
8020e768:	11c01f04 	addi	r7,r2,124
8020e76c:	4209883a 	add	r4,r8,r8
8020e770:	003e5906 	br	8020e0d8 <__reset+0xfa1ee0d8>
8020e774:	ad400404 	addi	r21,r21,16
8020e778:	003f1706 	br	8020e3d8 <__reset+0xfa1ee3d8>
8020e77c:	00c01504 	movi	r3,84
8020e780:	18802336 	bltu	r3,r2,8020e810 <_malloc_r+0x7b0>
8020e784:	3804d33a 	srli	r2,r7,12
8020e788:	11401bc4 	addi	r5,r2,111
8020e78c:	10c01b84 	addi	r3,r2,110
8020e790:	294b883a 	add	r5,r5,r5
8020e794:	003f7b06 	br	8020e584 <__reset+0xfa1ee584>
8020e798:	9c000217 	ldw	r16,8(r19)
8020e79c:	00bfff04 	movi	r2,-4
8020e7a0:	80c00117 	ldw	r3,4(r16)
8020e7a4:	1886703a 	and	r3,r3,r2
8020e7a8:	003f5306 	br	8020e4f8 <__reset+0xfa1ee4f8>
8020e7ac:	3083ffcc 	andi	r2,r6,4095
8020e7b0:	103f181e 	bne	r2,zero,8020e414 <__reset+0xfa1ee414>
8020e7b4:	99000217 	ldw	r4,8(r19)
8020e7b8:	b545883a 	add	r2,r22,r21
8020e7bc:	10800054 	ori	r2,r2,1
8020e7c0:	20800115 	stw	r2,4(r4)
8020e7c4:	003f3e06 	br	8020e4c0 <__reset+0xfa1ee4c0>
8020e7c8:	01003f84 	movi	r4,254
8020e7cc:	02001fc4 	movi	r8,127
8020e7d0:	01c01f84 	movi	r7,126
8020e7d4:	003e4006 	br	8020e0d8 <__reset+0xfa1ee0d8>
8020e7d8:	00a008b4 	movhi	r2,32802
8020e7dc:	10be7f04 	addi	r2,r2,-1540
8020e7e0:	15000015 	stw	r20,0(r2)
8020e7e4:	003f1106 	br	8020e42c <__reset+0xfa1ee42c>
8020e7e8:	00800044 	movi	r2,1
8020e7ec:	002b883a 	mov	r21,zero
8020e7f0:	003f1f06 	br	8020e470 <__reset+0xfa1ee470>
8020e7f4:	81400204 	addi	r5,r16,8
8020e7f8:	9009883a 	mov	r4,r18
8020e7fc:	020d4740 	call	8020d474 <_free_r>
8020e800:	00a008b4 	movhi	r2,32802
8020e804:	10beaa04 	addi	r2,r2,-1368
8020e808:	10c00017 	ldw	r3,0(r2)
8020e80c:	003f2c06 	br	8020e4c0 <__reset+0xfa1ee4c0>
8020e810:	00c05504 	movi	r3,340
8020e814:	18800536 	bltu	r3,r2,8020e82c <_malloc_r+0x7cc>
8020e818:	3804d3fa 	srli	r2,r7,15
8020e81c:	11401e04 	addi	r5,r2,120
8020e820:	10c01dc4 	addi	r3,r2,119
8020e824:	294b883a 	add	r5,r5,r5
8020e828:	003f5606 	br	8020e584 <__reset+0xfa1ee584>
8020e82c:	00c15504 	movi	r3,1364
8020e830:	18800536 	bltu	r3,r2,8020e848 <_malloc_r+0x7e8>
8020e834:	3804d4ba 	srli	r2,r7,18
8020e838:	11401f44 	addi	r5,r2,125
8020e83c:	10c01f04 	addi	r3,r2,124
8020e840:	294b883a 	add	r5,r5,r5
8020e844:	003f4f06 	br	8020e584 <__reset+0xfa1ee584>
8020e848:	01403f84 	movi	r5,254
8020e84c:	00c01f84 	movi	r3,126
8020e850:	003f4c06 	br	8020e584 <__reset+0xfa1ee584>
8020e854:	98800117 	ldw	r2,4(r19)
8020e858:	003fa006 	br	8020e6dc <__reset+0xfa1ee6dc>
8020e85c:	8808d0fa 	srli	r4,r17,3
8020e860:	20800044 	addi	r2,r4,1
8020e864:	1085883a 	add	r2,r2,r2
8020e868:	003e9006 	br	8020e2ac <__reset+0xfa1ee2ac>

8020e86c <memchr>:
8020e86c:	208000cc 	andi	r2,r4,3
8020e870:	280f883a 	mov	r7,r5
8020e874:	10003426 	beq	r2,zero,8020e948 <memchr+0xdc>
8020e878:	30bfffc4 	addi	r2,r6,-1
8020e87c:	30001a26 	beq	r6,zero,8020e8e8 <memchr+0x7c>
8020e880:	20c00003 	ldbu	r3,0(r4)
8020e884:	29803fcc 	andi	r6,r5,255
8020e888:	30c0051e 	bne	r6,r3,8020e8a0 <memchr+0x34>
8020e88c:	00001806 	br	8020e8f0 <memchr+0x84>
8020e890:	10001526 	beq	r2,zero,8020e8e8 <memchr+0x7c>
8020e894:	20c00003 	ldbu	r3,0(r4)
8020e898:	10bfffc4 	addi	r2,r2,-1
8020e89c:	30c01426 	beq	r6,r3,8020e8f0 <memchr+0x84>
8020e8a0:	21000044 	addi	r4,r4,1
8020e8a4:	20c000cc 	andi	r3,r4,3
8020e8a8:	183ff91e 	bne	r3,zero,8020e890 <__reset+0xfa1ee890>
8020e8ac:	020000c4 	movi	r8,3
8020e8b0:	40801136 	bltu	r8,r2,8020e8f8 <memchr+0x8c>
8020e8b4:	10000c26 	beq	r2,zero,8020e8e8 <memchr+0x7c>
8020e8b8:	20c00003 	ldbu	r3,0(r4)
8020e8bc:	29403fcc 	andi	r5,r5,255
8020e8c0:	28c00b26 	beq	r5,r3,8020e8f0 <memchr+0x84>
8020e8c4:	20c00044 	addi	r3,r4,1
8020e8c8:	39803fcc 	andi	r6,r7,255
8020e8cc:	2089883a 	add	r4,r4,r2
8020e8d0:	00000306 	br	8020e8e0 <memchr+0x74>
8020e8d4:	18c00044 	addi	r3,r3,1
8020e8d8:	197fffc3 	ldbu	r5,-1(r3)
8020e8dc:	31400526 	beq	r6,r5,8020e8f4 <memchr+0x88>
8020e8e0:	1805883a 	mov	r2,r3
8020e8e4:	20fffb1e 	bne	r4,r3,8020e8d4 <__reset+0xfa1ee8d4>
8020e8e8:	0005883a 	mov	r2,zero
8020e8ec:	f800283a 	ret
8020e8f0:	2005883a 	mov	r2,r4
8020e8f4:	f800283a 	ret
8020e8f8:	28c03fcc 	andi	r3,r5,255
8020e8fc:	1812923a 	slli	r9,r3,8
8020e900:	02ffbff4 	movhi	r11,65279
8020e904:	02a02074 	movhi	r10,32897
8020e908:	48d2b03a 	or	r9,r9,r3
8020e90c:	4806943a 	slli	r3,r9,16
8020e910:	5affbfc4 	addi	r11,r11,-257
8020e914:	52a02004 	addi	r10,r10,-32640
8020e918:	48d2b03a 	or	r9,r9,r3
8020e91c:	20c00017 	ldw	r3,0(r4)
8020e920:	48c6f03a 	xor	r3,r9,r3
8020e924:	1acd883a 	add	r6,r3,r11
8020e928:	00c6303a 	nor	r3,zero,r3
8020e92c:	30c6703a 	and	r3,r6,r3
8020e930:	1a86703a 	and	r3,r3,r10
8020e934:	183fe01e 	bne	r3,zero,8020e8b8 <__reset+0xfa1ee8b8>
8020e938:	10bfff04 	addi	r2,r2,-4
8020e93c:	21000104 	addi	r4,r4,4
8020e940:	40bff636 	bltu	r8,r2,8020e91c <__reset+0xfa1ee91c>
8020e944:	003fdb06 	br	8020e8b4 <__reset+0xfa1ee8b4>
8020e948:	3005883a 	mov	r2,r6
8020e94c:	003fd706 	br	8020e8ac <__reset+0xfa1ee8ac>

8020e950 <memmove>:
8020e950:	2005883a 	mov	r2,r4
8020e954:	29000b2e 	bgeu	r5,r4,8020e984 <memmove+0x34>
8020e958:	298f883a 	add	r7,r5,r6
8020e95c:	21c0092e 	bgeu	r4,r7,8020e984 <memmove+0x34>
8020e960:	2187883a 	add	r3,r4,r6
8020e964:	198bc83a 	sub	r5,r3,r6
8020e968:	30004826 	beq	r6,zero,8020ea8c <memmove+0x13c>
8020e96c:	39ffffc4 	addi	r7,r7,-1
8020e970:	39000003 	ldbu	r4,0(r7)
8020e974:	18ffffc4 	addi	r3,r3,-1
8020e978:	19000005 	stb	r4,0(r3)
8020e97c:	28fffb1e 	bne	r5,r3,8020e96c <__reset+0xfa1ee96c>
8020e980:	f800283a 	ret
8020e984:	00c003c4 	movi	r3,15
8020e988:	1980412e 	bgeu	r3,r6,8020ea90 <memmove+0x140>
8020e98c:	2886b03a 	or	r3,r5,r2
8020e990:	18c000cc 	andi	r3,r3,3
8020e994:	1800401e 	bne	r3,zero,8020ea98 <memmove+0x148>
8020e998:	33fffc04 	addi	r15,r6,-16
8020e99c:	781ed13a 	srli	r15,r15,4
8020e9a0:	28c00104 	addi	r3,r5,4
8020e9a4:	13400104 	addi	r13,r2,4
8020e9a8:	781c913a 	slli	r14,r15,4
8020e9ac:	2b000204 	addi	r12,r5,8
8020e9b0:	12c00204 	addi	r11,r2,8
8020e9b4:	73800504 	addi	r14,r14,20
8020e9b8:	2a800304 	addi	r10,r5,12
8020e9bc:	12400304 	addi	r9,r2,12
8020e9c0:	2b9d883a 	add	r14,r5,r14
8020e9c4:	2811883a 	mov	r8,r5
8020e9c8:	100f883a 	mov	r7,r2
8020e9cc:	41000017 	ldw	r4,0(r8)
8020e9d0:	39c00404 	addi	r7,r7,16
8020e9d4:	18c00404 	addi	r3,r3,16
8020e9d8:	393ffc15 	stw	r4,-16(r7)
8020e9dc:	193ffc17 	ldw	r4,-16(r3)
8020e9e0:	6b400404 	addi	r13,r13,16
8020e9e4:	5ac00404 	addi	r11,r11,16
8020e9e8:	693ffc15 	stw	r4,-16(r13)
8020e9ec:	61000017 	ldw	r4,0(r12)
8020e9f0:	4a400404 	addi	r9,r9,16
8020e9f4:	42000404 	addi	r8,r8,16
8020e9f8:	593ffc15 	stw	r4,-16(r11)
8020e9fc:	51000017 	ldw	r4,0(r10)
8020ea00:	63000404 	addi	r12,r12,16
8020ea04:	52800404 	addi	r10,r10,16
8020ea08:	493ffc15 	stw	r4,-16(r9)
8020ea0c:	1bbfef1e 	bne	r3,r14,8020e9cc <__reset+0xfa1ee9cc>
8020ea10:	79000044 	addi	r4,r15,1
8020ea14:	2008913a 	slli	r4,r4,4
8020ea18:	328003cc 	andi	r10,r6,15
8020ea1c:	02c000c4 	movi	r11,3
8020ea20:	1107883a 	add	r3,r2,r4
8020ea24:	290b883a 	add	r5,r5,r4
8020ea28:	5a801e2e 	bgeu	r11,r10,8020eaa4 <memmove+0x154>
8020ea2c:	1813883a 	mov	r9,r3
8020ea30:	2811883a 	mov	r8,r5
8020ea34:	500f883a 	mov	r7,r10
8020ea38:	41000017 	ldw	r4,0(r8)
8020ea3c:	4a400104 	addi	r9,r9,4
8020ea40:	39ffff04 	addi	r7,r7,-4
8020ea44:	493fff15 	stw	r4,-4(r9)
8020ea48:	42000104 	addi	r8,r8,4
8020ea4c:	59fffa36 	bltu	r11,r7,8020ea38 <__reset+0xfa1eea38>
8020ea50:	513fff04 	addi	r4,r10,-4
8020ea54:	2008d0ba 	srli	r4,r4,2
8020ea58:	318000cc 	andi	r6,r6,3
8020ea5c:	21000044 	addi	r4,r4,1
8020ea60:	2109883a 	add	r4,r4,r4
8020ea64:	2109883a 	add	r4,r4,r4
8020ea68:	1907883a 	add	r3,r3,r4
8020ea6c:	290b883a 	add	r5,r5,r4
8020ea70:	30000b26 	beq	r6,zero,8020eaa0 <memmove+0x150>
8020ea74:	198d883a 	add	r6,r3,r6
8020ea78:	29c00003 	ldbu	r7,0(r5)
8020ea7c:	18c00044 	addi	r3,r3,1
8020ea80:	29400044 	addi	r5,r5,1
8020ea84:	19ffffc5 	stb	r7,-1(r3)
8020ea88:	19bffb1e 	bne	r3,r6,8020ea78 <__reset+0xfa1eea78>
8020ea8c:	f800283a 	ret
8020ea90:	1007883a 	mov	r3,r2
8020ea94:	003ff606 	br	8020ea70 <__reset+0xfa1eea70>
8020ea98:	1007883a 	mov	r3,r2
8020ea9c:	003ff506 	br	8020ea74 <__reset+0xfa1eea74>
8020eaa0:	f800283a 	ret
8020eaa4:	500d883a 	mov	r6,r10
8020eaa8:	003ff106 	br	8020ea70 <__reset+0xfa1eea70>

8020eaac <memset>:
8020eaac:	20c000cc 	andi	r3,r4,3
8020eab0:	2005883a 	mov	r2,r4
8020eab4:	18004426 	beq	r3,zero,8020ebc8 <memset+0x11c>
8020eab8:	31ffffc4 	addi	r7,r6,-1
8020eabc:	30004026 	beq	r6,zero,8020ebc0 <memset+0x114>
8020eac0:	2813883a 	mov	r9,r5
8020eac4:	200d883a 	mov	r6,r4
8020eac8:	2007883a 	mov	r3,r4
8020eacc:	00000406 	br	8020eae0 <memset+0x34>
8020ead0:	3a3fffc4 	addi	r8,r7,-1
8020ead4:	31800044 	addi	r6,r6,1
8020ead8:	38003926 	beq	r7,zero,8020ebc0 <memset+0x114>
8020eadc:	400f883a 	mov	r7,r8
8020eae0:	18c00044 	addi	r3,r3,1
8020eae4:	32400005 	stb	r9,0(r6)
8020eae8:	1a0000cc 	andi	r8,r3,3
8020eaec:	403ff81e 	bne	r8,zero,8020ead0 <__reset+0xfa1eead0>
8020eaf0:	010000c4 	movi	r4,3
8020eaf4:	21c02d2e 	bgeu	r4,r7,8020ebac <memset+0x100>
8020eaf8:	29003fcc 	andi	r4,r5,255
8020eafc:	200c923a 	slli	r6,r4,8
8020eb00:	3108b03a 	or	r4,r6,r4
8020eb04:	200c943a 	slli	r6,r4,16
8020eb08:	218cb03a 	or	r6,r4,r6
8020eb0c:	010003c4 	movi	r4,15
8020eb10:	21c0182e 	bgeu	r4,r7,8020eb74 <memset+0xc8>
8020eb14:	3b3ffc04 	addi	r12,r7,-16
8020eb18:	6018d13a 	srli	r12,r12,4
8020eb1c:	1a000104 	addi	r8,r3,4
8020eb20:	1ac00204 	addi	r11,r3,8
8020eb24:	6008913a 	slli	r4,r12,4
8020eb28:	1a800304 	addi	r10,r3,12
8020eb2c:	1813883a 	mov	r9,r3
8020eb30:	21000504 	addi	r4,r4,20
8020eb34:	1909883a 	add	r4,r3,r4
8020eb38:	49800015 	stw	r6,0(r9)
8020eb3c:	41800015 	stw	r6,0(r8)
8020eb40:	59800015 	stw	r6,0(r11)
8020eb44:	51800015 	stw	r6,0(r10)
8020eb48:	42000404 	addi	r8,r8,16
8020eb4c:	4a400404 	addi	r9,r9,16
8020eb50:	5ac00404 	addi	r11,r11,16
8020eb54:	52800404 	addi	r10,r10,16
8020eb58:	413ff71e 	bne	r8,r4,8020eb38 <__reset+0xfa1eeb38>
8020eb5c:	63000044 	addi	r12,r12,1
8020eb60:	6018913a 	slli	r12,r12,4
8020eb64:	39c003cc 	andi	r7,r7,15
8020eb68:	010000c4 	movi	r4,3
8020eb6c:	1b07883a 	add	r3,r3,r12
8020eb70:	21c00e2e 	bgeu	r4,r7,8020ebac <memset+0x100>
8020eb74:	1813883a 	mov	r9,r3
8020eb78:	3811883a 	mov	r8,r7
8020eb7c:	010000c4 	movi	r4,3
8020eb80:	49800015 	stw	r6,0(r9)
8020eb84:	423fff04 	addi	r8,r8,-4
8020eb88:	4a400104 	addi	r9,r9,4
8020eb8c:	223ffc36 	bltu	r4,r8,8020eb80 <__reset+0xfa1eeb80>
8020eb90:	393fff04 	addi	r4,r7,-4
8020eb94:	2008d0ba 	srli	r4,r4,2
8020eb98:	39c000cc 	andi	r7,r7,3
8020eb9c:	21000044 	addi	r4,r4,1
8020eba0:	2109883a 	add	r4,r4,r4
8020eba4:	2109883a 	add	r4,r4,r4
8020eba8:	1907883a 	add	r3,r3,r4
8020ebac:	38000526 	beq	r7,zero,8020ebc4 <memset+0x118>
8020ebb0:	19cf883a 	add	r7,r3,r7
8020ebb4:	19400005 	stb	r5,0(r3)
8020ebb8:	18c00044 	addi	r3,r3,1
8020ebbc:	38fffd1e 	bne	r7,r3,8020ebb4 <__reset+0xfa1eebb4>
8020ebc0:	f800283a 	ret
8020ebc4:	f800283a 	ret
8020ebc8:	2007883a 	mov	r3,r4
8020ebcc:	300f883a 	mov	r7,r6
8020ebd0:	003fc706 	br	8020eaf0 <__reset+0xfa1eeaf0>

8020ebd4 <_Balloc>:
8020ebd4:	20801317 	ldw	r2,76(r4)
8020ebd8:	defffc04 	addi	sp,sp,-16
8020ebdc:	dc400115 	stw	r17,4(sp)
8020ebe0:	dc000015 	stw	r16,0(sp)
8020ebe4:	dfc00315 	stw	ra,12(sp)
8020ebe8:	dc800215 	stw	r18,8(sp)
8020ebec:	2023883a 	mov	r17,r4
8020ebf0:	2821883a 	mov	r16,r5
8020ebf4:	10000f26 	beq	r2,zero,8020ec34 <_Balloc+0x60>
8020ebf8:	8407883a 	add	r3,r16,r16
8020ebfc:	18c7883a 	add	r3,r3,r3
8020ec00:	10c7883a 	add	r3,r2,r3
8020ec04:	18800017 	ldw	r2,0(r3)
8020ec08:	10001126 	beq	r2,zero,8020ec50 <_Balloc+0x7c>
8020ec0c:	11000017 	ldw	r4,0(r2)
8020ec10:	19000015 	stw	r4,0(r3)
8020ec14:	10000415 	stw	zero,16(r2)
8020ec18:	10000315 	stw	zero,12(r2)
8020ec1c:	dfc00317 	ldw	ra,12(sp)
8020ec20:	dc800217 	ldw	r18,8(sp)
8020ec24:	dc400117 	ldw	r17,4(sp)
8020ec28:	dc000017 	ldw	r16,0(sp)
8020ec2c:	dec00404 	addi	sp,sp,16
8020ec30:	f800283a 	ret
8020ec34:	01800844 	movi	r6,33
8020ec38:	01400104 	movi	r5,4
8020ec3c:	0212f1c0 	call	80212f1c <_calloc_r>
8020ec40:	88801315 	stw	r2,76(r17)
8020ec44:	103fec1e 	bne	r2,zero,8020ebf8 <__reset+0xfa1eebf8>
8020ec48:	0005883a 	mov	r2,zero
8020ec4c:	003ff306 	br	8020ec1c <__reset+0xfa1eec1c>
8020ec50:	01400044 	movi	r5,1
8020ec54:	2c24983a 	sll	r18,r5,r16
8020ec58:	8809883a 	mov	r4,r17
8020ec5c:	91800144 	addi	r6,r18,5
8020ec60:	318d883a 	add	r6,r6,r6
8020ec64:	318d883a 	add	r6,r6,r6
8020ec68:	0212f1c0 	call	80212f1c <_calloc_r>
8020ec6c:	103ff626 	beq	r2,zero,8020ec48 <__reset+0xfa1eec48>
8020ec70:	14000115 	stw	r16,4(r2)
8020ec74:	14800215 	stw	r18,8(r2)
8020ec78:	003fe606 	br	8020ec14 <__reset+0xfa1eec14>

8020ec7c <_Bfree>:
8020ec7c:	28000826 	beq	r5,zero,8020eca0 <_Bfree+0x24>
8020ec80:	28c00117 	ldw	r3,4(r5)
8020ec84:	20801317 	ldw	r2,76(r4)
8020ec88:	18c7883a 	add	r3,r3,r3
8020ec8c:	18c7883a 	add	r3,r3,r3
8020ec90:	10c5883a 	add	r2,r2,r3
8020ec94:	10c00017 	ldw	r3,0(r2)
8020ec98:	28c00015 	stw	r3,0(r5)
8020ec9c:	11400015 	stw	r5,0(r2)
8020eca0:	f800283a 	ret

8020eca4 <__multadd>:
8020eca4:	defffa04 	addi	sp,sp,-24
8020eca8:	dc800315 	stw	r18,12(sp)
8020ecac:	dc400215 	stw	r17,8(sp)
8020ecb0:	dc000115 	stw	r16,4(sp)
8020ecb4:	2823883a 	mov	r17,r5
8020ecb8:	2c000417 	ldw	r16,16(r5)
8020ecbc:	dfc00515 	stw	ra,20(sp)
8020ecc0:	dcc00415 	stw	r19,16(sp)
8020ecc4:	2025883a 	mov	r18,r4
8020ecc8:	29400504 	addi	r5,r5,20
8020eccc:	0011883a 	mov	r8,zero
8020ecd0:	28c00017 	ldw	r3,0(r5)
8020ecd4:	29400104 	addi	r5,r5,4
8020ecd8:	42000044 	addi	r8,r8,1
8020ecdc:	18bfffcc 	andi	r2,r3,65535
8020ece0:	1185383a 	mul	r2,r2,r6
8020ece4:	1806d43a 	srli	r3,r3,16
8020ece8:	11cf883a 	add	r7,r2,r7
8020ecec:	3808d43a 	srli	r4,r7,16
8020ecf0:	1987383a 	mul	r3,r3,r6
8020ecf4:	38bfffcc 	andi	r2,r7,65535
8020ecf8:	1907883a 	add	r3,r3,r4
8020ecfc:	1808943a 	slli	r4,r3,16
8020ed00:	180ed43a 	srli	r7,r3,16
8020ed04:	2085883a 	add	r2,r4,r2
8020ed08:	28bfff15 	stw	r2,-4(r5)
8020ed0c:	443ff016 	blt	r8,r16,8020ecd0 <__reset+0xfa1eecd0>
8020ed10:	38000926 	beq	r7,zero,8020ed38 <__multadd+0x94>
8020ed14:	88800217 	ldw	r2,8(r17)
8020ed18:	80800f0e 	bge	r16,r2,8020ed58 <__multadd+0xb4>
8020ed1c:	80800144 	addi	r2,r16,5
8020ed20:	1085883a 	add	r2,r2,r2
8020ed24:	1085883a 	add	r2,r2,r2
8020ed28:	8885883a 	add	r2,r17,r2
8020ed2c:	11c00015 	stw	r7,0(r2)
8020ed30:	84000044 	addi	r16,r16,1
8020ed34:	8c000415 	stw	r16,16(r17)
8020ed38:	8805883a 	mov	r2,r17
8020ed3c:	dfc00517 	ldw	ra,20(sp)
8020ed40:	dcc00417 	ldw	r19,16(sp)
8020ed44:	dc800317 	ldw	r18,12(sp)
8020ed48:	dc400217 	ldw	r17,8(sp)
8020ed4c:	dc000117 	ldw	r16,4(sp)
8020ed50:	dec00604 	addi	sp,sp,24
8020ed54:	f800283a 	ret
8020ed58:	89400117 	ldw	r5,4(r17)
8020ed5c:	9009883a 	mov	r4,r18
8020ed60:	d9c00015 	stw	r7,0(sp)
8020ed64:	29400044 	addi	r5,r5,1
8020ed68:	020ebd40 	call	8020ebd4 <_Balloc>
8020ed6c:	89800417 	ldw	r6,16(r17)
8020ed70:	89400304 	addi	r5,r17,12
8020ed74:	11000304 	addi	r4,r2,12
8020ed78:	31800084 	addi	r6,r6,2
8020ed7c:	318d883a 	add	r6,r6,r6
8020ed80:	318d883a 	add	r6,r6,r6
8020ed84:	1027883a 	mov	r19,r2
8020ed88:	0206aa00 	call	80206aa0 <memcpy>
8020ed8c:	d9c00017 	ldw	r7,0(sp)
8020ed90:	88000a26 	beq	r17,zero,8020edbc <__multadd+0x118>
8020ed94:	88c00117 	ldw	r3,4(r17)
8020ed98:	90801317 	ldw	r2,76(r18)
8020ed9c:	18c7883a 	add	r3,r3,r3
8020eda0:	18c7883a 	add	r3,r3,r3
8020eda4:	10c5883a 	add	r2,r2,r3
8020eda8:	10c00017 	ldw	r3,0(r2)
8020edac:	88c00015 	stw	r3,0(r17)
8020edb0:	14400015 	stw	r17,0(r2)
8020edb4:	9823883a 	mov	r17,r19
8020edb8:	003fd806 	br	8020ed1c <__reset+0xfa1eed1c>
8020edbc:	9823883a 	mov	r17,r19
8020edc0:	003fd606 	br	8020ed1c <__reset+0xfa1eed1c>

8020edc4 <__s2b>:
8020edc4:	defff904 	addi	sp,sp,-28
8020edc8:	dc400115 	stw	r17,4(sp)
8020edcc:	dc000015 	stw	r16,0(sp)
8020edd0:	2023883a 	mov	r17,r4
8020edd4:	2821883a 	mov	r16,r5
8020edd8:	39000204 	addi	r4,r7,8
8020eddc:	01400244 	movi	r5,9
8020ede0:	dcc00315 	stw	r19,12(sp)
8020ede4:	dc800215 	stw	r18,8(sp)
8020ede8:	dfc00615 	stw	ra,24(sp)
8020edec:	dd400515 	stw	r21,20(sp)
8020edf0:	dd000415 	stw	r20,16(sp)
8020edf4:	3825883a 	mov	r18,r7
8020edf8:	3027883a 	mov	r19,r6
8020edfc:	021424c0 	call	8021424c <__divsi3>
8020ee00:	00c00044 	movi	r3,1
8020ee04:	000b883a 	mov	r5,zero
8020ee08:	1880030e 	bge	r3,r2,8020ee18 <__s2b+0x54>
8020ee0c:	18c7883a 	add	r3,r3,r3
8020ee10:	29400044 	addi	r5,r5,1
8020ee14:	18bffd16 	blt	r3,r2,8020ee0c <__reset+0xfa1eee0c>
8020ee18:	8809883a 	mov	r4,r17
8020ee1c:	020ebd40 	call	8020ebd4 <_Balloc>
8020ee20:	d8c00717 	ldw	r3,28(sp)
8020ee24:	10c00515 	stw	r3,20(r2)
8020ee28:	00c00044 	movi	r3,1
8020ee2c:	10c00415 	stw	r3,16(r2)
8020ee30:	00c00244 	movi	r3,9
8020ee34:	1cc0210e 	bge	r3,r19,8020eebc <__s2b+0xf8>
8020ee38:	80eb883a 	add	r21,r16,r3
8020ee3c:	a829883a 	mov	r20,r21
8020ee40:	84e1883a 	add	r16,r16,r19
8020ee44:	a1c00007 	ldb	r7,0(r20)
8020ee48:	01800284 	movi	r6,10
8020ee4c:	a5000044 	addi	r20,r20,1
8020ee50:	100b883a 	mov	r5,r2
8020ee54:	39fff404 	addi	r7,r7,-48
8020ee58:	8809883a 	mov	r4,r17
8020ee5c:	020eca40 	call	8020eca4 <__multadd>
8020ee60:	a43ff81e 	bne	r20,r16,8020ee44 <__reset+0xfa1eee44>
8020ee64:	ace1883a 	add	r16,r21,r19
8020ee68:	843ffe04 	addi	r16,r16,-8
8020ee6c:	9c800a0e 	bge	r19,r18,8020ee98 <__s2b+0xd4>
8020ee70:	94e5c83a 	sub	r18,r18,r19
8020ee74:	84a5883a 	add	r18,r16,r18
8020ee78:	81c00007 	ldb	r7,0(r16)
8020ee7c:	01800284 	movi	r6,10
8020ee80:	84000044 	addi	r16,r16,1
8020ee84:	100b883a 	mov	r5,r2
8020ee88:	39fff404 	addi	r7,r7,-48
8020ee8c:	8809883a 	mov	r4,r17
8020ee90:	020eca40 	call	8020eca4 <__multadd>
8020ee94:	84bff81e 	bne	r16,r18,8020ee78 <__reset+0xfa1eee78>
8020ee98:	dfc00617 	ldw	ra,24(sp)
8020ee9c:	dd400517 	ldw	r21,20(sp)
8020eea0:	dd000417 	ldw	r20,16(sp)
8020eea4:	dcc00317 	ldw	r19,12(sp)
8020eea8:	dc800217 	ldw	r18,8(sp)
8020eeac:	dc400117 	ldw	r17,4(sp)
8020eeb0:	dc000017 	ldw	r16,0(sp)
8020eeb4:	dec00704 	addi	sp,sp,28
8020eeb8:	f800283a 	ret
8020eebc:	84000284 	addi	r16,r16,10
8020eec0:	1827883a 	mov	r19,r3
8020eec4:	003fe906 	br	8020ee6c <__reset+0xfa1eee6c>

8020eec8 <__hi0bits>:
8020eec8:	20bfffec 	andhi	r2,r4,65535
8020eecc:	1000141e 	bne	r2,zero,8020ef20 <__hi0bits+0x58>
8020eed0:	2008943a 	slli	r4,r4,16
8020eed4:	00800404 	movi	r2,16
8020eed8:	20ffc02c 	andhi	r3,r4,65280
8020eedc:	1800021e 	bne	r3,zero,8020eee8 <__hi0bits+0x20>
8020eee0:	2008923a 	slli	r4,r4,8
8020eee4:	10800204 	addi	r2,r2,8
8020eee8:	20fc002c 	andhi	r3,r4,61440
8020eeec:	1800021e 	bne	r3,zero,8020eef8 <__hi0bits+0x30>
8020eef0:	2008913a 	slli	r4,r4,4
8020eef4:	10800104 	addi	r2,r2,4
8020eef8:	20f0002c 	andhi	r3,r4,49152
8020eefc:	1800031e 	bne	r3,zero,8020ef0c <__hi0bits+0x44>
8020ef00:	2109883a 	add	r4,r4,r4
8020ef04:	10800084 	addi	r2,r2,2
8020ef08:	2109883a 	add	r4,r4,r4
8020ef0c:	20000316 	blt	r4,zero,8020ef1c <__hi0bits+0x54>
8020ef10:	2110002c 	andhi	r4,r4,16384
8020ef14:	2000041e 	bne	r4,zero,8020ef28 <__hi0bits+0x60>
8020ef18:	00800804 	movi	r2,32
8020ef1c:	f800283a 	ret
8020ef20:	0005883a 	mov	r2,zero
8020ef24:	003fec06 	br	8020eed8 <__reset+0xfa1eeed8>
8020ef28:	10800044 	addi	r2,r2,1
8020ef2c:	f800283a 	ret

8020ef30 <__lo0bits>:
8020ef30:	20c00017 	ldw	r3,0(r4)
8020ef34:	188001cc 	andi	r2,r3,7
8020ef38:	10000826 	beq	r2,zero,8020ef5c <__lo0bits+0x2c>
8020ef3c:	1880004c 	andi	r2,r3,1
8020ef40:	1000211e 	bne	r2,zero,8020efc8 <__lo0bits+0x98>
8020ef44:	1880008c 	andi	r2,r3,2
8020ef48:	1000211e 	bne	r2,zero,8020efd0 <__lo0bits+0xa0>
8020ef4c:	1806d0ba 	srli	r3,r3,2
8020ef50:	00800084 	movi	r2,2
8020ef54:	20c00015 	stw	r3,0(r4)
8020ef58:	f800283a 	ret
8020ef5c:	18bfffcc 	andi	r2,r3,65535
8020ef60:	10001326 	beq	r2,zero,8020efb0 <__lo0bits+0x80>
8020ef64:	0005883a 	mov	r2,zero
8020ef68:	19403fcc 	andi	r5,r3,255
8020ef6c:	2800021e 	bne	r5,zero,8020ef78 <__lo0bits+0x48>
8020ef70:	1806d23a 	srli	r3,r3,8
8020ef74:	10800204 	addi	r2,r2,8
8020ef78:	194003cc 	andi	r5,r3,15
8020ef7c:	2800021e 	bne	r5,zero,8020ef88 <__lo0bits+0x58>
8020ef80:	1806d13a 	srli	r3,r3,4
8020ef84:	10800104 	addi	r2,r2,4
8020ef88:	194000cc 	andi	r5,r3,3
8020ef8c:	2800021e 	bne	r5,zero,8020ef98 <__lo0bits+0x68>
8020ef90:	1806d0ba 	srli	r3,r3,2
8020ef94:	10800084 	addi	r2,r2,2
8020ef98:	1940004c 	andi	r5,r3,1
8020ef9c:	2800081e 	bne	r5,zero,8020efc0 <__lo0bits+0x90>
8020efa0:	1806d07a 	srli	r3,r3,1
8020efa4:	1800051e 	bne	r3,zero,8020efbc <__lo0bits+0x8c>
8020efa8:	00800804 	movi	r2,32
8020efac:	f800283a 	ret
8020efb0:	1806d43a 	srli	r3,r3,16
8020efb4:	00800404 	movi	r2,16
8020efb8:	003feb06 	br	8020ef68 <__reset+0xfa1eef68>
8020efbc:	10800044 	addi	r2,r2,1
8020efc0:	20c00015 	stw	r3,0(r4)
8020efc4:	f800283a 	ret
8020efc8:	0005883a 	mov	r2,zero
8020efcc:	f800283a 	ret
8020efd0:	1806d07a 	srli	r3,r3,1
8020efd4:	00800044 	movi	r2,1
8020efd8:	20c00015 	stw	r3,0(r4)
8020efdc:	f800283a 	ret

8020efe0 <__i2b>:
8020efe0:	defffd04 	addi	sp,sp,-12
8020efe4:	dc000015 	stw	r16,0(sp)
8020efe8:	04000044 	movi	r16,1
8020efec:	dc400115 	stw	r17,4(sp)
8020eff0:	2823883a 	mov	r17,r5
8020eff4:	800b883a 	mov	r5,r16
8020eff8:	dfc00215 	stw	ra,8(sp)
8020effc:	020ebd40 	call	8020ebd4 <_Balloc>
8020f000:	14400515 	stw	r17,20(r2)
8020f004:	14000415 	stw	r16,16(r2)
8020f008:	dfc00217 	ldw	ra,8(sp)
8020f00c:	dc400117 	ldw	r17,4(sp)
8020f010:	dc000017 	ldw	r16,0(sp)
8020f014:	dec00304 	addi	sp,sp,12
8020f018:	f800283a 	ret

8020f01c <__multiply>:
8020f01c:	defffa04 	addi	sp,sp,-24
8020f020:	dcc00315 	stw	r19,12(sp)
8020f024:	dc800215 	stw	r18,8(sp)
8020f028:	34c00417 	ldw	r19,16(r6)
8020f02c:	2c800417 	ldw	r18,16(r5)
8020f030:	dd000415 	stw	r20,16(sp)
8020f034:	dc400115 	stw	r17,4(sp)
8020f038:	dfc00515 	stw	ra,20(sp)
8020f03c:	dc000015 	stw	r16,0(sp)
8020f040:	2829883a 	mov	r20,r5
8020f044:	3023883a 	mov	r17,r6
8020f048:	94c0050e 	bge	r18,r19,8020f060 <__multiply+0x44>
8020f04c:	9007883a 	mov	r3,r18
8020f050:	3029883a 	mov	r20,r6
8020f054:	9825883a 	mov	r18,r19
8020f058:	2823883a 	mov	r17,r5
8020f05c:	1827883a 	mov	r19,r3
8020f060:	a0800217 	ldw	r2,8(r20)
8020f064:	94e1883a 	add	r16,r18,r19
8020f068:	a1400117 	ldw	r5,4(r20)
8020f06c:	1400010e 	bge	r2,r16,8020f074 <__multiply+0x58>
8020f070:	29400044 	addi	r5,r5,1
8020f074:	020ebd40 	call	8020ebd4 <_Balloc>
8020f078:	8415883a 	add	r10,r16,r16
8020f07c:	12c00504 	addi	r11,r2,20
8020f080:	5295883a 	add	r10,r10,r10
8020f084:	5a95883a 	add	r10,r11,r10
8020f088:	5807883a 	mov	r3,r11
8020f08c:	5a80032e 	bgeu	r11,r10,8020f09c <__multiply+0x80>
8020f090:	18000015 	stw	zero,0(r3)
8020f094:	18c00104 	addi	r3,r3,4
8020f098:	1abffd36 	bltu	r3,r10,8020f090 <__reset+0xfa1ef090>
8020f09c:	9ce7883a 	add	r19,r19,r19
8020f0a0:	94a5883a 	add	r18,r18,r18
8020f0a4:	89800504 	addi	r6,r17,20
8020f0a8:	9ce7883a 	add	r19,r19,r19
8020f0ac:	a3400504 	addi	r13,r20,20
8020f0b0:	94a5883a 	add	r18,r18,r18
8020f0b4:	34d9883a 	add	r12,r6,r19
8020f0b8:	6c93883a 	add	r9,r13,r18
8020f0bc:	3300422e 	bgeu	r6,r12,8020f1c8 <__multiply+0x1ac>
8020f0c0:	37c00017 	ldw	ra,0(r6)
8020f0c4:	fbffffcc 	andi	r15,ra,65535
8020f0c8:	78001b26 	beq	r15,zero,8020f138 <__multiply+0x11c>
8020f0cc:	5811883a 	mov	r8,r11
8020f0d0:	681d883a 	mov	r14,r13
8020f0d4:	000f883a 	mov	r7,zero
8020f0d8:	71000017 	ldw	r4,0(r14)
8020f0dc:	40c00017 	ldw	r3,0(r8)
8020f0e0:	73800104 	addi	r14,r14,4
8020f0e4:	217fffcc 	andi	r5,r4,65535
8020f0e8:	2bcb383a 	mul	r5,r5,r15
8020f0ec:	2008d43a 	srli	r4,r4,16
8020f0f0:	1c7fffcc 	andi	r17,r3,65535
8020f0f4:	2c4b883a 	add	r5,r5,r17
8020f0f8:	29cb883a 	add	r5,r5,r7
8020f0fc:	23c9383a 	mul	r4,r4,r15
8020f100:	1806d43a 	srli	r3,r3,16
8020f104:	280ed43a 	srli	r7,r5,16
8020f108:	297fffcc 	andi	r5,r5,65535
8020f10c:	20c7883a 	add	r3,r4,r3
8020f110:	19c7883a 	add	r3,r3,r7
8020f114:	1808943a 	slli	r4,r3,16
8020f118:	4023883a 	mov	r17,r8
8020f11c:	180ed43a 	srli	r7,r3,16
8020f120:	214ab03a 	or	r5,r4,r5
8020f124:	41400015 	stw	r5,0(r8)
8020f128:	42000104 	addi	r8,r8,4
8020f12c:	727fea36 	bltu	r14,r9,8020f0d8 <__reset+0xfa1ef0d8>
8020f130:	89c00115 	stw	r7,4(r17)
8020f134:	37c00017 	ldw	ra,0(r6)
8020f138:	f83ed43a 	srli	ra,ra,16
8020f13c:	f8001f26 	beq	ra,zero,8020f1bc <__multiply+0x1a0>
8020f140:	58c00017 	ldw	r3,0(r11)
8020f144:	681d883a 	mov	r14,r13
8020f148:	581f883a 	mov	r15,r11
8020f14c:	1811883a 	mov	r8,r3
8020f150:	5825883a 	mov	r18,r11
8020f154:	000f883a 	mov	r7,zero
8020f158:	00000106 	br	8020f160 <__multiply+0x144>
8020f15c:	8825883a 	mov	r18,r17
8020f160:	7140000b 	ldhu	r5,0(r14)
8020f164:	4010d43a 	srli	r8,r8,16
8020f168:	193fffcc 	andi	r4,r3,65535
8020f16c:	2fcb383a 	mul	r5,r5,ra
8020f170:	7bc00104 	addi	r15,r15,4
8020f174:	73800104 	addi	r14,r14,4
8020f178:	2a0b883a 	add	r5,r5,r8
8020f17c:	29cb883a 	add	r5,r5,r7
8020f180:	2806943a 	slli	r3,r5,16
8020f184:	94400104 	addi	r17,r18,4
8020f188:	280ad43a 	srli	r5,r5,16
8020f18c:	1908b03a 	or	r4,r3,r4
8020f190:	793fff15 	stw	r4,-4(r15)
8020f194:	70ffff17 	ldw	r3,-4(r14)
8020f198:	8a000017 	ldw	r8,0(r17)
8020f19c:	1806d43a 	srli	r3,r3,16
8020f1a0:	413fffcc 	andi	r4,r8,65535
8020f1a4:	1fc7383a 	mul	r3,r3,ra
8020f1a8:	1907883a 	add	r3,r3,r4
8020f1ac:	1947883a 	add	r3,r3,r5
8020f1b0:	180ed43a 	srli	r7,r3,16
8020f1b4:	727fe936 	bltu	r14,r9,8020f15c <__reset+0xfa1ef15c>
8020f1b8:	90c00115 	stw	r3,4(r18)
8020f1bc:	31800104 	addi	r6,r6,4
8020f1c0:	5ac00104 	addi	r11,r11,4
8020f1c4:	333fbe36 	bltu	r6,r12,8020f0c0 <__reset+0xfa1ef0c0>
8020f1c8:	0400090e 	bge	zero,r16,8020f1f0 <__multiply+0x1d4>
8020f1cc:	50ffff17 	ldw	r3,-4(r10)
8020f1d0:	52bfff04 	addi	r10,r10,-4
8020f1d4:	18000326 	beq	r3,zero,8020f1e4 <__multiply+0x1c8>
8020f1d8:	00000506 	br	8020f1f0 <__multiply+0x1d4>
8020f1dc:	50c00017 	ldw	r3,0(r10)
8020f1e0:	1800031e 	bne	r3,zero,8020f1f0 <__multiply+0x1d4>
8020f1e4:	843fffc4 	addi	r16,r16,-1
8020f1e8:	52bfff04 	addi	r10,r10,-4
8020f1ec:	803ffb1e 	bne	r16,zero,8020f1dc <__reset+0xfa1ef1dc>
8020f1f0:	14000415 	stw	r16,16(r2)
8020f1f4:	dfc00517 	ldw	ra,20(sp)
8020f1f8:	dd000417 	ldw	r20,16(sp)
8020f1fc:	dcc00317 	ldw	r19,12(sp)
8020f200:	dc800217 	ldw	r18,8(sp)
8020f204:	dc400117 	ldw	r17,4(sp)
8020f208:	dc000017 	ldw	r16,0(sp)
8020f20c:	dec00604 	addi	sp,sp,24
8020f210:	f800283a 	ret

8020f214 <__pow5mult>:
8020f214:	defffa04 	addi	sp,sp,-24
8020f218:	dcc00315 	stw	r19,12(sp)
8020f21c:	dc000015 	stw	r16,0(sp)
8020f220:	dfc00515 	stw	ra,20(sp)
8020f224:	dd000415 	stw	r20,16(sp)
8020f228:	dc800215 	stw	r18,8(sp)
8020f22c:	dc400115 	stw	r17,4(sp)
8020f230:	308000cc 	andi	r2,r6,3
8020f234:	3021883a 	mov	r16,r6
8020f238:	2027883a 	mov	r19,r4
8020f23c:	10002f1e 	bne	r2,zero,8020f2fc <__pow5mult+0xe8>
8020f240:	2825883a 	mov	r18,r5
8020f244:	8021d0ba 	srai	r16,r16,2
8020f248:	80001a26 	beq	r16,zero,8020f2b4 <__pow5mult+0xa0>
8020f24c:	9c401217 	ldw	r17,72(r19)
8020f250:	8800061e 	bne	r17,zero,8020f26c <__pow5mult+0x58>
8020f254:	00003406 	br	8020f328 <__pow5mult+0x114>
8020f258:	8021d07a 	srai	r16,r16,1
8020f25c:	80001526 	beq	r16,zero,8020f2b4 <__pow5mult+0xa0>
8020f260:	88800017 	ldw	r2,0(r17)
8020f264:	10001c26 	beq	r2,zero,8020f2d8 <__pow5mult+0xc4>
8020f268:	1023883a 	mov	r17,r2
8020f26c:	8080004c 	andi	r2,r16,1
8020f270:	103ff926 	beq	r2,zero,8020f258 <__reset+0xfa1ef258>
8020f274:	880d883a 	mov	r6,r17
8020f278:	900b883a 	mov	r5,r18
8020f27c:	9809883a 	mov	r4,r19
8020f280:	020f01c0 	call	8020f01c <__multiply>
8020f284:	90001b26 	beq	r18,zero,8020f2f4 <__pow5mult+0xe0>
8020f288:	91000117 	ldw	r4,4(r18)
8020f28c:	98c01317 	ldw	r3,76(r19)
8020f290:	8021d07a 	srai	r16,r16,1
8020f294:	2109883a 	add	r4,r4,r4
8020f298:	2109883a 	add	r4,r4,r4
8020f29c:	1907883a 	add	r3,r3,r4
8020f2a0:	19000017 	ldw	r4,0(r3)
8020f2a4:	91000015 	stw	r4,0(r18)
8020f2a8:	1c800015 	stw	r18,0(r3)
8020f2ac:	1025883a 	mov	r18,r2
8020f2b0:	803feb1e 	bne	r16,zero,8020f260 <__reset+0xfa1ef260>
8020f2b4:	9005883a 	mov	r2,r18
8020f2b8:	dfc00517 	ldw	ra,20(sp)
8020f2bc:	dd000417 	ldw	r20,16(sp)
8020f2c0:	dcc00317 	ldw	r19,12(sp)
8020f2c4:	dc800217 	ldw	r18,8(sp)
8020f2c8:	dc400117 	ldw	r17,4(sp)
8020f2cc:	dc000017 	ldw	r16,0(sp)
8020f2d0:	dec00604 	addi	sp,sp,24
8020f2d4:	f800283a 	ret
8020f2d8:	880d883a 	mov	r6,r17
8020f2dc:	880b883a 	mov	r5,r17
8020f2e0:	9809883a 	mov	r4,r19
8020f2e4:	020f01c0 	call	8020f01c <__multiply>
8020f2e8:	88800015 	stw	r2,0(r17)
8020f2ec:	10000015 	stw	zero,0(r2)
8020f2f0:	003fdd06 	br	8020f268 <__reset+0xfa1ef268>
8020f2f4:	1025883a 	mov	r18,r2
8020f2f8:	003fd706 	br	8020f258 <__reset+0xfa1ef258>
8020f2fc:	10bfffc4 	addi	r2,r2,-1
8020f300:	1085883a 	add	r2,r2,r2
8020f304:	00e008b4 	movhi	r3,32802
8020f308:	18f65f04 	addi	r3,r3,-9860
8020f30c:	1085883a 	add	r2,r2,r2
8020f310:	1885883a 	add	r2,r3,r2
8020f314:	11800017 	ldw	r6,0(r2)
8020f318:	000f883a 	mov	r7,zero
8020f31c:	020eca40 	call	8020eca4 <__multadd>
8020f320:	1025883a 	mov	r18,r2
8020f324:	003fc706 	br	8020f244 <__reset+0xfa1ef244>
8020f328:	05000044 	movi	r20,1
8020f32c:	a00b883a 	mov	r5,r20
8020f330:	9809883a 	mov	r4,r19
8020f334:	020ebd40 	call	8020ebd4 <_Balloc>
8020f338:	1023883a 	mov	r17,r2
8020f33c:	00809c44 	movi	r2,625
8020f340:	88800515 	stw	r2,20(r17)
8020f344:	8d000415 	stw	r20,16(r17)
8020f348:	9c401215 	stw	r17,72(r19)
8020f34c:	88000015 	stw	zero,0(r17)
8020f350:	003fc606 	br	8020f26c <__reset+0xfa1ef26c>

8020f354 <__lshift>:
8020f354:	defff904 	addi	sp,sp,-28
8020f358:	dd400515 	stw	r21,20(sp)
8020f35c:	dcc00315 	stw	r19,12(sp)
8020f360:	302bd17a 	srai	r21,r6,5
8020f364:	2cc00417 	ldw	r19,16(r5)
8020f368:	28800217 	ldw	r2,8(r5)
8020f36c:	dd000415 	stw	r20,16(sp)
8020f370:	ace7883a 	add	r19,r21,r19
8020f374:	dc800215 	stw	r18,8(sp)
8020f378:	dc400115 	stw	r17,4(sp)
8020f37c:	dc000015 	stw	r16,0(sp)
8020f380:	dfc00615 	stw	ra,24(sp)
8020f384:	9c000044 	addi	r16,r19,1
8020f388:	2823883a 	mov	r17,r5
8020f38c:	3029883a 	mov	r20,r6
8020f390:	2025883a 	mov	r18,r4
8020f394:	29400117 	ldw	r5,4(r5)
8020f398:	1400030e 	bge	r2,r16,8020f3a8 <__lshift+0x54>
8020f39c:	1085883a 	add	r2,r2,r2
8020f3a0:	29400044 	addi	r5,r5,1
8020f3a4:	143ffd16 	blt	r2,r16,8020f39c <__reset+0xfa1ef39c>
8020f3a8:	9009883a 	mov	r4,r18
8020f3ac:	020ebd40 	call	8020ebd4 <_Balloc>
8020f3b0:	10c00504 	addi	r3,r2,20
8020f3b4:	0540070e 	bge	zero,r21,8020f3d4 <__lshift+0x80>
8020f3b8:	ad6b883a 	add	r21,r21,r21
8020f3bc:	ad6b883a 	add	r21,r21,r21
8020f3c0:	1809883a 	mov	r4,r3
8020f3c4:	1d47883a 	add	r3,r3,r21
8020f3c8:	20000015 	stw	zero,0(r4)
8020f3cc:	21000104 	addi	r4,r4,4
8020f3d0:	193ffd1e 	bne	r3,r4,8020f3c8 <__reset+0xfa1ef3c8>
8020f3d4:	8a000417 	ldw	r8,16(r17)
8020f3d8:	89000504 	addi	r4,r17,20
8020f3dc:	a18007cc 	andi	r6,r20,31
8020f3e0:	4211883a 	add	r8,r8,r8
8020f3e4:	4211883a 	add	r8,r8,r8
8020f3e8:	2211883a 	add	r8,r4,r8
8020f3ec:	30002326 	beq	r6,zero,8020f47c <__lshift+0x128>
8020f3f0:	02400804 	movi	r9,32
8020f3f4:	4993c83a 	sub	r9,r9,r6
8020f3f8:	000b883a 	mov	r5,zero
8020f3fc:	21c00017 	ldw	r7,0(r4)
8020f400:	1815883a 	mov	r10,r3
8020f404:	18c00104 	addi	r3,r3,4
8020f408:	398e983a 	sll	r7,r7,r6
8020f40c:	21000104 	addi	r4,r4,4
8020f410:	394ab03a 	or	r5,r7,r5
8020f414:	197fff15 	stw	r5,-4(r3)
8020f418:	217fff17 	ldw	r5,-4(r4)
8020f41c:	2a4ad83a 	srl	r5,r5,r9
8020f420:	223ff636 	bltu	r4,r8,8020f3fc <__reset+0xfa1ef3fc>
8020f424:	51400115 	stw	r5,4(r10)
8020f428:	28001a1e 	bne	r5,zero,8020f494 <__lshift+0x140>
8020f42c:	843fffc4 	addi	r16,r16,-1
8020f430:	14000415 	stw	r16,16(r2)
8020f434:	88000826 	beq	r17,zero,8020f458 <__lshift+0x104>
8020f438:	89000117 	ldw	r4,4(r17)
8020f43c:	90c01317 	ldw	r3,76(r18)
8020f440:	2109883a 	add	r4,r4,r4
8020f444:	2109883a 	add	r4,r4,r4
8020f448:	1907883a 	add	r3,r3,r4
8020f44c:	19000017 	ldw	r4,0(r3)
8020f450:	89000015 	stw	r4,0(r17)
8020f454:	1c400015 	stw	r17,0(r3)
8020f458:	dfc00617 	ldw	ra,24(sp)
8020f45c:	dd400517 	ldw	r21,20(sp)
8020f460:	dd000417 	ldw	r20,16(sp)
8020f464:	dcc00317 	ldw	r19,12(sp)
8020f468:	dc800217 	ldw	r18,8(sp)
8020f46c:	dc400117 	ldw	r17,4(sp)
8020f470:	dc000017 	ldw	r16,0(sp)
8020f474:	dec00704 	addi	sp,sp,28
8020f478:	f800283a 	ret
8020f47c:	21400017 	ldw	r5,0(r4)
8020f480:	18c00104 	addi	r3,r3,4
8020f484:	21000104 	addi	r4,r4,4
8020f488:	197fff15 	stw	r5,-4(r3)
8020f48c:	223ffb36 	bltu	r4,r8,8020f47c <__reset+0xfa1ef47c>
8020f490:	003fe606 	br	8020f42c <__reset+0xfa1ef42c>
8020f494:	9c000084 	addi	r16,r19,2
8020f498:	003fe406 	br	8020f42c <__reset+0xfa1ef42c>

8020f49c <__mcmp>:
8020f49c:	20800417 	ldw	r2,16(r4)
8020f4a0:	28c00417 	ldw	r3,16(r5)
8020f4a4:	10c5c83a 	sub	r2,r2,r3
8020f4a8:	1000111e 	bne	r2,zero,8020f4f0 <__mcmp+0x54>
8020f4ac:	18c7883a 	add	r3,r3,r3
8020f4b0:	18c7883a 	add	r3,r3,r3
8020f4b4:	21000504 	addi	r4,r4,20
8020f4b8:	29400504 	addi	r5,r5,20
8020f4bc:	20c5883a 	add	r2,r4,r3
8020f4c0:	28cb883a 	add	r5,r5,r3
8020f4c4:	00000106 	br	8020f4cc <__mcmp+0x30>
8020f4c8:	20800a2e 	bgeu	r4,r2,8020f4f4 <__mcmp+0x58>
8020f4cc:	10bfff04 	addi	r2,r2,-4
8020f4d0:	297fff04 	addi	r5,r5,-4
8020f4d4:	11800017 	ldw	r6,0(r2)
8020f4d8:	28c00017 	ldw	r3,0(r5)
8020f4dc:	30fffa26 	beq	r6,r3,8020f4c8 <__reset+0xfa1ef4c8>
8020f4e0:	30c00236 	bltu	r6,r3,8020f4ec <__mcmp+0x50>
8020f4e4:	00800044 	movi	r2,1
8020f4e8:	f800283a 	ret
8020f4ec:	00bfffc4 	movi	r2,-1
8020f4f0:	f800283a 	ret
8020f4f4:	0005883a 	mov	r2,zero
8020f4f8:	f800283a 	ret

8020f4fc <__mdiff>:
8020f4fc:	28c00417 	ldw	r3,16(r5)
8020f500:	30800417 	ldw	r2,16(r6)
8020f504:	defffa04 	addi	sp,sp,-24
8020f508:	dcc00315 	stw	r19,12(sp)
8020f50c:	dc800215 	stw	r18,8(sp)
8020f510:	dfc00515 	stw	ra,20(sp)
8020f514:	dd000415 	stw	r20,16(sp)
8020f518:	dc400115 	stw	r17,4(sp)
8020f51c:	dc000015 	stw	r16,0(sp)
8020f520:	1887c83a 	sub	r3,r3,r2
8020f524:	2825883a 	mov	r18,r5
8020f528:	3027883a 	mov	r19,r6
8020f52c:	1800141e 	bne	r3,zero,8020f580 <__mdiff+0x84>
8020f530:	1085883a 	add	r2,r2,r2
8020f534:	1085883a 	add	r2,r2,r2
8020f538:	2a000504 	addi	r8,r5,20
8020f53c:	34000504 	addi	r16,r6,20
8020f540:	4087883a 	add	r3,r8,r2
8020f544:	8085883a 	add	r2,r16,r2
8020f548:	00000106 	br	8020f550 <__mdiff+0x54>
8020f54c:	40c0592e 	bgeu	r8,r3,8020f6b4 <__mdiff+0x1b8>
8020f550:	18ffff04 	addi	r3,r3,-4
8020f554:	10bfff04 	addi	r2,r2,-4
8020f558:	19c00017 	ldw	r7,0(r3)
8020f55c:	11400017 	ldw	r5,0(r2)
8020f560:	397ffa26 	beq	r7,r5,8020f54c <__reset+0xfa1ef54c>
8020f564:	3940592e 	bgeu	r7,r5,8020f6cc <__mdiff+0x1d0>
8020f568:	9005883a 	mov	r2,r18
8020f56c:	4023883a 	mov	r17,r8
8020f570:	9825883a 	mov	r18,r19
8020f574:	05000044 	movi	r20,1
8020f578:	1027883a 	mov	r19,r2
8020f57c:	00000406 	br	8020f590 <__mdiff+0x94>
8020f580:	18005616 	blt	r3,zero,8020f6dc <__mdiff+0x1e0>
8020f584:	34400504 	addi	r17,r6,20
8020f588:	2c000504 	addi	r16,r5,20
8020f58c:	0029883a 	mov	r20,zero
8020f590:	91400117 	ldw	r5,4(r18)
8020f594:	020ebd40 	call	8020ebd4 <_Balloc>
8020f598:	92400417 	ldw	r9,16(r18)
8020f59c:	9b000417 	ldw	r12,16(r19)
8020f5a0:	12c00504 	addi	r11,r2,20
8020f5a4:	4a51883a 	add	r8,r9,r9
8020f5a8:	6319883a 	add	r12,r12,r12
8020f5ac:	4211883a 	add	r8,r8,r8
8020f5b0:	6319883a 	add	r12,r12,r12
8020f5b4:	15000315 	stw	r20,12(r2)
8020f5b8:	8211883a 	add	r8,r16,r8
8020f5bc:	8b19883a 	add	r12,r17,r12
8020f5c0:	0007883a 	mov	r3,zero
8020f5c4:	81400017 	ldw	r5,0(r16)
8020f5c8:	89c00017 	ldw	r7,0(r17)
8020f5cc:	59800104 	addi	r6,r11,4
8020f5d0:	293fffcc 	andi	r4,r5,65535
8020f5d4:	20c7883a 	add	r3,r4,r3
8020f5d8:	393fffcc 	andi	r4,r7,65535
8020f5dc:	1909c83a 	sub	r4,r3,r4
8020f5e0:	280ad43a 	srli	r5,r5,16
8020f5e4:	380ed43a 	srli	r7,r7,16
8020f5e8:	2007d43a 	srai	r3,r4,16
8020f5ec:	213fffcc 	andi	r4,r4,65535
8020f5f0:	29cbc83a 	sub	r5,r5,r7
8020f5f4:	28c7883a 	add	r3,r5,r3
8020f5f8:	180a943a 	slli	r5,r3,16
8020f5fc:	8c400104 	addi	r17,r17,4
8020f600:	84000104 	addi	r16,r16,4
8020f604:	2908b03a 	or	r4,r5,r4
8020f608:	59000015 	stw	r4,0(r11)
8020f60c:	1807d43a 	srai	r3,r3,16
8020f610:	3015883a 	mov	r10,r6
8020f614:	3017883a 	mov	r11,r6
8020f618:	8b3fea36 	bltu	r17,r12,8020f5c4 <__reset+0xfa1ef5c4>
8020f61c:	8200162e 	bgeu	r16,r8,8020f678 <__mdiff+0x17c>
8020f620:	8017883a 	mov	r11,r16
8020f624:	59400017 	ldw	r5,0(r11)
8020f628:	31800104 	addi	r6,r6,4
8020f62c:	5ac00104 	addi	r11,r11,4
8020f630:	293fffcc 	andi	r4,r5,65535
8020f634:	20c7883a 	add	r3,r4,r3
8020f638:	280ed43a 	srli	r7,r5,16
8020f63c:	180bd43a 	srai	r5,r3,16
8020f640:	193fffcc 	andi	r4,r3,65535
8020f644:	3947883a 	add	r3,r7,r5
8020f648:	180a943a 	slli	r5,r3,16
8020f64c:	1807d43a 	srai	r3,r3,16
8020f650:	2908b03a 	or	r4,r5,r4
8020f654:	313fff15 	stw	r4,-4(r6)
8020f658:	5a3ff236 	bltu	r11,r8,8020f624 <__reset+0xfa1ef624>
8020f65c:	0406303a 	nor	r3,zero,r16
8020f660:	1a07883a 	add	r3,r3,r8
8020f664:	1806d0ba 	srli	r3,r3,2
8020f668:	18c00044 	addi	r3,r3,1
8020f66c:	18c7883a 	add	r3,r3,r3
8020f670:	18c7883a 	add	r3,r3,r3
8020f674:	50d5883a 	add	r10,r10,r3
8020f678:	50ffff04 	addi	r3,r10,-4
8020f67c:	2000041e 	bne	r4,zero,8020f690 <__mdiff+0x194>
8020f680:	18ffff04 	addi	r3,r3,-4
8020f684:	19000017 	ldw	r4,0(r3)
8020f688:	4a7fffc4 	addi	r9,r9,-1
8020f68c:	203ffc26 	beq	r4,zero,8020f680 <__reset+0xfa1ef680>
8020f690:	12400415 	stw	r9,16(r2)
8020f694:	dfc00517 	ldw	ra,20(sp)
8020f698:	dd000417 	ldw	r20,16(sp)
8020f69c:	dcc00317 	ldw	r19,12(sp)
8020f6a0:	dc800217 	ldw	r18,8(sp)
8020f6a4:	dc400117 	ldw	r17,4(sp)
8020f6a8:	dc000017 	ldw	r16,0(sp)
8020f6ac:	dec00604 	addi	sp,sp,24
8020f6b0:	f800283a 	ret
8020f6b4:	000b883a 	mov	r5,zero
8020f6b8:	020ebd40 	call	8020ebd4 <_Balloc>
8020f6bc:	00c00044 	movi	r3,1
8020f6c0:	10c00415 	stw	r3,16(r2)
8020f6c4:	10000515 	stw	zero,20(r2)
8020f6c8:	003ff206 	br	8020f694 <__reset+0xfa1ef694>
8020f6cc:	8023883a 	mov	r17,r16
8020f6d0:	0029883a 	mov	r20,zero
8020f6d4:	4021883a 	mov	r16,r8
8020f6d8:	003fad06 	br	8020f590 <__reset+0xfa1ef590>
8020f6dc:	9005883a 	mov	r2,r18
8020f6e0:	94400504 	addi	r17,r18,20
8020f6e4:	9c000504 	addi	r16,r19,20
8020f6e8:	9825883a 	mov	r18,r19
8020f6ec:	05000044 	movi	r20,1
8020f6f0:	1027883a 	mov	r19,r2
8020f6f4:	003fa606 	br	8020f590 <__reset+0xfa1ef590>

8020f6f8 <__ulp>:
8020f6f8:	295ffc2c 	andhi	r5,r5,32752
8020f6fc:	00bf3034 	movhi	r2,64704
8020f700:	2887883a 	add	r3,r5,r2
8020f704:	00c0020e 	bge	zero,r3,8020f710 <__ulp+0x18>
8020f708:	0005883a 	mov	r2,zero
8020f70c:	f800283a 	ret
8020f710:	00c7c83a 	sub	r3,zero,r3
8020f714:	1807d53a 	srai	r3,r3,20
8020f718:	008004c4 	movi	r2,19
8020f71c:	10c00b0e 	bge	r2,r3,8020f74c <__ulp+0x54>
8020f720:	18bffb04 	addi	r2,r3,-20
8020f724:	01000784 	movi	r4,30
8020f728:	0007883a 	mov	r3,zero
8020f72c:	20800516 	blt	r4,r2,8020f744 <__ulp+0x4c>
8020f730:	010007c4 	movi	r4,31
8020f734:	2089c83a 	sub	r4,r4,r2
8020f738:	00800044 	movi	r2,1
8020f73c:	1104983a 	sll	r2,r2,r4
8020f740:	f800283a 	ret
8020f744:	00800044 	movi	r2,1
8020f748:	f800283a 	ret
8020f74c:	01400234 	movhi	r5,8
8020f750:	28c7d83a 	sra	r3,r5,r3
8020f754:	0005883a 	mov	r2,zero
8020f758:	f800283a 	ret

8020f75c <__b2d>:
8020f75c:	defffa04 	addi	sp,sp,-24
8020f760:	dc000015 	stw	r16,0(sp)
8020f764:	24000417 	ldw	r16,16(r4)
8020f768:	dc400115 	stw	r17,4(sp)
8020f76c:	24400504 	addi	r17,r4,20
8020f770:	8421883a 	add	r16,r16,r16
8020f774:	8421883a 	add	r16,r16,r16
8020f778:	8c21883a 	add	r16,r17,r16
8020f77c:	dc800215 	stw	r18,8(sp)
8020f780:	84bfff17 	ldw	r18,-4(r16)
8020f784:	dd000415 	stw	r20,16(sp)
8020f788:	dcc00315 	stw	r19,12(sp)
8020f78c:	9009883a 	mov	r4,r18
8020f790:	2829883a 	mov	r20,r5
8020f794:	dfc00515 	stw	ra,20(sp)
8020f798:	020eec80 	call	8020eec8 <__hi0bits>
8020f79c:	00c00804 	movi	r3,32
8020f7a0:	1889c83a 	sub	r4,r3,r2
8020f7a4:	a1000015 	stw	r4,0(r20)
8020f7a8:	01000284 	movi	r4,10
8020f7ac:	84ffff04 	addi	r19,r16,-4
8020f7b0:	20801216 	blt	r4,r2,8020f7fc <__b2d+0xa0>
8020f7b4:	018002c4 	movi	r6,11
8020f7b8:	308dc83a 	sub	r6,r6,r2
8020f7bc:	9186d83a 	srl	r3,r18,r6
8020f7c0:	18cffc34 	orhi	r3,r3,16368
8020f7c4:	8cc0212e 	bgeu	r17,r19,8020f84c <__b2d+0xf0>
8020f7c8:	813ffe17 	ldw	r4,-8(r16)
8020f7cc:	218cd83a 	srl	r6,r4,r6
8020f7d0:	10800544 	addi	r2,r2,21
8020f7d4:	9084983a 	sll	r2,r18,r2
8020f7d8:	1184b03a 	or	r2,r2,r6
8020f7dc:	dfc00517 	ldw	ra,20(sp)
8020f7e0:	dd000417 	ldw	r20,16(sp)
8020f7e4:	dcc00317 	ldw	r19,12(sp)
8020f7e8:	dc800217 	ldw	r18,8(sp)
8020f7ec:	dc400117 	ldw	r17,4(sp)
8020f7f0:	dc000017 	ldw	r16,0(sp)
8020f7f4:	dec00604 	addi	sp,sp,24
8020f7f8:	f800283a 	ret
8020f7fc:	8cc00f2e 	bgeu	r17,r19,8020f83c <__b2d+0xe0>
8020f800:	117ffd44 	addi	r5,r2,-11
8020f804:	80bffe17 	ldw	r2,-8(r16)
8020f808:	28000e26 	beq	r5,zero,8020f844 <__b2d+0xe8>
8020f80c:	1949c83a 	sub	r4,r3,r5
8020f810:	9164983a 	sll	r18,r18,r5
8020f814:	1106d83a 	srl	r3,r2,r4
8020f818:	81bffe04 	addi	r6,r16,-8
8020f81c:	948ffc34 	orhi	r18,r18,16368
8020f820:	90c6b03a 	or	r3,r18,r3
8020f824:	89800e2e 	bgeu	r17,r6,8020f860 <__b2d+0x104>
8020f828:	81bffd17 	ldw	r6,-12(r16)
8020f82c:	1144983a 	sll	r2,r2,r5
8020f830:	310ad83a 	srl	r5,r6,r4
8020f834:	2884b03a 	or	r2,r5,r2
8020f838:	003fe806 	br	8020f7dc <__reset+0xfa1ef7dc>
8020f83c:	10bffd44 	addi	r2,r2,-11
8020f840:	1000041e 	bne	r2,zero,8020f854 <__b2d+0xf8>
8020f844:	90cffc34 	orhi	r3,r18,16368
8020f848:	003fe406 	br	8020f7dc <__reset+0xfa1ef7dc>
8020f84c:	000d883a 	mov	r6,zero
8020f850:	003fdf06 	br	8020f7d0 <__reset+0xfa1ef7d0>
8020f854:	90a4983a 	sll	r18,r18,r2
8020f858:	0005883a 	mov	r2,zero
8020f85c:	003ff906 	br	8020f844 <__reset+0xfa1ef844>
8020f860:	1144983a 	sll	r2,r2,r5
8020f864:	003fdd06 	br	8020f7dc <__reset+0xfa1ef7dc>

8020f868 <__d2b>:
8020f868:	defff804 	addi	sp,sp,-32
8020f86c:	dc000215 	stw	r16,8(sp)
8020f870:	3021883a 	mov	r16,r6
8020f874:	dc400315 	stw	r17,12(sp)
8020f878:	8022907a 	slli	r17,r16,1
8020f87c:	dd000615 	stw	r20,24(sp)
8020f880:	2829883a 	mov	r20,r5
8020f884:	01400044 	movi	r5,1
8020f888:	dcc00515 	stw	r19,20(sp)
8020f88c:	dc800415 	stw	r18,16(sp)
8020f890:	dfc00715 	stw	ra,28(sp)
8020f894:	3825883a 	mov	r18,r7
8020f898:	8822d57a 	srli	r17,r17,21
8020f89c:	020ebd40 	call	8020ebd4 <_Balloc>
8020f8a0:	1027883a 	mov	r19,r2
8020f8a4:	00800434 	movhi	r2,16
8020f8a8:	10bfffc4 	addi	r2,r2,-1
8020f8ac:	808c703a 	and	r6,r16,r2
8020f8b0:	88000126 	beq	r17,zero,8020f8b8 <__d2b+0x50>
8020f8b4:	31800434 	orhi	r6,r6,16
8020f8b8:	d9800015 	stw	r6,0(sp)
8020f8bc:	a0002426 	beq	r20,zero,8020f950 <__d2b+0xe8>
8020f8c0:	d9000104 	addi	r4,sp,4
8020f8c4:	dd000115 	stw	r20,4(sp)
8020f8c8:	020ef300 	call	8020ef30 <__lo0bits>
8020f8cc:	d8c00017 	ldw	r3,0(sp)
8020f8d0:	10002f1e 	bne	r2,zero,8020f990 <__d2b+0x128>
8020f8d4:	d9000117 	ldw	r4,4(sp)
8020f8d8:	99000515 	stw	r4,20(r19)
8020f8dc:	1821003a 	cmpeq	r16,r3,zero
8020f8e0:	01000084 	movi	r4,2
8020f8e4:	2421c83a 	sub	r16,r4,r16
8020f8e8:	98c00615 	stw	r3,24(r19)
8020f8ec:	9c000415 	stw	r16,16(r19)
8020f8f0:	88001f1e 	bne	r17,zero,8020f970 <__d2b+0x108>
8020f8f4:	10bef384 	addi	r2,r2,-1074
8020f8f8:	90800015 	stw	r2,0(r18)
8020f8fc:	00900034 	movhi	r2,16384
8020f900:	10bfffc4 	addi	r2,r2,-1
8020f904:	8085883a 	add	r2,r16,r2
8020f908:	1085883a 	add	r2,r2,r2
8020f90c:	1085883a 	add	r2,r2,r2
8020f910:	9885883a 	add	r2,r19,r2
8020f914:	11000517 	ldw	r4,20(r2)
8020f918:	8020917a 	slli	r16,r16,5
8020f91c:	020eec80 	call	8020eec8 <__hi0bits>
8020f920:	d8c00817 	ldw	r3,32(sp)
8020f924:	8085c83a 	sub	r2,r16,r2
8020f928:	18800015 	stw	r2,0(r3)
8020f92c:	9805883a 	mov	r2,r19
8020f930:	dfc00717 	ldw	ra,28(sp)
8020f934:	dd000617 	ldw	r20,24(sp)
8020f938:	dcc00517 	ldw	r19,20(sp)
8020f93c:	dc800417 	ldw	r18,16(sp)
8020f940:	dc400317 	ldw	r17,12(sp)
8020f944:	dc000217 	ldw	r16,8(sp)
8020f948:	dec00804 	addi	sp,sp,32
8020f94c:	f800283a 	ret
8020f950:	d809883a 	mov	r4,sp
8020f954:	020ef300 	call	8020ef30 <__lo0bits>
8020f958:	d8c00017 	ldw	r3,0(sp)
8020f95c:	04000044 	movi	r16,1
8020f960:	9c000415 	stw	r16,16(r19)
8020f964:	98c00515 	stw	r3,20(r19)
8020f968:	10800804 	addi	r2,r2,32
8020f96c:	883fe126 	beq	r17,zero,8020f8f4 <__reset+0xfa1ef8f4>
8020f970:	00c00d44 	movi	r3,53
8020f974:	8c7ef344 	addi	r17,r17,-1075
8020f978:	88a3883a 	add	r17,r17,r2
8020f97c:	1885c83a 	sub	r2,r3,r2
8020f980:	d8c00817 	ldw	r3,32(sp)
8020f984:	94400015 	stw	r17,0(r18)
8020f988:	18800015 	stw	r2,0(r3)
8020f98c:	003fe706 	br	8020f92c <__reset+0xfa1ef92c>
8020f990:	01000804 	movi	r4,32
8020f994:	2089c83a 	sub	r4,r4,r2
8020f998:	1908983a 	sll	r4,r3,r4
8020f99c:	d9400117 	ldw	r5,4(sp)
8020f9a0:	1886d83a 	srl	r3,r3,r2
8020f9a4:	2148b03a 	or	r4,r4,r5
8020f9a8:	99000515 	stw	r4,20(r19)
8020f9ac:	d8c00015 	stw	r3,0(sp)
8020f9b0:	003fca06 	br	8020f8dc <__reset+0xfa1ef8dc>

8020f9b4 <__ratio>:
8020f9b4:	defff904 	addi	sp,sp,-28
8020f9b8:	dc400315 	stw	r17,12(sp)
8020f9bc:	2823883a 	mov	r17,r5
8020f9c0:	d9400104 	addi	r5,sp,4
8020f9c4:	dfc00615 	stw	ra,24(sp)
8020f9c8:	dcc00515 	stw	r19,20(sp)
8020f9cc:	dc800415 	stw	r18,16(sp)
8020f9d0:	2027883a 	mov	r19,r4
8020f9d4:	dc000215 	stw	r16,8(sp)
8020f9d8:	020f75c0 	call	8020f75c <__b2d>
8020f9dc:	d80b883a 	mov	r5,sp
8020f9e0:	8809883a 	mov	r4,r17
8020f9e4:	1025883a 	mov	r18,r2
8020f9e8:	1821883a 	mov	r16,r3
8020f9ec:	020f75c0 	call	8020f75c <__b2d>
8020f9f0:	8a000417 	ldw	r8,16(r17)
8020f9f4:	99000417 	ldw	r4,16(r19)
8020f9f8:	d9400117 	ldw	r5,4(sp)
8020f9fc:	2209c83a 	sub	r4,r4,r8
8020fa00:	2010917a 	slli	r8,r4,5
8020fa04:	d9000017 	ldw	r4,0(sp)
8020fa08:	2909c83a 	sub	r4,r5,r4
8020fa0c:	4109883a 	add	r4,r8,r4
8020fa10:	01000e0e 	bge	zero,r4,8020fa4c <__ratio+0x98>
8020fa14:	2008953a 	slli	r4,r4,20
8020fa18:	2421883a 	add	r16,r4,r16
8020fa1c:	100d883a 	mov	r6,r2
8020fa20:	180f883a 	mov	r7,r3
8020fa24:	9009883a 	mov	r4,r18
8020fa28:	800b883a 	mov	r5,r16
8020fa2c:	0214cac0 	call	80214cac <__divdf3>
8020fa30:	dfc00617 	ldw	ra,24(sp)
8020fa34:	dcc00517 	ldw	r19,20(sp)
8020fa38:	dc800417 	ldw	r18,16(sp)
8020fa3c:	dc400317 	ldw	r17,12(sp)
8020fa40:	dc000217 	ldw	r16,8(sp)
8020fa44:	dec00704 	addi	sp,sp,28
8020fa48:	f800283a 	ret
8020fa4c:	2008953a 	slli	r4,r4,20
8020fa50:	1907c83a 	sub	r3,r3,r4
8020fa54:	003ff106 	br	8020fa1c <__reset+0xfa1efa1c>

8020fa58 <_mprec_log10>:
8020fa58:	defffe04 	addi	sp,sp,-8
8020fa5c:	dc000015 	stw	r16,0(sp)
8020fa60:	dfc00115 	stw	ra,4(sp)
8020fa64:	008005c4 	movi	r2,23
8020fa68:	2021883a 	mov	r16,r4
8020fa6c:	11000d0e 	bge	r2,r4,8020faa4 <_mprec_log10+0x4c>
8020fa70:	0005883a 	mov	r2,zero
8020fa74:	00cffc34 	movhi	r3,16368
8020fa78:	843fffc4 	addi	r16,r16,-1
8020fa7c:	000d883a 	mov	r6,zero
8020fa80:	01d00934 	movhi	r7,16420
8020fa84:	1009883a 	mov	r4,r2
8020fa88:	180b883a 	mov	r5,r3
8020fa8c:	02157ec0 	call	802157ec <__muldf3>
8020fa90:	803ff91e 	bne	r16,zero,8020fa78 <__reset+0xfa1efa78>
8020fa94:	dfc00117 	ldw	ra,4(sp)
8020fa98:	dc000017 	ldw	r16,0(sp)
8020fa9c:	dec00204 	addi	sp,sp,8
8020faa0:	f800283a 	ret
8020faa4:	202090fa 	slli	r16,r4,3
8020faa8:	00a008b4 	movhi	r2,32802
8020faac:	10b67604 	addi	r2,r2,-9768
8020fab0:	1421883a 	add	r16,r2,r16
8020fab4:	80800017 	ldw	r2,0(r16)
8020fab8:	80c00117 	ldw	r3,4(r16)
8020fabc:	dfc00117 	ldw	ra,4(sp)
8020fac0:	dc000017 	ldw	r16,0(sp)
8020fac4:	dec00204 	addi	sp,sp,8
8020fac8:	f800283a 	ret

8020facc <__copybits>:
8020facc:	297fffc4 	addi	r5,r5,-1
8020fad0:	280fd17a 	srai	r7,r5,5
8020fad4:	30c00417 	ldw	r3,16(r6)
8020fad8:	30800504 	addi	r2,r6,20
8020fadc:	39c00044 	addi	r7,r7,1
8020fae0:	18c7883a 	add	r3,r3,r3
8020fae4:	39cf883a 	add	r7,r7,r7
8020fae8:	18c7883a 	add	r3,r3,r3
8020faec:	39cf883a 	add	r7,r7,r7
8020faf0:	10c7883a 	add	r3,r2,r3
8020faf4:	21cf883a 	add	r7,r4,r7
8020faf8:	10c00d2e 	bgeu	r2,r3,8020fb30 <__copybits+0x64>
8020fafc:	200b883a 	mov	r5,r4
8020fb00:	12000017 	ldw	r8,0(r2)
8020fb04:	29400104 	addi	r5,r5,4
8020fb08:	10800104 	addi	r2,r2,4
8020fb0c:	2a3fff15 	stw	r8,-4(r5)
8020fb10:	10fffb36 	bltu	r2,r3,8020fb00 <__reset+0xfa1efb00>
8020fb14:	1985c83a 	sub	r2,r3,r6
8020fb18:	10bffac4 	addi	r2,r2,-21
8020fb1c:	1004d0ba 	srli	r2,r2,2
8020fb20:	10800044 	addi	r2,r2,1
8020fb24:	1085883a 	add	r2,r2,r2
8020fb28:	1085883a 	add	r2,r2,r2
8020fb2c:	2089883a 	add	r4,r4,r2
8020fb30:	21c0032e 	bgeu	r4,r7,8020fb40 <__copybits+0x74>
8020fb34:	20000015 	stw	zero,0(r4)
8020fb38:	21000104 	addi	r4,r4,4
8020fb3c:	21fffd36 	bltu	r4,r7,8020fb34 <__reset+0xfa1efb34>
8020fb40:	f800283a 	ret

8020fb44 <__any_on>:
8020fb44:	20c00417 	ldw	r3,16(r4)
8020fb48:	2805d17a 	srai	r2,r5,5
8020fb4c:	21000504 	addi	r4,r4,20
8020fb50:	18800d0e 	bge	r3,r2,8020fb88 <__any_on+0x44>
8020fb54:	18c7883a 	add	r3,r3,r3
8020fb58:	18c7883a 	add	r3,r3,r3
8020fb5c:	20c7883a 	add	r3,r4,r3
8020fb60:	20c0192e 	bgeu	r4,r3,8020fbc8 <__any_on+0x84>
8020fb64:	18bfff17 	ldw	r2,-4(r3)
8020fb68:	18ffff04 	addi	r3,r3,-4
8020fb6c:	1000041e 	bne	r2,zero,8020fb80 <__any_on+0x3c>
8020fb70:	20c0142e 	bgeu	r4,r3,8020fbc4 <__any_on+0x80>
8020fb74:	18ffff04 	addi	r3,r3,-4
8020fb78:	19400017 	ldw	r5,0(r3)
8020fb7c:	283ffc26 	beq	r5,zero,8020fb70 <__reset+0xfa1efb70>
8020fb80:	00800044 	movi	r2,1
8020fb84:	f800283a 	ret
8020fb88:	10c00a0e 	bge	r2,r3,8020fbb4 <__any_on+0x70>
8020fb8c:	1085883a 	add	r2,r2,r2
8020fb90:	1085883a 	add	r2,r2,r2
8020fb94:	294007cc 	andi	r5,r5,31
8020fb98:	2087883a 	add	r3,r4,r2
8020fb9c:	283ff026 	beq	r5,zero,8020fb60 <__reset+0xfa1efb60>
8020fba0:	19800017 	ldw	r6,0(r3)
8020fba4:	3144d83a 	srl	r2,r6,r5
8020fba8:	114a983a 	sll	r5,r2,r5
8020fbac:	317ff41e 	bne	r6,r5,8020fb80 <__reset+0xfa1efb80>
8020fbb0:	003feb06 	br	8020fb60 <__reset+0xfa1efb60>
8020fbb4:	1085883a 	add	r2,r2,r2
8020fbb8:	1085883a 	add	r2,r2,r2
8020fbbc:	2087883a 	add	r3,r4,r2
8020fbc0:	003fe706 	br	8020fb60 <__reset+0xfa1efb60>
8020fbc4:	f800283a 	ret
8020fbc8:	0005883a 	mov	r2,zero
8020fbcc:	f800283a 	ret

8020fbd0 <_realloc_r>:
8020fbd0:	defff604 	addi	sp,sp,-40
8020fbd4:	dc800215 	stw	r18,8(sp)
8020fbd8:	dfc00915 	stw	ra,36(sp)
8020fbdc:	df000815 	stw	fp,32(sp)
8020fbe0:	ddc00715 	stw	r23,28(sp)
8020fbe4:	dd800615 	stw	r22,24(sp)
8020fbe8:	dd400515 	stw	r21,20(sp)
8020fbec:	dd000415 	stw	r20,16(sp)
8020fbf0:	dcc00315 	stw	r19,12(sp)
8020fbf4:	dc400115 	stw	r17,4(sp)
8020fbf8:	dc000015 	stw	r16,0(sp)
8020fbfc:	3025883a 	mov	r18,r6
8020fc00:	2800b726 	beq	r5,zero,8020fee0 <_realloc_r+0x310>
8020fc04:	282b883a 	mov	r21,r5
8020fc08:	2029883a 	mov	r20,r4
8020fc0c:	021715c0 	call	8021715c <__malloc_lock>
8020fc10:	a8bfff17 	ldw	r2,-4(r21)
8020fc14:	043fff04 	movi	r16,-4
8020fc18:	90c002c4 	addi	r3,r18,11
8020fc1c:	01000584 	movi	r4,22
8020fc20:	acfffe04 	addi	r19,r21,-8
8020fc24:	1420703a 	and	r16,r2,r16
8020fc28:	20c0332e 	bgeu	r4,r3,8020fcf8 <_realloc_r+0x128>
8020fc2c:	047ffe04 	movi	r17,-8
8020fc30:	1c62703a 	and	r17,r3,r17
8020fc34:	8807883a 	mov	r3,r17
8020fc38:	88005816 	blt	r17,zero,8020fd9c <_realloc_r+0x1cc>
8020fc3c:	8c805736 	bltu	r17,r18,8020fd9c <_realloc_r+0x1cc>
8020fc40:	80c0300e 	bge	r16,r3,8020fd04 <_realloc_r+0x134>
8020fc44:	072008b4 	movhi	fp,32802
8020fc48:	e7388704 	addi	fp,fp,-7652
8020fc4c:	e1c00217 	ldw	r7,8(fp)
8020fc50:	9c09883a 	add	r4,r19,r16
8020fc54:	22000117 	ldw	r8,4(r4)
8020fc58:	21c06326 	beq	r4,r7,8020fde8 <_realloc_r+0x218>
8020fc5c:	017fff84 	movi	r5,-2
8020fc60:	414a703a 	and	r5,r8,r5
8020fc64:	214b883a 	add	r5,r4,r5
8020fc68:	29800117 	ldw	r6,4(r5)
8020fc6c:	3180004c 	andi	r6,r6,1
8020fc70:	30003f26 	beq	r6,zero,8020fd70 <_realloc_r+0x1a0>
8020fc74:	1080004c 	andi	r2,r2,1
8020fc78:	10008326 	beq	r2,zero,8020fe88 <_realloc_r+0x2b8>
8020fc7c:	900b883a 	mov	r5,r18
8020fc80:	a009883a 	mov	r4,r20
8020fc84:	020e0600 	call	8020e060 <_malloc_r>
8020fc88:	1025883a 	mov	r18,r2
8020fc8c:	10011e26 	beq	r2,zero,80210108 <_realloc_r+0x538>
8020fc90:	a93fff17 	ldw	r4,-4(r21)
8020fc94:	10fffe04 	addi	r3,r2,-8
8020fc98:	00bfff84 	movi	r2,-2
8020fc9c:	2084703a 	and	r2,r4,r2
8020fca0:	9885883a 	add	r2,r19,r2
8020fca4:	1880ee26 	beq	r3,r2,80210060 <_realloc_r+0x490>
8020fca8:	81bfff04 	addi	r6,r16,-4
8020fcac:	00800904 	movi	r2,36
8020fcb0:	1180b836 	bltu	r2,r6,8020ff94 <_realloc_r+0x3c4>
8020fcb4:	00c004c4 	movi	r3,19
8020fcb8:	19809636 	bltu	r3,r6,8020ff14 <_realloc_r+0x344>
8020fcbc:	9005883a 	mov	r2,r18
8020fcc0:	a807883a 	mov	r3,r21
8020fcc4:	19000017 	ldw	r4,0(r3)
8020fcc8:	11000015 	stw	r4,0(r2)
8020fccc:	19000117 	ldw	r4,4(r3)
8020fcd0:	11000115 	stw	r4,4(r2)
8020fcd4:	18c00217 	ldw	r3,8(r3)
8020fcd8:	10c00215 	stw	r3,8(r2)
8020fcdc:	a80b883a 	mov	r5,r21
8020fce0:	a009883a 	mov	r4,r20
8020fce4:	020d4740 	call	8020d474 <_free_r>
8020fce8:	a009883a 	mov	r4,r20
8020fcec:	02171800 	call	80217180 <__malloc_unlock>
8020fcf0:	9005883a 	mov	r2,r18
8020fcf4:	00001206 	br	8020fd40 <_realloc_r+0x170>
8020fcf8:	00c00404 	movi	r3,16
8020fcfc:	1823883a 	mov	r17,r3
8020fd00:	003fce06 	br	8020fc3c <__reset+0xfa1efc3c>
8020fd04:	a825883a 	mov	r18,r21
8020fd08:	8445c83a 	sub	r2,r16,r17
8020fd0c:	00c003c4 	movi	r3,15
8020fd10:	18802636 	bltu	r3,r2,8020fdac <_realloc_r+0x1dc>
8020fd14:	99800117 	ldw	r6,4(r19)
8020fd18:	9c07883a 	add	r3,r19,r16
8020fd1c:	3180004c 	andi	r6,r6,1
8020fd20:	3420b03a 	or	r16,r6,r16
8020fd24:	9c000115 	stw	r16,4(r19)
8020fd28:	18800117 	ldw	r2,4(r3)
8020fd2c:	10800054 	ori	r2,r2,1
8020fd30:	18800115 	stw	r2,4(r3)
8020fd34:	a009883a 	mov	r4,r20
8020fd38:	02171800 	call	80217180 <__malloc_unlock>
8020fd3c:	9005883a 	mov	r2,r18
8020fd40:	dfc00917 	ldw	ra,36(sp)
8020fd44:	df000817 	ldw	fp,32(sp)
8020fd48:	ddc00717 	ldw	r23,28(sp)
8020fd4c:	dd800617 	ldw	r22,24(sp)
8020fd50:	dd400517 	ldw	r21,20(sp)
8020fd54:	dd000417 	ldw	r20,16(sp)
8020fd58:	dcc00317 	ldw	r19,12(sp)
8020fd5c:	dc800217 	ldw	r18,8(sp)
8020fd60:	dc400117 	ldw	r17,4(sp)
8020fd64:	dc000017 	ldw	r16,0(sp)
8020fd68:	dec00a04 	addi	sp,sp,40
8020fd6c:	f800283a 	ret
8020fd70:	017fff04 	movi	r5,-4
8020fd74:	414a703a 	and	r5,r8,r5
8020fd78:	814d883a 	add	r6,r16,r5
8020fd7c:	30c01f16 	blt	r6,r3,8020fdfc <_realloc_r+0x22c>
8020fd80:	20800317 	ldw	r2,12(r4)
8020fd84:	20c00217 	ldw	r3,8(r4)
8020fd88:	a825883a 	mov	r18,r21
8020fd8c:	3021883a 	mov	r16,r6
8020fd90:	18800315 	stw	r2,12(r3)
8020fd94:	10c00215 	stw	r3,8(r2)
8020fd98:	003fdb06 	br	8020fd08 <__reset+0xfa1efd08>
8020fd9c:	00800304 	movi	r2,12
8020fda0:	a0800015 	stw	r2,0(r20)
8020fda4:	0005883a 	mov	r2,zero
8020fda8:	003fe506 	br	8020fd40 <__reset+0xfa1efd40>
8020fdac:	98c00117 	ldw	r3,4(r19)
8020fdb0:	9c4b883a 	add	r5,r19,r17
8020fdb4:	11000054 	ori	r4,r2,1
8020fdb8:	18c0004c 	andi	r3,r3,1
8020fdbc:	1c62b03a 	or	r17,r3,r17
8020fdc0:	9c400115 	stw	r17,4(r19)
8020fdc4:	29000115 	stw	r4,4(r5)
8020fdc8:	2885883a 	add	r2,r5,r2
8020fdcc:	10c00117 	ldw	r3,4(r2)
8020fdd0:	29400204 	addi	r5,r5,8
8020fdd4:	a009883a 	mov	r4,r20
8020fdd8:	18c00054 	ori	r3,r3,1
8020fddc:	10c00115 	stw	r3,4(r2)
8020fde0:	020d4740 	call	8020d474 <_free_r>
8020fde4:	003fd306 	br	8020fd34 <__reset+0xfa1efd34>
8020fde8:	017fff04 	movi	r5,-4
8020fdec:	414a703a 	and	r5,r8,r5
8020fdf0:	89800404 	addi	r6,r17,16
8020fdf4:	8151883a 	add	r8,r16,r5
8020fdf8:	4180590e 	bge	r8,r6,8020ff60 <_realloc_r+0x390>
8020fdfc:	1080004c 	andi	r2,r2,1
8020fe00:	103f9e1e 	bne	r2,zero,8020fc7c <__reset+0xfa1efc7c>
8020fe04:	adbffe17 	ldw	r22,-8(r21)
8020fe08:	00bfff04 	movi	r2,-4
8020fe0c:	9dadc83a 	sub	r22,r19,r22
8020fe10:	b1800117 	ldw	r6,4(r22)
8020fe14:	3084703a 	and	r2,r6,r2
8020fe18:	20002026 	beq	r4,zero,8020fe9c <_realloc_r+0x2cc>
8020fe1c:	80af883a 	add	r23,r16,r2
8020fe20:	b96f883a 	add	r23,r23,r5
8020fe24:	21c05f26 	beq	r4,r7,8020ffa4 <_realloc_r+0x3d4>
8020fe28:	b8c01c16 	blt	r23,r3,8020fe9c <_realloc_r+0x2cc>
8020fe2c:	20800317 	ldw	r2,12(r4)
8020fe30:	20c00217 	ldw	r3,8(r4)
8020fe34:	81bfff04 	addi	r6,r16,-4
8020fe38:	01000904 	movi	r4,36
8020fe3c:	18800315 	stw	r2,12(r3)
8020fe40:	10c00215 	stw	r3,8(r2)
8020fe44:	b0c00217 	ldw	r3,8(r22)
8020fe48:	b0800317 	ldw	r2,12(r22)
8020fe4c:	b4800204 	addi	r18,r22,8
8020fe50:	18800315 	stw	r2,12(r3)
8020fe54:	10c00215 	stw	r3,8(r2)
8020fe58:	21801b36 	bltu	r4,r6,8020fec8 <_realloc_r+0x2f8>
8020fe5c:	008004c4 	movi	r2,19
8020fe60:	1180352e 	bgeu	r2,r6,8020ff38 <_realloc_r+0x368>
8020fe64:	a8800017 	ldw	r2,0(r21)
8020fe68:	b0800215 	stw	r2,8(r22)
8020fe6c:	a8800117 	ldw	r2,4(r21)
8020fe70:	b0800315 	stw	r2,12(r22)
8020fe74:	008006c4 	movi	r2,27
8020fe78:	11807f36 	bltu	r2,r6,80210078 <_realloc_r+0x4a8>
8020fe7c:	b0800404 	addi	r2,r22,16
8020fe80:	ad400204 	addi	r21,r21,8
8020fe84:	00002d06 	br	8020ff3c <_realloc_r+0x36c>
8020fe88:	adbffe17 	ldw	r22,-8(r21)
8020fe8c:	00bfff04 	movi	r2,-4
8020fe90:	9dadc83a 	sub	r22,r19,r22
8020fe94:	b1000117 	ldw	r4,4(r22)
8020fe98:	2084703a 	and	r2,r4,r2
8020fe9c:	b03f7726 	beq	r22,zero,8020fc7c <__reset+0xfa1efc7c>
8020fea0:	80af883a 	add	r23,r16,r2
8020fea4:	b8ff7516 	blt	r23,r3,8020fc7c <__reset+0xfa1efc7c>
8020fea8:	b0800317 	ldw	r2,12(r22)
8020feac:	b0c00217 	ldw	r3,8(r22)
8020feb0:	81bfff04 	addi	r6,r16,-4
8020feb4:	01000904 	movi	r4,36
8020feb8:	18800315 	stw	r2,12(r3)
8020febc:	10c00215 	stw	r3,8(r2)
8020fec0:	b4800204 	addi	r18,r22,8
8020fec4:	21bfe52e 	bgeu	r4,r6,8020fe5c <__reset+0xfa1efe5c>
8020fec8:	a80b883a 	mov	r5,r21
8020fecc:	9009883a 	mov	r4,r18
8020fed0:	020e9500 	call	8020e950 <memmove>
8020fed4:	b821883a 	mov	r16,r23
8020fed8:	b027883a 	mov	r19,r22
8020fedc:	003f8a06 	br	8020fd08 <__reset+0xfa1efd08>
8020fee0:	300b883a 	mov	r5,r6
8020fee4:	dfc00917 	ldw	ra,36(sp)
8020fee8:	df000817 	ldw	fp,32(sp)
8020feec:	ddc00717 	ldw	r23,28(sp)
8020fef0:	dd800617 	ldw	r22,24(sp)
8020fef4:	dd400517 	ldw	r21,20(sp)
8020fef8:	dd000417 	ldw	r20,16(sp)
8020fefc:	dcc00317 	ldw	r19,12(sp)
8020ff00:	dc800217 	ldw	r18,8(sp)
8020ff04:	dc400117 	ldw	r17,4(sp)
8020ff08:	dc000017 	ldw	r16,0(sp)
8020ff0c:	dec00a04 	addi	sp,sp,40
8020ff10:	020e0601 	jmpi	8020e060 <_malloc_r>
8020ff14:	a8c00017 	ldw	r3,0(r21)
8020ff18:	90c00015 	stw	r3,0(r18)
8020ff1c:	a8c00117 	ldw	r3,4(r21)
8020ff20:	90c00115 	stw	r3,4(r18)
8020ff24:	00c006c4 	movi	r3,27
8020ff28:	19804536 	bltu	r3,r6,80210040 <_realloc_r+0x470>
8020ff2c:	90800204 	addi	r2,r18,8
8020ff30:	a8c00204 	addi	r3,r21,8
8020ff34:	003f6306 	br	8020fcc4 <__reset+0xfa1efcc4>
8020ff38:	9005883a 	mov	r2,r18
8020ff3c:	a8c00017 	ldw	r3,0(r21)
8020ff40:	b821883a 	mov	r16,r23
8020ff44:	b027883a 	mov	r19,r22
8020ff48:	10c00015 	stw	r3,0(r2)
8020ff4c:	a8c00117 	ldw	r3,4(r21)
8020ff50:	10c00115 	stw	r3,4(r2)
8020ff54:	a8c00217 	ldw	r3,8(r21)
8020ff58:	10c00215 	stw	r3,8(r2)
8020ff5c:	003f6a06 	br	8020fd08 <__reset+0xfa1efd08>
8020ff60:	9c67883a 	add	r19,r19,r17
8020ff64:	4445c83a 	sub	r2,r8,r17
8020ff68:	e4c00215 	stw	r19,8(fp)
8020ff6c:	10800054 	ori	r2,r2,1
8020ff70:	98800115 	stw	r2,4(r19)
8020ff74:	a8bfff17 	ldw	r2,-4(r21)
8020ff78:	a009883a 	mov	r4,r20
8020ff7c:	1080004c 	andi	r2,r2,1
8020ff80:	1462b03a 	or	r17,r2,r17
8020ff84:	ac7fff15 	stw	r17,-4(r21)
8020ff88:	02171800 	call	80217180 <__malloc_unlock>
8020ff8c:	a805883a 	mov	r2,r21
8020ff90:	003f6b06 	br	8020fd40 <__reset+0xfa1efd40>
8020ff94:	a80b883a 	mov	r5,r21
8020ff98:	9009883a 	mov	r4,r18
8020ff9c:	020e9500 	call	8020e950 <memmove>
8020ffa0:	003f4e06 	br	8020fcdc <__reset+0xfa1efcdc>
8020ffa4:	89000404 	addi	r4,r17,16
8020ffa8:	b93fbc16 	blt	r23,r4,8020fe9c <__reset+0xfa1efe9c>
8020ffac:	b0800317 	ldw	r2,12(r22)
8020ffb0:	b0c00217 	ldw	r3,8(r22)
8020ffb4:	81bfff04 	addi	r6,r16,-4
8020ffb8:	01000904 	movi	r4,36
8020ffbc:	18800315 	stw	r2,12(r3)
8020ffc0:	10c00215 	stw	r3,8(r2)
8020ffc4:	b4800204 	addi	r18,r22,8
8020ffc8:	21804336 	bltu	r4,r6,802100d8 <_realloc_r+0x508>
8020ffcc:	008004c4 	movi	r2,19
8020ffd0:	11803f2e 	bgeu	r2,r6,802100d0 <_realloc_r+0x500>
8020ffd4:	a8800017 	ldw	r2,0(r21)
8020ffd8:	b0800215 	stw	r2,8(r22)
8020ffdc:	a8800117 	ldw	r2,4(r21)
8020ffe0:	b0800315 	stw	r2,12(r22)
8020ffe4:	008006c4 	movi	r2,27
8020ffe8:	11803f36 	bltu	r2,r6,802100e8 <_realloc_r+0x518>
8020ffec:	b0800404 	addi	r2,r22,16
8020fff0:	ad400204 	addi	r21,r21,8
8020fff4:	a8c00017 	ldw	r3,0(r21)
8020fff8:	10c00015 	stw	r3,0(r2)
8020fffc:	a8c00117 	ldw	r3,4(r21)
80210000:	10c00115 	stw	r3,4(r2)
80210004:	a8c00217 	ldw	r3,8(r21)
80210008:	10c00215 	stw	r3,8(r2)
8021000c:	b447883a 	add	r3,r22,r17
80210010:	bc45c83a 	sub	r2,r23,r17
80210014:	e0c00215 	stw	r3,8(fp)
80210018:	10800054 	ori	r2,r2,1
8021001c:	18800115 	stw	r2,4(r3)
80210020:	b0800117 	ldw	r2,4(r22)
80210024:	a009883a 	mov	r4,r20
80210028:	1080004c 	andi	r2,r2,1
8021002c:	1462b03a 	or	r17,r2,r17
80210030:	b4400115 	stw	r17,4(r22)
80210034:	02171800 	call	80217180 <__malloc_unlock>
80210038:	9005883a 	mov	r2,r18
8021003c:	003f4006 	br	8020fd40 <__reset+0xfa1efd40>
80210040:	a8c00217 	ldw	r3,8(r21)
80210044:	90c00215 	stw	r3,8(r18)
80210048:	a8c00317 	ldw	r3,12(r21)
8021004c:	90c00315 	stw	r3,12(r18)
80210050:	30801126 	beq	r6,r2,80210098 <_realloc_r+0x4c8>
80210054:	90800404 	addi	r2,r18,16
80210058:	a8c00404 	addi	r3,r21,16
8021005c:	003f1906 	br	8020fcc4 <__reset+0xfa1efcc4>
80210060:	90ffff17 	ldw	r3,-4(r18)
80210064:	00bfff04 	movi	r2,-4
80210068:	a825883a 	mov	r18,r21
8021006c:	1884703a 	and	r2,r3,r2
80210070:	80a1883a 	add	r16,r16,r2
80210074:	003f2406 	br	8020fd08 <__reset+0xfa1efd08>
80210078:	a8800217 	ldw	r2,8(r21)
8021007c:	b0800415 	stw	r2,16(r22)
80210080:	a8800317 	ldw	r2,12(r21)
80210084:	b0800515 	stw	r2,20(r22)
80210088:	31000a26 	beq	r6,r4,802100b4 <_realloc_r+0x4e4>
8021008c:	b0800604 	addi	r2,r22,24
80210090:	ad400404 	addi	r21,r21,16
80210094:	003fa906 	br	8020ff3c <__reset+0xfa1eff3c>
80210098:	a9000417 	ldw	r4,16(r21)
8021009c:	90800604 	addi	r2,r18,24
802100a0:	a8c00604 	addi	r3,r21,24
802100a4:	91000415 	stw	r4,16(r18)
802100a8:	a9000517 	ldw	r4,20(r21)
802100ac:	91000515 	stw	r4,20(r18)
802100b0:	003f0406 	br	8020fcc4 <__reset+0xfa1efcc4>
802100b4:	a8c00417 	ldw	r3,16(r21)
802100b8:	ad400604 	addi	r21,r21,24
802100bc:	b0800804 	addi	r2,r22,32
802100c0:	b0c00615 	stw	r3,24(r22)
802100c4:	a8ffff17 	ldw	r3,-4(r21)
802100c8:	b0c00715 	stw	r3,28(r22)
802100cc:	003f9b06 	br	8020ff3c <__reset+0xfa1eff3c>
802100d0:	9005883a 	mov	r2,r18
802100d4:	003fc706 	br	8020fff4 <__reset+0xfa1efff4>
802100d8:	a80b883a 	mov	r5,r21
802100dc:	9009883a 	mov	r4,r18
802100e0:	020e9500 	call	8020e950 <memmove>
802100e4:	003fc906 	br	8021000c <__reset+0xfa1f000c>
802100e8:	a8800217 	ldw	r2,8(r21)
802100ec:	b0800415 	stw	r2,16(r22)
802100f0:	a8800317 	ldw	r2,12(r21)
802100f4:	b0800515 	stw	r2,20(r22)
802100f8:	31000726 	beq	r6,r4,80210118 <_realloc_r+0x548>
802100fc:	b0800604 	addi	r2,r22,24
80210100:	ad400404 	addi	r21,r21,16
80210104:	003fbb06 	br	8020fff4 <__reset+0xfa1efff4>
80210108:	a009883a 	mov	r4,r20
8021010c:	02171800 	call	80217180 <__malloc_unlock>
80210110:	0005883a 	mov	r2,zero
80210114:	003f0a06 	br	8020fd40 <__reset+0xfa1efd40>
80210118:	a8c00417 	ldw	r3,16(r21)
8021011c:	ad400604 	addi	r21,r21,24
80210120:	b0800804 	addi	r2,r22,32
80210124:	b0c00615 	stw	r3,24(r22)
80210128:	a8ffff17 	ldw	r3,-4(r21)
8021012c:	b0c00715 	stw	r3,28(r22)
80210130:	003fb006 	br	8020fff4 <__reset+0xfa1efff4>

80210134 <__fpclassifyd>:
80210134:	00a00034 	movhi	r2,32768
80210138:	10bfffc4 	addi	r2,r2,-1
8021013c:	2884703a 	and	r2,r5,r2
80210140:	10000726 	beq	r2,zero,80210160 <__fpclassifyd+0x2c>
80210144:	00fffc34 	movhi	r3,65520
80210148:	019ff834 	movhi	r6,32736
8021014c:	28c7883a 	add	r3,r5,r3
80210150:	31bfffc4 	addi	r6,r6,-1
80210154:	30c00536 	bltu	r6,r3,8021016c <__fpclassifyd+0x38>
80210158:	00800104 	movi	r2,4
8021015c:	f800283a 	ret
80210160:	2000021e 	bne	r4,zero,8021016c <__fpclassifyd+0x38>
80210164:	00800084 	movi	r2,2
80210168:	f800283a 	ret
8021016c:	00dffc34 	movhi	r3,32752
80210170:	019ff834 	movhi	r6,32736
80210174:	28cb883a 	add	r5,r5,r3
80210178:	31bfffc4 	addi	r6,r6,-1
8021017c:	317ff62e 	bgeu	r6,r5,80210158 <__reset+0xfa1f0158>
80210180:	01400434 	movhi	r5,16
80210184:	297fffc4 	addi	r5,r5,-1
80210188:	28800236 	bltu	r5,r2,80210194 <__fpclassifyd+0x60>
8021018c:	008000c4 	movi	r2,3
80210190:	f800283a 	ret
80210194:	10c00226 	beq	r2,r3,802101a0 <__fpclassifyd+0x6c>
80210198:	0005883a 	mov	r2,zero
8021019c:	f800283a 	ret
802101a0:	2005003a 	cmpeq	r2,r4,zero
802101a4:	f800283a 	ret

802101a8 <_sbrk_r>:
802101a8:	defffd04 	addi	sp,sp,-12
802101ac:	dc000015 	stw	r16,0(sp)
802101b0:	042008b4 	movhi	r16,32802
802101b4:	dc400115 	stw	r17,4(sp)
802101b8:	843ea204 	addi	r16,r16,-1400
802101bc:	2023883a 	mov	r17,r4
802101c0:	2809883a 	mov	r4,r5
802101c4:	dfc00215 	stw	ra,8(sp)
802101c8:	80000015 	stw	zero,0(r16)
802101cc:	02173400 	call	80217340 <sbrk>
802101d0:	00ffffc4 	movi	r3,-1
802101d4:	10c00526 	beq	r2,r3,802101ec <_sbrk_r+0x44>
802101d8:	dfc00217 	ldw	ra,8(sp)
802101dc:	dc400117 	ldw	r17,4(sp)
802101e0:	dc000017 	ldw	r16,0(sp)
802101e4:	dec00304 	addi	sp,sp,12
802101e8:	f800283a 	ret
802101ec:	80c00017 	ldw	r3,0(r16)
802101f0:	183ff926 	beq	r3,zero,802101d8 <__reset+0xfa1f01d8>
802101f4:	88c00015 	stw	r3,0(r17)
802101f8:	003ff706 	br	802101d8 <__reset+0xfa1f01d8>

802101fc <__sread>:
802101fc:	defffe04 	addi	sp,sp,-8
80210200:	dc000015 	stw	r16,0(sp)
80210204:	2821883a 	mov	r16,r5
80210208:	2940038f 	ldh	r5,14(r5)
8021020c:	dfc00115 	stw	ra,4(sp)
80210210:	02133fc0 	call	802133fc <_read_r>
80210214:	10000716 	blt	r2,zero,80210234 <__sread+0x38>
80210218:	80c01417 	ldw	r3,80(r16)
8021021c:	1887883a 	add	r3,r3,r2
80210220:	80c01415 	stw	r3,80(r16)
80210224:	dfc00117 	ldw	ra,4(sp)
80210228:	dc000017 	ldw	r16,0(sp)
8021022c:	dec00204 	addi	sp,sp,8
80210230:	f800283a 	ret
80210234:	80c0030b 	ldhu	r3,12(r16)
80210238:	18fbffcc 	andi	r3,r3,61439
8021023c:	80c0030d 	sth	r3,12(r16)
80210240:	dfc00117 	ldw	ra,4(sp)
80210244:	dc000017 	ldw	r16,0(sp)
80210248:	dec00204 	addi	sp,sp,8
8021024c:	f800283a 	ret

80210250 <__seofread>:
80210250:	0005883a 	mov	r2,zero
80210254:	f800283a 	ret

80210258 <__swrite>:
80210258:	2880030b 	ldhu	r2,12(r5)
8021025c:	defffb04 	addi	sp,sp,-20
80210260:	dcc00315 	stw	r19,12(sp)
80210264:	dc800215 	stw	r18,8(sp)
80210268:	dc400115 	stw	r17,4(sp)
8021026c:	dc000015 	stw	r16,0(sp)
80210270:	dfc00415 	stw	ra,16(sp)
80210274:	10c0400c 	andi	r3,r2,256
80210278:	2821883a 	mov	r16,r5
8021027c:	2023883a 	mov	r17,r4
80210280:	3025883a 	mov	r18,r6
80210284:	3827883a 	mov	r19,r7
80210288:	18000526 	beq	r3,zero,802102a0 <__swrite+0x48>
8021028c:	2940038f 	ldh	r5,14(r5)
80210290:	01c00084 	movi	r7,2
80210294:	000d883a 	mov	r6,zero
80210298:	021339c0 	call	8021339c <_lseek_r>
8021029c:	8080030b 	ldhu	r2,12(r16)
802102a0:	8140038f 	ldh	r5,14(r16)
802102a4:	10bbffcc 	andi	r2,r2,61439
802102a8:	980f883a 	mov	r7,r19
802102ac:	900d883a 	mov	r6,r18
802102b0:	8809883a 	mov	r4,r17
802102b4:	8080030d 	sth	r2,12(r16)
802102b8:	dfc00417 	ldw	ra,16(sp)
802102bc:	dcc00317 	ldw	r19,12(sp)
802102c0:	dc800217 	ldw	r18,8(sp)
802102c4:	dc400117 	ldw	r17,4(sp)
802102c8:	dc000017 	ldw	r16,0(sp)
802102cc:	dec00504 	addi	sp,sp,20
802102d0:	0212e681 	jmpi	80212e68 <_write_r>

802102d4 <__sseek>:
802102d4:	defffe04 	addi	sp,sp,-8
802102d8:	dc000015 	stw	r16,0(sp)
802102dc:	2821883a 	mov	r16,r5
802102e0:	2940038f 	ldh	r5,14(r5)
802102e4:	dfc00115 	stw	ra,4(sp)
802102e8:	021339c0 	call	8021339c <_lseek_r>
802102ec:	00ffffc4 	movi	r3,-1
802102f0:	10c00826 	beq	r2,r3,80210314 <__sseek+0x40>
802102f4:	80c0030b 	ldhu	r3,12(r16)
802102f8:	80801415 	stw	r2,80(r16)
802102fc:	18c40014 	ori	r3,r3,4096
80210300:	80c0030d 	sth	r3,12(r16)
80210304:	dfc00117 	ldw	ra,4(sp)
80210308:	dc000017 	ldw	r16,0(sp)
8021030c:	dec00204 	addi	sp,sp,8
80210310:	f800283a 	ret
80210314:	80c0030b 	ldhu	r3,12(r16)
80210318:	18fbffcc 	andi	r3,r3,61439
8021031c:	80c0030d 	sth	r3,12(r16)
80210320:	dfc00117 	ldw	ra,4(sp)
80210324:	dc000017 	ldw	r16,0(sp)
80210328:	dec00204 	addi	sp,sp,8
8021032c:	f800283a 	ret

80210330 <__sclose>:
80210330:	2940038f 	ldh	r5,14(r5)
80210334:	0212ec81 	jmpi	80212ec8 <_close_r>

80210338 <strcmp>:
80210338:	2144b03a 	or	r2,r4,r5
8021033c:	108000cc 	andi	r2,r2,3
80210340:	1000171e 	bne	r2,zero,802103a0 <strcmp+0x68>
80210344:	20800017 	ldw	r2,0(r4)
80210348:	28c00017 	ldw	r3,0(r5)
8021034c:	10c0141e 	bne	r2,r3,802103a0 <strcmp+0x68>
80210350:	027fbff4 	movhi	r9,65279
80210354:	4a7fbfc4 	addi	r9,r9,-257
80210358:	0086303a 	nor	r3,zero,r2
8021035c:	02202074 	movhi	r8,32897
80210360:	1245883a 	add	r2,r2,r9
80210364:	42202004 	addi	r8,r8,-32640
80210368:	10c4703a 	and	r2,r2,r3
8021036c:	1204703a 	and	r2,r2,r8
80210370:	10000226 	beq	r2,zero,8021037c <strcmp+0x44>
80210374:	00002306 	br	80210404 <strcmp+0xcc>
80210378:	1000221e 	bne	r2,zero,80210404 <strcmp+0xcc>
8021037c:	21000104 	addi	r4,r4,4
80210380:	20c00017 	ldw	r3,0(r4)
80210384:	29400104 	addi	r5,r5,4
80210388:	29800017 	ldw	r6,0(r5)
8021038c:	1a4f883a 	add	r7,r3,r9
80210390:	00c4303a 	nor	r2,zero,r3
80210394:	3884703a 	and	r2,r7,r2
80210398:	1204703a 	and	r2,r2,r8
8021039c:	19bff626 	beq	r3,r6,80210378 <__reset+0xfa1f0378>
802103a0:	20800003 	ldbu	r2,0(r4)
802103a4:	10c03fcc 	andi	r3,r2,255
802103a8:	18c0201c 	xori	r3,r3,128
802103ac:	18ffe004 	addi	r3,r3,-128
802103b0:	18000c26 	beq	r3,zero,802103e4 <strcmp+0xac>
802103b4:	29800007 	ldb	r6,0(r5)
802103b8:	19800326 	beq	r3,r6,802103c8 <strcmp+0x90>
802103bc:	00001306 	br	8021040c <strcmp+0xd4>
802103c0:	29800007 	ldb	r6,0(r5)
802103c4:	11800b1e 	bne	r2,r6,802103f4 <strcmp+0xbc>
802103c8:	21000044 	addi	r4,r4,1
802103cc:	20c00003 	ldbu	r3,0(r4)
802103d0:	29400044 	addi	r5,r5,1
802103d4:	18803fcc 	andi	r2,r3,255
802103d8:	1080201c 	xori	r2,r2,128
802103dc:	10bfe004 	addi	r2,r2,-128
802103e0:	103ff71e 	bne	r2,zero,802103c0 <__reset+0xfa1f03c0>
802103e4:	0007883a 	mov	r3,zero
802103e8:	28800003 	ldbu	r2,0(r5)
802103ec:	1885c83a 	sub	r2,r3,r2
802103f0:	f800283a 	ret
802103f4:	28800003 	ldbu	r2,0(r5)
802103f8:	18c03fcc 	andi	r3,r3,255
802103fc:	1885c83a 	sub	r2,r3,r2
80210400:	f800283a 	ret
80210404:	0005883a 	mov	r2,zero
80210408:	f800283a 	ret
8021040c:	10c03fcc 	andi	r3,r2,255
80210410:	003ff506 	br	802103e8 <__reset+0xfa1f03e8>

80210414 <__ssprint_r>:
80210414:	30800217 	ldw	r2,8(r6)
80210418:	defff604 	addi	sp,sp,-40
8021041c:	dc800215 	stw	r18,8(sp)
80210420:	dfc00915 	stw	ra,36(sp)
80210424:	df000815 	stw	fp,32(sp)
80210428:	ddc00715 	stw	r23,28(sp)
8021042c:	dd800615 	stw	r22,24(sp)
80210430:	dd400515 	stw	r21,20(sp)
80210434:	dd000415 	stw	r20,16(sp)
80210438:	dcc00315 	stw	r19,12(sp)
8021043c:	dc400115 	stw	r17,4(sp)
80210440:	dc000015 	stw	r16,0(sp)
80210444:	3025883a 	mov	r18,r6
80210448:	10005826 	beq	r2,zero,802105ac <__ssprint_r+0x198>
8021044c:	2027883a 	mov	r19,r4
80210450:	35c00017 	ldw	r23,0(r6)
80210454:	29000017 	ldw	r4,0(r5)
80210458:	28800217 	ldw	r2,8(r5)
8021045c:	2823883a 	mov	r17,r5
80210460:	0039883a 	mov	fp,zero
80210464:	0021883a 	mov	r16,zero
80210468:	80003926 	beq	r16,zero,80210550 <__ssprint_r+0x13c>
8021046c:	102b883a 	mov	r21,r2
80210470:	102d883a 	mov	r22,r2
80210474:	80803a36 	bltu	r16,r2,80210560 <__ssprint_r+0x14c>
80210478:	88c0030b 	ldhu	r3,12(r17)
8021047c:	1881200c 	andi	r2,r3,1152
80210480:	10002626 	beq	r2,zero,8021051c <__ssprint_r+0x108>
80210484:	88800517 	ldw	r2,20(r17)
80210488:	89400417 	ldw	r5,16(r17)
8021048c:	81800044 	addi	r6,r16,1
80210490:	108f883a 	add	r7,r2,r2
80210494:	3885883a 	add	r2,r7,r2
80210498:	100ed7fa 	srli	r7,r2,31
8021049c:	216dc83a 	sub	r22,r4,r5
802104a0:	3589883a 	add	r4,r6,r22
802104a4:	3885883a 	add	r2,r7,r2
802104a8:	102bd07a 	srai	r21,r2,1
802104ac:	a80d883a 	mov	r6,r21
802104b0:	a900022e 	bgeu	r21,r4,802104bc <__ssprint_r+0xa8>
802104b4:	202b883a 	mov	r21,r4
802104b8:	200d883a 	mov	r6,r4
802104bc:	18c1000c 	andi	r3,r3,1024
802104c0:	18002a26 	beq	r3,zero,8021056c <__ssprint_r+0x158>
802104c4:	300b883a 	mov	r5,r6
802104c8:	9809883a 	mov	r4,r19
802104cc:	020e0600 	call	8020e060 <_malloc_r>
802104d0:	1029883a 	mov	r20,r2
802104d4:	10002c26 	beq	r2,zero,80210588 <__ssprint_r+0x174>
802104d8:	89400417 	ldw	r5,16(r17)
802104dc:	b00d883a 	mov	r6,r22
802104e0:	1009883a 	mov	r4,r2
802104e4:	0206aa00 	call	80206aa0 <memcpy>
802104e8:	8880030b 	ldhu	r2,12(r17)
802104ec:	00fedfc4 	movi	r3,-1153
802104f0:	10c4703a 	and	r2,r2,r3
802104f4:	10802014 	ori	r2,r2,128
802104f8:	8880030d 	sth	r2,12(r17)
802104fc:	a589883a 	add	r4,r20,r22
80210500:	adadc83a 	sub	r22,r21,r22
80210504:	8d400515 	stw	r21,20(r17)
80210508:	8d800215 	stw	r22,8(r17)
8021050c:	8d000415 	stw	r20,16(r17)
80210510:	89000015 	stw	r4,0(r17)
80210514:	802b883a 	mov	r21,r16
80210518:	802d883a 	mov	r22,r16
8021051c:	b00d883a 	mov	r6,r22
80210520:	e00b883a 	mov	r5,fp
80210524:	020e9500 	call	8020e950 <memmove>
80210528:	88800217 	ldw	r2,8(r17)
8021052c:	89000017 	ldw	r4,0(r17)
80210530:	90c00217 	ldw	r3,8(r18)
80210534:	1545c83a 	sub	r2,r2,r21
80210538:	2589883a 	add	r4,r4,r22
8021053c:	88800215 	stw	r2,8(r17)
80210540:	89000015 	stw	r4,0(r17)
80210544:	1c21c83a 	sub	r16,r3,r16
80210548:	94000215 	stw	r16,8(r18)
8021054c:	80001726 	beq	r16,zero,802105ac <__ssprint_r+0x198>
80210550:	bf000017 	ldw	fp,0(r23)
80210554:	bc000117 	ldw	r16,4(r23)
80210558:	bdc00204 	addi	r23,r23,8
8021055c:	003fc206 	br	80210468 <__reset+0xfa1f0468>
80210560:	802b883a 	mov	r21,r16
80210564:	802d883a 	mov	r22,r16
80210568:	003fec06 	br	8021051c <__reset+0xfa1f051c>
8021056c:	9809883a 	mov	r4,r19
80210570:	020fbd00 	call	8020fbd0 <_realloc_r>
80210574:	1029883a 	mov	r20,r2
80210578:	103fe01e 	bne	r2,zero,802104fc <__reset+0xfa1f04fc>
8021057c:	89400417 	ldw	r5,16(r17)
80210580:	9809883a 	mov	r4,r19
80210584:	020d4740 	call	8020d474 <_free_r>
80210588:	88c0030b 	ldhu	r3,12(r17)
8021058c:	00800304 	movi	r2,12
80210590:	98800015 	stw	r2,0(r19)
80210594:	18c01014 	ori	r3,r3,64
80210598:	88c0030d 	sth	r3,12(r17)
8021059c:	00bfffc4 	movi	r2,-1
802105a0:	90000215 	stw	zero,8(r18)
802105a4:	90000115 	stw	zero,4(r18)
802105a8:	00000206 	br	802105b4 <__ssprint_r+0x1a0>
802105ac:	90000115 	stw	zero,4(r18)
802105b0:	0005883a 	mov	r2,zero
802105b4:	dfc00917 	ldw	ra,36(sp)
802105b8:	df000817 	ldw	fp,32(sp)
802105bc:	ddc00717 	ldw	r23,28(sp)
802105c0:	dd800617 	ldw	r22,24(sp)
802105c4:	dd400517 	ldw	r21,20(sp)
802105c8:	dd000417 	ldw	r20,16(sp)
802105cc:	dcc00317 	ldw	r19,12(sp)
802105d0:	dc800217 	ldw	r18,8(sp)
802105d4:	dc400117 	ldw	r17,4(sp)
802105d8:	dc000017 	ldw	r16,0(sp)
802105dc:	dec00a04 	addi	sp,sp,40
802105e0:	f800283a 	ret

802105e4 <___svfiprintf_internal_r>:
802105e4:	2880030b 	ldhu	r2,12(r5)
802105e8:	deffc804 	addi	sp,sp,-224
802105ec:	dcc03115 	stw	r19,196(sp)
802105f0:	dfc03715 	stw	ra,220(sp)
802105f4:	df003615 	stw	fp,216(sp)
802105f8:	ddc03515 	stw	r23,212(sp)
802105fc:	dd803415 	stw	r22,208(sp)
80210600:	dd403315 	stw	r21,204(sp)
80210604:	dd003215 	stw	r20,200(sp)
80210608:	dc803015 	stw	r18,192(sp)
8021060c:	dc402f15 	stw	r17,188(sp)
80210610:	dc002e15 	stw	r16,184(sp)
80210614:	d9402715 	stw	r5,156(sp)
80210618:	d9002a15 	stw	r4,168(sp)
8021061c:	1080200c 	andi	r2,r2,128
80210620:	d9c02315 	stw	r7,140(sp)
80210624:	3027883a 	mov	r19,r6
80210628:	10000226 	beq	r2,zero,80210634 <___svfiprintf_internal_r+0x50>
8021062c:	28800417 	ldw	r2,16(r5)
80210630:	10041d26 	beq	r2,zero,802116a8 <___svfiprintf_internal_r+0x10c4>
80210634:	dac01a04 	addi	r11,sp,104
80210638:	dac01e15 	stw	r11,120(sp)
8021063c:	d8801e17 	ldw	r2,120(sp)
80210640:	dac019c4 	addi	r11,sp,103
80210644:	dd402a17 	ldw	r21,168(sp)
80210648:	ddc02717 	ldw	r23,156(sp)
8021064c:	05a008b4 	movhi	r22,32802
80210650:	052008b4 	movhi	r20,32802
80210654:	dac01f15 	stw	r11,124(sp)
80210658:	12d7c83a 	sub	r11,r2,r11
8021065c:	b5b6ac04 	addi	r22,r22,-9552
80210660:	a536a804 	addi	r20,r20,-9568
80210664:	dec01a15 	stw	sp,104(sp)
80210668:	d8001c15 	stw	zero,112(sp)
8021066c:	d8001b15 	stw	zero,108(sp)
80210670:	d811883a 	mov	r8,sp
80210674:	d8002915 	stw	zero,164(sp)
80210678:	d8002515 	stw	zero,148(sp)
8021067c:	dac02b15 	stw	r11,172(sp)
80210680:	98800007 	ldb	r2,0(r19)
80210684:	1002dd26 	beq	r2,zero,802111fc <___svfiprintf_internal_r+0xc18>
80210688:	00c00944 	movi	r3,37
8021068c:	9823883a 	mov	r17,r19
80210690:	10c0021e 	bne	r2,r3,8021069c <___svfiprintf_internal_r+0xb8>
80210694:	00001406 	br	802106e8 <___svfiprintf_internal_r+0x104>
80210698:	10c00326 	beq	r2,r3,802106a8 <___svfiprintf_internal_r+0xc4>
8021069c:	8c400044 	addi	r17,r17,1
802106a0:	88800007 	ldb	r2,0(r17)
802106a4:	103ffc1e 	bne	r2,zero,80210698 <__reset+0xfa1f0698>
802106a8:	8ce1c83a 	sub	r16,r17,r19
802106ac:	80000e26 	beq	r16,zero,802106e8 <___svfiprintf_internal_r+0x104>
802106b0:	d8c01c17 	ldw	r3,112(sp)
802106b4:	d8801b17 	ldw	r2,108(sp)
802106b8:	44c00015 	stw	r19,0(r8)
802106bc:	1c07883a 	add	r3,r3,r16
802106c0:	10800044 	addi	r2,r2,1
802106c4:	d8c01c15 	stw	r3,112(sp)
802106c8:	44000115 	stw	r16,4(r8)
802106cc:	d8801b15 	stw	r2,108(sp)
802106d0:	00c001c4 	movi	r3,7
802106d4:	18831e16 	blt	r3,r2,80211350 <___svfiprintf_internal_r+0xd6c>
802106d8:	42000204 	addi	r8,r8,8
802106dc:	dac02517 	ldw	r11,148(sp)
802106e0:	5c17883a 	add	r11,r11,r16
802106e4:	dac02515 	stw	r11,148(sp)
802106e8:	88800007 	ldb	r2,0(r17)
802106ec:	1002c526 	beq	r2,zero,80211204 <___svfiprintf_internal_r+0xc20>
802106f0:	88c00047 	ldb	r3,1(r17)
802106f4:	8cc00044 	addi	r19,r17,1
802106f8:	d8001d85 	stb	zero,118(sp)
802106fc:	0009883a 	mov	r4,zero
80210700:	000f883a 	mov	r7,zero
80210704:	043fffc4 	movi	r16,-1
80210708:	d8002415 	stw	zero,144(sp)
8021070c:	0025883a 	mov	r18,zero
80210710:	01401604 	movi	r5,88
80210714:	01800244 	movi	r6,9
80210718:	02800a84 	movi	r10,42
8021071c:	02401b04 	movi	r9,108
80210720:	9cc00044 	addi	r19,r19,1
80210724:	18bff804 	addi	r2,r3,-32
80210728:	2881dd36 	bltu	r5,r2,80210ea0 <___svfiprintf_internal_r+0x8bc>
8021072c:	100490ba 	slli	r2,r2,2
80210730:	02e00874 	movhi	r11,32801
80210734:	5ac1d104 	addi	r11,r11,1860
80210738:	12c5883a 	add	r2,r2,r11
8021073c:	10800017 	ldw	r2,0(r2)
80210740:	1000683a 	jmp	r2
80210744:	80210940 	call	88021094 <__reset+0x2001094>
80210748:	80210ea0 	cmpeqi	zero,r16,-31686
8021074c:	80210ea0 	cmpeqi	zero,r16,-31686
80210750:	80210934 	orhi	zero,r16,33828
80210754:	80210ea0 	cmpeqi	zero,r16,-31686
80210758:	80210ea0 	cmpeqi	zero,r16,-31686
8021075c:	80210ea0 	cmpeqi	zero,r16,-31686
80210760:	80210ea0 	cmpeqi	zero,r16,-31686
80210764:	80210ea0 	cmpeqi	zero,r16,-31686
80210768:	80210ea0 	cmpeqi	zero,r16,-31686
8021076c:	802108a8 	cmpgeui	zero,r16,33826
80210770:	80210a84 	addi	zero,r16,-31702
80210774:	80210ea0 	cmpeqi	zero,r16,-31686
80210778:	802108d4 	ori	zero,r16,33827
8021077c:	80210ed4 	ori	zero,r16,33851
80210780:	80210ea0 	cmpeqi	zero,r16,-31686
80210784:	80210ec8 	cmpgei	zero,r16,-31685
80210788:	80210e68 	cmpgeui	zero,r16,33849
8021078c:	80210e68 	cmpgeui	zero,r16,33849
80210790:	80210e68 	cmpgeui	zero,r16,33849
80210794:	80210e68 	cmpgeui	zero,r16,33849
80210798:	80210e68 	cmpgeui	zero,r16,33849
8021079c:	80210e68 	cmpgeui	zero,r16,33849
802107a0:	80210e68 	cmpgeui	zero,r16,33849
802107a4:	80210e68 	cmpgeui	zero,r16,33849
802107a8:	80210e68 	cmpgeui	zero,r16,33849
802107ac:	80210ea0 	cmpeqi	zero,r16,-31686
802107b0:	80210ea0 	cmpeqi	zero,r16,-31686
802107b4:	80210ea0 	cmpeqi	zero,r16,-31686
802107b8:	80210ea0 	cmpeqi	zero,r16,-31686
802107bc:	80210ea0 	cmpeqi	zero,r16,-31686
802107c0:	80210ea0 	cmpeqi	zero,r16,-31686
802107c4:	80210ea0 	cmpeqi	zero,r16,-31686
802107c8:	80210ea0 	cmpeqi	zero,r16,-31686
802107cc:	80210ea0 	cmpeqi	zero,r16,-31686
802107d0:	80210ea0 	cmpeqi	zero,r16,-31686
802107d4:	80210e04 	addi	zero,r16,-31688
802107d8:	80210ea0 	cmpeqi	zero,r16,-31686
802107dc:	80210ea0 	cmpeqi	zero,r16,-31686
802107e0:	80210ea0 	cmpeqi	zero,r16,-31686
802107e4:	80210ea0 	cmpeqi	zero,r16,-31686
802107e8:	80210ea0 	cmpeqi	zero,r16,-31686
802107ec:	80210ea0 	cmpeqi	zero,r16,-31686
802107f0:	80210ea0 	cmpeqi	zero,r16,-31686
802107f4:	80210ea0 	cmpeqi	zero,r16,-31686
802107f8:	80210ea0 	cmpeqi	zero,r16,-31686
802107fc:	80210ea0 	cmpeqi	zero,r16,-31686
80210800:	80210f7c 	xorhi	zero,r16,33853
80210804:	80210ea0 	cmpeqi	zero,r16,-31686
80210808:	80210ea0 	cmpeqi	zero,r16,-31686
8021080c:	80210ea0 	cmpeqi	zero,r16,-31686
80210810:	80210ea0 	cmpeqi	zero,r16,-31686
80210814:	80210ea0 	cmpeqi	zero,r16,-31686
80210818:	80210f14 	ori	zero,r16,33852
8021081c:	80210ea0 	cmpeqi	zero,r16,-31686
80210820:	80210ea0 	cmpeqi	zero,r16,-31686
80210824:	80210c48 	cmpgei	zero,r16,-31695
80210828:	80210ea0 	cmpeqi	zero,r16,-31686
8021082c:	80210ea0 	cmpeqi	zero,r16,-31686
80210830:	80210ea0 	cmpeqi	zero,r16,-31686
80210834:	80210ea0 	cmpeqi	zero,r16,-31686
80210838:	80210ea0 	cmpeqi	zero,r16,-31686
8021083c:	80210ea0 	cmpeqi	zero,r16,-31686
80210840:	80210ea0 	cmpeqi	zero,r16,-31686
80210844:	80210ea0 	cmpeqi	zero,r16,-31686
80210848:	80210ea0 	cmpeqi	zero,r16,-31686
8021084c:	80210ea0 	cmpeqi	zero,r16,-31686
80210850:	80210b38 	rdprs	zero,r16,-31700
80210854:	80210ce4 	muli	zero,r16,-31693
80210858:	80210ea0 	cmpeqi	zero,r16,-31686
8021085c:	80210ea0 	cmpeqi	zero,r16,-31686
80210860:	80210ea0 	cmpeqi	zero,r16,-31686
80210864:	80210cd8 	cmpnei	zero,r16,-31693
80210868:	80210ce4 	muli	zero,r16,-31693
8021086c:	80210ea0 	cmpeqi	zero,r16,-31686
80210870:	80210ea0 	cmpeqi	zero,r16,-31686
80210874:	80210cc8 	cmpgei	zero,r16,-31693
80210878:	80210ea0 	cmpeqi	zero,r16,-31686
8021087c:	80210c8c 	andi	zero,r16,33842
80210880:	80210a94 	ori	zero,r16,33834
80210884:	802108e0 	cmpeqi	zero,r16,-31709
80210888:	80210df8 	rdprs	zero,r16,-31689
8021088c:	80210ea0 	cmpeqi	zero,r16,-31686
80210890:	80210dac 	andhi	zero,r16,33846
80210894:	80210ea0 	cmpeqi	zero,r16,-31686
80210898:	80210a04 	addi	zero,r16,-31704
8021089c:	80210ea0 	cmpeqi	zero,r16,-31686
802108a0:	80210ea0 	cmpeqi	zero,r16,-31686
802108a4:	80210960 	cmpeqi	zero,r16,-31707
802108a8:	dac02317 	ldw	r11,140(sp)
802108ac:	5ac00017 	ldw	r11,0(r11)
802108b0:	dac02415 	stw	r11,144(sp)
802108b4:	dac02317 	ldw	r11,140(sp)
802108b8:	58800104 	addi	r2,r11,4
802108bc:	dac02417 	ldw	r11,144(sp)
802108c0:	5802e90e 	bge	r11,zero,80211468 <___svfiprintf_internal_r+0xe84>
802108c4:	dac02417 	ldw	r11,144(sp)
802108c8:	d8802315 	stw	r2,140(sp)
802108cc:	02d7c83a 	sub	r11,zero,r11
802108d0:	dac02415 	stw	r11,144(sp)
802108d4:	94800114 	ori	r18,r18,4
802108d8:	98c00007 	ldb	r3,0(r19)
802108dc:	003f9006 	br	80210720 <__reset+0xfa1f0720>
802108e0:	00800c04 	movi	r2,48
802108e4:	dac02317 	ldw	r11,140(sp)
802108e8:	d8801d05 	stb	r2,116(sp)
802108ec:	00801e04 	movi	r2,120
802108f0:	d8801d45 	stb	r2,117(sp)
802108f4:	d8001d85 	stb	zero,118(sp)
802108f8:	58c00104 	addi	r3,r11,4
802108fc:	5f000017 	ldw	fp,0(r11)
80210900:	0013883a 	mov	r9,zero
80210904:	90800094 	ori	r2,r18,2
80210908:	80032b16 	blt	r16,zero,802115b8 <___svfiprintf_internal_r+0xfd4>
8021090c:	00bfdfc4 	movi	r2,-129
80210910:	90a4703a 	and	r18,r18,r2
80210914:	d8c02315 	stw	r3,140(sp)
80210918:	94800094 	ori	r18,r18,2
8021091c:	e002dc26 	beq	fp,zero,80211490 <___svfiprintf_internal_r+0xeac>
80210920:	012008b4 	movhi	r4,32802
80210924:	21364004 	addi	r4,r4,-9984
80210928:	0015883a 	mov	r10,zero
8021092c:	d9002915 	stw	r4,164(sp)
80210930:	00002306 	br	802109c0 <___svfiprintf_internal_r+0x3dc>
80210934:	94800054 	ori	r18,r18,1
80210938:	98c00007 	ldb	r3,0(r19)
8021093c:	003f7806 	br	80210720 <__reset+0xfa1f0720>
80210940:	38803fcc 	andi	r2,r7,255
80210944:	1080201c 	xori	r2,r2,128
80210948:	10bfe004 	addi	r2,r2,-128
8021094c:	1002f31e 	bne	r2,zero,8021151c <___svfiprintf_internal_r+0xf38>
80210950:	01000044 	movi	r4,1
80210954:	01c00804 	movi	r7,32
80210958:	98c00007 	ldb	r3,0(r19)
8021095c:	003f7006 	br	80210720 <__reset+0xfa1f0720>
80210960:	21003fcc 	andi	r4,r4,255
80210964:	2003aa1e 	bne	r4,zero,80211810 <___svfiprintf_internal_r+0x122c>
80210968:	00a008b4 	movhi	r2,32802
8021096c:	10b64004 	addi	r2,r2,-9984
80210970:	d8802915 	stw	r2,164(sp)
80210974:	9080080c 	andi	r2,r18,32
80210978:	1000ba26 	beq	r2,zero,80210c64 <___svfiprintf_internal_r+0x680>
8021097c:	dac02317 	ldw	r11,140(sp)
80210980:	5f000017 	ldw	fp,0(r11)
80210984:	5a400117 	ldw	r9,4(r11)
80210988:	5ac00204 	addi	r11,r11,8
8021098c:	dac02315 	stw	r11,140(sp)
80210990:	9080004c 	andi	r2,r18,1
80210994:	10029026 	beq	r2,zero,802113d8 <___svfiprintf_internal_r+0xdf4>
80210998:	e244b03a 	or	r2,fp,r9
8021099c:	1002d41e 	bne	r2,zero,802114f0 <___svfiprintf_internal_r+0xf0c>
802109a0:	d8001d85 	stb	zero,118(sp)
802109a4:	80030b16 	blt	r16,zero,802115d4 <___svfiprintf_internal_r+0xff0>
802109a8:	00bfdfc4 	movi	r2,-129
802109ac:	90a4703a 	and	r18,r18,r2
802109b0:	0015883a 	mov	r10,zero
802109b4:	80002426 	beq	r16,zero,80210a48 <___svfiprintf_internal_r+0x464>
802109b8:	0039883a 	mov	fp,zero
802109bc:	0013883a 	mov	r9,zero
802109c0:	d9002917 	ldw	r4,164(sp)
802109c4:	dc401a04 	addi	r17,sp,104
802109c8:	e08003cc 	andi	r2,fp,15
802109cc:	4806973a 	slli	r3,r9,28
802109d0:	2085883a 	add	r2,r4,r2
802109d4:	e038d13a 	srli	fp,fp,4
802109d8:	10800003 	ldbu	r2,0(r2)
802109dc:	4812d13a 	srli	r9,r9,4
802109e0:	8c7fffc4 	addi	r17,r17,-1
802109e4:	1f38b03a 	or	fp,r3,fp
802109e8:	88800005 	stb	r2,0(r17)
802109ec:	e244b03a 	or	r2,fp,r9
802109f0:	103ff51e 	bne	r2,zero,802109c8 <__reset+0xfa1f09c8>
802109f4:	dac01e17 	ldw	r11,120(sp)
802109f8:	5c57c83a 	sub	r11,r11,r17
802109fc:	dac02115 	stw	r11,132(sp)
80210a00:	00001406 	br	80210a54 <___svfiprintf_internal_r+0x470>
80210a04:	21003fcc 	andi	r4,r4,255
80210a08:	2003741e 	bne	r4,zero,802117dc <___svfiprintf_internal_r+0x11f8>
80210a0c:	9080080c 	andi	r2,r18,32
80210a10:	10014526 	beq	r2,zero,80210f28 <___svfiprintf_internal_r+0x944>
80210a14:	dac02317 	ldw	r11,140(sp)
80210a18:	d8001d85 	stb	zero,118(sp)
80210a1c:	58c00204 	addi	r3,r11,8
80210a20:	5f000017 	ldw	fp,0(r11)
80210a24:	5a400117 	ldw	r9,4(r11)
80210a28:	8002d916 	blt	r16,zero,80211590 <___svfiprintf_internal_r+0xfac>
80210a2c:	013fdfc4 	movi	r4,-129
80210a30:	e244b03a 	or	r2,fp,r9
80210a34:	d8c02315 	stw	r3,140(sp)
80210a38:	9124703a 	and	r18,r18,r4
80210a3c:	0015883a 	mov	r10,zero
80210a40:	1000b91e 	bne	r2,zero,80210d28 <___svfiprintf_internal_r+0x744>
80210a44:	8002e61e 	bne	r16,zero,802115e0 <___svfiprintf_internal_r+0xffc>
80210a48:	0021883a 	mov	r16,zero
80210a4c:	d8002115 	stw	zero,132(sp)
80210a50:	dc401a04 	addi	r17,sp,104
80210a54:	d8c02117 	ldw	r3,132(sp)
80210a58:	dc002015 	stw	r16,128(sp)
80210a5c:	80c0010e 	bge	r16,r3,80210a64 <___svfiprintf_internal_r+0x480>
80210a60:	d8c02015 	stw	r3,128(sp)
80210a64:	52803fcc 	andi	r10,r10,255
80210a68:	5280201c 	xori	r10,r10,128
80210a6c:	52bfe004 	addi	r10,r10,-128
80210a70:	50003c26 	beq	r10,zero,80210b64 <___svfiprintf_internal_r+0x580>
80210a74:	dac02017 	ldw	r11,128(sp)
80210a78:	5ac00044 	addi	r11,r11,1
80210a7c:	dac02015 	stw	r11,128(sp)
80210a80:	00003806 	br	80210b64 <___svfiprintf_internal_r+0x580>
80210a84:	01000044 	movi	r4,1
80210a88:	01c00ac4 	movi	r7,43
80210a8c:	98c00007 	ldb	r3,0(r19)
80210a90:	003f2306 	br	80210720 <__reset+0xfa1f0720>
80210a94:	21003fcc 	andi	r4,r4,255
80210a98:	2003481e 	bne	r4,zero,802117bc <___svfiprintf_internal_r+0x11d8>
80210a9c:	9080080c 	andi	r2,r18,32
80210aa0:	10013b26 	beq	r2,zero,80210f90 <___svfiprintf_internal_r+0x9ac>
80210aa4:	dac02317 	ldw	r11,140(sp)
80210aa8:	d8001d85 	stb	zero,118(sp)
80210aac:	58800204 	addi	r2,r11,8
80210ab0:	5f000017 	ldw	fp,0(r11)
80210ab4:	5a400117 	ldw	r9,4(r11)
80210ab8:	8002a816 	blt	r16,zero,8021155c <___svfiprintf_internal_r+0xf78>
80210abc:	013fdfc4 	movi	r4,-129
80210ac0:	e246b03a 	or	r3,fp,r9
80210ac4:	d8802315 	stw	r2,140(sp)
80210ac8:	9124703a 	and	r18,r18,r4
80210acc:	18013c26 	beq	r3,zero,80210fc0 <___svfiprintf_internal_r+0x9dc>
80210ad0:	0015883a 	mov	r10,zero
80210ad4:	dc401a04 	addi	r17,sp,104
80210ad8:	e006d0fa 	srli	r3,fp,3
80210adc:	4808977a 	slli	r4,r9,29
80210ae0:	4812d0fa 	srli	r9,r9,3
80210ae4:	e70001cc 	andi	fp,fp,7
80210ae8:	e0800c04 	addi	r2,fp,48
80210aec:	8c7fffc4 	addi	r17,r17,-1
80210af0:	20f8b03a 	or	fp,r4,r3
80210af4:	88800005 	stb	r2,0(r17)
80210af8:	e246b03a 	or	r3,fp,r9
80210afc:	183ff61e 	bne	r3,zero,80210ad8 <__reset+0xfa1f0ad8>
80210b00:	90c0004c 	andi	r3,r18,1
80210b04:	1800a526 	beq	r3,zero,80210d9c <___svfiprintf_internal_r+0x7b8>
80210b08:	10803fcc 	andi	r2,r2,255
80210b0c:	1080201c 	xori	r2,r2,128
80210b10:	10bfe004 	addi	r2,r2,-128
80210b14:	00c00c04 	movi	r3,48
80210b18:	10ffb626 	beq	r2,r3,802109f4 <__reset+0xfa1f09f4>
80210b1c:	88ffffc5 	stb	r3,-1(r17)
80210b20:	d8c01e17 	ldw	r3,120(sp)
80210b24:	88bfffc4 	addi	r2,r17,-1
80210b28:	1023883a 	mov	r17,r2
80210b2c:	1887c83a 	sub	r3,r3,r2
80210b30:	d8c02115 	stw	r3,132(sp)
80210b34:	003fc706 	br	80210a54 <__reset+0xfa1f0a54>
80210b38:	dac02317 	ldw	r11,140(sp)
80210b3c:	00c00044 	movi	r3,1
80210b40:	d8c02015 	stw	r3,128(sp)
80210b44:	58800017 	ldw	r2,0(r11)
80210b48:	5ac00104 	addi	r11,r11,4
80210b4c:	d8001d85 	stb	zero,118(sp)
80210b50:	d8801005 	stb	r2,64(sp)
80210b54:	dac02315 	stw	r11,140(sp)
80210b58:	d8c02115 	stw	r3,132(sp)
80210b5c:	dc401004 	addi	r17,sp,64
80210b60:	0021883a 	mov	r16,zero
80210b64:	90c0008c 	andi	r3,r18,2
80210b68:	d8c02215 	stw	r3,136(sp)
80210b6c:	18000326 	beq	r3,zero,80210b7c <___svfiprintf_internal_r+0x598>
80210b70:	dac02017 	ldw	r11,128(sp)
80210b74:	5ac00084 	addi	r11,r11,2
80210b78:	dac02015 	stw	r11,128(sp)
80210b7c:	90c0210c 	andi	r3,r18,132
80210b80:	d8c02615 	stw	r3,152(sp)
80210b84:	1801131e 	bne	r3,zero,80210fd4 <___svfiprintf_internal_r+0x9f0>
80210b88:	dac02417 	ldw	r11,144(sp)
80210b8c:	d8c02017 	ldw	r3,128(sp)
80210b90:	58f9c83a 	sub	fp,r11,r3
80210b94:	07010f0e 	bge	zero,fp,80210fd4 <___svfiprintf_internal_r+0x9f0>
80210b98:	02400404 	movi	r9,16
80210b9c:	d8c01c17 	ldw	r3,112(sp)
80210ba0:	d8801b17 	ldw	r2,108(sp)
80210ba4:	4f02d60e 	bge	r9,fp,80211700 <___svfiprintf_internal_r+0x111c>
80210ba8:	016008b4 	movhi	r5,32802
80210bac:	2976ac04 	addi	r5,r5,-9552
80210bb0:	d9402815 	stw	r5,160(sp)
80210bb4:	028001c4 	movi	r10,7
80210bb8:	00000306 	br	80210bc8 <___svfiprintf_internal_r+0x5e4>
80210bbc:	e73ffc04 	addi	fp,fp,-16
80210bc0:	42000204 	addi	r8,r8,8
80210bc4:	4f00150e 	bge	r9,fp,80210c1c <___svfiprintf_internal_r+0x638>
80210bc8:	18c00404 	addi	r3,r3,16
80210bcc:	10800044 	addi	r2,r2,1
80210bd0:	45800015 	stw	r22,0(r8)
80210bd4:	42400115 	stw	r9,4(r8)
80210bd8:	d8c01c15 	stw	r3,112(sp)
80210bdc:	d8801b15 	stw	r2,108(sp)
80210be0:	50bff60e 	bge	r10,r2,80210bbc <__reset+0xfa1f0bbc>
80210be4:	d9801a04 	addi	r6,sp,104
80210be8:	b80b883a 	mov	r5,r23
80210bec:	a809883a 	mov	r4,r21
80210bf0:	da402c15 	stw	r9,176(sp)
80210bf4:	da802d15 	stw	r10,180(sp)
80210bf8:	02104140 	call	80210414 <__ssprint_r>
80210bfc:	da402c17 	ldw	r9,176(sp)
80210c00:	da802d17 	ldw	r10,180(sp)
80210c04:	1001851e 	bne	r2,zero,8021121c <___svfiprintf_internal_r+0xc38>
80210c08:	e73ffc04 	addi	fp,fp,-16
80210c0c:	d8c01c17 	ldw	r3,112(sp)
80210c10:	d8801b17 	ldw	r2,108(sp)
80210c14:	d811883a 	mov	r8,sp
80210c18:	4f3feb16 	blt	r9,fp,80210bc8 <__reset+0xfa1f0bc8>
80210c1c:	dac02817 	ldw	r11,160(sp)
80210c20:	e0c7883a 	add	r3,fp,r3
80210c24:	10800044 	addi	r2,r2,1
80210c28:	42c00015 	stw	r11,0(r8)
80210c2c:	47000115 	stw	fp,4(r8)
80210c30:	d8c01c15 	stw	r3,112(sp)
80210c34:	d8801b15 	stw	r2,108(sp)
80210c38:	010001c4 	movi	r4,7
80210c3c:	2081ee16 	blt	r4,r2,802113f8 <___svfiprintf_internal_r+0xe14>
80210c40:	42000204 	addi	r8,r8,8
80210c44:	0000e506 	br	80210fdc <___svfiprintf_internal_r+0x9f8>
80210c48:	21003fcc 	andi	r4,r4,255
80210c4c:	2002dd1e 	bne	r4,zero,802117c4 <___svfiprintf_internal_r+0x11e0>
80210c50:	00a008b4 	movhi	r2,32802
80210c54:	10b63b04 	addi	r2,r2,-10004
80210c58:	d8802915 	stw	r2,164(sp)
80210c5c:	9080080c 	andi	r2,r18,32
80210c60:	103f461e 	bne	r2,zero,8021097c <__reset+0xfa1f097c>
80210c64:	9080040c 	andi	r2,r18,16
80210c68:	10022e1e 	bne	r2,zero,80211524 <___svfiprintf_internal_r+0xf40>
80210c6c:	9080100c 	andi	r2,r18,64
80210c70:	dac02317 	ldw	r11,140(sp)
80210c74:	10027326 	beq	r2,zero,80211644 <___svfiprintf_internal_r+0x1060>
80210c78:	5f00000b 	ldhu	fp,0(r11)
80210c7c:	5ac00104 	addi	r11,r11,4
80210c80:	0013883a 	mov	r9,zero
80210c84:	dac02315 	stw	r11,140(sp)
80210c88:	003f4106 	br	80210990 <__reset+0xfa1f0990>
80210c8c:	21003fcc 	andi	r4,r4,255
80210c90:	2002e11e 	bne	r4,zero,80211818 <___svfiprintf_internal_r+0x1234>
80210c94:	9080080c 	andi	r2,r18,32
80210c98:	1002011e 	bne	r2,zero,802114a0 <___svfiprintf_internal_r+0xebc>
80210c9c:	9080040c 	andi	r2,r18,16
80210ca0:	10023e1e 	bne	r2,zero,8021159c <___svfiprintf_internal_r+0xfb8>
80210ca4:	9480100c 	andi	r18,r18,64
80210ca8:	90023c26 	beq	r18,zero,8021159c <___svfiprintf_internal_r+0xfb8>
80210cac:	dac02317 	ldw	r11,140(sp)
80210cb0:	58800017 	ldw	r2,0(r11)
80210cb4:	5ac00104 	addi	r11,r11,4
80210cb8:	dac02315 	stw	r11,140(sp)
80210cbc:	dac02517 	ldw	r11,148(sp)
80210cc0:	12c0000d 	sth	r11,0(r2)
80210cc4:	003e6e06 	br	80210680 <__reset+0xfa1f0680>
80210cc8:	98c00007 	ldb	r3,0(r19)
80210ccc:	1a422926 	beq	r3,r9,80211574 <___svfiprintf_internal_r+0xf90>
80210cd0:	94800414 	ori	r18,r18,16
80210cd4:	003e9206 	br	80210720 <__reset+0xfa1f0720>
80210cd8:	94801014 	ori	r18,r18,64
80210cdc:	98c00007 	ldb	r3,0(r19)
80210ce0:	003e8f06 	br	80210720 <__reset+0xfa1f0720>
80210ce4:	21003fcc 	andi	r4,r4,255
80210ce8:	2002c71e 	bne	r4,zero,80211808 <___svfiprintf_internal_r+0x1224>
80210cec:	9080080c 	andi	r2,r18,32
80210cf0:	10004926 	beq	r2,zero,80210e18 <___svfiprintf_internal_r+0x834>
80210cf4:	dac02317 	ldw	r11,140(sp)
80210cf8:	58800117 	ldw	r2,4(r11)
80210cfc:	5f000017 	ldw	fp,0(r11)
80210d00:	5ac00204 	addi	r11,r11,8
80210d04:	dac02315 	stw	r11,140(sp)
80210d08:	1013883a 	mov	r9,r2
80210d0c:	10004b16 	blt	r2,zero,80210e3c <___svfiprintf_internal_r+0x858>
80210d10:	da801d83 	ldbu	r10,118(sp)
80210d14:	8001cb16 	blt	r16,zero,80211444 <___svfiprintf_internal_r+0xe60>
80210d18:	00ffdfc4 	movi	r3,-129
80210d1c:	e244b03a 	or	r2,fp,r9
80210d20:	90e4703a 	and	r18,r18,r3
80210d24:	103f4726 	beq	r2,zero,80210a44 <__reset+0xfa1f0a44>
80210d28:	48008c26 	beq	r9,zero,80210f5c <___svfiprintf_internal_r+0x978>
80210d2c:	dc802015 	stw	r18,128(sp)
80210d30:	dc002115 	stw	r16,132(sp)
80210d34:	dc401a04 	addi	r17,sp,104
80210d38:	e021883a 	mov	r16,fp
80210d3c:	da002215 	stw	r8,136(sp)
80210d40:	5039883a 	mov	fp,r10
80210d44:	4825883a 	mov	r18,r9
80210d48:	8009883a 	mov	r4,r16
80210d4c:	900b883a 	mov	r5,r18
80210d50:	01800284 	movi	r6,10
80210d54:	000f883a 	mov	r7,zero
80210d58:	0213d140 	call	80213d14 <__umoddi3>
80210d5c:	10800c04 	addi	r2,r2,48
80210d60:	8c7fffc4 	addi	r17,r17,-1
80210d64:	8009883a 	mov	r4,r16
80210d68:	900b883a 	mov	r5,r18
80210d6c:	88800005 	stb	r2,0(r17)
80210d70:	01800284 	movi	r6,10
80210d74:	000f883a 	mov	r7,zero
80210d78:	021379c0 	call	8021379c <__udivdi3>
80210d7c:	1021883a 	mov	r16,r2
80210d80:	10c4b03a 	or	r2,r2,r3
80210d84:	1825883a 	mov	r18,r3
80210d88:	103fef1e 	bne	r2,zero,80210d48 <__reset+0xfa1f0d48>
80210d8c:	dc802017 	ldw	r18,128(sp)
80210d90:	dc002117 	ldw	r16,132(sp)
80210d94:	da002217 	ldw	r8,136(sp)
80210d98:	e015883a 	mov	r10,fp
80210d9c:	d8c01e17 	ldw	r3,120(sp)
80210da0:	1c47c83a 	sub	r3,r3,r17
80210da4:	d8c02115 	stw	r3,132(sp)
80210da8:	003f2a06 	br	80210a54 <__reset+0xfa1f0a54>
80210dac:	dac02317 	ldw	r11,140(sp)
80210db0:	d8001d85 	stb	zero,118(sp)
80210db4:	5c400017 	ldw	r17,0(r11)
80210db8:	5f000104 	addi	fp,r11,4
80210dbc:	88022f26 	beq	r17,zero,8021167c <___svfiprintf_internal_r+0x1098>
80210dc0:	80022516 	blt	r16,zero,80211658 <___svfiprintf_internal_r+0x1074>
80210dc4:	800d883a 	mov	r6,r16
80210dc8:	000b883a 	mov	r5,zero
80210dcc:	8809883a 	mov	r4,r17
80210dd0:	da002c15 	stw	r8,176(sp)
80210dd4:	020e86c0 	call	8020e86c <memchr>
80210dd8:	da002c17 	ldw	r8,176(sp)
80210ddc:	10026426 	beq	r2,zero,80211770 <___svfiprintf_internal_r+0x118c>
80210de0:	1445c83a 	sub	r2,r2,r17
80210de4:	d8802115 	stw	r2,132(sp)
80210de8:	da801d83 	ldbu	r10,118(sp)
80210dec:	df002315 	stw	fp,140(sp)
80210df0:	0021883a 	mov	r16,zero
80210df4:	003f1706 	br	80210a54 <__reset+0xfa1f0a54>
80210df8:	94800814 	ori	r18,r18,32
80210dfc:	98c00007 	ldb	r3,0(r19)
80210e00:	003e4706 	br	80210720 <__reset+0xfa1f0720>
80210e04:	21003fcc 	andi	r4,r4,255
80210e08:	2002701e 	bne	r4,zero,802117cc <___svfiprintf_internal_r+0x11e8>
80210e0c:	94800414 	ori	r18,r18,16
80210e10:	9080080c 	andi	r2,r18,32
80210e14:	103fb71e 	bne	r2,zero,80210cf4 <__reset+0xfa1f0cf4>
80210e18:	9080040c 	andi	r2,r18,16
80210e1c:	1001ab26 	beq	r2,zero,802114cc <___svfiprintf_internal_r+0xee8>
80210e20:	dac02317 	ldw	r11,140(sp)
80210e24:	5f000017 	ldw	fp,0(r11)
80210e28:	5ac00104 	addi	r11,r11,4
80210e2c:	dac02315 	stw	r11,140(sp)
80210e30:	e013d7fa 	srai	r9,fp,31
80210e34:	4805883a 	mov	r2,r9
80210e38:	103fb50e 	bge	r2,zero,80210d10 <__reset+0xfa1f0d10>
80210e3c:	0739c83a 	sub	fp,zero,fp
80210e40:	02800b44 	movi	r10,45
80210e44:	e004c03a 	cmpne	r2,fp,zero
80210e48:	0253c83a 	sub	r9,zero,r9
80210e4c:	da801d85 	stb	r10,118(sp)
80210e50:	4893c83a 	sub	r9,r9,r2
80210e54:	80023016 	blt	r16,zero,80211718 <___svfiprintf_internal_r+0x1134>
80210e58:	00bfdfc4 	movi	r2,-129
80210e5c:	90a4703a 	and	r18,r18,r2
80210e60:	483fb21e 	bne	r9,zero,80210d2c <__reset+0xfa1f0d2c>
80210e64:	00003d06 	br	80210f5c <___svfiprintf_internal_r+0x978>
80210e68:	9817883a 	mov	r11,r19
80210e6c:	d8002415 	stw	zero,144(sp)
80210e70:	18bff404 	addi	r2,r3,-48
80210e74:	0019883a 	mov	r12,zero
80210e78:	58c00007 	ldb	r3,0(r11)
80210e7c:	630002a4 	muli	r12,r12,10
80210e80:	9cc00044 	addi	r19,r19,1
80210e84:	9817883a 	mov	r11,r19
80210e88:	1319883a 	add	r12,r2,r12
80210e8c:	18bff404 	addi	r2,r3,-48
80210e90:	30bff92e 	bgeu	r6,r2,80210e78 <__reset+0xfa1f0e78>
80210e94:	db002415 	stw	r12,144(sp)
80210e98:	18bff804 	addi	r2,r3,-32
80210e9c:	28be232e 	bgeu	r5,r2,8021072c <__reset+0xfa1f072c>
80210ea0:	21003fcc 	andi	r4,r4,255
80210ea4:	20024b1e 	bne	r4,zero,802117d4 <___svfiprintf_internal_r+0x11f0>
80210ea8:	1800d626 	beq	r3,zero,80211204 <___svfiprintf_internal_r+0xc20>
80210eac:	02c00044 	movi	r11,1
80210eb0:	dac02015 	stw	r11,128(sp)
80210eb4:	d8c01005 	stb	r3,64(sp)
80210eb8:	d8001d85 	stb	zero,118(sp)
80210ebc:	dac02115 	stw	r11,132(sp)
80210ec0:	dc401004 	addi	r17,sp,64
80210ec4:	003f2606 	br	80210b60 <__reset+0xfa1f0b60>
80210ec8:	94802014 	ori	r18,r18,128
80210ecc:	98c00007 	ldb	r3,0(r19)
80210ed0:	003e1306 	br	80210720 <__reset+0xfa1f0720>
80210ed4:	98c00007 	ldb	r3,0(r19)
80210ed8:	9ac00044 	addi	r11,r19,1
80210edc:	1a822b26 	beq	r3,r10,8021178c <___svfiprintf_internal_r+0x11a8>
80210ee0:	18bff404 	addi	r2,r3,-48
80210ee4:	0021883a 	mov	r16,zero
80210ee8:	30821e36 	bltu	r6,r2,80211764 <___svfiprintf_internal_r+0x1180>
80210eec:	58c00007 	ldb	r3,0(r11)
80210ef0:	840002a4 	muli	r16,r16,10
80210ef4:	5cc00044 	addi	r19,r11,1
80210ef8:	9817883a 	mov	r11,r19
80210efc:	80a1883a 	add	r16,r16,r2
80210f00:	18bff404 	addi	r2,r3,-48
80210f04:	30bff92e 	bgeu	r6,r2,80210eec <__reset+0xfa1f0eec>
80210f08:	803e060e 	bge	r16,zero,80210724 <__reset+0xfa1f0724>
80210f0c:	043fffc4 	movi	r16,-1
80210f10:	003e0406 	br	80210724 <__reset+0xfa1f0724>
80210f14:	21003fcc 	andi	r4,r4,255
80210f18:	2002371e 	bne	r4,zero,802117f8 <___svfiprintf_internal_r+0x1214>
80210f1c:	94800414 	ori	r18,r18,16
80210f20:	9080080c 	andi	r2,r18,32
80210f24:	103ebb1e 	bne	r2,zero,80210a14 <__reset+0xfa1f0a14>
80210f28:	9080040c 	andi	r2,r18,16
80210f2c:	10013b26 	beq	r2,zero,8021141c <___svfiprintf_internal_r+0xe38>
80210f30:	dac02317 	ldw	r11,140(sp)
80210f34:	d8001d85 	stb	zero,118(sp)
80210f38:	0013883a 	mov	r9,zero
80210f3c:	58800104 	addi	r2,r11,4
80210f40:	5f000017 	ldw	fp,0(r11)
80210f44:	80013d16 	blt	r16,zero,8021143c <___svfiprintf_internal_r+0xe58>
80210f48:	00ffdfc4 	movi	r3,-129
80210f4c:	d8802315 	stw	r2,140(sp)
80210f50:	90e4703a 	and	r18,r18,r3
80210f54:	0015883a 	mov	r10,zero
80210f58:	e03eba26 	beq	fp,zero,80210a44 <__reset+0xfa1f0a44>
80210f5c:	00800244 	movi	r2,9
80210f60:	173f7236 	bltu	r2,fp,80210d2c <__reset+0xfa1f0d2c>
80210f64:	dac02b17 	ldw	r11,172(sp)
80210f68:	e7000c04 	addi	fp,fp,48
80210f6c:	df0019c5 	stb	fp,103(sp)
80210f70:	dac02115 	stw	r11,132(sp)
80210f74:	dc4019c4 	addi	r17,sp,103
80210f78:	003eb606 	br	80210a54 <__reset+0xfa1f0a54>
80210f7c:	21003fcc 	andi	r4,r4,255
80210f80:	20021f1e 	bne	r4,zero,80211800 <___svfiprintf_internal_r+0x121c>
80210f84:	94800414 	ori	r18,r18,16
80210f88:	9080080c 	andi	r2,r18,32
80210f8c:	103ec51e 	bne	r2,zero,80210aa4 <__reset+0xfa1f0aa4>
80210f90:	9080040c 	andi	r2,r18,16
80210f94:	10016926 	beq	r2,zero,8021153c <___svfiprintf_internal_r+0xf58>
80210f98:	dac02317 	ldw	r11,140(sp)
80210f9c:	d8001d85 	stb	zero,118(sp)
80210fa0:	0013883a 	mov	r9,zero
80210fa4:	58800104 	addi	r2,r11,4
80210fa8:	5f000017 	ldw	fp,0(r11)
80210fac:	80016b16 	blt	r16,zero,8021155c <___svfiprintf_internal_r+0xf78>
80210fb0:	00ffdfc4 	movi	r3,-129
80210fb4:	d8802315 	stw	r2,140(sp)
80210fb8:	90e4703a 	and	r18,r18,r3
80210fbc:	e03ec41e 	bne	fp,zero,80210ad0 <__reset+0xfa1f0ad0>
80210fc0:	0015883a 	mov	r10,zero
80210fc4:	8001c226 	beq	r16,zero,802116d0 <___svfiprintf_internal_r+0x10ec>
80210fc8:	0039883a 	mov	fp,zero
80210fcc:	0013883a 	mov	r9,zero
80210fd0:	003ec006 	br	80210ad4 <__reset+0xfa1f0ad4>
80210fd4:	d8c01c17 	ldw	r3,112(sp)
80210fd8:	d8801b17 	ldw	r2,108(sp)
80210fdc:	d9001d87 	ldb	r4,118(sp)
80210fe0:	20000b26 	beq	r4,zero,80211010 <___svfiprintf_internal_r+0xa2c>
80210fe4:	d9001d84 	addi	r4,sp,118
80210fe8:	18c00044 	addi	r3,r3,1
80210fec:	10800044 	addi	r2,r2,1
80210ff0:	41000015 	stw	r4,0(r8)
80210ff4:	01000044 	movi	r4,1
80210ff8:	41000115 	stw	r4,4(r8)
80210ffc:	d8c01c15 	stw	r3,112(sp)
80211000:	d8801b15 	stw	r2,108(sp)
80211004:	010001c4 	movi	r4,7
80211008:	2080e116 	blt	r4,r2,80211390 <___svfiprintf_internal_r+0xdac>
8021100c:	42000204 	addi	r8,r8,8
80211010:	dac02217 	ldw	r11,136(sp)
80211014:	58000b26 	beq	r11,zero,80211044 <___svfiprintf_internal_r+0xa60>
80211018:	d9001d04 	addi	r4,sp,116
8021101c:	18c00084 	addi	r3,r3,2
80211020:	10800044 	addi	r2,r2,1
80211024:	41000015 	stw	r4,0(r8)
80211028:	01000084 	movi	r4,2
8021102c:	41000115 	stw	r4,4(r8)
80211030:	d8c01c15 	stw	r3,112(sp)
80211034:	d8801b15 	stw	r2,108(sp)
80211038:	010001c4 	movi	r4,7
8021103c:	2080dd16 	blt	r4,r2,802113b4 <___svfiprintf_internal_r+0xdd0>
80211040:	42000204 	addi	r8,r8,8
80211044:	dac02617 	ldw	r11,152(sp)
80211048:	01002004 	movi	r4,128
8021104c:	59008426 	beq	r11,r4,80211260 <___svfiprintf_internal_r+0xc7c>
80211050:	dac02117 	ldw	r11,132(sp)
80211054:	82e1c83a 	sub	r16,r16,r11
80211058:	0400270e 	bge	zero,r16,802110f8 <___svfiprintf_internal_r+0xb14>
8021105c:	01c00404 	movi	r7,16
80211060:	3c016a0e 	bge	r7,r16,8021160c <___svfiprintf_internal_r+0x1028>
80211064:	016008b4 	movhi	r5,32802
80211068:	2976a804 	addi	r5,r5,-9568
8021106c:	d9402215 	stw	r5,136(sp)
80211070:	070001c4 	movi	fp,7
80211074:	00000306 	br	80211084 <___svfiprintf_internal_r+0xaa0>
80211078:	843ffc04 	addi	r16,r16,-16
8021107c:	42000204 	addi	r8,r8,8
80211080:	3c00130e 	bge	r7,r16,802110d0 <___svfiprintf_internal_r+0xaec>
80211084:	18c00404 	addi	r3,r3,16
80211088:	10800044 	addi	r2,r2,1
8021108c:	45000015 	stw	r20,0(r8)
80211090:	41c00115 	stw	r7,4(r8)
80211094:	d8c01c15 	stw	r3,112(sp)
80211098:	d8801b15 	stw	r2,108(sp)
8021109c:	e0bff60e 	bge	fp,r2,80211078 <__reset+0xfa1f1078>
802110a0:	d9801a04 	addi	r6,sp,104
802110a4:	b80b883a 	mov	r5,r23
802110a8:	a809883a 	mov	r4,r21
802110ac:	d9c02c15 	stw	r7,176(sp)
802110b0:	02104140 	call	80210414 <__ssprint_r>
802110b4:	d9c02c17 	ldw	r7,176(sp)
802110b8:	1000581e 	bne	r2,zero,8021121c <___svfiprintf_internal_r+0xc38>
802110bc:	843ffc04 	addi	r16,r16,-16
802110c0:	d8c01c17 	ldw	r3,112(sp)
802110c4:	d8801b17 	ldw	r2,108(sp)
802110c8:	d811883a 	mov	r8,sp
802110cc:	3c3fed16 	blt	r7,r16,80211084 <__reset+0xfa1f1084>
802110d0:	dac02217 	ldw	r11,136(sp)
802110d4:	1c07883a 	add	r3,r3,r16
802110d8:	10800044 	addi	r2,r2,1
802110dc:	42c00015 	stw	r11,0(r8)
802110e0:	44000115 	stw	r16,4(r8)
802110e4:	d8c01c15 	stw	r3,112(sp)
802110e8:	d8801b15 	stw	r2,108(sp)
802110ec:	010001c4 	movi	r4,7
802110f0:	20809e16 	blt	r4,r2,8021136c <___svfiprintf_internal_r+0xd88>
802110f4:	42000204 	addi	r8,r8,8
802110f8:	dac02117 	ldw	r11,132(sp)
802110fc:	10800044 	addi	r2,r2,1
80211100:	44400015 	stw	r17,0(r8)
80211104:	58c7883a 	add	r3,r11,r3
80211108:	42c00115 	stw	r11,4(r8)
8021110c:	d8c01c15 	stw	r3,112(sp)
80211110:	d8801b15 	stw	r2,108(sp)
80211114:	010001c4 	movi	r4,7
80211118:	20807f16 	blt	r4,r2,80211318 <___svfiprintf_internal_r+0xd34>
8021111c:	42000204 	addi	r8,r8,8
80211120:	9480010c 	andi	r18,r18,4
80211124:	90002926 	beq	r18,zero,802111cc <___svfiprintf_internal_r+0xbe8>
80211128:	dac02417 	ldw	r11,144(sp)
8021112c:	d8802017 	ldw	r2,128(sp)
80211130:	58a1c83a 	sub	r16,r11,r2
80211134:	0400250e 	bge	zero,r16,802111cc <___svfiprintf_internal_r+0xbe8>
80211138:	04400404 	movi	r17,16
8021113c:	d8801b17 	ldw	r2,108(sp)
80211140:	8c017c0e 	bge	r17,r16,80211734 <___svfiprintf_internal_r+0x1150>
80211144:	016008b4 	movhi	r5,32802
80211148:	2976ac04 	addi	r5,r5,-9552
8021114c:	d9402815 	stw	r5,160(sp)
80211150:	048001c4 	movi	r18,7
80211154:	00000306 	br	80211164 <___svfiprintf_internal_r+0xb80>
80211158:	843ffc04 	addi	r16,r16,-16
8021115c:	42000204 	addi	r8,r8,8
80211160:	8c00110e 	bge	r17,r16,802111a8 <___svfiprintf_internal_r+0xbc4>
80211164:	18c00404 	addi	r3,r3,16
80211168:	10800044 	addi	r2,r2,1
8021116c:	45800015 	stw	r22,0(r8)
80211170:	44400115 	stw	r17,4(r8)
80211174:	d8c01c15 	stw	r3,112(sp)
80211178:	d8801b15 	stw	r2,108(sp)
8021117c:	90bff60e 	bge	r18,r2,80211158 <__reset+0xfa1f1158>
80211180:	d9801a04 	addi	r6,sp,104
80211184:	b80b883a 	mov	r5,r23
80211188:	a809883a 	mov	r4,r21
8021118c:	02104140 	call	80210414 <__ssprint_r>
80211190:	1000221e 	bne	r2,zero,8021121c <___svfiprintf_internal_r+0xc38>
80211194:	843ffc04 	addi	r16,r16,-16
80211198:	d8c01c17 	ldw	r3,112(sp)
8021119c:	d8801b17 	ldw	r2,108(sp)
802111a0:	d811883a 	mov	r8,sp
802111a4:	8c3fef16 	blt	r17,r16,80211164 <__reset+0xfa1f1164>
802111a8:	dac02817 	ldw	r11,160(sp)
802111ac:	1c07883a 	add	r3,r3,r16
802111b0:	10800044 	addi	r2,r2,1
802111b4:	42c00015 	stw	r11,0(r8)
802111b8:	44000115 	stw	r16,4(r8)
802111bc:	d8c01c15 	stw	r3,112(sp)
802111c0:	d8801b15 	stw	r2,108(sp)
802111c4:	010001c4 	movi	r4,7
802111c8:	2080aa16 	blt	r4,r2,80211474 <___svfiprintf_internal_r+0xe90>
802111cc:	d8802417 	ldw	r2,144(sp)
802111d0:	dac02017 	ldw	r11,128(sp)
802111d4:	12c0010e 	bge	r2,r11,802111dc <___svfiprintf_internal_r+0xbf8>
802111d8:	5805883a 	mov	r2,r11
802111dc:	dac02517 	ldw	r11,148(sp)
802111e0:	5897883a 	add	r11,r11,r2
802111e4:	dac02515 	stw	r11,148(sp)
802111e8:	1800531e 	bne	r3,zero,80211338 <___svfiprintf_internal_r+0xd54>
802111ec:	98800007 	ldb	r2,0(r19)
802111f0:	d8001b15 	stw	zero,108(sp)
802111f4:	d811883a 	mov	r8,sp
802111f8:	103d231e 	bne	r2,zero,80210688 <__reset+0xfa1f0688>
802111fc:	9823883a 	mov	r17,r19
80211200:	003d3906 	br	802106e8 <__reset+0xfa1f06e8>
80211204:	d8801c17 	ldw	r2,112(sp)
80211208:	10000426 	beq	r2,zero,8021121c <___svfiprintf_internal_r+0xc38>
8021120c:	d9402717 	ldw	r5,156(sp)
80211210:	d9002a17 	ldw	r4,168(sp)
80211214:	d9801a04 	addi	r6,sp,104
80211218:	02104140 	call	80210414 <__ssprint_r>
8021121c:	dac02717 	ldw	r11,156(sp)
80211220:	d8802517 	ldw	r2,148(sp)
80211224:	58c0030b 	ldhu	r3,12(r11)
80211228:	18c0100c 	andi	r3,r3,64
8021122c:	1801381e 	bne	r3,zero,80211710 <___svfiprintf_internal_r+0x112c>
80211230:	dfc03717 	ldw	ra,220(sp)
80211234:	df003617 	ldw	fp,216(sp)
80211238:	ddc03517 	ldw	r23,212(sp)
8021123c:	dd803417 	ldw	r22,208(sp)
80211240:	dd403317 	ldw	r21,204(sp)
80211244:	dd003217 	ldw	r20,200(sp)
80211248:	dcc03117 	ldw	r19,196(sp)
8021124c:	dc803017 	ldw	r18,192(sp)
80211250:	dc402f17 	ldw	r17,188(sp)
80211254:	dc002e17 	ldw	r16,184(sp)
80211258:	dec03804 	addi	sp,sp,224
8021125c:	f800283a 	ret
80211260:	dac02417 	ldw	r11,144(sp)
80211264:	d9002017 	ldw	r4,128(sp)
80211268:	5939c83a 	sub	fp,r11,r4
8021126c:	073f780e 	bge	zero,fp,80211050 <__reset+0xfa1f1050>
80211270:	02400404 	movi	r9,16
80211274:	4f01370e 	bge	r9,fp,80211754 <___svfiprintf_internal_r+0x1170>
80211278:	02e008b4 	movhi	r11,32802
8021127c:	5af6a804 	addi	r11,r11,-9568
80211280:	dac02215 	stw	r11,136(sp)
80211284:	028001c4 	movi	r10,7
80211288:	00000306 	br	80211298 <___svfiprintf_internal_r+0xcb4>
8021128c:	e73ffc04 	addi	fp,fp,-16
80211290:	42000204 	addi	r8,r8,8
80211294:	4f00150e 	bge	r9,fp,802112ec <___svfiprintf_internal_r+0xd08>
80211298:	18c00404 	addi	r3,r3,16
8021129c:	10800044 	addi	r2,r2,1
802112a0:	45000015 	stw	r20,0(r8)
802112a4:	42400115 	stw	r9,4(r8)
802112a8:	d8c01c15 	stw	r3,112(sp)
802112ac:	d8801b15 	stw	r2,108(sp)
802112b0:	50bff60e 	bge	r10,r2,8021128c <__reset+0xfa1f128c>
802112b4:	d9801a04 	addi	r6,sp,104
802112b8:	b80b883a 	mov	r5,r23
802112bc:	a809883a 	mov	r4,r21
802112c0:	da402c15 	stw	r9,176(sp)
802112c4:	da802d15 	stw	r10,180(sp)
802112c8:	02104140 	call	80210414 <__ssprint_r>
802112cc:	da402c17 	ldw	r9,176(sp)
802112d0:	da802d17 	ldw	r10,180(sp)
802112d4:	103fd11e 	bne	r2,zero,8021121c <__reset+0xfa1f121c>
802112d8:	e73ffc04 	addi	fp,fp,-16
802112dc:	d8c01c17 	ldw	r3,112(sp)
802112e0:	d8801b17 	ldw	r2,108(sp)
802112e4:	d811883a 	mov	r8,sp
802112e8:	4f3feb16 	blt	r9,fp,80211298 <__reset+0xfa1f1298>
802112ec:	dac02217 	ldw	r11,136(sp)
802112f0:	1f07883a 	add	r3,r3,fp
802112f4:	10800044 	addi	r2,r2,1
802112f8:	42c00015 	stw	r11,0(r8)
802112fc:	47000115 	stw	fp,4(r8)
80211300:	d8c01c15 	stw	r3,112(sp)
80211304:	d8801b15 	stw	r2,108(sp)
80211308:	010001c4 	movi	r4,7
8021130c:	2080b616 	blt	r4,r2,802115e8 <___svfiprintf_internal_r+0x1004>
80211310:	42000204 	addi	r8,r8,8
80211314:	003f4e06 	br	80211050 <__reset+0xfa1f1050>
80211318:	d9801a04 	addi	r6,sp,104
8021131c:	b80b883a 	mov	r5,r23
80211320:	a809883a 	mov	r4,r21
80211324:	02104140 	call	80210414 <__ssprint_r>
80211328:	103fbc1e 	bne	r2,zero,8021121c <__reset+0xfa1f121c>
8021132c:	d8c01c17 	ldw	r3,112(sp)
80211330:	d811883a 	mov	r8,sp
80211334:	003f7a06 	br	80211120 <__reset+0xfa1f1120>
80211338:	d9801a04 	addi	r6,sp,104
8021133c:	b80b883a 	mov	r5,r23
80211340:	a809883a 	mov	r4,r21
80211344:	02104140 	call	80210414 <__ssprint_r>
80211348:	103fa826 	beq	r2,zero,802111ec <__reset+0xfa1f11ec>
8021134c:	003fb306 	br	8021121c <__reset+0xfa1f121c>
80211350:	d9801a04 	addi	r6,sp,104
80211354:	b80b883a 	mov	r5,r23
80211358:	a809883a 	mov	r4,r21
8021135c:	02104140 	call	80210414 <__ssprint_r>
80211360:	103fae1e 	bne	r2,zero,8021121c <__reset+0xfa1f121c>
80211364:	d811883a 	mov	r8,sp
80211368:	003cdc06 	br	802106dc <__reset+0xfa1f06dc>
8021136c:	d9801a04 	addi	r6,sp,104
80211370:	b80b883a 	mov	r5,r23
80211374:	a809883a 	mov	r4,r21
80211378:	02104140 	call	80210414 <__ssprint_r>
8021137c:	103fa71e 	bne	r2,zero,8021121c <__reset+0xfa1f121c>
80211380:	d8c01c17 	ldw	r3,112(sp)
80211384:	d8801b17 	ldw	r2,108(sp)
80211388:	d811883a 	mov	r8,sp
8021138c:	003f5a06 	br	802110f8 <__reset+0xfa1f10f8>
80211390:	d9801a04 	addi	r6,sp,104
80211394:	b80b883a 	mov	r5,r23
80211398:	a809883a 	mov	r4,r21
8021139c:	02104140 	call	80210414 <__ssprint_r>
802113a0:	103f9e1e 	bne	r2,zero,8021121c <__reset+0xfa1f121c>
802113a4:	d8c01c17 	ldw	r3,112(sp)
802113a8:	d8801b17 	ldw	r2,108(sp)
802113ac:	d811883a 	mov	r8,sp
802113b0:	003f1706 	br	80211010 <__reset+0xfa1f1010>
802113b4:	d9801a04 	addi	r6,sp,104
802113b8:	b80b883a 	mov	r5,r23
802113bc:	a809883a 	mov	r4,r21
802113c0:	02104140 	call	80210414 <__ssprint_r>
802113c4:	103f951e 	bne	r2,zero,8021121c <__reset+0xfa1f121c>
802113c8:	d8c01c17 	ldw	r3,112(sp)
802113cc:	d8801b17 	ldw	r2,108(sp)
802113d0:	d811883a 	mov	r8,sp
802113d4:	003f1b06 	br	80211044 <__reset+0xfa1f1044>
802113d8:	d8001d85 	stb	zero,118(sp)
802113dc:	80007b16 	blt	r16,zero,802115cc <___svfiprintf_internal_r+0xfe8>
802113e0:	00ffdfc4 	movi	r3,-129
802113e4:	e244b03a 	or	r2,fp,r9
802113e8:	90e4703a 	and	r18,r18,r3
802113ec:	103d7026 	beq	r2,zero,802109b0 <__reset+0xfa1f09b0>
802113f0:	0015883a 	mov	r10,zero
802113f4:	003d7206 	br	802109c0 <__reset+0xfa1f09c0>
802113f8:	d9801a04 	addi	r6,sp,104
802113fc:	b80b883a 	mov	r5,r23
80211400:	a809883a 	mov	r4,r21
80211404:	02104140 	call	80210414 <__ssprint_r>
80211408:	103f841e 	bne	r2,zero,8021121c <__reset+0xfa1f121c>
8021140c:	d8c01c17 	ldw	r3,112(sp)
80211410:	d8801b17 	ldw	r2,108(sp)
80211414:	d811883a 	mov	r8,sp
80211418:	003ef006 	br	80210fdc <__reset+0xfa1f0fdc>
8021141c:	9080100c 	andi	r2,r18,64
80211420:	d8001d85 	stb	zero,118(sp)
80211424:	dac02317 	ldw	r11,140(sp)
80211428:	10008126 	beq	r2,zero,80211630 <___svfiprintf_internal_r+0x104c>
8021142c:	58800104 	addi	r2,r11,4
80211430:	5f00000b 	ldhu	fp,0(r11)
80211434:	0013883a 	mov	r9,zero
80211438:	803ec30e 	bge	r16,zero,80210f48 <__reset+0xfa1f0f48>
8021143c:	d8802315 	stw	r2,140(sp)
80211440:	0015883a 	mov	r10,zero
80211444:	e244b03a 	or	r2,fp,r9
80211448:	103e371e 	bne	r2,zero,80210d28 <__reset+0xfa1f0d28>
8021144c:	00800044 	movi	r2,1
80211450:	10803fcc 	andi	r2,r2,255
80211454:	00c00044 	movi	r3,1
80211458:	10c06126 	beq	r2,r3,802115e0 <___svfiprintf_internal_r+0xffc>
8021145c:	00c00084 	movi	r3,2
80211460:	10fd5526 	beq	r2,r3,802109b8 <__reset+0xfa1f09b8>
80211464:	003ed806 	br	80210fc8 <__reset+0xfa1f0fc8>
80211468:	d8802315 	stw	r2,140(sp)
8021146c:	98c00007 	ldb	r3,0(r19)
80211470:	003cab06 	br	80210720 <__reset+0xfa1f0720>
80211474:	d9801a04 	addi	r6,sp,104
80211478:	b80b883a 	mov	r5,r23
8021147c:	a809883a 	mov	r4,r21
80211480:	02104140 	call	80210414 <__ssprint_r>
80211484:	103f651e 	bne	r2,zero,8021121c <__reset+0xfa1f121c>
80211488:	d8c01c17 	ldw	r3,112(sp)
8021148c:	003f4f06 	br	802111cc <__reset+0xfa1f11cc>
80211490:	00a008b4 	movhi	r2,32802
80211494:	10b64004 	addi	r2,r2,-9984
80211498:	d8802915 	stw	r2,164(sp)
8021149c:	003d4406 	br	802109b0 <__reset+0xfa1f09b0>
802114a0:	dac02317 	ldw	r11,140(sp)
802114a4:	58800017 	ldw	r2,0(r11)
802114a8:	dac02517 	ldw	r11,148(sp)
802114ac:	5807d7fa 	srai	r3,r11,31
802114b0:	dac02317 	ldw	r11,140(sp)
802114b4:	10c00115 	stw	r3,4(r2)
802114b8:	5ac00104 	addi	r11,r11,4
802114bc:	dac02315 	stw	r11,140(sp)
802114c0:	dac02517 	ldw	r11,148(sp)
802114c4:	12c00015 	stw	r11,0(r2)
802114c8:	003c6d06 	br	80210680 <__reset+0xfa1f0680>
802114cc:	9080100c 	andi	r2,r18,64
802114d0:	dac02317 	ldw	r11,140(sp)
802114d4:	103e5326 	beq	r2,zero,80210e24 <__reset+0xfa1f0e24>
802114d8:	5f00000f 	ldh	fp,0(r11)
802114dc:	5ac00104 	addi	r11,r11,4
802114e0:	dac02315 	stw	r11,140(sp)
802114e4:	e013d7fa 	srai	r9,fp,31
802114e8:	4805883a 	mov	r2,r9
802114ec:	003e0706 	br	80210d0c <__reset+0xfa1f0d0c>
802114f0:	00800c04 	movi	r2,48
802114f4:	d8801d05 	stb	r2,116(sp)
802114f8:	d8c01d45 	stb	r3,117(sp)
802114fc:	d8001d85 	stb	zero,118(sp)
80211500:	90800094 	ori	r2,r18,2
80211504:	80008f16 	blt	r16,zero,80211744 <___svfiprintf_internal_r+0x1160>
80211508:	00bfdfc4 	movi	r2,-129
8021150c:	90a4703a 	and	r18,r18,r2
80211510:	94800094 	ori	r18,r18,2
80211514:	0015883a 	mov	r10,zero
80211518:	003d2906 	br	802109c0 <__reset+0xfa1f09c0>
8021151c:	98c00007 	ldb	r3,0(r19)
80211520:	003c7f06 	br	80210720 <__reset+0xfa1f0720>
80211524:	dac02317 	ldw	r11,140(sp)
80211528:	0013883a 	mov	r9,zero
8021152c:	5f000017 	ldw	fp,0(r11)
80211530:	5ac00104 	addi	r11,r11,4
80211534:	dac02315 	stw	r11,140(sp)
80211538:	003d1506 	br	80210990 <__reset+0xfa1f0990>
8021153c:	9080100c 	andi	r2,r18,64
80211540:	d8001d85 	stb	zero,118(sp)
80211544:	dac02317 	ldw	r11,140(sp)
80211548:	10003426 	beq	r2,zero,8021161c <___svfiprintf_internal_r+0x1038>
8021154c:	58800104 	addi	r2,r11,4
80211550:	5f00000b 	ldhu	fp,0(r11)
80211554:	0013883a 	mov	r9,zero
80211558:	803e950e 	bge	r16,zero,80210fb0 <__reset+0xfa1f0fb0>
8021155c:	e246b03a 	or	r3,fp,r9
80211560:	d8802315 	stw	r2,140(sp)
80211564:	183d5a1e 	bne	r3,zero,80210ad0 <__reset+0xfa1f0ad0>
80211568:	0015883a 	mov	r10,zero
8021156c:	0005883a 	mov	r2,zero
80211570:	003fb706 	br	80211450 <__reset+0xfa1f1450>
80211574:	98c00043 	ldbu	r3,1(r19)
80211578:	94800814 	ori	r18,r18,32
8021157c:	9cc00044 	addi	r19,r19,1
80211580:	18c03fcc 	andi	r3,r3,255
80211584:	18c0201c 	xori	r3,r3,128
80211588:	18ffe004 	addi	r3,r3,-128
8021158c:	003c6406 	br	80210720 <__reset+0xfa1f0720>
80211590:	d8c02315 	stw	r3,140(sp)
80211594:	0015883a 	mov	r10,zero
80211598:	003faa06 	br	80211444 <__reset+0xfa1f1444>
8021159c:	dac02317 	ldw	r11,140(sp)
802115a0:	58800017 	ldw	r2,0(r11)
802115a4:	5ac00104 	addi	r11,r11,4
802115a8:	dac02315 	stw	r11,140(sp)
802115ac:	dac02517 	ldw	r11,148(sp)
802115b0:	12c00015 	stw	r11,0(r2)
802115b4:	003c3206 	br	80210680 <__reset+0xfa1f0680>
802115b8:	012008b4 	movhi	r4,32802
802115bc:	21364004 	addi	r4,r4,-9984
802115c0:	d9002915 	stw	r4,164(sp)
802115c4:	d8c02315 	stw	r3,140(sp)
802115c8:	1025883a 	mov	r18,r2
802115cc:	e244b03a 	or	r2,fp,r9
802115d0:	103f871e 	bne	r2,zero,802113f0 <__reset+0xfa1f13f0>
802115d4:	0015883a 	mov	r10,zero
802115d8:	00800084 	movi	r2,2
802115dc:	003f9c06 	br	80211450 <__reset+0xfa1f1450>
802115e0:	0039883a 	mov	fp,zero
802115e4:	003e5f06 	br	80210f64 <__reset+0xfa1f0f64>
802115e8:	d9801a04 	addi	r6,sp,104
802115ec:	b80b883a 	mov	r5,r23
802115f0:	a809883a 	mov	r4,r21
802115f4:	02104140 	call	80210414 <__ssprint_r>
802115f8:	103f081e 	bne	r2,zero,8021121c <__reset+0xfa1f121c>
802115fc:	d8c01c17 	ldw	r3,112(sp)
80211600:	d8801b17 	ldw	r2,108(sp)
80211604:	d811883a 	mov	r8,sp
80211608:	003e9106 	br	80211050 <__reset+0xfa1f1050>
8021160c:	012008b4 	movhi	r4,32802
80211610:	2136a804 	addi	r4,r4,-9568
80211614:	d9002215 	stw	r4,136(sp)
80211618:	003ead06 	br	802110d0 <__reset+0xfa1f10d0>
8021161c:	58800104 	addi	r2,r11,4
80211620:	5f000017 	ldw	fp,0(r11)
80211624:	0013883a 	mov	r9,zero
80211628:	803e610e 	bge	r16,zero,80210fb0 <__reset+0xfa1f0fb0>
8021162c:	003fcb06 	br	8021155c <__reset+0xfa1f155c>
80211630:	58800104 	addi	r2,r11,4
80211634:	5f000017 	ldw	fp,0(r11)
80211638:	0013883a 	mov	r9,zero
8021163c:	803e420e 	bge	r16,zero,80210f48 <__reset+0xfa1f0f48>
80211640:	003f7e06 	br	8021143c <__reset+0xfa1f143c>
80211644:	5f000017 	ldw	fp,0(r11)
80211648:	5ac00104 	addi	r11,r11,4
8021164c:	0013883a 	mov	r9,zero
80211650:	dac02315 	stw	r11,140(sp)
80211654:	003cce06 	br	80210990 <__reset+0xfa1f0990>
80211658:	8809883a 	mov	r4,r17
8021165c:	da002c15 	stw	r8,176(sp)
80211660:	0206dec0 	call	80206dec <strlen>
80211664:	d8802115 	stw	r2,132(sp)
80211668:	da801d83 	ldbu	r10,118(sp)
8021166c:	df002315 	stw	fp,140(sp)
80211670:	0021883a 	mov	r16,zero
80211674:	da002c17 	ldw	r8,176(sp)
80211678:	003cf606 	br	80210a54 <__reset+0xfa1f0a54>
8021167c:	00800184 	movi	r2,6
80211680:	1400012e 	bgeu	r2,r16,80211688 <___svfiprintf_internal_r+0x10a4>
80211684:	1021883a 	mov	r16,r2
80211688:	dc002115 	stw	r16,132(sp)
8021168c:	8005883a 	mov	r2,r16
80211690:	80003c16 	blt	r16,zero,80211784 <___svfiprintf_internal_r+0x11a0>
80211694:	046008b4 	movhi	r17,32802
80211698:	d8802015 	stw	r2,128(sp)
8021169c:	df002315 	stw	fp,140(sp)
802116a0:	8c764504 	addi	r17,r17,-9964
802116a4:	003d2e06 	br	80210b60 <__reset+0xfa1f0b60>
802116a8:	04001004 	movi	r16,64
802116ac:	800b883a 	mov	r5,r16
802116b0:	020e0600 	call	8020e060 <_malloc_r>
802116b4:	dac02717 	ldw	r11,156(sp)
802116b8:	58800015 	stw	r2,0(r11)
802116bc:	58800415 	stw	r2,16(r11)
802116c0:	10004826 	beq	r2,zero,802117e4 <___svfiprintf_internal_r+0x1200>
802116c4:	dac02717 	ldw	r11,156(sp)
802116c8:	5c000515 	stw	r16,20(r11)
802116cc:	003bd906 	br	80210634 <__reset+0xfa1f0634>
802116d0:	9080004c 	andi	r2,r18,1
802116d4:	0015883a 	mov	r10,zero
802116d8:	10000626 	beq	r2,zero,802116f4 <___svfiprintf_internal_r+0x1110>
802116dc:	dac02b17 	ldw	r11,172(sp)
802116e0:	00800c04 	movi	r2,48
802116e4:	d88019c5 	stb	r2,103(sp)
802116e8:	dac02115 	stw	r11,132(sp)
802116ec:	dc4019c4 	addi	r17,sp,103
802116f0:	003cd806 	br	80210a54 <__reset+0xfa1f0a54>
802116f4:	d8002115 	stw	zero,132(sp)
802116f8:	dc401a04 	addi	r17,sp,104
802116fc:	003cd506 	br	80210a54 <__reset+0xfa1f0a54>
80211700:	012008b4 	movhi	r4,32802
80211704:	2136ac04 	addi	r4,r4,-9552
80211708:	d9002815 	stw	r4,160(sp)
8021170c:	003d4306 	br	80210c1c <__reset+0xfa1f0c1c>
80211710:	00bfffc4 	movi	r2,-1
80211714:	003ec606 	br	80211230 <__reset+0xfa1f1230>
80211718:	00800044 	movi	r2,1
8021171c:	10803fcc 	andi	r2,r2,255
80211720:	00c00044 	movi	r3,1
80211724:	10fd8026 	beq	r2,r3,80210d28 <__reset+0xfa1f0d28>
80211728:	00c00084 	movi	r3,2
8021172c:	10fca426 	beq	r2,r3,802109c0 <__reset+0xfa1f09c0>
80211730:	003ce806 	br	80210ad4 <__reset+0xfa1f0ad4>
80211734:	012008b4 	movhi	r4,32802
80211738:	2136ac04 	addi	r4,r4,-9552
8021173c:	d9002815 	stw	r4,160(sp)
80211740:	003e9906 	br	802111a8 <__reset+0xfa1f11a8>
80211744:	1025883a 	mov	r18,r2
80211748:	0015883a 	mov	r10,zero
8021174c:	00800084 	movi	r2,2
80211750:	003ff206 	br	8021171c <__reset+0xfa1f171c>
80211754:	016008b4 	movhi	r5,32802
80211758:	2976a804 	addi	r5,r5,-9568
8021175c:	d9402215 	stw	r5,136(sp)
80211760:	003ee206 	br	802112ec <__reset+0xfa1f12ec>
80211764:	5827883a 	mov	r19,r11
80211768:	0021883a 	mov	r16,zero
8021176c:	003bed06 	br	80210724 <__reset+0xfa1f0724>
80211770:	dc002115 	stw	r16,132(sp)
80211774:	da801d83 	ldbu	r10,118(sp)
80211778:	df002315 	stw	fp,140(sp)
8021177c:	0021883a 	mov	r16,zero
80211780:	003cb406 	br	80210a54 <__reset+0xfa1f0a54>
80211784:	0005883a 	mov	r2,zero
80211788:	003fc206 	br	80211694 <__reset+0xfa1f1694>
8021178c:	d8802317 	ldw	r2,140(sp)
80211790:	98c00043 	ldbu	r3,1(r19)
80211794:	5827883a 	mov	r19,r11
80211798:	14000017 	ldw	r16,0(r2)
8021179c:	10800104 	addi	r2,r2,4
802117a0:	d8802315 	stw	r2,140(sp)
802117a4:	803f760e 	bge	r16,zero,80211580 <__reset+0xfa1f1580>
802117a8:	18c03fcc 	andi	r3,r3,255
802117ac:	18c0201c 	xori	r3,r3,128
802117b0:	043fffc4 	movi	r16,-1
802117b4:	18ffe004 	addi	r3,r3,-128
802117b8:	003bd906 	br	80210720 <__reset+0xfa1f0720>
802117bc:	d9c01d85 	stb	r7,118(sp)
802117c0:	003cb606 	br	80210a9c <__reset+0xfa1f0a9c>
802117c4:	d9c01d85 	stb	r7,118(sp)
802117c8:	003d2106 	br	80210c50 <__reset+0xfa1f0c50>
802117cc:	d9c01d85 	stb	r7,118(sp)
802117d0:	003d8e06 	br	80210e0c <__reset+0xfa1f0e0c>
802117d4:	d9c01d85 	stb	r7,118(sp)
802117d8:	003db306 	br	80210ea8 <__reset+0xfa1f0ea8>
802117dc:	d9c01d85 	stb	r7,118(sp)
802117e0:	003c8a06 	br	80210a0c <__reset+0xfa1f0a0c>
802117e4:	dac02a17 	ldw	r11,168(sp)
802117e8:	00800304 	movi	r2,12
802117ec:	58800015 	stw	r2,0(r11)
802117f0:	00bfffc4 	movi	r2,-1
802117f4:	003e8e06 	br	80211230 <__reset+0xfa1f1230>
802117f8:	d9c01d85 	stb	r7,118(sp)
802117fc:	003dc706 	br	80210f1c <__reset+0xfa1f0f1c>
80211800:	d9c01d85 	stb	r7,118(sp)
80211804:	003ddf06 	br	80210f84 <__reset+0xfa1f0f84>
80211808:	d9c01d85 	stb	r7,118(sp)
8021180c:	003d3706 	br	80210cec <__reset+0xfa1f0cec>
80211810:	d9c01d85 	stb	r7,118(sp)
80211814:	003c5406 	br	80210968 <__reset+0xfa1f0968>
80211818:	d9c01d85 	stb	r7,118(sp)
8021181c:	003d1d06 	br	80210c94 <__reset+0xfa1f0c94>

80211820 <__sprint_r.part.0>:
80211820:	28801917 	ldw	r2,100(r5)
80211824:	defff604 	addi	sp,sp,-40
80211828:	dd400515 	stw	r21,20(sp)
8021182c:	dfc00915 	stw	ra,36(sp)
80211830:	df000815 	stw	fp,32(sp)
80211834:	ddc00715 	stw	r23,28(sp)
80211838:	dd800615 	stw	r22,24(sp)
8021183c:	dd000415 	stw	r20,16(sp)
80211840:	dcc00315 	stw	r19,12(sp)
80211844:	dc800215 	stw	r18,8(sp)
80211848:	dc400115 	stw	r17,4(sp)
8021184c:	dc000015 	stw	r16,0(sp)
80211850:	1088000c 	andi	r2,r2,8192
80211854:	302b883a 	mov	r21,r6
80211858:	10002e26 	beq	r2,zero,80211914 <__sprint_r.part.0+0xf4>
8021185c:	30800217 	ldw	r2,8(r6)
80211860:	35800017 	ldw	r22,0(r6)
80211864:	10002926 	beq	r2,zero,8021190c <__sprint_r.part.0+0xec>
80211868:	2827883a 	mov	r19,r5
8021186c:	2029883a 	mov	r20,r4
80211870:	b5c00104 	addi	r23,r22,4
80211874:	04bfffc4 	movi	r18,-1
80211878:	bc400017 	ldw	r17,0(r23)
8021187c:	b4000017 	ldw	r16,0(r22)
80211880:	0039883a 	mov	fp,zero
80211884:	8822d0ba 	srli	r17,r17,2
80211888:	8800031e 	bne	r17,zero,80211898 <__sprint_r.part.0+0x78>
8021188c:	00001806 	br	802118f0 <__sprint_r.part.0+0xd0>
80211890:	84000104 	addi	r16,r16,4
80211894:	8f001526 	beq	r17,fp,802118ec <__sprint_r.part.0+0xcc>
80211898:	81400017 	ldw	r5,0(r16)
8021189c:	980d883a 	mov	r6,r19
802118a0:	a009883a 	mov	r4,r20
802118a4:	02132480 	call	80213248 <_fputwc_r>
802118a8:	e7000044 	addi	fp,fp,1
802118ac:	14bff81e 	bne	r2,r18,80211890 <__reset+0xfa1f1890>
802118b0:	9005883a 	mov	r2,r18
802118b4:	a8000215 	stw	zero,8(r21)
802118b8:	a8000115 	stw	zero,4(r21)
802118bc:	dfc00917 	ldw	ra,36(sp)
802118c0:	df000817 	ldw	fp,32(sp)
802118c4:	ddc00717 	ldw	r23,28(sp)
802118c8:	dd800617 	ldw	r22,24(sp)
802118cc:	dd400517 	ldw	r21,20(sp)
802118d0:	dd000417 	ldw	r20,16(sp)
802118d4:	dcc00317 	ldw	r19,12(sp)
802118d8:	dc800217 	ldw	r18,8(sp)
802118dc:	dc400117 	ldw	r17,4(sp)
802118e0:	dc000017 	ldw	r16,0(sp)
802118e4:	dec00a04 	addi	sp,sp,40
802118e8:	f800283a 	ret
802118ec:	a8800217 	ldw	r2,8(r21)
802118f0:	8c63883a 	add	r17,r17,r17
802118f4:	8c63883a 	add	r17,r17,r17
802118f8:	1445c83a 	sub	r2,r2,r17
802118fc:	a8800215 	stw	r2,8(r21)
80211900:	b5800204 	addi	r22,r22,8
80211904:	bdc00204 	addi	r23,r23,8
80211908:	103fdb1e 	bne	r2,zero,80211878 <__reset+0xfa1f1878>
8021190c:	0005883a 	mov	r2,zero
80211910:	003fe806 	br	802118b4 <__reset+0xfa1f18b4>
80211914:	020d7840 	call	8020d784 <__sfvwrite_r>
80211918:	003fe606 	br	802118b4 <__reset+0xfa1f18b4>

8021191c <__sprint_r>:
8021191c:	30c00217 	ldw	r3,8(r6)
80211920:	18000126 	beq	r3,zero,80211928 <__sprint_r+0xc>
80211924:	02118201 	jmpi	80211820 <__sprint_r.part.0>
80211928:	30000115 	stw	zero,4(r6)
8021192c:	0005883a 	mov	r2,zero
80211930:	f800283a 	ret

80211934 <___vfiprintf_internal_r>:
80211934:	deffc904 	addi	sp,sp,-220
80211938:	df003515 	stw	fp,212(sp)
8021193c:	dd003115 	stw	r20,196(sp)
80211940:	dfc03615 	stw	ra,216(sp)
80211944:	ddc03415 	stw	r23,208(sp)
80211948:	dd803315 	stw	r22,204(sp)
8021194c:	dd403215 	stw	r21,200(sp)
80211950:	dcc03015 	stw	r19,192(sp)
80211954:	dc802f15 	stw	r18,188(sp)
80211958:	dc402e15 	stw	r17,184(sp)
8021195c:	dc002d15 	stw	r16,180(sp)
80211960:	d9002015 	stw	r4,128(sp)
80211964:	d9c02215 	stw	r7,136(sp)
80211968:	2829883a 	mov	r20,r5
8021196c:	3039883a 	mov	fp,r6
80211970:	20000226 	beq	r4,zero,8021197c <___vfiprintf_internal_r+0x48>
80211974:	20800e17 	ldw	r2,56(r4)
80211978:	1000cf26 	beq	r2,zero,80211cb8 <___vfiprintf_internal_r+0x384>
8021197c:	a080030b 	ldhu	r2,12(r20)
80211980:	10c8000c 	andi	r3,r2,8192
80211984:	1800061e 	bne	r3,zero,802119a0 <___vfiprintf_internal_r+0x6c>
80211988:	a1001917 	ldw	r4,100(r20)
8021198c:	00f7ffc4 	movi	r3,-8193
80211990:	10880014 	ori	r2,r2,8192
80211994:	20c6703a 	and	r3,r4,r3
80211998:	a080030d 	sth	r2,12(r20)
8021199c:	a0c01915 	stw	r3,100(r20)
802119a0:	10c0020c 	andi	r3,r2,8
802119a4:	1800a926 	beq	r3,zero,80211c4c <___vfiprintf_internal_r+0x318>
802119a8:	a0c00417 	ldw	r3,16(r20)
802119ac:	1800a726 	beq	r3,zero,80211c4c <___vfiprintf_internal_r+0x318>
802119b0:	1080068c 	andi	r2,r2,26
802119b4:	00c00284 	movi	r3,10
802119b8:	10c0ac26 	beq	r2,r3,80211c6c <___vfiprintf_internal_r+0x338>
802119bc:	da801a04 	addi	r10,sp,104
802119c0:	da801e15 	stw	r10,120(sp)
802119c4:	d8801e17 	ldw	r2,120(sp)
802119c8:	da8019c4 	addi	r10,sp,103
802119cc:	05a008b4 	movhi	r22,32802
802119d0:	05e008b4 	movhi	r23,32802
802119d4:	da801f15 	stw	r10,124(sp)
802119d8:	1295c83a 	sub	r10,r2,r10
802119dc:	b5b6b404 	addi	r22,r22,-9520
802119e0:	bdf6b004 	addi	r23,r23,-9536
802119e4:	dec01a15 	stw	sp,104(sp)
802119e8:	d8001c15 	stw	zero,112(sp)
802119ec:	d8001b15 	stw	zero,108(sp)
802119f0:	d8002615 	stw	zero,152(sp)
802119f4:	d8002315 	stw	zero,140(sp)
802119f8:	da802715 	stw	r10,156(sp)
802119fc:	d811883a 	mov	r8,sp
80211a00:	dd002115 	stw	r20,132(sp)
80211a04:	e021883a 	mov	r16,fp
80211a08:	80800007 	ldb	r2,0(r16)
80211a0c:	1003ea26 	beq	r2,zero,802129b8 <___vfiprintf_internal_r+0x1084>
80211a10:	00c00944 	movi	r3,37
80211a14:	8025883a 	mov	r18,r16
80211a18:	10c0021e 	bne	r2,r3,80211a24 <___vfiprintf_internal_r+0xf0>
80211a1c:	00001606 	br	80211a78 <___vfiprintf_internal_r+0x144>
80211a20:	10c00326 	beq	r2,r3,80211a30 <___vfiprintf_internal_r+0xfc>
80211a24:	94800044 	addi	r18,r18,1
80211a28:	90800007 	ldb	r2,0(r18)
80211a2c:	103ffc1e 	bne	r2,zero,80211a20 <__reset+0xfa1f1a20>
80211a30:	9423c83a 	sub	r17,r18,r16
80211a34:	88001026 	beq	r17,zero,80211a78 <___vfiprintf_internal_r+0x144>
80211a38:	d8c01c17 	ldw	r3,112(sp)
80211a3c:	d8801b17 	ldw	r2,108(sp)
80211a40:	44000015 	stw	r16,0(r8)
80211a44:	88c7883a 	add	r3,r17,r3
80211a48:	10800044 	addi	r2,r2,1
80211a4c:	44400115 	stw	r17,4(r8)
80211a50:	d8c01c15 	stw	r3,112(sp)
80211a54:	d8801b15 	stw	r2,108(sp)
80211a58:	010001c4 	movi	r4,7
80211a5c:	2080760e 	bge	r4,r2,80211c38 <___vfiprintf_internal_r+0x304>
80211a60:	1803821e 	bne	r3,zero,8021286c <___vfiprintf_internal_r+0xf38>
80211a64:	da802317 	ldw	r10,140(sp)
80211a68:	d8001b15 	stw	zero,108(sp)
80211a6c:	d811883a 	mov	r8,sp
80211a70:	5455883a 	add	r10,r10,r17
80211a74:	da802315 	stw	r10,140(sp)
80211a78:	90800007 	ldb	r2,0(r18)
80211a7c:	10044626 	beq	r2,zero,80212b98 <___vfiprintf_internal_r+0x1264>
80211a80:	90c00047 	ldb	r3,1(r18)
80211a84:	94000044 	addi	r16,r18,1
80211a88:	d8001d85 	stb	zero,118(sp)
80211a8c:	0009883a 	mov	r4,zero
80211a90:	000f883a 	mov	r7,zero
80211a94:	027fffc4 	movi	r9,-1
80211a98:	0023883a 	mov	r17,zero
80211a9c:	0029883a 	mov	r20,zero
80211aa0:	01401604 	movi	r5,88
80211aa4:	01800244 	movi	r6,9
80211aa8:	03400a84 	movi	r13,42
80211aac:	03001b04 	movi	r12,108
80211ab0:	84000044 	addi	r16,r16,1
80211ab4:	18bff804 	addi	r2,r3,-32
80211ab8:	28827336 	bltu	r5,r2,80212488 <___vfiprintf_internal_r+0xb54>
80211abc:	100490ba 	slli	r2,r2,2
80211ac0:	02a00874 	movhi	r10,32801
80211ac4:	5286b504 	addi	r10,r10,6868
80211ac8:	1285883a 	add	r2,r2,r10
80211acc:	10800017 	ldw	r2,0(r2)
80211ad0:	1000683a 	jmp	r2
80211ad4:	802121bc 	xorhi	zero,r16,33926
80211ad8:	80212488 	cmpgei	zero,r16,-31598
80211adc:	80212488 	cmpgei	zero,r16,-31598
80211ae0:	802121dc 	xori	zero,r16,33927
80211ae4:	80212488 	cmpgei	zero,r16,-31598
80211ae8:	80212488 	cmpgei	zero,r16,-31598
80211aec:	80212488 	cmpgei	zero,r16,-31598
80211af0:	80212488 	cmpgei	zero,r16,-31598
80211af4:	80212488 	cmpgei	zero,r16,-31598
80211af8:	80212488 	cmpgei	zero,r16,-31598
80211afc:	802123c4 	addi	zero,r16,-31601
80211b00:	802123e0 	cmpeqi	zero,r16,-31601
80211b04:	80212488 	cmpgei	zero,r16,-31598
80211b08:	80211cc8 	cmpgei	zero,r16,-31629
80211b0c:	802123f0 	cmpltui	zero,r16,33935
80211b10:	80212488 	cmpgei	zero,r16,-31598
80211b14:	802121e8 	cmpgeui	zero,r16,33927
80211b18:	802121f4 	orhi	zero,r16,33927
80211b1c:	802121f4 	orhi	zero,r16,33927
80211b20:	802121f4 	orhi	zero,r16,33927
80211b24:	802121f4 	orhi	zero,r16,33927
80211b28:	802121f4 	orhi	zero,r16,33927
80211b2c:	802121f4 	orhi	zero,r16,33927
80211b30:	802121f4 	orhi	zero,r16,33927
80211b34:	802121f4 	orhi	zero,r16,33927
80211b38:	802121f4 	orhi	zero,r16,33927
80211b3c:	80212488 	cmpgei	zero,r16,-31598
80211b40:	80212488 	cmpgei	zero,r16,-31598
80211b44:	80212488 	cmpgei	zero,r16,-31598
80211b48:	80212488 	cmpgei	zero,r16,-31598
80211b4c:	80212488 	cmpgei	zero,r16,-31598
80211b50:	80212488 	cmpgei	zero,r16,-31598
80211b54:	80212488 	cmpgei	zero,r16,-31598
80211b58:	80212488 	cmpgei	zero,r16,-31598
80211b5c:	80212488 	cmpgei	zero,r16,-31598
80211b60:	80212488 	cmpgei	zero,r16,-31598
80211b64:	80212220 	cmpeqi	zero,r16,-31608
80211b68:	80212488 	cmpgei	zero,r16,-31598
80211b6c:	80212488 	cmpgei	zero,r16,-31598
80211b70:	80212488 	cmpgei	zero,r16,-31598
80211b74:	80212488 	cmpgei	zero,r16,-31598
80211b78:	80212488 	cmpgei	zero,r16,-31598
80211b7c:	80212488 	cmpgei	zero,r16,-31598
80211b80:	80212488 	cmpgei	zero,r16,-31598
80211b84:	80212488 	cmpgei	zero,r16,-31598
80211b88:	80212488 	cmpgei	zero,r16,-31598
80211b8c:	80212488 	cmpgei	zero,r16,-31598
80211b90:	80212258 	cmpnei	zero,r16,-31607
80211b94:	80212488 	cmpgei	zero,r16,-31598
80211b98:	80212488 	cmpgei	zero,r16,-31598
80211b9c:	80212488 	cmpgei	zero,r16,-31598
80211ba0:	80212488 	cmpgei	zero,r16,-31598
80211ba4:	80212488 	cmpgei	zero,r16,-31598
80211ba8:	802122b0 	cmpltui	zero,r16,33930
80211bac:	80212488 	cmpgei	zero,r16,-31598
80211bb0:	80212488 	cmpgei	zero,r16,-31598
80211bb4:	80212320 	cmpeqi	zero,r16,-31604
80211bb8:	80212488 	cmpgei	zero,r16,-31598
80211bbc:	80212488 	cmpgei	zero,r16,-31598
80211bc0:	80212488 	cmpgei	zero,r16,-31598
80211bc4:	80212488 	cmpgei	zero,r16,-31598
80211bc8:	80212488 	cmpgei	zero,r16,-31598
80211bcc:	80212488 	cmpgei	zero,r16,-31598
80211bd0:	80212488 	cmpgei	zero,r16,-31598
80211bd4:	80212488 	cmpgei	zero,r16,-31598
80211bd8:	80212488 	cmpgei	zero,r16,-31598
80211bdc:	80212488 	cmpgei	zero,r16,-31598
80211be0:	802120cc 	andi	zero,r16,33923
80211be4:	802120f8 	rdprs	zero,r16,-31613
80211be8:	80212488 	cmpgei	zero,r16,-31598
80211bec:	80212488 	cmpgei	zero,r16,-31598
80211bf0:	80212488 	cmpgei	zero,r16,-31598
80211bf4:	80212430 	cmpltui	zero,r16,33936
80211bf8:	802120f8 	rdprs	zero,r16,-31613
80211bfc:	80212488 	cmpgei	zero,r16,-31598
80211c00:	80212488 	cmpgei	zero,r16,-31598
80211c04:	80211f8c 	andi	zero,r16,33918
80211c08:	80212488 	cmpgei	zero,r16,-31598
80211c0c:	80211f9c 	xori	zero,r16,33918
80211c10:	80211fd8 	cmpnei	zero,r16,-31617
80211c14:	80211cd4 	ori	zero,r16,33907
80211c18:	80211f80 	call	880211f8 <__reset+0x20011f8>
80211c1c:	80212488 	cmpgei	zero,r16,-31598
80211c20:	8021235c 	xori	zero,r16,33933
80211c24:	80212488 	cmpgei	zero,r16,-31598
80211c28:	802123b4 	orhi	zero,r16,33934
80211c2c:	80212488 	cmpgei	zero,r16,-31598
80211c30:	80212488 	cmpgei	zero,r16,-31598
80211c34:	80212078 	rdprs	zero,r16,-31615
80211c38:	42000204 	addi	r8,r8,8
80211c3c:	da802317 	ldw	r10,140(sp)
80211c40:	5455883a 	add	r10,r10,r17
80211c44:	da802315 	stw	r10,140(sp)
80211c48:	003f8b06 	br	80211a78 <__reset+0xfa1f1a78>
80211c4c:	d9002017 	ldw	r4,128(sp)
80211c50:	a00b883a 	mov	r5,r20
80211c54:	020b32c0 	call	8020b32c <__swsetup_r>
80211c58:	1003b11e 	bne	r2,zero,80212b20 <___vfiprintf_internal_r+0x11ec>
80211c5c:	a080030b 	ldhu	r2,12(r20)
80211c60:	00c00284 	movi	r3,10
80211c64:	1080068c 	andi	r2,r2,26
80211c68:	10ff541e 	bne	r2,r3,802119bc <__reset+0xfa1f19bc>
80211c6c:	a080038f 	ldh	r2,14(r20)
80211c70:	103f5216 	blt	r2,zero,802119bc <__reset+0xfa1f19bc>
80211c74:	d9c02217 	ldw	r7,136(sp)
80211c78:	d9002017 	ldw	r4,128(sp)
80211c7c:	e00d883a 	mov	r6,fp
80211c80:	a00b883a 	mov	r5,r20
80211c84:	0212dac0 	call	80212dac <__sbprintf>
80211c88:	dfc03617 	ldw	ra,216(sp)
80211c8c:	df003517 	ldw	fp,212(sp)
80211c90:	ddc03417 	ldw	r23,208(sp)
80211c94:	dd803317 	ldw	r22,204(sp)
80211c98:	dd403217 	ldw	r21,200(sp)
80211c9c:	dd003117 	ldw	r20,196(sp)
80211ca0:	dcc03017 	ldw	r19,192(sp)
80211ca4:	dc802f17 	ldw	r18,188(sp)
80211ca8:	dc402e17 	ldw	r17,184(sp)
80211cac:	dc002d17 	ldw	r16,180(sp)
80211cb0:	dec03704 	addi	sp,sp,220
80211cb4:	f800283a 	ret
80211cb8:	020d3000 	call	8020d300 <__sinit>
80211cbc:	003f2f06 	br	8021197c <__reset+0xfa1f197c>
80211cc0:	0463c83a 	sub	r17,zero,r17
80211cc4:	d8802215 	stw	r2,136(sp)
80211cc8:	a5000114 	ori	r20,r20,4
80211ccc:	80c00007 	ldb	r3,0(r16)
80211cd0:	003f7706 	br	80211ab0 <__reset+0xfa1f1ab0>
80211cd4:	00800c04 	movi	r2,48
80211cd8:	da802217 	ldw	r10,136(sp)
80211cdc:	d8801d05 	stb	r2,116(sp)
80211ce0:	00801e04 	movi	r2,120
80211ce4:	d8801d45 	stb	r2,117(sp)
80211ce8:	d8001d85 	stb	zero,118(sp)
80211cec:	50c00104 	addi	r3,r10,4
80211cf0:	54800017 	ldw	r18,0(r10)
80211cf4:	0027883a 	mov	r19,zero
80211cf8:	a0800094 	ori	r2,r20,2
80211cfc:	48030b16 	blt	r9,zero,8021292c <___vfiprintf_internal_r+0xff8>
80211d00:	00bfdfc4 	movi	r2,-129
80211d04:	a096703a 	and	r11,r20,r2
80211d08:	d8c02215 	stw	r3,136(sp)
80211d0c:	5d000094 	ori	r20,r11,2
80211d10:	90032b1e 	bne	r18,zero,802129c0 <___vfiprintf_internal_r+0x108c>
80211d14:	00a008b4 	movhi	r2,32802
80211d18:	10b64004 	addi	r2,r2,-9984
80211d1c:	d8802615 	stw	r2,152(sp)
80211d20:	0039883a 	mov	fp,zero
80211d24:	48017b1e 	bne	r9,zero,80212314 <___vfiprintf_internal_r+0x9e0>
80211d28:	0013883a 	mov	r9,zero
80211d2c:	0027883a 	mov	r19,zero
80211d30:	dd401a04 	addi	r21,sp,104
80211d34:	4825883a 	mov	r18,r9
80211d38:	4cc0010e 	bge	r9,r19,80211d40 <___vfiprintf_internal_r+0x40c>
80211d3c:	9825883a 	mov	r18,r19
80211d40:	e7003fcc 	andi	fp,fp,255
80211d44:	e700201c 	xori	fp,fp,128
80211d48:	e73fe004 	addi	fp,fp,-128
80211d4c:	e0000126 	beq	fp,zero,80211d54 <___vfiprintf_internal_r+0x420>
80211d50:	94800044 	addi	r18,r18,1
80211d54:	a380008c 	andi	r14,r20,2
80211d58:	70000126 	beq	r14,zero,80211d60 <___vfiprintf_internal_r+0x42c>
80211d5c:	94800084 	addi	r18,r18,2
80211d60:	a700210c 	andi	fp,r20,132
80211d64:	e001df1e 	bne	fp,zero,802124e4 <___vfiprintf_internal_r+0xbb0>
80211d68:	8c87c83a 	sub	r3,r17,r18
80211d6c:	00c1dd0e 	bge	zero,r3,802124e4 <___vfiprintf_internal_r+0xbb0>
80211d70:	01c00404 	movi	r7,16
80211d74:	d8801c17 	ldw	r2,112(sp)
80211d78:	38c3ad0e 	bge	r7,r3,80212c30 <___vfiprintf_internal_r+0x12fc>
80211d7c:	02a008b4 	movhi	r10,32802
80211d80:	52b6b404 	addi	r10,r10,-9520
80211d84:	dc002915 	stw	r16,164(sp)
80211d88:	d9801b17 	ldw	r6,108(sp)
80211d8c:	da802415 	stw	r10,144(sp)
80211d90:	03c001c4 	movi	r15,7
80211d94:	da402515 	stw	r9,148(sp)
80211d98:	db802815 	stw	r14,160(sp)
80211d9c:	1821883a 	mov	r16,r3
80211da0:	00000506 	br	80211db8 <___vfiprintf_internal_r+0x484>
80211da4:	31400084 	addi	r5,r6,2
80211da8:	42000204 	addi	r8,r8,8
80211dac:	200d883a 	mov	r6,r4
80211db0:	843ffc04 	addi	r16,r16,-16
80211db4:	3c000d0e 	bge	r7,r16,80211dec <___vfiprintf_internal_r+0x4b8>
80211db8:	10800404 	addi	r2,r2,16
80211dbc:	31000044 	addi	r4,r6,1
80211dc0:	45800015 	stw	r22,0(r8)
80211dc4:	41c00115 	stw	r7,4(r8)
80211dc8:	d8801c15 	stw	r2,112(sp)
80211dcc:	d9001b15 	stw	r4,108(sp)
80211dd0:	793ff40e 	bge	r15,r4,80211da4 <__reset+0xfa1f1da4>
80211dd4:	1001b51e 	bne	r2,zero,802124ac <___vfiprintf_internal_r+0xb78>
80211dd8:	843ffc04 	addi	r16,r16,-16
80211ddc:	000d883a 	mov	r6,zero
80211de0:	01400044 	movi	r5,1
80211de4:	d811883a 	mov	r8,sp
80211de8:	3c3ff316 	blt	r7,r16,80211db8 <__reset+0xfa1f1db8>
80211dec:	8007883a 	mov	r3,r16
80211df0:	da402517 	ldw	r9,148(sp)
80211df4:	db802817 	ldw	r14,160(sp)
80211df8:	dc002917 	ldw	r16,164(sp)
80211dfc:	da802417 	ldw	r10,144(sp)
80211e00:	1885883a 	add	r2,r3,r2
80211e04:	40c00115 	stw	r3,4(r8)
80211e08:	42800015 	stw	r10,0(r8)
80211e0c:	d8801c15 	stw	r2,112(sp)
80211e10:	d9401b15 	stw	r5,108(sp)
80211e14:	00c001c4 	movi	r3,7
80211e18:	19426016 	blt	r3,r5,8021279c <___vfiprintf_internal_r+0xe68>
80211e1c:	d8c01d87 	ldb	r3,118(sp)
80211e20:	42000204 	addi	r8,r8,8
80211e24:	29000044 	addi	r4,r5,1
80211e28:	1801b31e 	bne	r3,zero,802124f8 <___vfiprintf_internal_r+0xbc4>
80211e2c:	7001c026 	beq	r14,zero,80212530 <___vfiprintf_internal_r+0xbfc>
80211e30:	d8c01d04 	addi	r3,sp,116
80211e34:	10800084 	addi	r2,r2,2
80211e38:	40c00015 	stw	r3,0(r8)
80211e3c:	00c00084 	movi	r3,2
80211e40:	40c00115 	stw	r3,4(r8)
80211e44:	d8801c15 	stw	r2,112(sp)
80211e48:	d9001b15 	stw	r4,108(sp)
80211e4c:	00c001c4 	movi	r3,7
80211e50:	1902650e 	bge	r3,r4,802127e8 <___vfiprintf_internal_r+0xeb4>
80211e54:	10029a1e 	bne	r2,zero,802128c0 <___vfiprintf_internal_r+0xf8c>
80211e58:	00c02004 	movi	r3,128
80211e5c:	01000044 	movi	r4,1
80211e60:	000b883a 	mov	r5,zero
80211e64:	d811883a 	mov	r8,sp
80211e68:	e0c1b31e 	bne	fp,r3,80212538 <___vfiprintf_internal_r+0xc04>
80211e6c:	8cb9c83a 	sub	fp,r17,r18
80211e70:	0701b10e 	bge	zero,fp,80212538 <___vfiprintf_internal_r+0xc04>
80211e74:	01c00404 	movi	r7,16
80211e78:	3f03890e 	bge	r7,fp,80212ca0 <___vfiprintf_internal_r+0x136c>
80211e7c:	00e008b4 	movhi	r3,32802
80211e80:	18f6b004 	addi	r3,r3,-9536
80211e84:	d8c02415 	stw	r3,144(sp)
80211e88:	8007883a 	mov	r3,r16
80211e8c:	034001c4 	movi	r13,7
80211e90:	e021883a 	mov	r16,fp
80211e94:	da402515 	stw	r9,148(sp)
80211e98:	1839883a 	mov	fp,r3
80211e9c:	00000506 	br	80211eb4 <___vfiprintf_internal_r+0x580>
80211ea0:	29800084 	addi	r6,r5,2
80211ea4:	42000204 	addi	r8,r8,8
80211ea8:	180b883a 	mov	r5,r3
80211eac:	843ffc04 	addi	r16,r16,-16
80211eb0:	3c000d0e 	bge	r7,r16,80211ee8 <___vfiprintf_internal_r+0x5b4>
80211eb4:	10800404 	addi	r2,r2,16
80211eb8:	28c00044 	addi	r3,r5,1
80211ebc:	45c00015 	stw	r23,0(r8)
80211ec0:	41c00115 	stw	r7,4(r8)
80211ec4:	d8801c15 	stw	r2,112(sp)
80211ec8:	d8c01b15 	stw	r3,108(sp)
80211ecc:	68fff40e 	bge	r13,r3,80211ea0 <__reset+0xfa1f1ea0>
80211ed0:	1002241e 	bne	r2,zero,80212764 <___vfiprintf_internal_r+0xe30>
80211ed4:	843ffc04 	addi	r16,r16,-16
80211ed8:	01800044 	movi	r6,1
80211edc:	000b883a 	mov	r5,zero
80211ee0:	d811883a 	mov	r8,sp
80211ee4:	3c3ff316 	blt	r7,r16,80211eb4 <__reset+0xfa1f1eb4>
80211ee8:	da402517 	ldw	r9,148(sp)
80211eec:	e007883a 	mov	r3,fp
80211ef0:	8039883a 	mov	fp,r16
80211ef4:	1821883a 	mov	r16,r3
80211ef8:	d8c02417 	ldw	r3,144(sp)
80211efc:	1705883a 	add	r2,r2,fp
80211f00:	47000115 	stw	fp,4(r8)
80211f04:	40c00015 	stw	r3,0(r8)
80211f08:	d8801c15 	stw	r2,112(sp)
80211f0c:	d9801b15 	stw	r6,108(sp)
80211f10:	00c001c4 	movi	r3,7
80211f14:	19827616 	blt	r3,r6,802128f0 <___vfiprintf_internal_r+0xfbc>
80211f18:	4cf9c83a 	sub	fp,r9,r19
80211f1c:	42000204 	addi	r8,r8,8
80211f20:	31000044 	addi	r4,r6,1
80211f24:	300b883a 	mov	r5,r6
80211f28:	07018516 	blt	zero,fp,80212540 <___vfiprintf_internal_r+0xc0c>
80211f2c:	9885883a 	add	r2,r19,r2
80211f30:	45400015 	stw	r21,0(r8)
80211f34:	44c00115 	stw	r19,4(r8)
80211f38:	d8801c15 	stw	r2,112(sp)
80211f3c:	d9001b15 	stw	r4,108(sp)
80211f40:	00c001c4 	movi	r3,7
80211f44:	1901dd0e 	bge	r3,r4,802126bc <___vfiprintf_internal_r+0xd88>
80211f48:	1002401e 	bne	r2,zero,8021284c <___vfiprintf_internal_r+0xf18>
80211f4c:	d8001b15 	stw	zero,108(sp)
80211f50:	a2c0010c 	andi	r11,r20,4
80211f54:	58000226 	beq	r11,zero,80211f60 <___vfiprintf_internal_r+0x62c>
80211f58:	8ca7c83a 	sub	r19,r17,r18
80211f5c:	04c2f216 	blt	zero,r19,80212b28 <___vfiprintf_internal_r+0x11f4>
80211f60:	8c80010e 	bge	r17,r18,80211f68 <___vfiprintf_internal_r+0x634>
80211f64:	9023883a 	mov	r17,r18
80211f68:	da802317 	ldw	r10,140(sp)
80211f6c:	5455883a 	add	r10,r10,r17
80211f70:	da802315 	stw	r10,140(sp)
80211f74:	d8001b15 	stw	zero,108(sp)
80211f78:	d811883a 	mov	r8,sp
80211f7c:	003ea206 	br	80211a08 <__reset+0xfa1f1a08>
80211f80:	a5000814 	ori	r20,r20,32
80211f84:	80c00007 	ldb	r3,0(r16)
80211f88:	003ec906 	br	80211ab0 <__reset+0xfa1f1ab0>
80211f8c:	80c00007 	ldb	r3,0(r16)
80211f90:	1b030926 	beq	r3,r12,80212bb8 <___vfiprintf_internal_r+0x1284>
80211f94:	a5000414 	ori	r20,r20,16
80211f98:	003ec506 	br	80211ab0 <__reset+0xfa1f1ab0>
80211f9c:	21003fcc 	andi	r4,r4,255
80211fa0:	20035e1e 	bne	r4,zero,80212d1c <___vfiprintf_internal_r+0x13e8>
80211fa4:	a080080c 	andi	r2,r20,32
80211fa8:	1002a526 	beq	r2,zero,80212a40 <___vfiprintf_internal_r+0x110c>
80211fac:	da802217 	ldw	r10,136(sp)
80211fb0:	50800017 	ldw	r2,0(r10)
80211fb4:	da802317 	ldw	r10,140(sp)
80211fb8:	5007d7fa 	srai	r3,r10,31
80211fbc:	da802217 	ldw	r10,136(sp)
80211fc0:	10c00115 	stw	r3,4(r2)
80211fc4:	52800104 	addi	r10,r10,4
80211fc8:	da802215 	stw	r10,136(sp)
80211fcc:	da802317 	ldw	r10,140(sp)
80211fd0:	12800015 	stw	r10,0(r2)
80211fd4:	003e8c06 	br	80211a08 <__reset+0xfa1f1a08>
80211fd8:	21003fcc 	andi	r4,r4,255
80211fdc:	2003511e 	bne	r4,zero,80212d24 <___vfiprintf_internal_r+0x13f0>
80211fe0:	a080080c 	andi	r2,r20,32
80211fe4:	1000a126 	beq	r2,zero,8021226c <___vfiprintf_internal_r+0x938>
80211fe8:	da802217 	ldw	r10,136(sp)
80211fec:	d8001d85 	stb	zero,118(sp)
80211ff0:	50800204 	addi	r2,r10,8
80211ff4:	54800017 	ldw	r18,0(r10)
80211ff8:	54c00117 	ldw	r19,4(r10)
80211ffc:	4802b416 	blt	r9,zero,80212ad0 <___vfiprintf_internal_r+0x119c>
80212000:	013fdfc4 	movi	r4,-129
80212004:	94c6b03a 	or	r3,r18,r19
80212008:	d8802215 	stw	r2,136(sp)
8021200c:	a128703a 	and	r20,r20,r4
80212010:	1800a226 	beq	r3,zero,8021229c <___vfiprintf_internal_r+0x968>
80212014:	0039883a 	mov	fp,zero
80212018:	dd401a04 	addi	r21,sp,104
8021201c:	9006d0fa 	srli	r3,r18,3
80212020:	9808977a 	slli	r4,r19,29
80212024:	9826d0fa 	srli	r19,r19,3
80212028:	948001cc 	andi	r18,r18,7
8021202c:	90800c04 	addi	r2,r18,48
80212030:	ad7fffc4 	addi	r21,r21,-1
80212034:	20e4b03a 	or	r18,r4,r3
80212038:	a8800005 	stb	r2,0(r21)
8021203c:	94c6b03a 	or	r3,r18,r19
80212040:	183ff61e 	bne	r3,zero,8021201c <__reset+0xfa1f201c>
80212044:	a0c0004c 	andi	r3,r20,1
80212048:	18005926 	beq	r3,zero,802121b0 <___vfiprintf_internal_r+0x87c>
8021204c:	10803fcc 	andi	r2,r2,255
80212050:	1080201c 	xori	r2,r2,128
80212054:	10bfe004 	addi	r2,r2,-128
80212058:	00c00c04 	movi	r3,48
8021205c:	10c05426 	beq	r2,r3,802121b0 <___vfiprintf_internal_r+0x87c>
80212060:	da801e17 	ldw	r10,120(sp)
80212064:	a8bfffc4 	addi	r2,r21,-1
80212068:	a8ffffc5 	stb	r3,-1(r21)
8021206c:	50a7c83a 	sub	r19,r10,r2
80212070:	102b883a 	mov	r21,r2
80212074:	003f2f06 	br	80211d34 <__reset+0xfa1f1d34>
80212078:	21003fcc 	andi	r4,r4,255
8021207c:	2003421e 	bne	r4,zero,80212d88 <___vfiprintf_internal_r+0x1454>
80212080:	00a008b4 	movhi	r2,32802
80212084:	10b64004 	addi	r2,r2,-9984
80212088:	d8802615 	stw	r2,152(sp)
8021208c:	a080080c 	andi	r2,r20,32
80212090:	1000aa26 	beq	r2,zero,8021233c <___vfiprintf_internal_r+0xa08>
80212094:	da802217 	ldw	r10,136(sp)
80212098:	54800017 	ldw	r18,0(r10)
8021209c:	54c00117 	ldw	r19,4(r10)
802120a0:	52800204 	addi	r10,r10,8
802120a4:	da802215 	stw	r10,136(sp)
802120a8:	a080004c 	andi	r2,r20,1
802120ac:	1001d226 	beq	r2,zero,802127f8 <___vfiprintf_internal_r+0xec4>
802120b0:	94c4b03a 	or	r2,r18,r19
802120b4:	1002351e 	bne	r2,zero,8021298c <___vfiprintf_internal_r+0x1058>
802120b8:	d8001d85 	stb	zero,118(sp)
802120bc:	48022216 	blt	r9,zero,80212948 <___vfiprintf_internal_r+0x1014>
802120c0:	00bfdfc4 	movi	r2,-129
802120c4:	a0a8703a 	and	r20,r20,r2
802120c8:	003f1506 	br	80211d20 <__reset+0xfa1f1d20>
802120cc:	da802217 	ldw	r10,136(sp)
802120d0:	04800044 	movi	r18,1
802120d4:	d8001d85 	stb	zero,118(sp)
802120d8:	50800017 	ldw	r2,0(r10)
802120dc:	52800104 	addi	r10,r10,4
802120e0:	da802215 	stw	r10,136(sp)
802120e4:	d8801005 	stb	r2,64(sp)
802120e8:	9027883a 	mov	r19,r18
802120ec:	dd401004 	addi	r21,sp,64
802120f0:	0013883a 	mov	r9,zero
802120f4:	003f1706 	br	80211d54 <__reset+0xfa1f1d54>
802120f8:	21003fcc 	andi	r4,r4,255
802120fc:	2003201e 	bne	r4,zero,80212d80 <___vfiprintf_internal_r+0x144c>
80212100:	a080080c 	andi	r2,r20,32
80212104:	10004b26 	beq	r2,zero,80212234 <___vfiprintf_internal_r+0x900>
80212108:	da802217 	ldw	r10,136(sp)
8021210c:	50800117 	ldw	r2,4(r10)
80212110:	54800017 	ldw	r18,0(r10)
80212114:	52800204 	addi	r10,r10,8
80212118:	da802215 	stw	r10,136(sp)
8021211c:	1027883a 	mov	r19,r2
80212120:	10022c16 	blt	r2,zero,802129d4 <___vfiprintf_internal_r+0x10a0>
80212124:	df001d83 	ldbu	fp,118(sp)
80212128:	48007216 	blt	r9,zero,802122f4 <___vfiprintf_internal_r+0x9c0>
8021212c:	00ffdfc4 	movi	r3,-129
80212130:	94c4b03a 	or	r2,r18,r19
80212134:	a0e8703a 	and	r20,r20,r3
80212138:	1000cc26 	beq	r2,zero,8021246c <___vfiprintf_internal_r+0xb38>
8021213c:	98021026 	beq	r19,zero,80212980 <___vfiprintf_internal_r+0x104c>
80212140:	dc402415 	stw	r17,144(sp)
80212144:	dc002515 	stw	r16,148(sp)
80212148:	9823883a 	mov	r17,r19
8021214c:	9021883a 	mov	r16,r18
80212150:	dd401a04 	addi	r21,sp,104
80212154:	4825883a 	mov	r18,r9
80212158:	4027883a 	mov	r19,r8
8021215c:	8009883a 	mov	r4,r16
80212160:	880b883a 	mov	r5,r17
80212164:	01800284 	movi	r6,10
80212168:	000f883a 	mov	r7,zero
8021216c:	0213d140 	call	80213d14 <__umoddi3>
80212170:	10800c04 	addi	r2,r2,48
80212174:	ad7fffc4 	addi	r21,r21,-1
80212178:	8009883a 	mov	r4,r16
8021217c:	880b883a 	mov	r5,r17
80212180:	a8800005 	stb	r2,0(r21)
80212184:	01800284 	movi	r6,10
80212188:	000f883a 	mov	r7,zero
8021218c:	021379c0 	call	8021379c <__udivdi3>
80212190:	1021883a 	mov	r16,r2
80212194:	10c4b03a 	or	r2,r2,r3
80212198:	1823883a 	mov	r17,r3
8021219c:	103fef1e 	bne	r2,zero,8021215c <__reset+0xfa1f215c>
802121a0:	dc402417 	ldw	r17,144(sp)
802121a4:	dc002517 	ldw	r16,148(sp)
802121a8:	9013883a 	mov	r9,r18
802121ac:	9811883a 	mov	r8,r19
802121b0:	da801e17 	ldw	r10,120(sp)
802121b4:	5567c83a 	sub	r19,r10,r21
802121b8:	003ede06 	br	80211d34 <__reset+0xfa1f1d34>
802121bc:	38803fcc 	andi	r2,r7,255
802121c0:	1080201c 	xori	r2,r2,128
802121c4:	10bfe004 	addi	r2,r2,-128
802121c8:	1002371e 	bne	r2,zero,80212aa8 <___vfiprintf_internal_r+0x1174>
802121cc:	01000044 	movi	r4,1
802121d0:	01c00804 	movi	r7,32
802121d4:	80c00007 	ldb	r3,0(r16)
802121d8:	003e3506 	br	80211ab0 <__reset+0xfa1f1ab0>
802121dc:	a5000054 	ori	r20,r20,1
802121e0:	80c00007 	ldb	r3,0(r16)
802121e4:	003e3206 	br	80211ab0 <__reset+0xfa1f1ab0>
802121e8:	a5002014 	ori	r20,r20,128
802121ec:	80c00007 	ldb	r3,0(r16)
802121f0:	003e2f06 	br	80211ab0 <__reset+0xfa1f1ab0>
802121f4:	8015883a 	mov	r10,r16
802121f8:	0023883a 	mov	r17,zero
802121fc:	18bff404 	addi	r2,r3,-48
80212200:	50c00007 	ldb	r3,0(r10)
80212204:	8c4002a4 	muli	r17,r17,10
80212208:	84000044 	addi	r16,r16,1
8021220c:	8015883a 	mov	r10,r16
80212210:	1463883a 	add	r17,r2,r17
80212214:	18bff404 	addi	r2,r3,-48
80212218:	30bff92e 	bgeu	r6,r2,80212200 <__reset+0xfa1f2200>
8021221c:	003e2506 	br	80211ab4 <__reset+0xfa1f1ab4>
80212220:	21003fcc 	andi	r4,r4,255
80212224:	2002d41e 	bne	r4,zero,80212d78 <___vfiprintf_internal_r+0x1444>
80212228:	a5000414 	ori	r20,r20,16
8021222c:	a080080c 	andi	r2,r20,32
80212230:	103fb51e 	bne	r2,zero,80212108 <__reset+0xfa1f2108>
80212234:	a080040c 	andi	r2,r20,16
80212238:	1001f826 	beq	r2,zero,80212a1c <___vfiprintf_internal_r+0x10e8>
8021223c:	da802217 	ldw	r10,136(sp)
80212240:	54800017 	ldw	r18,0(r10)
80212244:	52800104 	addi	r10,r10,4
80212248:	da802215 	stw	r10,136(sp)
8021224c:	9027d7fa 	srai	r19,r18,31
80212250:	9805883a 	mov	r2,r19
80212254:	003fb206 	br	80212120 <__reset+0xfa1f2120>
80212258:	21003fcc 	andi	r4,r4,255
8021225c:	2002c41e 	bne	r4,zero,80212d70 <___vfiprintf_internal_r+0x143c>
80212260:	a5000414 	ori	r20,r20,16
80212264:	a080080c 	andi	r2,r20,32
80212268:	103f5f1e 	bne	r2,zero,80211fe8 <__reset+0xfa1f1fe8>
8021226c:	a080040c 	andi	r2,r20,16
80212270:	10020f26 	beq	r2,zero,80212ab0 <___vfiprintf_internal_r+0x117c>
80212274:	da802217 	ldw	r10,136(sp)
80212278:	d8001d85 	stb	zero,118(sp)
8021227c:	0027883a 	mov	r19,zero
80212280:	50800104 	addi	r2,r10,4
80212284:	54800017 	ldw	r18,0(r10)
80212288:	48021116 	blt	r9,zero,80212ad0 <___vfiprintf_internal_r+0x119c>
8021228c:	00ffdfc4 	movi	r3,-129
80212290:	d8802215 	stw	r2,136(sp)
80212294:	a0e8703a 	and	r20,r20,r3
80212298:	903f5e1e 	bne	r18,zero,80212014 <__reset+0xfa1f2014>
8021229c:	0039883a 	mov	fp,zero
802122a0:	4802a626 	beq	r9,zero,80212d3c <___vfiprintf_internal_r+0x1408>
802122a4:	0025883a 	mov	r18,zero
802122a8:	0027883a 	mov	r19,zero
802122ac:	003f5a06 	br	80212018 <__reset+0xfa1f2018>
802122b0:	21003fcc 	andi	r4,r4,255
802122b4:	20029f1e 	bne	r4,zero,80212d34 <___vfiprintf_internal_r+0x1400>
802122b8:	a5000414 	ori	r20,r20,16
802122bc:	a080080c 	andi	r2,r20,32
802122c0:	10005e1e 	bne	r2,zero,8021243c <___vfiprintf_internal_r+0xb08>
802122c4:	a080040c 	andi	r2,r20,16
802122c8:	1001a21e 	bne	r2,zero,80212954 <___vfiprintf_internal_r+0x1020>
802122cc:	a080100c 	andi	r2,r20,64
802122d0:	d8001d85 	stb	zero,118(sp)
802122d4:	da802217 	ldw	r10,136(sp)
802122d8:	1002231e 	bne	r2,zero,80212b68 <___vfiprintf_internal_r+0x1234>
802122dc:	50800104 	addi	r2,r10,4
802122e0:	54800017 	ldw	r18,0(r10)
802122e4:	0027883a 	mov	r19,zero
802122e8:	4801a00e 	bge	r9,zero,8021296c <___vfiprintf_internal_r+0x1038>
802122ec:	d8802215 	stw	r2,136(sp)
802122f0:	0039883a 	mov	fp,zero
802122f4:	94c4b03a 	or	r2,r18,r19
802122f8:	103f901e 	bne	r2,zero,8021213c <__reset+0xfa1f213c>
802122fc:	00800044 	movi	r2,1
80212300:	10803fcc 	andi	r2,r2,255
80212304:	00c00044 	movi	r3,1
80212308:	10c05926 	beq	r2,r3,80212470 <___vfiprintf_internal_r+0xb3c>
8021230c:	00c00084 	movi	r3,2
80212310:	10ffe41e 	bne	r2,r3,802122a4 <__reset+0xfa1f22a4>
80212314:	0025883a 	mov	r18,zero
80212318:	0027883a 	mov	r19,zero
8021231c:	00013d06 	br	80212814 <___vfiprintf_internal_r+0xee0>
80212320:	21003fcc 	andi	r4,r4,255
80212324:	2002811e 	bne	r4,zero,80212d2c <___vfiprintf_internal_r+0x13f8>
80212328:	00a008b4 	movhi	r2,32802
8021232c:	10b63b04 	addi	r2,r2,-10004
80212330:	d8802615 	stw	r2,152(sp)
80212334:	a080080c 	andi	r2,r20,32
80212338:	103f561e 	bne	r2,zero,80212094 <__reset+0xfa1f2094>
8021233c:	a080040c 	andi	r2,r20,16
80212340:	1001d126 	beq	r2,zero,80212a88 <___vfiprintf_internal_r+0x1154>
80212344:	da802217 	ldw	r10,136(sp)
80212348:	0027883a 	mov	r19,zero
8021234c:	54800017 	ldw	r18,0(r10)
80212350:	52800104 	addi	r10,r10,4
80212354:	da802215 	stw	r10,136(sp)
80212358:	003f5306 	br	802120a8 <__reset+0xfa1f20a8>
8021235c:	da802217 	ldw	r10,136(sp)
80212360:	d8001d85 	stb	zero,118(sp)
80212364:	55400017 	ldw	r21,0(r10)
80212368:	50c00104 	addi	r3,r10,4
8021236c:	a8024226 	beq	r21,zero,80212c78 <___vfiprintf_internal_r+0x1344>
80212370:	48021816 	blt	r9,zero,80212bd4 <___vfiprintf_internal_r+0x12a0>
80212374:	480d883a 	mov	r6,r9
80212378:	000b883a 	mov	r5,zero
8021237c:	a809883a 	mov	r4,r21
80212380:	d8c02a15 	stw	r3,168(sp)
80212384:	da002b15 	stw	r8,172(sp)
80212388:	da402c15 	stw	r9,176(sp)
8021238c:	020e86c0 	call	8020e86c <memchr>
80212390:	d8c02a17 	ldw	r3,168(sp)
80212394:	da002b17 	ldw	r8,172(sp)
80212398:	da402c17 	ldw	r9,176(sp)
8021239c:	10024826 	beq	r2,zero,80212cc0 <___vfiprintf_internal_r+0x138c>
802123a0:	1567c83a 	sub	r19,r2,r21
802123a4:	df001d83 	ldbu	fp,118(sp)
802123a8:	d8c02215 	stw	r3,136(sp)
802123ac:	0013883a 	mov	r9,zero
802123b0:	003e6006 	br	80211d34 <__reset+0xfa1f1d34>
802123b4:	21003fcc 	andi	r4,r4,255
802123b8:	203fc026 	beq	r4,zero,802122bc <__reset+0xfa1f22bc>
802123bc:	d9c01d85 	stb	r7,118(sp)
802123c0:	003fbe06 	br	802122bc <__reset+0xfa1f22bc>
802123c4:	da802217 	ldw	r10,136(sp)
802123c8:	54400017 	ldw	r17,0(r10)
802123cc:	50800104 	addi	r2,r10,4
802123d0:	883e3b16 	blt	r17,zero,80211cc0 <__reset+0xfa1f1cc0>
802123d4:	d8802215 	stw	r2,136(sp)
802123d8:	80c00007 	ldb	r3,0(r16)
802123dc:	003db406 	br	80211ab0 <__reset+0xfa1f1ab0>
802123e0:	01000044 	movi	r4,1
802123e4:	01c00ac4 	movi	r7,43
802123e8:	80c00007 	ldb	r3,0(r16)
802123ec:	003db006 	br	80211ab0 <__reset+0xfa1f1ab0>
802123f0:	80c00007 	ldb	r3,0(r16)
802123f4:	82800044 	addi	r10,r16,1
802123f8:	1b423c26 	beq	r3,r13,80212cec <___vfiprintf_internal_r+0x13b8>
802123fc:	18bff404 	addi	r2,r3,-48
80212400:	0013883a 	mov	r9,zero
80212404:	30822b36 	bltu	r6,r2,80212cb4 <___vfiprintf_internal_r+0x1380>
80212408:	50c00007 	ldb	r3,0(r10)
8021240c:	4a4002a4 	muli	r9,r9,10
80212410:	54000044 	addi	r16,r10,1
80212414:	8015883a 	mov	r10,r16
80212418:	4893883a 	add	r9,r9,r2
8021241c:	18bff404 	addi	r2,r3,-48
80212420:	30bff92e 	bgeu	r6,r2,80212408 <__reset+0xfa1f2408>
80212424:	483da30e 	bge	r9,zero,80211ab4 <__reset+0xfa1f1ab4>
80212428:	027fffc4 	movi	r9,-1
8021242c:	003da106 	br	80211ab4 <__reset+0xfa1f1ab4>
80212430:	a5001014 	ori	r20,r20,64
80212434:	80c00007 	ldb	r3,0(r16)
80212438:	003d9d06 	br	80211ab0 <__reset+0xfa1f1ab0>
8021243c:	da802217 	ldw	r10,136(sp)
80212440:	d8001d85 	stb	zero,118(sp)
80212444:	50c00204 	addi	r3,r10,8
80212448:	54800017 	ldw	r18,0(r10)
8021244c:	54c00117 	ldw	r19,4(r10)
80212450:	4801ca16 	blt	r9,zero,80212b7c <___vfiprintf_internal_r+0x1248>
80212454:	013fdfc4 	movi	r4,-129
80212458:	94c4b03a 	or	r2,r18,r19
8021245c:	d8c02215 	stw	r3,136(sp)
80212460:	a128703a 	and	r20,r20,r4
80212464:	0039883a 	mov	fp,zero
80212468:	103f341e 	bne	r2,zero,8021213c <__reset+0xfa1f213c>
8021246c:	483e2e26 	beq	r9,zero,80211d28 <__reset+0xfa1f1d28>
80212470:	0025883a 	mov	r18,zero
80212474:	94800c04 	addi	r18,r18,48
80212478:	dc8019c5 	stb	r18,103(sp)
8021247c:	dcc02717 	ldw	r19,156(sp)
80212480:	dd4019c4 	addi	r21,sp,103
80212484:	003e2b06 	br	80211d34 <__reset+0xfa1f1d34>
80212488:	21003fcc 	andi	r4,r4,255
8021248c:	2002361e 	bne	r4,zero,80212d68 <___vfiprintf_internal_r+0x1434>
80212490:	1801c126 	beq	r3,zero,80212b98 <___vfiprintf_internal_r+0x1264>
80212494:	04800044 	movi	r18,1
80212498:	d8c01005 	stb	r3,64(sp)
8021249c:	d8001d85 	stb	zero,118(sp)
802124a0:	9027883a 	mov	r19,r18
802124a4:	dd401004 	addi	r21,sp,64
802124a8:	003f1106 	br	802120f0 <__reset+0xfa1f20f0>
802124ac:	d9402117 	ldw	r5,132(sp)
802124b0:	d9002017 	ldw	r4,128(sp)
802124b4:	d9801a04 	addi	r6,sp,104
802124b8:	d9c02b15 	stw	r7,172(sp)
802124bc:	dbc02a15 	stw	r15,168(sp)
802124c0:	02118200 	call	80211820 <__sprint_r.part.0>
802124c4:	d9c02b17 	ldw	r7,172(sp)
802124c8:	dbc02a17 	ldw	r15,168(sp)
802124cc:	10006d1e 	bne	r2,zero,80212684 <___vfiprintf_internal_r+0xd50>
802124d0:	d9801b17 	ldw	r6,108(sp)
802124d4:	d8801c17 	ldw	r2,112(sp)
802124d8:	d811883a 	mov	r8,sp
802124dc:	31400044 	addi	r5,r6,1
802124e0:	003e3306 	br	80211db0 <__reset+0xfa1f1db0>
802124e4:	d9401b17 	ldw	r5,108(sp)
802124e8:	d8801c17 	ldw	r2,112(sp)
802124ec:	29000044 	addi	r4,r5,1
802124f0:	d8c01d87 	ldb	r3,118(sp)
802124f4:	183e4d26 	beq	r3,zero,80211e2c <__reset+0xfa1f1e2c>
802124f8:	00c00044 	movi	r3,1
802124fc:	d9401d84 	addi	r5,sp,118
80212500:	10c5883a 	add	r2,r2,r3
80212504:	41400015 	stw	r5,0(r8)
80212508:	40c00115 	stw	r3,4(r8)
8021250c:	d8801c15 	stw	r2,112(sp)
80212510:	d9001b15 	stw	r4,108(sp)
80212514:	014001c4 	movi	r5,7
80212518:	2900a90e 	bge	r5,r4,802127c0 <___vfiprintf_internal_r+0xe8c>
8021251c:	1000da1e 	bne	r2,zero,80212888 <___vfiprintf_internal_r+0xf54>
80212520:	7000ab1e 	bne	r14,zero,802127d0 <___vfiprintf_internal_r+0xe9c>
80212524:	000b883a 	mov	r5,zero
80212528:	1809883a 	mov	r4,r3
8021252c:	d811883a 	mov	r8,sp
80212530:	00c02004 	movi	r3,128
80212534:	e0fe4d26 	beq	fp,r3,80211e6c <__reset+0xfa1f1e6c>
80212538:	4cf9c83a 	sub	fp,r9,r19
8021253c:	073e7b0e 	bge	zero,fp,80211f2c <__reset+0xfa1f1f2c>
80212540:	01c00404 	movi	r7,16
80212544:	3f01900e 	bge	r7,fp,80212b88 <___vfiprintf_internal_r+0x1254>
80212548:	00e008b4 	movhi	r3,32802
8021254c:	18f6b004 	addi	r3,r3,-9536
80212550:	d8c02415 	stw	r3,144(sp)
80212554:	034001c4 	movi	r13,7
80212558:	00000506 	br	80212570 <___vfiprintf_internal_r+0xc3c>
8021255c:	29000084 	addi	r4,r5,2
80212560:	42000204 	addi	r8,r8,8
80212564:	180b883a 	mov	r5,r3
80212568:	e73ffc04 	addi	fp,fp,-16
8021256c:	3f000d0e 	bge	r7,fp,802125a4 <___vfiprintf_internal_r+0xc70>
80212570:	10800404 	addi	r2,r2,16
80212574:	28c00044 	addi	r3,r5,1
80212578:	45c00015 	stw	r23,0(r8)
8021257c:	41c00115 	stw	r7,4(r8)
80212580:	d8801c15 	stw	r2,112(sp)
80212584:	d8c01b15 	stw	r3,108(sp)
80212588:	68fff40e 	bge	r13,r3,8021255c <__reset+0xfa1f255c>
8021258c:	1000101e 	bne	r2,zero,802125d0 <___vfiprintf_internal_r+0xc9c>
80212590:	e73ffc04 	addi	fp,fp,-16
80212594:	01000044 	movi	r4,1
80212598:	000b883a 	mov	r5,zero
8021259c:	d811883a 	mov	r8,sp
802125a0:	3f3ff316 	blt	r7,fp,80212570 <__reset+0xfa1f2570>
802125a4:	da802417 	ldw	r10,144(sp)
802125a8:	1705883a 	add	r2,r2,fp
802125ac:	47000115 	stw	fp,4(r8)
802125b0:	42800015 	stw	r10,0(r8)
802125b4:	d8801c15 	stw	r2,112(sp)
802125b8:	d9001b15 	stw	r4,108(sp)
802125bc:	00c001c4 	movi	r3,7
802125c0:	19003616 	blt	r3,r4,8021269c <___vfiprintf_internal_r+0xd68>
802125c4:	42000204 	addi	r8,r8,8
802125c8:	21000044 	addi	r4,r4,1
802125cc:	003e5706 	br	80211f2c <__reset+0xfa1f1f2c>
802125d0:	d9402117 	ldw	r5,132(sp)
802125d4:	d9002017 	ldw	r4,128(sp)
802125d8:	d9801a04 	addi	r6,sp,104
802125dc:	d9c02b15 	stw	r7,172(sp)
802125e0:	db402a15 	stw	r13,168(sp)
802125e4:	02118200 	call	80211820 <__sprint_r.part.0>
802125e8:	d9c02b17 	ldw	r7,172(sp)
802125ec:	db402a17 	ldw	r13,168(sp)
802125f0:	1000241e 	bne	r2,zero,80212684 <___vfiprintf_internal_r+0xd50>
802125f4:	d9401b17 	ldw	r5,108(sp)
802125f8:	d8801c17 	ldw	r2,112(sp)
802125fc:	d811883a 	mov	r8,sp
80212600:	29000044 	addi	r4,r5,1
80212604:	003fd806 	br	80212568 <__reset+0xfa1f2568>
80212608:	d9401b17 	ldw	r5,108(sp)
8021260c:	00e008b4 	movhi	r3,32802
80212610:	18f6b404 	addi	r3,r3,-9520
80212614:	d8c02415 	stw	r3,144(sp)
80212618:	29400044 	addi	r5,r5,1
8021261c:	d8c02417 	ldw	r3,144(sp)
80212620:	14c5883a 	add	r2,r2,r19
80212624:	44c00115 	stw	r19,4(r8)
80212628:	40c00015 	stw	r3,0(r8)
8021262c:	d8801c15 	stw	r2,112(sp)
80212630:	d9401b15 	stw	r5,108(sp)
80212634:	00c001c4 	movi	r3,7
80212638:	1940070e 	bge	r3,r5,80212658 <___vfiprintf_internal_r+0xd24>
8021263c:	103e4826 	beq	r2,zero,80211f60 <__reset+0xfa1f1f60>
80212640:	d9402117 	ldw	r5,132(sp)
80212644:	d9002017 	ldw	r4,128(sp)
80212648:	d9801a04 	addi	r6,sp,104
8021264c:	02118200 	call	80211820 <__sprint_r.part.0>
80212650:	10000c1e 	bne	r2,zero,80212684 <___vfiprintf_internal_r+0xd50>
80212654:	d8801c17 	ldw	r2,112(sp)
80212658:	8c80010e 	bge	r17,r18,80212660 <___vfiprintf_internal_r+0xd2c>
8021265c:	9023883a 	mov	r17,r18
80212660:	da802317 	ldw	r10,140(sp)
80212664:	5455883a 	add	r10,r10,r17
80212668:	da802315 	stw	r10,140(sp)
8021266c:	103e4126 	beq	r2,zero,80211f74 <__reset+0xfa1f1f74>
80212670:	d9402117 	ldw	r5,132(sp)
80212674:	d9002017 	ldw	r4,128(sp)
80212678:	d9801a04 	addi	r6,sp,104
8021267c:	02118200 	call	80211820 <__sprint_r.part.0>
80212680:	103e3c26 	beq	r2,zero,80211f74 <__reset+0xfa1f1f74>
80212684:	dd002117 	ldw	r20,132(sp)
80212688:	a080030b 	ldhu	r2,12(r20)
8021268c:	1080100c 	andi	r2,r2,64
80212690:	1001231e 	bne	r2,zero,80212b20 <___vfiprintf_internal_r+0x11ec>
80212694:	d8802317 	ldw	r2,140(sp)
80212698:	003d7b06 	br	80211c88 <__reset+0xfa1f1c88>
8021269c:	1000991e 	bne	r2,zero,80212904 <___vfiprintf_internal_r+0xfd0>
802126a0:	00c00044 	movi	r3,1
802126a4:	9805883a 	mov	r2,r19
802126a8:	dd400015 	stw	r21,0(sp)
802126ac:	dcc00115 	stw	r19,4(sp)
802126b0:	dcc01c15 	stw	r19,112(sp)
802126b4:	d8c01b15 	stw	r3,108(sp)
802126b8:	d811883a 	mov	r8,sp
802126bc:	42000204 	addi	r8,r8,8
802126c0:	a2c0010c 	andi	r11,r20,4
802126c4:	583fe426 	beq	r11,zero,80212658 <__reset+0xfa1f2658>
802126c8:	8ca7c83a 	sub	r19,r17,r18
802126cc:	04ffe20e 	bge	zero,r19,80212658 <__reset+0xfa1f2658>
802126d0:	01c00404 	movi	r7,16
802126d4:	3cffcc0e 	bge	r7,r19,80212608 <__reset+0xfa1f2608>
802126d8:	02a008b4 	movhi	r10,32802
802126dc:	52b6b404 	addi	r10,r10,-9520
802126e0:	d9001b17 	ldw	r4,108(sp)
802126e4:	da802415 	stw	r10,144(sp)
802126e8:	382b883a 	mov	r21,r7
802126ec:	050001c4 	movi	r20,7
802126f0:	df002017 	ldw	fp,128(sp)
802126f4:	00000506 	br	8021270c <___vfiprintf_internal_r+0xdd8>
802126f8:	21400084 	addi	r5,r4,2
802126fc:	42000204 	addi	r8,r8,8
80212700:	1809883a 	mov	r4,r3
80212704:	9cfffc04 	addi	r19,r19,-16
80212708:	acffc40e 	bge	r21,r19,8021261c <__reset+0xfa1f261c>
8021270c:	10800404 	addi	r2,r2,16
80212710:	20c00044 	addi	r3,r4,1
80212714:	45800015 	stw	r22,0(r8)
80212718:	45400115 	stw	r21,4(r8)
8021271c:	d8801c15 	stw	r2,112(sp)
80212720:	d8c01b15 	stw	r3,108(sp)
80212724:	a0fff40e 	bge	r20,r3,802126f8 <__reset+0xfa1f26f8>
80212728:	1000041e 	bne	r2,zero,8021273c <___vfiprintf_internal_r+0xe08>
8021272c:	01400044 	movi	r5,1
80212730:	0009883a 	mov	r4,zero
80212734:	d811883a 	mov	r8,sp
80212738:	003ff206 	br	80212704 <__reset+0xfa1f2704>
8021273c:	d9402117 	ldw	r5,132(sp)
80212740:	d9801a04 	addi	r6,sp,104
80212744:	e009883a 	mov	r4,fp
80212748:	02118200 	call	80211820 <__sprint_r.part.0>
8021274c:	103fcd1e 	bne	r2,zero,80212684 <__reset+0xfa1f2684>
80212750:	d9001b17 	ldw	r4,108(sp)
80212754:	d8801c17 	ldw	r2,112(sp)
80212758:	d811883a 	mov	r8,sp
8021275c:	21400044 	addi	r5,r4,1
80212760:	003fe806 	br	80212704 <__reset+0xfa1f2704>
80212764:	d9402117 	ldw	r5,132(sp)
80212768:	d9002017 	ldw	r4,128(sp)
8021276c:	d9801a04 	addi	r6,sp,104
80212770:	d9c02b15 	stw	r7,172(sp)
80212774:	db402a15 	stw	r13,168(sp)
80212778:	02118200 	call	80211820 <__sprint_r.part.0>
8021277c:	d9c02b17 	ldw	r7,172(sp)
80212780:	db402a17 	ldw	r13,168(sp)
80212784:	103fbf1e 	bne	r2,zero,80212684 <__reset+0xfa1f2684>
80212788:	d9401b17 	ldw	r5,108(sp)
8021278c:	d8801c17 	ldw	r2,112(sp)
80212790:	d811883a 	mov	r8,sp
80212794:	29800044 	addi	r6,r5,1
80212798:	003dc406 	br	80211eac <__reset+0xfa1f1eac>
8021279c:	1000d21e 	bne	r2,zero,80212ae8 <___vfiprintf_internal_r+0x11b4>
802127a0:	d8c01d87 	ldb	r3,118(sp)
802127a4:	18009526 	beq	r3,zero,802129fc <___vfiprintf_internal_r+0x10c8>
802127a8:	00800044 	movi	r2,1
802127ac:	d8c01d84 	addi	r3,sp,118
802127b0:	1009883a 	mov	r4,r2
802127b4:	d8c00015 	stw	r3,0(sp)
802127b8:	d8800115 	stw	r2,4(sp)
802127bc:	d811883a 	mov	r8,sp
802127c0:	200b883a 	mov	r5,r4
802127c4:	42000204 	addi	r8,r8,8
802127c8:	21000044 	addi	r4,r4,1
802127cc:	003d9706 	br	80211e2c <__reset+0xfa1f1e2c>
802127d0:	d9001d04 	addi	r4,sp,116
802127d4:	00800084 	movi	r2,2
802127d8:	d9000015 	stw	r4,0(sp)
802127dc:	d8800115 	stw	r2,4(sp)
802127e0:	1809883a 	mov	r4,r3
802127e4:	d811883a 	mov	r8,sp
802127e8:	200b883a 	mov	r5,r4
802127ec:	42000204 	addi	r8,r8,8
802127f0:	21000044 	addi	r4,r4,1
802127f4:	003f4e06 	br	80212530 <__reset+0xfa1f2530>
802127f8:	d8001d85 	stb	zero,118(sp)
802127fc:	48005016 	blt	r9,zero,80212940 <___vfiprintf_internal_r+0x100c>
80212800:	00ffdfc4 	movi	r3,-129
80212804:	94c4b03a 	or	r2,r18,r19
80212808:	a0e8703a 	and	r20,r20,r3
8021280c:	103d4426 	beq	r2,zero,80211d20 <__reset+0xfa1f1d20>
80212810:	0039883a 	mov	fp,zero
80212814:	d9002617 	ldw	r4,152(sp)
80212818:	dd401a04 	addi	r21,sp,104
8021281c:	908003cc 	andi	r2,r18,15
80212820:	9806973a 	slli	r3,r19,28
80212824:	2085883a 	add	r2,r4,r2
80212828:	9024d13a 	srli	r18,r18,4
8021282c:	10800003 	ldbu	r2,0(r2)
80212830:	9826d13a 	srli	r19,r19,4
80212834:	ad7fffc4 	addi	r21,r21,-1
80212838:	1ca4b03a 	or	r18,r3,r18
8021283c:	a8800005 	stb	r2,0(r21)
80212840:	94c4b03a 	or	r2,r18,r19
80212844:	103ff51e 	bne	r2,zero,8021281c <__reset+0xfa1f281c>
80212848:	003e5906 	br	802121b0 <__reset+0xfa1f21b0>
8021284c:	d9402117 	ldw	r5,132(sp)
80212850:	d9002017 	ldw	r4,128(sp)
80212854:	d9801a04 	addi	r6,sp,104
80212858:	02118200 	call	80211820 <__sprint_r.part.0>
8021285c:	103f891e 	bne	r2,zero,80212684 <__reset+0xfa1f2684>
80212860:	d8801c17 	ldw	r2,112(sp)
80212864:	d811883a 	mov	r8,sp
80212868:	003f9506 	br	802126c0 <__reset+0xfa1f26c0>
8021286c:	d9402117 	ldw	r5,132(sp)
80212870:	d9002017 	ldw	r4,128(sp)
80212874:	d9801a04 	addi	r6,sp,104
80212878:	02118200 	call	80211820 <__sprint_r.part.0>
8021287c:	103f811e 	bne	r2,zero,80212684 <__reset+0xfa1f2684>
80212880:	d811883a 	mov	r8,sp
80212884:	003ced06 	br	80211c3c <__reset+0xfa1f1c3c>
80212888:	d9402117 	ldw	r5,132(sp)
8021288c:	d9002017 	ldw	r4,128(sp)
80212890:	d9801a04 	addi	r6,sp,104
80212894:	da402c15 	stw	r9,176(sp)
80212898:	db802a15 	stw	r14,168(sp)
8021289c:	02118200 	call	80211820 <__sprint_r.part.0>
802128a0:	da402c17 	ldw	r9,176(sp)
802128a4:	db802a17 	ldw	r14,168(sp)
802128a8:	103f761e 	bne	r2,zero,80212684 <__reset+0xfa1f2684>
802128ac:	d9401b17 	ldw	r5,108(sp)
802128b0:	d8801c17 	ldw	r2,112(sp)
802128b4:	d811883a 	mov	r8,sp
802128b8:	29000044 	addi	r4,r5,1
802128bc:	003d5b06 	br	80211e2c <__reset+0xfa1f1e2c>
802128c0:	d9402117 	ldw	r5,132(sp)
802128c4:	d9002017 	ldw	r4,128(sp)
802128c8:	d9801a04 	addi	r6,sp,104
802128cc:	da402c15 	stw	r9,176(sp)
802128d0:	02118200 	call	80211820 <__sprint_r.part.0>
802128d4:	da402c17 	ldw	r9,176(sp)
802128d8:	103f6a1e 	bne	r2,zero,80212684 <__reset+0xfa1f2684>
802128dc:	d9401b17 	ldw	r5,108(sp)
802128e0:	d8801c17 	ldw	r2,112(sp)
802128e4:	d811883a 	mov	r8,sp
802128e8:	29000044 	addi	r4,r5,1
802128ec:	003f1006 	br	80212530 <__reset+0xfa1f2530>
802128f0:	1000c31e 	bne	r2,zero,80212c00 <___vfiprintf_internal_r+0x12cc>
802128f4:	01000044 	movi	r4,1
802128f8:	000b883a 	mov	r5,zero
802128fc:	d811883a 	mov	r8,sp
80212900:	003f0d06 	br	80212538 <__reset+0xfa1f2538>
80212904:	d9402117 	ldw	r5,132(sp)
80212908:	d9002017 	ldw	r4,128(sp)
8021290c:	d9801a04 	addi	r6,sp,104
80212910:	02118200 	call	80211820 <__sprint_r.part.0>
80212914:	103f5b1e 	bne	r2,zero,80212684 <__reset+0xfa1f2684>
80212918:	d9001b17 	ldw	r4,108(sp)
8021291c:	d8801c17 	ldw	r2,112(sp)
80212920:	d811883a 	mov	r8,sp
80212924:	21000044 	addi	r4,r4,1
80212928:	003d8006 	br	80211f2c <__reset+0xfa1f1f2c>
8021292c:	012008b4 	movhi	r4,32802
80212930:	21364004 	addi	r4,r4,-9984
80212934:	d9002615 	stw	r4,152(sp)
80212938:	d8c02215 	stw	r3,136(sp)
8021293c:	1029883a 	mov	r20,r2
80212940:	94c4b03a 	or	r2,r18,r19
80212944:	103fb21e 	bne	r2,zero,80212810 <__reset+0xfa1f2810>
80212948:	0039883a 	mov	fp,zero
8021294c:	00800084 	movi	r2,2
80212950:	003e6b06 	br	80212300 <__reset+0xfa1f2300>
80212954:	da802217 	ldw	r10,136(sp)
80212958:	d8001d85 	stb	zero,118(sp)
8021295c:	0027883a 	mov	r19,zero
80212960:	50800104 	addi	r2,r10,4
80212964:	54800017 	ldw	r18,0(r10)
80212968:	483e6016 	blt	r9,zero,802122ec <__reset+0xfa1f22ec>
8021296c:	00ffdfc4 	movi	r3,-129
80212970:	d8802215 	stw	r2,136(sp)
80212974:	a0e8703a 	and	r20,r20,r3
80212978:	0039883a 	mov	fp,zero
8021297c:	903ebb26 	beq	r18,zero,8021246c <__reset+0xfa1f246c>
80212980:	00800244 	movi	r2,9
80212984:	14bdee36 	bltu	r2,r18,80212140 <__reset+0xfa1f2140>
80212988:	003eba06 	br	80212474 <__reset+0xfa1f2474>
8021298c:	00800c04 	movi	r2,48
80212990:	d8c01d45 	stb	r3,117(sp)
80212994:	d8801d05 	stb	r2,116(sp)
80212998:	d8001d85 	stb	zero,118(sp)
8021299c:	a0c00094 	ori	r3,r20,2
802129a0:	4800a916 	blt	r9,zero,80212c48 <___vfiprintf_internal_r+0x1314>
802129a4:	00bfdfc4 	movi	r2,-129
802129a8:	a096703a 	and	r11,r20,r2
802129ac:	5d000094 	ori	r20,r11,2
802129b0:	0039883a 	mov	fp,zero
802129b4:	003f9706 	br	80212814 <__reset+0xfa1f2814>
802129b8:	8025883a 	mov	r18,r16
802129bc:	003c2e06 	br	80211a78 <__reset+0xfa1f1a78>
802129c0:	00a008b4 	movhi	r2,32802
802129c4:	10b64004 	addi	r2,r2,-9984
802129c8:	0039883a 	mov	fp,zero
802129cc:	d8802615 	stw	r2,152(sp)
802129d0:	003f9006 	br	80212814 <__reset+0xfa1f2814>
802129d4:	04a5c83a 	sub	r18,zero,r18
802129d8:	07000b44 	movi	fp,45
802129dc:	9004c03a 	cmpne	r2,r18,zero
802129e0:	04e7c83a 	sub	r19,zero,r19
802129e4:	df001d85 	stb	fp,118(sp)
802129e8:	98a7c83a 	sub	r19,r19,r2
802129ec:	48009f16 	blt	r9,zero,80212c6c <___vfiprintf_internal_r+0x1338>
802129f0:	00bfdfc4 	movi	r2,-129
802129f4:	a0a8703a 	and	r20,r20,r2
802129f8:	003dd006 	br	8021213c <__reset+0xfa1f213c>
802129fc:	70004c26 	beq	r14,zero,80212b30 <___vfiprintf_internal_r+0x11fc>
80212a00:	00800084 	movi	r2,2
80212a04:	d8c01d04 	addi	r3,sp,116
80212a08:	d8c00015 	stw	r3,0(sp)
80212a0c:	d8800115 	stw	r2,4(sp)
80212a10:	01000044 	movi	r4,1
80212a14:	d811883a 	mov	r8,sp
80212a18:	003f7306 	br	802127e8 <__reset+0xfa1f27e8>
80212a1c:	a080100c 	andi	r2,r20,64
80212a20:	da802217 	ldw	r10,136(sp)
80212a24:	103e0626 	beq	r2,zero,80212240 <__reset+0xfa1f2240>
80212a28:	5480000f 	ldh	r18,0(r10)
80212a2c:	52800104 	addi	r10,r10,4
80212a30:	da802215 	stw	r10,136(sp)
80212a34:	9027d7fa 	srai	r19,r18,31
80212a38:	9805883a 	mov	r2,r19
80212a3c:	003db806 	br	80212120 <__reset+0xfa1f2120>
80212a40:	a080040c 	andi	r2,r20,16
80212a44:	1000091e 	bne	r2,zero,80212a6c <___vfiprintf_internal_r+0x1138>
80212a48:	a2c0100c 	andi	r11,r20,64
80212a4c:	58000726 	beq	r11,zero,80212a6c <___vfiprintf_internal_r+0x1138>
80212a50:	da802217 	ldw	r10,136(sp)
80212a54:	50800017 	ldw	r2,0(r10)
80212a58:	52800104 	addi	r10,r10,4
80212a5c:	da802215 	stw	r10,136(sp)
80212a60:	da802317 	ldw	r10,140(sp)
80212a64:	1280000d 	sth	r10,0(r2)
80212a68:	003be706 	br	80211a08 <__reset+0xfa1f1a08>
80212a6c:	da802217 	ldw	r10,136(sp)
80212a70:	50800017 	ldw	r2,0(r10)
80212a74:	52800104 	addi	r10,r10,4
80212a78:	da802215 	stw	r10,136(sp)
80212a7c:	da802317 	ldw	r10,140(sp)
80212a80:	12800015 	stw	r10,0(r2)
80212a84:	003be006 	br	80211a08 <__reset+0xfa1f1a08>
80212a88:	a080100c 	andi	r2,r20,64
80212a8c:	da802217 	ldw	r10,136(sp)
80212a90:	10003026 	beq	r2,zero,80212b54 <___vfiprintf_internal_r+0x1220>
80212a94:	5480000b 	ldhu	r18,0(r10)
80212a98:	52800104 	addi	r10,r10,4
80212a9c:	0027883a 	mov	r19,zero
80212aa0:	da802215 	stw	r10,136(sp)
80212aa4:	003d8006 	br	802120a8 <__reset+0xfa1f20a8>
80212aa8:	80c00007 	ldb	r3,0(r16)
80212aac:	003c0006 	br	80211ab0 <__reset+0xfa1f1ab0>
80212ab0:	a080100c 	andi	r2,r20,64
80212ab4:	d8001d85 	stb	zero,118(sp)
80212ab8:	da802217 	ldw	r10,136(sp)
80212abc:	1000201e 	bne	r2,zero,80212b40 <___vfiprintf_internal_r+0x120c>
80212ac0:	50800104 	addi	r2,r10,4
80212ac4:	54800017 	ldw	r18,0(r10)
80212ac8:	0027883a 	mov	r19,zero
80212acc:	483def0e 	bge	r9,zero,8021228c <__reset+0xfa1f228c>
80212ad0:	94c6b03a 	or	r3,r18,r19
80212ad4:	d8802215 	stw	r2,136(sp)
80212ad8:	183d4e1e 	bne	r3,zero,80212014 <__reset+0xfa1f2014>
80212adc:	0039883a 	mov	fp,zero
80212ae0:	0005883a 	mov	r2,zero
80212ae4:	003e0606 	br	80212300 <__reset+0xfa1f2300>
80212ae8:	d9402117 	ldw	r5,132(sp)
80212aec:	d9002017 	ldw	r4,128(sp)
80212af0:	d9801a04 	addi	r6,sp,104
80212af4:	da402c15 	stw	r9,176(sp)
80212af8:	db802a15 	stw	r14,168(sp)
80212afc:	02118200 	call	80211820 <__sprint_r.part.0>
80212b00:	da402c17 	ldw	r9,176(sp)
80212b04:	db802a17 	ldw	r14,168(sp)
80212b08:	103ede1e 	bne	r2,zero,80212684 <__reset+0xfa1f2684>
80212b0c:	d9401b17 	ldw	r5,108(sp)
80212b10:	d8801c17 	ldw	r2,112(sp)
80212b14:	d811883a 	mov	r8,sp
80212b18:	29000044 	addi	r4,r5,1
80212b1c:	003e7406 	br	802124f0 <__reset+0xfa1f24f0>
80212b20:	00bfffc4 	movi	r2,-1
80212b24:	003c5806 	br	80211c88 <__reset+0xfa1f1c88>
80212b28:	d811883a 	mov	r8,sp
80212b2c:	003ee806 	br	802126d0 <__reset+0xfa1f26d0>
80212b30:	000b883a 	mov	r5,zero
80212b34:	01000044 	movi	r4,1
80212b38:	d811883a 	mov	r8,sp
80212b3c:	003e7c06 	br	80212530 <__reset+0xfa1f2530>
80212b40:	50800104 	addi	r2,r10,4
80212b44:	5480000b 	ldhu	r18,0(r10)
80212b48:	0027883a 	mov	r19,zero
80212b4c:	483dcf0e 	bge	r9,zero,8021228c <__reset+0xfa1f228c>
80212b50:	003fdf06 	br	80212ad0 <__reset+0xfa1f2ad0>
80212b54:	54800017 	ldw	r18,0(r10)
80212b58:	52800104 	addi	r10,r10,4
80212b5c:	0027883a 	mov	r19,zero
80212b60:	da802215 	stw	r10,136(sp)
80212b64:	003d5006 	br	802120a8 <__reset+0xfa1f20a8>
80212b68:	50800104 	addi	r2,r10,4
80212b6c:	5480000b 	ldhu	r18,0(r10)
80212b70:	0027883a 	mov	r19,zero
80212b74:	483f7d0e 	bge	r9,zero,8021296c <__reset+0xfa1f296c>
80212b78:	003ddc06 	br	802122ec <__reset+0xfa1f22ec>
80212b7c:	d8c02215 	stw	r3,136(sp)
80212b80:	0039883a 	mov	fp,zero
80212b84:	003ddb06 	br	802122f4 <__reset+0xfa1f22f4>
80212b88:	02a008b4 	movhi	r10,32802
80212b8c:	52b6b004 	addi	r10,r10,-9536
80212b90:	da802415 	stw	r10,144(sp)
80212b94:	003e8306 	br	802125a4 <__reset+0xfa1f25a4>
80212b98:	d8801c17 	ldw	r2,112(sp)
80212b9c:	dd002117 	ldw	r20,132(sp)
80212ba0:	103eb926 	beq	r2,zero,80212688 <__reset+0xfa1f2688>
80212ba4:	d9002017 	ldw	r4,128(sp)
80212ba8:	d9801a04 	addi	r6,sp,104
80212bac:	a00b883a 	mov	r5,r20
80212bb0:	02118200 	call	80211820 <__sprint_r.part.0>
80212bb4:	003eb406 	br	80212688 <__reset+0xfa1f2688>
80212bb8:	80c00043 	ldbu	r3,1(r16)
80212bbc:	a5000814 	ori	r20,r20,32
80212bc0:	84000044 	addi	r16,r16,1
80212bc4:	18c03fcc 	andi	r3,r3,255
80212bc8:	18c0201c 	xori	r3,r3,128
80212bcc:	18ffe004 	addi	r3,r3,-128
80212bd0:	003bb706 	br	80211ab0 <__reset+0xfa1f1ab0>
80212bd4:	a809883a 	mov	r4,r21
80212bd8:	d8c02a15 	stw	r3,168(sp)
80212bdc:	da002b15 	stw	r8,172(sp)
80212be0:	0206dec0 	call	80206dec <strlen>
80212be4:	d8c02a17 	ldw	r3,168(sp)
80212be8:	1027883a 	mov	r19,r2
80212bec:	df001d83 	ldbu	fp,118(sp)
80212bf0:	d8c02215 	stw	r3,136(sp)
80212bf4:	0013883a 	mov	r9,zero
80212bf8:	da002b17 	ldw	r8,172(sp)
80212bfc:	003c4d06 	br	80211d34 <__reset+0xfa1f1d34>
80212c00:	d9402117 	ldw	r5,132(sp)
80212c04:	d9002017 	ldw	r4,128(sp)
80212c08:	d9801a04 	addi	r6,sp,104
80212c0c:	da402c15 	stw	r9,176(sp)
80212c10:	02118200 	call	80211820 <__sprint_r.part.0>
80212c14:	da402c17 	ldw	r9,176(sp)
80212c18:	103e9a1e 	bne	r2,zero,80212684 <__reset+0xfa1f2684>
80212c1c:	d9401b17 	ldw	r5,108(sp)
80212c20:	d8801c17 	ldw	r2,112(sp)
80212c24:	d811883a 	mov	r8,sp
80212c28:	29000044 	addi	r4,r5,1
80212c2c:	003e4206 	br	80212538 <__reset+0xfa1f2538>
80212c30:	d9401b17 	ldw	r5,108(sp)
80212c34:	012008b4 	movhi	r4,32802
80212c38:	2136b404 	addi	r4,r4,-9520
80212c3c:	d9002415 	stw	r4,144(sp)
80212c40:	29400044 	addi	r5,r5,1
80212c44:	003c6d06 	br	80211dfc <__reset+0xfa1f1dfc>
80212c48:	0039883a 	mov	fp,zero
80212c4c:	00800084 	movi	r2,2
80212c50:	10803fcc 	andi	r2,r2,255
80212c54:	01000044 	movi	r4,1
80212c58:	11001e26 	beq	r2,r4,80212cd4 <___vfiprintf_internal_r+0x13a0>
80212c5c:	01000084 	movi	r4,2
80212c60:	11001e1e 	bne	r2,r4,80212cdc <___vfiprintf_internal_r+0x13a8>
80212c64:	1829883a 	mov	r20,r3
80212c68:	003eea06 	br	80212814 <__reset+0xfa1f2814>
80212c6c:	a007883a 	mov	r3,r20
80212c70:	00800044 	movi	r2,1
80212c74:	003ff606 	br	80212c50 <__reset+0xfa1f2c50>
80212c78:	00800184 	movi	r2,6
80212c7c:	1240012e 	bgeu	r2,r9,80212c84 <___vfiprintf_internal_r+0x1350>
80212c80:	1013883a 	mov	r9,r2
80212c84:	4827883a 	mov	r19,r9
80212c88:	4825883a 	mov	r18,r9
80212c8c:	48001516 	blt	r9,zero,80212ce4 <___vfiprintf_internal_r+0x13b0>
80212c90:	056008b4 	movhi	r21,32802
80212c94:	d8c02215 	stw	r3,136(sp)
80212c98:	ad764504 	addi	r21,r21,-9964
80212c9c:	003d1406 	br	802120f0 <__reset+0xfa1f20f0>
80212ca0:	02a008b4 	movhi	r10,32802
80212ca4:	52b6b004 	addi	r10,r10,-9536
80212ca8:	da802415 	stw	r10,144(sp)
80212cac:	200d883a 	mov	r6,r4
80212cb0:	003c9106 	br	80211ef8 <__reset+0xfa1f1ef8>
80212cb4:	5021883a 	mov	r16,r10
80212cb8:	0013883a 	mov	r9,zero
80212cbc:	003b7d06 	br	80211ab4 <__reset+0xfa1f1ab4>
80212cc0:	4827883a 	mov	r19,r9
80212cc4:	df001d83 	ldbu	fp,118(sp)
80212cc8:	d8c02215 	stw	r3,136(sp)
80212ccc:	0013883a 	mov	r9,zero
80212cd0:	003c1806 	br	80211d34 <__reset+0xfa1f1d34>
80212cd4:	1829883a 	mov	r20,r3
80212cd8:	003d1806 	br	8021213c <__reset+0xfa1f213c>
80212cdc:	1829883a 	mov	r20,r3
80212ce0:	003ccd06 	br	80212018 <__reset+0xfa1f2018>
80212ce4:	0025883a 	mov	r18,zero
80212ce8:	003fe906 	br	80212c90 <__reset+0xfa1f2c90>
80212cec:	d8802217 	ldw	r2,136(sp)
80212cf0:	80c00043 	ldbu	r3,1(r16)
80212cf4:	5021883a 	mov	r16,r10
80212cf8:	12400017 	ldw	r9,0(r2)
80212cfc:	10800104 	addi	r2,r2,4
80212d00:	d8802215 	stw	r2,136(sp)
80212d04:	483faf0e 	bge	r9,zero,80212bc4 <__reset+0xfa1f2bc4>
80212d08:	18c03fcc 	andi	r3,r3,255
80212d0c:	18c0201c 	xori	r3,r3,128
80212d10:	027fffc4 	movi	r9,-1
80212d14:	18ffe004 	addi	r3,r3,-128
80212d18:	003b6506 	br	80211ab0 <__reset+0xfa1f1ab0>
80212d1c:	d9c01d85 	stb	r7,118(sp)
80212d20:	003ca006 	br	80211fa4 <__reset+0xfa1f1fa4>
80212d24:	d9c01d85 	stb	r7,118(sp)
80212d28:	003cad06 	br	80211fe0 <__reset+0xfa1f1fe0>
80212d2c:	d9c01d85 	stb	r7,118(sp)
80212d30:	003d7d06 	br	80212328 <__reset+0xfa1f2328>
80212d34:	d9c01d85 	stb	r7,118(sp)
80212d38:	003d5f06 	br	802122b8 <__reset+0xfa1f22b8>
80212d3c:	a080004c 	andi	r2,r20,1
80212d40:	0039883a 	mov	fp,zero
80212d44:	10000526 	beq	r2,zero,80212d5c <___vfiprintf_internal_r+0x1428>
80212d48:	00800c04 	movi	r2,48
80212d4c:	d88019c5 	stb	r2,103(sp)
80212d50:	dcc02717 	ldw	r19,156(sp)
80212d54:	dd4019c4 	addi	r21,sp,103
80212d58:	003bf606 	br	80211d34 <__reset+0xfa1f1d34>
80212d5c:	0027883a 	mov	r19,zero
80212d60:	dd401a04 	addi	r21,sp,104
80212d64:	003bf306 	br	80211d34 <__reset+0xfa1f1d34>
80212d68:	d9c01d85 	stb	r7,118(sp)
80212d6c:	003dc806 	br	80212490 <__reset+0xfa1f2490>
80212d70:	d9c01d85 	stb	r7,118(sp)
80212d74:	003d3a06 	br	80212260 <__reset+0xfa1f2260>
80212d78:	d9c01d85 	stb	r7,118(sp)
80212d7c:	003d2a06 	br	80212228 <__reset+0xfa1f2228>
80212d80:	d9c01d85 	stb	r7,118(sp)
80212d84:	003cde06 	br	80212100 <__reset+0xfa1f2100>
80212d88:	d9c01d85 	stb	r7,118(sp)
80212d8c:	003cbc06 	br	80212080 <__reset+0xfa1f2080>

80212d90 <__vfiprintf_internal>:
80212d90:	00a008b4 	movhi	r2,32802
80212d94:	10be7d04 	addi	r2,r2,-1548
80212d98:	300f883a 	mov	r7,r6
80212d9c:	280d883a 	mov	r6,r5
80212da0:	200b883a 	mov	r5,r4
80212da4:	11000017 	ldw	r4,0(r2)
80212da8:	02119341 	jmpi	80211934 <___vfiprintf_internal_r>

80212dac <__sbprintf>:
80212dac:	2880030b 	ldhu	r2,12(r5)
80212db0:	2ac01917 	ldw	r11,100(r5)
80212db4:	2a80038b 	ldhu	r10,14(r5)
80212db8:	2a400717 	ldw	r9,28(r5)
80212dbc:	2a000917 	ldw	r8,36(r5)
80212dc0:	defee204 	addi	sp,sp,-1144
80212dc4:	00c10004 	movi	r3,1024
80212dc8:	dc011a15 	stw	r16,1128(sp)
80212dcc:	10bfff4c 	andi	r2,r2,65533
80212dd0:	2821883a 	mov	r16,r5
80212dd4:	d8cb883a 	add	r5,sp,r3
80212dd8:	dc811c15 	stw	r18,1136(sp)
80212ddc:	dc411b15 	stw	r17,1132(sp)
80212de0:	dfc11d15 	stw	ra,1140(sp)
80212de4:	2025883a 	mov	r18,r4
80212de8:	d881030d 	sth	r2,1036(sp)
80212dec:	dac11915 	stw	r11,1124(sp)
80212df0:	da81038d 	sth	r10,1038(sp)
80212df4:	da410715 	stw	r9,1052(sp)
80212df8:	da010915 	stw	r8,1060(sp)
80212dfc:	dec10015 	stw	sp,1024(sp)
80212e00:	dec10415 	stw	sp,1040(sp)
80212e04:	d8c10215 	stw	r3,1032(sp)
80212e08:	d8c10515 	stw	r3,1044(sp)
80212e0c:	d8010615 	stw	zero,1048(sp)
80212e10:	02119340 	call	80211934 <___vfiprintf_internal_r>
80212e14:	1023883a 	mov	r17,r2
80212e18:	10000416 	blt	r2,zero,80212e2c <__sbprintf+0x80>
80212e1c:	d9410004 	addi	r5,sp,1024
80212e20:	9009883a 	mov	r4,r18
80212e24:	020cf240 	call	8020cf24 <_fflush_r>
80212e28:	10000d1e 	bne	r2,zero,80212e60 <__sbprintf+0xb4>
80212e2c:	d881030b 	ldhu	r2,1036(sp)
80212e30:	1080100c 	andi	r2,r2,64
80212e34:	10000326 	beq	r2,zero,80212e44 <__sbprintf+0x98>
80212e38:	8080030b 	ldhu	r2,12(r16)
80212e3c:	10801014 	ori	r2,r2,64
80212e40:	8080030d 	sth	r2,12(r16)
80212e44:	8805883a 	mov	r2,r17
80212e48:	dfc11d17 	ldw	ra,1140(sp)
80212e4c:	dc811c17 	ldw	r18,1136(sp)
80212e50:	dc411b17 	ldw	r17,1132(sp)
80212e54:	dc011a17 	ldw	r16,1128(sp)
80212e58:	dec11e04 	addi	sp,sp,1144
80212e5c:	f800283a 	ret
80212e60:	047fffc4 	movi	r17,-1
80212e64:	003ff106 	br	80212e2c <__reset+0xfa1f2e2c>

80212e68 <_write_r>:
80212e68:	defffd04 	addi	sp,sp,-12
80212e6c:	2805883a 	mov	r2,r5
80212e70:	dc000015 	stw	r16,0(sp)
80212e74:	042008b4 	movhi	r16,32802
80212e78:	dc400115 	stw	r17,4(sp)
80212e7c:	300b883a 	mov	r5,r6
80212e80:	843ea204 	addi	r16,r16,-1400
80212e84:	2023883a 	mov	r17,r4
80212e88:	380d883a 	mov	r6,r7
80212e8c:	1009883a 	mov	r4,r2
80212e90:	dfc00215 	stw	ra,8(sp)
80212e94:	80000015 	stw	zero,0(r16)
80212e98:	02176000 	call	80217600 <write>
80212e9c:	00ffffc4 	movi	r3,-1
80212ea0:	10c00526 	beq	r2,r3,80212eb8 <_write_r+0x50>
80212ea4:	dfc00217 	ldw	ra,8(sp)
80212ea8:	dc400117 	ldw	r17,4(sp)
80212eac:	dc000017 	ldw	r16,0(sp)
80212eb0:	dec00304 	addi	sp,sp,12
80212eb4:	f800283a 	ret
80212eb8:	80c00017 	ldw	r3,0(r16)
80212ebc:	183ff926 	beq	r3,zero,80212ea4 <__reset+0xfa1f2ea4>
80212ec0:	88c00015 	stw	r3,0(r17)
80212ec4:	003ff706 	br	80212ea4 <__reset+0xfa1f2ea4>

80212ec8 <_close_r>:
80212ec8:	defffd04 	addi	sp,sp,-12
80212ecc:	dc000015 	stw	r16,0(sp)
80212ed0:	042008b4 	movhi	r16,32802
80212ed4:	dc400115 	stw	r17,4(sp)
80212ed8:	843ea204 	addi	r16,r16,-1400
80212edc:	2023883a 	mov	r17,r4
80212ee0:	2809883a 	mov	r4,r5
80212ee4:	dfc00215 	stw	ra,8(sp)
80212ee8:	80000015 	stw	zero,0(r16)
80212eec:	0216b680 	call	80216b68 <close>
80212ef0:	00ffffc4 	movi	r3,-1
80212ef4:	10c00526 	beq	r2,r3,80212f0c <_close_r+0x44>
80212ef8:	dfc00217 	ldw	ra,8(sp)
80212efc:	dc400117 	ldw	r17,4(sp)
80212f00:	dc000017 	ldw	r16,0(sp)
80212f04:	dec00304 	addi	sp,sp,12
80212f08:	f800283a 	ret
80212f0c:	80c00017 	ldw	r3,0(r16)
80212f10:	183ff926 	beq	r3,zero,80212ef8 <__reset+0xfa1f2ef8>
80212f14:	88c00015 	stw	r3,0(r17)
80212f18:	003ff706 	br	80212ef8 <__reset+0xfa1f2ef8>

80212f1c <_calloc_r>:
80212f1c:	298b383a 	mul	r5,r5,r6
80212f20:	defffe04 	addi	sp,sp,-8
80212f24:	dfc00115 	stw	ra,4(sp)
80212f28:	dc000015 	stw	r16,0(sp)
80212f2c:	020e0600 	call	8020e060 <_malloc_r>
80212f30:	10002926 	beq	r2,zero,80212fd8 <_calloc_r+0xbc>
80212f34:	11bfff17 	ldw	r6,-4(r2)
80212f38:	1021883a 	mov	r16,r2
80212f3c:	00bfff04 	movi	r2,-4
80212f40:	308c703a 	and	r6,r6,r2
80212f44:	00c00904 	movi	r3,36
80212f48:	308d883a 	add	r6,r6,r2
80212f4c:	19801636 	bltu	r3,r6,80212fa8 <_calloc_r+0x8c>
80212f50:	008004c4 	movi	r2,19
80212f54:	11800b2e 	bgeu	r2,r6,80212f84 <_calloc_r+0x68>
80212f58:	80000015 	stw	zero,0(r16)
80212f5c:	80000115 	stw	zero,4(r16)
80212f60:	008006c4 	movi	r2,27
80212f64:	11801a2e 	bgeu	r2,r6,80212fd0 <_calloc_r+0xb4>
80212f68:	80000215 	stw	zero,8(r16)
80212f6c:	80000315 	stw	zero,12(r16)
80212f70:	30c0151e 	bne	r6,r3,80212fc8 <_calloc_r+0xac>
80212f74:	80000415 	stw	zero,16(r16)
80212f78:	80800604 	addi	r2,r16,24
80212f7c:	80000515 	stw	zero,20(r16)
80212f80:	00000106 	br	80212f88 <_calloc_r+0x6c>
80212f84:	8005883a 	mov	r2,r16
80212f88:	10000015 	stw	zero,0(r2)
80212f8c:	10000115 	stw	zero,4(r2)
80212f90:	10000215 	stw	zero,8(r2)
80212f94:	8005883a 	mov	r2,r16
80212f98:	dfc00117 	ldw	ra,4(sp)
80212f9c:	dc000017 	ldw	r16,0(sp)
80212fa0:	dec00204 	addi	sp,sp,8
80212fa4:	f800283a 	ret
80212fa8:	000b883a 	mov	r5,zero
80212fac:	8009883a 	mov	r4,r16
80212fb0:	020eaac0 	call	8020eaac <memset>
80212fb4:	8005883a 	mov	r2,r16
80212fb8:	dfc00117 	ldw	ra,4(sp)
80212fbc:	dc000017 	ldw	r16,0(sp)
80212fc0:	dec00204 	addi	sp,sp,8
80212fc4:	f800283a 	ret
80212fc8:	80800404 	addi	r2,r16,16
80212fcc:	003fee06 	br	80212f88 <__reset+0xfa1f2f88>
80212fd0:	80800204 	addi	r2,r16,8
80212fd4:	003fec06 	br	80212f88 <__reset+0xfa1f2f88>
80212fd8:	0005883a 	mov	r2,zero
80212fdc:	003fee06 	br	80212f98 <__reset+0xfa1f2f98>

80212fe0 <_fclose_r>:
80212fe0:	28003926 	beq	r5,zero,802130c8 <_fclose_r+0xe8>
80212fe4:	defffc04 	addi	sp,sp,-16
80212fe8:	dc400115 	stw	r17,4(sp)
80212fec:	dc000015 	stw	r16,0(sp)
80212ff0:	dfc00315 	stw	ra,12(sp)
80212ff4:	dc800215 	stw	r18,8(sp)
80212ff8:	2023883a 	mov	r17,r4
80212ffc:	2821883a 	mov	r16,r5
80213000:	20000226 	beq	r4,zero,8021300c <_fclose_r+0x2c>
80213004:	20800e17 	ldw	r2,56(r4)
80213008:	10002726 	beq	r2,zero,802130a8 <_fclose_r+0xc8>
8021300c:	8080030f 	ldh	r2,12(r16)
80213010:	1000071e 	bne	r2,zero,80213030 <_fclose_r+0x50>
80213014:	0005883a 	mov	r2,zero
80213018:	dfc00317 	ldw	ra,12(sp)
8021301c:	dc800217 	ldw	r18,8(sp)
80213020:	dc400117 	ldw	r17,4(sp)
80213024:	dc000017 	ldw	r16,0(sp)
80213028:	dec00404 	addi	sp,sp,16
8021302c:	f800283a 	ret
80213030:	800b883a 	mov	r5,r16
80213034:	8809883a 	mov	r4,r17
80213038:	020cd080 	call	8020cd08 <__sflush_r>
8021303c:	1025883a 	mov	r18,r2
80213040:	80800b17 	ldw	r2,44(r16)
80213044:	10000426 	beq	r2,zero,80213058 <_fclose_r+0x78>
80213048:	81400717 	ldw	r5,28(r16)
8021304c:	8809883a 	mov	r4,r17
80213050:	103ee83a 	callr	r2
80213054:	10001616 	blt	r2,zero,802130b0 <_fclose_r+0xd0>
80213058:	8080030b 	ldhu	r2,12(r16)
8021305c:	1080200c 	andi	r2,r2,128
80213060:	1000151e 	bne	r2,zero,802130b8 <_fclose_r+0xd8>
80213064:	81400c17 	ldw	r5,48(r16)
80213068:	28000526 	beq	r5,zero,80213080 <_fclose_r+0xa0>
8021306c:	80801004 	addi	r2,r16,64
80213070:	28800226 	beq	r5,r2,8021307c <_fclose_r+0x9c>
80213074:	8809883a 	mov	r4,r17
80213078:	020d4740 	call	8020d474 <_free_r>
8021307c:	80000c15 	stw	zero,48(r16)
80213080:	81401117 	ldw	r5,68(r16)
80213084:	28000326 	beq	r5,zero,80213094 <_fclose_r+0xb4>
80213088:	8809883a 	mov	r4,r17
8021308c:	020d4740 	call	8020d474 <_free_r>
80213090:	80001115 	stw	zero,68(r16)
80213094:	020d3100 	call	8020d310 <__sfp_lock_acquire>
80213098:	8000030d 	sth	zero,12(r16)
8021309c:	020d3140 	call	8020d314 <__sfp_lock_release>
802130a0:	9005883a 	mov	r2,r18
802130a4:	003fdc06 	br	80213018 <__reset+0xfa1f3018>
802130a8:	020d3000 	call	8020d300 <__sinit>
802130ac:	003fd706 	br	8021300c <__reset+0xfa1f300c>
802130b0:	04bfffc4 	movi	r18,-1
802130b4:	003fe806 	br	80213058 <__reset+0xfa1f3058>
802130b8:	81400417 	ldw	r5,16(r16)
802130bc:	8809883a 	mov	r4,r17
802130c0:	020d4740 	call	8020d474 <_free_r>
802130c4:	003fe706 	br	80213064 <__reset+0xfa1f3064>
802130c8:	0005883a 	mov	r2,zero
802130cc:	f800283a 	ret

802130d0 <fclose>:
802130d0:	00a008b4 	movhi	r2,32802
802130d4:	10be7d04 	addi	r2,r2,-1548
802130d8:	200b883a 	mov	r5,r4
802130dc:	11000017 	ldw	r4,0(r2)
802130e0:	0212fe01 	jmpi	80212fe0 <_fclose_r>

802130e4 <__fputwc>:
802130e4:	defff804 	addi	sp,sp,-32
802130e8:	dcc00415 	stw	r19,16(sp)
802130ec:	dc800315 	stw	r18,12(sp)
802130f0:	dc000115 	stw	r16,4(sp)
802130f4:	dfc00715 	stw	ra,28(sp)
802130f8:	dd400615 	stw	r21,24(sp)
802130fc:	dd000515 	stw	r20,20(sp)
80213100:	dc400215 	stw	r17,8(sp)
80213104:	2027883a 	mov	r19,r4
80213108:	2825883a 	mov	r18,r5
8021310c:	3021883a 	mov	r16,r6
80213110:	020de500 	call	8020de50 <__locale_mb_cur_max>
80213114:	00c00044 	movi	r3,1
80213118:	10c03e26 	beq	r2,r3,80213214 <__fputwc+0x130>
8021311c:	81c01704 	addi	r7,r16,92
80213120:	900d883a 	mov	r6,r18
80213124:	d80b883a 	mov	r5,sp
80213128:	9809883a 	mov	r4,r19
8021312c:	02135b40 	call	802135b4 <_wcrtomb_r>
80213130:	1029883a 	mov	r20,r2
80213134:	00bfffc4 	movi	r2,-1
80213138:	a0802026 	beq	r20,r2,802131bc <__fputwc+0xd8>
8021313c:	d9400003 	ldbu	r5,0(sp)
80213140:	a0001c26 	beq	r20,zero,802131b4 <__fputwc+0xd0>
80213144:	0023883a 	mov	r17,zero
80213148:	05400284 	movi	r21,10
8021314c:	00000906 	br	80213174 <__fputwc+0x90>
80213150:	80800017 	ldw	r2,0(r16)
80213154:	11400005 	stb	r5,0(r2)
80213158:	80c00017 	ldw	r3,0(r16)
8021315c:	18c00044 	addi	r3,r3,1
80213160:	80c00015 	stw	r3,0(r16)
80213164:	8c400044 	addi	r17,r17,1
80213168:	dc45883a 	add	r2,sp,r17
8021316c:	8d00112e 	bgeu	r17,r20,802131b4 <__fputwc+0xd0>
80213170:	11400003 	ldbu	r5,0(r2)
80213174:	80c00217 	ldw	r3,8(r16)
80213178:	18ffffc4 	addi	r3,r3,-1
8021317c:	80c00215 	stw	r3,8(r16)
80213180:	183ff30e 	bge	r3,zero,80213150 <__reset+0xfa1f3150>
80213184:	80800617 	ldw	r2,24(r16)
80213188:	18801916 	blt	r3,r2,802131f0 <__fputwc+0x10c>
8021318c:	80800017 	ldw	r2,0(r16)
80213190:	11400005 	stb	r5,0(r2)
80213194:	80800017 	ldw	r2,0(r16)
80213198:	10c00003 	ldbu	r3,0(r2)
8021319c:	10800044 	addi	r2,r2,1
802131a0:	1d402326 	beq	r3,r21,80213230 <__fputwc+0x14c>
802131a4:	80800015 	stw	r2,0(r16)
802131a8:	8c400044 	addi	r17,r17,1
802131ac:	dc45883a 	add	r2,sp,r17
802131b0:	8d3fef36 	bltu	r17,r20,80213170 <__reset+0xfa1f3170>
802131b4:	9005883a 	mov	r2,r18
802131b8:	00000406 	br	802131cc <__fputwc+0xe8>
802131bc:	80c0030b 	ldhu	r3,12(r16)
802131c0:	a005883a 	mov	r2,r20
802131c4:	18c01014 	ori	r3,r3,64
802131c8:	80c0030d 	sth	r3,12(r16)
802131cc:	dfc00717 	ldw	ra,28(sp)
802131d0:	dd400617 	ldw	r21,24(sp)
802131d4:	dd000517 	ldw	r20,20(sp)
802131d8:	dcc00417 	ldw	r19,16(sp)
802131dc:	dc800317 	ldw	r18,12(sp)
802131e0:	dc400217 	ldw	r17,8(sp)
802131e4:	dc000117 	ldw	r16,4(sp)
802131e8:	dec00804 	addi	sp,sp,32
802131ec:	f800283a 	ret
802131f0:	800d883a 	mov	r6,r16
802131f4:	29403fcc 	andi	r5,r5,255
802131f8:	9809883a 	mov	r4,r19
802131fc:	021345c0 	call	8021345c <__swbuf_r>
80213200:	10bfffe0 	cmpeqi	r2,r2,-1
80213204:	10803fcc 	andi	r2,r2,255
80213208:	103fd626 	beq	r2,zero,80213164 <__reset+0xfa1f3164>
8021320c:	00bfffc4 	movi	r2,-1
80213210:	003fee06 	br	802131cc <__reset+0xfa1f31cc>
80213214:	90ffffc4 	addi	r3,r18,-1
80213218:	01003f84 	movi	r4,254
8021321c:	20ffbf36 	bltu	r4,r3,8021311c <__reset+0xfa1f311c>
80213220:	900b883a 	mov	r5,r18
80213224:	dc800005 	stb	r18,0(sp)
80213228:	1029883a 	mov	r20,r2
8021322c:	003fc506 	br	80213144 <__reset+0xfa1f3144>
80213230:	800d883a 	mov	r6,r16
80213234:	a80b883a 	mov	r5,r21
80213238:	9809883a 	mov	r4,r19
8021323c:	021345c0 	call	8021345c <__swbuf_r>
80213240:	10bfffe0 	cmpeqi	r2,r2,-1
80213244:	003fef06 	br	80213204 <__reset+0xfa1f3204>

80213248 <_fputwc_r>:
80213248:	3080030b 	ldhu	r2,12(r6)
8021324c:	10c8000c 	andi	r3,r2,8192
80213250:	1800051e 	bne	r3,zero,80213268 <_fputwc_r+0x20>
80213254:	30c01917 	ldw	r3,100(r6)
80213258:	10880014 	ori	r2,r2,8192
8021325c:	3080030d 	sth	r2,12(r6)
80213260:	18880014 	ori	r2,r3,8192
80213264:	30801915 	stw	r2,100(r6)
80213268:	02130e41 	jmpi	802130e4 <__fputwc>

8021326c <fputwc>:
8021326c:	00a008b4 	movhi	r2,32802
80213270:	defffc04 	addi	sp,sp,-16
80213274:	10be7d04 	addi	r2,r2,-1548
80213278:	dc000115 	stw	r16,4(sp)
8021327c:	14000017 	ldw	r16,0(r2)
80213280:	dc400215 	stw	r17,8(sp)
80213284:	dfc00315 	stw	ra,12(sp)
80213288:	2023883a 	mov	r17,r4
8021328c:	80000226 	beq	r16,zero,80213298 <fputwc+0x2c>
80213290:	80800e17 	ldw	r2,56(r16)
80213294:	10001026 	beq	r2,zero,802132d8 <fputwc+0x6c>
80213298:	2880030b 	ldhu	r2,12(r5)
8021329c:	10c8000c 	andi	r3,r2,8192
802132a0:	1800051e 	bne	r3,zero,802132b8 <fputwc+0x4c>
802132a4:	28c01917 	ldw	r3,100(r5)
802132a8:	10880014 	ori	r2,r2,8192
802132ac:	2880030d 	sth	r2,12(r5)
802132b0:	18880014 	ori	r2,r3,8192
802132b4:	28801915 	stw	r2,100(r5)
802132b8:	280d883a 	mov	r6,r5
802132bc:	8009883a 	mov	r4,r16
802132c0:	880b883a 	mov	r5,r17
802132c4:	dfc00317 	ldw	ra,12(sp)
802132c8:	dc400217 	ldw	r17,8(sp)
802132cc:	dc000117 	ldw	r16,4(sp)
802132d0:	dec00404 	addi	sp,sp,16
802132d4:	02130e41 	jmpi	802130e4 <__fputwc>
802132d8:	8009883a 	mov	r4,r16
802132dc:	d9400015 	stw	r5,0(sp)
802132e0:	020d3000 	call	8020d300 <__sinit>
802132e4:	d9400017 	ldw	r5,0(sp)
802132e8:	003feb06 	br	80213298 <__reset+0xfa1f3298>

802132ec <_fstat_r>:
802132ec:	defffd04 	addi	sp,sp,-12
802132f0:	2805883a 	mov	r2,r5
802132f4:	dc000015 	stw	r16,0(sp)
802132f8:	042008b4 	movhi	r16,32802
802132fc:	dc400115 	stw	r17,4(sp)
80213300:	843ea204 	addi	r16,r16,-1400
80213304:	2023883a 	mov	r17,r4
80213308:	300b883a 	mov	r5,r6
8021330c:	1009883a 	mov	r4,r2
80213310:	dfc00215 	stw	ra,8(sp)
80213314:	80000015 	stw	zero,0(r16)
80213318:	0216cc00 	call	80216cc0 <fstat>
8021331c:	00ffffc4 	movi	r3,-1
80213320:	10c00526 	beq	r2,r3,80213338 <_fstat_r+0x4c>
80213324:	dfc00217 	ldw	ra,8(sp)
80213328:	dc400117 	ldw	r17,4(sp)
8021332c:	dc000017 	ldw	r16,0(sp)
80213330:	dec00304 	addi	sp,sp,12
80213334:	f800283a 	ret
80213338:	80c00017 	ldw	r3,0(r16)
8021333c:	183ff926 	beq	r3,zero,80213324 <__reset+0xfa1f3324>
80213340:	88c00015 	stw	r3,0(r17)
80213344:	003ff706 	br	80213324 <__reset+0xfa1f3324>

80213348 <_isatty_r>:
80213348:	defffd04 	addi	sp,sp,-12
8021334c:	dc000015 	stw	r16,0(sp)
80213350:	042008b4 	movhi	r16,32802
80213354:	dc400115 	stw	r17,4(sp)
80213358:	843ea204 	addi	r16,r16,-1400
8021335c:	2023883a 	mov	r17,r4
80213360:	2809883a 	mov	r4,r5
80213364:	dfc00215 	stw	ra,8(sp)
80213368:	80000015 	stw	zero,0(r16)
8021336c:	0216f2c0 	call	80216f2c <isatty>
80213370:	00ffffc4 	movi	r3,-1
80213374:	10c00526 	beq	r2,r3,8021338c <_isatty_r+0x44>
80213378:	dfc00217 	ldw	ra,8(sp)
8021337c:	dc400117 	ldw	r17,4(sp)
80213380:	dc000017 	ldw	r16,0(sp)
80213384:	dec00304 	addi	sp,sp,12
80213388:	f800283a 	ret
8021338c:	80c00017 	ldw	r3,0(r16)
80213390:	183ff926 	beq	r3,zero,80213378 <__reset+0xfa1f3378>
80213394:	88c00015 	stw	r3,0(r17)
80213398:	003ff706 	br	80213378 <__reset+0xfa1f3378>

8021339c <_lseek_r>:
8021339c:	defffd04 	addi	sp,sp,-12
802133a0:	2805883a 	mov	r2,r5
802133a4:	dc000015 	stw	r16,0(sp)
802133a8:	042008b4 	movhi	r16,32802
802133ac:	dc400115 	stw	r17,4(sp)
802133b0:	300b883a 	mov	r5,r6
802133b4:	843ea204 	addi	r16,r16,-1400
802133b8:	2023883a 	mov	r17,r4
802133bc:	380d883a 	mov	r6,r7
802133c0:	1009883a 	mov	r4,r2
802133c4:	dfc00215 	stw	ra,8(sp)
802133c8:	80000015 	stw	zero,0(r16)
802133cc:	021700c0 	call	8021700c <lseek>
802133d0:	00ffffc4 	movi	r3,-1
802133d4:	10c00526 	beq	r2,r3,802133ec <_lseek_r+0x50>
802133d8:	dfc00217 	ldw	ra,8(sp)
802133dc:	dc400117 	ldw	r17,4(sp)
802133e0:	dc000017 	ldw	r16,0(sp)
802133e4:	dec00304 	addi	sp,sp,12
802133e8:	f800283a 	ret
802133ec:	80c00017 	ldw	r3,0(r16)
802133f0:	183ff926 	beq	r3,zero,802133d8 <__reset+0xfa1f33d8>
802133f4:	88c00015 	stw	r3,0(r17)
802133f8:	003ff706 	br	802133d8 <__reset+0xfa1f33d8>

802133fc <_read_r>:
802133fc:	defffd04 	addi	sp,sp,-12
80213400:	2805883a 	mov	r2,r5
80213404:	dc000015 	stw	r16,0(sp)
80213408:	042008b4 	movhi	r16,32802
8021340c:	dc400115 	stw	r17,4(sp)
80213410:	300b883a 	mov	r5,r6
80213414:	843ea204 	addi	r16,r16,-1400
80213418:	2023883a 	mov	r17,r4
8021341c:	380d883a 	mov	r6,r7
80213420:	1009883a 	mov	r4,r2
80213424:	dfc00215 	stw	ra,8(sp)
80213428:	80000015 	stw	zero,0(r16)
8021342c:	02171e00 	call	802171e0 <read>
80213430:	00ffffc4 	movi	r3,-1
80213434:	10c00526 	beq	r2,r3,8021344c <_read_r+0x50>
80213438:	dfc00217 	ldw	ra,8(sp)
8021343c:	dc400117 	ldw	r17,4(sp)
80213440:	dc000017 	ldw	r16,0(sp)
80213444:	dec00304 	addi	sp,sp,12
80213448:	f800283a 	ret
8021344c:	80c00017 	ldw	r3,0(r16)
80213450:	183ff926 	beq	r3,zero,80213438 <__reset+0xfa1f3438>
80213454:	88c00015 	stw	r3,0(r17)
80213458:	003ff706 	br	80213438 <__reset+0xfa1f3438>

8021345c <__swbuf_r>:
8021345c:	defffb04 	addi	sp,sp,-20
80213460:	dcc00315 	stw	r19,12(sp)
80213464:	dc800215 	stw	r18,8(sp)
80213468:	dc000015 	stw	r16,0(sp)
8021346c:	dfc00415 	stw	ra,16(sp)
80213470:	dc400115 	stw	r17,4(sp)
80213474:	2025883a 	mov	r18,r4
80213478:	2827883a 	mov	r19,r5
8021347c:	3021883a 	mov	r16,r6
80213480:	20000226 	beq	r4,zero,8021348c <__swbuf_r+0x30>
80213484:	20800e17 	ldw	r2,56(r4)
80213488:	10004226 	beq	r2,zero,80213594 <__swbuf_r+0x138>
8021348c:	80800617 	ldw	r2,24(r16)
80213490:	8100030b 	ldhu	r4,12(r16)
80213494:	80800215 	stw	r2,8(r16)
80213498:	2080020c 	andi	r2,r4,8
8021349c:	10003626 	beq	r2,zero,80213578 <__swbuf_r+0x11c>
802134a0:	80c00417 	ldw	r3,16(r16)
802134a4:	18003426 	beq	r3,zero,80213578 <__swbuf_r+0x11c>
802134a8:	2088000c 	andi	r2,r4,8192
802134ac:	9c403fcc 	andi	r17,r19,255
802134b0:	10001a26 	beq	r2,zero,8021351c <__swbuf_r+0xc0>
802134b4:	80800017 	ldw	r2,0(r16)
802134b8:	81000517 	ldw	r4,20(r16)
802134bc:	10c7c83a 	sub	r3,r2,r3
802134c0:	1900200e 	bge	r3,r4,80213544 <__swbuf_r+0xe8>
802134c4:	18c00044 	addi	r3,r3,1
802134c8:	81000217 	ldw	r4,8(r16)
802134cc:	11400044 	addi	r5,r2,1
802134d0:	81400015 	stw	r5,0(r16)
802134d4:	213fffc4 	addi	r4,r4,-1
802134d8:	81000215 	stw	r4,8(r16)
802134dc:	14c00005 	stb	r19,0(r2)
802134e0:	80800517 	ldw	r2,20(r16)
802134e4:	10c01e26 	beq	r2,r3,80213560 <__swbuf_r+0x104>
802134e8:	8080030b 	ldhu	r2,12(r16)
802134ec:	1080004c 	andi	r2,r2,1
802134f0:	10000226 	beq	r2,zero,802134fc <__swbuf_r+0xa0>
802134f4:	00800284 	movi	r2,10
802134f8:	88801926 	beq	r17,r2,80213560 <__swbuf_r+0x104>
802134fc:	8805883a 	mov	r2,r17
80213500:	dfc00417 	ldw	ra,16(sp)
80213504:	dcc00317 	ldw	r19,12(sp)
80213508:	dc800217 	ldw	r18,8(sp)
8021350c:	dc400117 	ldw	r17,4(sp)
80213510:	dc000017 	ldw	r16,0(sp)
80213514:	dec00504 	addi	sp,sp,20
80213518:	f800283a 	ret
8021351c:	81401917 	ldw	r5,100(r16)
80213520:	00b7ffc4 	movi	r2,-8193
80213524:	21080014 	ori	r4,r4,8192
80213528:	2884703a 	and	r2,r5,r2
8021352c:	80801915 	stw	r2,100(r16)
80213530:	80800017 	ldw	r2,0(r16)
80213534:	8100030d 	sth	r4,12(r16)
80213538:	81000517 	ldw	r4,20(r16)
8021353c:	10c7c83a 	sub	r3,r2,r3
80213540:	193fe016 	blt	r3,r4,802134c4 <__reset+0xfa1f34c4>
80213544:	800b883a 	mov	r5,r16
80213548:	9009883a 	mov	r4,r18
8021354c:	020cf240 	call	8020cf24 <_fflush_r>
80213550:	1000071e 	bne	r2,zero,80213570 <__swbuf_r+0x114>
80213554:	80800017 	ldw	r2,0(r16)
80213558:	00c00044 	movi	r3,1
8021355c:	003fda06 	br	802134c8 <__reset+0xfa1f34c8>
80213560:	800b883a 	mov	r5,r16
80213564:	9009883a 	mov	r4,r18
80213568:	020cf240 	call	8020cf24 <_fflush_r>
8021356c:	103fe326 	beq	r2,zero,802134fc <__reset+0xfa1f34fc>
80213570:	00bfffc4 	movi	r2,-1
80213574:	003fe206 	br	80213500 <__reset+0xfa1f3500>
80213578:	800b883a 	mov	r5,r16
8021357c:	9009883a 	mov	r4,r18
80213580:	020b32c0 	call	8020b32c <__swsetup_r>
80213584:	103ffa1e 	bne	r2,zero,80213570 <__reset+0xfa1f3570>
80213588:	8100030b 	ldhu	r4,12(r16)
8021358c:	80c00417 	ldw	r3,16(r16)
80213590:	003fc506 	br	802134a8 <__reset+0xfa1f34a8>
80213594:	020d3000 	call	8020d300 <__sinit>
80213598:	003fbc06 	br	8021348c <__reset+0xfa1f348c>

8021359c <__swbuf>:
8021359c:	00a008b4 	movhi	r2,32802
802135a0:	10be7d04 	addi	r2,r2,-1548
802135a4:	280d883a 	mov	r6,r5
802135a8:	200b883a 	mov	r5,r4
802135ac:	11000017 	ldw	r4,0(r2)
802135b0:	021345c1 	jmpi	8021345c <__swbuf_r>

802135b4 <_wcrtomb_r>:
802135b4:	defff604 	addi	sp,sp,-40
802135b8:	00a008b4 	movhi	r2,32802
802135bc:	dc800815 	stw	r18,32(sp)
802135c0:	dc400715 	stw	r17,28(sp)
802135c4:	dc000615 	stw	r16,24(sp)
802135c8:	10be8104 	addi	r2,r2,-1532
802135cc:	dfc00915 	stw	ra,36(sp)
802135d0:	2021883a 	mov	r16,r4
802135d4:	3823883a 	mov	r17,r7
802135d8:	14800017 	ldw	r18,0(r2)
802135dc:	28001426 	beq	r5,zero,80213630 <_wcrtomb_r+0x7c>
802135e0:	d9400415 	stw	r5,16(sp)
802135e4:	d9800515 	stw	r6,20(sp)
802135e8:	020de440 	call	8020de44 <__locale_charset>
802135ec:	d9800517 	ldw	r6,20(sp)
802135f0:	d9400417 	ldw	r5,16(sp)
802135f4:	100f883a 	mov	r7,r2
802135f8:	dc400015 	stw	r17,0(sp)
802135fc:	8009883a 	mov	r4,r16
80213600:	903ee83a 	callr	r18
80213604:	00ffffc4 	movi	r3,-1
80213608:	10c0031e 	bne	r2,r3,80213618 <_wcrtomb_r+0x64>
8021360c:	88000015 	stw	zero,0(r17)
80213610:	00c02284 	movi	r3,138
80213614:	80c00015 	stw	r3,0(r16)
80213618:	dfc00917 	ldw	ra,36(sp)
8021361c:	dc800817 	ldw	r18,32(sp)
80213620:	dc400717 	ldw	r17,28(sp)
80213624:	dc000617 	ldw	r16,24(sp)
80213628:	dec00a04 	addi	sp,sp,40
8021362c:	f800283a 	ret
80213630:	020de440 	call	8020de44 <__locale_charset>
80213634:	100f883a 	mov	r7,r2
80213638:	dc400015 	stw	r17,0(sp)
8021363c:	000d883a 	mov	r6,zero
80213640:	d9400104 	addi	r5,sp,4
80213644:	8009883a 	mov	r4,r16
80213648:	903ee83a 	callr	r18
8021364c:	003fed06 	br	80213604 <__reset+0xfa1f3604>

80213650 <wcrtomb>:
80213650:	defff604 	addi	sp,sp,-40
80213654:	00a008b4 	movhi	r2,32802
80213658:	dc800615 	stw	r18,24(sp)
8021365c:	dc400515 	stw	r17,20(sp)
80213660:	10be7d04 	addi	r2,r2,-1548
80213664:	dfc00915 	stw	ra,36(sp)
80213668:	dd000815 	stw	r20,32(sp)
8021366c:	dcc00715 	stw	r19,28(sp)
80213670:	dc000415 	stw	r16,16(sp)
80213674:	3025883a 	mov	r18,r6
80213678:	14400017 	ldw	r17,0(r2)
8021367c:	20001926 	beq	r4,zero,802136e4 <wcrtomb+0x94>
80213680:	00a008b4 	movhi	r2,32802
80213684:	10be8104 	addi	r2,r2,-1532
80213688:	15000017 	ldw	r20,0(r2)
8021368c:	2021883a 	mov	r16,r4
80213690:	2827883a 	mov	r19,r5
80213694:	020de440 	call	8020de44 <__locale_charset>
80213698:	100f883a 	mov	r7,r2
8021369c:	dc800015 	stw	r18,0(sp)
802136a0:	980d883a 	mov	r6,r19
802136a4:	800b883a 	mov	r5,r16
802136a8:	8809883a 	mov	r4,r17
802136ac:	a03ee83a 	callr	r20
802136b0:	00ffffc4 	movi	r3,-1
802136b4:	10c0031e 	bne	r2,r3,802136c4 <wcrtomb+0x74>
802136b8:	90000015 	stw	zero,0(r18)
802136bc:	00c02284 	movi	r3,138
802136c0:	88c00015 	stw	r3,0(r17)
802136c4:	dfc00917 	ldw	ra,36(sp)
802136c8:	dd000817 	ldw	r20,32(sp)
802136cc:	dcc00717 	ldw	r19,28(sp)
802136d0:	dc800617 	ldw	r18,24(sp)
802136d4:	dc400517 	ldw	r17,20(sp)
802136d8:	dc000417 	ldw	r16,16(sp)
802136dc:	dec00a04 	addi	sp,sp,40
802136e0:	f800283a 	ret
802136e4:	00a008b4 	movhi	r2,32802
802136e8:	10be8104 	addi	r2,r2,-1532
802136ec:	14000017 	ldw	r16,0(r2)
802136f0:	020de440 	call	8020de44 <__locale_charset>
802136f4:	100f883a 	mov	r7,r2
802136f8:	dc800015 	stw	r18,0(sp)
802136fc:	000d883a 	mov	r6,zero
80213700:	d9400104 	addi	r5,sp,4
80213704:	8809883a 	mov	r4,r17
80213708:	803ee83a 	callr	r16
8021370c:	003fe806 	br	802136b0 <__reset+0xfa1f36b0>

80213710 <__ascii_wctomb>:
80213710:	28000526 	beq	r5,zero,80213728 <__ascii_wctomb+0x18>
80213714:	00803fc4 	movi	r2,255
80213718:	11800536 	bltu	r2,r6,80213730 <__ascii_wctomb+0x20>
8021371c:	29800005 	stb	r6,0(r5)
80213720:	00800044 	movi	r2,1
80213724:	f800283a 	ret
80213728:	0005883a 	mov	r2,zero
8021372c:	f800283a 	ret
80213730:	00802284 	movi	r2,138
80213734:	20800015 	stw	r2,0(r4)
80213738:	00bfffc4 	movi	r2,-1
8021373c:	f800283a 	ret

80213740 <_wctomb_r>:
80213740:	00a008b4 	movhi	r2,32802
80213744:	defff904 	addi	sp,sp,-28
80213748:	10be8104 	addi	r2,r2,-1532
8021374c:	dfc00615 	stw	ra,24(sp)
80213750:	dc400515 	stw	r17,20(sp)
80213754:	dc000415 	stw	r16,16(sp)
80213758:	3823883a 	mov	r17,r7
8021375c:	14000017 	ldw	r16,0(r2)
80213760:	d9000115 	stw	r4,4(sp)
80213764:	d9400215 	stw	r5,8(sp)
80213768:	d9800315 	stw	r6,12(sp)
8021376c:	020de440 	call	8020de44 <__locale_charset>
80213770:	d9800317 	ldw	r6,12(sp)
80213774:	d9400217 	ldw	r5,8(sp)
80213778:	d9000117 	ldw	r4,4(sp)
8021377c:	100f883a 	mov	r7,r2
80213780:	dc400015 	stw	r17,0(sp)
80213784:	803ee83a 	callr	r16
80213788:	dfc00617 	ldw	ra,24(sp)
8021378c:	dc400517 	ldw	r17,20(sp)
80213790:	dc000417 	ldw	r16,16(sp)
80213794:	dec00704 	addi	sp,sp,28
80213798:	f800283a 	ret

8021379c <__udivdi3>:
8021379c:	defff504 	addi	sp,sp,-44
802137a0:	dcc00415 	stw	r19,16(sp)
802137a4:	dc000115 	stw	r16,4(sp)
802137a8:	dfc00a15 	stw	ra,40(sp)
802137ac:	df000915 	stw	fp,36(sp)
802137b0:	ddc00815 	stw	r23,32(sp)
802137b4:	dd800715 	stw	r22,28(sp)
802137b8:	dd400615 	stw	r21,24(sp)
802137bc:	dd000515 	stw	r20,20(sp)
802137c0:	dc800315 	stw	r18,12(sp)
802137c4:	dc400215 	stw	r17,8(sp)
802137c8:	2027883a 	mov	r19,r4
802137cc:	2821883a 	mov	r16,r5
802137d0:	3800411e 	bne	r7,zero,802138d8 <__udivdi3+0x13c>
802137d4:	3023883a 	mov	r17,r6
802137d8:	2025883a 	mov	r18,r4
802137dc:	2980522e 	bgeu	r5,r6,80213928 <__udivdi3+0x18c>
802137e0:	00bfffd4 	movui	r2,65535
802137e4:	282d883a 	mov	r22,r5
802137e8:	1180a836 	bltu	r2,r6,80213a8c <__udivdi3+0x2f0>
802137ec:	00803fc4 	movi	r2,255
802137f0:	1185803a 	cmpltu	r2,r2,r6
802137f4:	100490fa 	slli	r2,r2,3
802137f8:	3086d83a 	srl	r3,r6,r2
802137fc:	012008b4 	movhi	r4,32802
80213800:	2135f484 	addi	r4,r4,-10286
80213804:	20c7883a 	add	r3,r4,r3
80213808:	18c00003 	ldbu	r3,0(r3)
8021380c:	1885883a 	add	r2,r3,r2
80213810:	00c00804 	movi	r3,32
80213814:	1887c83a 	sub	r3,r3,r2
80213818:	18000526 	beq	r3,zero,80213830 <__udivdi3+0x94>
8021381c:	80e0983a 	sll	r16,r16,r3
80213820:	9884d83a 	srl	r2,r19,r2
80213824:	30e2983a 	sll	r17,r6,r3
80213828:	98e4983a 	sll	r18,r19,r3
8021382c:	142cb03a 	or	r22,r2,r16
80213830:	882ad43a 	srli	r21,r17,16
80213834:	b009883a 	mov	r4,r22
80213838:	8d3fffcc 	andi	r20,r17,65535
8021383c:	a80b883a 	mov	r5,r21
80213840:	02143a80 	call	802143a8 <__umodsi3>
80213844:	b009883a 	mov	r4,r22
80213848:	a80b883a 	mov	r5,r21
8021384c:	1027883a 	mov	r19,r2
80213850:	02143440 	call	80214344 <__udivsi3>
80213854:	102d883a 	mov	r22,r2
80213858:	9826943a 	slli	r19,r19,16
8021385c:	9004d43a 	srli	r2,r18,16
80213860:	a5a1383a 	mul	r16,r20,r22
80213864:	14c4b03a 	or	r2,r2,r19
80213868:	1400052e 	bgeu	r2,r16,80213880 <__udivdi3+0xe4>
8021386c:	1445883a 	add	r2,r2,r17
80213870:	b0ffffc4 	addi	r3,r22,-1
80213874:	14400136 	bltu	r2,r17,8021387c <__udivdi3+0xe0>
80213878:	14012336 	bltu	r2,r16,80213d08 <__udivdi3+0x56c>
8021387c:	182d883a 	mov	r22,r3
80213880:	1421c83a 	sub	r16,r2,r16
80213884:	a80b883a 	mov	r5,r21
80213888:	8009883a 	mov	r4,r16
8021388c:	02143a80 	call	802143a8 <__umodsi3>
80213890:	1027883a 	mov	r19,r2
80213894:	a80b883a 	mov	r5,r21
80213898:	8009883a 	mov	r4,r16
8021389c:	02143440 	call	80214344 <__udivsi3>
802138a0:	9826943a 	slli	r19,r19,16
802138a4:	a0a9383a 	mul	r20,r20,r2
802138a8:	94bfffcc 	andi	r18,r18,65535
802138ac:	94e4b03a 	or	r18,r18,r19
802138b0:	9500052e 	bgeu	r18,r20,802138c8 <__udivdi3+0x12c>
802138b4:	8ca5883a 	add	r18,r17,r18
802138b8:	10ffffc4 	addi	r3,r2,-1
802138bc:	9440f136 	bltu	r18,r17,80213c84 <__udivdi3+0x4e8>
802138c0:	9500f02e 	bgeu	r18,r20,80213c84 <__udivdi3+0x4e8>
802138c4:	10bfff84 	addi	r2,r2,-2
802138c8:	b00c943a 	slli	r6,r22,16
802138cc:	0007883a 	mov	r3,zero
802138d0:	3084b03a 	or	r2,r6,r2
802138d4:	00005906 	br	80213a3c <__udivdi3+0x2a0>
802138d8:	29c05636 	bltu	r5,r7,80213a34 <__udivdi3+0x298>
802138dc:	00bfffd4 	movui	r2,65535
802138e0:	11c0622e 	bgeu	r2,r7,80213a6c <__udivdi3+0x2d0>
802138e4:	00804034 	movhi	r2,256
802138e8:	10bfffc4 	addi	r2,r2,-1
802138ec:	11c0ee36 	bltu	r2,r7,80213ca8 <__udivdi3+0x50c>
802138f0:	00800404 	movi	r2,16
802138f4:	3886d83a 	srl	r3,r7,r2
802138f8:	012008b4 	movhi	r4,32802
802138fc:	2135f484 	addi	r4,r4,-10286
80213900:	20c7883a 	add	r3,r4,r3
80213904:	18c00003 	ldbu	r3,0(r3)
80213908:	05400804 	movi	r21,32
8021390c:	1885883a 	add	r2,r3,r2
80213910:	a8abc83a 	sub	r21,r21,r2
80213914:	a800621e 	bne	r21,zero,80213aa0 <__udivdi3+0x304>
80213918:	3c00e936 	bltu	r7,r16,80213cc0 <__udivdi3+0x524>
8021391c:	9985403a 	cmpgeu	r2,r19,r6
80213920:	0007883a 	mov	r3,zero
80213924:	00004506 	br	80213a3c <__udivdi3+0x2a0>
80213928:	3000041e 	bne	r6,zero,8021393c <__udivdi3+0x1a0>
8021392c:	000b883a 	mov	r5,zero
80213930:	01000044 	movi	r4,1
80213934:	02143440 	call	80214344 <__udivsi3>
80213938:	1023883a 	mov	r17,r2
8021393c:	00bfffd4 	movui	r2,65535
80213940:	14404e2e 	bgeu	r2,r17,80213a7c <__udivdi3+0x2e0>
80213944:	00804034 	movhi	r2,256
80213948:	10bfffc4 	addi	r2,r2,-1
8021394c:	1440d836 	bltu	r2,r17,80213cb0 <__udivdi3+0x514>
80213950:	00800404 	movi	r2,16
80213954:	8886d83a 	srl	r3,r17,r2
80213958:	012008b4 	movhi	r4,32802
8021395c:	2135f484 	addi	r4,r4,-10286
80213960:	20c7883a 	add	r3,r4,r3
80213964:	18c00003 	ldbu	r3,0(r3)
80213968:	1885883a 	add	r2,r3,r2
8021396c:	00c00804 	movi	r3,32
80213970:	1887c83a 	sub	r3,r3,r2
80213974:	18008f1e 	bne	r3,zero,80213bb4 <__udivdi3+0x418>
80213978:	882ad43a 	srli	r21,r17,16
8021397c:	8461c83a 	sub	r16,r16,r17
80213980:	8d3fffcc 	andi	r20,r17,65535
80213984:	00c00044 	movi	r3,1
80213988:	8009883a 	mov	r4,r16
8021398c:	a80b883a 	mov	r5,r21
80213990:	d8c00015 	stw	r3,0(sp)
80213994:	02143a80 	call	802143a8 <__umodsi3>
80213998:	8009883a 	mov	r4,r16
8021399c:	a80b883a 	mov	r5,r21
802139a0:	1027883a 	mov	r19,r2
802139a4:	02143440 	call	80214344 <__udivsi3>
802139a8:	9826943a 	slli	r19,r19,16
802139ac:	9008d43a 	srli	r4,r18,16
802139b0:	1521383a 	mul	r16,r2,r20
802139b4:	102d883a 	mov	r22,r2
802139b8:	24c8b03a 	or	r4,r4,r19
802139bc:	d8c00017 	ldw	r3,0(sp)
802139c0:	2400052e 	bgeu	r4,r16,802139d8 <__udivdi3+0x23c>
802139c4:	2449883a 	add	r4,r4,r17
802139c8:	b0bfffc4 	addi	r2,r22,-1
802139cc:	24400136 	bltu	r4,r17,802139d4 <__udivdi3+0x238>
802139d0:	2400ca36 	bltu	r4,r16,80213cfc <__udivdi3+0x560>
802139d4:	102d883a 	mov	r22,r2
802139d8:	2421c83a 	sub	r16,r4,r16
802139dc:	a80b883a 	mov	r5,r21
802139e0:	8009883a 	mov	r4,r16
802139e4:	d8c00015 	stw	r3,0(sp)
802139e8:	02143a80 	call	802143a8 <__umodsi3>
802139ec:	1027883a 	mov	r19,r2
802139f0:	a80b883a 	mov	r5,r21
802139f4:	8009883a 	mov	r4,r16
802139f8:	02143440 	call	80214344 <__udivsi3>
802139fc:	9826943a 	slli	r19,r19,16
80213a00:	1529383a 	mul	r20,r2,r20
80213a04:	94bfffcc 	andi	r18,r18,65535
80213a08:	94e4b03a 	or	r18,r18,r19
80213a0c:	d8c00017 	ldw	r3,0(sp)
80213a10:	9500052e 	bgeu	r18,r20,80213a28 <__udivdi3+0x28c>
80213a14:	8ca5883a 	add	r18,r17,r18
80213a18:	113fffc4 	addi	r4,r2,-1
80213a1c:	94409736 	bltu	r18,r17,80213c7c <__udivdi3+0x4e0>
80213a20:	9500962e 	bgeu	r18,r20,80213c7c <__udivdi3+0x4e0>
80213a24:	10bfff84 	addi	r2,r2,-2
80213a28:	b00c943a 	slli	r6,r22,16
80213a2c:	3084b03a 	or	r2,r6,r2
80213a30:	00000206 	br	80213a3c <__udivdi3+0x2a0>
80213a34:	0007883a 	mov	r3,zero
80213a38:	0005883a 	mov	r2,zero
80213a3c:	dfc00a17 	ldw	ra,40(sp)
80213a40:	df000917 	ldw	fp,36(sp)
80213a44:	ddc00817 	ldw	r23,32(sp)
80213a48:	dd800717 	ldw	r22,28(sp)
80213a4c:	dd400617 	ldw	r21,24(sp)
80213a50:	dd000517 	ldw	r20,20(sp)
80213a54:	dcc00417 	ldw	r19,16(sp)
80213a58:	dc800317 	ldw	r18,12(sp)
80213a5c:	dc400217 	ldw	r17,8(sp)
80213a60:	dc000117 	ldw	r16,4(sp)
80213a64:	dec00b04 	addi	sp,sp,44
80213a68:	f800283a 	ret
80213a6c:	00803fc4 	movi	r2,255
80213a70:	11c5803a 	cmpltu	r2,r2,r7
80213a74:	100490fa 	slli	r2,r2,3
80213a78:	003f9e06 	br	802138f4 <__reset+0xfa1f38f4>
80213a7c:	00803fc4 	movi	r2,255
80213a80:	1445803a 	cmpltu	r2,r2,r17
80213a84:	100490fa 	slli	r2,r2,3
80213a88:	003fb206 	br	80213954 <__reset+0xfa1f3954>
80213a8c:	00804034 	movhi	r2,256
80213a90:	10bfffc4 	addi	r2,r2,-1
80213a94:	11808836 	bltu	r2,r6,80213cb8 <__udivdi3+0x51c>
80213a98:	00800404 	movi	r2,16
80213a9c:	003f5606 	br	802137f8 <__reset+0xfa1f37f8>
80213aa0:	30aed83a 	srl	r23,r6,r2
80213aa4:	3d4e983a 	sll	r7,r7,r21
80213aa8:	80acd83a 	srl	r22,r16,r2
80213aac:	9884d83a 	srl	r2,r19,r2
80213ab0:	3deeb03a 	or	r23,r7,r23
80213ab4:	b824d43a 	srli	r18,r23,16
80213ab8:	8560983a 	sll	r16,r16,r21
80213abc:	b009883a 	mov	r4,r22
80213ac0:	900b883a 	mov	r5,r18
80213ac4:	3568983a 	sll	r20,r6,r21
80213ac8:	1420b03a 	or	r16,r2,r16
80213acc:	02143a80 	call	802143a8 <__umodsi3>
80213ad0:	b009883a 	mov	r4,r22
80213ad4:	900b883a 	mov	r5,r18
80213ad8:	1023883a 	mov	r17,r2
80213adc:	02143440 	call	80214344 <__udivsi3>
80213ae0:	8808943a 	slli	r4,r17,16
80213ae4:	bf3fffcc 	andi	fp,r23,65535
80213ae8:	8006d43a 	srli	r3,r16,16
80213aec:	e0a3383a 	mul	r17,fp,r2
80213af0:	100d883a 	mov	r6,r2
80213af4:	1906b03a 	or	r3,r3,r4
80213af8:	1c40042e 	bgeu	r3,r17,80213b0c <__udivdi3+0x370>
80213afc:	1dc7883a 	add	r3,r3,r23
80213b00:	10bfffc4 	addi	r2,r2,-1
80213b04:	1dc0752e 	bgeu	r3,r23,80213cdc <__udivdi3+0x540>
80213b08:	100d883a 	mov	r6,r2
80213b0c:	1c63c83a 	sub	r17,r3,r17
80213b10:	900b883a 	mov	r5,r18
80213b14:	8809883a 	mov	r4,r17
80213b18:	d9800015 	stw	r6,0(sp)
80213b1c:	02143a80 	call	802143a8 <__umodsi3>
80213b20:	102d883a 	mov	r22,r2
80213b24:	8809883a 	mov	r4,r17
80213b28:	900b883a 	mov	r5,r18
80213b2c:	02143440 	call	80214344 <__udivsi3>
80213b30:	b02c943a 	slli	r22,r22,16
80213b34:	e089383a 	mul	r4,fp,r2
80213b38:	843fffcc 	andi	r16,r16,65535
80213b3c:	85a0b03a 	or	r16,r16,r22
80213b40:	d9800017 	ldw	r6,0(sp)
80213b44:	8100042e 	bgeu	r16,r4,80213b58 <__udivdi3+0x3bc>
80213b48:	85e1883a 	add	r16,r16,r23
80213b4c:	10ffffc4 	addi	r3,r2,-1
80213b50:	85c05e2e 	bgeu	r16,r23,80213ccc <__udivdi3+0x530>
80213b54:	1805883a 	mov	r2,r3
80213b58:	300c943a 	slli	r6,r6,16
80213b5c:	a17fffcc 	andi	r5,r20,65535
80213b60:	a028d43a 	srli	r20,r20,16
80213b64:	3084b03a 	or	r2,r6,r2
80213b68:	10ffffcc 	andi	r3,r2,65535
80213b6c:	100cd43a 	srli	r6,r2,16
80213b70:	194f383a 	mul	r7,r3,r5
80213b74:	1d07383a 	mul	r3,r3,r20
80213b78:	314b383a 	mul	r5,r6,r5
80213b7c:	3810d43a 	srli	r8,r7,16
80213b80:	8121c83a 	sub	r16,r16,r4
80213b84:	1947883a 	add	r3,r3,r5
80213b88:	40c7883a 	add	r3,r8,r3
80213b8c:	350d383a 	mul	r6,r6,r20
80213b90:	1940022e 	bgeu	r3,r5,80213b9c <__udivdi3+0x400>
80213b94:	01000074 	movhi	r4,1
80213b98:	310d883a 	add	r6,r6,r4
80213b9c:	1828d43a 	srli	r20,r3,16
80213ba0:	a18d883a 	add	r6,r20,r6
80213ba4:	81803e36 	bltu	r16,r6,80213ca0 <__udivdi3+0x504>
80213ba8:	81803826 	beq	r16,r6,80213c8c <__udivdi3+0x4f0>
80213bac:	0007883a 	mov	r3,zero
80213bb0:	003fa206 	br	80213a3c <__reset+0xfa1f3a3c>
80213bb4:	88e2983a 	sll	r17,r17,r3
80213bb8:	80a8d83a 	srl	r20,r16,r2
80213bbc:	80e0983a 	sll	r16,r16,r3
80213bc0:	882ad43a 	srli	r21,r17,16
80213bc4:	9884d83a 	srl	r2,r19,r2
80213bc8:	a009883a 	mov	r4,r20
80213bcc:	a80b883a 	mov	r5,r21
80213bd0:	142eb03a 	or	r23,r2,r16
80213bd4:	98e4983a 	sll	r18,r19,r3
80213bd8:	02143a80 	call	802143a8 <__umodsi3>
80213bdc:	a009883a 	mov	r4,r20
80213be0:	a80b883a 	mov	r5,r21
80213be4:	1021883a 	mov	r16,r2
80213be8:	02143440 	call	80214344 <__udivsi3>
80213bec:	1039883a 	mov	fp,r2
80213bf0:	8d3fffcc 	andi	r20,r17,65535
80213bf4:	8020943a 	slli	r16,r16,16
80213bf8:	b804d43a 	srli	r2,r23,16
80213bfc:	a72d383a 	mul	r22,r20,fp
80213c00:	1404b03a 	or	r2,r2,r16
80213c04:	1580062e 	bgeu	r2,r22,80213c20 <__udivdi3+0x484>
80213c08:	1445883a 	add	r2,r2,r17
80213c0c:	e0ffffc4 	addi	r3,fp,-1
80213c10:	14403836 	bltu	r2,r17,80213cf4 <__udivdi3+0x558>
80213c14:	1580372e 	bgeu	r2,r22,80213cf4 <__udivdi3+0x558>
80213c18:	e73fff84 	addi	fp,fp,-2
80213c1c:	1445883a 	add	r2,r2,r17
80213c20:	15adc83a 	sub	r22,r2,r22
80213c24:	a80b883a 	mov	r5,r21
80213c28:	b009883a 	mov	r4,r22
80213c2c:	02143a80 	call	802143a8 <__umodsi3>
80213c30:	1027883a 	mov	r19,r2
80213c34:	b009883a 	mov	r4,r22
80213c38:	a80b883a 	mov	r5,r21
80213c3c:	02143440 	call	80214344 <__udivsi3>
80213c40:	9826943a 	slli	r19,r19,16
80213c44:	a0a1383a 	mul	r16,r20,r2
80213c48:	b93fffcc 	andi	r4,r23,65535
80213c4c:	24c8b03a 	or	r4,r4,r19
80213c50:	2400062e 	bgeu	r4,r16,80213c6c <__udivdi3+0x4d0>
80213c54:	2449883a 	add	r4,r4,r17
80213c58:	10ffffc4 	addi	r3,r2,-1
80213c5c:	24402336 	bltu	r4,r17,80213cec <__udivdi3+0x550>
80213c60:	2400222e 	bgeu	r4,r16,80213cec <__udivdi3+0x550>
80213c64:	10bfff84 	addi	r2,r2,-2
80213c68:	2449883a 	add	r4,r4,r17
80213c6c:	e038943a 	slli	fp,fp,16
80213c70:	2421c83a 	sub	r16,r4,r16
80213c74:	e086b03a 	or	r3,fp,r2
80213c78:	003f4306 	br	80213988 <__reset+0xfa1f3988>
80213c7c:	2005883a 	mov	r2,r4
80213c80:	003f6906 	br	80213a28 <__reset+0xfa1f3a28>
80213c84:	1805883a 	mov	r2,r3
80213c88:	003f0f06 	br	802138c8 <__reset+0xfa1f38c8>
80213c8c:	1806943a 	slli	r3,r3,16
80213c90:	9d66983a 	sll	r19,r19,r21
80213c94:	39ffffcc 	andi	r7,r7,65535
80213c98:	19c7883a 	add	r3,r3,r7
80213c9c:	98ffc32e 	bgeu	r19,r3,80213bac <__reset+0xfa1f3bac>
80213ca0:	10bfffc4 	addi	r2,r2,-1
80213ca4:	003fc106 	br	80213bac <__reset+0xfa1f3bac>
80213ca8:	00800604 	movi	r2,24
80213cac:	003f1106 	br	802138f4 <__reset+0xfa1f38f4>
80213cb0:	00800604 	movi	r2,24
80213cb4:	003f2706 	br	80213954 <__reset+0xfa1f3954>
80213cb8:	00800604 	movi	r2,24
80213cbc:	003ece06 	br	802137f8 <__reset+0xfa1f37f8>
80213cc0:	0007883a 	mov	r3,zero
80213cc4:	00800044 	movi	r2,1
80213cc8:	003f5c06 	br	80213a3c <__reset+0xfa1f3a3c>
80213ccc:	813fa12e 	bgeu	r16,r4,80213b54 <__reset+0xfa1f3b54>
80213cd0:	10bfff84 	addi	r2,r2,-2
80213cd4:	85e1883a 	add	r16,r16,r23
80213cd8:	003f9f06 	br	80213b58 <__reset+0xfa1f3b58>
80213cdc:	1c7f8a2e 	bgeu	r3,r17,80213b08 <__reset+0xfa1f3b08>
80213ce0:	31bfff84 	addi	r6,r6,-2
80213ce4:	1dc7883a 	add	r3,r3,r23
80213ce8:	003f8806 	br	80213b0c <__reset+0xfa1f3b0c>
80213cec:	1805883a 	mov	r2,r3
80213cf0:	003fde06 	br	80213c6c <__reset+0xfa1f3c6c>
80213cf4:	1839883a 	mov	fp,r3
80213cf8:	003fc906 	br	80213c20 <__reset+0xfa1f3c20>
80213cfc:	b5bfff84 	addi	r22,r22,-2
80213d00:	2449883a 	add	r4,r4,r17
80213d04:	003f3406 	br	802139d8 <__reset+0xfa1f39d8>
80213d08:	b5bfff84 	addi	r22,r22,-2
80213d0c:	1445883a 	add	r2,r2,r17
80213d10:	003edb06 	br	80213880 <__reset+0xfa1f3880>

80213d14 <__umoddi3>:
80213d14:	defff404 	addi	sp,sp,-48
80213d18:	df000a15 	stw	fp,40(sp)
80213d1c:	dc400315 	stw	r17,12(sp)
80213d20:	dc000215 	stw	r16,8(sp)
80213d24:	dfc00b15 	stw	ra,44(sp)
80213d28:	ddc00915 	stw	r23,36(sp)
80213d2c:	dd800815 	stw	r22,32(sp)
80213d30:	dd400715 	stw	r21,28(sp)
80213d34:	dd000615 	stw	r20,24(sp)
80213d38:	dcc00515 	stw	r19,20(sp)
80213d3c:	dc800415 	stw	r18,16(sp)
80213d40:	2021883a 	mov	r16,r4
80213d44:	2823883a 	mov	r17,r5
80213d48:	2839883a 	mov	fp,r5
80213d4c:	38003c1e 	bne	r7,zero,80213e40 <__umoddi3+0x12c>
80213d50:	3027883a 	mov	r19,r6
80213d54:	2029883a 	mov	r20,r4
80213d58:	2980512e 	bgeu	r5,r6,80213ea0 <__umoddi3+0x18c>
80213d5c:	00bfffd4 	movui	r2,65535
80213d60:	11809a36 	bltu	r2,r6,80213fcc <__umoddi3+0x2b8>
80213d64:	01003fc4 	movi	r4,255
80213d68:	2189803a 	cmpltu	r4,r4,r6
80213d6c:	200890fa 	slli	r4,r4,3
80213d70:	3104d83a 	srl	r2,r6,r4
80213d74:	00e008b4 	movhi	r3,32802
80213d78:	18f5f484 	addi	r3,r3,-10286
80213d7c:	1885883a 	add	r2,r3,r2
80213d80:	10c00003 	ldbu	r3,0(r2)
80213d84:	00800804 	movi	r2,32
80213d88:	1909883a 	add	r4,r3,r4
80213d8c:	1125c83a 	sub	r18,r2,r4
80213d90:	90000526 	beq	r18,zero,80213da8 <__umoddi3+0x94>
80213d94:	8ca2983a 	sll	r17,r17,r18
80213d98:	8108d83a 	srl	r4,r16,r4
80213d9c:	34a6983a 	sll	r19,r6,r18
80213da0:	84a8983a 	sll	r20,r16,r18
80213da4:	2478b03a 	or	fp,r4,r17
80213da8:	982ed43a 	srli	r23,r19,16
80213dac:	e009883a 	mov	r4,fp
80213db0:	9dbfffcc 	andi	r22,r19,65535
80213db4:	b80b883a 	mov	r5,r23
80213db8:	02143a80 	call	802143a8 <__umodsi3>
80213dbc:	e009883a 	mov	r4,fp
80213dc0:	b80b883a 	mov	r5,r23
80213dc4:	102b883a 	mov	r21,r2
80213dc8:	02143440 	call	80214344 <__udivsi3>
80213dcc:	a806943a 	slli	r3,r21,16
80213dd0:	a008d43a 	srli	r4,r20,16
80213dd4:	b085383a 	mul	r2,r22,r2
80213dd8:	20c8b03a 	or	r4,r4,r3
80213ddc:	2080032e 	bgeu	r4,r2,80213dec <__umoddi3+0xd8>
80213de0:	24c9883a 	add	r4,r4,r19
80213de4:	24c00136 	bltu	r4,r19,80213dec <__umoddi3+0xd8>
80213de8:	20811036 	bltu	r4,r2,8021422c <__umoddi3+0x518>
80213dec:	20abc83a 	sub	r21,r4,r2
80213df0:	b80b883a 	mov	r5,r23
80213df4:	a809883a 	mov	r4,r21
80213df8:	02143a80 	call	802143a8 <__umodsi3>
80213dfc:	1023883a 	mov	r17,r2
80213e00:	b80b883a 	mov	r5,r23
80213e04:	a809883a 	mov	r4,r21
80213e08:	02143440 	call	80214344 <__udivsi3>
80213e0c:	8822943a 	slli	r17,r17,16
80213e10:	b085383a 	mul	r2,r22,r2
80213e14:	a0ffffcc 	andi	r3,r20,65535
80213e18:	1c46b03a 	or	r3,r3,r17
80213e1c:	1880042e 	bgeu	r3,r2,80213e30 <__umoddi3+0x11c>
80213e20:	1cc7883a 	add	r3,r3,r19
80213e24:	1cc00236 	bltu	r3,r19,80213e30 <__umoddi3+0x11c>
80213e28:	1880012e 	bgeu	r3,r2,80213e30 <__umoddi3+0x11c>
80213e2c:	1cc7883a 	add	r3,r3,r19
80213e30:	1885c83a 	sub	r2,r3,r2
80213e34:	1484d83a 	srl	r2,r2,r18
80213e38:	0007883a 	mov	r3,zero
80213e3c:	00004f06 	br	80213f7c <__umoddi3+0x268>
80213e40:	29c04c36 	bltu	r5,r7,80213f74 <__umoddi3+0x260>
80213e44:	00bfffd4 	movui	r2,65535
80213e48:	11c0582e 	bgeu	r2,r7,80213fac <__umoddi3+0x298>
80213e4c:	00804034 	movhi	r2,256
80213e50:	10bfffc4 	addi	r2,r2,-1
80213e54:	11c0e736 	bltu	r2,r7,802141f4 <__umoddi3+0x4e0>
80213e58:	01000404 	movi	r4,16
80213e5c:	3904d83a 	srl	r2,r7,r4
80213e60:	00e008b4 	movhi	r3,32802
80213e64:	18f5f484 	addi	r3,r3,-10286
80213e68:	1885883a 	add	r2,r3,r2
80213e6c:	14c00003 	ldbu	r19,0(r2)
80213e70:	00c00804 	movi	r3,32
80213e74:	9927883a 	add	r19,r19,r4
80213e78:	1ce9c83a 	sub	r20,r3,r19
80213e7c:	a000581e 	bne	r20,zero,80213fe0 <__umoddi3+0x2cc>
80213e80:	3c400136 	bltu	r7,r17,80213e88 <__umoddi3+0x174>
80213e84:	8180eb36 	bltu	r16,r6,80214234 <__umoddi3+0x520>
80213e88:	8185c83a 	sub	r2,r16,r6
80213e8c:	89e3c83a 	sub	r17,r17,r7
80213e90:	8089803a 	cmpltu	r4,r16,r2
80213e94:	8939c83a 	sub	fp,r17,r4
80213e98:	e007883a 	mov	r3,fp
80213e9c:	00003706 	br	80213f7c <__umoddi3+0x268>
80213ea0:	3000041e 	bne	r6,zero,80213eb4 <__umoddi3+0x1a0>
80213ea4:	000b883a 	mov	r5,zero
80213ea8:	01000044 	movi	r4,1
80213eac:	02143440 	call	80214344 <__udivsi3>
80213eb0:	1027883a 	mov	r19,r2
80213eb4:	00bfffd4 	movui	r2,65535
80213eb8:	14c0402e 	bgeu	r2,r19,80213fbc <__umoddi3+0x2a8>
80213ebc:	00804034 	movhi	r2,256
80213ec0:	10bfffc4 	addi	r2,r2,-1
80213ec4:	14c0cd36 	bltu	r2,r19,802141fc <__umoddi3+0x4e8>
80213ec8:	00800404 	movi	r2,16
80213ecc:	9886d83a 	srl	r3,r19,r2
80213ed0:	012008b4 	movhi	r4,32802
80213ed4:	2135f484 	addi	r4,r4,-10286
80213ed8:	20c7883a 	add	r3,r4,r3
80213edc:	18c00003 	ldbu	r3,0(r3)
80213ee0:	1887883a 	add	r3,r3,r2
80213ee4:	00800804 	movi	r2,32
80213ee8:	10e5c83a 	sub	r18,r2,r3
80213eec:	9000901e 	bne	r18,zero,80214130 <__umoddi3+0x41c>
80213ef0:	982cd43a 	srli	r22,r19,16
80213ef4:	8ce3c83a 	sub	r17,r17,r19
80213ef8:	9d7fffcc 	andi	r21,r19,65535
80213efc:	b00b883a 	mov	r5,r22
80213f00:	8809883a 	mov	r4,r17
80213f04:	02143a80 	call	802143a8 <__umodsi3>
80213f08:	8809883a 	mov	r4,r17
80213f0c:	b00b883a 	mov	r5,r22
80213f10:	1021883a 	mov	r16,r2
80213f14:	02143440 	call	80214344 <__udivsi3>
80213f18:	8006943a 	slli	r3,r16,16
80213f1c:	a008d43a 	srli	r4,r20,16
80213f20:	1545383a 	mul	r2,r2,r21
80213f24:	20c8b03a 	or	r4,r4,r3
80213f28:	2080042e 	bgeu	r4,r2,80213f3c <__umoddi3+0x228>
80213f2c:	24c9883a 	add	r4,r4,r19
80213f30:	24c00236 	bltu	r4,r19,80213f3c <__umoddi3+0x228>
80213f34:	2080012e 	bgeu	r4,r2,80213f3c <__umoddi3+0x228>
80213f38:	24c9883a 	add	r4,r4,r19
80213f3c:	20a1c83a 	sub	r16,r4,r2
80213f40:	b00b883a 	mov	r5,r22
80213f44:	8009883a 	mov	r4,r16
80213f48:	02143a80 	call	802143a8 <__umodsi3>
80213f4c:	1023883a 	mov	r17,r2
80213f50:	b00b883a 	mov	r5,r22
80213f54:	8009883a 	mov	r4,r16
80213f58:	02143440 	call	80214344 <__udivsi3>
80213f5c:	8822943a 	slli	r17,r17,16
80213f60:	1545383a 	mul	r2,r2,r21
80213f64:	a53fffcc 	andi	r20,r20,65535
80213f68:	a446b03a 	or	r3,r20,r17
80213f6c:	18bfb02e 	bgeu	r3,r2,80213e30 <__reset+0xfa1f3e30>
80213f70:	003fab06 	br	80213e20 <__reset+0xfa1f3e20>
80213f74:	2005883a 	mov	r2,r4
80213f78:	2807883a 	mov	r3,r5
80213f7c:	dfc00b17 	ldw	ra,44(sp)
80213f80:	df000a17 	ldw	fp,40(sp)
80213f84:	ddc00917 	ldw	r23,36(sp)
80213f88:	dd800817 	ldw	r22,32(sp)
80213f8c:	dd400717 	ldw	r21,28(sp)
80213f90:	dd000617 	ldw	r20,24(sp)
80213f94:	dcc00517 	ldw	r19,20(sp)
80213f98:	dc800417 	ldw	r18,16(sp)
80213f9c:	dc400317 	ldw	r17,12(sp)
80213fa0:	dc000217 	ldw	r16,8(sp)
80213fa4:	dec00c04 	addi	sp,sp,48
80213fa8:	f800283a 	ret
80213fac:	04c03fc4 	movi	r19,255
80213fb0:	99c9803a 	cmpltu	r4,r19,r7
80213fb4:	200890fa 	slli	r4,r4,3
80213fb8:	003fa806 	br	80213e5c <__reset+0xfa1f3e5c>
80213fbc:	00803fc4 	movi	r2,255
80213fc0:	14c5803a 	cmpltu	r2,r2,r19
80213fc4:	100490fa 	slli	r2,r2,3
80213fc8:	003fc006 	br	80213ecc <__reset+0xfa1f3ecc>
80213fcc:	00804034 	movhi	r2,256
80213fd0:	10bfffc4 	addi	r2,r2,-1
80213fd4:	11808b36 	bltu	r2,r6,80214204 <__umoddi3+0x4f0>
80213fd8:	01000404 	movi	r4,16
80213fdc:	003f6406 	br	80213d70 <__reset+0xfa1f3d70>
80213fe0:	34c4d83a 	srl	r2,r6,r19
80213fe4:	3d0e983a 	sll	r7,r7,r20
80213fe8:	8cf8d83a 	srl	fp,r17,r19
80213fec:	8d10983a 	sll	r8,r17,r20
80213ff0:	38aab03a 	or	r21,r7,r2
80213ff4:	a82cd43a 	srli	r22,r21,16
80213ff8:	84e2d83a 	srl	r17,r16,r19
80213ffc:	e009883a 	mov	r4,fp
80214000:	b00b883a 	mov	r5,r22
80214004:	8a22b03a 	or	r17,r17,r8
80214008:	3524983a 	sll	r18,r6,r20
8021400c:	02143a80 	call	802143a8 <__umodsi3>
80214010:	e009883a 	mov	r4,fp
80214014:	b00b883a 	mov	r5,r22
80214018:	102f883a 	mov	r23,r2
8021401c:	02143440 	call	80214344 <__udivsi3>
80214020:	100d883a 	mov	r6,r2
80214024:	b808943a 	slli	r4,r23,16
80214028:	aa3fffcc 	andi	r8,r21,65535
8021402c:	8804d43a 	srli	r2,r17,16
80214030:	41af383a 	mul	r23,r8,r6
80214034:	8520983a 	sll	r16,r16,r20
80214038:	1104b03a 	or	r2,r2,r4
8021403c:	15c0042e 	bgeu	r2,r23,80214050 <__umoddi3+0x33c>
80214040:	1545883a 	add	r2,r2,r21
80214044:	30ffffc4 	addi	r3,r6,-1
80214048:	1540742e 	bgeu	r2,r21,8021421c <__umoddi3+0x508>
8021404c:	180d883a 	mov	r6,r3
80214050:	15efc83a 	sub	r23,r2,r23
80214054:	b00b883a 	mov	r5,r22
80214058:	b809883a 	mov	r4,r23
8021405c:	d9800115 	stw	r6,4(sp)
80214060:	da000015 	stw	r8,0(sp)
80214064:	02143a80 	call	802143a8 <__umodsi3>
80214068:	b00b883a 	mov	r5,r22
8021406c:	b809883a 	mov	r4,r23
80214070:	1039883a 	mov	fp,r2
80214074:	02143440 	call	80214344 <__udivsi3>
80214078:	da000017 	ldw	r8,0(sp)
8021407c:	e038943a 	slli	fp,fp,16
80214080:	100b883a 	mov	r5,r2
80214084:	4089383a 	mul	r4,r8,r2
80214088:	8a3fffcc 	andi	r8,r17,65535
8021408c:	4710b03a 	or	r8,r8,fp
80214090:	d9800117 	ldw	r6,4(sp)
80214094:	4100042e 	bgeu	r8,r4,802140a8 <__umoddi3+0x394>
80214098:	4551883a 	add	r8,r8,r21
8021409c:	10bfffc4 	addi	r2,r2,-1
802140a0:	45405a2e 	bgeu	r8,r21,8021420c <__umoddi3+0x4f8>
802140a4:	100b883a 	mov	r5,r2
802140a8:	300c943a 	slli	r6,r6,16
802140ac:	91ffffcc 	andi	r7,r18,65535
802140b0:	9004d43a 	srli	r2,r18,16
802140b4:	314cb03a 	or	r6,r6,r5
802140b8:	317fffcc 	andi	r5,r6,65535
802140bc:	300cd43a 	srli	r6,r6,16
802140c0:	29d3383a 	mul	r9,r5,r7
802140c4:	288b383a 	mul	r5,r5,r2
802140c8:	31cf383a 	mul	r7,r6,r7
802140cc:	4806d43a 	srli	r3,r9,16
802140d0:	4111c83a 	sub	r8,r8,r4
802140d4:	29cb883a 	add	r5,r5,r7
802140d8:	194b883a 	add	r5,r3,r5
802140dc:	3085383a 	mul	r2,r6,r2
802140e0:	29c0022e 	bgeu	r5,r7,802140ec <__umoddi3+0x3d8>
802140e4:	00c00074 	movhi	r3,1
802140e8:	10c5883a 	add	r2,r2,r3
802140ec:	2808d43a 	srli	r4,r5,16
802140f0:	280a943a 	slli	r5,r5,16
802140f4:	4a7fffcc 	andi	r9,r9,65535
802140f8:	2085883a 	add	r2,r4,r2
802140fc:	2a4b883a 	add	r5,r5,r9
80214100:	40803636 	bltu	r8,r2,802141dc <__umoddi3+0x4c8>
80214104:	40804d26 	beq	r8,r2,8021423c <__umoddi3+0x528>
80214108:	4089c83a 	sub	r4,r8,r2
8021410c:	280f883a 	mov	r7,r5
80214110:	81cfc83a 	sub	r7,r16,r7
80214114:	81c7803a 	cmpltu	r3,r16,r7
80214118:	20c7c83a 	sub	r3,r4,r3
8021411c:	1cc4983a 	sll	r2,r3,r19
80214120:	3d0ed83a 	srl	r7,r7,r20
80214124:	1d06d83a 	srl	r3,r3,r20
80214128:	11c4b03a 	or	r2,r2,r7
8021412c:	003f9306 	br	80213f7c <__reset+0xfa1f3f7c>
80214130:	9ca6983a 	sll	r19,r19,r18
80214134:	88e8d83a 	srl	r20,r17,r3
80214138:	80c4d83a 	srl	r2,r16,r3
8021413c:	982cd43a 	srli	r22,r19,16
80214140:	8ca2983a 	sll	r17,r17,r18
80214144:	a009883a 	mov	r4,r20
80214148:	b00b883a 	mov	r5,r22
8021414c:	1478b03a 	or	fp,r2,r17
80214150:	02143a80 	call	802143a8 <__umodsi3>
80214154:	a009883a 	mov	r4,r20
80214158:	b00b883a 	mov	r5,r22
8021415c:	1023883a 	mov	r17,r2
80214160:	02143440 	call	80214344 <__udivsi3>
80214164:	9d7fffcc 	andi	r21,r19,65535
80214168:	880a943a 	slli	r5,r17,16
8021416c:	e008d43a 	srli	r4,fp,16
80214170:	a885383a 	mul	r2,r21,r2
80214174:	84a8983a 	sll	r20,r16,r18
80214178:	2148b03a 	or	r4,r4,r5
8021417c:	2080042e 	bgeu	r4,r2,80214190 <__umoddi3+0x47c>
80214180:	24c9883a 	add	r4,r4,r19
80214184:	24c00236 	bltu	r4,r19,80214190 <__umoddi3+0x47c>
80214188:	2080012e 	bgeu	r4,r2,80214190 <__umoddi3+0x47c>
8021418c:	24c9883a 	add	r4,r4,r19
80214190:	20a3c83a 	sub	r17,r4,r2
80214194:	b00b883a 	mov	r5,r22
80214198:	8809883a 	mov	r4,r17
8021419c:	02143a80 	call	802143a8 <__umodsi3>
802141a0:	102f883a 	mov	r23,r2
802141a4:	8809883a 	mov	r4,r17
802141a8:	b00b883a 	mov	r5,r22
802141ac:	02143440 	call	80214344 <__udivsi3>
802141b0:	b82e943a 	slli	r23,r23,16
802141b4:	a885383a 	mul	r2,r21,r2
802141b8:	e13fffcc 	andi	r4,fp,65535
802141bc:	25c8b03a 	or	r4,r4,r23
802141c0:	2080042e 	bgeu	r4,r2,802141d4 <__umoddi3+0x4c0>
802141c4:	24c9883a 	add	r4,r4,r19
802141c8:	24c00236 	bltu	r4,r19,802141d4 <__umoddi3+0x4c0>
802141cc:	2080012e 	bgeu	r4,r2,802141d4 <__umoddi3+0x4c0>
802141d0:	24c9883a 	add	r4,r4,r19
802141d4:	20a3c83a 	sub	r17,r4,r2
802141d8:	003f4806 	br	80213efc <__reset+0xfa1f3efc>
802141dc:	2c8fc83a 	sub	r7,r5,r18
802141e0:	1545c83a 	sub	r2,r2,r21
802141e4:	29cb803a 	cmpltu	r5,r5,r7
802141e8:	1145c83a 	sub	r2,r2,r5
802141ec:	4089c83a 	sub	r4,r8,r2
802141f0:	003fc706 	br	80214110 <__reset+0xfa1f4110>
802141f4:	01000604 	movi	r4,24
802141f8:	003f1806 	br	80213e5c <__reset+0xfa1f3e5c>
802141fc:	00800604 	movi	r2,24
80214200:	003f3206 	br	80213ecc <__reset+0xfa1f3ecc>
80214204:	01000604 	movi	r4,24
80214208:	003ed906 	br	80213d70 <__reset+0xfa1f3d70>
8021420c:	413fa52e 	bgeu	r8,r4,802140a4 <__reset+0xfa1f40a4>
80214210:	297fff84 	addi	r5,r5,-2
80214214:	4551883a 	add	r8,r8,r21
80214218:	003fa306 	br	802140a8 <__reset+0xfa1f40a8>
8021421c:	15ff8b2e 	bgeu	r2,r23,8021404c <__reset+0xfa1f404c>
80214220:	31bfff84 	addi	r6,r6,-2
80214224:	1545883a 	add	r2,r2,r21
80214228:	003f8906 	br	80214050 <__reset+0xfa1f4050>
8021422c:	24c9883a 	add	r4,r4,r19
80214230:	003eee06 	br	80213dec <__reset+0xfa1f3dec>
80214234:	8005883a 	mov	r2,r16
80214238:	003f1706 	br	80213e98 <__reset+0xfa1f3e98>
8021423c:	817fe736 	bltu	r16,r5,802141dc <__reset+0xfa1f41dc>
80214240:	280f883a 	mov	r7,r5
80214244:	0009883a 	mov	r4,zero
80214248:	003fb106 	br	80214110 <__reset+0xfa1f4110>

8021424c <__divsi3>:
8021424c:	20001b16 	blt	r4,zero,802142bc <__divsi3+0x70>
80214250:	000f883a 	mov	r7,zero
80214254:	28001616 	blt	r5,zero,802142b0 <__divsi3+0x64>
80214258:	200d883a 	mov	r6,r4
8021425c:	29001a2e 	bgeu	r5,r4,802142c8 <__divsi3+0x7c>
80214260:	00800804 	movi	r2,32
80214264:	00c00044 	movi	r3,1
80214268:	00000106 	br	80214270 <__divsi3+0x24>
8021426c:	10000d26 	beq	r2,zero,802142a4 <__divsi3+0x58>
80214270:	294b883a 	add	r5,r5,r5
80214274:	10bfffc4 	addi	r2,r2,-1
80214278:	18c7883a 	add	r3,r3,r3
8021427c:	293ffb36 	bltu	r5,r4,8021426c <__reset+0xfa1f426c>
80214280:	0005883a 	mov	r2,zero
80214284:	18000726 	beq	r3,zero,802142a4 <__divsi3+0x58>
80214288:	0005883a 	mov	r2,zero
8021428c:	31400236 	bltu	r6,r5,80214298 <__divsi3+0x4c>
80214290:	314dc83a 	sub	r6,r6,r5
80214294:	10c4b03a 	or	r2,r2,r3
80214298:	1806d07a 	srli	r3,r3,1
8021429c:	280ad07a 	srli	r5,r5,1
802142a0:	183ffa1e 	bne	r3,zero,8021428c <__reset+0xfa1f428c>
802142a4:	38000126 	beq	r7,zero,802142ac <__divsi3+0x60>
802142a8:	0085c83a 	sub	r2,zero,r2
802142ac:	f800283a 	ret
802142b0:	014bc83a 	sub	r5,zero,r5
802142b4:	39c0005c 	xori	r7,r7,1
802142b8:	003fe706 	br	80214258 <__reset+0xfa1f4258>
802142bc:	0109c83a 	sub	r4,zero,r4
802142c0:	01c00044 	movi	r7,1
802142c4:	003fe306 	br	80214254 <__reset+0xfa1f4254>
802142c8:	00c00044 	movi	r3,1
802142cc:	003fee06 	br	80214288 <__reset+0xfa1f4288>

802142d0 <__modsi3>:
802142d0:	20001716 	blt	r4,zero,80214330 <__modsi3+0x60>
802142d4:	000f883a 	mov	r7,zero
802142d8:	2005883a 	mov	r2,r4
802142dc:	28001216 	blt	r5,zero,80214328 <__modsi3+0x58>
802142e0:	2900162e 	bgeu	r5,r4,8021433c <__modsi3+0x6c>
802142e4:	01800804 	movi	r6,32
802142e8:	00c00044 	movi	r3,1
802142ec:	00000106 	br	802142f4 <__modsi3+0x24>
802142f0:	30000a26 	beq	r6,zero,8021431c <__modsi3+0x4c>
802142f4:	294b883a 	add	r5,r5,r5
802142f8:	31bfffc4 	addi	r6,r6,-1
802142fc:	18c7883a 	add	r3,r3,r3
80214300:	293ffb36 	bltu	r5,r4,802142f0 <__reset+0xfa1f42f0>
80214304:	18000526 	beq	r3,zero,8021431c <__modsi3+0x4c>
80214308:	1806d07a 	srli	r3,r3,1
8021430c:	11400136 	bltu	r2,r5,80214314 <__modsi3+0x44>
80214310:	1145c83a 	sub	r2,r2,r5
80214314:	280ad07a 	srli	r5,r5,1
80214318:	183ffb1e 	bne	r3,zero,80214308 <__reset+0xfa1f4308>
8021431c:	38000126 	beq	r7,zero,80214324 <__modsi3+0x54>
80214320:	0085c83a 	sub	r2,zero,r2
80214324:	f800283a 	ret
80214328:	014bc83a 	sub	r5,zero,r5
8021432c:	003fec06 	br	802142e0 <__reset+0xfa1f42e0>
80214330:	0109c83a 	sub	r4,zero,r4
80214334:	01c00044 	movi	r7,1
80214338:	003fe706 	br	802142d8 <__reset+0xfa1f42d8>
8021433c:	00c00044 	movi	r3,1
80214340:	003ff106 	br	80214308 <__reset+0xfa1f4308>

80214344 <__udivsi3>:
80214344:	200d883a 	mov	r6,r4
80214348:	2900152e 	bgeu	r5,r4,802143a0 <__udivsi3+0x5c>
8021434c:	28001416 	blt	r5,zero,802143a0 <__udivsi3+0x5c>
80214350:	00800804 	movi	r2,32
80214354:	00c00044 	movi	r3,1
80214358:	00000206 	br	80214364 <__udivsi3+0x20>
8021435c:	10000e26 	beq	r2,zero,80214398 <__udivsi3+0x54>
80214360:	28000516 	blt	r5,zero,80214378 <__udivsi3+0x34>
80214364:	294b883a 	add	r5,r5,r5
80214368:	10bfffc4 	addi	r2,r2,-1
8021436c:	18c7883a 	add	r3,r3,r3
80214370:	293ffa36 	bltu	r5,r4,8021435c <__reset+0xfa1f435c>
80214374:	18000826 	beq	r3,zero,80214398 <__udivsi3+0x54>
80214378:	0005883a 	mov	r2,zero
8021437c:	31400236 	bltu	r6,r5,80214388 <__udivsi3+0x44>
80214380:	314dc83a 	sub	r6,r6,r5
80214384:	10c4b03a 	or	r2,r2,r3
80214388:	1806d07a 	srli	r3,r3,1
8021438c:	280ad07a 	srli	r5,r5,1
80214390:	183ffa1e 	bne	r3,zero,8021437c <__reset+0xfa1f437c>
80214394:	f800283a 	ret
80214398:	0005883a 	mov	r2,zero
8021439c:	f800283a 	ret
802143a0:	00c00044 	movi	r3,1
802143a4:	003ff406 	br	80214378 <__reset+0xfa1f4378>

802143a8 <__umodsi3>:
802143a8:	2005883a 	mov	r2,r4
802143ac:	2900122e 	bgeu	r5,r4,802143f8 <__umodsi3+0x50>
802143b0:	28001116 	blt	r5,zero,802143f8 <__umodsi3+0x50>
802143b4:	01800804 	movi	r6,32
802143b8:	00c00044 	movi	r3,1
802143bc:	00000206 	br	802143c8 <__umodsi3+0x20>
802143c0:	30000c26 	beq	r6,zero,802143f4 <__umodsi3+0x4c>
802143c4:	28000516 	blt	r5,zero,802143dc <__umodsi3+0x34>
802143c8:	294b883a 	add	r5,r5,r5
802143cc:	31bfffc4 	addi	r6,r6,-1
802143d0:	18c7883a 	add	r3,r3,r3
802143d4:	293ffa36 	bltu	r5,r4,802143c0 <__reset+0xfa1f43c0>
802143d8:	18000626 	beq	r3,zero,802143f4 <__umodsi3+0x4c>
802143dc:	1806d07a 	srli	r3,r3,1
802143e0:	11400136 	bltu	r2,r5,802143e8 <__umodsi3+0x40>
802143e4:	1145c83a 	sub	r2,r2,r5
802143e8:	280ad07a 	srli	r5,r5,1
802143ec:	183ffb1e 	bne	r3,zero,802143dc <__reset+0xfa1f43dc>
802143f0:	f800283a 	ret
802143f4:	f800283a 	ret
802143f8:	00c00044 	movi	r3,1
802143fc:	003ff706 	br	802143dc <__reset+0xfa1f43dc>

80214400 <__adddf3>:
80214400:	02c00434 	movhi	r11,16
80214404:	5affffc4 	addi	r11,r11,-1
80214408:	2806d7fa 	srli	r3,r5,31
8021440c:	2ad4703a 	and	r10,r5,r11
80214410:	3ad2703a 	and	r9,r7,r11
80214414:	3804d53a 	srli	r2,r7,20
80214418:	3018d77a 	srli	r12,r6,29
8021441c:	280ad53a 	srli	r5,r5,20
80214420:	501490fa 	slli	r10,r10,3
80214424:	2010d77a 	srli	r8,r4,29
80214428:	481290fa 	slli	r9,r9,3
8021442c:	380ed7fa 	srli	r7,r7,31
80214430:	defffb04 	addi	sp,sp,-20
80214434:	dc800215 	stw	r18,8(sp)
80214438:	dc400115 	stw	r17,4(sp)
8021443c:	dc000015 	stw	r16,0(sp)
80214440:	dfc00415 	stw	ra,16(sp)
80214444:	dcc00315 	stw	r19,12(sp)
80214448:	1c803fcc 	andi	r18,r3,255
8021444c:	2c01ffcc 	andi	r16,r5,2047
80214450:	5210b03a 	or	r8,r10,r8
80214454:	202290fa 	slli	r17,r4,3
80214458:	1081ffcc 	andi	r2,r2,2047
8021445c:	4b12b03a 	or	r9,r9,r12
80214460:	300c90fa 	slli	r6,r6,3
80214464:	91c07526 	beq	r18,r7,8021463c <__adddf3+0x23c>
80214468:	8087c83a 	sub	r3,r16,r2
8021446c:	00c0ab0e 	bge	zero,r3,8021471c <__adddf3+0x31c>
80214470:	10002a1e 	bne	r2,zero,8021451c <__adddf3+0x11c>
80214474:	4984b03a 	or	r2,r9,r6
80214478:	1000961e 	bne	r2,zero,802146d4 <__adddf3+0x2d4>
8021447c:	888001cc 	andi	r2,r17,7
80214480:	10000726 	beq	r2,zero,802144a0 <__adddf3+0xa0>
80214484:	888003cc 	andi	r2,r17,15
80214488:	00c00104 	movi	r3,4
8021448c:	10c00426 	beq	r2,r3,802144a0 <__adddf3+0xa0>
80214490:	88c7883a 	add	r3,r17,r3
80214494:	1c63803a 	cmpltu	r17,r3,r17
80214498:	4451883a 	add	r8,r8,r17
8021449c:	1823883a 	mov	r17,r3
802144a0:	4080202c 	andhi	r2,r8,128
802144a4:	10005926 	beq	r2,zero,8021460c <__adddf3+0x20c>
802144a8:	84000044 	addi	r16,r16,1
802144ac:	0081ffc4 	movi	r2,2047
802144b0:	8080ba26 	beq	r16,r2,8021479c <__adddf3+0x39c>
802144b4:	00bfe034 	movhi	r2,65408
802144b8:	10bfffc4 	addi	r2,r2,-1
802144bc:	4090703a 	and	r8,r8,r2
802144c0:	4004977a 	slli	r2,r8,29
802144c4:	4010927a 	slli	r8,r8,9
802144c8:	8822d0fa 	srli	r17,r17,3
802144cc:	8401ffcc 	andi	r16,r16,2047
802144d0:	4010d33a 	srli	r8,r8,12
802144d4:	9007883a 	mov	r3,r18
802144d8:	1444b03a 	or	r2,r2,r17
802144dc:	8401ffcc 	andi	r16,r16,2047
802144e0:	8020953a 	slli	r16,r16,20
802144e4:	18c03fcc 	andi	r3,r3,255
802144e8:	01000434 	movhi	r4,16
802144ec:	213fffc4 	addi	r4,r4,-1
802144f0:	180697fa 	slli	r3,r3,31
802144f4:	4110703a 	and	r8,r8,r4
802144f8:	4410b03a 	or	r8,r8,r16
802144fc:	40c6b03a 	or	r3,r8,r3
80214500:	dfc00417 	ldw	ra,16(sp)
80214504:	dcc00317 	ldw	r19,12(sp)
80214508:	dc800217 	ldw	r18,8(sp)
8021450c:	dc400117 	ldw	r17,4(sp)
80214510:	dc000017 	ldw	r16,0(sp)
80214514:	dec00504 	addi	sp,sp,20
80214518:	f800283a 	ret
8021451c:	0081ffc4 	movi	r2,2047
80214520:	80bfd626 	beq	r16,r2,8021447c <__reset+0xfa1f447c>
80214524:	4a402034 	orhi	r9,r9,128
80214528:	00800e04 	movi	r2,56
8021452c:	10c09f16 	blt	r2,r3,802147ac <__adddf3+0x3ac>
80214530:	008007c4 	movi	r2,31
80214534:	10c0c216 	blt	r2,r3,80214840 <__adddf3+0x440>
80214538:	00800804 	movi	r2,32
8021453c:	10c5c83a 	sub	r2,r2,r3
80214540:	488a983a 	sll	r5,r9,r2
80214544:	30c8d83a 	srl	r4,r6,r3
80214548:	3084983a 	sll	r2,r6,r2
8021454c:	48c6d83a 	srl	r3,r9,r3
80214550:	290cb03a 	or	r6,r5,r4
80214554:	1004c03a 	cmpne	r2,r2,zero
80214558:	308cb03a 	or	r6,r6,r2
8021455c:	898dc83a 	sub	r6,r17,r6
80214560:	89a3803a 	cmpltu	r17,r17,r6
80214564:	40d1c83a 	sub	r8,r8,r3
80214568:	4451c83a 	sub	r8,r8,r17
8021456c:	3023883a 	mov	r17,r6
80214570:	4080202c 	andhi	r2,r8,128
80214574:	10002326 	beq	r2,zero,80214604 <__adddf3+0x204>
80214578:	04c02034 	movhi	r19,128
8021457c:	9cffffc4 	addi	r19,r19,-1
80214580:	44e6703a 	and	r19,r8,r19
80214584:	98007626 	beq	r19,zero,80214760 <__adddf3+0x360>
80214588:	9809883a 	mov	r4,r19
8021458c:	020693c0 	call	8020693c <__clzsi2>
80214590:	10fffe04 	addi	r3,r2,-8
80214594:	010007c4 	movi	r4,31
80214598:	20c07716 	blt	r4,r3,80214778 <__adddf3+0x378>
8021459c:	00800804 	movi	r2,32
802145a0:	10c5c83a 	sub	r2,r2,r3
802145a4:	8884d83a 	srl	r2,r17,r2
802145a8:	98d0983a 	sll	r8,r19,r3
802145ac:	88e2983a 	sll	r17,r17,r3
802145b0:	1204b03a 	or	r2,r2,r8
802145b4:	1c007416 	blt	r3,r16,80214788 <__adddf3+0x388>
802145b8:	1c21c83a 	sub	r16,r3,r16
802145bc:	82000044 	addi	r8,r16,1
802145c0:	00c007c4 	movi	r3,31
802145c4:	1a009116 	blt	r3,r8,8021480c <__adddf3+0x40c>
802145c8:	00c00804 	movi	r3,32
802145cc:	1a07c83a 	sub	r3,r3,r8
802145d0:	8a08d83a 	srl	r4,r17,r8
802145d4:	88e2983a 	sll	r17,r17,r3
802145d8:	10c6983a 	sll	r3,r2,r3
802145dc:	1210d83a 	srl	r8,r2,r8
802145e0:	8804c03a 	cmpne	r2,r17,zero
802145e4:	1906b03a 	or	r3,r3,r4
802145e8:	18a2b03a 	or	r17,r3,r2
802145ec:	0021883a 	mov	r16,zero
802145f0:	003fa206 	br	8021447c <__reset+0xfa1f447c>
802145f4:	1890b03a 	or	r8,r3,r2
802145f8:	40017d26 	beq	r8,zero,80214bf0 <__adddf3+0x7f0>
802145fc:	1011883a 	mov	r8,r2
80214600:	1823883a 	mov	r17,r3
80214604:	888001cc 	andi	r2,r17,7
80214608:	103f9e1e 	bne	r2,zero,80214484 <__reset+0xfa1f4484>
8021460c:	4004977a 	slli	r2,r8,29
80214610:	8822d0fa 	srli	r17,r17,3
80214614:	4010d0fa 	srli	r8,r8,3
80214618:	9007883a 	mov	r3,r18
8021461c:	1444b03a 	or	r2,r2,r17
80214620:	0101ffc4 	movi	r4,2047
80214624:	81002426 	beq	r16,r4,802146b8 <__adddf3+0x2b8>
80214628:	8120703a 	and	r16,r16,r4
8021462c:	01000434 	movhi	r4,16
80214630:	213fffc4 	addi	r4,r4,-1
80214634:	4110703a 	and	r8,r8,r4
80214638:	003fa806 	br	802144dc <__reset+0xfa1f44dc>
8021463c:	8089c83a 	sub	r4,r16,r2
80214640:	01005e0e 	bge	zero,r4,802147bc <__adddf3+0x3bc>
80214644:	10002b26 	beq	r2,zero,802146f4 <__adddf3+0x2f4>
80214648:	0081ffc4 	movi	r2,2047
8021464c:	80bf8b26 	beq	r16,r2,8021447c <__reset+0xfa1f447c>
80214650:	4a402034 	orhi	r9,r9,128
80214654:	00800e04 	movi	r2,56
80214658:	1100a40e 	bge	r2,r4,802148ec <__adddf3+0x4ec>
8021465c:	498cb03a 	or	r6,r9,r6
80214660:	300ac03a 	cmpne	r5,r6,zero
80214664:	0013883a 	mov	r9,zero
80214668:	2c4b883a 	add	r5,r5,r17
8021466c:	2c63803a 	cmpltu	r17,r5,r17
80214670:	4a11883a 	add	r8,r9,r8
80214674:	8a11883a 	add	r8,r17,r8
80214678:	2823883a 	mov	r17,r5
8021467c:	4080202c 	andhi	r2,r8,128
80214680:	103fe026 	beq	r2,zero,80214604 <__reset+0xfa1f4604>
80214684:	84000044 	addi	r16,r16,1
80214688:	0081ffc4 	movi	r2,2047
8021468c:	8080d226 	beq	r16,r2,802149d8 <__adddf3+0x5d8>
80214690:	00bfe034 	movhi	r2,65408
80214694:	10bfffc4 	addi	r2,r2,-1
80214698:	4090703a 	and	r8,r8,r2
8021469c:	880ad07a 	srli	r5,r17,1
802146a0:	400897fa 	slli	r4,r8,31
802146a4:	88c0004c 	andi	r3,r17,1
802146a8:	28e2b03a 	or	r17,r5,r3
802146ac:	4010d07a 	srli	r8,r8,1
802146b0:	2462b03a 	or	r17,r4,r17
802146b4:	003f7106 	br	8021447c <__reset+0xfa1f447c>
802146b8:	4088b03a 	or	r4,r8,r2
802146bc:	20014526 	beq	r4,zero,80214bd4 <__adddf3+0x7d4>
802146c0:	01000434 	movhi	r4,16
802146c4:	42000234 	orhi	r8,r8,8
802146c8:	213fffc4 	addi	r4,r4,-1
802146cc:	4110703a 	and	r8,r8,r4
802146d0:	003f8206 	br	802144dc <__reset+0xfa1f44dc>
802146d4:	18ffffc4 	addi	r3,r3,-1
802146d8:	1800491e 	bne	r3,zero,80214800 <__adddf3+0x400>
802146dc:	898bc83a 	sub	r5,r17,r6
802146e0:	8963803a 	cmpltu	r17,r17,r5
802146e4:	4251c83a 	sub	r8,r8,r9
802146e8:	4451c83a 	sub	r8,r8,r17
802146ec:	2823883a 	mov	r17,r5
802146f0:	003f9f06 	br	80214570 <__reset+0xfa1f4570>
802146f4:	4984b03a 	or	r2,r9,r6
802146f8:	103f6026 	beq	r2,zero,8021447c <__reset+0xfa1f447c>
802146fc:	213fffc4 	addi	r4,r4,-1
80214700:	2000931e 	bne	r4,zero,80214950 <__adddf3+0x550>
80214704:	898d883a 	add	r6,r17,r6
80214708:	3463803a 	cmpltu	r17,r6,r17
8021470c:	4251883a 	add	r8,r8,r9
80214710:	8a11883a 	add	r8,r17,r8
80214714:	3023883a 	mov	r17,r6
80214718:	003fd806 	br	8021467c <__reset+0xfa1f467c>
8021471c:	1800541e 	bne	r3,zero,80214870 <__adddf3+0x470>
80214720:	80800044 	addi	r2,r16,1
80214724:	1081ffcc 	andi	r2,r2,2047
80214728:	00c00044 	movi	r3,1
8021472c:	1880a00e 	bge	r3,r2,802149b0 <__adddf3+0x5b0>
80214730:	8989c83a 	sub	r4,r17,r6
80214734:	8905803a 	cmpltu	r2,r17,r4
80214738:	4267c83a 	sub	r19,r8,r9
8021473c:	98a7c83a 	sub	r19,r19,r2
80214740:	9880202c 	andhi	r2,r19,128
80214744:	10006326 	beq	r2,zero,802148d4 <__adddf3+0x4d4>
80214748:	3463c83a 	sub	r17,r6,r17
8021474c:	4a07c83a 	sub	r3,r9,r8
80214750:	344d803a 	cmpltu	r6,r6,r17
80214754:	19a7c83a 	sub	r19,r3,r6
80214758:	3825883a 	mov	r18,r7
8021475c:	983f8a1e 	bne	r19,zero,80214588 <__reset+0xfa1f4588>
80214760:	8809883a 	mov	r4,r17
80214764:	020693c0 	call	8020693c <__clzsi2>
80214768:	10800804 	addi	r2,r2,32
8021476c:	10fffe04 	addi	r3,r2,-8
80214770:	010007c4 	movi	r4,31
80214774:	20ff890e 	bge	r4,r3,8021459c <__reset+0xfa1f459c>
80214778:	10bff604 	addi	r2,r2,-40
8021477c:	8884983a 	sll	r2,r17,r2
80214780:	0023883a 	mov	r17,zero
80214784:	1c3f8c0e 	bge	r3,r16,802145b8 <__reset+0xfa1f45b8>
80214788:	023fe034 	movhi	r8,65408
8021478c:	423fffc4 	addi	r8,r8,-1
80214790:	80e1c83a 	sub	r16,r16,r3
80214794:	1210703a 	and	r8,r2,r8
80214798:	003f3806 	br	8021447c <__reset+0xfa1f447c>
8021479c:	9007883a 	mov	r3,r18
802147a0:	0011883a 	mov	r8,zero
802147a4:	0005883a 	mov	r2,zero
802147a8:	003f4c06 	br	802144dc <__reset+0xfa1f44dc>
802147ac:	498cb03a 	or	r6,r9,r6
802147b0:	300cc03a 	cmpne	r6,r6,zero
802147b4:	0007883a 	mov	r3,zero
802147b8:	003f6806 	br	8021455c <__reset+0xfa1f455c>
802147bc:	20009c1e 	bne	r4,zero,80214a30 <__adddf3+0x630>
802147c0:	80800044 	addi	r2,r16,1
802147c4:	1141ffcc 	andi	r5,r2,2047
802147c8:	01000044 	movi	r4,1
802147cc:	2140670e 	bge	r4,r5,8021496c <__adddf3+0x56c>
802147d0:	0101ffc4 	movi	r4,2047
802147d4:	11007f26 	beq	r2,r4,802149d4 <__adddf3+0x5d4>
802147d8:	898d883a 	add	r6,r17,r6
802147dc:	4247883a 	add	r3,r8,r9
802147e0:	3451803a 	cmpltu	r8,r6,r17
802147e4:	40d1883a 	add	r8,r8,r3
802147e8:	402297fa 	slli	r17,r8,31
802147ec:	300cd07a 	srli	r6,r6,1
802147f0:	4010d07a 	srli	r8,r8,1
802147f4:	1021883a 	mov	r16,r2
802147f8:	89a2b03a 	or	r17,r17,r6
802147fc:	003f1f06 	br	8021447c <__reset+0xfa1f447c>
80214800:	0081ffc4 	movi	r2,2047
80214804:	80bf481e 	bne	r16,r2,80214528 <__reset+0xfa1f4528>
80214808:	003f1c06 	br	8021447c <__reset+0xfa1f447c>
8021480c:	843ff844 	addi	r16,r16,-31
80214810:	01000804 	movi	r4,32
80214814:	1406d83a 	srl	r3,r2,r16
80214818:	41005026 	beq	r8,r4,8021495c <__adddf3+0x55c>
8021481c:	01001004 	movi	r4,64
80214820:	2211c83a 	sub	r8,r4,r8
80214824:	1204983a 	sll	r2,r2,r8
80214828:	88a2b03a 	or	r17,r17,r2
8021482c:	8822c03a 	cmpne	r17,r17,zero
80214830:	1c62b03a 	or	r17,r3,r17
80214834:	0011883a 	mov	r8,zero
80214838:	0021883a 	mov	r16,zero
8021483c:	003f7106 	br	80214604 <__reset+0xfa1f4604>
80214840:	193ff804 	addi	r4,r3,-32
80214844:	00800804 	movi	r2,32
80214848:	4908d83a 	srl	r4,r9,r4
8021484c:	18804526 	beq	r3,r2,80214964 <__adddf3+0x564>
80214850:	00801004 	movi	r2,64
80214854:	10c5c83a 	sub	r2,r2,r3
80214858:	4886983a 	sll	r3,r9,r2
8021485c:	198cb03a 	or	r6,r3,r6
80214860:	300cc03a 	cmpne	r6,r6,zero
80214864:	218cb03a 	or	r6,r4,r6
80214868:	0007883a 	mov	r3,zero
8021486c:	003f3b06 	br	8021455c <__reset+0xfa1f455c>
80214870:	80002a26 	beq	r16,zero,8021491c <__adddf3+0x51c>
80214874:	0101ffc4 	movi	r4,2047
80214878:	11006826 	beq	r2,r4,80214a1c <__adddf3+0x61c>
8021487c:	00c7c83a 	sub	r3,zero,r3
80214880:	42002034 	orhi	r8,r8,128
80214884:	01000e04 	movi	r4,56
80214888:	20c07c16 	blt	r4,r3,80214a7c <__adddf3+0x67c>
8021488c:	010007c4 	movi	r4,31
80214890:	20c0da16 	blt	r4,r3,80214bfc <__adddf3+0x7fc>
80214894:	01000804 	movi	r4,32
80214898:	20c9c83a 	sub	r4,r4,r3
8021489c:	4114983a 	sll	r10,r8,r4
802148a0:	88cad83a 	srl	r5,r17,r3
802148a4:	8908983a 	sll	r4,r17,r4
802148a8:	40c6d83a 	srl	r3,r8,r3
802148ac:	5162b03a 	or	r17,r10,r5
802148b0:	2008c03a 	cmpne	r4,r4,zero
802148b4:	8922b03a 	or	r17,r17,r4
802148b8:	3463c83a 	sub	r17,r6,r17
802148bc:	48c7c83a 	sub	r3,r9,r3
802148c0:	344d803a 	cmpltu	r6,r6,r17
802148c4:	1991c83a 	sub	r8,r3,r6
802148c8:	1021883a 	mov	r16,r2
802148cc:	3825883a 	mov	r18,r7
802148d0:	003f2706 	br	80214570 <__reset+0xfa1f4570>
802148d4:	24d0b03a 	or	r8,r4,r19
802148d8:	40001b1e 	bne	r8,zero,80214948 <__adddf3+0x548>
802148dc:	0005883a 	mov	r2,zero
802148e0:	0007883a 	mov	r3,zero
802148e4:	0021883a 	mov	r16,zero
802148e8:	003f4d06 	br	80214620 <__reset+0xfa1f4620>
802148ec:	008007c4 	movi	r2,31
802148f0:	11003c16 	blt	r2,r4,802149e4 <__adddf3+0x5e4>
802148f4:	00800804 	movi	r2,32
802148f8:	1105c83a 	sub	r2,r2,r4
802148fc:	488e983a 	sll	r7,r9,r2
80214900:	310ad83a 	srl	r5,r6,r4
80214904:	3084983a 	sll	r2,r6,r2
80214908:	4912d83a 	srl	r9,r9,r4
8021490c:	394ab03a 	or	r5,r7,r5
80214910:	1004c03a 	cmpne	r2,r2,zero
80214914:	288ab03a 	or	r5,r5,r2
80214918:	003f5306 	br	80214668 <__reset+0xfa1f4668>
8021491c:	4448b03a 	or	r4,r8,r17
80214920:	20003e26 	beq	r4,zero,80214a1c <__adddf3+0x61c>
80214924:	00c6303a 	nor	r3,zero,r3
80214928:	18003a1e 	bne	r3,zero,80214a14 <__adddf3+0x614>
8021492c:	3463c83a 	sub	r17,r6,r17
80214930:	4a07c83a 	sub	r3,r9,r8
80214934:	344d803a 	cmpltu	r6,r6,r17
80214938:	1991c83a 	sub	r8,r3,r6
8021493c:	1021883a 	mov	r16,r2
80214940:	3825883a 	mov	r18,r7
80214944:	003f0a06 	br	80214570 <__reset+0xfa1f4570>
80214948:	2023883a 	mov	r17,r4
8021494c:	003f0d06 	br	80214584 <__reset+0xfa1f4584>
80214950:	0081ffc4 	movi	r2,2047
80214954:	80bf3f1e 	bne	r16,r2,80214654 <__reset+0xfa1f4654>
80214958:	003ec806 	br	8021447c <__reset+0xfa1f447c>
8021495c:	0005883a 	mov	r2,zero
80214960:	003fb106 	br	80214828 <__reset+0xfa1f4828>
80214964:	0007883a 	mov	r3,zero
80214968:	003fbc06 	br	8021485c <__reset+0xfa1f485c>
8021496c:	4444b03a 	or	r2,r8,r17
80214970:	8000871e 	bne	r16,zero,80214b90 <__adddf3+0x790>
80214974:	1000ba26 	beq	r2,zero,80214c60 <__adddf3+0x860>
80214978:	4984b03a 	or	r2,r9,r6
8021497c:	103ebf26 	beq	r2,zero,8021447c <__reset+0xfa1f447c>
80214980:	8985883a 	add	r2,r17,r6
80214984:	4247883a 	add	r3,r8,r9
80214988:	1451803a 	cmpltu	r8,r2,r17
8021498c:	40d1883a 	add	r8,r8,r3
80214990:	40c0202c 	andhi	r3,r8,128
80214994:	1023883a 	mov	r17,r2
80214998:	183f1a26 	beq	r3,zero,80214604 <__reset+0xfa1f4604>
8021499c:	00bfe034 	movhi	r2,65408
802149a0:	10bfffc4 	addi	r2,r2,-1
802149a4:	2021883a 	mov	r16,r4
802149a8:	4090703a 	and	r8,r8,r2
802149ac:	003eb306 	br	8021447c <__reset+0xfa1f447c>
802149b0:	4444b03a 	or	r2,r8,r17
802149b4:	8000291e 	bne	r16,zero,80214a5c <__adddf3+0x65c>
802149b8:	10004b1e 	bne	r2,zero,80214ae8 <__adddf3+0x6e8>
802149bc:	4990b03a 	or	r8,r9,r6
802149c0:	40008b26 	beq	r8,zero,80214bf0 <__adddf3+0x7f0>
802149c4:	4811883a 	mov	r8,r9
802149c8:	3023883a 	mov	r17,r6
802149cc:	3825883a 	mov	r18,r7
802149d0:	003eaa06 	br	8021447c <__reset+0xfa1f447c>
802149d4:	1021883a 	mov	r16,r2
802149d8:	0011883a 	mov	r8,zero
802149dc:	0005883a 	mov	r2,zero
802149e0:	003f0f06 	br	80214620 <__reset+0xfa1f4620>
802149e4:	217ff804 	addi	r5,r4,-32
802149e8:	00800804 	movi	r2,32
802149ec:	494ad83a 	srl	r5,r9,r5
802149f0:	20807d26 	beq	r4,r2,80214be8 <__adddf3+0x7e8>
802149f4:	00801004 	movi	r2,64
802149f8:	1109c83a 	sub	r4,r2,r4
802149fc:	4912983a 	sll	r9,r9,r4
80214a00:	498cb03a 	or	r6,r9,r6
80214a04:	300cc03a 	cmpne	r6,r6,zero
80214a08:	298ab03a 	or	r5,r5,r6
80214a0c:	0013883a 	mov	r9,zero
80214a10:	003f1506 	br	80214668 <__reset+0xfa1f4668>
80214a14:	0101ffc4 	movi	r4,2047
80214a18:	113f9a1e 	bne	r2,r4,80214884 <__reset+0xfa1f4884>
80214a1c:	4811883a 	mov	r8,r9
80214a20:	3023883a 	mov	r17,r6
80214a24:	1021883a 	mov	r16,r2
80214a28:	3825883a 	mov	r18,r7
80214a2c:	003e9306 	br	8021447c <__reset+0xfa1f447c>
80214a30:	8000161e 	bne	r16,zero,80214a8c <__adddf3+0x68c>
80214a34:	444ab03a 	or	r5,r8,r17
80214a38:	28005126 	beq	r5,zero,80214b80 <__adddf3+0x780>
80214a3c:	0108303a 	nor	r4,zero,r4
80214a40:	20004d1e 	bne	r4,zero,80214b78 <__adddf3+0x778>
80214a44:	89a3883a 	add	r17,r17,r6
80214a48:	4253883a 	add	r9,r8,r9
80214a4c:	898d803a 	cmpltu	r6,r17,r6
80214a50:	3251883a 	add	r8,r6,r9
80214a54:	1021883a 	mov	r16,r2
80214a58:	003f0806 	br	8021467c <__reset+0xfa1f467c>
80214a5c:	1000301e 	bne	r2,zero,80214b20 <__adddf3+0x720>
80214a60:	4984b03a 	or	r2,r9,r6
80214a64:	10007126 	beq	r2,zero,80214c2c <__adddf3+0x82c>
80214a68:	4811883a 	mov	r8,r9
80214a6c:	3023883a 	mov	r17,r6
80214a70:	3825883a 	mov	r18,r7
80214a74:	0401ffc4 	movi	r16,2047
80214a78:	003e8006 	br	8021447c <__reset+0xfa1f447c>
80214a7c:	4462b03a 	or	r17,r8,r17
80214a80:	8822c03a 	cmpne	r17,r17,zero
80214a84:	0007883a 	mov	r3,zero
80214a88:	003f8b06 	br	802148b8 <__reset+0xfa1f48b8>
80214a8c:	0141ffc4 	movi	r5,2047
80214a90:	11403b26 	beq	r2,r5,80214b80 <__adddf3+0x780>
80214a94:	0109c83a 	sub	r4,zero,r4
80214a98:	42002034 	orhi	r8,r8,128
80214a9c:	01400e04 	movi	r5,56
80214aa0:	29006716 	blt	r5,r4,80214c40 <__adddf3+0x840>
80214aa4:	014007c4 	movi	r5,31
80214aa8:	29007016 	blt	r5,r4,80214c6c <__adddf3+0x86c>
80214aac:	01400804 	movi	r5,32
80214ab0:	290bc83a 	sub	r5,r5,r4
80214ab4:	4154983a 	sll	r10,r8,r5
80214ab8:	890ed83a 	srl	r7,r17,r4
80214abc:	894a983a 	sll	r5,r17,r5
80214ac0:	4108d83a 	srl	r4,r8,r4
80214ac4:	51e2b03a 	or	r17,r10,r7
80214ac8:	280ac03a 	cmpne	r5,r5,zero
80214acc:	8962b03a 	or	r17,r17,r5
80214ad0:	89a3883a 	add	r17,r17,r6
80214ad4:	2253883a 	add	r9,r4,r9
80214ad8:	898d803a 	cmpltu	r6,r17,r6
80214adc:	3251883a 	add	r8,r6,r9
80214ae0:	1021883a 	mov	r16,r2
80214ae4:	003ee506 	br	8021467c <__reset+0xfa1f467c>
80214ae8:	4984b03a 	or	r2,r9,r6
80214aec:	103e6326 	beq	r2,zero,8021447c <__reset+0xfa1f447c>
80214af0:	8987c83a 	sub	r3,r17,r6
80214af4:	88c9803a 	cmpltu	r4,r17,r3
80214af8:	4245c83a 	sub	r2,r8,r9
80214afc:	1105c83a 	sub	r2,r2,r4
80214b00:	1100202c 	andhi	r4,r2,128
80214b04:	203ebb26 	beq	r4,zero,802145f4 <__reset+0xfa1f45f4>
80214b08:	3463c83a 	sub	r17,r6,r17
80214b0c:	4a07c83a 	sub	r3,r9,r8
80214b10:	344d803a 	cmpltu	r6,r6,r17
80214b14:	1991c83a 	sub	r8,r3,r6
80214b18:	3825883a 	mov	r18,r7
80214b1c:	003e5706 	br	8021447c <__reset+0xfa1f447c>
80214b20:	4984b03a 	or	r2,r9,r6
80214b24:	10002e26 	beq	r2,zero,80214be0 <__adddf3+0x7e0>
80214b28:	4004d0fa 	srli	r2,r8,3
80214b2c:	8822d0fa 	srli	r17,r17,3
80214b30:	4010977a 	slli	r8,r8,29
80214b34:	10c0022c 	andhi	r3,r2,8
80214b38:	4462b03a 	or	r17,r8,r17
80214b3c:	18000826 	beq	r3,zero,80214b60 <__adddf3+0x760>
80214b40:	4808d0fa 	srli	r4,r9,3
80214b44:	20c0022c 	andhi	r3,r4,8
80214b48:	1800051e 	bne	r3,zero,80214b60 <__adddf3+0x760>
80214b4c:	300cd0fa 	srli	r6,r6,3
80214b50:	4806977a 	slli	r3,r9,29
80214b54:	2005883a 	mov	r2,r4
80214b58:	3825883a 	mov	r18,r7
80214b5c:	19a2b03a 	or	r17,r3,r6
80214b60:	8810d77a 	srli	r8,r17,29
80214b64:	100490fa 	slli	r2,r2,3
80214b68:	882290fa 	slli	r17,r17,3
80214b6c:	0401ffc4 	movi	r16,2047
80214b70:	4090b03a 	or	r8,r8,r2
80214b74:	003e4106 	br	8021447c <__reset+0xfa1f447c>
80214b78:	0141ffc4 	movi	r5,2047
80214b7c:	117fc71e 	bne	r2,r5,80214a9c <__reset+0xfa1f4a9c>
80214b80:	4811883a 	mov	r8,r9
80214b84:	3023883a 	mov	r17,r6
80214b88:	1021883a 	mov	r16,r2
80214b8c:	003e3b06 	br	8021447c <__reset+0xfa1f447c>
80214b90:	10002f26 	beq	r2,zero,80214c50 <__adddf3+0x850>
80214b94:	4984b03a 	or	r2,r9,r6
80214b98:	10001126 	beq	r2,zero,80214be0 <__adddf3+0x7e0>
80214b9c:	4004d0fa 	srli	r2,r8,3
80214ba0:	8822d0fa 	srli	r17,r17,3
80214ba4:	4010977a 	slli	r8,r8,29
80214ba8:	10c0022c 	andhi	r3,r2,8
80214bac:	4462b03a 	or	r17,r8,r17
80214bb0:	183feb26 	beq	r3,zero,80214b60 <__reset+0xfa1f4b60>
80214bb4:	4808d0fa 	srli	r4,r9,3
80214bb8:	20c0022c 	andhi	r3,r4,8
80214bbc:	183fe81e 	bne	r3,zero,80214b60 <__reset+0xfa1f4b60>
80214bc0:	300cd0fa 	srli	r6,r6,3
80214bc4:	4806977a 	slli	r3,r9,29
80214bc8:	2005883a 	mov	r2,r4
80214bcc:	19a2b03a 	or	r17,r3,r6
80214bd0:	003fe306 	br	80214b60 <__reset+0xfa1f4b60>
80214bd4:	0011883a 	mov	r8,zero
80214bd8:	0005883a 	mov	r2,zero
80214bdc:	003e3f06 	br	802144dc <__reset+0xfa1f44dc>
80214be0:	0401ffc4 	movi	r16,2047
80214be4:	003e2506 	br	8021447c <__reset+0xfa1f447c>
80214be8:	0013883a 	mov	r9,zero
80214bec:	003f8406 	br	80214a00 <__reset+0xfa1f4a00>
80214bf0:	0005883a 	mov	r2,zero
80214bf4:	0007883a 	mov	r3,zero
80214bf8:	003e8906 	br	80214620 <__reset+0xfa1f4620>
80214bfc:	197ff804 	addi	r5,r3,-32
80214c00:	01000804 	movi	r4,32
80214c04:	414ad83a 	srl	r5,r8,r5
80214c08:	19002426 	beq	r3,r4,80214c9c <__adddf3+0x89c>
80214c0c:	01001004 	movi	r4,64
80214c10:	20c7c83a 	sub	r3,r4,r3
80214c14:	40c6983a 	sll	r3,r8,r3
80214c18:	1c46b03a 	or	r3,r3,r17
80214c1c:	1806c03a 	cmpne	r3,r3,zero
80214c20:	28e2b03a 	or	r17,r5,r3
80214c24:	0007883a 	mov	r3,zero
80214c28:	003f2306 	br	802148b8 <__reset+0xfa1f48b8>
80214c2c:	0007883a 	mov	r3,zero
80214c30:	5811883a 	mov	r8,r11
80214c34:	00bfffc4 	movi	r2,-1
80214c38:	0401ffc4 	movi	r16,2047
80214c3c:	003e7806 	br	80214620 <__reset+0xfa1f4620>
80214c40:	4462b03a 	or	r17,r8,r17
80214c44:	8822c03a 	cmpne	r17,r17,zero
80214c48:	0009883a 	mov	r4,zero
80214c4c:	003fa006 	br	80214ad0 <__reset+0xfa1f4ad0>
80214c50:	4811883a 	mov	r8,r9
80214c54:	3023883a 	mov	r17,r6
80214c58:	0401ffc4 	movi	r16,2047
80214c5c:	003e0706 	br	8021447c <__reset+0xfa1f447c>
80214c60:	4811883a 	mov	r8,r9
80214c64:	3023883a 	mov	r17,r6
80214c68:	003e0406 	br	8021447c <__reset+0xfa1f447c>
80214c6c:	21fff804 	addi	r7,r4,-32
80214c70:	01400804 	movi	r5,32
80214c74:	41ced83a 	srl	r7,r8,r7
80214c78:	21400a26 	beq	r4,r5,80214ca4 <__adddf3+0x8a4>
80214c7c:	01401004 	movi	r5,64
80214c80:	2909c83a 	sub	r4,r5,r4
80214c84:	4108983a 	sll	r4,r8,r4
80214c88:	2448b03a 	or	r4,r4,r17
80214c8c:	2008c03a 	cmpne	r4,r4,zero
80214c90:	3922b03a 	or	r17,r7,r4
80214c94:	0009883a 	mov	r4,zero
80214c98:	003f8d06 	br	80214ad0 <__reset+0xfa1f4ad0>
80214c9c:	0007883a 	mov	r3,zero
80214ca0:	003fdd06 	br	80214c18 <__reset+0xfa1f4c18>
80214ca4:	0009883a 	mov	r4,zero
80214ca8:	003ff706 	br	80214c88 <__reset+0xfa1f4c88>

80214cac <__divdf3>:
80214cac:	defff204 	addi	sp,sp,-56
80214cb0:	dd400915 	stw	r21,36(sp)
80214cb4:	282ad53a 	srli	r21,r5,20
80214cb8:	dd000815 	stw	r20,32(sp)
80214cbc:	2828d7fa 	srli	r20,r5,31
80214cc0:	dc000415 	stw	r16,16(sp)
80214cc4:	04000434 	movhi	r16,16
80214cc8:	df000c15 	stw	fp,48(sp)
80214ccc:	843fffc4 	addi	r16,r16,-1
80214cd0:	dfc00d15 	stw	ra,52(sp)
80214cd4:	ddc00b15 	stw	r23,44(sp)
80214cd8:	dd800a15 	stw	r22,40(sp)
80214cdc:	dcc00715 	stw	r19,28(sp)
80214ce0:	dc800615 	stw	r18,24(sp)
80214ce4:	dc400515 	stw	r17,20(sp)
80214ce8:	ad41ffcc 	andi	r21,r21,2047
80214cec:	2c20703a 	and	r16,r5,r16
80214cf0:	a7003fcc 	andi	fp,r20,255
80214cf4:	a8006126 	beq	r21,zero,80214e7c <__divdf3+0x1d0>
80214cf8:	0081ffc4 	movi	r2,2047
80214cfc:	2025883a 	mov	r18,r4
80214d00:	a8803726 	beq	r21,r2,80214de0 <__divdf3+0x134>
80214d04:	80800434 	orhi	r2,r16,16
80214d08:	100490fa 	slli	r2,r2,3
80214d0c:	2020d77a 	srli	r16,r4,29
80214d10:	202490fa 	slli	r18,r4,3
80214d14:	ad7f0044 	addi	r21,r21,-1023
80214d18:	80a0b03a 	or	r16,r16,r2
80214d1c:	0027883a 	mov	r19,zero
80214d20:	0013883a 	mov	r9,zero
80214d24:	3804d53a 	srli	r2,r7,20
80214d28:	382cd7fa 	srli	r22,r7,31
80214d2c:	04400434 	movhi	r17,16
80214d30:	8c7fffc4 	addi	r17,r17,-1
80214d34:	1081ffcc 	andi	r2,r2,2047
80214d38:	3011883a 	mov	r8,r6
80214d3c:	3c62703a 	and	r17,r7,r17
80214d40:	b5c03fcc 	andi	r23,r22,255
80214d44:	10006c26 	beq	r2,zero,80214ef8 <__divdf3+0x24c>
80214d48:	00c1ffc4 	movi	r3,2047
80214d4c:	10c06426 	beq	r2,r3,80214ee0 <__divdf3+0x234>
80214d50:	88c00434 	orhi	r3,r17,16
80214d54:	180690fa 	slli	r3,r3,3
80214d58:	3022d77a 	srli	r17,r6,29
80214d5c:	301090fa 	slli	r8,r6,3
80214d60:	10bf0044 	addi	r2,r2,-1023
80214d64:	88e2b03a 	or	r17,r17,r3
80214d68:	000f883a 	mov	r7,zero
80214d6c:	a58cf03a 	xor	r6,r20,r22
80214d70:	3cc8b03a 	or	r4,r7,r19
80214d74:	a8abc83a 	sub	r21,r21,r2
80214d78:	008003c4 	movi	r2,15
80214d7c:	3007883a 	mov	r3,r6
80214d80:	34c03fcc 	andi	r19,r6,255
80214d84:	11009036 	bltu	r2,r4,80214fc8 <__divdf3+0x31c>
80214d88:	200890ba 	slli	r4,r4,2
80214d8c:	00a00874 	movhi	r2,32801
80214d90:	10936804 	addi	r2,r2,19872
80214d94:	2089883a 	add	r4,r4,r2
80214d98:	20800017 	ldw	r2,0(r4)
80214d9c:	1000683a 	jmp	r2
80214da0:	80214fc8 	cmpgei	zero,r16,-31425
80214da4:	80214e18 	cmpnei	zero,r16,-31432
80214da8:	80214fb8 	rdprs	zero,r16,-31426
80214dac:	80214e0c 	andi	zero,r16,34104
80214db0:	80214fb8 	rdprs	zero,r16,-31426
80214db4:	80214f8c 	andi	zero,r16,34110
80214db8:	80214fb8 	rdprs	zero,r16,-31426
80214dbc:	80214e0c 	andi	zero,r16,34104
80214dc0:	80214e18 	cmpnei	zero,r16,-31432
80214dc4:	80214e18 	cmpnei	zero,r16,-31432
80214dc8:	80214f8c 	andi	zero,r16,34110
80214dcc:	80214e0c 	andi	zero,r16,34104
80214dd0:	80214dfc 	xorhi	zero,r16,34103
80214dd4:	80214dfc 	xorhi	zero,r16,34103
80214dd8:	80214dfc 	xorhi	zero,r16,34103
80214ddc:	802152ac 	andhi	zero,r16,34122
80214de0:	2404b03a 	or	r2,r4,r16
80214de4:	1000661e 	bne	r2,zero,80214f80 <__divdf3+0x2d4>
80214de8:	04c00204 	movi	r19,8
80214dec:	0021883a 	mov	r16,zero
80214df0:	0025883a 	mov	r18,zero
80214df4:	02400084 	movi	r9,2
80214df8:	003fca06 	br	80214d24 <__reset+0xfa1f4d24>
80214dfc:	8023883a 	mov	r17,r16
80214e00:	9011883a 	mov	r8,r18
80214e04:	e02f883a 	mov	r23,fp
80214e08:	480f883a 	mov	r7,r9
80214e0c:	00800084 	movi	r2,2
80214e10:	3881311e 	bne	r7,r2,802152d8 <__divdf3+0x62c>
80214e14:	b827883a 	mov	r19,r23
80214e18:	98c0004c 	andi	r3,r19,1
80214e1c:	0081ffc4 	movi	r2,2047
80214e20:	000b883a 	mov	r5,zero
80214e24:	0025883a 	mov	r18,zero
80214e28:	1004953a 	slli	r2,r2,20
80214e2c:	18c03fcc 	andi	r3,r3,255
80214e30:	04400434 	movhi	r17,16
80214e34:	8c7fffc4 	addi	r17,r17,-1
80214e38:	180697fa 	slli	r3,r3,31
80214e3c:	2c4a703a 	and	r5,r5,r17
80214e40:	288ab03a 	or	r5,r5,r2
80214e44:	28c6b03a 	or	r3,r5,r3
80214e48:	9005883a 	mov	r2,r18
80214e4c:	dfc00d17 	ldw	ra,52(sp)
80214e50:	df000c17 	ldw	fp,48(sp)
80214e54:	ddc00b17 	ldw	r23,44(sp)
80214e58:	dd800a17 	ldw	r22,40(sp)
80214e5c:	dd400917 	ldw	r21,36(sp)
80214e60:	dd000817 	ldw	r20,32(sp)
80214e64:	dcc00717 	ldw	r19,28(sp)
80214e68:	dc800617 	ldw	r18,24(sp)
80214e6c:	dc400517 	ldw	r17,20(sp)
80214e70:	dc000417 	ldw	r16,16(sp)
80214e74:	dec00e04 	addi	sp,sp,56
80214e78:	f800283a 	ret
80214e7c:	2404b03a 	or	r2,r4,r16
80214e80:	2027883a 	mov	r19,r4
80214e84:	10003926 	beq	r2,zero,80214f6c <__divdf3+0x2c0>
80214e88:	80012e26 	beq	r16,zero,80215344 <__divdf3+0x698>
80214e8c:	8009883a 	mov	r4,r16
80214e90:	d9800315 	stw	r6,12(sp)
80214e94:	d9c00215 	stw	r7,8(sp)
80214e98:	020693c0 	call	8020693c <__clzsi2>
80214e9c:	d9800317 	ldw	r6,12(sp)
80214ea0:	d9c00217 	ldw	r7,8(sp)
80214ea4:	113ffd44 	addi	r4,r2,-11
80214ea8:	00c00704 	movi	r3,28
80214eac:	19012116 	blt	r3,r4,80215334 <__divdf3+0x688>
80214eb0:	00c00744 	movi	r3,29
80214eb4:	147ffe04 	addi	r17,r2,-8
80214eb8:	1907c83a 	sub	r3,r3,r4
80214ebc:	8460983a 	sll	r16,r16,r17
80214ec0:	98c6d83a 	srl	r3,r19,r3
80214ec4:	9c64983a 	sll	r18,r19,r17
80214ec8:	1c20b03a 	or	r16,r3,r16
80214ecc:	1080fcc4 	addi	r2,r2,1011
80214ed0:	00abc83a 	sub	r21,zero,r2
80214ed4:	0027883a 	mov	r19,zero
80214ed8:	0013883a 	mov	r9,zero
80214edc:	003f9106 	br	80214d24 <__reset+0xfa1f4d24>
80214ee0:	3446b03a 	or	r3,r6,r17
80214ee4:	18001f1e 	bne	r3,zero,80214f64 <__divdf3+0x2b8>
80214ee8:	0023883a 	mov	r17,zero
80214eec:	0011883a 	mov	r8,zero
80214ef0:	01c00084 	movi	r7,2
80214ef4:	003f9d06 	br	80214d6c <__reset+0xfa1f4d6c>
80214ef8:	3446b03a 	or	r3,r6,r17
80214efc:	18001526 	beq	r3,zero,80214f54 <__divdf3+0x2a8>
80214f00:	88011b26 	beq	r17,zero,80215370 <__divdf3+0x6c4>
80214f04:	8809883a 	mov	r4,r17
80214f08:	d9800315 	stw	r6,12(sp)
80214f0c:	da400115 	stw	r9,4(sp)
80214f10:	020693c0 	call	8020693c <__clzsi2>
80214f14:	d9800317 	ldw	r6,12(sp)
80214f18:	da400117 	ldw	r9,4(sp)
80214f1c:	113ffd44 	addi	r4,r2,-11
80214f20:	00c00704 	movi	r3,28
80214f24:	19010e16 	blt	r3,r4,80215360 <__divdf3+0x6b4>
80214f28:	00c00744 	movi	r3,29
80214f2c:	123ffe04 	addi	r8,r2,-8
80214f30:	1907c83a 	sub	r3,r3,r4
80214f34:	8a22983a 	sll	r17,r17,r8
80214f38:	30c6d83a 	srl	r3,r6,r3
80214f3c:	3210983a 	sll	r8,r6,r8
80214f40:	1c62b03a 	or	r17,r3,r17
80214f44:	1080fcc4 	addi	r2,r2,1011
80214f48:	0085c83a 	sub	r2,zero,r2
80214f4c:	000f883a 	mov	r7,zero
80214f50:	003f8606 	br	80214d6c <__reset+0xfa1f4d6c>
80214f54:	0023883a 	mov	r17,zero
80214f58:	0011883a 	mov	r8,zero
80214f5c:	01c00044 	movi	r7,1
80214f60:	003f8206 	br	80214d6c <__reset+0xfa1f4d6c>
80214f64:	01c000c4 	movi	r7,3
80214f68:	003f8006 	br	80214d6c <__reset+0xfa1f4d6c>
80214f6c:	04c00104 	movi	r19,4
80214f70:	0021883a 	mov	r16,zero
80214f74:	0025883a 	mov	r18,zero
80214f78:	02400044 	movi	r9,1
80214f7c:	003f6906 	br	80214d24 <__reset+0xfa1f4d24>
80214f80:	04c00304 	movi	r19,12
80214f84:	024000c4 	movi	r9,3
80214f88:	003f6606 	br	80214d24 <__reset+0xfa1f4d24>
80214f8c:	01400434 	movhi	r5,16
80214f90:	0007883a 	mov	r3,zero
80214f94:	297fffc4 	addi	r5,r5,-1
80214f98:	04bfffc4 	movi	r18,-1
80214f9c:	0081ffc4 	movi	r2,2047
80214fa0:	003fa106 	br	80214e28 <__reset+0xfa1f4e28>
80214fa4:	00c00044 	movi	r3,1
80214fa8:	1887c83a 	sub	r3,r3,r2
80214fac:	01000e04 	movi	r4,56
80214fb0:	20c1210e 	bge	r4,r3,80215438 <__divdf3+0x78c>
80214fb4:	98c0004c 	andi	r3,r19,1
80214fb8:	0005883a 	mov	r2,zero
80214fbc:	000b883a 	mov	r5,zero
80214fc0:	0025883a 	mov	r18,zero
80214fc4:	003f9806 	br	80214e28 <__reset+0xfa1f4e28>
80214fc8:	8c00fd36 	bltu	r17,r16,802153c0 <__divdf3+0x714>
80214fcc:	8440fb26 	beq	r16,r17,802153bc <__divdf3+0x710>
80214fd0:	8007883a 	mov	r3,r16
80214fd4:	ad7fffc4 	addi	r21,r21,-1
80214fd8:	0021883a 	mov	r16,zero
80214fdc:	4004d63a 	srli	r2,r8,24
80214fe0:	8822923a 	slli	r17,r17,8
80214fe4:	1809883a 	mov	r4,r3
80214fe8:	402c923a 	slli	r22,r8,8
80214fec:	88b8b03a 	or	fp,r17,r2
80214ff0:	e028d43a 	srli	r20,fp,16
80214ff4:	d8c00015 	stw	r3,0(sp)
80214ff8:	e5ffffcc 	andi	r23,fp,65535
80214ffc:	a00b883a 	mov	r5,r20
80215000:	02143440 	call	80214344 <__udivsi3>
80215004:	d8c00017 	ldw	r3,0(sp)
80215008:	a00b883a 	mov	r5,r20
8021500c:	d8800315 	stw	r2,12(sp)
80215010:	1809883a 	mov	r4,r3
80215014:	02143a80 	call	802143a8 <__umodsi3>
80215018:	d9800317 	ldw	r6,12(sp)
8021501c:	1006943a 	slli	r3,r2,16
80215020:	9004d43a 	srli	r2,r18,16
80215024:	b9a3383a 	mul	r17,r23,r6
80215028:	10c4b03a 	or	r2,r2,r3
8021502c:	1440062e 	bgeu	r2,r17,80215048 <__divdf3+0x39c>
80215030:	1705883a 	add	r2,r2,fp
80215034:	30ffffc4 	addi	r3,r6,-1
80215038:	1700ee36 	bltu	r2,fp,802153f4 <__divdf3+0x748>
8021503c:	1440ed2e 	bgeu	r2,r17,802153f4 <__divdf3+0x748>
80215040:	31bfff84 	addi	r6,r6,-2
80215044:	1705883a 	add	r2,r2,fp
80215048:	1463c83a 	sub	r17,r2,r17
8021504c:	a00b883a 	mov	r5,r20
80215050:	8809883a 	mov	r4,r17
80215054:	d9800315 	stw	r6,12(sp)
80215058:	02143440 	call	80214344 <__udivsi3>
8021505c:	a00b883a 	mov	r5,r20
80215060:	8809883a 	mov	r4,r17
80215064:	d8800215 	stw	r2,8(sp)
80215068:	02143a80 	call	802143a8 <__umodsi3>
8021506c:	d9c00217 	ldw	r7,8(sp)
80215070:	1004943a 	slli	r2,r2,16
80215074:	94bfffcc 	andi	r18,r18,65535
80215078:	b9d1383a 	mul	r8,r23,r7
8021507c:	90a4b03a 	or	r18,r18,r2
80215080:	d9800317 	ldw	r6,12(sp)
80215084:	9200062e 	bgeu	r18,r8,802150a0 <__divdf3+0x3f4>
80215088:	9725883a 	add	r18,r18,fp
8021508c:	38bfffc4 	addi	r2,r7,-1
80215090:	9700d636 	bltu	r18,fp,802153ec <__divdf3+0x740>
80215094:	9200d52e 	bgeu	r18,r8,802153ec <__divdf3+0x740>
80215098:	39ffff84 	addi	r7,r7,-2
8021509c:	9725883a 	add	r18,r18,fp
802150a0:	3004943a 	slli	r2,r6,16
802150a4:	b012d43a 	srli	r9,r22,16
802150a8:	b1bfffcc 	andi	r6,r22,65535
802150ac:	11e2b03a 	or	r17,r2,r7
802150b0:	8806d43a 	srli	r3,r17,16
802150b4:	893fffcc 	andi	r4,r17,65535
802150b8:	218b383a 	mul	r5,r4,r6
802150bc:	30c5383a 	mul	r2,r6,r3
802150c0:	2249383a 	mul	r4,r4,r9
802150c4:	280ed43a 	srli	r7,r5,16
802150c8:	9225c83a 	sub	r18,r18,r8
802150cc:	2089883a 	add	r4,r4,r2
802150d0:	3909883a 	add	r4,r7,r4
802150d4:	1a47383a 	mul	r3,r3,r9
802150d8:	2080022e 	bgeu	r4,r2,802150e4 <__divdf3+0x438>
802150dc:	00800074 	movhi	r2,1
802150e0:	1887883a 	add	r3,r3,r2
802150e4:	2004d43a 	srli	r2,r4,16
802150e8:	2008943a 	slli	r4,r4,16
802150ec:	297fffcc 	andi	r5,r5,65535
802150f0:	10c7883a 	add	r3,r2,r3
802150f4:	2149883a 	add	r4,r4,r5
802150f8:	90c0a536 	bltu	r18,r3,80215390 <__divdf3+0x6e4>
802150fc:	90c0bf26 	beq	r18,r3,802153fc <__divdf3+0x750>
80215100:	90c7c83a 	sub	r3,r18,r3
80215104:	810fc83a 	sub	r7,r16,r4
80215108:	81e5803a 	cmpltu	r18,r16,r7
8021510c:	1ca5c83a 	sub	r18,r3,r18
80215110:	e480c126 	beq	fp,r18,80215418 <__divdf3+0x76c>
80215114:	a00b883a 	mov	r5,r20
80215118:	9009883a 	mov	r4,r18
8021511c:	d9800315 	stw	r6,12(sp)
80215120:	d9c00215 	stw	r7,8(sp)
80215124:	da400115 	stw	r9,4(sp)
80215128:	02143440 	call	80214344 <__udivsi3>
8021512c:	a00b883a 	mov	r5,r20
80215130:	9009883a 	mov	r4,r18
80215134:	d8800015 	stw	r2,0(sp)
80215138:	02143a80 	call	802143a8 <__umodsi3>
8021513c:	d9c00217 	ldw	r7,8(sp)
80215140:	da000017 	ldw	r8,0(sp)
80215144:	1006943a 	slli	r3,r2,16
80215148:	3804d43a 	srli	r2,r7,16
8021514c:	ba21383a 	mul	r16,r23,r8
80215150:	d9800317 	ldw	r6,12(sp)
80215154:	10c4b03a 	or	r2,r2,r3
80215158:	da400117 	ldw	r9,4(sp)
8021515c:	1400062e 	bgeu	r2,r16,80215178 <__divdf3+0x4cc>
80215160:	1705883a 	add	r2,r2,fp
80215164:	40ffffc4 	addi	r3,r8,-1
80215168:	1700ad36 	bltu	r2,fp,80215420 <__divdf3+0x774>
8021516c:	1400ac2e 	bgeu	r2,r16,80215420 <__divdf3+0x774>
80215170:	423fff84 	addi	r8,r8,-2
80215174:	1705883a 	add	r2,r2,fp
80215178:	1421c83a 	sub	r16,r2,r16
8021517c:	a00b883a 	mov	r5,r20
80215180:	8009883a 	mov	r4,r16
80215184:	d9800315 	stw	r6,12(sp)
80215188:	d9c00215 	stw	r7,8(sp)
8021518c:	da000015 	stw	r8,0(sp)
80215190:	da400115 	stw	r9,4(sp)
80215194:	02143440 	call	80214344 <__udivsi3>
80215198:	8009883a 	mov	r4,r16
8021519c:	a00b883a 	mov	r5,r20
802151a0:	1025883a 	mov	r18,r2
802151a4:	02143a80 	call	802143a8 <__umodsi3>
802151a8:	d9c00217 	ldw	r7,8(sp)
802151ac:	1004943a 	slli	r2,r2,16
802151b0:	bcaf383a 	mul	r23,r23,r18
802151b4:	393fffcc 	andi	r4,r7,65535
802151b8:	2088b03a 	or	r4,r4,r2
802151bc:	d9800317 	ldw	r6,12(sp)
802151c0:	da000017 	ldw	r8,0(sp)
802151c4:	da400117 	ldw	r9,4(sp)
802151c8:	25c0062e 	bgeu	r4,r23,802151e4 <__divdf3+0x538>
802151cc:	2709883a 	add	r4,r4,fp
802151d0:	90bfffc4 	addi	r2,r18,-1
802151d4:	27009436 	bltu	r4,fp,80215428 <__divdf3+0x77c>
802151d8:	25c0932e 	bgeu	r4,r23,80215428 <__divdf3+0x77c>
802151dc:	94bfff84 	addi	r18,r18,-2
802151e0:	2709883a 	add	r4,r4,fp
802151e4:	4004943a 	slli	r2,r8,16
802151e8:	25efc83a 	sub	r23,r4,r23
802151ec:	1490b03a 	or	r8,r2,r18
802151f0:	4008d43a 	srli	r4,r8,16
802151f4:	40ffffcc 	andi	r3,r8,65535
802151f8:	30c5383a 	mul	r2,r6,r3
802151fc:	1a47383a 	mul	r3,r3,r9
80215200:	310d383a 	mul	r6,r6,r4
80215204:	100ad43a 	srli	r5,r2,16
80215208:	4913383a 	mul	r9,r9,r4
8021520c:	1987883a 	add	r3,r3,r6
80215210:	28c7883a 	add	r3,r5,r3
80215214:	1980022e 	bgeu	r3,r6,80215220 <__divdf3+0x574>
80215218:	01000074 	movhi	r4,1
8021521c:	4913883a 	add	r9,r9,r4
80215220:	1808d43a 	srli	r4,r3,16
80215224:	1806943a 	slli	r3,r3,16
80215228:	10bfffcc 	andi	r2,r2,65535
8021522c:	2253883a 	add	r9,r4,r9
80215230:	1887883a 	add	r3,r3,r2
80215234:	ba403836 	bltu	r23,r9,80215318 <__divdf3+0x66c>
80215238:	ba403626 	beq	r23,r9,80215314 <__divdf3+0x668>
8021523c:	42000054 	ori	r8,r8,1
80215240:	a880ffc4 	addi	r2,r21,1023
80215244:	00bf570e 	bge	zero,r2,80214fa4 <__reset+0xfa1f4fa4>
80215248:	40c001cc 	andi	r3,r8,7
8021524c:	18000726 	beq	r3,zero,8021526c <__divdf3+0x5c0>
80215250:	40c003cc 	andi	r3,r8,15
80215254:	01000104 	movi	r4,4
80215258:	19000426 	beq	r3,r4,8021526c <__divdf3+0x5c0>
8021525c:	4107883a 	add	r3,r8,r4
80215260:	1a11803a 	cmpltu	r8,r3,r8
80215264:	8a23883a 	add	r17,r17,r8
80215268:	1811883a 	mov	r8,r3
8021526c:	88c0402c 	andhi	r3,r17,256
80215270:	18000426 	beq	r3,zero,80215284 <__divdf3+0x5d8>
80215274:	00ffc034 	movhi	r3,65280
80215278:	18ffffc4 	addi	r3,r3,-1
8021527c:	a8810004 	addi	r2,r21,1024
80215280:	88e2703a 	and	r17,r17,r3
80215284:	00c1ff84 	movi	r3,2046
80215288:	18bee316 	blt	r3,r2,80214e18 <__reset+0xfa1f4e18>
8021528c:	8824977a 	slli	r18,r17,29
80215290:	4010d0fa 	srli	r8,r8,3
80215294:	8822927a 	slli	r17,r17,9
80215298:	1081ffcc 	andi	r2,r2,2047
8021529c:	9224b03a 	or	r18,r18,r8
802152a0:	880ad33a 	srli	r5,r17,12
802152a4:	98c0004c 	andi	r3,r19,1
802152a8:	003edf06 	br	80214e28 <__reset+0xfa1f4e28>
802152ac:	8080022c 	andhi	r2,r16,8
802152b0:	10001226 	beq	r2,zero,802152fc <__divdf3+0x650>
802152b4:	8880022c 	andhi	r2,r17,8
802152b8:	1000101e 	bne	r2,zero,802152fc <__divdf3+0x650>
802152bc:	00800434 	movhi	r2,16
802152c0:	89400234 	orhi	r5,r17,8
802152c4:	10bfffc4 	addi	r2,r2,-1
802152c8:	b007883a 	mov	r3,r22
802152cc:	288a703a 	and	r5,r5,r2
802152d0:	4025883a 	mov	r18,r8
802152d4:	003f3106 	br	80214f9c <__reset+0xfa1f4f9c>
802152d8:	008000c4 	movi	r2,3
802152dc:	3880a626 	beq	r7,r2,80215578 <__divdf3+0x8cc>
802152e0:	00800044 	movi	r2,1
802152e4:	3880521e 	bne	r7,r2,80215430 <__divdf3+0x784>
802152e8:	b807883a 	mov	r3,r23
802152ec:	0005883a 	mov	r2,zero
802152f0:	000b883a 	mov	r5,zero
802152f4:	0025883a 	mov	r18,zero
802152f8:	003ecb06 	br	80214e28 <__reset+0xfa1f4e28>
802152fc:	00800434 	movhi	r2,16
80215300:	81400234 	orhi	r5,r16,8
80215304:	10bfffc4 	addi	r2,r2,-1
80215308:	a007883a 	mov	r3,r20
8021530c:	288a703a 	and	r5,r5,r2
80215310:	003f2206 	br	80214f9c <__reset+0xfa1f4f9c>
80215314:	183fca26 	beq	r3,zero,80215240 <__reset+0xfa1f5240>
80215318:	e5ef883a 	add	r23,fp,r23
8021531c:	40bfffc4 	addi	r2,r8,-1
80215320:	bf00392e 	bgeu	r23,fp,80215408 <__divdf3+0x75c>
80215324:	1011883a 	mov	r8,r2
80215328:	ba7fc41e 	bne	r23,r9,8021523c <__reset+0xfa1f523c>
8021532c:	b0ffc31e 	bne	r22,r3,8021523c <__reset+0xfa1f523c>
80215330:	003fc306 	br	80215240 <__reset+0xfa1f5240>
80215334:	143ff604 	addi	r16,r2,-40
80215338:	9c20983a 	sll	r16,r19,r16
8021533c:	0025883a 	mov	r18,zero
80215340:	003ee206 	br	80214ecc <__reset+0xfa1f4ecc>
80215344:	d9800315 	stw	r6,12(sp)
80215348:	d9c00215 	stw	r7,8(sp)
8021534c:	020693c0 	call	8020693c <__clzsi2>
80215350:	10800804 	addi	r2,r2,32
80215354:	d9c00217 	ldw	r7,8(sp)
80215358:	d9800317 	ldw	r6,12(sp)
8021535c:	003ed106 	br	80214ea4 <__reset+0xfa1f4ea4>
80215360:	147ff604 	addi	r17,r2,-40
80215364:	3462983a 	sll	r17,r6,r17
80215368:	0011883a 	mov	r8,zero
8021536c:	003ef506 	br	80214f44 <__reset+0xfa1f4f44>
80215370:	3009883a 	mov	r4,r6
80215374:	d9800315 	stw	r6,12(sp)
80215378:	da400115 	stw	r9,4(sp)
8021537c:	020693c0 	call	8020693c <__clzsi2>
80215380:	10800804 	addi	r2,r2,32
80215384:	da400117 	ldw	r9,4(sp)
80215388:	d9800317 	ldw	r6,12(sp)
8021538c:	003ee306 	br	80214f1c <__reset+0xfa1f4f1c>
80215390:	85a1883a 	add	r16,r16,r22
80215394:	8585803a 	cmpltu	r2,r16,r22
80215398:	1705883a 	add	r2,r2,fp
8021539c:	14a5883a 	add	r18,r2,r18
802153a0:	88bfffc4 	addi	r2,r17,-1
802153a4:	e4800c2e 	bgeu	fp,r18,802153d8 <__divdf3+0x72c>
802153a8:	90c03e36 	bltu	r18,r3,802154a4 <__divdf3+0x7f8>
802153ac:	1c806926 	beq	r3,r18,80215554 <__divdf3+0x8a8>
802153b0:	90c7c83a 	sub	r3,r18,r3
802153b4:	1023883a 	mov	r17,r2
802153b8:	003f5206 	br	80215104 <__reset+0xfa1f5104>
802153bc:	923f0436 	bltu	r18,r8,80214fd0 <__reset+0xfa1f4fd0>
802153c0:	800897fa 	slli	r4,r16,31
802153c4:	9004d07a 	srli	r2,r18,1
802153c8:	8006d07a 	srli	r3,r16,1
802153cc:	902097fa 	slli	r16,r18,31
802153d0:	20a4b03a 	or	r18,r4,r2
802153d4:	003f0106 	br	80214fdc <__reset+0xfa1f4fdc>
802153d8:	e4bff51e 	bne	fp,r18,802153b0 <__reset+0xfa1f53b0>
802153dc:	85bff22e 	bgeu	r16,r22,802153a8 <__reset+0xfa1f53a8>
802153e0:	e0c7c83a 	sub	r3,fp,r3
802153e4:	1023883a 	mov	r17,r2
802153e8:	003f4606 	br	80215104 <__reset+0xfa1f5104>
802153ec:	100f883a 	mov	r7,r2
802153f0:	003f2b06 	br	802150a0 <__reset+0xfa1f50a0>
802153f4:	180d883a 	mov	r6,r3
802153f8:	003f1306 	br	80215048 <__reset+0xfa1f5048>
802153fc:	813fe436 	bltu	r16,r4,80215390 <__reset+0xfa1f5390>
80215400:	0007883a 	mov	r3,zero
80215404:	003f3f06 	br	80215104 <__reset+0xfa1f5104>
80215408:	ba402c36 	bltu	r23,r9,802154bc <__divdf3+0x810>
8021540c:	4dc05426 	beq	r9,r23,80215560 <__divdf3+0x8b4>
80215410:	1011883a 	mov	r8,r2
80215414:	003f8906 	br	8021523c <__reset+0xfa1f523c>
80215418:	023fffc4 	movi	r8,-1
8021541c:	003f8806 	br	80215240 <__reset+0xfa1f5240>
80215420:	1811883a 	mov	r8,r3
80215424:	003f5406 	br	80215178 <__reset+0xfa1f5178>
80215428:	1025883a 	mov	r18,r2
8021542c:	003f6d06 	br	802151e4 <__reset+0xfa1f51e4>
80215430:	b827883a 	mov	r19,r23
80215434:	003f8206 	br	80215240 <__reset+0xfa1f5240>
80215438:	010007c4 	movi	r4,31
8021543c:	20c02616 	blt	r4,r3,802154d8 <__divdf3+0x82c>
80215440:	00800804 	movi	r2,32
80215444:	10c5c83a 	sub	r2,r2,r3
80215448:	888a983a 	sll	r5,r17,r2
8021544c:	40c8d83a 	srl	r4,r8,r3
80215450:	4084983a 	sll	r2,r8,r2
80215454:	88e2d83a 	srl	r17,r17,r3
80215458:	2906b03a 	or	r3,r5,r4
8021545c:	1004c03a 	cmpne	r2,r2,zero
80215460:	1886b03a 	or	r3,r3,r2
80215464:	188001cc 	andi	r2,r3,7
80215468:	10000726 	beq	r2,zero,80215488 <__divdf3+0x7dc>
8021546c:	188003cc 	andi	r2,r3,15
80215470:	01000104 	movi	r4,4
80215474:	11000426 	beq	r2,r4,80215488 <__divdf3+0x7dc>
80215478:	1805883a 	mov	r2,r3
8021547c:	10c00104 	addi	r3,r2,4
80215480:	1885803a 	cmpltu	r2,r3,r2
80215484:	88a3883a 	add	r17,r17,r2
80215488:	8880202c 	andhi	r2,r17,128
8021548c:	10002726 	beq	r2,zero,8021552c <__divdf3+0x880>
80215490:	98c0004c 	andi	r3,r19,1
80215494:	00800044 	movi	r2,1
80215498:	000b883a 	mov	r5,zero
8021549c:	0025883a 	mov	r18,zero
802154a0:	003e6106 	br	80214e28 <__reset+0xfa1f4e28>
802154a4:	85a1883a 	add	r16,r16,r22
802154a8:	8585803a 	cmpltu	r2,r16,r22
802154ac:	1705883a 	add	r2,r2,fp
802154b0:	14a5883a 	add	r18,r2,r18
802154b4:	8c7fff84 	addi	r17,r17,-2
802154b8:	003f1106 	br	80215100 <__reset+0xfa1f5100>
802154bc:	b589883a 	add	r4,r22,r22
802154c0:	25ad803a 	cmpltu	r22,r4,r22
802154c4:	b739883a 	add	fp,r22,fp
802154c8:	40bfff84 	addi	r2,r8,-2
802154cc:	bf2f883a 	add	r23,r23,fp
802154d0:	202d883a 	mov	r22,r4
802154d4:	003f9306 	br	80215324 <__reset+0xfa1f5324>
802154d8:	013ff844 	movi	r4,-31
802154dc:	2085c83a 	sub	r2,r4,r2
802154e0:	8888d83a 	srl	r4,r17,r2
802154e4:	00800804 	movi	r2,32
802154e8:	18802126 	beq	r3,r2,80215570 <__divdf3+0x8c4>
802154ec:	00801004 	movi	r2,64
802154f0:	10c5c83a 	sub	r2,r2,r3
802154f4:	8884983a 	sll	r2,r17,r2
802154f8:	1204b03a 	or	r2,r2,r8
802154fc:	1004c03a 	cmpne	r2,r2,zero
80215500:	2084b03a 	or	r2,r4,r2
80215504:	144001cc 	andi	r17,r2,7
80215508:	88000d1e 	bne	r17,zero,80215540 <__divdf3+0x894>
8021550c:	000b883a 	mov	r5,zero
80215510:	1024d0fa 	srli	r18,r2,3
80215514:	98c0004c 	andi	r3,r19,1
80215518:	0005883a 	mov	r2,zero
8021551c:	9464b03a 	or	r18,r18,r17
80215520:	003e4106 	br	80214e28 <__reset+0xfa1f4e28>
80215524:	1007883a 	mov	r3,r2
80215528:	0023883a 	mov	r17,zero
8021552c:	880a927a 	slli	r5,r17,9
80215530:	1805883a 	mov	r2,r3
80215534:	8822977a 	slli	r17,r17,29
80215538:	280ad33a 	srli	r5,r5,12
8021553c:	003ff406 	br	80215510 <__reset+0xfa1f5510>
80215540:	10c003cc 	andi	r3,r2,15
80215544:	01000104 	movi	r4,4
80215548:	193ff626 	beq	r3,r4,80215524 <__reset+0xfa1f5524>
8021554c:	0023883a 	mov	r17,zero
80215550:	003fca06 	br	8021547c <__reset+0xfa1f547c>
80215554:	813fd336 	bltu	r16,r4,802154a4 <__reset+0xfa1f54a4>
80215558:	1023883a 	mov	r17,r2
8021555c:	003fa806 	br	80215400 <__reset+0xfa1f5400>
80215560:	b0ffd636 	bltu	r22,r3,802154bc <__reset+0xfa1f54bc>
80215564:	1011883a 	mov	r8,r2
80215568:	b0ff341e 	bne	r22,r3,8021523c <__reset+0xfa1f523c>
8021556c:	003f3406 	br	80215240 <__reset+0xfa1f5240>
80215570:	0005883a 	mov	r2,zero
80215574:	003fe006 	br	802154f8 <__reset+0xfa1f54f8>
80215578:	00800434 	movhi	r2,16
8021557c:	89400234 	orhi	r5,r17,8
80215580:	10bfffc4 	addi	r2,r2,-1
80215584:	b807883a 	mov	r3,r23
80215588:	288a703a 	and	r5,r5,r2
8021558c:	4025883a 	mov	r18,r8
80215590:	003e8206 	br	80214f9c <__reset+0xfa1f4f9c>

80215594 <__eqdf2>:
80215594:	2804d53a 	srli	r2,r5,20
80215598:	3806d53a 	srli	r3,r7,20
8021559c:	02000434 	movhi	r8,16
802155a0:	423fffc4 	addi	r8,r8,-1
802155a4:	1081ffcc 	andi	r2,r2,2047
802155a8:	0281ffc4 	movi	r10,2047
802155ac:	2a12703a 	and	r9,r5,r8
802155b0:	18c1ffcc 	andi	r3,r3,2047
802155b4:	3a10703a 	and	r8,r7,r8
802155b8:	280ad7fa 	srli	r5,r5,31
802155bc:	380ed7fa 	srli	r7,r7,31
802155c0:	12801026 	beq	r2,r10,80215604 <__eqdf2+0x70>
802155c4:	0281ffc4 	movi	r10,2047
802155c8:	1a800a26 	beq	r3,r10,802155f4 <__eqdf2+0x60>
802155cc:	10c00226 	beq	r2,r3,802155d8 <__eqdf2+0x44>
802155d0:	00800044 	movi	r2,1
802155d4:	f800283a 	ret
802155d8:	4a3ffd1e 	bne	r9,r8,802155d0 <__reset+0xfa1f55d0>
802155dc:	21bffc1e 	bne	r4,r6,802155d0 <__reset+0xfa1f55d0>
802155e0:	29c00c26 	beq	r5,r7,80215614 <__eqdf2+0x80>
802155e4:	103ffa1e 	bne	r2,zero,802155d0 <__reset+0xfa1f55d0>
802155e8:	2244b03a 	or	r2,r4,r9
802155ec:	1004c03a 	cmpne	r2,r2,zero
802155f0:	f800283a 	ret
802155f4:	3214b03a 	or	r10,r6,r8
802155f8:	503ff426 	beq	r10,zero,802155cc <__reset+0xfa1f55cc>
802155fc:	00800044 	movi	r2,1
80215600:	f800283a 	ret
80215604:	2254b03a 	or	r10,r4,r9
80215608:	503fee26 	beq	r10,zero,802155c4 <__reset+0xfa1f55c4>
8021560c:	00800044 	movi	r2,1
80215610:	f800283a 	ret
80215614:	0005883a 	mov	r2,zero
80215618:	f800283a 	ret

8021561c <__gedf2>:
8021561c:	2804d53a 	srli	r2,r5,20
80215620:	3806d53a 	srli	r3,r7,20
80215624:	02000434 	movhi	r8,16
80215628:	423fffc4 	addi	r8,r8,-1
8021562c:	1081ffcc 	andi	r2,r2,2047
80215630:	0241ffc4 	movi	r9,2047
80215634:	2a14703a 	and	r10,r5,r8
80215638:	18c1ffcc 	andi	r3,r3,2047
8021563c:	3a10703a 	and	r8,r7,r8
80215640:	280ad7fa 	srli	r5,r5,31
80215644:	380ed7fa 	srli	r7,r7,31
80215648:	12401d26 	beq	r2,r9,802156c0 <__gedf2+0xa4>
8021564c:	0241ffc4 	movi	r9,2047
80215650:	1a401226 	beq	r3,r9,8021569c <__gedf2+0x80>
80215654:	1000081e 	bne	r2,zero,80215678 <__gedf2+0x5c>
80215658:	2296b03a 	or	r11,r4,r10
8021565c:	5813003a 	cmpeq	r9,r11,zero
80215660:	1800091e 	bne	r3,zero,80215688 <__gedf2+0x6c>
80215664:	3218b03a 	or	r12,r6,r8
80215668:	6000071e 	bne	r12,zero,80215688 <__gedf2+0x6c>
8021566c:	0005883a 	mov	r2,zero
80215670:	5800101e 	bne	r11,zero,802156b4 <__gedf2+0x98>
80215674:	f800283a 	ret
80215678:	18000c1e 	bne	r3,zero,802156ac <__gedf2+0x90>
8021567c:	3212b03a 	or	r9,r6,r8
80215680:	48000c26 	beq	r9,zero,802156b4 <__gedf2+0x98>
80215684:	0013883a 	mov	r9,zero
80215688:	39c03fcc 	andi	r7,r7,255
8021568c:	48000826 	beq	r9,zero,802156b0 <__gedf2+0x94>
80215690:	38000926 	beq	r7,zero,802156b8 <__gedf2+0x9c>
80215694:	00800044 	movi	r2,1
80215698:	f800283a 	ret
8021569c:	3212b03a 	or	r9,r6,r8
802156a0:	483fec26 	beq	r9,zero,80215654 <__reset+0xfa1f5654>
802156a4:	00bfff84 	movi	r2,-2
802156a8:	f800283a 	ret
802156ac:	39c03fcc 	andi	r7,r7,255
802156b0:	29c00626 	beq	r5,r7,802156cc <__gedf2+0xb0>
802156b4:	283ff726 	beq	r5,zero,80215694 <__reset+0xfa1f5694>
802156b8:	00bfffc4 	movi	r2,-1
802156bc:	f800283a 	ret
802156c0:	2292b03a 	or	r9,r4,r10
802156c4:	483fe126 	beq	r9,zero,8021564c <__reset+0xfa1f564c>
802156c8:	003ff606 	br	802156a4 <__reset+0xfa1f56a4>
802156cc:	18bff916 	blt	r3,r2,802156b4 <__reset+0xfa1f56b4>
802156d0:	10c00316 	blt	r2,r3,802156e0 <__gedf2+0xc4>
802156d4:	42bff736 	bltu	r8,r10,802156b4 <__reset+0xfa1f56b4>
802156d8:	52000326 	beq	r10,r8,802156e8 <__gedf2+0xcc>
802156dc:	5200042e 	bgeu	r10,r8,802156f0 <__gedf2+0xd4>
802156e0:	283fec1e 	bne	r5,zero,80215694 <__reset+0xfa1f5694>
802156e4:	003ff406 	br	802156b8 <__reset+0xfa1f56b8>
802156e8:	313ff236 	bltu	r6,r4,802156b4 <__reset+0xfa1f56b4>
802156ec:	21bffc36 	bltu	r4,r6,802156e0 <__reset+0xfa1f56e0>
802156f0:	0005883a 	mov	r2,zero
802156f4:	f800283a 	ret

802156f8 <__ledf2>:
802156f8:	2804d53a 	srli	r2,r5,20
802156fc:	3810d53a 	srli	r8,r7,20
80215700:	00c00434 	movhi	r3,16
80215704:	18ffffc4 	addi	r3,r3,-1
80215708:	1081ffcc 	andi	r2,r2,2047
8021570c:	0241ffc4 	movi	r9,2047
80215710:	28d4703a 	and	r10,r5,r3
80215714:	4201ffcc 	andi	r8,r8,2047
80215718:	38c6703a 	and	r3,r7,r3
8021571c:	280ad7fa 	srli	r5,r5,31
80215720:	380ed7fa 	srli	r7,r7,31
80215724:	12401f26 	beq	r2,r9,802157a4 <__ledf2+0xac>
80215728:	0241ffc4 	movi	r9,2047
8021572c:	42401426 	beq	r8,r9,80215780 <__ledf2+0x88>
80215730:	1000091e 	bne	r2,zero,80215758 <__ledf2+0x60>
80215734:	2296b03a 	or	r11,r4,r10
80215738:	5813003a 	cmpeq	r9,r11,zero
8021573c:	29403fcc 	andi	r5,r5,255
80215740:	40000a1e 	bne	r8,zero,8021576c <__ledf2+0x74>
80215744:	30d8b03a 	or	r12,r6,r3
80215748:	6000081e 	bne	r12,zero,8021576c <__ledf2+0x74>
8021574c:	0005883a 	mov	r2,zero
80215750:	5800111e 	bne	r11,zero,80215798 <__ledf2+0xa0>
80215754:	f800283a 	ret
80215758:	29403fcc 	andi	r5,r5,255
8021575c:	40000c1e 	bne	r8,zero,80215790 <__ledf2+0x98>
80215760:	30d2b03a 	or	r9,r6,r3
80215764:	48000c26 	beq	r9,zero,80215798 <__ledf2+0xa0>
80215768:	0013883a 	mov	r9,zero
8021576c:	39c03fcc 	andi	r7,r7,255
80215770:	48000826 	beq	r9,zero,80215794 <__ledf2+0x9c>
80215774:	38001126 	beq	r7,zero,802157bc <__ledf2+0xc4>
80215778:	00800044 	movi	r2,1
8021577c:	f800283a 	ret
80215780:	30d2b03a 	or	r9,r6,r3
80215784:	483fea26 	beq	r9,zero,80215730 <__reset+0xfa1f5730>
80215788:	00800084 	movi	r2,2
8021578c:	f800283a 	ret
80215790:	39c03fcc 	andi	r7,r7,255
80215794:	39400726 	beq	r7,r5,802157b4 <__ledf2+0xbc>
80215798:	2800081e 	bne	r5,zero,802157bc <__ledf2+0xc4>
8021579c:	00800044 	movi	r2,1
802157a0:	f800283a 	ret
802157a4:	2292b03a 	or	r9,r4,r10
802157a8:	483fdf26 	beq	r9,zero,80215728 <__reset+0xfa1f5728>
802157ac:	00800084 	movi	r2,2
802157b0:	f800283a 	ret
802157b4:	4080030e 	bge	r8,r2,802157c4 <__ledf2+0xcc>
802157b8:	383fef26 	beq	r7,zero,80215778 <__reset+0xfa1f5778>
802157bc:	00bfffc4 	movi	r2,-1
802157c0:	f800283a 	ret
802157c4:	123feb16 	blt	r2,r8,80215774 <__reset+0xfa1f5774>
802157c8:	1abff336 	bltu	r3,r10,80215798 <__reset+0xfa1f5798>
802157cc:	50c00326 	beq	r10,r3,802157dc <__ledf2+0xe4>
802157d0:	50c0042e 	bgeu	r10,r3,802157e4 <__ledf2+0xec>
802157d4:	283fe81e 	bne	r5,zero,80215778 <__reset+0xfa1f5778>
802157d8:	003ff806 	br	802157bc <__reset+0xfa1f57bc>
802157dc:	313fee36 	bltu	r6,r4,80215798 <__reset+0xfa1f5798>
802157e0:	21bffc36 	bltu	r4,r6,802157d4 <__reset+0xfa1f57d4>
802157e4:	0005883a 	mov	r2,zero
802157e8:	f800283a 	ret

802157ec <__muldf3>:
802157ec:	defff304 	addi	sp,sp,-52
802157f0:	2804d53a 	srli	r2,r5,20
802157f4:	dd800915 	stw	r22,36(sp)
802157f8:	282cd7fa 	srli	r22,r5,31
802157fc:	dc000315 	stw	r16,12(sp)
80215800:	04000434 	movhi	r16,16
80215804:	dd400815 	stw	r21,32(sp)
80215808:	dc800515 	stw	r18,20(sp)
8021580c:	843fffc4 	addi	r16,r16,-1
80215810:	dfc00c15 	stw	ra,48(sp)
80215814:	df000b15 	stw	fp,44(sp)
80215818:	ddc00a15 	stw	r23,40(sp)
8021581c:	dd000715 	stw	r20,28(sp)
80215820:	dcc00615 	stw	r19,24(sp)
80215824:	dc400415 	stw	r17,16(sp)
80215828:	1481ffcc 	andi	r18,r2,2047
8021582c:	2c20703a 	and	r16,r5,r16
80215830:	b02b883a 	mov	r21,r22
80215834:	b2403fcc 	andi	r9,r22,255
80215838:	90006026 	beq	r18,zero,802159bc <__muldf3+0x1d0>
8021583c:	0081ffc4 	movi	r2,2047
80215840:	2029883a 	mov	r20,r4
80215844:	90803626 	beq	r18,r2,80215920 <__muldf3+0x134>
80215848:	80800434 	orhi	r2,r16,16
8021584c:	100490fa 	slli	r2,r2,3
80215850:	2020d77a 	srli	r16,r4,29
80215854:	202890fa 	slli	r20,r4,3
80215858:	94bf0044 	addi	r18,r18,-1023
8021585c:	80a0b03a 	or	r16,r16,r2
80215860:	0027883a 	mov	r19,zero
80215864:	0039883a 	mov	fp,zero
80215868:	3804d53a 	srli	r2,r7,20
8021586c:	382ed7fa 	srli	r23,r7,31
80215870:	04400434 	movhi	r17,16
80215874:	8c7fffc4 	addi	r17,r17,-1
80215878:	1081ffcc 	andi	r2,r2,2047
8021587c:	3011883a 	mov	r8,r6
80215880:	3c62703a 	and	r17,r7,r17
80215884:	ba803fcc 	andi	r10,r23,255
80215888:	10006d26 	beq	r2,zero,80215a40 <__muldf3+0x254>
8021588c:	00c1ffc4 	movi	r3,2047
80215890:	10c06526 	beq	r2,r3,80215a28 <__muldf3+0x23c>
80215894:	88c00434 	orhi	r3,r17,16
80215898:	180690fa 	slli	r3,r3,3
8021589c:	3022d77a 	srli	r17,r6,29
802158a0:	301090fa 	slli	r8,r6,3
802158a4:	10bf0044 	addi	r2,r2,-1023
802158a8:	88e2b03a 	or	r17,r17,r3
802158ac:	000b883a 	mov	r5,zero
802158b0:	9085883a 	add	r2,r18,r2
802158b4:	2cc8b03a 	or	r4,r5,r19
802158b8:	00c003c4 	movi	r3,15
802158bc:	bdacf03a 	xor	r22,r23,r22
802158c0:	12c00044 	addi	r11,r2,1
802158c4:	19009936 	bltu	r3,r4,80215b2c <__muldf3+0x340>
802158c8:	200890ba 	slli	r4,r4,2
802158cc:	00e00874 	movhi	r3,32801
802158d0:	18d63804 	addi	r3,r3,22752
802158d4:	20c9883a 	add	r4,r4,r3
802158d8:	20c00017 	ldw	r3,0(r4)
802158dc:	1800683a 	jmp	r3
802158e0:	80215b2c 	andhi	zero,r16,34156
802158e4:	80215940 	call	88021594 <__reset+0x2001594>
802158e8:	80215940 	call	88021594 <__reset+0x2001594>
802158ec:	8021593c 	xorhi	zero,r16,34148
802158f0:	80215b08 	cmpgei	zero,r16,-31380
802158f4:	80215b08 	cmpgei	zero,r16,-31380
802158f8:	80215af0 	cmpltui	zero,r16,34155
802158fc:	8021593c 	xorhi	zero,r16,34148
80215900:	80215b08 	cmpgei	zero,r16,-31380
80215904:	80215af0 	cmpltui	zero,r16,34155
80215908:	80215b08 	cmpgei	zero,r16,-31380
8021590c:	8021593c 	xorhi	zero,r16,34148
80215910:	80215b18 	cmpnei	zero,r16,-31380
80215914:	80215b18 	cmpnei	zero,r16,-31380
80215918:	80215b18 	cmpnei	zero,r16,-31380
8021591c:	80215d34 	orhi	zero,r16,34164
80215920:	2404b03a 	or	r2,r4,r16
80215924:	10006f1e 	bne	r2,zero,80215ae4 <__muldf3+0x2f8>
80215928:	04c00204 	movi	r19,8
8021592c:	0021883a 	mov	r16,zero
80215930:	0029883a 	mov	r20,zero
80215934:	07000084 	movi	fp,2
80215938:	003fcb06 	br	80215868 <__reset+0xfa1f5868>
8021593c:	502d883a 	mov	r22,r10
80215940:	00800084 	movi	r2,2
80215944:	28805726 	beq	r5,r2,80215aa4 <__muldf3+0x2b8>
80215948:	008000c4 	movi	r2,3
8021594c:	28816626 	beq	r5,r2,80215ee8 <__muldf3+0x6fc>
80215950:	00800044 	movi	r2,1
80215954:	2881411e 	bne	r5,r2,80215e5c <__muldf3+0x670>
80215958:	b02b883a 	mov	r21,r22
8021595c:	0005883a 	mov	r2,zero
80215960:	000b883a 	mov	r5,zero
80215964:	0029883a 	mov	r20,zero
80215968:	1004953a 	slli	r2,r2,20
8021596c:	a8c03fcc 	andi	r3,r21,255
80215970:	04400434 	movhi	r17,16
80215974:	8c7fffc4 	addi	r17,r17,-1
80215978:	180697fa 	slli	r3,r3,31
8021597c:	2c4a703a 	and	r5,r5,r17
80215980:	288ab03a 	or	r5,r5,r2
80215984:	28c6b03a 	or	r3,r5,r3
80215988:	a005883a 	mov	r2,r20
8021598c:	dfc00c17 	ldw	ra,48(sp)
80215990:	df000b17 	ldw	fp,44(sp)
80215994:	ddc00a17 	ldw	r23,40(sp)
80215998:	dd800917 	ldw	r22,36(sp)
8021599c:	dd400817 	ldw	r21,32(sp)
802159a0:	dd000717 	ldw	r20,28(sp)
802159a4:	dcc00617 	ldw	r19,24(sp)
802159a8:	dc800517 	ldw	r18,20(sp)
802159ac:	dc400417 	ldw	r17,16(sp)
802159b0:	dc000317 	ldw	r16,12(sp)
802159b4:	dec00d04 	addi	sp,sp,52
802159b8:	f800283a 	ret
802159bc:	2404b03a 	or	r2,r4,r16
802159c0:	2027883a 	mov	r19,r4
802159c4:	10004226 	beq	r2,zero,80215ad0 <__muldf3+0x2e4>
802159c8:	8000fc26 	beq	r16,zero,80215dbc <__muldf3+0x5d0>
802159cc:	8009883a 	mov	r4,r16
802159d0:	d9800215 	stw	r6,8(sp)
802159d4:	d9c00015 	stw	r7,0(sp)
802159d8:	da400115 	stw	r9,4(sp)
802159dc:	020693c0 	call	8020693c <__clzsi2>
802159e0:	d9800217 	ldw	r6,8(sp)
802159e4:	d9c00017 	ldw	r7,0(sp)
802159e8:	da400117 	ldw	r9,4(sp)
802159ec:	113ffd44 	addi	r4,r2,-11
802159f0:	00c00704 	movi	r3,28
802159f4:	1900ed16 	blt	r3,r4,80215dac <__muldf3+0x5c0>
802159f8:	00c00744 	movi	r3,29
802159fc:	147ffe04 	addi	r17,r2,-8
80215a00:	1907c83a 	sub	r3,r3,r4
80215a04:	8460983a 	sll	r16,r16,r17
80215a08:	98c6d83a 	srl	r3,r19,r3
80215a0c:	9c68983a 	sll	r20,r19,r17
80215a10:	1c20b03a 	or	r16,r3,r16
80215a14:	1080fcc4 	addi	r2,r2,1011
80215a18:	00a5c83a 	sub	r18,zero,r2
80215a1c:	0027883a 	mov	r19,zero
80215a20:	0039883a 	mov	fp,zero
80215a24:	003f9006 	br	80215868 <__reset+0xfa1f5868>
80215a28:	3446b03a 	or	r3,r6,r17
80215a2c:	1800261e 	bne	r3,zero,80215ac8 <__muldf3+0x2dc>
80215a30:	0023883a 	mov	r17,zero
80215a34:	0011883a 	mov	r8,zero
80215a38:	01400084 	movi	r5,2
80215a3c:	003f9c06 	br	802158b0 <__reset+0xfa1f58b0>
80215a40:	3446b03a 	or	r3,r6,r17
80215a44:	18001c26 	beq	r3,zero,80215ab8 <__muldf3+0x2cc>
80215a48:	8800ce26 	beq	r17,zero,80215d84 <__muldf3+0x598>
80215a4c:	8809883a 	mov	r4,r17
80215a50:	d9800215 	stw	r6,8(sp)
80215a54:	da400115 	stw	r9,4(sp)
80215a58:	da800015 	stw	r10,0(sp)
80215a5c:	020693c0 	call	8020693c <__clzsi2>
80215a60:	d9800217 	ldw	r6,8(sp)
80215a64:	da400117 	ldw	r9,4(sp)
80215a68:	da800017 	ldw	r10,0(sp)
80215a6c:	113ffd44 	addi	r4,r2,-11
80215a70:	00c00704 	movi	r3,28
80215a74:	1900bf16 	blt	r3,r4,80215d74 <__muldf3+0x588>
80215a78:	00c00744 	movi	r3,29
80215a7c:	123ffe04 	addi	r8,r2,-8
80215a80:	1907c83a 	sub	r3,r3,r4
80215a84:	8a22983a 	sll	r17,r17,r8
80215a88:	30c6d83a 	srl	r3,r6,r3
80215a8c:	3210983a 	sll	r8,r6,r8
80215a90:	1c62b03a 	or	r17,r3,r17
80215a94:	1080fcc4 	addi	r2,r2,1011
80215a98:	0085c83a 	sub	r2,zero,r2
80215a9c:	000b883a 	mov	r5,zero
80215aa0:	003f8306 	br	802158b0 <__reset+0xfa1f58b0>
80215aa4:	b02b883a 	mov	r21,r22
80215aa8:	0081ffc4 	movi	r2,2047
80215aac:	000b883a 	mov	r5,zero
80215ab0:	0029883a 	mov	r20,zero
80215ab4:	003fac06 	br	80215968 <__reset+0xfa1f5968>
80215ab8:	0023883a 	mov	r17,zero
80215abc:	0011883a 	mov	r8,zero
80215ac0:	01400044 	movi	r5,1
80215ac4:	003f7a06 	br	802158b0 <__reset+0xfa1f58b0>
80215ac8:	014000c4 	movi	r5,3
80215acc:	003f7806 	br	802158b0 <__reset+0xfa1f58b0>
80215ad0:	04c00104 	movi	r19,4
80215ad4:	0021883a 	mov	r16,zero
80215ad8:	0029883a 	mov	r20,zero
80215adc:	07000044 	movi	fp,1
80215ae0:	003f6106 	br	80215868 <__reset+0xfa1f5868>
80215ae4:	04c00304 	movi	r19,12
80215ae8:	070000c4 	movi	fp,3
80215aec:	003f5e06 	br	80215868 <__reset+0xfa1f5868>
80215af0:	01400434 	movhi	r5,16
80215af4:	002b883a 	mov	r21,zero
80215af8:	297fffc4 	addi	r5,r5,-1
80215afc:	053fffc4 	movi	r20,-1
80215b00:	0081ffc4 	movi	r2,2047
80215b04:	003f9806 	br	80215968 <__reset+0xfa1f5968>
80215b08:	8023883a 	mov	r17,r16
80215b0c:	a011883a 	mov	r8,r20
80215b10:	e00b883a 	mov	r5,fp
80215b14:	003f8a06 	br	80215940 <__reset+0xfa1f5940>
80215b18:	8023883a 	mov	r17,r16
80215b1c:	a011883a 	mov	r8,r20
80215b20:	482d883a 	mov	r22,r9
80215b24:	e00b883a 	mov	r5,fp
80215b28:	003f8506 	br	80215940 <__reset+0xfa1f5940>
80215b2c:	a00ad43a 	srli	r5,r20,16
80215b30:	401ad43a 	srli	r13,r8,16
80215b34:	a53fffcc 	andi	r20,r20,65535
80215b38:	423fffcc 	andi	r8,r8,65535
80215b3c:	4519383a 	mul	r12,r8,r20
80215b40:	4147383a 	mul	r3,r8,r5
80215b44:	6d09383a 	mul	r4,r13,r20
80215b48:	600cd43a 	srli	r6,r12,16
80215b4c:	2b5d383a 	mul	r14,r5,r13
80215b50:	20c9883a 	add	r4,r4,r3
80215b54:	310d883a 	add	r6,r6,r4
80215b58:	30c0022e 	bgeu	r6,r3,80215b64 <__muldf3+0x378>
80215b5c:	00c00074 	movhi	r3,1
80215b60:	70dd883a 	add	r14,r14,r3
80215b64:	8826d43a 	srli	r19,r17,16
80215b68:	8bffffcc 	andi	r15,r17,65535
80215b6c:	7d23383a 	mul	r17,r15,r20
80215b70:	7949383a 	mul	r4,r15,r5
80215b74:	9d29383a 	mul	r20,r19,r20
80215b78:	8814d43a 	srli	r10,r17,16
80215b7c:	3012943a 	slli	r9,r6,16
80215b80:	a129883a 	add	r20,r20,r4
80215b84:	633fffcc 	andi	r12,r12,65535
80215b88:	5515883a 	add	r10,r10,r20
80215b8c:	3006d43a 	srli	r3,r6,16
80215b90:	4b13883a 	add	r9,r9,r12
80215b94:	2ccb383a 	mul	r5,r5,r19
80215b98:	5100022e 	bgeu	r10,r4,80215ba4 <__muldf3+0x3b8>
80215b9c:	01000074 	movhi	r4,1
80215ba0:	290b883a 	add	r5,r5,r4
80215ba4:	802ad43a 	srli	r21,r16,16
80215ba8:	843fffcc 	andi	r16,r16,65535
80215bac:	440d383a 	mul	r6,r8,r16
80215bb0:	4565383a 	mul	r18,r8,r21
80215bb4:	8349383a 	mul	r4,r16,r13
80215bb8:	500e943a 	slli	r7,r10,16
80215bbc:	3010d43a 	srli	r8,r6,16
80215bc0:	5028d43a 	srli	r20,r10,16
80215bc4:	2489883a 	add	r4,r4,r18
80215bc8:	8abfffcc 	andi	r10,r17,65535
80215bcc:	3a95883a 	add	r10,r7,r10
80215bd0:	4119883a 	add	r12,r8,r4
80215bd4:	a169883a 	add	r20,r20,r5
80215bd8:	1a87883a 	add	r3,r3,r10
80215bdc:	6d5b383a 	mul	r13,r13,r21
80215be0:	6480022e 	bgeu	r12,r18,80215bec <__muldf3+0x400>
80215be4:	01000074 	movhi	r4,1
80215be8:	691b883a 	add	r13,r13,r4
80215bec:	7c25383a 	mul	r18,r15,r16
80215bf0:	7d4b383a 	mul	r5,r15,r21
80215bf4:	84cf383a 	mul	r7,r16,r19
80215bf8:	901ed43a 	srli	r15,r18,16
80215bfc:	6008d43a 	srli	r4,r12,16
80215c00:	6010943a 	slli	r8,r12,16
80215c04:	394f883a 	add	r7,r7,r5
80215c08:	333fffcc 	andi	r12,r6,65535
80215c0c:	79df883a 	add	r15,r15,r7
80215c10:	235b883a 	add	r13,r4,r13
80215c14:	9d63383a 	mul	r17,r19,r21
80215c18:	4309883a 	add	r4,r8,r12
80215c1c:	7940022e 	bgeu	r15,r5,80215c28 <__muldf3+0x43c>
80215c20:	01400074 	movhi	r5,1
80215c24:	8963883a 	add	r17,r17,r5
80215c28:	780a943a 	slli	r5,r15,16
80215c2c:	91bfffcc 	andi	r6,r18,65535
80215c30:	70c7883a 	add	r3,r14,r3
80215c34:	298d883a 	add	r6,r5,r6
80215c38:	1a8f803a 	cmpltu	r7,r3,r10
80215c3c:	350b883a 	add	r5,r6,r20
80215c40:	20c7883a 	add	r3,r4,r3
80215c44:	3955883a 	add	r10,r7,r5
80215c48:	1909803a 	cmpltu	r4,r3,r4
80215c4c:	6a91883a 	add	r8,r13,r10
80215c50:	780cd43a 	srli	r6,r15,16
80215c54:	2219883a 	add	r12,r4,r8
80215c58:	2d0b803a 	cmpltu	r5,r5,r20
80215c5c:	51cf803a 	cmpltu	r7,r10,r7
80215c60:	29ceb03a 	or	r7,r5,r7
80215c64:	4351803a 	cmpltu	r8,r8,r13
80215c68:	610b803a 	cmpltu	r5,r12,r4
80215c6c:	4148b03a 	or	r4,r8,r5
80215c70:	398f883a 	add	r7,r7,r6
80215c74:	3909883a 	add	r4,r7,r4
80215c78:	1810927a 	slli	r8,r3,9
80215c7c:	2449883a 	add	r4,r4,r17
80215c80:	2008927a 	slli	r4,r4,9
80215c84:	6022d5fa 	srli	r17,r12,23
80215c88:	1806d5fa 	srli	r3,r3,23
80215c8c:	4252b03a 	or	r9,r8,r9
80215c90:	600a927a 	slli	r5,r12,9
80215c94:	4810c03a 	cmpne	r8,r9,zero
80215c98:	2462b03a 	or	r17,r4,r17
80215c9c:	40c6b03a 	or	r3,r8,r3
80215ca0:	8900402c 	andhi	r4,r17,256
80215ca4:	1950b03a 	or	r8,r3,r5
80215ca8:	20000726 	beq	r4,zero,80215cc8 <__muldf3+0x4dc>
80215cac:	4006d07a 	srli	r3,r8,1
80215cb0:	880497fa 	slli	r2,r17,31
80215cb4:	4200004c 	andi	r8,r8,1
80215cb8:	8822d07a 	srli	r17,r17,1
80215cbc:	1a10b03a 	or	r8,r3,r8
80215cc0:	1210b03a 	or	r8,r2,r8
80215cc4:	5805883a 	mov	r2,r11
80215cc8:	1140ffc4 	addi	r5,r2,1023
80215ccc:	0140440e 	bge	zero,r5,80215de0 <__muldf3+0x5f4>
80215cd0:	40c001cc 	andi	r3,r8,7
80215cd4:	18000726 	beq	r3,zero,80215cf4 <__muldf3+0x508>
80215cd8:	40c003cc 	andi	r3,r8,15
80215cdc:	01000104 	movi	r4,4
80215ce0:	19000426 	beq	r3,r4,80215cf4 <__muldf3+0x508>
80215ce4:	4107883a 	add	r3,r8,r4
80215ce8:	1a11803a 	cmpltu	r8,r3,r8
80215cec:	8a23883a 	add	r17,r17,r8
80215cf0:	1811883a 	mov	r8,r3
80215cf4:	88c0402c 	andhi	r3,r17,256
80215cf8:	18000426 	beq	r3,zero,80215d0c <__muldf3+0x520>
80215cfc:	11410004 	addi	r5,r2,1024
80215d00:	00bfc034 	movhi	r2,65280
80215d04:	10bfffc4 	addi	r2,r2,-1
80215d08:	88a2703a 	and	r17,r17,r2
80215d0c:	0081ff84 	movi	r2,2046
80215d10:	117f6416 	blt	r2,r5,80215aa4 <__reset+0xfa1f5aa4>
80215d14:	8828977a 	slli	r20,r17,29
80215d18:	4010d0fa 	srli	r8,r8,3
80215d1c:	8822927a 	slli	r17,r17,9
80215d20:	2881ffcc 	andi	r2,r5,2047
80215d24:	a228b03a 	or	r20,r20,r8
80215d28:	880ad33a 	srli	r5,r17,12
80215d2c:	b02b883a 	mov	r21,r22
80215d30:	003f0d06 	br	80215968 <__reset+0xfa1f5968>
80215d34:	8080022c 	andhi	r2,r16,8
80215d38:	10000926 	beq	r2,zero,80215d60 <__muldf3+0x574>
80215d3c:	8880022c 	andhi	r2,r17,8
80215d40:	1000071e 	bne	r2,zero,80215d60 <__muldf3+0x574>
80215d44:	00800434 	movhi	r2,16
80215d48:	89400234 	orhi	r5,r17,8
80215d4c:	10bfffc4 	addi	r2,r2,-1
80215d50:	b82b883a 	mov	r21,r23
80215d54:	288a703a 	and	r5,r5,r2
80215d58:	4029883a 	mov	r20,r8
80215d5c:	003f6806 	br	80215b00 <__reset+0xfa1f5b00>
80215d60:	00800434 	movhi	r2,16
80215d64:	81400234 	orhi	r5,r16,8
80215d68:	10bfffc4 	addi	r2,r2,-1
80215d6c:	288a703a 	and	r5,r5,r2
80215d70:	003f6306 	br	80215b00 <__reset+0xfa1f5b00>
80215d74:	147ff604 	addi	r17,r2,-40
80215d78:	3462983a 	sll	r17,r6,r17
80215d7c:	0011883a 	mov	r8,zero
80215d80:	003f4406 	br	80215a94 <__reset+0xfa1f5a94>
80215d84:	3009883a 	mov	r4,r6
80215d88:	d9800215 	stw	r6,8(sp)
80215d8c:	da400115 	stw	r9,4(sp)
80215d90:	da800015 	stw	r10,0(sp)
80215d94:	020693c0 	call	8020693c <__clzsi2>
80215d98:	10800804 	addi	r2,r2,32
80215d9c:	da800017 	ldw	r10,0(sp)
80215da0:	da400117 	ldw	r9,4(sp)
80215da4:	d9800217 	ldw	r6,8(sp)
80215da8:	003f3006 	br	80215a6c <__reset+0xfa1f5a6c>
80215dac:	143ff604 	addi	r16,r2,-40
80215db0:	9c20983a 	sll	r16,r19,r16
80215db4:	0029883a 	mov	r20,zero
80215db8:	003f1606 	br	80215a14 <__reset+0xfa1f5a14>
80215dbc:	d9800215 	stw	r6,8(sp)
80215dc0:	d9c00015 	stw	r7,0(sp)
80215dc4:	da400115 	stw	r9,4(sp)
80215dc8:	020693c0 	call	8020693c <__clzsi2>
80215dcc:	10800804 	addi	r2,r2,32
80215dd0:	da400117 	ldw	r9,4(sp)
80215dd4:	d9c00017 	ldw	r7,0(sp)
80215dd8:	d9800217 	ldw	r6,8(sp)
80215ddc:	003f0306 	br	802159ec <__reset+0xfa1f59ec>
80215de0:	00c00044 	movi	r3,1
80215de4:	1947c83a 	sub	r3,r3,r5
80215de8:	00800e04 	movi	r2,56
80215dec:	10feda16 	blt	r2,r3,80215958 <__reset+0xfa1f5958>
80215df0:	008007c4 	movi	r2,31
80215df4:	10c01b16 	blt	r2,r3,80215e64 <__muldf3+0x678>
80215df8:	00800804 	movi	r2,32
80215dfc:	10c5c83a 	sub	r2,r2,r3
80215e00:	888a983a 	sll	r5,r17,r2
80215e04:	40c8d83a 	srl	r4,r8,r3
80215e08:	4084983a 	sll	r2,r8,r2
80215e0c:	88e2d83a 	srl	r17,r17,r3
80215e10:	2906b03a 	or	r3,r5,r4
80215e14:	1004c03a 	cmpne	r2,r2,zero
80215e18:	1886b03a 	or	r3,r3,r2
80215e1c:	188001cc 	andi	r2,r3,7
80215e20:	10000726 	beq	r2,zero,80215e40 <__muldf3+0x654>
80215e24:	188003cc 	andi	r2,r3,15
80215e28:	01000104 	movi	r4,4
80215e2c:	11000426 	beq	r2,r4,80215e40 <__muldf3+0x654>
80215e30:	1805883a 	mov	r2,r3
80215e34:	10c00104 	addi	r3,r2,4
80215e38:	1885803a 	cmpltu	r2,r3,r2
80215e3c:	88a3883a 	add	r17,r17,r2
80215e40:	8880202c 	andhi	r2,r17,128
80215e44:	10001c26 	beq	r2,zero,80215eb8 <__muldf3+0x6cc>
80215e48:	b02b883a 	mov	r21,r22
80215e4c:	00800044 	movi	r2,1
80215e50:	000b883a 	mov	r5,zero
80215e54:	0029883a 	mov	r20,zero
80215e58:	003ec306 	br	80215968 <__reset+0xfa1f5968>
80215e5c:	5805883a 	mov	r2,r11
80215e60:	003f9906 	br	80215cc8 <__reset+0xfa1f5cc8>
80215e64:	00bff844 	movi	r2,-31
80215e68:	1145c83a 	sub	r2,r2,r5
80215e6c:	8888d83a 	srl	r4,r17,r2
80215e70:	00800804 	movi	r2,32
80215e74:	18801a26 	beq	r3,r2,80215ee0 <__muldf3+0x6f4>
80215e78:	00801004 	movi	r2,64
80215e7c:	10c5c83a 	sub	r2,r2,r3
80215e80:	8884983a 	sll	r2,r17,r2
80215e84:	1204b03a 	or	r2,r2,r8
80215e88:	1004c03a 	cmpne	r2,r2,zero
80215e8c:	2084b03a 	or	r2,r4,r2
80215e90:	144001cc 	andi	r17,r2,7
80215e94:	88000d1e 	bne	r17,zero,80215ecc <__muldf3+0x6e0>
80215e98:	000b883a 	mov	r5,zero
80215e9c:	1028d0fa 	srli	r20,r2,3
80215ea0:	b02b883a 	mov	r21,r22
80215ea4:	0005883a 	mov	r2,zero
80215ea8:	a468b03a 	or	r20,r20,r17
80215eac:	003eae06 	br	80215968 <__reset+0xfa1f5968>
80215eb0:	1007883a 	mov	r3,r2
80215eb4:	0023883a 	mov	r17,zero
80215eb8:	880a927a 	slli	r5,r17,9
80215ebc:	1805883a 	mov	r2,r3
80215ec0:	8822977a 	slli	r17,r17,29
80215ec4:	280ad33a 	srli	r5,r5,12
80215ec8:	003ff406 	br	80215e9c <__reset+0xfa1f5e9c>
80215ecc:	10c003cc 	andi	r3,r2,15
80215ed0:	01000104 	movi	r4,4
80215ed4:	193ff626 	beq	r3,r4,80215eb0 <__reset+0xfa1f5eb0>
80215ed8:	0023883a 	mov	r17,zero
80215edc:	003fd506 	br	80215e34 <__reset+0xfa1f5e34>
80215ee0:	0005883a 	mov	r2,zero
80215ee4:	003fe706 	br	80215e84 <__reset+0xfa1f5e84>
80215ee8:	00800434 	movhi	r2,16
80215eec:	89400234 	orhi	r5,r17,8
80215ef0:	10bfffc4 	addi	r2,r2,-1
80215ef4:	b02b883a 	mov	r21,r22
80215ef8:	288a703a 	and	r5,r5,r2
80215efc:	4029883a 	mov	r20,r8
80215f00:	003eff06 	br	80215b00 <__reset+0xfa1f5b00>

80215f04 <__subdf3>:
80215f04:	02000434 	movhi	r8,16
80215f08:	423fffc4 	addi	r8,r8,-1
80215f0c:	defffb04 	addi	sp,sp,-20
80215f10:	2a14703a 	and	r10,r5,r8
80215f14:	3812d53a 	srli	r9,r7,20
80215f18:	3a10703a 	and	r8,r7,r8
80215f1c:	2006d77a 	srli	r3,r4,29
80215f20:	3004d77a 	srli	r2,r6,29
80215f24:	dc000015 	stw	r16,0(sp)
80215f28:	501490fa 	slli	r10,r10,3
80215f2c:	2820d53a 	srli	r16,r5,20
80215f30:	401090fa 	slli	r8,r8,3
80215f34:	dc800215 	stw	r18,8(sp)
80215f38:	dc400115 	stw	r17,4(sp)
80215f3c:	dfc00415 	stw	ra,16(sp)
80215f40:	202290fa 	slli	r17,r4,3
80215f44:	dcc00315 	stw	r19,12(sp)
80215f48:	4a41ffcc 	andi	r9,r9,2047
80215f4c:	0101ffc4 	movi	r4,2047
80215f50:	2824d7fa 	srli	r18,r5,31
80215f54:	8401ffcc 	andi	r16,r16,2047
80215f58:	50c6b03a 	or	r3,r10,r3
80215f5c:	380ed7fa 	srli	r7,r7,31
80215f60:	408ab03a 	or	r5,r8,r2
80215f64:	300c90fa 	slli	r6,r6,3
80215f68:	49009626 	beq	r9,r4,802161c4 <__subdf3+0x2c0>
80215f6c:	39c0005c 	xori	r7,r7,1
80215f70:	8245c83a 	sub	r2,r16,r9
80215f74:	3c807426 	beq	r7,r18,80216148 <__subdf3+0x244>
80215f78:	0080af0e 	bge	zero,r2,80216238 <__subdf3+0x334>
80215f7c:	48002a1e 	bne	r9,zero,80216028 <__subdf3+0x124>
80215f80:	2988b03a 	or	r4,r5,r6
80215f84:	20009a1e 	bne	r4,zero,802161f0 <__subdf3+0x2ec>
80215f88:	888001cc 	andi	r2,r17,7
80215f8c:	10000726 	beq	r2,zero,80215fac <__subdf3+0xa8>
80215f90:	888003cc 	andi	r2,r17,15
80215f94:	01000104 	movi	r4,4
80215f98:	11000426 	beq	r2,r4,80215fac <__subdf3+0xa8>
80215f9c:	890b883a 	add	r5,r17,r4
80215fa0:	2c63803a 	cmpltu	r17,r5,r17
80215fa4:	1c47883a 	add	r3,r3,r17
80215fa8:	2823883a 	mov	r17,r5
80215fac:	1880202c 	andhi	r2,r3,128
80215fb0:	10005926 	beq	r2,zero,80216118 <__subdf3+0x214>
80215fb4:	84000044 	addi	r16,r16,1
80215fb8:	0081ffc4 	movi	r2,2047
80215fbc:	8080be26 	beq	r16,r2,802162b8 <__subdf3+0x3b4>
80215fc0:	017fe034 	movhi	r5,65408
80215fc4:	297fffc4 	addi	r5,r5,-1
80215fc8:	1946703a 	and	r3,r3,r5
80215fcc:	1804977a 	slli	r2,r3,29
80215fd0:	1806927a 	slli	r3,r3,9
80215fd4:	8822d0fa 	srli	r17,r17,3
80215fd8:	8401ffcc 	andi	r16,r16,2047
80215fdc:	180ad33a 	srli	r5,r3,12
80215fe0:	9100004c 	andi	r4,r18,1
80215fe4:	1444b03a 	or	r2,r2,r17
80215fe8:	80c1ffcc 	andi	r3,r16,2047
80215fec:	1820953a 	slli	r16,r3,20
80215ff0:	20c03fcc 	andi	r3,r4,255
80215ff4:	180897fa 	slli	r4,r3,31
80215ff8:	00c00434 	movhi	r3,16
80215ffc:	18ffffc4 	addi	r3,r3,-1
80216000:	28c6703a 	and	r3,r5,r3
80216004:	1c06b03a 	or	r3,r3,r16
80216008:	1906b03a 	or	r3,r3,r4
8021600c:	dfc00417 	ldw	ra,16(sp)
80216010:	dcc00317 	ldw	r19,12(sp)
80216014:	dc800217 	ldw	r18,8(sp)
80216018:	dc400117 	ldw	r17,4(sp)
8021601c:	dc000017 	ldw	r16,0(sp)
80216020:	dec00504 	addi	sp,sp,20
80216024:	f800283a 	ret
80216028:	0101ffc4 	movi	r4,2047
8021602c:	813fd626 	beq	r16,r4,80215f88 <__reset+0xfa1f5f88>
80216030:	29402034 	orhi	r5,r5,128
80216034:	01000e04 	movi	r4,56
80216038:	2080a316 	blt	r4,r2,802162c8 <__subdf3+0x3c4>
8021603c:	010007c4 	movi	r4,31
80216040:	2080c616 	blt	r4,r2,8021635c <__subdf3+0x458>
80216044:	01000804 	movi	r4,32
80216048:	2089c83a 	sub	r4,r4,r2
8021604c:	2910983a 	sll	r8,r5,r4
80216050:	308ed83a 	srl	r7,r6,r2
80216054:	3108983a 	sll	r4,r6,r4
80216058:	2884d83a 	srl	r2,r5,r2
8021605c:	41ccb03a 	or	r6,r8,r7
80216060:	2008c03a 	cmpne	r4,r4,zero
80216064:	310cb03a 	or	r6,r6,r4
80216068:	898dc83a 	sub	r6,r17,r6
8021606c:	89a3803a 	cmpltu	r17,r17,r6
80216070:	1887c83a 	sub	r3,r3,r2
80216074:	1c47c83a 	sub	r3,r3,r17
80216078:	3023883a 	mov	r17,r6
8021607c:	1880202c 	andhi	r2,r3,128
80216080:	10002326 	beq	r2,zero,80216110 <__subdf3+0x20c>
80216084:	04c02034 	movhi	r19,128
80216088:	9cffffc4 	addi	r19,r19,-1
8021608c:	1ce6703a 	and	r19,r3,r19
80216090:	98007a26 	beq	r19,zero,8021627c <__subdf3+0x378>
80216094:	9809883a 	mov	r4,r19
80216098:	020693c0 	call	8020693c <__clzsi2>
8021609c:	113ffe04 	addi	r4,r2,-8
802160a0:	00c007c4 	movi	r3,31
802160a4:	19007b16 	blt	r3,r4,80216294 <__subdf3+0x390>
802160a8:	00800804 	movi	r2,32
802160ac:	1105c83a 	sub	r2,r2,r4
802160b0:	8884d83a 	srl	r2,r17,r2
802160b4:	9906983a 	sll	r3,r19,r4
802160b8:	8922983a 	sll	r17,r17,r4
802160bc:	10c4b03a 	or	r2,r2,r3
802160c0:	24007816 	blt	r4,r16,802162a4 <__subdf3+0x3a0>
802160c4:	2421c83a 	sub	r16,r4,r16
802160c8:	80c00044 	addi	r3,r16,1
802160cc:	010007c4 	movi	r4,31
802160d0:	20c09516 	blt	r4,r3,80216328 <__subdf3+0x424>
802160d4:	01400804 	movi	r5,32
802160d8:	28cbc83a 	sub	r5,r5,r3
802160dc:	88c8d83a 	srl	r4,r17,r3
802160e0:	8962983a 	sll	r17,r17,r5
802160e4:	114a983a 	sll	r5,r2,r5
802160e8:	10c6d83a 	srl	r3,r2,r3
802160ec:	8804c03a 	cmpne	r2,r17,zero
802160f0:	290ab03a 	or	r5,r5,r4
802160f4:	28a2b03a 	or	r17,r5,r2
802160f8:	0021883a 	mov	r16,zero
802160fc:	003fa206 	br	80215f88 <__reset+0xfa1f5f88>
80216100:	2090b03a 	or	r8,r4,r2
80216104:	40018e26 	beq	r8,zero,80216740 <__subdf3+0x83c>
80216108:	1007883a 	mov	r3,r2
8021610c:	2023883a 	mov	r17,r4
80216110:	888001cc 	andi	r2,r17,7
80216114:	103f9e1e 	bne	r2,zero,80215f90 <__reset+0xfa1f5f90>
80216118:	1804977a 	slli	r2,r3,29
8021611c:	8822d0fa 	srli	r17,r17,3
80216120:	1810d0fa 	srli	r8,r3,3
80216124:	9100004c 	andi	r4,r18,1
80216128:	1444b03a 	or	r2,r2,r17
8021612c:	00c1ffc4 	movi	r3,2047
80216130:	80c02826 	beq	r16,r3,802161d4 <__subdf3+0x2d0>
80216134:	01400434 	movhi	r5,16
80216138:	297fffc4 	addi	r5,r5,-1
8021613c:	80e0703a 	and	r16,r16,r3
80216140:	414a703a 	and	r5,r8,r5
80216144:	003fa806 	br	80215fe8 <__reset+0xfa1f5fe8>
80216148:	0080630e 	bge	zero,r2,802162d8 <__subdf3+0x3d4>
8021614c:	48003026 	beq	r9,zero,80216210 <__subdf3+0x30c>
80216150:	0101ffc4 	movi	r4,2047
80216154:	813f8c26 	beq	r16,r4,80215f88 <__reset+0xfa1f5f88>
80216158:	29402034 	orhi	r5,r5,128
8021615c:	01000e04 	movi	r4,56
80216160:	2080a90e 	bge	r4,r2,80216408 <__subdf3+0x504>
80216164:	298cb03a 	or	r6,r5,r6
80216168:	3012c03a 	cmpne	r9,r6,zero
8021616c:	0005883a 	mov	r2,zero
80216170:	4c53883a 	add	r9,r9,r17
80216174:	4c63803a 	cmpltu	r17,r9,r17
80216178:	10c7883a 	add	r3,r2,r3
8021617c:	88c7883a 	add	r3,r17,r3
80216180:	4823883a 	mov	r17,r9
80216184:	1880202c 	andhi	r2,r3,128
80216188:	1000d026 	beq	r2,zero,802164cc <__subdf3+0x5c8>
8021618c:	84000044 	addi	r16,r16,1
80216190:	0081ffc4 	movi	r2,2047
80216194:	8080fe26 	beq	r16,r2,80216590 <__subdf3+0x68c>
80216198:	00bfe034 	movhi	r2,65408
8021619c:	10bfffc4 	addi	r2,r2,-1
802161a0:	1886703a 	and	r3,r3,r2
802161a4:	880ad07a 	srli	r5,r17,1
802161a8:	180497fa 	slli	r2,r3,31
802161ac:	8900004c 	andi	r4,r17,1
802161b0:	2922b03a 	or	r17,r5,r4
802161b4:	1806d07a 	srli	r3,r3,1
802161b8:	1462b03a 	or	r17,r2,r17
802161bc:	3825883a 	mov	r18,r7
802161c0:	003f7106 	br	80215f88 <__reset+0xfa1f5f88>
802161c4:	2984b03a 	or	r2,r5,r6
802161c8:	103f6826 	beq	r2,zero,80215f6c <__reset+0xfa1f5f6c>
802161cc:	39c03fcc 	andi	r7,r7,255
802161d0:	003f6706 	br	80215f70 <__reset+0xfa1f5f70>
802161d4:	4086b03a 	or	r3,r8,r2
802161d8:	18015226 	beq	r3,zero,80216724 <__subdf3+0x820>
802161dc:	00c00434 	movhi	r3,16
802161e0:	41400234 	orhi	r5,r8,8
802161e4:	18ffffc4 	addi	r3,r3,-1
802161e8:	28ca703a 	and	r5,r5,r3
802161ec:	003f7e06 	br	80215fe8 <__reset+0xfa1f5fe8>
802161f0:	10bfffc4 	addi	r2,r2,-1
802161f4:	1000491e 	bne	r2,zero,8021631c <__subdf3+0x418>
802161f8:	898fc83a 	sub	r7,r17,r6
802161fc:	89e3803a 	cmpltu	r17,r17,r7
80216200:	1947c83a 	sub	r3,r3,r5
80216204:	1c47c83a 	sub	r3,r3,r17
80216208:	3823883a 	mov	r17,r7
8021620c:	003f9b06 	br	8021607c <__reset+0xfa1f607c>
80216210:	2988b03a 	or	r4,r5,r6
80216214:	203f5c26 	beq	r4,zero,80215f88 <__reset+0xfa1f5f88>
80216218:	10bfffc4 	addi	r2,r2,-1
8021621c:	1000931e 	bne	r2,zero,8021646c <__subdf3+0x568>
80216220:	898d883a 	add	r6,r17,r6
80216224:	3463803a 	cmpltu	r17,r6,r17
80216228:	1947883a 	add	r3,r3,r5
8021622c:	88c7883a 	add	r3,r17,r3
80216230:	3023883a 	mov	r17,r6
80216234:	003fd306 	br	80216184 <__reset+0xfa1f6184>
80216238:	1000541e 	bne	r2,zero,8021638c <__subdf3+0x488>
8021623c:	80800044 	addi	r2,r16,1
80216240:	1081ffcc 	andi	r2,r2,2047
80216244:	01000044 	movi	r4,1
80216248:	2080a20e 	bge	r4,r2,802164d4 <__subdf3+0x5d0>
8021624c:	8989c83a 	sub	r4,r17,r6
80216250:	8905803a 	cmpltu	r2,r17,r4
80216254:	1967c83a 	sub	r19,r3,r5
80216258:	98a7c83a 	sub	r19,r19,r2
8021625c:	9880202c 	andhi	r2,r19,128
80216260:	10006326 	beq	r2,zero,802163f0 <__subdf3+0x4ec>
80216264:	3463c83a 	sub	r17,r6,r17
80216268:	28c7c83a 	sub	r3,r5,r3
8021626c:	344d803a 	cmpltu	r6,r6,r17
80216270:	19a7c83a 	sub	r19,r3,r6
80216274:	3825883a 	mov	r18,r7
80216278:	983f861e 	bne	r19,zero,80216094 <__reset+0xfa1f6094>
8021627c:	8809883a 	mov	r4,r17
80216280:	020693c0 	call	8020693c <__clzsi2>
80216284:	10800804 	addi	r2,r2,32
80216288:	113ffe04 	addi	r4,r2,-8
8021628c:	00c007c4 	movi	r3,31
80216290:	193f850e 	bge	r3,r4,802160a8 <__reset+0xfa1f60a8>
80216294:	10bff604 	addi	r2,r2,-40
80216298:	8884983a 	sll	r2,r17,r2
8021629c:	0023883a 	mov	r17,zero
802162a0:	243f880e 	bge	r4,r16,802160c4 <__reset+0xfa1f60c4>
802162a4:	00ffe034 	movhi	r3,65408
802162a8:	18ffffc4 	addi	r3,r3,-1
802162ac:	8121c83a 	sub	r16,r16,r4
802162b0:	10c6703a 	and	r3,r2,r3
802162b4:	003f3406 	br	80215f88 <__reset+0xfa1f5f88>
802162b8:	9100004c 	andi	r4,r18,1
802162bc:	000b883a 	mov	r5,zero
802162c0:	0005883a 	mov	r2,zero
802162c4:	003f4806 	br	80215fe8 <__reset+0xfa1f5fe8>
802162c8:	298cb03a 	or	r6,r5,r6
802162cc:	300cc03a 	cmpne	r6,r6,zero
802162d0:	0005883a 	mov	r2,zero
802162d4:	003f6406 	br	80216068 <__reset+0xfa1f6068>
802162d8:	10009a1e 	bne	r2,zero,80216544 <__subdf3+0x640>
802162dc:	82400044 	addi	r9,r16,1
802162e0:	4881ffcc 	andi	r2,r9,2047
802162e4:	02800044 	movi	r10,1
802162e8:	5080670e 	bge	r10,r2,80216488 <__subdf3+0x584>
802162ec:	0081ffc4 	movi	r2,2047
802162f0:	4880af26 	beq	r9,r2,802165b0 <__subdf3+0x6ac>
802162f4:	898d883a 	add	r6,r17,r6
802162f8:	1945883a 	add	r2,r3,r5
802162fc:	3447803a 	cmpltu	r3,r6,r17
80216300:	1887883a 	add	r3,r3,r2
80216304:	182297fa 	slli	r17,r3,31
80216308:	300cd07a 	srli	r6,r6,1
8021630c:	1806d07a 	srli	r3,r3,1
80216310:	4821883a 	mov	r16,r9
80216314:	89a2b03a 	or	r17,r17,r6
80216318:	003f1b06 	br	80215f88 <__reset+0xfa1f5f88>
8021631c:	0101ffc4 	movi	r4,2047
80216320:	813f441e 	bne	r16,r4,80216034 <__reset+0xfa1f6034>
80216324:	003f1806 	br	80215f88 <__reset+0xfa1f5f88>
80216328:	843ff844 	addi	r16,r16,-31
8021632c:	01400804 	movi	r5,32
80216330:	1408d83a 	srl	r4,r2,r16
80216334:	19405026 	beq	r3,r5,80216478 <__subdf3+0x574>
80216338:	01401004 	movi	r5,64
8021633c:	28c7c83a 	sub	r3,r5,r3
80216340:	10c4983a 	sll	r2,r2,r3
80216344:	88a2b03a 	or	r17,r17,r2
80216348:	8822c03a 	cmpne	r17,r17,zero
8021634c:	2462b03a 	or	r17,r4,r17
80216350:	0007883a 	mov	r3,zero
80216354:	0021883a 	mov	r16,zero
80216358:	003f6d06 	br	80216110 <__reset+0xfa1f6110>
8021635c:	11fff804 	addi	r7,r2,-32
80216360:	01000804 	movi	r4,32
80216364:	29ced83a 	srl	r7,r5,r7
80216368:	11004526 	beq	r2,r4,80216480 <__subdf3+0x57c>
8021636c:	01001004 	movi	r4,64
80216370:	2089c83a 	sub	r4,r4,r2
80216374:	2904983a 	sll	r2,r5,r4
80216378:	118cb03a 	or	r6,r2,r6
8021637c:	300cc03a 	cmpne	r6,r6,zero
80216380:	398cb03a 	or	r6,r7,r6
80216384:	0005883a 	mov	r2,zero
80216388:	003f3706 	br	80216068 <__reset+0xfa1f6068>
8021638c:	80002a26 	beq	r16,zero,80216438 <__subdf3+0x534>
80216390:	0101ffc4 	movi	r4,2047
80216394:	49006626 	beq	r9,r4,80216530 <__subdf3+0x62c>
80216398:	0085c83a 	sub	r2,zero,r2
8021639c:	18c02034 	orhi	r3,r3,128
802163a0:	01000e04 	movi	r4,56
802163a4:	20807e16 	blt	r4,r2,802165a0 <__subdf3+0x69c>
802163a8:	010007c4 	movi	r4,31
802163ac:	2080e716 	blt	r4,r2,8021674c <__subdf3+0x848>
802163b0:	01000804 	movi	r4,32
802163b4:	2089c83a 	sub	r4,r4,r2
802163b8:	1914983a 	sll	r10,r3,r4
802163bc:	8890d83a 	srl	r8,r17,r2
802163c0:	8908983a 	sll	r4,r17,r4
802163c4:	1884d83a 	srl	r2,r3,r2
802163c8:	5222b03a 	or	r17,r10,r8
802163cc:	2006c03a 	cmpne	r3,r4,zero
802163d0:	88e2b03a 	or	r17,r17,r3
802163d4:	3463c83a 	sub	r17,r6,r17
802163d8:	2885c83a 	sub	r2,r5,r2
802163dc:	344d803a 	cmpltu	r6,r6,r17
802163e0:	1187c83a 	sub	r3,r2,r6
802163e4:	4821883a 	mov	r16,r9
802163e8:	3825883a 	mov	r18,r7
802163ec:	003f2306 	br	8021607c <__reset+0xfa1f607c>
802163f0:	24d0b03a 	or	r8,r4,r19
802163f4:	40001b1e 	bne	r8,zero,80216464 <__subdf3+0x560>
802163f8:	0005883a 	mov	r2,zero
802163fc:	0009883a 	mov	r4,zero
80216400:	0021883a 	mov	r16,zero
80216404:	003f4906 	br	8021612c <__reset+0xfa1f612c>
80216408:	010007c4 	movi	r4,31
8021640c:	20803a16 	blt	r4,r2,802164f8 <__subdf3+0x5f4>
80216410:	01000804 	movi	r4,32
80216414:	2089c83a 	sub	r4,r4,r2
80216418:	2912983a 	sll	r9,r5,r4
8021641c:	3090d83a 	srl	r8,r6,r2
80216420:	3108983a 	sll	r4,r6,r4
80216424:	2884d83a 	srl	r2,r5,r2
80216428:	4a12b03a 	or	r9,r9,r8
8021642c:	2008c03a 	cmpne	r4,r4,zero
80216430:	4912b03a 	or	r9,r9,r4
80216434:	003f4e06 	br	80216170 <__reset+0xfa1f6170>
80216438:	1c48b03a 	or	r4,r3,r17
8021643c:	20003c26 	beq	r4,zero,80216530 <__subdf3+0x62c>
80216440:	0084303a 	nor	r2,zero,r2
80216444:	1000381e 	bne	r2,zero,80216528 <__subdf3+0x624>
80216448:	3463c83a 	sub	r17,r6,r17
8021644c:	28c5c83a 	sub	r2,r5,r3
80216450:	344d803a 	cmpltu	r6,r6,r17
80216454:	1187c83a 	sub	r3,r2,r6
80216458:	4821883a 	mov	r16,r9
8021645c:	3825883a 	mov	r18,r7
80216460:	003f0606 	br	8021607c <__reset+0xfa1f607c>
80216464:	2023883a 	mov	r17,r4
80216468:	003f0906 	br	80216090 <__reset+0xfa1f6090>
8021646c:	0101ffc4 	movi	r4,2047
80216470:	813f3a1e 	bne	r16,r4,8021615c <__reset+0xfa1f615c>
80216474:	003ec406 	br	80215f88 <__reset+0xfa1f5f88>
80216478:	0005883a 	mov	r2,zero
8021647c:	003fb106 	br	80216344 <__reset+0xfa1f6344>
80216480:	0005883a 	mov	r2,zero
80216484:	003fbc06 	br	80216378 <__reset+0xfa1f6378>
80216488:	1c44b03a 	or	r2,r3,r17
8021648c:	80008e1e 	bne	r16,zero,802166c8 <__subdf3+0x7c4>
80216490:	1000c826 	beq	r2,zero,802167b4 <__subdf3+0x8b0>
80216494:	2984b03a 	or	r2,r5,r6
80216498:	103ebb26 	beq	r2,zero,80215f88 <__reset+0xfa1f5f88>
8021649c:	8989883a 	add	r4,r17,r6
802164a0:	1945883a 	add	r2,r3,r5
802164a4:	2447803a 	cmpltu	r3,r4,r17
802164a8:	1887883a 	add	r3,r3,r2
802164ac:	1880202c 	andhi	r2,r3,128
802164b0:	2023883a 	mov	r17,r4
802164b4:	103f1626 	beq	r2,zero,80216110 <__reset+0xfa1f6110>
802164b8:	00bfe034 	movhi	r2,65408
802164bc:	10bfffc4 	addi	r2,r2,-1
802164c0:	5021883a 	mov	r16,r10
802164c4:	1886703a 	and	r3,r3,r2
802164c8:	003eaf06 	br	80215f88 <__reset+0xfa1f5f88>
802164cc:	3825883a 	mov	r18,r7
802164d0:	003f0f06 	br	80216110 <__reset+0xfa1f6110>
802164d4:	1c44b03a 	or	r2,r3,r17
802164d8:	8000251e 	bne	r16,zero,80216570 <__subdf3+0x66c>
802164dc:	1000661e 	bne	r2,zero,80216678 <__subdf3+0x774>
802164e0:	2990b03a 	or	r8,r5,r6
802164e4:	40009626 	beq	r8,zero,80216740 <__subdf3+0x83c>
802164e8:	2807883a 	mov	r3,r5
802164ec:	3023883a 	mov	r17,r6
802164f0:	3825883a 	mov	r18,r7
802164f4:	003ea406 	br	80215f88 <__reset+0xfa1f5f88>
802164f8:	127ff804 	addi	r9,r2,-32
802164fc:	01000804 	movi	r4,32
80216500:	2a52d83a 	srl	r9,r5,r9
80216504:	11008c26 	beq	r2,r4,80216738 <__subdf3+0x834>
80216508:	01001004 	movi	r4,64
8021650c:	2085c83a 	sub	r2,r4,r2
80216510:	2884983a 	sll	r2,r5,r2
80216514:	118cb03a 	or	r6,r2,r6
80216518:	300cc03a 	cmpne	r6,r6,zero
8021651c:	4992b03a 	or	r9,r9,r6
80216520:	0005883a 	mov	r2,zero
80216524:	003f1206 	br	80216170 <__reset+0xfa1f6170>
80216528:	0101ffc4 	movi	r4,2047
8021652c:	493f9c1e 	bne	r9,r4,802163a0 <__reset+0xfa1f63a0>
80216530:	2807883a 	mov	r3,r5
80216534:	3023883a 	mov	r17,r6
80216538:	4821883a 	mov	r16,r9
8021653c:	3825883a 	mov	r18,r7
80216540:	003e9106 	br	80215f88 <__reset+0xfa1f5f88>
80216544:	80001f1e 	bne	r16,zero,802165c4 <__subdf3+0x6c0>
80216548:	1c48b03a 	or	r4,r3,r17
8021654c:	20005a26 	beq	r4,zero,802166b8 <__subdf3+0x7b4>
80216550:	0084303a 	nor	r2,zero,r2
80216554:	1000561e 	bne	r2,zero,802166b0 <__subdf3+0x7ac>
80216558:	89a3883a 	add	r17,r17,r6
8021655c:	1945883a 	add	r2,r3,r5
80216560:	898d803a 	cmpltu	r6,r17,r6
80216564:	3087883a 	add	r3,r6,r2
80216568:	4821883a 	mov	r16,r9
8021656c:	003f0506 	br	80216184 <__reset+0xfa1f6184>
80216570:	10002b1e 	bne	r2,zero,80216620 <__subdf3+0x71c>
80216574:	2984b03a 	or	r2,r5,r6
80216578:	10008026 	beq	r2,zero,8021677c <__subdf3+0x878>
8021657c:	2807883a 	mov	r3,r5
80216580:	3023883a 	mov	r17,r6
80216584:	3825883a 	mov	r18,r7
80216588:	0401ffc4 	movi	r16,2047
8021658c:	003e7e06 	br	80215f88 <__reset+0xfa1f5f88>
80216590:	3809883a 	mov	r4,r7
80216594:	0011883a 	mov	r8,zero
80216598:	0005883a 	mov	r2,zero
8021659c:	003ee306 	br	8021612c <__reset+0xfa1f612c>
802165a0:	1c62b03a 	or	r17,r3,r17
802165a4:	8822c03a 	cmpne	r17,r17,zero
802165a8:	0005883a 	mov	r2,zero
802165ac:	003f8906 	br	802163d4 <__reset+0xfa1f63d4>
802165b0:	3809883a 	mov	r4,r7
802165b4:	4821883a 	mov	r16,r9
802165b8:	0011883a 	mov	r8,zero
802165bc:	0005883a 	mov	r2,zero
802165c0:	003eda06 	br	8021612c <__reset+0xfa1f612c>
802165c4:	0101ffc4 	movi	r4,2047
802165c8:	49003b26 	beq	r9,r4,802166b8 <__subdf3+0x7b4>
802165cc:	0085c83a 	sub	r2,zero,r2
802165d0:	18c02034 	orhi	r3,r3,128
802165d4:	01000e04 	movi	r4,56
802165d8:	20806e16 	blt	r4,r2,80216794 <__subdf3+0x890>
802165dc:	010007c4 	movi	r4,31
802165e0:	20807716 	blt	r4,r2,802167c0 <__subdf3+0x8bc>
802165e4:	01000804 	movi	r4,32
802165e8:	2089c83a 	sub	r4,r4,r2
802165ec:	1914983a 	sll	r10,r3,r4
802165f0:	8890d83a 	srl	r8,r17,r2
802165f4:	8908983a 	sll	r4,r17,r4
802165f8:	1884d83a 	srl	r2,r3,r2
802165fc:	5222b03a 	or	r17,r10,r8
80216600:	2006c03a 	cmpne	r3,r4,zero
80216604:	88e2b03a 	or	r17,r17,r3
80216608:	89a3883a 	add	r17,r17,r6
8021660c:	1145883a 	add	r2,r2,r5
80216610:	898d803a 	cmpltu	r6,r17,r6
80216614:	3087883a 	add	r3,r6,r2
80216618:	4821883a 	mov	r16,r9
8021661c:	003ed906 	br	80216184 <__reset+0xfa1f6184>
80216620:	2984b03a 	or	r2,r5,r6
80216624:	10004226 	beq	r2,zero,80216730 <__subdf3+0x82c>
80216628:	1808d0fa 	srli	r4,r3,3
8021662c:	8822d0fa 	srli	r17,r17,3
80216630:	1806977a 	slli	r3,r3,29
80216634:	2080022c 	andhi	r2,r4,8
80216638:	1c62b03a 	or	r17,r3,r17
8021663c:	10000826 	beq	r2,zero,80216660 <__subdf3+0x75c>
80216640:	2812d0fa 	srli	r9,r5,3
80216644:	4880022c 	andhi	r2,r9,8
80216648:	1000051e 	bne	r2,zero,80216660 <__subdf3+0x75c>
8021664c:	300cd0fa 	srli	r6,r6,3
80216650:	2804977a 	slli	r2,r5,29
80216654:	4809883a 	mov	r4,r9
80216658:	3825883a 	mov	r18,r7
8021665c:	11a2b03a 	or	r17,r2,r6
80216660:	8806d77a 	srli	r3,r17,29
80216664:	200890fa 	slli	r4,r4,3
80216668:	882290fa 	slli	r17,r17,3
8021666c:	0401ffc4 	movi	r16,2047
80216670:	1906b03a 	or	r3,r3,r4
80216674:	003e4406 	br	80215f88 <__reset+0xfa1f5f88>
80216678:	2984b03a 	or	r2,r5,r6
8021667c:	103e4226 	beq	r2,zero,80215f88 <__reset+0xfa1f5f88>
80216680:	8989c83a 	sub	r4,r17,r6
80216684:	8911803a 	cmpltu	r8,r17,r4
80216688:	1945c83a 	sub	r2,r3,r5
8021668c:	1205c83a 	sub	r2,r2,r8
80216690:	1200202c 	andhi	r8,r2,128
80216694:	403e9a26 	beq	r8,zero,80216100 <__reset+0xfa1f6100>
80216698:	3463c83a 	sub	r17,r6,r17
8021669c:	28c5c83a 	sub	r2,r5,r3
802166a0:	344d803a 	cmpltu	r6,r6,r17
802166a4:	1187c83a 	sub	r3,r2,r6
802166a8:	3825883a 	mov	r18,r7
802166ac:	003e3606 	br	80215f88 <__reset+0xfa1f5f88>
802166b0:	0101ffc4 	movi	r4,2047
802166b4:	493fc71e 	bne	r9,r4,802165d4 <__reset+0xfa1f65d4>
802166b8:	2807883a 	mov	r3,r5
802166bc:	3023883a 	mov	r17,r6
802166c0:	4821883a 	mov	r16,r9
802166c4:	003e3006 	br	80215f88 <__reset+0xfa1f5f88>
802166c8:	10003626 	beq	r2,zero,802167a4 <__subdf3+0x8a0>
802166cc:	2984b03a 	or	r2,r5,r6
802166d0:	10001726 	beq	r2,zero,80216730 <__subdf3+0x82c>
802166d4:	1808d0fa 	srli	r4,r3,3
802166d8:	8822d0fa 	srli	r17,r17,3
802166dc:	1806977a 	slli	r3,r3,29
802166e0:	2080022c 	andhi	r2,r4,8
802166e4:	1c62b03a 	or	r17,r3,r17
802166e8:	10000726 	beq	r2,zero,80216708 <__subdf3+0x804>
802166ec:	2812d0fa 	srli	r9,r5,3
802166f0:	4880022c 	andhi	r2,r9,8
802166f4:	1000041e 	bne	r2,zero,80216708 <__subdf3+0x804>
802166f8:	300cd0fa 	srli	r6,r6,3
802166fc:	2804977a 	slli	r2,r5,29
80216700:	4809883a 	mov	r4,r9
80216704:	11a2b03a 	or	r17,r2,r6
80216708:	8806d77a 	srli	r3,r17,29
8021670c:	200890fa 	slli	r4,r4,3
80216710:	882290fa 	slli	r17,r17,3
80216714:	3825883a 	mov	r18,r7
80216718:	1906b03a 	or	r3,r3,r4
8021671c:	0401ffc4 	movi	r16,2047
80216720:	003e1906 	br	80215f88 <__reset+0xfa1f5f88>
80216724:	000b883a 	mov	r5,zero
80216728:	0005883a 	mov	r2,zero
8021672c:	003e2e06 	br	80215fe8 <__reset+0xfa1f5fe8>
80216730:	0401ffc4 	movi	r16,2047
80216734:	003e1406 	br	80215f88 <__reset+0xfa1f5f88>
80216738:	0005883a 	mov	r2,zero
8021673c:	003f7506 	br	80216514 <__reset+0xfa1f6514>
80216740:	0005883a 	mov	r2,zero
80216744:	0009883a 	mov	r4,zero
80216748:	003e7806 	br	8021612c <__reset+0xfa1f612c>
8021674c:	123ff804 	addi	r8,r2,-32
80216750:	01000804 	movi	r4,32
80216754:	1a10d83a 	srl	r8,r3,r8
80216758:	11002526 	beq	r2,r4,802167f0 <__subdf3+0x8ec>
8021675c:	01001004 	movi	r4,64
80216760:	2085c83a 	sub	r2,r4,r2
80216764:	1884983a 	sll	r2,r3,r2
80216768:	1444b03a 	or	r2,r2,r17
8021676c:	1004c03a 	cmpne	r2,r2,zero
80216770:	40a2b03a 	or	r17,r8,r2
80216774:	0005883a 	mov	r2,zero
80216778:	003f1606 	br	802163d4 <__reset+0xfa1f63d4>
8021677c:	02000434 	movhi	r8,16
80216780:	0009883a 	mov	r4,zero
80216784:	423fffc4 	addi	r8,r8,-1
80216788:	00bfffc4 	movi	r2,-1
8021678c:	0401ffc4 	movi	r16,2047
80216790:	003e6606 	br	8021612c <__reset+0xfa1f612c>
80216794:	1c62b03a 	or	r17,r3,r17
80216798:	8822c03a 	cmpne	r17,r17,zero
8021679c:	0005883a 	mov	r2,zero
802167a0:	003f9906 	br	80216608 <__reset+0xfa1f6608>
802167a4:	2807883a 	mov	r3,r5
802167a8:	3023883a 	mov	r17,r6
802167ac:	0401ffc4 	movi	r16,2047
802167b0:	003df506 	br	80215f88 <__reset+0xfa1f5f88>
802167b4:	2807883a 	mov	r3,r5
802167b8:	3023883a 	mov	r17,r6
802167bc:	003df206 	br	80215f88 <__reset+0xfa1f5f88>
802167c0:	123ff804 	addi	r8,r2,-32
802167c4:	01000804 	movi	r4,32
802167c8:	1a10d83a 	srl	r8,r3,r8
802167cc:	11000a26 	beq	r2,r4,802167f8 <__subdf3+0x8f4>
802167d0:	01001004 	movi	r4,64
802167d4:	2085c83a 	sub	r2,r4,r2
802167d8:	1884983a 	sll	r2,r3,r2
802167dc:	1444b03a 	or	r2,r2,r17
802167e0:	1004c03a 	cmpne	r2,r2,zero
802167e4:	40a2b03a 	or	r17,r8,r2
802167e8:	0005883a 	mov	r2,zero
802167ec:	003f8606 	br	80216608 <__reset+0xfa1f6608>
802167f0:	0005883a 	mov	r2,zero
802167f4:	003fdc06 	br	80216768 <__reset+0xfa1f6768>
802167f8:	0005883a 	mov	r2,zero
802167fc:	003ff706 	br	802167dc <__reset+0xfa1f67dc>

80216800 <__fixdfsi>:
80216800:	280cd53a 	srli	r6,r5,20
80216804:	00c00434 	movhi	r3,16
80216808:	18ffffc4 	addi	r3,r3,-1
8021680c:	3181ffcc 	andi	r6,r6,2047
80216810:	01c0ff84 	movi	r7,1022
80216814:	28c6703a 	and	r3,r5,r3
80216818:	280ad7fa 	srli	r5,r5,31
8021681c:	3980120e 	bge	r7,r6,80216868 <__fixdfsi+0x68>
80216820:	00810744 	movi	r2,1053
80216824:	11800c16 	blt	r2,r6,80216858 <__fixdfsi+0x58>
80216828:	00810cc4 	movi	r2,1075
8021682c:	1185c83a 	sub	r2,r2,r6
80216830:	01c007c4 	movi	r7,31
80216834:	18c00434 	orhi	r3,r3,16
80216838:	38800d16 	blt	r7,r2,80216870 <__fixdfsi+0x70>
8021683c:	31befb44 	addi	r6,r6,-1043
80216840:	2084d83a 	srl	r2,r4,r2
80216844:	1986983a 	sll	r3,r3,r6
80216848:	1884b03a 	or	r2,r3,r2
8021684c:	28000726 	beq	r5,zero,8021686c <__fixdfsi+0x6c>
80216850:	0085c83a 	sub	r2,zero,r2
80216854:	f800283a 	ret
80216858:	00a00034 	movhi	r2,32768
8021685c:	10bfffc4 	addi	r2,r2,-1
80216860:	2885883a 	add	r2,r5,r2
80216864:	f800283a 	ret
80216868:	0005883a 	mov	r2,zero
8021686c:	f800283a 	ret
80216870:	008104c4 	movi	r2,1043
80216874:	1185c83a 	sub	r2,r2,r6
80216878:	1884d83a 	srl	r2,r3,r2
8021687c:	003ff306 	br	8021684c <__reset+0xfa1f684c>

80216880 <__floatsidf>:
80216880:	defffd04 	addi	sp,sp,-12
80216884:	dfc00215 	stw	ra,8(sp)
80216888:	dc400115 	stw	r17,4(sp)
8021688c:	dc000015 	stw	r16,0(sp)
80216890:	20002b26 	beq	r4,zero,80216940 <__floatsidf+0xc0>
80216894:	2023883a 	mov	r17,r4
80216898:	2020d7fa 	srli	r16,r4,31
8021689c:	20002d16 	blt	r4,zero,80216954 <__floatsidf+0xd4>
802168a0:	8809883a 	mov	r4,r17
802168a4:	020693c0 	call	8020693c <__clzsi2>
802168a8:	01410784 	movi	r5,1054
802168ac:	288bc83a 	sub	r5,r5,r2
802168b0:	01010cc4 	movi	r4,1075
802168b4:	2149c83a 	sub	r4,r4,r5
802168b8:	00c007c4 	movi	r3,31
802168bc:	1900160e 	bge	r3,r4,80216918 <__floatsidf+0x98>
802168c0:	00c104c4 	movi	r3,1043
802168c4:	1947c83a 	sub	r3,r3,r5
802168c8:	88c6983a 	sll	r3,r17,r3
802168cc:	00800434 	movhi	r2,16
802168d0:	10bfffc4 	addi	r2,r2,-1
802168d4:	1886703a 	and	r3,r3,r2
802168d8:	2941ffcc 	andi	r5,r5,2047
802168dc:	800d883a 	mov	r6,r16
802168e0:	0005883a 	mov	r2,zero
802168e4:	280a953a 	slli	r5,r5,20
802168e8:	31803fcc 	andi	r6,r6,255
802168ec:	01000434 	movhi	r4,16
802168f0:	300c97fa 	slli	r6,r6,31
802168f4:	213fffc4 	addi	r4,r4,-1
802168f8:	1906703a 	and	r3,r3,r4
802168fc:	1946b03a 	or	r3,r3,r5
80216900:	1986b03a 	or	r3,r3,r6
80216904:	dfc00217 	ldw	ra,8(sp)
80216908:	dc400117 	ldw	r17,4(sp)
8021690c:	dc000017 	ldw	r16,0(sp)
80216910:	dec00304 	addi	sp,sp,12
80216914:	f800283a 	ret
80216918:	00c002c4 	movi	r3,11
8021691c:	1887c83a 	sub	r3,r3,r2
80216920:	88c6d83a 	srl	r3,r17,r3
80216924:	8904983a 	sll	r2,r17,r4
80216928:	01000434 	movhi	r4,16
8021692c:	213fffc4 	addi	r4,r4,-1
80216930:	2941ffcc 	andi	r5,r5,2047
80216934:	1906703a 	and	r3,r3,r4
80216938:	800d883a 	mov	r6,r16
8021693c:	003fe906 	br	802168e4 <__reset+0xfa1f68e4>
80216940:	000d883a 	mov	r6,zero
80216944:	000b883a 	mov	r5,zero
80216948:	0007883a 	mov	r3,zero
8021694c:	0005883a 	mov	r2,zero
80216950:	003fe406 	br	802168e4 <__reset+0xfa1f68e4>
80216954:	0123c83a 	sub	r17,zero,r4
80216958:	003fd106 	br	802168a0 <__reset+0xfa1f68a0>

8021695c <__floatunsidf>:
8021695c:	defffe04 	addi	sp,sp,-8
80216960:	dc000015 	stw	r16,0(sp)
80216964:	dfc00115 	stw	ra,4(sp)
80216968:	2021883a 	mov	r16,r4
8021696c:	20002226 	beq	r4,zero,802169f8 <__floatunsidf+0x9c>
80216970:	020693c0 	call	8020693c <__clzsi2>
80216974:	01010784 	movi	r4,1054
80216978:	2089c83a 	sub	r4,r4,r2
8021697c:	01810cc4 	movi	r6,1075
80216980:	310dc83a 	sub	r6,r6,r4
80216984:	00c007c4 	movi	r3,31
80216988:	1980120e 	bge	r3,r6,802169d4 <__floatunsidf+0x78>
8021698c:	00c104c4 	movi	r3,1043
80216990:	1907c83a 	sub	r3,r3,r4
80216994:	80ca983a 	sll	r5,r16,r3
80216998:	00800434 	movhi	r2,16
8021699c:	10bfffc4 	addi	r2,r2,-1
802169a0:	2101ffcc 	andi	r4,r4,2047
802169a4:	0021883a 	mov	r16,zero
802169a8:	288a703a 	and	r5,r5,r2
802169ac:	2008953a 	slli	r4,r4,20
802169b0:	00c00434 	movhi	r3,16
802169b4:	18ffffc4 	addi	r3,r3,-1
802169b8:	28c6703a 	and	r3,r5,r3
802169bc:	8005883a 	mov	r2,r16
802169c0:	1906b03a 	or	r3,r3,r4
802169c4:	dfc00117 	ldw	ra,4(sp)
802169c8:	dc000017 	ldw	r16,0(sp)
802169cc:	dec00204 	addi	sp,sp,8
802169d0:	f800283a 	ret
802169d4:	00c002c4 	movi	r3,11
802169d8:	188bc83a 	sub	r5,r3,r2
802169dc:	814ad83a 	srl	r5,r16,r5
802169e0:	00c00434 	movhi	r3,16
802169e4:	18ffffc4 	addi	r3,r3,-1
802169e8:	81a0983a 	sll	r16,r16,r6
802169ec:	2101ffcc 	andi	r4,r4,2047
802169f0:	28ca703a 	and	r5,r5,r3
802169f4:	003fed06 	br	802169ac <__reset+0xfa1f69ac>
802169f8:	0009883a 	mov	r4,zero
802169fc:	000b883a 	mov	r5,zero
80216a00:	003fea06 	br	802169ac <__reset+0xfa1f69ac>

80216a04 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
80216a04:	defffb04 	addi	sp,sp,-20
80216a08:	df000415 	stw	fp,16(sp)
80216a0c:	df000404 	addi	fp,sp,16
80216a10:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
80216a14:	008000c4 	movi	r2,3
80216a18:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
80216a1c:	e0fffd17 	ldw	r3,-12(fp)
80216a20:	008003f4 	movhi	r2,15
80216a24:	10909004 	addi	r2,r2,16960
80216a28:	1887383a 	mul	r3,r3,r2
80216a2c:	00817db4 	movhi	r2,1526
80216a30:	10b84004 	addi	r2,r2,-7936
80216a34:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
80216a38:	00a00034 	movhi	r2,32768
80216a3c:	10bfffc4 	addi	r2,r2,-1
80216a40:	10c5203a 	divu	r2,r2,r3
80216a44:	e0ffff17 	ldw	r3,-4(fp)
80216a48:	1885203a 	divu	r2,r3,r2
80216a4c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
80216a50:	e0bffe17 	ldw	r2,-8(fp)
80216a54:	10002526 	beq	r2,zero,80216aec <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
80216a58:	e03ffc15 	stw	zero,-16(fp)
80216a5c:	00001406 	br	80216ab0 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
80216a60:	00a00034 	movhi	r2,32768
80216a64:	10bfffc4 	addi	r2,r2,-1
80216a68:	10bfffc4 	addi	r2,r2,-1
80216a6c:	103ffe1e 	bne	r2,zero,80216a68 <__reset+0xfa1f6a68>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
80216a70:	e0fffd17 	ldw	r3,-12(fp)
80216a74:	008003f4 	movhi	r2,15
80216a78:	10909004 	addi	r2,r2,16960
80216a7c:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
80216a80:	00817db4 	movhi	r2,1526
80216a84:	10b84004 	addi	r2,r2,-7936
80216a88:	10c7203a 	divu	r3,r2,r3
80216a8c:	00a00034 	movhi	r2,32768
80216a90:	10bfffc4 	addi	r2,r2,-1
80216a94:	10c5203a 	divu	r2,r2,r3
80216a98:	e0ffff17 	ldw	r3,-4(fp)
80216a9c:	1885c83a 	sub	r2,r3,r2
80216aa0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
80216aa4:	e0bffc17 	ldw	r2,-16(fp)
80216aa8:	10800044 	addi	r2,r2,1
80216aac:	e0bffc15 	stw	r2,-16(fp)
80216ab0:	e0fffc17 	ldw	r3,-16(fp)
80216ab4:	e0bffe17 	ldw	r2,-8(fp)
80216ab8:	18bfe916 	blt	r3,r2,80216a60 <__reset+0xfa1f6a60>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
80216abc:	e0fffd17 	ldw	r3,-12(fp)
80216ac0:	008003f4 	movhi	r2,15
80216ac4:	10909004 	addi	r2,r2,16960
80216ac8:	1887383a 	mul	r3,r3,r2
80216acc:	00817db4 	movhi	r2,1526
80216ad0:	10b84004 	addi	r2,r2,-7936
80216ad4:	10c7203a 	divu	r3,r2,r3
80216ad8:	e0bfff17 	ldw	r2,-4(fp)
80216adc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
80216ae0:	10bfffc4 	addi	r2,r2,-1
80216ae4:	103ffe1e 	bne	r2,zero,80216ae0 <__reset+0xfa1f6ae0>
80216ae8:	00000b06 	br	80216b18 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
80216aec:	e0fffd17 	ldw	r3,-12(fp)
80216af0:	008003f4 	movhi	r2,15
80216af4:	10909004 	addi	r2,r2,16960
80216af8:	1887383a 	mul	r3,r3,r2
80216afc:	00817db4 	movhi	r2,1526
80216b00:	10b84004 	addi	r2,r2,-7936
80216b04:	10c7203a 	divu	r3,r2,r3
80216b08:	e0bfff17 	ldw	r2,-4(fp)
80216b0c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
80216b10:	10bfffc4 	addi	r2,r2,-1
80216b14:	00bffe16 	blt	zero,r2,80216b10 <__reset+0xfa1f6b10>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
80216b18:	0005883a 	mov	r2,zero
}
80216b1c:	e037883a 	mov	sp,fp
80216b20:	df000017 	ldw	fp,0(sp)
80216b24:	dec00104 	addi	sp,sp,4
80216b28:	f800283a 	ret

80216b2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80216b2c:	defffe04 	addi	sp,sp,-8
80216b30:	dfc00115 	stw	ra,4(sp)
80216b34:	df000015 	stw	fp,0(sp)
80216b38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80216b3c:	d0a00c17 	ldw	r2,-32720(gp)
80216b40:	10000326 	beq	r2,zero,80216b50 <alt_get_errno+0x24>
80216b44:	d0a00c17 	ldw	r2,-32720(gp)
80216b48:	103ee83a 	callr	r2
80216b4c:	00000106 	br	80216b54 <alt_get_errno+0x28>
80216b50:	d0a02704 	addi	r2,gp,-32612
}
80216b54:	e037883a 	mov	sp,fp
80216b58:	dfc00117 	ldw	ra,4(sp)
80216b5c:	df000017 	ldw	fp,0(sp)
80216b60:	dec00204 	addi	sp,sp,8
80216b64:	f800283a 	ret

80216b68 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
80216b68:	defffb04 	addi	sp,sp,-20
80216b6c:	dfc00415 	stw	ra,16(sp)
80216b70:	df000315 	stw	fp,12(sp)
80216b74:	df000304 	addi	fp,sp,12
80216b78:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
80216b7c:	e0bfff17 	ldw	r2,-4(fp)
80216b80:	10000616 	blt	r2,zero,80216b9c <close+0x34>
80216b84:	e0bfff17 	ldw	r2,-4(fp)
80216b88:	10c00324 	muli	r3,r2,12
80216b8c:	00a008b4 	movhi	r2,32802
80216b90:	10b99304 	addi	r2,r2,-6580
80216b94:	1885883a 	add	r2,r3,r2
80216b98:	00000106 	br	80216ba0 <close+0x38>
80216b9c:	0005883a 	mov	r2,zero
80216ba0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
80216ba4:	e0bffd17 	ldw	r2,-12(fp)
80216ba8:	10001926 	beq	r2,zero,80216c10 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
80216bac:	e0bffd17 	ldw	r2,-12(fp)
80216bb0:	10800017 	ldw	r2,0(r2)
80216bb4:	10800417 	ldw	r2,16(r2)
80216bb8:	10000626 	beq	r2,zero,80216bd4 <close+0x6c>
80216bbc:	e0bffd17 	ldw	r2,-12(fp)
80216bc0:	10800017 	ldw	r2,0(r2)
80216bc4:	10800417 	ldw	r2,16(r2)
80216bc8:	e13ffd17 	ldw	r4,-12(fp)
80216bcc:	103ee83a 	callr	r2
80216bd0:	00000106 	br	80216bd8 <close+0x70>
80216bd4:	0005883a 	mov	r2,zero
80216bd8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
80216bdc:	e13fff17 	ldw	r4,-4(fp)
80216be0:	02172dc0 	call	802172dc <alt_release_fd>
    if (rval < 0)
80216be4:	e0bffe17 	ldw	r2,-8(fp)
80216be8:	1000070e 	bge	r2,zero,80216c08 <close+0xa0>
    {
      ALT_ERRNO = -rval;
80216bec:	0216b2c0 	call	80216b2c <alt_get_errno>
80216bf0:	1007883a 	mov	r3,r2
80216bf4:	e0bffe17 	ldw	r2,-8(fp)
80216bf8:	0085c83a 	sub	r2,zero,r2
80216bfc:	18800015 	stw	r2,0(r3)
      return -1;
80216c00:	00bfffc4 	movi	r2,-1
80216c04:	00000706 	br	80216c24 <close+0xbc>
    }
    return 0;
80216c08:	0005883a 	mov	r2,zero
80216c0c:	00000506 	br	80216c24 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
80216c10:	0216b2c0 	call	80216b2c <alt_get_errno>
80216c14:	1007883a 	mov	r3,r2
80216c18:	00801444 	movi	r2,81
80216c1c:	18800015 	stw	r2,0(r3)
    return -1;
80216c20:	00bfffc4 	movi	r2,-1
  }
}
80216c24:	e037883a 	mov	sp,fp
80216c28:	dfc00117 	ldw	ra,4(sp)
80216c2c:	df000017 	ldw	fp,0(sp)
80216c30:	dec00204 	addi	sp,sp,8
80216c34:	f800283a 	ret

80216c38 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
80216c38:	deffff04 	addi	sp,sp,-4
80216c3c:	df000015 	stw	fp,0(sp)
80216c40:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
80216c44:	0001883a 	nop
80216c48:	e037883a 	mov	sp,fp
80216c4c:	df000017 	ldw	fp,0(sp)
80216c50:	dec00104 	addi	sp,sp,4
80216c54:	f800283a 	ret

80216c58 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
80216c58:	defffc04 	addi	sp,sp,-16
80216c5c:	df000315 	stw	fp,12(sp)
80216c60:	df000304 	addi	fp,sp,12
80216c64:	e13ffd15 	stw	r4,-12(fp)
80216c68:	e17ffe15 	stw	r5,-8(fp)
80216c6c:	e1bfff15 	stw	r6,-4(fp)
  return len;
80216c70:	e0bfff17 	ldw	r2,-4(fp)
}
80216c74:	e037883a 	mov	sp,fp
80216c78:	df000017 	ldw	fp,0(sp)
80216c7c:	dec00104 	addi	sp,sp,4
80216c80:	f800283a 	ret

80216c84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80216c84:	defffe04 	addi	sp,sp,-8
80216c88:	dfc00115 	stw	ra,4(sp)
80216c8c:	df000015 	stw	fp,0(sp)
80216c90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80216c94:	d0a00c17 	ldw	r2,-32720(gp)
80216c98:	10000326 	beq	r2,zero,80216ca8 <alt_get_errno+0x24>
80216c9c:	d0a00c17 	ldw	r2,-32720(gp)
80216ca0:	103ee83a 	callr	r2
80216ca4:	00000106 	br	80216cac <alt_get_errno+0x28>
80216ca8:	d0a02704 	addi	r2,gp,-32612
}
80216cac:	e037883a 	mov	sp,fp
80216cb0:	dfc00117 	ldw	ra,4(sp)
80216cb4:	df000017 	ldw	fp,0(sp)
80216cb8:	dec00204 	addi	sp,sp,8
80216cbc:	f800283a 	ret

80216cc0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
80216cc0:	defffb04 	addi	sp,sp,-20
80216cc4:	dfc00415 	stw	ra,16(sp)
80216cc8:	df000315 	stw	fp,12(sp)
80216ccc:	df000304 	addi	fp,sp,12
80216cd0:	e13ffe15 	stw	r4,-8(fp)
80216cd4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80216cd8:	e0bffe17 	ldw	r2,-8(fp)
80216cdc:	10000616 	blt	r2,zero,80216cf8 <fstat+0x38>
80216ce0:	e0bffe17 	ldw	r2,-8(fp)
80216ce4:	10c00324 	muli	r3,r2,12
80216ce8:	00a008b4 	movhi	r2,32802
80216cec:	10b99304 	addi	r2,r2,-6580
80216cf0:	1885883a 	add	r2,r3,r2
80216cf4:	00000106 	br	80216cfc <fstat+0x3c>
80216cf8:	0005883a 	mov	r2,zero
80216cfc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
80216d00:	e0bffd17 	ldw	r2,-12(fp)
80216d04:	10001026 	beq	r2,zero,80216d48 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
80216d08:	e0bffd17 	ldw	r2,-12(fp)
80216d0c:	10800017 	ldw	r2,0(r2)
80216d10:	10800817 	ldw	r2,32(r2)
80216d14:	10000726 	beq	r2,zero,80216d34 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
80216d18:	e0bffd17 	ldw	r2,-12(fp)
80216d1c:	10800017 	ldw	r2,0(r2)
80216d20:	10800817 	ldw	r2,32(r2)
80216d24:	e17fff17 	ldw	r5,-4(fp)
80216d28:	e13ffd17 	ldw	r4,-12(fp)
80216d2c:	103ee83a 	callr	r2
80216d30:	00000a06 	br	80216d5c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
80216d34:	e0bfff17 	ldw	r2,-4(fp)
80216d38:	00c80004 	movi	r3,8192
80216d3c:	10c00115 	stw	r3,4(r2)
      return 0;
80216d40:	0005883a 	mov	r2,zero
80216d44:	00000506 	br	80216d5c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
80216d48:	0216c840 	call	80216c84 <alt_get_errno>
80216d4c:	1007883a 	mov	r3,r2
80216d50:	00801444 	movi	r2,81
80216d54:	18800015 	stw	r2,0(r3)
    return -1;
80216d58:	00bfffc4 	movi	r2,-1
  }
}
80216d5c:	e037883a 	mov	sp,fp
80216d60:	dfc00117 	ldw	ra,4(sp)
80216d64:	df000017 	ldw	fp,0(sp)
80216d68:	dec00204 	addi	sp,sp,8
80216d6c:	f800283a 	ret

80216d70 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
80216d70:	defff004 	addi	sp,sp,-64
80216d74:	df000f15 	stw	fp,60(sp)
80216d78:	df000f04 	addi	fp,sp,60
80216d7c:	e13ffd15 	stw	r4,-12(fp)
80216d80:	e17ffe15 	stw	r5,-8(fp)
80216d84:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
80216d88:	00bffa84 	movi	r2,-22
80216d8c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
80216d90:	e0bffd17 	ldw	r2,-12(fp)
80216d94:	10800828 	cmpgeui	r2,r2,32
80216d98:	1000501e 	bne	r2,zero,80216edc <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80216d9c:	0005303a 	rdctl	r2,status
80216da0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80216da4:	e0fff617 	ldw	r3,-40(fp)
80216da8:	00bfff84 	movi	r2,-2
80216dac:	1884703a 	and	r2,r3,r2
80216db0:	1001703a 	wrctl	status,r2
  
  return context;
80216db4:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
80216db8:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
80216dbc:	00a008b4 	movhi	r2,32802
80216dc0:	10bff404 	addi	r2,r2,-48
80216dc4:	e0fffd17 	ldw	r3,-12(fp)
80216dc8:	180690fa 	slli	r3,r3,3
80216dcc:	10c5883a 	add	r2,r2,r3
80216dd0:	e0ffff17 	ldw	r3,-4(fp)
80216dd4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
80216dd8:	00a008b4 	movhi	r2,32802
80216ddc:	10bff404 	addi	r2,r2,-48
80216de0:	e0fffd17 	ldw	r3,-12(fp)
80216de4:	180690fa 	slli	r3,r3,3
80216de8:	10c5883a 	add	r2,r2,r3
80216dec:	10800104 	addi	r2,r2,4
80216df0:	e0fffe17 	ldw	r3,-8(fp)
80216df4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
80216df8:	e0bfff17 	ldw	r2,-4(fp)
80216dfc:	10001926 	beq	r2,zero,80216e64 <alt_irq_register+0xf4>
80216e00:	e0bffd17 	ldw	r2,-12(fp)
80216e04:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80216e08:	0005303a 	rdctl	r2,status
80216e0c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80216e10:	e0fff717 	ldw	r3,-36(fp)
80216e14:	00bfff84 	movi	r2,-2
80216e18:	1884703a 	and	r2,r3,r2
80216e1c:	1001703a 	wrctl	status,r2
  
  return context;
80216e20:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
80216e24:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
80216e28:	00c00044 	movi	r3,1
80216e2c:	e0bff217 	ldw	r2,-56(fp)
80216e30:	1884983a 	sll	r2,r3,r2
80216e34:	1007883a 	mov	r3,r2
80216e38:	d0a02817 	ldw	r2,-32608(gp)
80216e3c:	1884b03a 	or	r2,r3,r2
80216e40:	d0a02815 	stw	r2,-32608(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
80216e44:	d0a02817 	ldw	r2,-32608(gp)
80216e48:	100170fa 	wrctl	ienable,r2
80216e4c:	e0bff817 	ldw	r2,-32(fp)
80216e50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80216e54:	e0bff917 	ldw	r2,-28(fp)
80216e58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
80216e5c:	0005883a 	mov	r2,zero
80216e60:	00001906 	br	80216ec8 <alt_irq_register+0x158>
80216e64:	e0bffd17 	ldw	r2,-12(fp)
80216e68:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80216e6c:	0005303a 	rdctl	r2,status
80216e70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80216e74:	e0fffa17 	ldw	r3,-24(fp)
80216e78:	00bfff84 	movi	r2,-2
80216e7c:	1884703a 	and	r2,r3,r2
80216e80:	1001703a 	wrctl	status,r2
  
  return context;
80216e84:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
80216e88:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
80216e8c:	00c00044 	movi	r3,1
80216e90:	e0bff417 	ldw	r2,-48(fp)
80216e94:	1884983a 	sll	r2,r3,r2
80216e98:	0084303a 	nor	r2,zero,r2
80216e9c:	1007883a 	mov	r3,r2
80216ea0:	d0a02817 	ldw	r2,-32608(gp)
80216ea4:	1884703a 	and	r2,r3,r2
80216ea8:	d0a02815 	stw	r2,-32608(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
80216eac:	d0a02817 	ldw	r2,-32608(gp)
80216eb0:	100170fa 	wrctl	ienable,r2
80216eb4:	e0bffb17 	ldw	r2,-20(fp)
80216eb8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80216ebc:	e0bffc17 	ldw	r2,-16(fp)
80216ec0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
80216ec4:	0005883a 	mov	r2,zero
80216ec8:	e0bff115 	stw	r2,-60(fp)
80216ecc:	e0bff317 	ldw	r2,-52(fp)
80216ed0:	e0bff515 	stw	r2,-44(fp)
80216ed4:	e0bff517 	ldw	r2,-44(fp)
80216ed8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
80216edc:	e0bff117 	ldw	r2,-60(fp)
}
80216ee0:	e037883a 	mov	sp,fp
80216ee4:	df000017 	ldw	fp,0(sp)
80216ee8:	dec00104 	addi	sp,sp,4
80216eec:	f800283a 	ret

80216ef0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80216ef0:	defffe04 	addi	sp,sp,-8
80216ef4:	dfc00115 	stw	ra,4(sp)
80216ef8:	df000015 	stw	fp,0(sp)
80216efc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80216f00:	d0a00c17 	ldw	r2,-32720(gp)
80216f04:	10000326 	beq	r2,zero,80216f14 <alt_get_errno+0x24>
80216f08:	d0a00c17 	ldw	r2,-32720(gp)
80216f0c:	103ee83a 	callr	r2
80216f10:	00000106 	br	80216f18 <alt_get_errno+0x28>
80216f14:	d0a02704 	addi	r2,gp,-32612
}
80216f18:	e037883a 	mov	sp,fp
80216f1c:	dfc00117 	ldw	ra,4(sp)
80216f20:	df000017 	ldw	fp,0(sp)
80216f24:	dec00204 	addi	sp,sp,8
80216f28:	f800283a 	ret

80216f2c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
80216f2c:	deffed04 	addi	sp,sp,-76
80216f30:	dfc01215 	stw	ra,72(sp)
80216f34:	df001115 	stw	fp,68(sp)
80216f38:	df001104 	addi	fp,sp,68
80216f3c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80216f40:	e0bfff17 	ldw	r2,-4(fp)
80216f44:	10000616 	blt	r2,zero,80216f60 <isatty+0x34>
80216f48:	e0bfff17 	ldw	r2,-4(fp)
80216f4c:	10c00324 	muli	r3,r2,12
80216f50:	00a008b4 	movhi	r2,32802
80216f54:	10b99304 	addi	r2,r2,-6580
80216f58:	1885883a 	add	r2,r3,r2
80216f5c:	00000106 	br	80216f64 <isatty+0x38>
80216f60:	0005883a 	mov	r2,zero
80216f64:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
80216f68:	e0bfef17 	ldw	r2,-68(fp)
80216f6c:	10000e26 	beq	r2,zero,80216fa8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
80216f70:	e0bfef17 	ldw	r2,-68(fp)
80216f74:	10800017 	ldw	r2,0(r2)
80216f78:	10800817 	ldw	r2,32(r2)
80216f7c:	1000021e 	bne	r2,zero,80216f88 <isatty+0x5c>
    {
      return 1;
80216f80:	00800044 	movi	r2,1
80216f84:	00000d06 	br	80216fbc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
80216f88:	e0bff004 	addi	r2,fp,-64
80216f8c:	100b883a 	mov	r5,r2
80216f90:	e13fff17 	ldw	r4,-4(fp)
80216f94:	0216cc00 	call	80216cc0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
80216f98:	e0bff117 	ldw	r2,-60(fp)
80216f9c:	10880020 	cmpeqi	r2,r2,8192
80216fa0:	10803fcc 	andi	r2,r2,255
80216fa4:	00000506 	br	80216fbc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
80216fa8:	0216ef00 	call	80216ef0 <alt_get_errno>
80216fac:	1007883a 	mov	r3,r2
80216fb0:	00801444 	movi	r2,81
80216fb4:	18800015 	stw	r2,0(r3)
    return 0;
80216fb8:	0005883a 	mov	r2,zero
  }
}
80216fbc:	e037883a 	mov	sp,fp
80216fc0:	dfc00117 	ldw	ra,4(sp)
80216fc4:	df000017 	ldw	fp,0(sp)
80216fc8:	dec00204 	addi	sp,sp,8
80216fcc:	f800283a 	ret

80216fd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80216fd0:	defffe04 	addi	sp,sp,-8
80216fd4:	dfc00115 	stw	ra,4(sp)
80216fd8:	df000015 	stw	fp,0(sp)
80216fdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80216fe0:	d0a00c17 	ldw	r2,-32720(gp)
80216fe4:	10000326 	beq	r2,zero,80216ff4 <alt_get_errno+0x24>
80216fe8:	d0a00c17 	ldw	r2,-32720(gp)
80216fec:	103ee83a 	callr	r2
80216ff0:	00000106 	br	80216ff8 <alt_get_errno+0x28>
80216ff4:	d0a02704 	addi	r2,gp,-32612
}
80216ff8:	e037883a 	mov	sp,fp
80216ffc:	dfc00117 	ldw	ra,4(sp)
80217000:	df000017 	ldw	fp,0(sp)
80217004:	dec00204 	addi	sp,sp,8
80217008:	f800283a 	ret

8021700c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
8021700c:	defff904 	addi	sp,sp,-28
80217010:	dfc00615 	stw	ra,24(sp)
80217014:	df000515 	stw	fp,20(sp)
80217018:	df000504 	addi	fp,sp,20
8021701c:	e13ffd15 	stw	r4,-12(fp)
80217020:	e17ffe15 	stw	r5,-8(fp)
80217024:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
80217028:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8021702c:	e0bffd17 	ldw	r2,-12(fp)
80217030:	10000616 	blt	r2,zero,8021704c <lseek+0x40>
80217034:	e0bffd17 	ldw	r2,-12(fp)
80217038:	10c00324 	muli	r3,r2,12
8021703c:	00a008b4 	movhi	r2,32802
80217040:	10b99304 	addi	r2,r2,-6580
80217044:	1885883a 	add	r2,r3,r2
80217048:	00000106 	br	80217050 <lseek+0x44>
8021704c:	0005883a 	mov	r2,zero
80217050:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
80217054:	e0bffc17 	ldw	r2,-16(fp)
80217058:	10001026 	beq	r2,zero,8021709c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
8021705c:	e0bffc17 	ldw	r2,-16(fp)
80217060:	10800017 	ldw	r2,0(r2)
80217064:	10800717 	ldw	r2,28(r2)
80217068:	10000926 	beq	r2,zero,80217090 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
8021706c:	e0bffc17 	ldw	r2,-16(fp)
80217070:	10800017 	ldw	r2,0(r2)
80217074:	10800717 	ldw	r2,28(r2)
80217078:	e1bfff17 	ldw	r6,-4(fp)
8021707c:	e17ffe17 	ldw	r5,-8(fp)
80217080:	e13ffc17 	ldw	r4,-16(fp)
80217084:	103ee83a 	callr	r2
80217088:	e0bffb15 	stw	r2,-20(fp)
8021708c:	00000506 	br	802170a4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
80217090:	00bfde84 	movi	r2,-134
80217094:	e0bffb15 	stw	r2,-20(fp)
80217098:	00000206 	br	802170a4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
8021709c:	00bfebc4 	movi	r2,-81
802170a0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
802170a4:	e0bffb17 	ldw	r2,-20(fp)
802170a8:	1000070e 	bge	r2,zero,802170c8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
802170ac:	0216fd00 	call	80216fd0 <alt_get_errno>
802170b0:	1007883a 	mov	r3,r2
802170b4:	e0bffb17 	ldw	r2,-20(fp)
802170b8:	0085c83a 	sub	r2,zero,r2
802170bc:	18800015 	stw	r2,0(r3)
    rc = -1;
802170c0:	00bfffc4 	movi	r2,-1
802170c4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
802170c8:	e0bffb17 	ldw	r2,-20(fp)
}
802170cc:	e037883a 	mov	sp,fp
802170d0:	dfc00117 	ldw	ra,4(sp)
802170d4:	df000017 	ldw	fp,0(sp)
802170d8:	dec00204 	addi	sp,sp,8
802170dc:	f800283a 	ret

802170e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
802170e0:	defffd04 	addi	sp,sp,-12
802170e4:	dfc00215 	stw	ra,8(sp)
802170e8:	df000115 	stw	fp,4(sp)
802170ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
802170f0:	0009883a 	mov	r4,zero
802170f4:	021772c0 	call	8021772c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
802170f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
802170fc:	02177640 	call	80217764 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
80217100:	01a008b4 	movhi	r6,32802
80217104:	31b6bb04 	addi	r6,r6,-9492
80217108:	016008b4 	movhi	r5,32802
8021710c:	2976bb04 	addi	r5,r5,-9492
80217110:	012008b4 	movhi	r4,32802
80217114:	2136bb04 	addi	r4,r4,-9492
80217118:	021b3080 	call	8021b308 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
8021711c:	021ae540 	call	8021ae54 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
80217120:	012008b4 	movhi	r4,32802
80217124:	212bad04 	addi	r4,r4,-20812
80217128:	021baac0 	call	8021baac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
8021712c:	d0a02917 	ldw	r2,-32604(gp)
80217130:	d0e02a17 	ldw	r3,-32600(gp)
80217134:	d1202b17 	ldw	r4,-32596(gp)
80217138:	200d883a 	mov	r6,r4
8021713c:	180b883a 	mov	r5,r3
80217140:	1009883a 	mov	r4,r2
80217144:	02056e80 	call	802056e8 <main>
80217148:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
8021714c:	01000044 	movi	r4,1
80217150:	0216b680 	call	80216b68 <close>
  exit (result);
80217154:	e13fff17 	ldw	r4,-4(fp)
80217158:	021bac00 	call	8021bac0 <exit>

8021715c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
8021715c:	defffe04 	addi	sp,sp,-8
80217160:	df000115 	stw	fp,4(sp)
80217164:	df000104 	addi	fp,sp,4
80217168:	e13fff15 	stw	r4,-4(fp)
}
8021716c:	0001883a 	nop
80217170:	e037883a 	mov	sp,fp
80217174:	df000017 	ldw	fp,0(sp)
80217178:	dec00104 	addi	sp,sp,4
8021717c:	f800283a 	ret

80217180 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
80217180:	defffe04 	addi	sp,sp,-8
80217184:	df000115 	stw	fp,4(sp)
80217188:	df000104 	addi	fp,sp,4
8021718c:	e13fff15 	stw	r4,-4(fp)
}
80217190:	0001883a 	nop
80217194:	e037883a 	mov	sp,fp
80217198:	df000017 	ldw	fp,0(sp)
8021719c:	dec00104 	addi	sp,sp,4
802171a0:	f800283a 	ret

802171a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
802171a4:	defffe04 	addi	sp,sp,-8
802171a8:	dfc00115 	stw	ra,4(sp)
802171ac:	df000015 	stw	fp,0(sp)
802171b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
802171b4:	d0a00c17 	ldw	r2,-32720(gp)
802171b8:	10000326 	beq	r2,zero,802171c8 <alt_get_errno+0x24>
802171bc:	d0a00c17 	ldw	r2,-32720(gp)
802171c0:	103ee83a 	callr	r2
802171c4:	00000106 	br	802171cc <alt_get_errno+0x28>
802171c8:	d0a02704 	addi	r2,gp,-32612
}
802171cc:	e037883a 	mov	sp,fp
802171d0:	dfc00117 	ldw	ra,4(sp)
802171d4:	df000017 	ldw	fp,0(sp)
802171d8:	dec00204 	addi	sp,sp,8
802171dc:	f800283a 	ret

802171e0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
802171e0:	defff904 	addi	sp,sp,-28
802171e4:	dfc00615 	stw	ra,24(sp)
802171e8:	df000515 	stw	fp,20(sp)
802171ec:	df000504 	addi	fp,sp,20
802171f0:	e13ffd15 	stw	r4,-12(fp)
802171f4:	e17ffe15 	stw	r5,-8(fp)
802171f8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
802171fc:	e0bffd17 	ldw	r2,-12(fp)
80217200:	10000616 	blt	r2,zero,8021721c <read+0x3c>
80217204:	e0bffd17 	ldw	r2,-12(fp)
80217208:	10c00324 	muli	r3,r2,12
8021720c:	00a008b4 	movhi	r2,32802
80217210:	10b99304 	addi	r2,r2,-6580
80217214:	1885883a 	add	r2,r3,r2
80217218:	00000106 	br	80217220 <read+0x40>
8021721c:	0005883a 	mov	r2,zero
80217220:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
80217224:	e0bffb17 	ldw	r2,-20(fp)
80217228:	10002226 	beq	r2,zero,802172b4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8021722c:	e0bffb17 	ldw	r2,-20(fp)
80217230:	10800217 	ldw	r2,8(r2)
80217234:	108000cc 	andi	r2,r2,3
80217238:	10800060 	cmpeqi	r2,r2,1
8021723c:	1000181e 	bne	r2,zero,802172a0 <read+0xc0>
        (fd->dev->read))
80217240:	e0bffb17 	ldw	r2,-20(fp)
80217244:	10800017 	ldw	r2,0(r2)
80217248:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8021724c:	10001426 	beq	r2,zero,802172a0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
80217250:	e0bffb17 	ldw	r2,-20(fp)
80217254:	10800017 	ldw	r2,0(r2)
80217258:	10800517 	ldw	r2,20(r2)
8021725c:	e0ffff17 	ldw	r3,-4(fp)
80217260:	180d883a 	mov	r6,r3
80217264:	e17ffe17 	ldw	r5,-8(fp)
80217268:	e13ffb17 	ldw	r4,-20(fp)
8021726c:	103ee83a 	callr	r2
80217270:	e0bffc15 	stw	r2,-16(fp)
80217274:	e0bffc17 	ldw	r2,-16(fp)
80217278:	1000070e 	bge	r2,zero,80217298 <read+0xb8>
        {
          ALT_ERRNO = -rval;
8021727c:	02171a40 	call	802171a4 <alt_get_errno>
80217280:	1007883a 	mov	r3,r2
80217284:	e0bffc17 	ldw	r2,-16(fp)
80217288:	0085c83a 	sub	r2,zero,r2
8021728c:	18800015 	stw	r2,0(r3)
          return -1;
80217290:	00bfffc4 	movi	r2,-1
80217294:	00000c06 	br	802172c8 <read+0xe8>
        }
        return rval;
80217298:	e0bffc17 	ldw	r2,-16(fp)
8021729c:	00000a06 	br	802172c8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
802172a0:	02171a40 	call	802171a4 <alt_get_errno>
802172a4:	1007883a 	mov	r3,r2
802172a8:	00800344 	movi	r2,13
802172ac:	18800015 	stw	r2,0(r3)
802172b0:	00000406 	br	802172c4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
802172b4:	02171a40 	call	802171a4 <alt_get_errno>
802172b8:	1007883a 	mov	r3,r2
802172bc:	00801444 	movi	r2,81
802172c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
802172c4:	00bfffc4 	movi	r2,-1
}
802172c8:	e037883a 	mov	sp,fp
802172cc:	dfc00117 	ldw	ra,4(sp)
802172d0:	df000017 	ldw	fp,0(sp)
802172d4:	dec00204 	addi	sp,sp,8
802172d8:	f800283a 	ret

802172dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
802172dc:	defffe04 	addi	sp,sp,-8
802172e0:	df000115 	stw	fp,4(sp)
802172e4:	df000104 	addi	fp,sp,4
802172e8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
802172ec:	e0bfff17 	ldw	r2,-4(fp)
802172f0:	108000d0 	cmplti	r2,r2,3
802172f4:	10000d1e 	bne	r2,zero,8021732c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
802172f8:	00a008b4 	movhi	r2,32802
802172fc:	10b99304 	addi	r2,r2,-6580
80217300:	e0ffff17 	ldw	r3,-4(fp)
80217304:	18c00324 	muli	r3,r3,12
80217308:	10c5883a 	add	r2,r2,r3
8021730c:	10800204 	addi	r2,r2,8
80217310:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
80217314:	00a008b4 	movhi	r2,32802
80217318:	10b99304 	addi	r2,r2,-6580
8021731c:	e0ffff17 	ldw	r3,-4(fp)
80217320:	18c00324 	muli	r3,r3,12
80217324:	10c5883a 	add	r2,r2,r3
80217328:	10000015 	stw	zero,0(r2)
  }
}
8021732c:	0001883a 	nop
80217330:	e037883a 	mov	sp,fp
80217334:	df000017 	ldw	fp,0(sp)
80217338:	dec00104 	addi	sp,sp,4
8021733c:	f800283a 	ret

80217340 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
80217340:	defff904 	addi	sp,sp,-28
80217344:	df000615 	stw	fp,24(sp)
80217348:	df000604 	addi	fp,sp,24
8021734c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217350:	0005303a 	rdctl	r2,status
80217354:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80217358:	e0fffe17 	ldw	r3,-8(fp)
8021735c:	00bfff84 	movi	r2,-2
80217360:	1884703a 	and	r2,r3,r2
80217364:	1001703a 	wrctl	status,r2
  
  return context;
80217368:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
8021736c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
80217370:	d0a00e17 	ldw	r2,-32712(gp)
80217374:	10c000c4 	addi	r3,r2,3
80217378:	00bfff04 	movi	r2,-4
8021737c:	1884703a 	and	r2,r3,r2
80217380:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
80217384:	d0e00e17 	ldw	r3,-32712(gp)
80217388:	e0bfff17 	ldw	r2,-4(fp)
8021738c:	1887883a 	add	r3,r3,r2
80217390:	00a00934 	movhi	r2,32804
80217394:	10800004 	addi	r2,r2,0
80217398:	10c0062e 	bgeu	r2,r3,802173b4 <sbrk+0x74>
8021739c:	e0bffb17 	ldw	r2,-20(fp)
802173a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802173a4:	e0bffa17 	ldw	r2,-24(fp)
802173a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
802173ac:	00bfffc4 	movi	r2,-1
802173b0:	00000b06 	br	802173e0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
802173b4:	d0a00e17 	ldw	r2,-32712(gp)
802173b8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
802173bc:	d0e00e17 	ldw	r3,-32712(gp)
802173c0:	e0bfff17 	ldw	r2,-4(fp)
802173c4:	1885883a 	add	r2,r3,r2
802173c8:	d0a00e15 	stw	r2,-32712(gp)
802173cc:	e0bffb17 	ldw	r2,-20(fp)
802173d0:	e0bffc15 	stw	r2,-16(fp)
802173d4:	e0bffc17 	ldw	r2,-16(fp)
802173d8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
802173dc:	e0bffd17 	ldw	r2,-12(fp)
} 
802173e0:	e037883a 	mov	sp,fp
802173e4:	df000017 	ldw	fp,0(sp)
802173e8:	dec00104 	addi	sp,sp,4
802173ec:	f800283a 	ret

802173f0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
802173f0:	defffa04 	addi	sp,sp,-24
802173f4:	df000515 	stw	fp,20(sp)
802173f8:	df000504 	addi	fp,sp,20
802173fc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217400:	0005303a 	rdctl	r2,status
80217404:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80217408:	e0fffc17 	ldw	r3,-16(fp)
8021740c:	00bfff84 	movi	r2,-2
80217410:	1884703a 	and	r2,r3,r2
80217414:	1001703a 	wrctl	status,r2
  
  return context;
80217418:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
8021741c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
80217420:	e0bfff17 	ldw	r2,-4(fp)
80217424:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
80217428:	e0bffd17 	ldw	r2,-12(fp)
8021742c:	10800017 	ldw	r2,0(r2)
80217430:	e0fffd17 	ldw	r3,-12(fp)
80217434:	18c00117 	ldw	r3,4(r3)
80217438:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
8021743c:	e0bffd17 	ldw	r2,-12(fp)
80217440:	10800117 	ldw	r2,4(r2)
80217444:	e0fffd17 	ldw	r3,-12(fp)
80217448:	18c00017 	ldw	r3,0(r3)
8021744c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
80217450:	e0bffd17 	ldw	r2,-12(fp)
80217454:	e0fffd17 	ldw	r3,-12(fp)
80217458:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
8021745c:	e0bffd17 	ldw	r2,-12(fp)
80217460:	e0fffd17 	ldw	r3,-12(fp)
80217464:	10c00015 	stw	r3,0(r2)
80217468:	e0bffb17 	ldw	r2,-20(fp)
8021746c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80217470:	e0bffe17 	ldw	r2,-8(fp)
80217474:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
80217478:	0001883a 	nop
8021747c:	e037883a 	mov	sp,fp
80217480:	df000017 	ldw	fp,0(sp)
80217484:	dec00104 	addi	sp,sp,4
80217488:	f800283a 	ret

8021748c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
8021748c:	defffb04 	addi	sp,sp,-20
80217490:	dfc00415 	stw	ra,16(sp)
80217494:	df000315 	stw	fp,12(sp)
80217498:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
8021749c:	d0a00f17 	ldw	r2,-32708(gp)
802174a0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
802174a4:	d0a02d17 	ldw	r2,-32588(gp)
802174a8:	10800044 	addi	r2,r2,1
802174ac:	d0a02d15 	stw	r2,-32588(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
802174b0:	00002e06 	br	8021756c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
802174b4:	e0bffd17 	ldw	r2,-12(fp)
802174b8:	10800017 	ldw	r2,0(r2)
802174bc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
802174c0:	e0bffd17 	ldw	r2,-12(fp)
802174c4:	10800403 	ldbu	r2,16(r2)
802174c8:	10803fcc 	andi	r2,r2,255
802174cc:	10000426 	beq	r2,zero,802174e0 <alt_tick+0x54>
802174d0:	d0a02d17 	ldw	r2,-32588(gp)
802174d4:	1000021e 	bne	r2,zero,802174e0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
802174d8:	e0bffd17 	ldw	r2,-12(fp)
802174dc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
802174e0:	e0bffd17 	ldw	r2,-12(fp)
802174e4:	10800217 	ldw	r2,8(r2)
802174e8:	d0e02d17 	ldw	r3,-32588(gp)
802174ec:	18801d36 	bltu	r3,r2,80217564 <alt_tick+0xd8>
802174f0:	e0bffd17 	ldw	r2,-12(fp)
802174f4:	10800403 	ldbu	r2,16(r2)
802174f8:	10803fcc 	andi	r2,r2,255
802174fc:	1000191e 	bne	r2,zero,80217564 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
80217500:	e0bffd17 	ldw	r2,-12(fp)
80217504:	10800317 	ldw	r2,12(r2)
80217508:	e0fffd17 	ldw	r3,-12(fp)
8021750c:	18c00517 	ldw	r3,20(r3)
80217510:	1809883a 	mov	r4,r3
80217514:	103ee83a 	callr	r2
80217518:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
8021751c:	e0bfff17 	ldw	r2,-4(fp)
80217520:	1000031e 	bne	r2,zero,80217530 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
80217524:	e13ffd17 	ldw	r4,-12(fp)
80217528:	02173f00 	call	802173f0 <alt_alarm_stop>
8021752c:	00000d06 	br	80217564 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
80217530:	e0bffd17 	ldw	r2,-12(fp)
80217534:	10c00217 	ldw	r3,8(r2)
80217538:	e0bfff17 	ldw	r2,-4(fp)
8021753c:	1887883a 	add	r3,r3,r2
80217540:	e0bffd17 	ldw	r2,-12(fp)
80217544:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
80217548:	e0bffd17 	ldw	r2,-12(fp)
8021754c:	10c00217 	ldw	r3,8(r2)
80217550:	d0a02d17 	ldw	r2,-32588(gp)
80217554:	1880032e 	bgeu	r3,r2,80217564 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
80217558:	e0bffd17 	ldw	r2,-12(fp)
8021755c:	00c00044 	movi	r3,1
80217560:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
80217564:	e0bffe17 	ldw	r2,-8(fp)
80217568:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8021756c:	e0fffd17 	ldw	r3,-12(fp)
80217570:	d0a00f04 	addi	r2,gp,-32708
80217574:	18bfcf1e 	bne	r3,r2,802174b4 <__reset+0xfa1f74b4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
80217578:	0001883a 	nop
}
8021757c:	0001883a 	nop
80217580:	e037883a 	mov	sp,fp
80217584:	dfc00117 	ldw	ra,4(sp)
80217588:	df000017 	ldw	fp,0(sp)
8021758c:	dec00204 	addi	sp,sp,8
80217590:	f800283a 	ret

80217594 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
80217594:	defffd04 	addi	sp,sp,-12
80217598:	dfc00215 	stw	ra,8(sp)
8021759c:	df000115 	stw	fp,4(sp)
802175a0:	df000104 	addi	fp,sp,4
802175a4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
802175a8:	e13fff17 	ldw	r4,-4(fp)
802175ac:	0216a040 	call	80216a04 <alt_busy_sleep>
}
802175b0:	e037883a 	mov	sp,fp
802175b4:	dfc00117 	ldw	ra,4(sp)
802175b8:	df000017 	ldw	fp,0(sp)
802175bc:	dec00204 	addi	sp,sp,8
802175c0:	f800283a 	ret

802175c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
802175c4:	defffe04 	addi	sp,sp,-8
802175c8:	dfc00115 	stw	ra,4(sp)
802175cc:	df000015 	stw	fp,0(sp)
802175d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
802175d4:	d0a00c17 	ldw	r2,-32720(gp)
802175d8:	10000326 	beq	r2,zero,802175e8 <alt_get_errno+0x24>
802175dc:	d0a00c17 	ldw	r2,-32720(gp)
802175e0:	103ee83a 	callr	r2
802175e4:	00000106 	br	802175ec <alt_get_errno+0x28>
802175e8:	d0a02704 	addi	r2,gp,-32612
}
802175ec:	e037883a 	mov	sp,fp
802175f0:	dfc00117 	ldw	ra,4(sp)
802175f4:	df000017 	ldw	fp,0(sp)
802175f8:	dec00204 	addi	sp,sp,8
802175fc:	f800283a 	ret

80217600 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
80217600:	defff904 	addi	sp,sp,-28
80217604:	dfc00615 	stw	ra,24(sp)
80217608:	df000515 	stw	fp,20(sp)
8021760c:	df000504 	addi	fp,sp,20
80217610:	e13ffd15 	stw	r4,-12(fp)
80217614:	e17ffe15 	stw	r5,-8(fp)
80217618:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8021761c:	e0bffd17 	ldw	r2,-12(fp)
80217620:	10000616 	blt	r2,zero,8021763c <write+0x3c>
80217624:	e0bffd17 	ldw	r2,-12(fp)
80217628:	10c00324 	muli	r3,r2,12
8021762c:	00a008b4 	movhi	r2,32802
80217630:	10b99304 	addi	r2,r2,-6580
80217634:	1885883a 	add	r2,r3,r2
80217638:	00000106 	br	80217640 <write+0x40>
8021763c:	0005883a 	mov	r2,zero
80217640:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
80217644:	e0bffb17 	ldw	r2,-20(fp)
80217648:	10002126 	beq	r2,zero,802176d0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
8021764c:	e0bffb17 	ldw	r2,-20(fp)
80217650:	10800217 	ldw	r2,8(r2)
80217654:	108000cc 	andi	r2,r2,3
80217658:	10001826 	beq	r2,zero,802176bc <write+0xbc>
8021765c:	e0bffb17 	ldw	r2,-20(fp)
80217660:	10800017 	ldw	r2,0(r2)
80217664:	10800617 	ldw	r2,24(r2)
80217668:	10001426 	beq	r2,zero,802176bc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
8021766c:	e0bffb17 	ldw	r2,-20(fp)
80217670:	10800017 	ldw	r2,0(r2)
80217674:	10800617 	ldw	r2,24(r2)
80217678:	e0ffff17 	ldw	r3,-4(fp)
8021767c:	180d883a 	mov	r6,r3
80217680:	e17ffe17 	ldw	r5,-8(fp)
80217684:	e13ffb17 	ldw	r4,-20(fp)
80217688:	103ee83a 	callr	r2
8021768c:	e0bffc15 	stw	r2,-16(fp)
80217690:	e0bffc17 	ldw	r2,-16(fp)
80217694:	1000070e 	bge	r2,zero,802176b4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
80217698:	02175c40 	call	802175c4 <alt_get_errno>
8021769c:	1007883a 	mov	r3,r2
802176a0:	e0bffc17 	ldw	r2,-16(fp)
802176a4:	0085c83a 	sub	r2,zero,r2
802176a8:	18800015 	stw	r2,0(r3)
        return -1;
802176ac:	00bfffc4 	movi	r2,-1
802176b0:	00000c06 	br	802176e4 <write+0xe4>
      }
      return rval;
802176b4:	e0bffc17 	ldw	r2,-16(fp)
802176b8:	00000a06 	br	802176e4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
802176bc:	02175c40 	call	802175c4 <alt_get_errno>
802176c0:	1007883a 	mov	r3,r2
802176c4:	00800344 	movi	r2,13
802176c8:	18800015 	stw	r2,0(r3)
802176cc:	00000406 	br	802176e0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
802176d0:	02175c40 	call	802175c4 <alt_get_errno>
802176d4:	1007883a 	mov	r3,r2
802176d8:	00801444 	movi	r2,81
802176dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
802176e0:	00bfffc4 	movi	r2,-1
}
802176e4:	e037883a 	mov	sp,fp
802176e8:	dfc00117 	ldw	ra,4(sp)
802176ec:	df000017 	ldw	fp,0(sp)
802176f0:	dec00204 	addi	sp,sp,8
802176f4:	f800283a 	ret

802176f8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
802176f8:	defffd04 	addi	sp,sp,-12
802176fc:	dfc00215 	stw	ra,8(sp)
80217700:	df000115 	stw	fp,4(sp)
80217704:	df000104 	addi	fp,sp,4
80217708:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
8021770c:	d1600904 	addi	r5,gp,-32732
80217710:	e13fff17 	ldw	r4,-4(fp)
80217714:	021adb00 	call	8021adb0 <alt_dev_llist_insert>
}
80217718:	e037883a 	mov	sp,fp
8021771c:	dfc00117 	ldw	ra,4(sp)
80217720:	df000017 	ldw	fp,0(sp)
80217724:	dec00204 	addi	sp,sp,8
80217728:	f800283a 	ret

8021772c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
8021772c:	defffd04 	addi	sp,sp,-12
80217730:	dfc00215 	stw	ra,8(sp)
80217734:	df000115 	stw	fp,4(sp)
80217738:	df000104 	addi	fp,sp,4
8021773c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
80217740:	021b8400 	call	8021b840 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
80217744:	00800044 	movi	r2,1
80217748:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
8021774c:	0001883a 	nop
80217750:	e037883a 	mov	sp,fp
80217754:	dfc00117 	ldw	ra,4(sp)
80217758:	df000017 	ldw	fp,0(sp)
8021775c:	dec00204 	addi	sp,sp,8
80217760:	f800283a 	ret

80217764 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
80217764:	defffe04 	addi	sp,sp,-8
80217768:	dfc00115 	stw	ra,4(sp)
8021776c:	df000015 	stw	fp,0(sp)
80217770:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
80217774:	01c0fa04 	movi	r7,1000
80217778:	01800144 	movi	r6,5
8021777c:	000b883a 	mov	r5,zero
80217780:	01204034 	movhi	r4,33024
80217784:	21011004 	addi	r4,r4,1088
80217788:	021832c0 	call	8021832c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
8021778c:	01800084 	movi	r6,2
80217790:	000b883a 	mov	r5,zero
80217794:	012008b4 	movhi	r4,32802
80217798:	2139fe04 	addi	r4,r4,-6152
8021779c:	02179b00 	call	802179b0 <altera_avalon_jtag_uart_init>
802177a0:	012008b4 	movhi	r4,32802
802177a4:	2139f404 	addi	r4,r4,-6192
802177a8:	02176f80 	call	802176f8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
802177ac:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
802177b0:	01800104 	movi	r6,4
802177b4:	000b883a 	mov	r5,zero
802177b8:	012008b4 	movhi	r4,32802
802177bc:	213e1604 	addi	r4,r4,-1960
802177c0:	02184b80 	call	802184b8 <altera_avalon_uart_init>
802177c4:	012008b4 	movhi	r4,32802
802177c8:	213e0c04 	addi	r4,r4,-2000
802177cc:	02176f80 	call	802176f8 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
802177d0:	00a008b4 	movhi	r2,32802
802177d4:	10be4004 	addi	r2,r2,-1792
802177d8:	10c00717 	ldw	r3,28(r2)
802177dc:	00a008b4 	movhi	r2,32802
802177e0:	10be4004 	addi	r2,r2,-1792
802177e4:	10800817 	ldw	r2,32(r2)
802177e8:	100d883a 	mov	r6,r2
802177ec:	180b883a 	mov	r5,r3
802177f0:	012008b4 	movhi	r4,32802
802177f4:	213e4004 	addi	r4,r4,-1792
802177f8:	021a9700 	call	8021a970 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
802177fc:	00a008b4 	movhi	r2,32802
80217800:	10be5804 	addi	r2,r2,-1696
80217804:	10c00717 	ldw	r3,28(r2)
80217808:	00a008b4 	movhi	r2,32802
8021780c:	10be5804 	addi	r2,r2,-1696
80217810:	10800817 	ldw	r2,32(r2)
80217814:	100d883a 	mov	r6,r2
80217818:	180b883a 	mov	r5,r3
8021781c:	012008b4 	movhi	r4,32802
80217820:	213e5804 	addi	r4,r4,-1696
80217824:	021a9700 	call	8021a970 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
80217828:	012008b4 	movhi	r4,32802
8021782c:	213e7004 	addi	r4,r4,-1600
80217830:	02176f80 	call	802176f8 <alt_dev_reg>
}
80217834:	0001883a 	nop
80217838:	e037883a 	mov	sp,fp
8021783c:	dfc00117 	ldw	ra,4(sp)
80217840:	df000017 	ldw	fp,0(sp)
80217844:	dec00204 	addi	sp,sp,8
80217848:	f800283a 	ret

8021784c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8021784c:	defffa04 	addi	sp,sp,-24
80217850:	dfc00515 	stw	ra,20(sp)
80217854:	df000415 	stw	fp,16(sp)
80217858:	df000404 	addi	fp,sp,16
8021785c:	e13ffd15 	stw	r4,-12(fp)
80217860:	e17ffe15 	stw	r5,-8(fp)
80217864:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80217868:	e0bffd17 	ldw	r2,-12(fp)
8021786c:	10800017 	ldw	r2,0(r2)
80217870:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
80217874:	e0bffc17 	ldw	r2,-16(fp)
80217878:	10c00a04 	addi	r3,r2,40
8021787c:	e0bffd17 	ldw	r2,-12(fp)
80217880:	10800217 	ldw	r2,8(r2)
80217884:	100f883a 	mov	r7,r2
80217888:	e1bfff17 	ldw	r6,-4(fp)
8021788c:	e17ffe17 	ldw	r5,-8(fp)
80217890:	1809883a 	mov	r4,r3
80217894:	0217e740 	call	80217e74 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
80217898:	e037883a 	mov	sp,fp
8021789c:	dfc00117 	ldw	ra,4(sp)
802178a0:	df000017 	ldw	fp,0(sp)
802178a4:	dec00204 	addi	sp,sp,8
802178a8:	f800283a 	ret

802178ac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
802178ac:	defffa04 	addi	sp,sp,-24
802178b0:	dfc00515 	stw	ra,20(sp)
802178b4:	df000415 	stw	fp,16(sp)
802178b8:	df000404 	addi	fp,sp,16
802178bc:	e13ffd15 	stw	r4,-12(fp)
802178c0:	e17ffe15 	stw	r5,-8(fp)
802178c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
802178c8:	e0bffd17 	ldw	r2,-12(fp)
802178cc:	10800017 	ldw	r2,0(r2)
802178d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
802178d4:	e0bffc17 	ldw	r2,-16(fp)
802178d8:	10c00a04 	addi	r3,r2,40
802178dc:	e0bffd17 	ldw	r2,-12(fp)
802178e0:	10800217 	ldw	r2,8(r2)
802178e4:	100f883a 	mov	r7,r2
802178e8:	e1bfff17 	ldw	r6,-4(fp)
802178ec:	e17ffe17 	ldw	r5,-8(fp)
802178f0:	1809883a 	mov	r4,r3
802178f4:	02180900 	call	80218090 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
802178f8:	e037883a 	mov	sp,fp
802178fc:	dfc00117 	ldw	ra,4(sp)
80217900:	df000017 	ldw	fp,0(sp)
80217904:	dec00204 	addi	sp,sp,8
80217908:	f800283a 	ret

8021790c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
8021790c:	defffc04 	addi	sp,sp,-16
80217910:	dfc00315 	stw	ra,12(sp)
80217914:	df000215 	stw	fp,8(sp)
80217918:	df000204 	addi	fp,sp,8
8021791c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80217920:	e0bfff17 	ldw	r2,-4(fp)
80217924:	10800017 	ldw	r2,0(r2)
80217928:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
8021792c:	e0bffe17 	ldw	r2,-8(fp)
80217930:	10c00a04 	addi	r3,r2,40
80217934:	e0bfff17 	ldw	r2,-4(fp)
80217938:	10800217 	ldw	r2,8(r2)
8021793c:	100b883a 	mov	r5,r2
80217940:	1809883a 	mov	r4,r3
80217944:	0217d1c0 	call	80217d1c <altera_avalon_jtag_uart_close>
}
80217948:	e037883a 	mov	sp,fp
8021794c:	dfc00117 	ldw	ra,4(sp)
80217950:	df000017 	ldw	fp,0(sp)
80217954:	dec00204 	addi	sp,sp,8
80217958:	f800283a 	ret

8021795c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
8021795c:	defffa04 	addi	sp,sp,-24
80217960:	dfc00515 	stw	ra,20(sp)
80217964:	df000415 	stw	fp,16(sp)
80217968:	df000404 	addi	fp,sp,16
8021796c:	e13ffd15 	stw	r4,-12(fp)
80217970:	e17ffe15 	stw	r5,-8(fp)
80217974:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
80217978:	e0bffd17 	ldw	r2,-12(fp)
8021797c:	10800017 	ldw	r2,0(r2)
80217980:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
80217984:	e0bffc17 	ldw	r2,-16(fp)
80217988:	10800a04 	addi	r2,r2,40
8021798c:	e1bfff17 	ldw	r6,-4(fp)
80217990:	e17ffe17 	ldw	r5,-8(fp)
80217994:	1009883a 	mov	r4,r2
80217998:	0217d840 	call	80217d84 <altera_avalon_jtag_uart_ioctl>
}
8021799c:	e037883a 	mov	sp,fp
802179a0:	dfc00117 	ldw	ra,4(sp)
802179a4:	df000017 	ldw	fp,0(sp)
802179a8:	dec00204 	addi	sp,sp,8
802179ac:	f800283a 	ret

802179b0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
802179b0:	defffa04 	addi	sp,sp,-24
802179b4:	dfc00515 	stw	ra,20(sp)
802179b8:	df000415 	stw	fp,16(sp)
802179bc:	df000404 	addi	fp,sp,16
802179c0:	e13ffd15 	stw	r4,-12(fp)
802179c4:	e17ffe15 	stw	r5,-8(fp)
802179c8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
802179cc:	e0bffd17 	ldw	r2,-12(fp)
802179d0:	00c00044 	movi	r3,1
802179d4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
802179d8:	e0bffd17 	ldw	r2,-12(fp)
802179dc:	10800017 	ldw	r2,0(r2)
802179e0:	10800104 	addi	r2,r2,4
802179e4:	1007883a 	mov	r3,r2
802179e8:	e0bffd17 	ldw	r2,-12(fp)
802179ec:	10800817 	ldw	r2,32(r2)
802179f0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
802179f4:	e0bffe17 	ldw	r2,-8(fp)
802179f8:	e0ffff17 	ldw	r3,-4(fp)
802179fc:	d8000015 	stw	zero,0(sp)
80217a00:	e1fffd17 	ldw	r7,-12(fp)
80217a04:	01a00874 	movhi	r6,32801
80217a08:	319e9c04 	addi	r6,r6,31344
80217a0c:	180b883a 	mov	r5,r3
80217a10:	1009883a 	mov	r4,r2
80217a14:	021afa40 	call	8021afa4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
80217a18:	e0bffd17 	ldw	r2,-12(fp)
80217a1c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
80217a20:	e0bffd17 	ldw	r2,-12(fp)
80217a24:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80217a28:	d0e02c17 	ldw	r3,-32592(gp)
80217a2c:	e1fffd17 	ldw	r7,-12(fp)
80217a30:	01a00874 	movhi	r6,32801
80217a34:	319f1f04 	addi	r6,r6,31868
80217a38:	180b883a 	mov	r5,r3
80217a3c:	1009883a 	mov	r4,r2
80217a40:	021ac200 	call	8021ac20 <alt_alarm_start>
80217a44:	1000040e 	bge	r2,zero,80217a58 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
80217a48:	e0fffd17 	ldw	r3,-12(fp)
80217a4c:	00a00034 	movhi	r2,32768
80217a50:	10bfffc4 	addi	r2,r2,-1
80217a54:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
80217a58:	0001883a 	nop
80217a5c:	e037883a 	mov	sp,fp
80217a60:	dfc00117 	ldw	ra,4(sp)
80217a64:	df000017 	ldw	fp,0(sp)
80217a68:	dec00204 	addi	sp,sp,8
80217a6c:	f800283a 	ret

80217a70 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
80217a70:	defff804 	addi	sp,sp,-32
80217a74:	df000715 	stw	fp,28(sp)
80217a78:	df000704 	addi	fp,sp,28
80217a7c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
80217a80:	e0bfff17 	ldw	r2,-4(fp)
80217a84:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
80217a88:	e0bffb17 	ldw	r2,-20(fp)
80217a8c:	10800017 	ldw	r2,0(r2)
80217a90:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80217a94:	e0bffc17 	ldw	r2,-16(fp)
80217a98:	10800104 	addi	r2,r2,4
80217a9c:	10800037 	ldwio	r2,0(r2)
80217aa0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
80217aa4:	e0bffd17 	ldw	r2,-12(fp)
80217aa8:	1080c00c 	andi	r2,r2,768
80217aac:	10006d26 	beq	r2,zero,80217c64 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
80217ab0:	e0bffd17 	ldw	r2,-12(fp)
80217ab4:	1080400c 	andi	r2,r2,256
80217ab8:	10003526 	beq	r2,zero,80217b90 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
80217abc:	00800074 	movhi	r2,1
80217ac0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80217ac4:	e0bffb17 	ldw	r2,-20(fp)
80217ac8:	10800a17 	ldw	r2,40(r2)
80217acc:	10800044 	addi	r2,r2,1
80217ad0:	1081ffcc 	andi	r2,r2,2047
80217ad4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
80217ad8:	e0bffb17 	ldw	r2,-20(fp)
80217adc:	10c00b17 	ldw	r3,44(r2)
80217ae0:	e0bffe17 	ldw	r2,-8(fp)
80217ae4:	18801526 	beq	r3,r2,80217b3c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
80217ae8:	e0bffc17 	ldw	r2,-16(fp)
80217aec:	10800037 	ldwio	r2,0(r2)
80217af0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
80217af4:	e0bff917 	ldw	r2,-28(fp)
80217af8:	10a0000c 	andi	r2,r2,32768
80217afc:	10001126 	beq	r2,zero,80217b44 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
80217b00:	e0bffb17 	ldw	r2,-20(fp)
80217b04:	10800a17 	ldw	r2,40(r2)
80217b08:	e0fff917 	ldw	r3,-28(fp)
80217b0c:	1809883a 	mov	r4,r3
80217b10:	e0fffb17 	ldw	r3,-20(fp)
80217b14:	1885883a 	add	r2,r3,r2
80217b18:	10800e04 	addi	r2,r2,56
80217b1c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80217b20:	e0bffb17 	ldw	r2,-20(fp)
80217b24:	10800a17 	ldw	r2,40(r2)
80217b28:	10800044 	addi	r2,r2,1
80217b2c:	10c1ffcc 	andi	r3,r2,2047
80217b30:	e0bffb17 	ldw	r2,-20(fp)
80217b34:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
80217b38:	003fe206 	br	80217ac4 <__reset+0xfa1f7ac4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
80217b3c:	0001883a 	nop
80217b40:	00000106 	br	80217b48 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
80217b44:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
80217b48:	e0bff917 	ldw	r2,-28(fp)
80217b4c:	10bfffec 	andhi	r2,r2,65535
80217b50:	10000f26 	beq	r2,zero,80217b90 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80217b54:	e0bffb17 	ldw	r2,-20(fp)
80217b58:	10c00817 	ldw	r3,32(r2)
80217b5c:	00bfff84 	movi	r2,-2
80217b60:	1886703a 	and	r3,r3,r2
80217b64:	e0bffb17 	ldw	r2,-20(fp)
80217b68:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
80217b6c:	e0bffc17 	ldw	r2,-16(fp)
80217b70:	10800104 	addi	r2,r2,4
80217b74:	1007883a 	mov	r3,r2
80217b78:	e0bffb17 	ldw	r2,-20(fp)
80217b7c:	10800817 	ldw	r2,32(r2)
80217b80:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80217b84:	e0bffc17 	ldw	r2,-16(fp)
80217b88:	10800104 	addi	r2,r2,4
80217b8c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
80217b90:	e0bffd17 	ldw	r2,-12(fp)
80217b94:	1080800c 	andi	r2,r2,512
80217b98:	103fbe26 	beq	r2,zero,80217a94 <__reset+0xfa1f7a94>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
80217b9c:	e0bffd17 	ldw	r2,-12(fp)
80217ba0:	1004d43a 	srli	r2,r2,16
80217ba4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
80217ba8:	00001406 	br	80217bfc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
80217bac:	e0bffc17 	ldw	r2,-16(fp)
80217bb0:	e0fffb17 	ldw	r3,-20(fp)
80217bb4:	18c00d17 	ldw	r3,52(r3)
80217bb8:	e13ffb17 	ldw	r4,-20(fp)
80217bbc:	20c7883a 	add	r3,r4,r3
80217bc0:	18c20e04 	addi	r3,r3,2104
80217bc4:	18c00003 	ldbu	r3,0(r3)
80217bc8:	18c03fcc 	andi	r3,r3,255
80217bcc:	18c0201c 	xori	r3,r3,128
80217bd0:	18ffe004 	addi	r3,r3,-128
80217bd4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80217bd8:	e0bffb17 	ldw	r2,-20(fp)
80217bdc:	10800d17 	ldw	r2,52(r2)
80217be0:	10800044 	addi	r2,r2,1
80217be4:	10c1ffcc 	andi	r3,r2,2047
80217be8:	e0bffb17 	ldw	r2,-20(fp)
80217bec:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
80217bf0:	e0bffa17 	ldw	r2,-24(fp)
80217bf4:	10bfffc4 	addi	r2,r2,-1
80217bf8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
80217bfc:	e0bffa17 	ldw	r2,-24(fp)
80217c00:	10000526 	beq	r2,zero,80217c18 <altera_avalon_jtag_uart_irq+0x1a8>
80217c04:	e0bffb17 	ldw	r2,-20(fp)
80217c08:	10c00d17 	ldw	r3,52(r2)
80217c0c:	e0bffb17 	ldw	r2,-20(fp)
80217c10:	10800c17 	ldw	r2,48(r2)
80217c14:	18bfe51e 	bne	r3,r2,80217bac <__reset+0xfa1f7bac>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
80217c18:	e0bffa17 	ldw	r2,-24(fp)
80217c1c:	103f9d26 	beq	r2,zero,80217a94 <__reset+0xfa1f7a94>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
80217c20:	e0bffb17 	ldw	r2,-20(fp)
80217c24:	10c00817 	ldw	r3,32(r2)
80217c28:	00bfff44 	movi	r2,-3
80217c2c:	1886703a 	and	r3,r3,r2
80217c30:	e0bffb17 	ldw	r2,-20(fp)
80217c34:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80217c38:	e0bffb17 	ldw	r2,-20(fp)
80217c3c:	10800017 	ldw	r2,0(r2)
80217c40:	10800104 	addi	r2,r2,4
80217c44:	1007883a 	mov	r3,r2
80217c48:	e0bffb17 	ldw	r2,-20(fp)
80217c4c:	10800817 	ldw	r2,32(r2)
80217c50:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80217c54:	e0bffc17 	ldw	r2,-16(fp)
80217c58:	10800104 	addi	r2,r2,4
80217c5c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
80217c60:	003f8c06 	br	80217a94 <__reset+0xfa1f7a94>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
80217c64:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
80217c68:	0001883a 	nop
80217c6c:	e037883a 	mov	sp,fp
80217c70:	df000017 	ldw	fp,0(sp)
80217c74:	dec00104 	addi	sp,sp,4
80217c78:	f800283a 	ret

80217c7c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
80217c7c:	defff804 	addi	sp,sp,-32
80217c80:	df000715 	stw	fp,28(sp)
80217c84:	df000704 	addi	fp,sp,28
80217c88:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
80217c8c:	e0bffb17 	ldw	r2,-20(fp)
80217c90:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
80217c94:	e0bff917 	ldw	r2,-28(fp)
80217c98:	10800017 	ldw	r2,0(r2)
80217c9c:	10800104 	addi	r2,r2,4
80217ca0:	10800037 	ldwio	r2,0(r2)
80217ca4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
80217ca8:	e0bffa17 	ldw	r2,-24(fp)
80217cac:	1081000c 	andi	r2,r2,1024
80217cb0:	10000b26 	beq	r2,zero,80217ce0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
80217cb4:	e0bff917 	ldw	r2,-28(fp)
80217cb8:	10800017 	ldw	r2,0(r2)
80217cbc:	10800104 	addi	r2,r2,4
80217cc0:	1007883a 	mov	r3,r2
80217cc4:	e0bff917 	ldw	r2,-28(fp)
80217cc8:	10800817 	ldw	r2,32(r2)
80217ccc:	10810014 	ori	r2,r2,1024
80217cd0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
80217cd4:	e0bff917 	ldw	r2,-28(fp)
80217cd8:	10000915 	stw	zero,36(r2)
80217cdc:	00000a06 	br	80217d08 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
80217ce0:	e0bff917 	ldw	r2,-28(fp)
80217ce4:	10c00917 	ldw	r3,36(r2)
80217ce8:	00a00034 	movhi	r2,32768
80217cec:	10bfff04 	addi	r2,r2,-4
80217cf0:	10c00536 	bltu	r2,r3,80217d08 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
80217cf4:	e0bff917 	ldw	r2,-28(fp)
80217cf8:	10800917 	ldw	r2,36(r2)
80217cfc:	10c00044 	addi	r3,r2,1
80217d00:	e0bff917 	ldw	r2,-28(fp)
80217d04:	10c00915 	stw	r3,36(r2)
80217d08:	d0a02c17 	ldw	r2,-32592(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
80217d0c:	e037883a 	mov	sp,fp
80217d10:	df000017 	ldw	fp,0(sp)
80217d14:	dec00104 	addi	sp,sp,4
80217d18:	f800283a 	ret

80217d1c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
80217d1c:	defffd04 	addi	sp,sp,-12
80217d20:	df000215 	stw	fp,8(sp)
80217d24:	df000204 	addi	fp,sp,8
80217d28:	e13ffe15 	stw	r4,-8(fp)
80217d2c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
80217d30:	00000506 	br	80217d48 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
80217d34:	e0bfff17 	ldw	r2,-4(fp)
80217d38:	1090000c 	andi	r2,r2,16384
80217d3c:	10000226 	beq	r2,zero,80217d48 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
80217d40:	00bffd44 	movi	r2,-11
80217d44:	00000b06 	br	80217d74 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
80217d48:	e0bffe17 	ldw	r2,-8(fp)
80217d4c:	10c00d17 	ldw	r3,52(r2)
80217d50:	e0bffe17 	ldw	r2,-8(fp)
80217d54:	10800c17 	ldw	r2,48(r2)
80217d58:	18800526 	beq	r3,r2,80217d70 <altera_avalon_jtag_uart_close+0x54>
80217d5c:	e0bffe17 	ldw	r2,-8(fp)
80217d60:	10c00917 	ldw	r3,36(r2)
80217d64:	e0bffe17 	ldw	r2,-8(fp)
80217d68:	10800117 	ldw	r2,4(r2)
80217d6c:	18bff136 	bltu	r3,r2,80217d34 <__reset+0xfa1f7d34>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
80217d70:	0005883a 	mov	r2,zero
}
80217d74:	e037883a 	mov	sp,fp
80217d78:	df000017 	ldw	fp,0(sp)
80217d7c:	dec00104 	addi	sp,sp,4
80217d80:	f800283a 	ret

80217d84 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
80217d84:	defffa04 	addi	sp,sp,-24
80217d88:	df000515 	stw	fp,20(sp)
80217d8c:	df000504 	addi	fp,sp,20
80217d90:	e13ffd15 	stw	r4,-12(fp)
80217d94:	e17ffe15 	stw	r5,-8(fp)
80217d98:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
80217d9c:	00bff9c4 	movi	r2,-25
80217da0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
80217da4:	e0bffe17 	ldw	r2,-8(fp)
80217da8:	10da8060 	cmpeqi	r3,r2,27137
80217dac:	1800031e 	bne	r3,zero,80217dbc <altera_avalon_jtag_uart_ioctl+0x38>
80217db0:	109a80a0 	cmpeqi	r2,r2,27138
80217db4:	1000181e 	bne	r2,zero,80217e18 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
80217db8:	00002906 	br	80217e60 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
80217dbc:	e0bffd17 	ldw	r2,-12(fp)
80217dc0:	10c00117 	ldw	r3,4(r2)
80217dc4:	00a00034 	movhi	r2,32768
80217dc8:	10bfffc4 	addi	r2,r2,-1
80217dcc:	18802126 	beq	r3,r2,80217e54 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
80217dd0:	e0bfff17 	ldw	r2,-4(fp)
80217dd4:	10800017 	ldw	r2,0(r2)
80217dd8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
80217ddc:	e0bffc17 	ldw	r2,-16(fp)
80217de0:	10800090 	cmplti	r2,r2,2
80217de4:	1000061e 	bne	r2,zero,80217e00 <altera_avalon_jtag_uart_ioctl+0x7c>
80217de8:	e0fffc17 	ldw	r3,-16(fp)
80217dec:	00a00034 	movhi	r2,32768
80217df0:	10bfffc4 	addi	r2,r2,-1
80217df4:	18800226 	beq	r3,r2,80217e00 <altera_avalon_jtag_uart_ioctl+0x7c>
80217df8:	e0bffc17 	ldw	r2,-16(fp)
80217dfc:	00000206 	br	80217e08 <altera_avalon_jtag_uart_ioctl+0x84>
80217e00:	00a00034 	movhi	r2,32768
80217e04:	10bfff84 	addi	r2,r2,-2
80217e08:	e0fffd17 	ldw	r3,-12(fp)
80217e0c:	18800115 	stw	r2,4(r3)
      rc = 0;
80217e10:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
80217e14:	00000f06 	br	80217e54 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
80217e18:	e0bffd17 	ldw	r2,-12(fp)
80217e1c:	10c00117 	ldw	r3,4(r2)
80217e20:	00a00034 	movhi	r2,32768
80217e24:	10bfffc4 	addi	r2,r2,-1
80217e28:	18800c26 	beq	r3,r2,80217e5c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
80217e2c:	e0bffd17 	ldw	r2,-12(fp)
80217e30:	10c00917 	ldw	r3,36(r2)
80217e34:	e0bffd17 	ldw	r2,-12(fp)
80217e38:	10800117 	ldw	r2,4(r2)
80217e3c:	1885803a 	cmpltu	r2,r3,r2
80217e40:	10c03fcc 	andi	r3,r2,255
80217e44:	e0bfff17 	ldw	r2,-4(fp)
80217e48:	10c00015 	stw	r3,0(r2)
      rc = 0;
80217e4c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
80217e50:	00000206 	br	80217e5c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
80217e54:	0001883a 	nop
80217e58:	00000106 	br	80217e60 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
80217e5c:	0001883a 	nop

  default:
    break;
  }

  return rc;
80217e60:	e0bffb17 	ldw	r2,-20(fp)
}
80217e64:	e037883a 	mov	sp,fp
80217e68:	df000017 	ldw	fp,0(sp)
80217e6c:	dec00104 	addi	sp,sp,4
80217e70:	f800283a 	ret

80217e74 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
80217e74:	defff304 	addi	sp,sp,-52
80217e78:	dfc00c15 	stw	ra,48(sp)
80217e7c:	df000b15 	stw	fp,44(sp)
80217e80:	df000b04 	addi	fp,sp,44
80217e84:	e13ffc15 	stw	r4,-16(fp)
80217e88:	e17ffd15 	stw	r5,-12(fp)
80217e8c:	e1bffe15 	stw	r6,-8(fp)
80217e90:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
80217e94:	e0bffd17 	ldw	r2,-12(fp)
80217e98:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
80217e9c:	00004706 	br	80217fbc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
80217ea0:	e0bffc17 	ldw	r2,-16(fp)
80217ea4:	10800a17 	ldw	r2,40(r2)
80217ea8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
80217eac:	e0bffc17 	ldw	r2,-16(fp)
80217eb0:	10800b17 	ldw	r2,44(r2)
80217eb4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
80217eb8:	e0fff717 	ldw	r3,-36(fp)
80217ebc:	e0bff817 	ldw	r2,-32(fp)
80217ec0:	18800536 	bltu	r3,r2,80217ed8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
80217ec4:	e0fff717 	ldw	r3,-36(fp)
80217ec8:	e0bff817 	ldw	r2,-32(fp)
80217ecc:	1885c83a 	sub	r2,r3,r2
80217ed0:	e0bff615 	stw	r2,-40(fp)
80217ed4:	00000406 	br	80217ee8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
80217ed8:	00c20004 	movi	r3,2048
80217edc:	e0bff817 	ldw	r2,-32(fp)
80217ee0:	1885c83a 	sub	r2,r3,r2
80217ee4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
80217ee8:	e0bff617 	ldw	r2,-40(fp)
80217eec:	10001e26 	beq	r2,zero,80217f68 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
80217ef0:	e0fffe17 	ldw	r3,-8(fp)
80217ef4:	e0bff617 	ldw	r2,-40(fp)
80217ef8:	1880022e 	bgeu	r3,r2,80217f04 <altera_avalon_jtag_uart_read+0x90>
        n = space;
80217efc:	e0bffe17 	ldw	r2,-8(fp)
80217f00:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
80217f04:	e0bffc17 	ldw	r2,-16(fp)
80217f08:	10c00e04 	addi	r3,r2,56
80217f0c:	e0bff817 	ldw	r2,-32(fp)
80217f10:	1885883a 	add	r2,r3,r2
80217f14:	e1bff617 	ldw	r6,-40(fp)
80217f18:	100b883a 	mov	r5,r2
80217f1c:	e13ff517 	ldw	r4,-44(fp)
80217f20:	0206aa00 	call	80206aa0 <memcpy>
      ptr   += n;
80217f24:	e0fff517 	ldw	r3,-44(fp)
80217f28:	e0bff617 	ldw	r2,-40(fp)
80217f2c:	1885883a 	add	r2,r3,r2
80217f30:	e0bff515 	stw	r2,-44(fp)
      space -= n;
80217f34:	e0fffe17 	ldw	r3,-8(fp)
80217f38:	e0bff617 	ldw	r2,-40(fp)
80217f3c:	1885c83a 	sub	r2,r3,r2
80217f40:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80217f44:	e0fff817 	ldw	r3,-32(fp)
80217f48:	e0bff617 	ldw	r2,-40(fp)
80217f4c:	1885883a 	add	r2,r3,r2
80217f50:	10c1ffcc 	andi	r3,r2,2047
80217f54:	e0bffc17 	ldw	r2,-16(fp)
80217f58:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
80217f5c:	e0bffe17 	ldw	r2,-8(fp)
80217f60:	00bfcf16 	blt	zero,r2,80217ea0 <__reset+0xfa1f7ea0>
80217f64:	00000106 	br	80217f6c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
80217f68:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
80217f6c:	e0fff517 	ldw	r3,-44(fp)
80217f70:	e0bffd17 	ldw	r2,-12(fp)
80217f74:	1880141e 	bne	r3,r2,80217fc8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
80217f78:	e0bfff17 	ldw	r2,-4(fp)
80217f7c:	1090000c 	andi	r2,r2,16384
80217f80:	1000131e 	bne	r2,zero,80217fd0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
80217f84:	0001883a 	nop
80217f88:	e0bffc17 	ldw	r2,-16(fp)
80217f8c:	10c00a17 	ldw	r3,40(r2)
80217f90:	e0bff717 	ldw	r2,-36(fp)
80217f94:	1880051e 	bne	r3,r2,80217fac <altera_avalon_jtag_uart_read+0x138>
80217f98:	e0bffc17 	ldw	r2,-16(fp)
80217f9c:	10c00917 	ldw	r3,36(r2)
80217fa0:	e0bffc17 	ldw	r2,-16(fp)
80217fa4:	10800117 	ldw	r2,4(r2)
80217fa8:	18bff736 	bltu	r3,r2,80217f88 <__reset+0xfa1f7f88>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
80217fac:	e0bffc17 	ldw	r2,-16(fp)
80217fb0:	10c00a17 	ldw	r3,40(r2)
80217fb4:	e0bff717 	ldw	r2,-36(fp)
80217fb8:	18800726 	beq	r3,r2,80217fd8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
80217fbc:	e0bffe17 	ldw	r2,-8(fp)
80217fc0:	00bfb716 	blt	zero,r2,80217ea0 <__reset+0xfa1f7ea0>
80217fc4:	00000506 	br	80217fdc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
80217fc8:	0001883a 	nop
80217fcc:	00000306 	br	80217fdc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
80217fd0:	0001883a 	nop
80217fd4:	00000106 	br	80217fdc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
80217fd8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
80217fdc:	e0fff517 	ldw	r3,-44(fp)
80217fe0:	e0bffd17 	ldw	r2,-12(fp)
80217fe4:	18801826 	beq	r3,r2,80218048 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217fe8:	0005303a 	rdctl	r2,status
80217fec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80217ff0:	e0fffb17 	ldw	r3,-20(fp)
80217ff4:	00bfff84 	movi	r2,-2
80217ff8:	1884703a 	and	r2,r3,r2
80217ffc:	1001703a 	wrctl	status,r2
  
  return context;
80218000:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
80218004:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80218008:	e0bffc17 	ldw	r2,-16(fp)
8021800c:	10800817 	ldw	r2,32(r2)
80218010:	10c00054 	ori	r3,r2,1
80218014:	e0bffc17 	ldw	r2,-16(fp)
80218018:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8021801c:	e0bffc17 	ldw	r2,-16(fp)
80218020:	10800017 	ldw	r2,0(r2)
80218024:	10800104 	addi	r2,r2,4
80218028:	1007883a 	mov	r3,r2
8021802c:	e0bffc17 	ldw	r2,-16(fp)
80218030:	10800817 	ldw	r2,32(r2)
80218034:	18800035 	stwio	r2,0(r3)
80218038:	e0bffa17 	ldw	r2,-24(fp)
8021803c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218040:	e0bff917 	ldw	r2,-28(fp)
80218044:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
80218048:	e0fff517 	ldw	r3,-44(fp)
8021804c:	e0bffd17 	ldw	r2,-12(fp)
80218050:	18800426 	beq	r3,r2,80218064 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
80218054:	e0fff517 	ldw	r3,-44(fp)
80218058:	e0bffd17 	ldw	r2,-12(fp)
8021805c:	1885c83a 	sub	r2,r3,r2
80218060:	00000606 	br	8021807c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
80218064:	e0bfff17 	ldw	r2,-4(fp)
80218068:	1090000c 	andi	r2,r2,16384
8021806c:	10000226 	beq	r2,zero,80218078 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
80218070:	00bffd44 	movi	r2,-11
80218074:	00000106 	br	8021807c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
80218078:	00bffec4 	movi	r2,-5
}
8021807c:	e037883a 	mov	sp,fp
80218080:	dfc00117 	ldw	ra,4(sp)
80218084:	df000017 	ldw	fp,0(sp)
80218088:	dec00204 	addi	sp,sp,8
8021808c:	f800283a 	ret

80218090 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
80218090:	defff304 	addi	sp,sp,-52
80218094:	dfc00c15 	stw	ra,48(sp)
80218098:	df000b15 	stw	fp,44(sp)
8021809c:	df000b04 	addi	fp,sp,44
802180a0:	e13ffc15 	stw	r4,-16(fp)
802180a4:	e17ffd15 	stw	r5,-12(fp)
802180a8:	e1bffe15 	stw	r6,-8(fp)
802180ac:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
802180b0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
802180b4:	e0bffd17 	ldw	r2,-12(fp)
802180b8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
802180bc:	00003706 	br	8021819c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
802180c0:	e0bffc17 	ldw	r2,-16(fp)
802180c4:	10800c17 	ldw	r2,48(r2)
802180c8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
802180cc:	e0bffc17 	ldw	r2,-16(fp)
802180d0:	10800d17 	ldw	r2,52(r2)
802180d4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
802180d8:	e0fff917 	ldw	r3,-28(fp)
802180dc:	e0bff517 	ldw	r2,-44(fp)
802180e0:	1880062e 	bgeu	r3,r2,802180fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
802180e4:	e0fff517 	ldw	r3,-44(fp)
802180e8:	e0bff917 	ldw	r2,-28(fp)
802180ec:	1885c83a 	sub	r2,r3,r2
802180f0:	10bfffc4 	addi	r2,r2,-1
802180f4:	e0bff615 	stw	r2,-40(fp)
802180f8:	00000b06 	br	80218128 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
802180fc:	e0bff517 	ldw	r2,-44(fp)
80218100:	10000526 	beq	r2,zero,80218118 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
80218104:	00c20004 	movi	r3,2048
80218108:	e0bff917 	ldw	r2,-28(fp)
8021810c:	1885c83a 	sub	r2,r3,r2
80218110:	e0bff615 	stw	r2,-40(fp)
80218114:	00000406 	br	80218128 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
80218118:	00c1ffc4 	movi	r3,2047
8021811c:	e0bff917 	ldw	r2,-28(fp)
80218120:	1885c83a 	sub	r2,r3,r2
80218124:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
80218128:	e0bff617 	ldw	r2,-40(fp)
8021812c:	10001e26 	beq	r2,zero,802181a8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
80218130:	e0fffe17 	ldw	r3,-8(fp)
80218134:	e0bff617 	ldw	r2,-40(fp)
80218138:	1880022e 	bgeu	r3,r2,80218144 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
8021813c:	e0bffe17 	ldw	r2,-8(fp)
80218140:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
80218144:	e0bffc17 	ldw	r2,-16(fp)
80218148:	10c20e04 	addi	r3,r2,2104
8021814c:	e0bff917 	ldw	r2,-28(fp)
80218150:	1885883a 	add	r2,r3,r2
80218154:	e1bff617 	ldw	r6,-40(fp)
80218158:	e17ffd17 	ldw	r5,-12(fp)
8021815c:	1009883a 	mov	r4,r2
80218160:	0206aa00 	call	80206aa0 <memcpy>
      ptr   += n;
80218164:	e0fffd17 	ldw	r3,-12(fp)
80218168:	e0bff617 	ldw	r2,-40(fp)
8021816c:	1885883a 	add	r2,r3,r2
80218170:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
80218174:	e0fffe17 	ldw	r3,-8(fp)
80218178:	e0bff617 	ldw	r2,-40(fp)
8021817c:	1885c83a 	sub	r2,r3,r2
80218180:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80218184:	e0fff917 	ldw	r3,-28(fp)
80218188:	e0bff617 	ldw	r2,-40(fp)
8021818c:	1885883a 	add	r2,r3,r2
80218190:	10c1ffcc 	andi	r3,r2,2047
80218194:	e0bffc17 	ldw	r2,-16(fp)
80218198:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8021819c:	e0bffe17 	ldw	r2,-8(fp)
802181a0:	00bfc716 	blt	zero,r2,802180c0 <__reset+0xfa1f80c0>
802181a4:	00000106 	br	802181ac <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
802181a8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802181ac:	0005303a 	rdctl	r2,status
802181b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802181b4:	e0fffb17 	ldw	r3,-20(fp)
802181b8:	00bfff84 	movi	r2,-2
802181bc:	1884703a 	and	r2,r3,r2
802181c0:	1001703a 	wrctl	status,r2
  
  return context;
802181c4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
802181c8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
802181cc:	e0bffc17 	ldw	r2,-16(fp)
802181d0:	10800817 	ldw	r2,32(r2)
802181d4:	10c00094 	ori	r3,r2,2
802181d8:	e0bffc17 	ldw	r2,-16(fp)
802181dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
802181e0:	e0bffc17 	ldw	r2,-16(fp)
802181e4:	10800017 	ldw	r2,0(r2)
802181e8:	10800104 	addi	r2,r2,4
802181ec:	1007883a 	mov	r3,r2
802181f0:	e0bffc17 	ldw	r2,-16(fp)
802181f4:	10800817 	ldw	r2,32(r2)
802181f8:	18800035 	stwio	r2,0(r3)
802181fc:	e0bffa17 	ldw	r2,-24(fp)
80218200:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218204:	e0bff817 	ldw	r2,-32(fp)
80218208:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
8021820c:	e0bffe17 	ldw	r2,-8(fp)
80218210:	0080100e 	bge	zero,r2,80218254 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
80218214:	e0bfff17 	ldw	r2,-4(fp)
80218218:	1090000c 	andi	r2,r2,16384
8021821c:	1000101e 	bne	r2,zero,80218260 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
80218220:	0001883a 	nop
80218224:	e0bffc17 	ldw	r2,-16(fp)
80218228:	10c00d17 	ldw	r3,52(r2)
8021822c:	e0bff517 	ldw	r2,-44(fp)
80218230:	1880051e 	bne	r3,r2,80218248 <altera_avalon_jtag_uart_write+0x1b8>
80218234:	e0bffc17 	ldw	r2,-16(fp)
80218238:	10c00917 	ldw	r3,36(r2)
8021823c:	e0bffc17 	ldw	r2,-16(fp)
80218240:	10800117 	ldw	r2,4(r2)
80218244:	18bff736 	bltu	r3,r2,80218224 <__reset+0xfa1f8224>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
80218248:	e0bffc17 	ldw	r2,-16(fp)
8021824c:	10800917 	ldw	r2,36(r2)
80218250:	1000051e 	bne	r2,zero,80218268 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
80218254:	e0bffe17 	ldw	r2,-8(fp)
80218258:	00bfd016 	blt	zero,r2,8021819c <__reset+0xfa1f819c>
8021825c:	00000306 	br	8021826c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
80218260:	0001883a 	nop
80218264:	00000106 	br	8021826c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
80218268:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
8021826c:	e0fffd17 	ldw	r3,-12(fp)
80218270:	e0bff717 	ldw	r2,-36(fp)
80218274:	18800426 	beq	r3,r2,80218288 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
80218278:	e0fffd17 	ldw	r3,-12(fp)
8021827c:	e0bff717 	ldw	r2,-36(fp)
80218280:	1885c83a 	sub	r2,r3,r2
80218284:	00000606 	br	802182a0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
80218288:	e0bfff17 	ldw	r2,-4(fp)
8021828c:	1090000c 	andi	r2,r2,16384
80218290:	10000226 	beq	r2,zero,8021829c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
80218294:	00bffd44 	movi	r2,-11
80218298:	00000106 	br	802182a0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
8021829c:	00bffec4 	movi	r2,-5
}
802182a0:	e037883a 	mov	sp,fp
802182a4:	dfc00117 	ldw	ra,4(sp)
802182a8:	df000017 	ldw	fp,0(sp)
802182ac:	dec00204 	addi	sp,sp,8
802182b0:	f800283a 	ret

802182b4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
802182b4:	defffa04 	addi	sp,sp,-24
802182b8:	dfc00515 	stw	ra,20(sp)
802182bc:	df000415 	stw	fp,16(sp)
802182c0:	df000404 	addi	fp,sp,16
802182c4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
802182c8:	0007883a 	mov	r3,zero
802182cc:	e0bfff17 	ldw	r2,-4(fp)
802182d0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
802182d4:	e0bfff17 	ldw	r2,-4(fp)
802182d8:	10800104 	addi	r2,r2,4
802182dc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802182e0:	0005303a 	rdctl	r2,status
802182e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802182e8:	e0fffd17 	ldw	r3,-12(fp)
802182ec:	00bfff84 	movi	r2,-2
802182f0:	1884703a 	and	r2,r3,r2
802182f4:	1001703a 	wrctl	status,r2
  
  return context;
802182f8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
802182fc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
80218300:	021748c0 	call	8021748c <alt_tick>
80218304:	e0bffc17 	ldw	r2,-16(fp)
80218308:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021830c:	e0bffe17 	ldw	r2,-8(fp)
80218310:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
80218314:	0001883a 	nop
80218318:	e037883a 	mov	sp,fp
8021831c:	dfc00117 	ldw	ra,4(sp)
80218320:	df000017 	ldw	fp,0(sp)
80218324:	dec00204 	addi	sp,sp,8
80218328:	f800283a 	ret

8021832c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
8021832c:	defff804 	addi	sp,sp,-32
80218330:	dfc00715 	stw	ra,28(sp)
80218334:	df000615 	stw	fp,24(sp)
80218338:	df000604 	addi	fp,sp,24
8021833c:	e13ffc15 	stw	r4,-16(fp)
80218340:	e17ffd15 	stw	r5,-12(fp)
80218344:	e1bffe15 	stw	r6,-8(fp)
80218348:	e1ffff15 	stw	r7,-4(fp)
8021834c:	e0bfff17 	ldw	r2,-4(fp)
80218350:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
80218354:	d0a02c17 	ldw	r2,-32592(gp)
80218358:	1000021e 	bne	r2,zero,80218364 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
8021835c:	e0bffb17 	ldw	r2,-20(fp)
80218360:	d0a02c15 	stw	r2,-32592(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
80218364:	e0bffc17 	ldw	r2,-16(fp)
80218368:	10800104 	addi	r2,r2,4
8021836c:	00c001c4 	movi	r3,7
80218370:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
80218374:	d8000015 	stw	zero,0(sp)
80218378:	e1fffc17 	ldw	r7,-16(fp)
8021837c:	01a008b4 	movhi	r6,32802
80218380:	31a0ad04 	addi	r6,r6,-32076
80218384:	e17ffe17 	ldw	r5,-8(fp)
80218388:	e13ffd17 	ldw	r4,-12(fp)
8021838c:	021afa40 	call	8021afa4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
80218390:	0001883a 	nop
80218394:	e037883a 	mov	sp,fp
80218398:	dfc00117 	ldw	ra,4(sp)
8021839c:	df000017 	ldw	fp,0(sp)
802183a0:	dec00204 	addi	sp,sp,8
802183a4:	f800283a 	ret

802183a8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
802183a8:	defffa04 	addi	sp,sp,-24
802183ac:	dfc00515 	stw	ra,20(sp)
802183b0:	df000415 	stw	fp,16(sp)
802183b4:	df000404 	addi	fp,sp,16
802183b8:	e13ffd15 	stw	r4,-12(fp)
802183bc:	e17ffe15 	stw	r5,-8(fp)
802183c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
802183c4:	e0bffd17 	ldw	r2,-12(fp)
802183c8:	10800017 	ldw	r2,0(r2)
802183cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
802183d0:	e0bffc17 	ldw	r2,-16(fp)
802183d4:	10c00a04 	addi	r3,r2,40
802183d8:	e0bffd17 	ldw	r2,-12(fp)
802183dc:	10800217 	ldw	r2,8(r2)
802183e0:	100f883a 	mov	r7,r2
802183e4:	e1bfff17 	ldw	r6,-4(fp)
802183e8:	e17ffe17 	ldw	r5,-8(fp)
802183ec:	1809883a 	mov	r4,r3
802183f0:	02188bc0 	call	802188bc <altera_avalon_uart_read>
      fd->fd_flags);
}
802183f4:	e037883a 	mov	sp,fp
802183f8:	dfc00117 	ldw	ra,4(sp)
802183fc:	df000017 	ldw	fp,0(sp)
80218400:	dec00204 	addi	sp,sp,8
80218404:	f800283a 	ret

80218408 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
80218408:	defffa04 	addi	sp,sp,-24
8021840c:	dfc00515 	stw	ra,20(sp)
80218410:	df000415 	stw	fp,16(sp)
80218414:	df000404 	addi	fp,sp,16
80218418:	e13ffd15 	stw	r4,-12(fp)
8021841c:	e17ffe15 	stw	r5,-8(fp)
80218420:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
80218424:	e0bffd17 	ldw	r2,-12(fp)
80218428:	10800017 	ldw	r2,0(r2)
8021842c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
80218430:	e0bffc17 	ldw	r2,-16(fp)
80218434:	10c00a04 	addi	r3,r2,40
80218438:	e0bffd17 	ldw	r2,-12(fp)
8021843c:	10800217 	ldw	r2,8(r2)
80218440:	100f883a 	mov	r7,r2
80218444:	e1bfff17 	ldw	r6,-4(fp)
80218448:	e17ffe17 	ldw	r5,-8(fp)
8021844c:	1809883a 	mov	r4,r3
80218450:	0218ad40 	call	80218ad4 <altera_avalon_uart_write>
      fd->fd_flags);
}
80218454:	e037883a 	mov	sp,fp
80218458:	dfc00117 	ldw	ra,4(sp)
8021845c:	df000017 	ldw	fp,0(sp)
80218460:	dec00204 	addi	sp,sp,8
80218464:	f800283a 	ret

80218468 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
80218468:	defffc04 	addi	sp,sp,-16
8021846c:	dfc00315 	stw	ra,12(sp)
80218470:	df000215 	stw	fp,8(sp)
80218474:	df000204 	addi	fp,sp,8
80218478:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8021847c:	e0bfff17 	ldw	r2,-4(fp)
80218480:	10800017 	ldw	r2,0(r2)
80218484:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
80218488:	e0bffe17 	ldw	r2,-8(fp)
8021848c:	10c00a04 	addi	r3,r2,40
80218490:	e0bfff17 	ldw	r2,-4(fp)
80218494:	10800217 	ldw	r2,8(r2)
80218498:	100b883a 	mov	r5,r2
8021849c:	1809883a 	mov	r4,r3
802184a0:	021882c0 	call	8021882c <altera_avalon_uart_close>
}
802184a4:	e037883a 	mov	sp,fp
802184a8:	dfc00117 	ldw	ra,4(sp)
802184ac:	df000017 	ldw	fp,0(sp)
802184b0:	dec00204 	addi	sp,sp,8
802184b4:	f800283a 	ret

802184b8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
802184b8:	defff804 	addi	sp,sp,-32
802184bc:	dfc00715 	stw	ra,28(sp)
802184c0:	df000615 	stw	fp,24(sp)
802184c4:	df000604 	addi	fp,sp,24
802184c8:	e13ffd15 	stw	r4,-12(fp)
802184cc:	e17ffe15 	stw	r5,-8(fp)
802184d0:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
802184d4:	e0bffd17 	ldw	r2,-12(fp)
802184d8:	10800017 	ldw	r2,0(r2)
802184dc:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
802184e0:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
802184e4:	1000041e 	bne	r2,zero,802184f8 <altera_avalon_uart_init+0x40>
802184e8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
802184ec:	1000021e 	bne	r2,zero,802184f8 <altera_avalon_uart_init+0x40>
802184f0:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
802184f4:	10000226 	beq	r2,zero,80218500 <altera_avalon_uart_init+0x48>
802184f8:	00800044 	movi	r2,1
802184fc:	00000106 	br	80218504 <altera_avalon_uart_init+0x4c>
80218500:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
80218504:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
80218508:	e0bffc17 	ldw	r2,-16(fp)
8021850c:	10000f1e 	bne	r2,zero,8021854c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
80218510:	e0bffd17 	ldw	r2,-12(fp)
80218514:	00c32004 	movi	r3,3200
80218518:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
8021851c:	e0bffb17 	ldw	r2,-20(fp)
80218520:	10800304 	addi	r2,r2,12
80218524:	e0fffd17 	ldw	r3,-12(fp)
80218528:	18c00117 	ldw	r3,4(r3)
8021852c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
80218530:	d8000015 	stw	zero,0(sp)
80218534:	e1fffd17 	ldw	r7,-12(fp)
80218538:	01a008b4 	movhi	r6,32802
8021853c:	31a15904 	addi	r6,r6,-31388
80218540:	e17fff17 	ldw	r5,-4(fp)
80218544:	e13ffe17 	ldw	r4,-8(fp)
80218548:	021afa40 	call	8021afa4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
8021854c:	0001883a 	nop
80218550:	e037883a 	mov	sp,fp
80218554:	dfc00117 	ldw	ra,4(sp)
80218558:	df000017 	ldw	fp,0(sp)
8021855c:	dec00204 	addi	sp,sp,8
80218560:	f800283a 	ret

80218564 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
80218564:	defffa04 	addi	sp,sp,-24
80218568:	dfc00515 	stw	ra,20(sp)
8021856c:	df000415 	stw	fp,16(sp)
80218570:	df000404 	addi	fp,sp,16
80218574:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
80218578:	e0bfff17 	ldw	r2,-4(fp)
8021857c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
80218580:	e0bffc17 	ldw	r2,-16(fp)
80218584:	10800017 	ldw	r2,0(r2)
80218588:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
8021858c:	e0bffd17 	ldw	r2,-12(fp)
80218590:	10800204 	addi	r2,r2,8
80218594:	10800037 	ldwio	r2,0(r2)
80218598:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
8021859c:	e0bffd17 	ldw	r2,-12(fp)
802185a0:	10800204 	addi	r2,r2,8
802185a4:	0007883a 	mov	r3,zero
802185a8:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
802185ac:	e0bffd17 	ldw	r2,-12(fp)
802185b0:	10800204 	addi	r2,r2,8
802185b4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
802185b8:	e0bffe17 	ldw	r2,-8(fp)
802185bc:	1080200c 	andi	r2,r2,128
802185c0:	10000326 	beq	r2,zero,802185d0 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
802185c4:	e17ffe17 	ldw	r5,-8(fp)
802185c8:	e13ffc17 	ldw	r4,-16(fp)
802185cc:	02186000 	call	80218600 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
802185d0:	e0bffe17 	ldw	r2,-8(fp)
802185d4:	1081100c 	andi	r2,r2,1088
802185d8:	10000326 	beq	r2,zero,802185e8 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
802185dc:	e17ffe17 	ldw	r5,-8(fp)
802185e0:	e13ffc17 	ldw	r4,-16(fp)
802185e4:	02186e40 	call	802186e4 <altera_avalon_uart_txirq>
  }
  

}
802185e8:	0001883a 	nop
802185ec:	e037883a 	mov	sp,fp
802185f0:	dfc00117 	ldw	ra,4(sp)
802185f4:	df000017 	ldw	fp,0(sp)
802185f8:	dec00204 	addi	sp,sp,8
802185fc:	f800283a 	ret

80218600 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
80218600:	defffc04 	addi	sp,sp,-16
80218604:	df000315 	stw	fp,12(sp)
80218608:	df000304 	addi	fp,sp,12
8021860c:	e13ffe15 	stw	r4,-8(fp)
80218610:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
80218614:	e0bfff17 	ldw	r2,-4(fp)
80218618:	108000cc 	andi	r2,r2,3
8021861c:	10002c1e 	bne	r2,zero,802186d0 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
80218620:	e0bffe17 	ldw	r2,-8(fp)
80218624:	10800317 	ldw	r2,12(r2)
80218628:	e0bffe17 	ldw	r2,-8(fp)
8021862c:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
80218630:	e0bffe17 	ldw	r2,-8(fp)
80218634:	10800317 	ldw	r2,12(r2)
80218638:	10800044 	addi	r2,r2,1
8021863c:	10800fcc 	andi	r2,r2,63
80218640:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
80218644:	e0bffe17 	ldw	r2,-8(fp)
80218648:	10800317 	ldw	r2,12(r2)
8021864c:	e0fffe17 	ldw	r3,-8(fp)
80218650:	18c00017 	ldw	r3,0(r3)
80218654:	18c00037 	ldwio	r3,0(r3)
80218658:	1809883a 	mov	r4,r3
8021865c:	e0fffe17 	ldw	r3,-8(fp)
80218660:	1885883a 	add	r2,r3,r2
80218664:	10800704 	addi	r2,r2,28
80218668:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
8021866c:	e0bffe17 	ldw	r2,-8(fp)
80218670:	e0fffd17 	ldw	r3,-12(fp)
80218674:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
80218678:	e0bffe17 	ldw	r2,-8(fp)
8021867c:	10800317 	ldw	r2,12(r2)
80218680:	10800044 	addi	r2,r2,1
80218684:	10800fcc 	andi	r2,r2,63
80218688:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
8021868c:	e0bffe17 	ldw	r2,-8(fp)
80218690:	10c00217 	ldw	r3,8(r2)
80218694:	e0bffd17 	ldw	r2,-12(fp)
80218698:	18800e1e 	bne	r3,r2,802186d4 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8021869c:	e0bffe17 	ldw	r2,-8(fp)
802186a0:	10c00117 	ldw	r3,4(r2)
802186a4:	00bfdfc4 	movi	r2,-129
802186a8:	1886703a 	and	r3,r3,r2
802186ac:	e0bffe17 	ldw	r2,-8(fp)
802186b0:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
802186b4:	e0bffe17 	ldw	r2,-8(fp)
802186b8:	10800017 	ldw	r2,0(r2)
802186bc:	10800304 	addi	r2,r2,12
802186c0:	e0fffe17 	ldw	r3,-8(fp)
802186c4:	18c00117 	ldw	r3,4(r3)
802186c8:	10c00035 	stwio	r3,0(r2)
802186cc:	00000106 	br	802186d4 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
802186d0:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
802186d4:	e037883a 	mov	sp,fp
802186d8:	df000017 	ldw	fp,0(sp)
802186dc:	dec00104 	addi	sp,sp,4
802186e0:	f800283a 	ret

802186e4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
802186e4:	defffb04 	addi	sp,sp,-20
802186e8:	df000415 	stw	fp,16(sp)
802186ec:	df000404 	addi	fp,sp,16
802186f0:	e13ffc15 	stw	r4,-16(fp)
802186f4:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
802186f8:	e0bffc17 	ldw	r2,-16(fp)
802186fc:	10c00417 	ldw	r3,16(r2)
80218700:	e0bffc17 	ldw	r2,-16(fp)
80218704:	10800517 	ldw	r2,20(r2)
80218708:	18803226 	beq	r3,r2,802187d4 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
8021870c:	e0bffc17 	ldw	r2,-16(fp)
80218710:	10800617 	ldw	r2,24(r2)
80218714:	1080008c 	andi	r2,r2,2
80218718:	10000326 	beq	r2,zero,80218728 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
8021871c:	e0bffd17 	ldw	r2,-12(fp)
80218720:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
80218724:	10001d26 	beq	r2,zero,8021879c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
80218728:	e0bffc17 	ldw	r2,-16(fp)
8021872c:	10800417 	ldw	r2,16(r2)
80218730:	e0bffc17 	ldw	r2,-16(fp)
80218734:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
80218738:	e0bffc17 	ldw	r2,-16(fp)
8021873c:	10800017 	ldw	r2,0(r2)
80218740:	10800104 	addi	r2,r2,4
80218744:	e0fffc17 	ldw	r3,-16(fp)
80218748:	18c00417 	ldw	r3,16(r3)
8021874c:	e13ffc17 	ldw	r4,-16(fp)
80218750:	20c7883a 	add	r3,r4,r3
80218754:	18c01704 	addi	r3,r3,92
80218758:	18c00003 	ldbu	r3,0(r3)
8021875c:	18c03fcc 	andi	r3,r3,255
80218760:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
80218764:	e0bffc17 	ldw	r2,-16(fp)
80218768:	10800417 	ldw	r2,16(r2)
8021876c:	10800044 	addi	r2,r2,1
80218770:	e0fffc17 	ldw	r3,-16(fp)
80218774:	18800415 	stw	r2,16(r3)
80218778:	10c00fcc 	andi	r3,r2,63
8021877c:	e0bffc17 	ldw	r2,-16(fp)
80218780:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
80218784:	e0bffc17 	ldw	r2,-16(fp)
80218788:	10800117 	ldw	r2,4(r2)
8021878c:	10c01014 	ori	r3,r2,64
80218790:	e0bffc17 	ldw	r2,-16(fp)
80218794:	10c00115 	stw	r3,4(r2)
80218798:	00000e06 	br	802187d4 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
8021879c:	e0bffc17 	ldw	r2,-16(fp)
802187a0:	10800017 	ldw	r2,0(r2)
802187a4:	10800204 	addi	r2,r2,8
802187a8:	10800037 	ldwio	r2,0(r2)
802187ac:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
802187b0:	e0bffd17 	ldw	r2,-12(fp)
802187b4:	1082000c 	andi	r2,r2,2048
802187b8:	1000061e 	bne	r2,zero,802187d4 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
802187bc:	e0bffc17 	ldw	r2,-16(fp)
802187c0:	10c00117 	ldw	r3,4(r2)
802187c4:	00bfefc4 	movi	r2,-65
802187c8:	1886703a 	and	r3,r3,r2
802187cc:	e0bffc17 	ldw	r2,-16(fp)
802187d0:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
802187d4:	e0bffc17 	ldw	r2,-16(fp)
802187d8:	10c00417 	ldw	r3,16(r2)
802187dc:	e0bffc17 	ldw	r2,-16(fp)
802187e0:	10800517 	ldw	r2,20(r2)
802187e4:	1880061e 	bne	r3,r2,80218800 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
802187e8:	e0bffc17 	ldw	r2,-16(fp)
802187ec:	10c00117 	ldw	r3,4(r2)
802187f0:	00beefc4 	movi	r2,-1089
802187f4:	1886703a 	and	r3,r3,r2
802187f8:	e0bffc17 	ldw	r2,-16(fp)
802187fc:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80218800:	e0bffc17 	ldw	r2,-16(fp)
80218804:	10800017 	ldw	r2,0(r2)
80218808:	10800304 	addi	r2,r2,12
8021880c:	e0fffc17 	ldw	r3,-16(fp)
80218810:	18c00117 	ldw	r3,4(r3)
80218814:	10c00035 	stwio	r3,0(r2)
}
80218818:	0001883a 	nop
8021881c:	e037883a 	mov	sp,fp
80218820:	df000017 	ldw	fp,0(sp)
80218824:	dec00104 	addi	sp,sp,4
80218828:	f800283a 	ret

8021882c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
8021882c:	defffd04 	addi	sp,sp,-12
80218830:	df000215 	stw	fp,8(sp)
80218834:	df000204 	addi	fp,sp,8
80218838:	e13ffe15 	stw	r4,-8(fp)
8021883c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
80218840:	00000506 	br	80218858 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
80218844:	e0bfff17 	ldw	r2,-4(fp)
80218848:	1090000c 	andi	r2,r2,16384
8021884c:	10000226 	beq	r2,zero,80218858 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
80218850:	00bffd44 	movi	r2,-11
80218854:	00000606 	br	80218870 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
80218858:	e0bffe17 	ldw	r2,-8(fp)
8021885c:	10c00417 	ldw	r3,16(r2)
80218860:	e0bffe17 	ldw	r2,-8(fp)
80218864:	10800517 	ldw	r2,20(r2)
80218868:	18bff61e 	bne	r3,r2,80218844 <__reset+0xfa1f8844>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8021886c:	0005883a 	mov	r2,zero
}
80218870:	e037883a 	mov	sp,fp
80218874:	df000017 	ldw	fp,0(sp)
80218878:	dec00104 	addi	sp,sp,4
8021887c:	f800283a 	ret

80218880 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80218880:	defffe04 	addi	sp,sp,-8
80218884:	dfc00115 	stw	ra,4(sp)
80218888:	df000015 	stw	fp,0(sp)
8021888c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80218890:	d0a00c17 	ldw	r2,-32720(gp)
80218894:	10000326 	beq	r2,zero,802188a4 <alt_get_errno+0x24>
80218898:	d0a00c17 	ldw	r2,-32720(gp)
8021889c:	103ee83a 	callr	r2
802188a0:	00000106 	br	802188a8 <alt_get_errno+0x28>
802188a4:	d0a02704 	addi	r2,gp,-32612
}
802188a8:	e037883a 	mov	sp,fp
802188ac:	dfc00117 	ldw	ra,4(sp)
802188b0:	df000017 	ldw	fp,0(sp)
802188b4:	dec00204 	addi	sp,sp,8
802188b8:	f800283a 	ret

802188bc <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
802188bc:	defff204 	addi	sp,sp,-56
802188c0:	dfc00d15 	stw	ra,52(sp)
802188c4:	df000c15 	stw	fp,48(sp)
802188c8:	df000c04 	addi	fp,sp,48
802188cc:	e13ffc15 	stw	r4,-16(fp)
802188d0:	e17ffd15 	stw	r5,-12(fp)
802188d4:	e1bffe15 	stw	r6,-8(fp)
802188d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
802188dc:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
802188e0:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
802188e4:	e0bfff17 	ldw	r2,-4(fp)
802188e8:	1090000c 	andi	r2,r2,16384
802188ec:	1005003a 	cmpeq	r2,r2,zero
802188f0:	10803fcc 	andi	r2,r2,255
802188f4:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
802188f8:	00001306 	br	80218948 <altera_avalon_uart_read+0x8c>
    {
      count++;
802188fc:	e0bff517 	ldw	r2,-44(fp)
80218900:	10800044 	addi	r2,r2,1
80218904:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
80218908:	e0bffd17 	ldw	r2,-12(fp)
8021890c:	10c00044 	addi	r3,r2,1
80218910:	e0fffd15 	stw	r3,-12(fp)
80218914:	e0fffc17 	ldw	r3,-16(fp)
80218918:	18c00217 	ldw	r3,8(r3)
8021891c:	e13ffc17 	ldw	r4,-16(fp)
80218920:	20c7883a 	add	r3,r4,r3
80218924:	18c00704 	addi	r3,r3,28
80218928:	18c00003 	ldbu	r3,0(r3)
8021892c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
80218930:	e0bffc17 	ldw	r2,-16(fp)
80218934:	10800217 	ldw	r2,8(r2)
80218938:	10800044 	addi	r2,r2,1
8021893c:	10c00fcc 	andi	r3,r2,63
80218940:	e0bffc17 	ldw	r2,-16(fp)
80218944:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
80218948:	e0fff517 	ldw	r3,-44(fp)
8021894c:	e0bffe17 	ldw	r2,-8(fp)
80218950:	1880050e 	bge	r3,r2,80218968 <altera_avalon_uart_read+0xac>
80218954:	e0bffc17 	ldw	r2,-16(fp)
80218958:	10c00217 	ldw	r3,8(r2)
8021895c:	e0bffc17 	ldw	r2,-16(fp)
80218960:	10800317 	ldw	r2,12(r2)
80218964:	18bfe51e 	bne	r3,r2,802188fc <__reset+0xfa1f88fc>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
80218968:	e0bff517 	ldw	r2,-44(fp)
8021896c:	1000251e 	bne	r2,zero,80218a04 <altera_avalon_uart_read+0x148>
80218970:	e0bffc17 	ldw	r2,-16(fp)
80218974:	10c00217 	ldw	r3,8(r2)
80218978:	e0bffc17 	ldw	r2,-16(fp)
8021897c:	10800317 	ldw	r2,12(r2)
80218980:	1880201e 	bne	r3,r2,80218a04 <altera_avalon_uart_read+0x148>
    {
      if (!block)
80218984:	e0bff617 	ldw	r2,-40(fp)
80218988:	1000071e 	bne	r2,zero,802189a8 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
8021898c:	02188800 	call	80218880 <alt_get_errno>
80218990:	1007883a 	mov	r3,r2
80218994:	008002c4 	movi	r2,11
80218998:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
8021899c:	00800044 	movi	r2,1
802189a0:	e0bff405 	stb	r2,-48(fp)
        break;
802189a4:	00001b06 	br	80218a14 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802189a8:	0005303a 	rdctl	r2,status
802189ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802189b0:	e0fff917 	ldw	r3,-28(fp)
802189b4:	00bfff84 	movi	r2,-2
802189b8:	1884703a 	and	r2,r3,r2
802189bc:	1001703a 	wrctl	status,r2
  
  return context;
802189c0:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
802189c4:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
802189c8:	e0bffc17 	ldw	r2,-16(fp)
802189cc:	10800117 	ldw	r2,4(r2)
802189d0:	10c02014 	ori	r3,r2,128
802189d4:	e0bffc17 	ldw	r2,-16(fp)
802189d8:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
802189dc:	e0bffc17 	ldw	r2,-16(fp)
802189e0:	10800017 	ldw	r2,0(r2)
802189e4:	10800304 	addi	r2,r2,12
802189e8:	e0fffc17 	ldw	r3,-16(fp)
802189ec:	18c00117 	ldw	r3,4(r3)
802189f0:	10c00035 	stwio	r3,0(r2)
802189f4:	e0bff817 	ldw	r2,-32(fp)
802189f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802189fc:	e0bffa17 	ldw	r2,-24(fp)
80218a00:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
80218a04:	e0bff517 	ldw	r2,-44(fp)
80218a08:	1000021e 	bne	r2,zero,80218a14 <altera_avalon_uart_read+0x158>
80218a0c:	e0bffe17 	ldw	r2,-8(fp)
80218a10:	103fcd1e 	bne	r2,zero,80218948 <__reset+0xfa1f8948>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218a14:	0005303a 	rdctl	r2,status
80218a18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218a1c:	e0fffb17 	ldw	r3,-20(fp)
80218a20:	00bfff84 	movi	r2,-2
80218a24:	1884703a 	and	r2,r3,r2
80218a28:	1001703a 	wrctl	status,r2
  
  return context;
80218a2c:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
80218a30:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
80218a34:	e0bffc17 	ldw	r2,-16(fp)
80218a38:	10800117 	ldw	r2,4(r2)
80218a3c:	10c02014 	ori	r3,r2,128
80218a40:	e0bffc17 	ldw	r2,-16(fp)
80218a44:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80218a48:	e0bffc17 	ldw	r2,-16(fp)
80218a4c:	10800017 	ldw	r2,0(r2)
80218a50:	10800304 	addi	r2,r2,12
80218a54:	e0fffc17 	ldw	r3,-16(fp)
80218a58:	18c00117 	ldw	r3,4(r3)
80218a5c:	10c00035 	stwio	r3,0(r2)
80218a60:	e0bff817 	ldw	r2,-32(fp)
80218a64:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218a68:	e0bff717 	ldw	r2,-36(fp)
80218a6c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
80218a70:	e0bff403 	ldbu	r2,-48(fp)
80218a74:	10000226 	beq	r2,zero,80218a80 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
80218a78:	00bffd44 	movi	r2,-11
80218a7c:	00000106 	br	80218a84 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
80218a80:	e0bff517 	ldw	r2,-44(fp)
  }
}
80218a84:	e037883a 	mov	sp,fp
80218a88:	dfc00117 	ldw	ra,4(sp)
80218a8c:	df000017 	ldw	fp,0(sp)
80218a90:	dec00204 	addi	sp,sp,8
80218a94:	f800283a 	ret

80218a98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80218a98:	defffe04 	addi	sp,sp,-8
80218a9c:	dfc00115 	stw	ra,4(sp)
80218aa0:	df000015 	stw	fp,0(sp)
80218aa4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80218aa8:	d0a00c17 	ldw	r2,-32720(gp)
80218aac:	10000326 	beq	r2,zero,80218abc <alt_get_errno+0x24>
80218ab0:	d0a00c17 	ldw	r2,-32720(gp)
80218ab4:	103ee83a 	callr	r2
80218ab8:	00000106 	br	80218ac0 <alt_get_errno+0x28>
80218abc:	d0a02704 	addi	r2,gp,-32612
}
80218ac0:	e037883a 	mov	sp,fp
80218ac4:	dfc00117 	ldw	ra,4(sp)
80218ac8:	df000017 	ldw	fp,0(sp)
80218acc:	dec00204 	addi	sp,sp,8
80218ad0:	f800283a 	ret

80218ad4 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
80218ad4:	defff204 	addi	sp,sp,-56
80218ad8:	dfc00d15 	stw	ra,52(sp)
80218adc:	df000c15 	stw	fp,48(sp)
80218ae0:	df000c04 	addi	fp,sp,48
80218ae4:	e13ffc15 	stw	r4,-16(fp)
80218ae8:	e17ffd15 	stw	r5,-12(fp)
80218aec:	e1bffe15 	stw	r6,-8(fp)
80218af0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
80218af4:	e0bffe17 	ldw	r2,-8(fp)
80218af8:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
80218afc:	e0bfff17 	ldw	r2,-4(fp)
80218b00:	1090000c 	andi	r2,r2,16384
80218b04:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
80218b08:	00003c06 	br	80218bfc <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
80218b0c:	e0bffc17 	ldw	r2,-16(fp)
80218b10:	10800517 	ldw	r2,20(r2)
80218b14:	10800044 	addi	r2,r2,1
80218b18:	10800fcc 	andi	r2,r2,63
80218b1c:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
80218b20:	e0bffc17 	ldw	r2,-16(fp)
80218b24:	10c00417 	ldw	r3,16(r2)
80218b28:	e0bff717 	ldw	r2,-36(fp)
80218b2c:	1880221e 	bne	r3,r2,80218bb8 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
80218b30:	e0bff517 	ldw	r2,-44(fp)
80218b34:	10000526 	beq	r2,zero,80218b4c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
80218b38:	0218a980 	call	80218a98 <alt_get_errno>
80218b3c:	1007883a 	mov	r3,r2
80218b40:	008002c4 	movi	r2,11
80218b44:	18800015 	stw	r2,0(r3)
        break;
80218b48:	00002e06 	br	80218c04 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218b4c:	0005303a 	rdctl	r2,status
80218b50:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218b54:	e0fff917 	ldw	r3,-28(fp)
80218b58:	00bfff84 	movi	r2,-2
80218b5c:	1884703a 	and	r2,r3,r2
80218b60:	1001703a 	wrctl	status,r2
  
  return context;
80218b64:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
80218b68:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
80218b6c:	e0bffc17 	ldw	r2,-16(fp)
80218b70:	10800117 	ldw	r2,4(r2)
80218b74:	10c11014 	ori	r3,r2,1088
80218b78:	e0bffc17 	ldw	r2,-16(fp)
80218b7c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80218b80:	e0bffc17 	ldw	r2,-16(fp)
80218b84:	10800017 	ldw	r2,0(r2)
80218b88:	10800304 	addi	r2,r2,12
80218b8c:	e0fffc17 	ldw	r3,-16(fp)
80218b90:	18c00117 	ldw	r3,4(r3)
80218b94:	10c00035 	stwio	r3,0(r2)
80218b98:	e0bff817 	ldw	r2,-32(fp)
80218b9c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218ba0:	e0bff617 	ldw	r2,-40(fp)
80218ba4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
80218ba8:	e0bffc17 	ldw	r2,-16(fp)
80218bac:	10c00417 	ldw	r3,16(r2)
80218bb0:	e0bff717 	ldw	r2,-36(fp)
80218bb4:	18bffc26 	beq	r3,r2,80218ba8 <__reset+0xfa1f8ba8>
      }
    }

    count--;
80218bb8:	e0bff417 	ldw	r2,-48(fp)
80218bbc:	10bfffc4 	addi	r2,r2,-1
80218bc0:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
80218bc4:	e0bffc17 	ldw	r2,-16(fp)
80218bc8:	10c00517 	ldw	r3,20(r2)
80218bcc:	e0bffd17 	ldw	r2,-12(fp)
80218bd0:	11000044 	addi	r4,r2,1
80218bd4:	e13ffd15 	stw	r4,-12(fp)
80218bd8:	10800003 	ldbu	r2,0(r2)
80218bdc:	1009883a 	mov	r4,r2
80218be0:	e0bffc17 	ldw	r2,-16(fp)
80218be4:	10c5883a 	add	r2,r2,r3
80218be8:	10801704 	addi	r2,r2,92
80218bec:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
80218bf0:	e0bffc17 	ldw	r2,-16(fp)
80218bf4:	e0fff717 	ldw	r3,-36(fp)
80218bf8:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
80218bfc:	e0bff417 	ldw	r2,-48(fp)
80218c00:	103fc21e 	bne	r2,zero,80218b0c <__reset+0xfa1f8b0c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218c04:	0005303a 	rdctl	r2,status
80218c08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218c0c:	e0fffb17 	ldw	r3,-20(fp)
80218c10:	00bfff84 	movi	r2,-2
80218c14:	1884703a 	and	r2,r3,r2
80218c18:	1001703a 	wrctl	status,r2
  
  return context;
80218c1c:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
80218c20:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
80218c24:	e0bffc17 	ldw	r2,-16(fp)
80218c28:	10800117 	ldw	r2,4(r2)
80218c2c:	10c11014 	ori	r3,r2,1088
80218c30:	e0bffc17 	ldw	r2,-16(fp)
80218c34:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80218c38:	e0bffc17 	ldw	r2,-16(fp)
80218c3c:	10800017 	ldw	r2,0(r2)
80218c40:	10800304 	addi	r2,r2,12
80218c44:	e0fffc17 	ldw	r3,-16(fp)
80218c48:	18c00117 	ldw	r3,4(r3)
80218c4c:	10c00035 	stwio	r3,0(r2)
80218c50:	e0bff817 	ldw	r2,-32(fp)
80218c54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218c58:	e0bffa17 	ldw	r2,-24(fp)
80218c5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
80218c60:	e0fffe17 	ldw	r3,-8(fp)
80218c64:	e0bff417 	ldw	r2,-48(fp)
80218c68:	1885c83a 	sub	r2,r3,r2
}
80218c6c:	e037883a 	mov	sp,fp
80218c70:	dfc00117 	ldw	ra,4(sp)
80218c74:	df000017 	ldw	fp,0(sp)
80218c78:	dec00204 	addi	sp,sp,8
80218c7c:	f800283a 	ret

80218c80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80218c80:	defffe04 	addi	sp,sp,-8
80218c84:	dfc00115 	stw	ra,4(sp)
80218c88:	df000015 	stw	fp,0(sp)
80218c8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80218c90:	d0a00c17 	ldw	r2,-32720(gp)
80218c94:	10000326 	beq	r2,zero,80218ca4 <alt_get_errno+0x24>
80218c98:	d0a00c17 	ldw	r2,-32720(gp)
80218c9c:	103ee83a 	callr	r2
80218ca0:	00000106 	br	80218ca8 <alt_get_errno+0x28>
80218ca4:	d0a02704 	addi	r2,gp,-32612
}
80218ca8:	e037883a 	mov	sp,fp
80218cac:	dfc00117 	ldw	ra,4(sp)
80218cb0:	df000017 	ldw	fp,0(sp)
80218cb4:	dec00204 	addi	sp,sp,8
80218cb8:	f800283a 	ret

80218cbc <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_standard_descriptor *descriptor)
{
80218cbc:	defffc04 	addi	sp,sp,-16
80218cc0:	df000315 	stw	fp,12(sp)
80218cc4:	df000304 	addi	fp,sp,12
80218cc8:	e13ffd15 	stw	r4,-12(fp)
80218ccc:	e17ffe15 	stw	r5,-8(fp)
80218cd0:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
80218cd4:	e0bffd17 	ldw	r2,-12(fp)
80218cd8:	10800037 	ldwio	r2,0(r2)
80218cdc:	1080010c 	andi	r2,r2,4
80218ce0:	10000226 	beq	r2,zero,80218cec <alt_msgdma_write_standard_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
        is non-blocking*/
        return -ENOSPC;
80218ce4:	00bff904 	movi	r2,-28
80218ce8:	00001506 	br	80218d40 <alt_msgdma_write_standard_descriptor+0x84>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
80218cec:	e0bfff17 	ldw	r2,-4(fp)
80218cf0:	10800017 	ldw	r2,0(r2)
80218cf4:	1007883a 	mov	r3,r2
80218cf8:	e0bffe17 	ldw	r2,-8(fp)
80218cfc:	10c00035 	stwio	r3,0(r2)
        (alt_u32)descriptor->read_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
80218d00:	e0bffe17 	ldw	r2,-8(fp)
80218d04:	10800104 	addi	r2,r2,4
80218d08:	e0ffff17 	ldw	r3,-4(fp)
80218d0c:	18c00117 	ldw	r3,4(r3)
80218d10:	10c00035 	stwio	r3,0(r2)
    (    alt_u32)descriptor->write_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
80218d14:	e0bffe17 	ldw	r2,-8(fp)
80218d18:	10800204 	addi	r2,r2,8
80218d1c:	e0ffff17 	ldw	r3,-4(fp)
80218d20:	18c00217 	ldw	r3,8(r3)
80218d24:	10c00035 	stwio	r3,0(r2)
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
80218d28:	e0bffe17 	ldw	r2,-8(fp)
80218d2c:	10800304 	addi	r2,r2,12
80218d30:	e0ffff17 	ldw	r3,-4(fp)
80218d34:	18c00317 	ldw	r3,12(r3)
80218d38:	10c00035 	stwio	r3,0(r2)
        descriptor->control);
        return 0;
80218d3c:	0005883a 	mov	r2,zero
}
80218d40:	e037883a 	mov	sp,fp
80218d44:	df000017 	ldw	fp,0(sp)
80218d48:	dec00104 	addi	sp,sp,4
80218d4c:	f800283a 	ret

80218d50 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_extended_descriptor *descriptor)
{
80218d50:	defffc04 	addi	sp,sp,-16
80218d54:	df000315 	stw	fp,12(sp)
80218d58:	df000304 	addi	fp,sp,12
80218d5c:	e13ffd15 	stw	r4,-12(fp)
80218d60:	e17ffe15 	stw	r5,-8(fp)
80218d64:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
80218d68:	e0bffd17 	ldw	r2,-12(fp)
80218d6c:	10800037 	ldwio	r2,0(r2)
80218d70:	1080010c 	andi	r2,r2,4
80218d74:	10000226 	beq	r2,zero,80218d80 <alt_msgdma_write_extended_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
    is non-blocking*/
        return -ENOSPC;
80218d78:	00bff904 	movi	r2,-28
80218d7c:	00003b06 	br	80218e6c <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
80218d80:	e0bfff17 	ldw	r2,-4(fp)
80218d84:	10800017 	ldw	r2,0(r2)
80218d88:	1007883a 	mov	r3,r2
80218d8c:	e0bffe17 	ldw	r2,-8(fp)
80218d90:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
80218d94:	e0bffe17 	ldw	r2,-8(fp)
80218d98:	10800104 	addi	r2,r2,4
80218d9c:	e0ffff17 	ldw	r3,-4(fp)
80218da0:	18c00117 	ldw	r3,4(r3)
80218da4:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
80218da8:	e0bffe17 	ldw	r2,-8(fp)
80218dac:	10800204 	addi	r2,r2,8
80218db0:	e0ffff17 	ldw	r3,-4(fp)
80218db4:	18c00217 	ldw	r3,8(r3)
80218db8:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
80218dbc:	e0bffe17 	ldw	r2,-8(fp)
80218dc0:	10800304 	addi	r2,r2,12
80218dc4:	e0ffff17 	ldw	r3,-4(fp)
80218dc8:	18c0030b 	ldhu	r3,12(r3)
80218dcc:	18ffffcc 	andi	r3,r3,65535
80218dd0:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
80218dd4:	e0bffe17 	ldw	r2,-8(fp)
80218dd8:	10800384 	addi	r2,r2,14
80218ddc:	e0ffff17 	ldw	r3,-4(fp)
80218de0:	18c00383 	ldbu	r3,14(r3)
80218de4:	18c03fcc 	andi	r3,r3,255
80218de8:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
80218dec:	e0bffe17 	ldw	r2,-8(fp)
80218df0:	108003c4 	addi	r2,r2,15
80218df4:	e0ffff17 	ldw	r3,-4(fp)
80218df8:	18c003c3 	ldbu	r3,15(r3)
80218dfc:	18c03fcc 	andi	r3,r3,255
80218e00:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
80218e04:	e0bffe17 	ldw	r2,-8(fp)
80218e08:	10800404 	addi	r2,r2,16
80218e0c:	e0ffff17 	ldw	r3,-4(fp)
80218e10:	18c0040b 	ldhu	r3,16(r3)
80218e14:	18ffffcc 	andi	r3,r3,65535
80218e18:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
80218e1c:	e0bffe17 	ldw	r2,-8(fp)
80218e20:	10800484 	addi	r2,r2,18
80218e24:	e0ffff17 	ldw	r3,-4(fp)
80218e28:	18c0048b 	ldhu	r3,18(r3)
80218e2c:	18ffffcc 	andi	r3,r3,65535
80218e30:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
80218e34:	e0bffe17 	ldw	r2,-8(fp)
80218e38:	10800504 	addi	r2,r2,20
80218e3c:	0007883a 	mov	r3,zero
80218e40:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
80218e44:	e0bffe17 	ldw	r2,-8(fp)
80218e48:	10800604 	addi	r2,r2,24
80218e4c:	0007883a 	mov	r3,zero
80218e50:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
80218e54:	e0bffe17 	ldw	r2,-8(fp)
80218e58:	10800704 	addi	r2,r2,28
80218e5c:	e0ffff17 	ldw	r3,-4(fp)
80218e60:	18c00717 	ldw	r3,28(r3)
80218e64:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->control);
    return 0;
80218e68:	0005883a 	mov	r2,zero
}
80218e6c:	e037883a 	mov	sp,fp
80218e70:	df000017 	ldw	fp,0(sp)
80218e74:	dec00104 	addi	sp,sp,4
80218e78:	f800283a 	ret

80218e7c <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
80218e7c:	defff804 	addi	sp,sp,-32
80218e80:	dfc00715 	stw	ra,28(sp)
80218e84:	df000615 	stw	fp,24(sp)
80218e88:	df000604 	addi	fp,sp,24
80218e8c:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
80218e90:	e0bfff17 	ldw	r2,-4(fp)
80218e94:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
80218e98:	e0bffa17 	ldw	r2,-24(fp)
80218e9c:	10801783 	ldbu	r2,94(r2)
80218ea0:	10803fcc 	andi	r2,r2,255
80218ea4:	10001126 	beq	r2,zero,80218eec <alt_msgdma_irq+0x70>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
80218ea8:	e0bffa17 	ldw	r2,-24(fp)
80218eac:	10800617 	ldw	r2,24(r2)
80218eb0:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
80218eb4:	1007883a 	mov	r3,r2
80218eb8:	00bffdc4 	movi	r2,-9
80218ebc:	1884703a 	and	r2,r3,r2
80218ec0:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                & ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
80218ec4:	e0bffa17 	ldw	r2,-24(fp)
80218ec8:	10800617 	ldw	r2,24(r2)
80218ecc:	e0fffb17 	ldw	r3,-20(fp)
80218ed0:	10c00035 	stwio	r3,0(r2)
                temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
80218ed4:	e0bffa17 	ldw	r2,-24(fp)
80218ed8:	10800617 	ldw	r2,24(r2)
80218edc:	10800404 	addi	r2,r2,16
80218ee0:	00c00044 	movi	r3,1
80218ee4:	10c00035 	stwio	r3,0(r2)
80218ee8:	00001106 	br	80218f30 <alt_msgdma_irq+0xb4>
                ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
80218eec:	e0bffa17 	ldw	r2,-24(fp)
80218ef0:	10800317 	ldw	r2,12(r2)
80218ef4:	10800104 	addi	r2,r2,4
80218ef8:	10800037 	ldwio	r2,0(r2)
80218efc:	1007883a 	mov	r3,r2
80218f00:	00bffbc4 	movi	r2,-17
80218f04:	1884703a 	and	r2,r3,r2
80218f08:	e0bffb15 	stw	r2,-20(fp)
                & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
80218f0c:	e0bffa17 	ldw	r2,-24(fp)
80218f10:	10800317 	ldw	r2,12(r2)
80218f14:	10800104 	addi	r2,r2,4
80218f18:	e0fffb17 	ldw	r3,-20(fp)
80218f1c:	10c00035 	stwio	r3,0(r2)
        /* clear the IRQ status */
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
80218f20:	e0bffa17 	ldw	r2,-24(fp)
80218f24:	10800317 	ldw	r2,12(r2)
80218f28:	00c08004 	movi	r3,512
80218f2c:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
80218f30:	e0bffa17 	ldw	r2,-24(fp)
80218f34:	10800b17 	ldw	r2,44(r2)
80218f38:	10001226 	beq	r2,zero,80218f84 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218f3c:	0005303a 	rdctl	r2,status
80218f40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218f44:	e0fffd17 	ldw	r3,-12(fp)
80218f48:	00bfff84 	movi	r2,-2
80218f4c:	1884703a 	and	r2,r3,r2
80218f50:	1001703a 	wrctl	status,r2
  
  return context;
80218f54:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
80218f58:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
80218f5c:	e0bffa17 	ldw	r2,-24(fp)
80218f60:	10800b17 	ldw	r2,44(r2)
80218f64:	e0fffa17 	ldw	r3,-24(fp)
80218f68:	18c00c17 	ldw	r3,48(r3)
80218f6c:	1809883a 	mov	r4,r3
80218f70:	103ee83a 	callr	r2
80218f74:	e0bffc17 	ldw	r2,-16(fp)
80218f78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218f7c:	e0bffe17 	ldw	r2,-8(fp)
80218f80:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
80218f84:	e0bffa17 	ldw	r2,-24(fp)
80218f88:	10801783 	ldbu	r2,94(r2)
80218f8c:	10803fcc 	andi	r2,r2,255
80218f90:	10000a26 	beq	r2,zero,80218fbc <alt_msgdma_irq+0x140>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
80218f94:	e0bffa17 	ldw	r2,-24(fp)
80218f98:	10800617 	ldw	r2,24(r2)
80218f9c:	10800037 	ldwio	r2,0(r2)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
80218fa0:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
        temporary_control = 
80218fa4:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
80218fa8:	e0bffa17 	ldw	r2,-24(fp)
80218fac:	10800617 	ldw	r2,24(r2)
80218fb0:	e0fffb17 	ldw	r3,-20(fp)
80218fb4:	10c00035 	stwio	r3,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
80218fb8:	00000c06 	br	80218fec <alt_msgdma_irq+0x170>
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
80218fbc:	e0bffa17 	ldw	r2,-24(fp)
80218fc0:	10800317 	ldw	r2,12(r2)
80218fc4:	10800104 	addi	r2,r2,4
80218fc8:	10800037 	ldwio	r2,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
80218fcc:	10800414 	ori	r2,r2,16
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
80218fd0:	e0bffb15 	stw	r2,-20(fp)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
80218fd4:	e0bffa17 	ldw	r2,-24(fp)
80218fd8:	10800317 	ldw	r2,12(r2)
80218fdc:	10800104 	addi	r2,r2,4
80218fe0:	e0fffb17 	ldw	r3,-20(fp)
80218fe4:	10c00035 	stwio	r3,0(r2)
    }

    return;
80218fe8:	0001883a 	nop
}
80218fec:	e037883a 	mov	sp,fp
80218ff0:	dfc00117 	ldw	ra,4(sp)
80218ff4:	df000017 	ldw	fp,0(sp)
80218ff8:	dec00204 	addi	sp,sp,8
80218ffc:	f800283a 	ret

80219000 <alt_msgdma_construct_standard_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
80219000:	defffb04 	addi	sp,sp,-20
80219004:	df000415 	stw	fp,16(sp)
80219008:	df000404 	addi	fp,sp,16
8021900c:	e13ffc15 	stw	r4,-16(fp)
80219010:	e17ffd15 	stw	r5,-12(fp)
80219014:	e1bffe15 	stw	r6,-8(fp)
80219018:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8021901c:	e0bffc17 	ldw	r2,-16(fp)
80219020:	10c01217 	ldw	r3,72(r2)
80219024:	e0800117 	ldw	r2,4(fp)
80219028:	18800436 	bltu	r3,r2,8021903c <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8021902c:	e0bffc17 	ldw	r2,-16(fp)
80219030:	10801703 	ldbu	r2,92(r2)
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
80219034:	10803fcc 	andi	r2,r2,255
80219038:	10000226 	beq	r2,zero,80219044 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8021903c:	00bffa84 	movi	r2,-22
80219040:	00000e06 	br	8021907c <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
80219044:	e0bffd17 	ldw	r2,-12(fp)
80219048:	e0fffe17 	ldw	r3,-8(fp)
8021904c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
80219050:	e0bffd17 	ldw	r2,-12(fp)
80219054:	e0ffff17 	ldw	r3,-4(fp)
80219058:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8021905c:	e0bffd17 	ldw	r2,-12(fp)
80219060:	e0c00117 	ldw	r3,4(fp)
80219064:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80219068:	e0800217 	ldw	r2,8(fp)
8021906c:	10e00034 	orhi	r3,r2,32768
80219070:	e0bffd17 	ldw	r2,-12(fp)
80219074:	10c00315 	stw	r3,12(r2)
    
    return 0;
80219078:	0005883a 	mov	r2,zero
}
8021907c:	e037883a 	mov	sp,fp
80219080:	df000017 	ldw	fp,0(sp)
80219084:	dec00104 	addi	sp,sp,4
80219088:	f800283a 	ret

8021908c <alt_msgdma_construct_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8021908c:	defff604 	addi	sp,sp,-40
80219090:	df000915 	stw	fp,36(sp)
80219094:	df000904 	addi	fp,sp,36
80219098:	e13ff715 	stw	r4,-36(fp)
8021909c:	e17ff815 	stw	r5,-32(fp)
802190a0:	e1bff915 	stw	r6,-28(fp)
802190a4:	e1fffa15 	stw	r7,-24(fp)
802190a8:	e1800317 	ldw	r6,12(fp)
802190ac:	e1400417 	ldw	r5,16(fp)
802190b0:	e1000517 	ldw	r4,20(fp)
802190b4:	e0c00617 	ldw	r3,24(fp)
802190b8:	e0800717 	ldw	r2,28(fp)
802190bc:	e1bffb0d 	sth	r6,-20(fp)
802190c0:	e17ffc05 	stb	r5,-16(fp)
802190c4:	e13ffd05 	stb	r4,-12(fp)
802190c8:	e0fffe0d 	sth	r3,-8(fp)
802190cc:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
802190d0:	e0bff717 	ldw	r2,-36(fp)
802190d4:	10c01217 	ldw	r3,72(r2)
802190d8:	e0800117 	ldw	r2,4(fp)
802190dc:	18801936 	bltu	r3,r2,80219144 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
802190e0:	e13ff717 	ldw	r4,-36(fp)
802190e4:	20801317 	ldw	r2,76(r4)
802190e8:	20c01417 	ldw	r3,80(r4)
802190ec:	e13ffe0b 	ldhu	r4,-8(fp)
802190f0:	213fffcc 	andi	r4,r4,65535
802190f4:	2015883a 	mov	r10,r4
802190f8:	0017883a 	mov	r11,zero
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
802190fc:	1ac01136 	bltu	r3,r11,80219144 <alt_msgdma_construct_extended_descriptor+0xb8>
80219100:	58c0011e 	bne	r11,r3,80219108 <alt_msgdma_construct_extended_descriptor+0x7c>
80219104:	12800f36 	bltu	r2,r10,80219144 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
80219108:	e13ff717 	ldw	r4,-36(fp)
8021910c:	20801317 	ldw	r2,76(r4)
80219110:	20c01417 	ldw	r3,80(r4)
80219114:	e13fff0b 	ldhu	r4,-4(fp)
80219118:	213fffcc 	andi	r4,r4,65535
8021911c:	2011883a 	mov	r8,r4
80219120:	0013883a 	mov	r9,zero
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
80219124:	1a400736 	bltu	r3,r9,80219144 <alt_msgdma_construct_extended_descriptor+0xb8>
80219128:	48c0011e 	bne	r9,r3,80219130 <alt_msgdma_construct_extended_descriptor+0xa4>
8021912c:	12000536 	bltu	r2,r8,80219144 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
80219130:	e0bff717 	ldw	r2,-36(fp)
80219134:	10801703 	ldbu	r2,92(r2)
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
80219138:	10803fcc 	andi	r2,r2,255
8021913c:	10800060 	cmpeqi	r2,r2,1
80219140:	1000021e 	bne	r2,zero,8021914c <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
80219144:	00bffa84 	movi	r2,-22
80219148:	00002106 	br	802191d0 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
8021914c:	e0bff817 	ldw	r2,-32(fp)
80219150:	e0fff917 	ldw	r3,-28(fp)
80219154:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
80219158:	e0bff817 	ldw	r2,-32(fp)
8021915c:	e0fffa17 	ldw	r3,-24(fp)
80219160:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
80219164:	e0bff817 	ldw	r2,-32(fp)
80219168:	e0c00117 	ldw	r3,4(fp)
8021916c:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
80219170:	e0bff817 	ldw	r2,-32(fp)
80219174:	e0fffb0b 	ldhu	r3,-20(fp)
80219178:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
8021917c:	e0bff817 	ldw	r2,-32(fp)
80219180:	e0fffc03 	ldbu	r3,-16(fp)
80219184:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
80219188:	e0bff817 	ldw	r2,-32(fp)
8021918c:	e0fffd03 	ldbu	r3,-12(fp)
80219190:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
80219194:	e0bff817 	ldw	r2,-32(fp)
80219198:	e0fffe0b 	ldhu	r3,-8(fp)
8021919c:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
802191a0:	e0bff817 	ldw	r2,-32(fp)
802191a4:	e0ffff0b 	ldhu	r3,-4(fp)
802191a8:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
802191ac:	e0bff817 	ldw	r2,-32(fp)
802191b0:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
802191b4:	e0bff817 	ldw	r2,-32(fp)
802191b8:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
802191bc:	e0800217 	ldw	r2,8(fp)
802191c0:	10e00034 	orhi	r3,r2,32768
802191c4:	e0bff817 	ldw	r2,-32(fp)
802191c8:	10c00715 	stw	r3,28(r2)

  return 0 ;
802191cc:	0005883a 	mov	r2,zero

}
802191d0:	e037883a 	mov	sp,fp
802191d4:	df000017 	ldw	fp,0(sp)
802191d8:	dec00104 	addi	sp,sp,4
802191dc:	f800283a 	ret

802191e0 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
802191e0:	defff004 	addi	sp,sp,-64
802191e4:	dfc00f15 	stw	ra,60(sp)
802191e8:	df000e15 	stw	fp,56(sp)
802191ec:	df000e04 	addi	fp,sp,56
802191f0:	e13ffd15 	stw	r4,-12(fp)
802191f4:	e17ffe15 	stw	r5,-8(fp)
802191f8:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
802191fc:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
80219200:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
80219204:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80219208:	e0bffd17 	ldw	r2,-12(fp)
8021920c:	10800317 	ldw	r2,12(r2)
80219210:	10800204 	addi	r2,r2,8
80219214:	10800037 	ldwio	r2,0(r2)
    alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
80219218:	10bfffcc 	andi	r2,r2,65535
8021921c:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80219220:	e0bffd17 	ldw	r2,-12(fp)
80219224:	10800317 	ldw	r2,12(r2)
80219228:	10800204 	addi	r2,r2,8
8021922c:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
80219230:	1004d43a 	srli	r2,r2,16
80219234:	e0bff615 	stw	r2,-40(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80219238:	e0bffd17 	ldw	r2,-12(fp)
8021923c:	10800917 	ldw	r2,36(r2)
80219240:	e0fff617 	ldw	r3,-40(fp)
80219244:	1880042e 	bgeu	r3,r2,80219258 <alt_msgdma_descriptor_async_transfer+0x78>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
80219248:	e0bffd17 	ldw	r2,-12(fp)
8021924c:	10800917 	ldw	r2,36(r2)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80219250:	e0fff517 	ldw	r3,-44(fp)
80219254:	18800236 	bltu	r3,r2,80219260 <alt_msgdma_descriptor_async_transfer+0x80>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    {
        /*at least one write or read FIFO descriptor buffer is full,
        returning so that this function is non-blocking*/
        return -ENOSPC;
80219258:	00bff904 	movi	r2,-28
8021925c:	00008f06 	br	8021949c <alt_msgdma_descriptor_async_transfer+0x2bc>
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80219260:	00800804 	movi	r2,32
80219264:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80219268:	0005303a 	rdctl	r2,status
8021926c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80219270:	e0fff717 	ldw	r3,-36(fp)
80219274:	00bfff84 	movi	r2,-2
80219278:	1884703a 	and	r2,r3,r2
8021927c:	1001703a 	wrctl	status,r2
  
  return context;
80219280:	e0bff717 	ldw	r2,-36(fp)
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
80219284:	e0bff415 	stw	r2,-48(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80219288:	e0bffd17 	ldw	r2,-12(fp)
8021928c:	10800317 	ldw	r2,12(r2)
80219290:	10800104 	addi	r2,r2,4
80219294:	e0fff317 	ldw	r3,-52(fp)
80219298:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8021929c:	e0bffd17 	ldw	r2,-12(fp)
802192a0:	10800317 	ldw	r2,12(r2)
802192a4:	e0fffd17 	ldw	r3,-12(fp)
802192a8:	18c00317 	ldw	r3,12(r3)
802192ac:	18c00037 	ldwio	r3,0(r3)
802192b0:	10c00035 	stwio	r3,0(r2)
802192b4:	e0bff417 	ldw	r2,-48(fp)
802192b8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802192bc:	e0bffc17 	ldw	r2,-16(fp)
802192c0:	1001703a 	wrctl	status,r2
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
802192c4:	e0bffe17 	ldw	r2,-8(fp)
802192c8:	10001a26 	beq	r2,zero,80219334 <alt_msgdma_descriptor_async_transfer+0x154>
802192cc:	e0bfff17 	ldw	r2,-4(fp)
802192d0:	1000181e 	bne	r2,zero,80219334 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
802192d4:	00000d06 	br	8021930c <alt_msgdma_descriptor_async_transfer+0x12c>
        dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
802192d8:	01000044 	movi	r4,1
802192dc:	0216a040 	call	80216a04 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
802192e0:	e0bff20b 	ldhu	r2,-56(fp)
802192e4:	1084e230 	cmpltui	r2,r2,5000
802192e8:	1000051e 	bne	r2,zero,80219300 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
802192ec:	012008b4 	movhi	r4,32802
802192f0:	2136e404 	addi	r4,r4,-9328
802192f4:	021b5d80 	call	8021b5d8 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
802192f8:	00bff084 	movi	r2,-62
802192fc:	00006706 	br	8021949c <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
80219300:	e0bff20b 	ldhu	r2,-56(fp)
80219304:	10800044 	addi	r2,r2,1
80219308:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8021930c:	e0bffd17 	ldw	r2,-12(fp)
80219310:	10c00317 	ldw	r3,12(r2)
80219314:	e0bffd17 	ldw	r2,-12(fp)
80219318:	10800417 	ldw	r2,16(r2)
8021931c:	e1bffe17 	ldw	r6,-8(fp)
80219320:	100b883a 	mov	r5,r2
80219324:	1809883a 	mov	r4,r3
80219328:	0218cbc0 	call	80218cbc <alt_msgdma_write_standard_descriptor>
8021932c:	103fea1e 	bne	r2,zero,802192d8 <__reset+0xfa1f92d8>
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
80219330:	00001f06 	br	802193b0 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80219334:	e0bffe17 	ldw	r2,-8(fp)
80219338:	10001b1e 	bne	r2,zero,802193a8 <alt_msgdma_descriptor_async_transfer+0x1c8>
8021933c:	e0bfff17 	ldw	r2,-4(fp)
80219340:	10001926 	beq	r2,zero,802193a8 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
80219344:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80219348:	00000d06 	br	80219380 <alt_msgdma_descriptor_async_transfer+0x1a0>
        dev->csr_base, 
        dev->descriptor_base, 
        extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8021934c:	01000044 	movi	r4,1
80219350:	0216a040 	call	80216a04 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80219354:	e0bff20b 	ldhu	r2,-56(fp)
80219358:	1084e230 	cmpltui	r2,r2,5000
8021935c:	1000051e 	bne	r2,zero,80219374 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
80219360:	012008b4 	movhi	r4,32802
80219364:	2136fa04 	addi	r4,r4,-9240
80219368:	021b5d80 	call	8021b5d8 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
8021936c:	00bff084 	movi	r2,-62
80219370:	00004a06 	br	8021949c <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
80219374:	e0bff20b 	ldhu	r2,-56(fp)
80219378:	10800044 	addi	r2,r2,1
8021937c:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80219380:	e0bffd17 	ldw	r2,-12(fp)
80219384:	10c00317 	ldw	r3,12(r2)
80219388:	e0bffd17 	ldw	r2,-12(fp)
8021938c:	10800417 	ldw	r2,16(r2)
80219390:	e1bfff17 	ldw	r6,-4(fp)
80219394:	100b883a 	mov	r5,r2
80219398:	1809883a 	mov	r4,r3
8021939c:	0218d500 	call	80218d50 <alt_msgdma_write_extended_descriptor>
802193a0:	103fea1e 	bne	r2,zero,8021934c <__reset+0xfa1f934c>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
802193a4:	00000206 	br	802193b0 <alt_msgdma_descriptor_async_transfer+0x1d0>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
802193a8:	00bfffc4 	movi	r2,-1
802193ac:	00003b06 	br	8021949c <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
802193b0:	e0bffd17 	ldw	r2,-12(fp)
802193b4:	10800b17 	ldw	r2,44(r2)
802193b8:	10001c26 	beq	r2,zero,8021942c <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
802193bc:	e0bffd17 	ldw	r2,-12(fp)
802193c0:	10c00d17 	ldw	r3,52(r2)
802193c4:	e0bff317 	ldw	r2,-52(fp)
802193c8:	1884b03a 	or	r2,r3,r2
802193cc:	10800514 	ori	r2,r2,20
802193d0:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
802193d4:	e0fff317 	ldw	r3,-52(fp)
802193d8:	00bff7c4 	movi	r2,-33
802193dc:	1884703a 	and	r2,r3,r2
802193e0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802193e4:	0005303a 	rdctl	r2,status
802193e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802193ec:	e0fffa17 	ldw	r3,-24(fp)
802193f0:	00bfff84 	movi	r2,-2
802193f4:	1884703a 	and	r2,r3,r2
802193f8:	1001703a 	wrctl	status,r2
  
  return context;
802193fc:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
80219400:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80219404:	e0bffd17 	ldw	r2,-12(fp)
80219408:	10800317 	ldw	r2,12(r2)
8021940c:	10800104 	addi	r2,r2,4
80219410:	e0fff317 	ldw	r3,-52(fp)
80219414:	10c00035 	stwio	r3,0(r2)
80219418:	e0bff417 	ldw	r2,-48(fp)
8021941c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80219420:	e0bff817 	ldw	r2,-32(fp)
80219424:	1001703a 	wrctl	status,r2
80219428:	00001b06 	br	80219498 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
8021942c:	e0bffd17 	ldw	r2,-12(fp)
80219430:	10c00d17 	ldw	r3,52(r2)
80219434:	e0bff317 	ldw	r2,-52(fp)
80219438:	1884b03a 	or	r2,r3,r2
8021943c:	10800114 	ori	r2,r2,4
80219440:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
80219444:	e0fff317 	ldw	r3,-52(fp)
80219448:	00bff3c4 	movi	r2,-49
8021944c:	1884703a 	and	r2,r3,r2
80219450:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80219454:	0005303a 	rdctl	r2,status
80219458:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021945c:	e0fffb17 	ldw	r3,-20(fp)
80219460:	00bfff84 	movi	r2,-2
80219464:	1884703a 	and	r2,r3,r2
80219468:	1001703a 	wrctl	status,r2
  
  return context;
8021946c:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
80219470:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80219474:	e0bffd17 	ldw	r2,-12(fp)
80219478:	10800317 	ldw	r2,12(r2)
8021947c:	10800104 	addi	r2,r2,4
80219480:	e0fff317 	ldw	r3,-52(fp)
80219484:	10c00035 	stwio	r3,0(r2)
80219488:	e0bff417 	ldw	r2,-48(fp)
8021948c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80219490:	e0bff917 	ldw	r2,-28(fp)
80219494:	1001703a 	wrctl	status,r2
     * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
80219498:	0005883a 	mov	r2,zero
}
8021949c:	e037883a 	mov	sp,fp
802194a0:	dfc00117 	ldw	ra,4(sp)
802194a4:	df000017 	ldw	fp,0(sp)
802194a8:	dec00204 	addi	sp,sp,8
802194ac:	f800283a 	ret

802194b0 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
802194b0:	defff004 	addi	sp,sp,-64
802194b4:	dfc00f15 	stw	ra,60(sp)
802194b8:	df000e15 	stw	fp,56(sp)
802194bc:	df000e04 	addi	fp,sp,56
802194c0:	e13ffd15 	stw	r4,-12(fp)
802194c4:	e17ffe15 	stw	r5,-8(fp)
802194c8:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
802194cc:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
802194d0:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
802194d4:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
802194d8:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
802194dc:	e0bffd17 	ldw	r2,-12(fp)
802194e0:	10800317 	ldw	r2,12(r2)
802194e4:	10800204 	addi	r2,r2,8
802194e8:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
802194ec:	10bfffcc 	andi	r2,r2,65535
802194f0:	e0bff415 	stw	r2,-48(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
802194f4:	e0bffd17 	ldw	r2,-12(fp)
802194f8:	10800317 	ldw	r2,12(r2)
802194fc:	10800204 	addi	r2,r2,8
80219500:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
80219504:	1004d43a 	srli	r2,r2,16
80219508:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
8021950c:	00807804 	movi	r2,480
80219510:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80219514:	00001906 	br	8021957c <alt_msgdma_descriptor_sync_transfer+0xcc>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
80219518:	01000044 	movi	r4,1
8021951c:	0216a040 	call	80216a04 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80219520:	e0bff30b 	ldhu	r2,-52(fp)
80219524:	1084e230 	cmpltui	r2,r2,5000
80219528:	1000051e 	bne	r2,zero,80219540 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
8021952c:	012008b4 	movhi	r4,32802
80219530:	21371004 	addi	r4,r4,-9152
80219534:	021b5d80 	call	8021b5d8 <alt_printf>
                " for storing descriptor\n");
            return -ETIME;
80219538:	00bff084 	movi	r2,-62
8021953c:	0000b506 	br	80219814 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
80219540:	e0bff30b 	ldhu	r2,-52(fp)
80219544:	10800044 	addi	r2,r2,1
80219548:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8021954c:	e0bffd17 	ldw	r2,-12(fp)
80219550:	10800317 	ldw	r2,12(r2)
80219554:	10800204 	addi	r2,r2,8
80219558:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
                " for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
8021955c:	10bfffcc 	andi	r2,r2,65535
80219560:	e0bff415 	stw	r2,-48(fp)
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80219564:	e0bffd17 	ldw	r2,-12(fp)
80219568:	10800317 	ldw	r2,12(r2)
8021956c:	10800204 	addi	r2,r2,8
80219570:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
80219574:	1004d43a 	srli	r2,r2,16
80219578:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8021957c:	e0bffd17 	ldw	r2,-12(fp)
80219580:	10800917 	ldw	r2,36(r2)
80219584:	e0fff517 	ldw	r3,-44(fp)
80219588:	18bfe32e 	bgeu	r3,r2,80219518 <__reset+0xfa1f9518>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
8021958c:	e0bffd17 	ldw	r2,-12(fp)
80219590:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80219594:	e0fff417 	ldw	r3,-48(fp)
80219598:	18bfdf2e 	bgeu	r3,r2,80219518 <__reset+0xfa1f9518>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021959c:	0005303a 	rdctl	r2,status
802195a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802195a4:	e0fffc17 	ldw	r3,-16(fp)
802195a8:	00bfff84 	movi	r2,-2
802195ac:	1884703a 	and	r2,r3,r2
802195b0:	1001703a 	wrctl	status,r2
  
  return context;
802195b4:	e0bffc17 	ldw	r2,-16(fp)
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
802195b8:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
802195bc:	e0bffd17 	ldw	r2,-12(fp)
802195c0:	10800317 	ldw	r2,12(r2)
802195c4:	10800104 	addi	r2,r2,4
802195c8:	00c00804 	movi	r3,32
802195cc:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
802195d0:	e0bffd17 	ldw	r2,-12(fp)
802195d4:	10800317 	ldw	r2,12(r2)
802195d8:	e0fffd17 	ldw	r3,-12(fp)
802195dc:	18c00317 	ldw	r3,12(r3)
802195e0:	18c00037 	ldwio	r3,0(r3)
802195e4:	10c00035 	stwio	r3,0(r2)
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
802195e8:	e0bffe17 	ldw	r2,-8(fp)
802195ec:	10001b26 	beq	r2,zero,8021965c <alt_msgdma_descriptor_sync_transfer+0x1ac>
802195f0:	e0bfff17 	ldw	r2,-4(fp)
802195f4:	1000191e 	bne	r2,zero,8021965c <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
802195f8:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
802195fc:	00000d06 	br	80219634 <alt_msgdma_descriptor_sync_transfer+0x184>
            dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
80219600:	01000044 	movi	r4,1
80219604:	0216a040 	call	80216a04 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80219608:	e0bff30b 	ldhu	r2,-52(fp)
8021960c:	1084e230 	cmpltui	r2,r2,5000
80219610:	1000051e 	bne	r2,zero,80219628 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
80219614:	012008b4 	movhi	r4,32802
80219618:	21372404 	addi	r4,r4,-9072
8021961c:	021b5d80 	call	8021b5d8 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
80219620:	00bff084 	movi	r2,-62
80219624:	00007b06 	br	80219814 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
80219628:	e0bff30b 	ldhu	r2,-52(fp)
8021962c:	10800044 	addi	r2,r2,1
80219630:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80219634:	e0bffd17 	ldw	r2,-12(fp)
80219638:	10c00317 	ldw	r3,12(r2)
8021963c:	e0bffd17 	ldw	r2,-12(fp)
80219640:	10800417 	ldw	r2,16(r2)
80219644:	e1bffe17 	ldw	r6,-8(fp)
80219648:	100b883a 	mov	r5,r2
8021964c:	1809883a 	mov	r4,r3
80219650:	0218cbc0 	call	80218cbc <alt_msgdma_write_standard_descriptor>
80219654:	103fea1e 	bne	r2,zero,80219600 <__reset+0xfa1f9600>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
80219658:	00001f06 	br	802196d8 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8021965c:	e0bffe17 	ldw	r2,-8(fp)
80219660:	10001b1e 	bne	r2,zero,802196d0 <alt_msgdma_descriptor_sync_transfer+0x220>
80219664:	e0bfff17 	ldw	r2,-4(fp)
80219668:	10001926 	beq	r2,zero,802196d0 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
8021966c:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80219670:	00000d06 	br	802196a8 <alt_msgdma_descriptor_sync_transfer+0x1f8>
            dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
80219674:	01000044 	movi	r4,1
80219678:	0216a040 	call	80216a04 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8021967c:	e0bff30b 	ldhu	r2,-52(fp)
80219680:	1084e230 	cmpltui	r2,r2,5000
80219684:	1000051e 	bne	r2,zero,8021969c <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
80219688:	012008b4 	movhi	r4,32802
8021968c:	21373504 	addi	r4,r4,-9004
80219690:	021b5d80 	call	8021b5d8 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
80219694:	00bff084 	movi	r2,-62
80219698:	00005e06 	br	80219814 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
8021969c:	e0bff30b 	ldhu	r2,-52(fp)
802196a0:	10800044 	addi	r2,r2,1
802196a4:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
802196a8:	e0bffd17 	ldw	r2,-12(fp)
802196ac:	10c00317 	ldw	r3,12(r2)
802196b0:	e0bffd17 	ldw	r2,-12(fp)
802196b4:	10800417 	ldw	r2,16(r2)
802196b8:	e1bfff17 	ldw	r6,-4(fp)
802196bc:	100b883a 	mov	r5,r2
802196c0:	1809883a 	mov	r4,r3
802196c4:	0218d500 	call	80218d50 <alt_msgdma_write_extended_descriptor>
802196c8:	103fea1e 	bne	r2,zero,80219674 <__reset+0xfa1f9674>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
802196cc:	00000206 	br	802196d8 <alt_msgdma_descriptor_sync_transfer+0x228>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
802196d0:	00bfffc4 	movi	r2,-1
802196d4:	00004f06 	br	80219814 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
802196d8:	e0bffd17 	ldw	r2,-12(fp)
802196dc:	10800317 	ldw	r2,12(r2)
802196e0:	10800104 	addi	r2,r2,4
802196e4:	e0fffd17 	ldw	r3,-12(fp)
802196e8:	19000d17 	ldw	r4,52(r3)
802196ec:	00fff2c4 	movi	r3,-53
802196f0:	20c6703a 	and	r3,r4,r3
802196f4:	18c00114 	ori	r3,r3,4
802196f8:	10c00035 	stwio	r3,0(r2)
802196fc:	e0bff717 	ldw	r2,-36(fp)
80219700:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80219704:	e0bff917 	ldw	r2,-28(fp)
80219708:	1001703a 	wrctl	status,r2
        (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
        (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
     
    alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
8021970c:	e03ff30d 	sth	zero,-52(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80219710:	e0bffd17 	ldw	r2,-12(fp)
80219714:	10800317 	ldw	r2,12(r2)
80219718:	10800037 	ldwio	r2,0(r2)
8021971c:	e0bff215 	stw	r2,-56(fp)
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
80219720:	00001106 	br	80219768 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
80219724:	01000044 	movi	r4,1
80219728:	0216a040 	call	80216a04 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8021972c:	e0bff30b 	ldhu	r2,-52(fp)
80219730:	1084e230 	cmpltui	r2,r2,5000
80219734:	1000051e 	bne	r2,zero,8021974c <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
80219738:	012008b4 	movhi	r4,32802
8021973c:	21374604 	addi	r4,r4,-8936
80219740:	021b5d80 	call	8021b5d8 <alt_printf>
            * Now that access to the registers is complete, release the registers
            * semaphore so that other threads can access the registers.
            */
            ALT_SEM_POST (dev->regs_lock);
            
            return -ETIME;
80219744:	00bff084 	movi	r2,-62
80219748:	00003206 	br	80219814 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
8021974c:	e0bff30b 	ldhu	r2,-52(fp)
80219750:	10800044 	addi	r2,r2,1
80219754:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80219758:	e0bffd17 	ldw	r2,-12(fp)
8021975c:	10800317 	ldw	r2,12(r2)
80219760:	10800037 	ldwio	r2,0(r2)
80219764:	e0bff215 	stw	r2,-56(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
80219768:	e0fff217 	ldw	r3,-56(fp)
8021976c:	e0bff817 	ldw	r2,-32(fp)
80219770:	1884703a 	and	r2,r3,r2
80219774:	1000031e 	bne	r2,zero,80219784 <alt_msgdma_descriptor_sync_transfer+0x2d4>
80219778:	e0bff217 	ldw	r2,-56(fp)
8021977c:	1080004c 	andi	r2,r2,1
80219780:	103fe81e 	bne	r2,zero,80219724 <__reset+0xfa1f9724>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
80219784:	e0fff217 	ldw	r3,-56(fp)
80219788:	e0bff817 	ldw	r2,-32(fp)
8021978c:	1884703a 	and	r2,r3,r2
80219790:	10000226 	beq	r2,zero,8021979c <alt_msgdma_descriptor_sync_transfer+0x2ec>
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        return error;
80219794:	e0bff817 	ldw	r2,-32(fp)
80219798:	00001e06 	br	80219814 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
8021979c:	e0bffd17 	ldw	r2,-12(fp)
802197a0:	10800317 	ldw	r2,12(r2)
802197a4:	10800104 	addi	r2,r2,4
802197a8:	10800037 	ldwio	r2,0(r2)
802197ac:	10800814 	ori	r2,r2,32
802197b0:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802197b4:	0005303a 	rdctl	r2,status
802197b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802197bc:	e0fffa17 	ldw	r3,-24(fp)
802197c0:	00bfff84 	movi	r2,-2
802197c4:	1884703a 	and	r2,r3,r2
802197c8:	1001703a 	wrctl	status,r2
  
  return context;
802197cc:	e0bffa17 	ldw	r2,-24(fp)
    ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
802197d0:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
802197d4:	e0bffd17 	ldw	r2,-12(fp)
802197d8:	10800317 	ldw	r2,12(r2)
802197dc:	10800104 	addi	r2,r2,4
802197e0:	e0fff617 	ldw	r3,-40(fp)
802197e4:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
802197e8:	e0bffd17 	ldw	r2,-12(fp)
802197ec:	10800317 	ldw	r2,12(r2)
802197f0:	e0fffd17 	ldw	r3,-12(fp)
802197f4:	18c00317 	ldw	r3,12(r3)
802197f8:	18c00037 	ldwio	r3,0(r3)
802197fc:	10c00035 	stwio	r3,0(r2)
80219800:	e0bff717 	ldw	r2,-36(fp)
80219804:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80219808:	e0bffb17 	ldw	r2,-20(fp)
8021980c:	1001703a 	wrctl	status,r2
    * Now that access to the registers is complete, release the registers
    * semaphore so that other threads can access the registers.
    */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
80219810:	0005883a 	mov	r2,zero

}
80219814:	e037883a 	mov	sp,fp
80219818:	dfc00117 	ldw	ra,4(sp)
8021981c:	df000017 	ldw	fp,0(sp)
80219820:	dec00204 	addi	sp,sp,8
80219824:	f800283a 	ret

80219828 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
80219828:	defff804 	addi	sp,sp,-32
8021982c:	dfc00715 	stw	ra,28(sp)
80219830:	df000615 	stw	fp,24(sp)
80219834:	df000604 	addi	fp,sp,24
80219838:	e13ffc15 	stw	r4,-16(fp)
8021983c:	e17ffd15 	stw	r5,-12(fp)
80219840:	e1bffe15 	stw	r6,-8(fp)
80219844:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
80219848:	e0800217 	ldw	r2,8(fp)
8021984c:	d8800115 	stw	r2,4(sp)
80219850:	e0bfff17 	ldw	r2,-4(fp)
80219854:	d8800015 	stw	r2,0(sp)
80219858:	e1fffe17 	ldw	r7,-8(fp)
8021985c:	000d883a 	mov	r6,zero
80219860:	e17ffd17 	ldw	r5,-12(fp)
80219864:	e13ffc17 	ldw	r4,-16(fp)
80219868:	02190000 	call	80219000 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8021986c:	e037883a 	mov	sp,fp
80219870:	dfc00117 	ldw	ra,4(sp)
80219874:	df000017 	ldw	fp,0(sp)
80219878:	dec00204 	addi	sp,sp,8
8021987c:	f800283a 	ret

80219880 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address,
    alt_u32 length,
    alt_u32 control)
{
80219880:	defff804 	addi	sp,sp,-32
80219884:	dfc00715 	stw	ra,28(sp)
80219888:	df000615 	stw	fp,24(sp)
8021988c:	df000604 	addi	fp,sp,24
80219890:	e13ffc15 	stw	r4,-16(fp)
80219894:	e17ffd15 	stw	r5,-12(fp)
80219898:	e1bffe15 	stw	r6,-8(fp)
8021989c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
802198a0:	e0800217 	ldw	r2,8(fp)
802198a4:	d8800115 	stw	r2,4(sp)
802198a8:	e0bfff17 	ldw	r2,-4(fp)
802198ac:	d8800015 	stw	r2,0(sp)
802198b0:	000f883a 	mov	r7,zero
802198b4:	e1bffe17 	ldw	r6,-8(fp)
802198b8:	e17ffd17 	ldw	r5,-12(fp)
802198bc:	e13ffc17 	ldw	r4,-16(fp)
802198c0:	02190000 	call	80219000 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
802198c4:	e037883a 	mov	sp,fp
802198c8:	dfc00117 	ldw	ra,4(sp)
802198cc:	df000017 	ldw	fp,0(sp)
802198d0:	dec00204 	addi	sp,sp,8
802198d4:	f800283a 	ret

802198d8 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
802198d8:	defff804 	addi	sp,sp,-32
802198dc:	dfc00715 	stw	ra,28(sp)
802198e0:	df000615 	stw	fp,24(sp)
802198e4:	df000604 	addi	fp,sp,24
802198e8:	e13ffc15 	stw	r4,-16(fp)
802198ec:	e17ffd15 	stw	r5,-12(fp)
802198f0:	e1bffe15 	stw	r6,-8(fp)
802198f4:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
802198f8:	e0800317 	ldw	r2,12(fp)
802198fc:	d8800115 	stw	r2,4(sp)
80219900:	e0800217 	ldw	r2,8(fp)
80219904:	d8800015 	stw	r2,0(sp)
80219908:	e1ffff17 	ldw	r7,-4(fp)
8021990c:	e1bffe17 	ldw	r6,-8(fp)
80219910:	e17ffd17 	ldw	r5,-12(fp)
80219914:	e13ffc17 	ldw	r4,-16(fp)
80219918:	02190000 	call	80219000 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8021991c:	e037883a 	mov	sp,fp
80219920:	dfc00117 	ldw	ra,4(sp)
80219924:	df000017 	ldw	fp,0(sp)
80219928:	dec00204 	addi	sp,sp,8
8021992c:	f800283a 	ret

80219930 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 write_burst_count, 
    alt_u16 write_stride)
{
80219930:	defff004 	addi	sp,sp,-64
80219934:	dfc00f15 	stw	ra,60(sp)
80219938:	df000e15 	stw	fp,56(sp)
8021993c:	df000e04 	addi	fp,sp,56
80219940:	e13ff915 	stw	r4,-28(fp)
80219944:	e17ffa15 	stw	r5,-24(fp)
80219948:	e1bffb15 	stw	r6,-20(fp)
8021994c:	e1fffc15 	stw	r7,-16(fp)
80219950:	e1000317 	ldw	r4,12(fp)
80219954:	e0c00417 	ldw	r3,16(fp)
80219958:	e0800517 	ldw	r2,20(fp)
8021995c:	e13ffd0d 	sth	r4,-12(fp)
80219960:	e0fffe05 	stb	r3,-8(fp)
80219964:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
80219968:	e0bffd0b 	ldhu	r2,-12(fp)
8021996c:	e0fffe03 	ldbu	r3,-8(fp)
80219970:	e13fff0b 	ldhu	r4,-4(fp)
80219974:	d9000615 	stw	r4,24(sp)
80219978:	d8000515 	stw	zero,20(sp)
8021997c:	d8c00415 	stw	r3,16(sp)
80219980:	d8000315 	stw	zero,12(sp)
80219984:	d8800215 	stw	r2,8(sp)
80219988:	e0800217 	ldw	r2,8(fp)
8021998c:	d8800115 	stw	r2,4(sp)
80219990:	e0bffc17 	ldw	r2,-16(fp)
80219994:	d8800015 	stw	r2,0(sp)
80219998:	e1fffb17 	ldw	r7,-20(fp)
8021999c:	000d883a 	mov	r6,zero
802199a0:	e17ffa17 	ldw	r5,-24(fp)
802199a4:	e13ff917 	ldw	r4,-28(fp)
802199a8:	021908c0 	call	8021908c <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
802199ac:	e037883a 	mov	sp,fp
802199b0:	dfc00117 	ldw	ra,4(sp)
802199b4:	df000017 	ldw	fp,0(sp)
802199b8:	dec00204 	addi	sp,sp,8
802199bc:	f800283a 	ret

802199c0 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
    alt_u32 length,
    alt_u32 control,
    alt_u16 sequence_number,
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
802199c0:	defff004 	addi	sp,sp,-64
802199c4:	dfc00f15 	stw	ra,60(sp)
802199c8:	df000e15 	stw	fp,56(sp)
802199cc:	df000e04 	addi	fp,sp,56
802199d0:	e13ff915 	stw	r4,-28(fp)
802199d4:	e17ffa15 	stw	r5,-24(fp)
802199d8:	e1bffb15 	stw	r6,-20(fp)
802199dc:	e1fffc15 	stw	r7,-16(fp)
802199e0:	e1000317 	ldw	r4,12(fp)
802199e4:	e0c00417 	ldw	r3,16(fp)
802199e8:	e0800517 	ldw	r2,20(fp)
802199ec:	e13ffd0d 	sth	r4,-12(fp)
802199f0:	e0fffe05 	stb	r3,-8(fp)
802199f4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
802199f8:	e0bffd0b 	ldhu	r2,-12(fp)
802199fc:	e0fffe03 	ldbu	r3,-8(fp)
80219a00:	e13fff0b 	ldhu	r4,-4(fp)
80219a04:	d8000615 	stw	zero,24(sp)
80219a08:	d9000515 	stw	r4,20(sp)
80219a0c:	d8000415 	stw	zero,16(sp)
80219a10:	d8c00315 	stw	r3,12(sp)
80219a14:	d8800215 	stw	r2,8(sp)
80219a18:	e0800217 	ldw	r2,8(fp)
80219a1c:	d8800115 	stw	r2,4(sp)
80219a20:	e0bffc17 	ldw	r2,-16(fp)
80219a24:	d8800015 	stw	r2,0(sp)
80219a28:	000f883a 	mov	r7,zero
80219a2c:	e1bffb17 	ldw	r6,-20(fp)
80219a30:	e17ffa17 	ldw	r5,-24(fp)
80219a34:	e13ff917 	ldw	r4,-28(fp)
80219a38:	021908c0 	call	8021908c <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
80219a3c:	e037883a 	mov	sp,fp
80219a40:	dfc00117 	ldw	ra,4(sp)
80219a44:	df000017 	ldw	fp,0(sp)
80219a48:	dec00204 	addi	sp,sp,8
80219a4c:	f800283a 	ret

80219a50 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80219a50:	deffee04 	addi	sp,sp,-72
80219a54:	dfc01115 	stw	ra,68(sp)
80219a58:	df001015 	stw	fp,64(sp)
80219a5c:	df001004 	addi	fp,sp,64
80219a60:	e13ff715 	stw	r4,-36(fp)
80219a64:	e17ff815 	stw	r5,-32(fp)
80219a68:	e1bff915 	stw	r6,-28(fp)
80219a6c:	e1fffa15 	stw	r7,-24(fp)
80219a70:	e1800417 	ldw	r6,16(fp)
80219a74:	e1400517 	ldw	r5,20(fp)
80219a78:	e1000617 	ldw	r4,24(fp)
80219a7c:	e0c00717 	ldw	r3,28(fp)
80219a80:	e0800817 	ldw	r2,32(fp)
80219a84:	e1bffb0d 	sth	r6,-20(fp)
80219a88:	e17ffc05 	stb	r5,-16(fp)
80219a8c:	e13ffd05 	stb	r4,-12(fp)
80219a90:	e0fffe0d 	sth	r3,-8(fp)
80219a94:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
80219a98:	e0bffb0b 	ldhu	r2,-20(fp)
80219a9c:	e0fffc03 	ldbu	r3,-16(fp)
80219aa0:	e13ffd03 	ldbu	r4,-12(fp)
80219aa4:	e17ffe0b 	ldhu	r5,-8(fp)
80219aa8:	e1bfff0b 	ldhu	r6,-4(fp)
80219aac:	d9800615 	stw	r6,24(sp)
80219ab0:	d9400515 	stw	r5,20(sp)
80219ab4:	d9000415 	stw	r4,16(sp)
80219ab8:	d8c00315 	stw	r3,12(sp)
80219abc:	d8800215 	stw	r2,8(sp)
80219ac0:	e0800317 	ldw	r2,12(fp)
80219ac4:	d8800115 	stw	r2,4(sp)
80219ac8:	e0800217 	ldw	r2,8(fp)
80219acc:	d8800015 	stw	r2,0(sp)
80219ad0:	e1fffa17 	ldw	r7,-24(fp)
80219ad4:	e1bff917 	ldw	r6,-28(fp)
80219ad8:	e17ff817 	ldw	r5,-32(fp)
80219adc:	e13ff717 	ldw	r4,-36(fp)
80219ae0:	021908c0 	call	8021908c <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
80219ae4:	e037883a 	mov	sp,fp
80219ae8:	dfc00117 	ldw	ra,4(sp)
80219aec:	df000017 	ldw	fp,0(sp)
80219af0:	dec00204 	addi	sp,sp,8
80219af4:	f800283a 	ret

80219af8 <alt_msgdma_construct_prefetcher_standard_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
80219af8:	defffb04 	addi	sp,sp,-20
80219afc:	df000415 	stw	fp,16(sp)
80219b00:	df000404 	addi	fp,sp,16
80219b04:	e13ffc15 	stw	r4,-16(fp)
80219b08:	e17ffd15 	stw	r5,-12(fp)
80219b0c:	e1bffe15 	stw	r6,-8(fp)
80219b10:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
80219b14:	e0bffc17 	ldw	r2,-16(fp)
80219b18:	10c01217 	ldw	r3,72(r2)
80219b1c:	e0800117 	ldw	r2,4(fp)
80219b20:	18800436 	bltu	r3,r2,80219b34 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
80219b24:	e0bffc17 	ldw	r2,-16(fp)
80219b28:	10801703 	ldbu	r2,92(r2)
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
80219b2c:	10803fcc 	andi	r2,r2,255
80219b30:	10000226 	beq	r2,zero,80219b3c <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
80219b34:	00bffa84 	movi	r2,-22
80219b38:	00001406 	br	80219b8c <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
80219b3c:	e0bffd17 	ldw	r2,-12(fp)
80219b40:	e0fffe17 	ldw	r3,-8(fp)
80219b44:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
80219b48:	e0bffd17 	ldw	r2,-12(fp)
80219b4c:	e0ffff17 	ldw	r3,-4(fp)
80219b50:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
80219b54:	e0bffd17 	ldw	r2,-12(fp)
80219b58:	e0c00117 	ldw	r3,4(fp)
80219b5c:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
80219b60:	e0fffd17 	ldw	r3,-12(fp)
80219b64:	e0bffd17 	ldw	r2,-12(fp)
80219b68:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80219b6c:	e0c00217 	ldw	r3,8(fp)
80219b70:	00900034 	movhi	r2,16384
80219b74:	10bfffc4 	addi	r2,r2,-1
80219b78:	1884703a 	and	r2,r3,r2
80219b7c:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
80219b80:	e0bffd17 	ldw	r2,-12(fp)
80219b84:	10c00715 	stw	r3,28(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
80219b88:	0005883a 	mov	r2,zero
}
80219b8c:	e037883a 	mov	sp,fp
80219b90:	df000017 	ldw	fp,0(sp)
80219b94:	dec00104 	addi	sp,sp,4
80219b98:	f800283a 	ret

80219b9c <alt_msgdma_construct_prefetcher_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80219b9c:	defff404 	addi	sp,sp,-48
80219ba0:	df000b15 	stw	fp,44(sp)
80219ba4:	df000b04 	addi	fp,sp,44
80219ba8:	e13ff715 	stw	r4,-36(fp)
80219bac:	e17ff815 	stw	r5,-32(fp)
80219bb0:	e1bff915 	stw	r6,-28(fp)
80219bb4:	e1fffa15 	stw	r7,-24(fp)
80219bb8:	e1800517 	ldw	r6,20(fp)
80219bbc:	e1400617 	ldw	r5,24(fp)
80219bc0:	e1000717 	ldw	r4,28(fp)
80219bc4:	e0c00817 	ldw	r3,32(fp)
80219bc8:	e0800917 	ldw	r2,36(fp)
80219bcc:	e1bffb0d 	sth	r6,-20(fp)
80219bd0:	e17ffc05 	stb	r5,-16(fp)
80219bd4:	e13ffd05 	stb	r4,-12(fp)
80219bd8:	e0fffe0d 	sth	r3,-8(fp)
80219bdc:	e0bfff0d 	sth	r2,-4(fp)
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
80219be0:	e0bff717 	ldw	r2,-36(fp)
80219be4:	10c01217 	ldw	r3,72(r2)
80219be8:	e0800317 	ldw	r2,12(fp)
80219bec:	18801936 	bltu	r3,r2,80219c54 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
80219bf0:	e13ff717 	ldw	r4,-36(fp)
80219bf4:	20801317 	ldw	r2,76(r4)
80219bf8:	20c01417 	ldw	r3,80(r4)
80219bfc:	e13ffe0b 	ldhu	r4,-8(fp)
80219c00:	213fffcc 	andi	r4,r4,65535
80219c04:	2015883a 	mov	r10,r4
80219c08:	0017883a 	mov	r11,zero
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
80219c0c:	1ac01136 	bltu	r3,r11,80219c54 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
80219c10:	58c0011e 	bne	r11,r3,80219c18 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
80219c14:	12800f36 	bltu	r2,r10,80219c54 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
80219c18:	e13ff717 	ldw	r4,-36(fp)
80219c1c:	20801317 	ldw	r2,76(r4)
80219c20:	20c01417 	ldw	r3,80(r4)
80219c24:	e13fff0b 	ldhu	r4,-4(fp)
80219c28:	213fffcc 	andi	r4,r4,65535
80219c2c:	2011883a 	mov	r8,r4
80219c30:	0013883a 	mov	r9,zero
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
80219c34:	1a400736 	bltu	r3,r9,80219c54 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
80219c38:	48c0011e 	bne	r9,r3,80219c40 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
80219c3c:	12000536 	bltu	r2,r8,80219c54 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
80219c40:	e0bff717 	ldw	r2,-36(fp)
80219c44:	10801703 	ldbu	r2,92(r2)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
80219c48:	10803fcc 	andi	r2,r2,255
80219c4c:	10800060 	cmpeqi	r2,r2,1
80219c50:	1000021e 	bne	r2,zero,80219c5c <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
80219c54:	00bffa84 	movi	r2,-22
80219c58:	00003106 	br	80219d20 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
80219c5c:	e0bff817 	ldw	r2,-32(fp)
80219c60:	e0fff917 	ldw	r3,-28(fp)
80219c64:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
80219c68:	e0bff817 	ldw	r2,-32(fp)
80219c6c:	e0fffa17 	ldw	r3,-24(fp)
80219c70:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
80219c74:	e0bff817 	ldw	r2,-32(fp)
80219c78:	e0c00117 	ldw	r3,4(fp)
80219c7c:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
80219c80:	e0bff817 	ldw	r2,-32(fp)
80219c84:	e0c00217 	ldw	r3,8(fp)
80219c88:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
80219c8c:	e0bff817 	ldw	r2,-32(fp)
80219c90:	e0c00317 	ldw	r3,12(fp)
80219c94:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
80219c98:	e0bff817 	ldw	r2,-32(fp)
80219c9c:	e0fffb0b 	ldhu	r3,-20(fp)
80219ca0:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
80219ca4:	e0bff817 	ldw	r2,-32(fp)
80219ca8:	e0fffc03 	ldbu	r3,-16(fp)
80219cac:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
80219cb0:	e0bff817 	ldw	r2,-32(fp)
80219cb4:	e0fffd03 	ldbu	r3,-12(fp)
80219cb8:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
80219cbc:	e0bff817 	ldw	r2,-32(fp)
80219cc0:	e0fffe0b 	ldhu	r3,-8(fp)
80219cc4:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
80219cc8:	e0bff817 	ldw	r2,-32(fp)
80219ccc:	e0ffff0b 	ldhu	r3,-4(fp)
80219cd0:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
    node_addr.u64 = (uintptr_t)descriptor;
80219cd4:	e0bff817 	ldw	r2,-32(fp)
80219cd8:	1019883a 	mov	r12,r2
80219cdc:	001b883a 	mov	r13,zero
80219ce0:	e33ff515 	stw	r12,-44(fp)
80219ce4:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
80219ce8:	e0fff517 	ldw	r3,-44(fp)
80219cec:	e0bff817 	ldw	r2,-32(fp)
80219cf0:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
80219cf4:	e0fff617 	ldw	r3,-40(fp)
80219cf8:	e0bff817 	ldw	r2,-32(fp)
80219cfc:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80219d00:	e0c00417 	ldw	r3,16(fp)
80219d04:	00900034 	movhi	r2,16384
80219d08:	10bfffc4 	addi	r2,r2,-1
80219d0c:	1884703a 	and	r2,r3,r2
80219d10:	10e00034 	orhi	r3,r2,32768
    node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
80219d14:	e0bff817 	ldw	r2,-32(fp)
80219d18:	10c00f15 	stw	r3,60(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
80219d1c:	0005883a 	mov	r2,zero
}
80219d20:	e037883a 	mov	sp,fp
80219d24:	df000017 	ldw	fp,0(sp)
80219d28:	dec00104 	addi	sp,sp,4
80219d2c:	f800283a 	ret

80219d30 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address,
    alt_u32 write_address,
    alt_u32 length,
    alt_u32 control)
{
80219d30:	defff804 	addi	sp,sp,-32
80219d34:	dfc00715 	stw	ra,28(sp)
80219d38:	df000615 	stw	fp,24(sp)
80219d3c:	df000604 	addi	fp,sp,24
80219d40:	e13ffc15 	stw	r4,-16(fp)
80219d44:	e17ffd15 	stw	r5,-12(fp)
80219d48:	e1bffe15 	stw	r6,-8(fp)
80219d4c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
80219d50:	e0800317 	ldw	r2,12(fp)
80219d54:	d8800115 	stw	r2,4(sp)
80219d58:	e0800217 	ldw	r2,8(fp)
80219d5c:	d8800015 	stw	r2,0(sp)
80219d60:	e1ffff17 	ldw	r7,-4(fp)
80219d64:	e1bffe17 	ldw	r6,-8(fp)
80219d68:	e17ffd17 	ldw	r5,-12(fp)
80219d6c:	e13ffc17 	ldw	r4,-16(fp)
80219d70:	0219af80 	call	80219af8 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, write_address, length, control);
}
80219d74:	e037883a 	mov	sp,fp
80219d78:	dfc00117 	ldw	ra,4(sp)
80219d7c:	df000017 	ldw	fp,0(sp)
80219d80:	dec00204 	addi	sp,sp,8
80219d84:	f800283a 	ret

80219d88 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
80219d88:	defff804 	addi	sp,sp,-32
80219d8c:	dfc00715 	stw	ra,28(sp)
80219d90:	df000615 	stw	fp,24(sp)
80219d94:	df000604 	addi	fp,sp,24
80219d98:	e13ffc15 	stw	r4,-16(fp)
80219d9c:	e17ffd15 	stw	r5,-12(fp)
80219da0:	e1bffe15 	stw	r6,-8(fp)
80219da4:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
80219da8:	e0800217 	ldw	r2,8(fp)
80219dac:	d8800115 	stw	r2,4(sp)
80219db0:	e0bfff17 	ldw	r2,-4(fp)
80219db4:	d8800015 	stw	r2,0(sp)
80219db8:	e1fffe17 	ldw	r7,-8(fp)
80219dbc:	000d883a 	mov	r6,zero
80219dc0:	e17ffd17 	ldw	r5,-12(fp)
80219dc4:	e13ffc17 	ldw	r4,-16(fp)
80219dc8:	0219af80 	call	80219af8 <alt_msgdma_construct_prefetcher_standard_descriptor>
            0, write_address, length, control);
}
80219dcc:	e037883a 	mov	sp,fp
80219dd0:	dfc00117 	ldw	ra,4(sp)
80219dd4:	df000017 	ldw	fp,0(sp)
80219dd8:	dec00204 	addi	sp,sp,8
80219ddc:	f800283a 	ret

80219de0 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 read_address, 
    alt_u32 length, 
    alt_u32 control)
{
80219de0:	defff804 	addi	sp,sp,-32
80219de4:	dfc00715 	stw	ra,28(sp)
80219de8:	df000615 	stw	fp,24(sp)
80219dec:	df000604 	addi	fp,sp,24
80219df0:	e13ffc15 	stw	r4,-16(fp)
80219df4:	e17ffd15 	stw	r5,-12(fp)
80219df8:	e1bffe15 	stw	r6,-8(fp)
80219dfc:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
80219e00:	e0800217 	ldw	r2,8(fp)
80219e04:	d8800115 	stw	r2,4(sp)
80219e08:	e0bfff17 	ldw	r2,-4(fp)
80219e0c:	d8800015 	stw	r2,0(sp)
80219e10:	000f883a 	mov	r7,zero
80219e14:	e1bffe17 	ldw	r6,-8(fp)
80219e18:	e17ffd17 	ldw	r5,-12(fp)
80219e1c:	e13ffc17 	ldw	r4,-16(fp)
80219e20:	0219af80 	call	80219af8 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, 0, length, control);
}
80219e24:	e037883a 	mov	sp,fp
80219e28:	dfc00117 	ldw	ra,4(sp)
80219e2c:	df000017 	ldw	fp,0(sp)
80219e30:	dec00204 	addi	sp,sp,8
80219e34:	f800283a 	ret

80219e38 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number,
    alt_u8 write_burst_count,
    alt_u16 write_stride)
{
80219e38:	deffee04 	addi	sp,sp,-72
80219e3c:	dfc01115 	stw	ra,68(sp)
80219e40:	df001015 	stw	fp,64(sp)
80219e44:	df001004 	addi	fp,sp,64
80219e48:	e13ff915 	stw	r4,-28(fp)
80219e4c:	e17ffa15 	stw	r5,-24(fp)
80219e50:	e1bffb15 	stw	r6,-20(fp)
80219e54:	e1fffc15 	stw	r7,-16(fp)
80219e58:	e1000417 	ldw	r4,16(fp)
80219e5c:	e0c00517 	ldw	r3,20(fp)
80219e60:	e0800617 	ldw	r2,24(fp)
80219e64:	e13ffd0d 	sth	r4,-12(fp)
80219e68:	e0fffe05 	stb	r3,-8(fp)
80219e6c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
80219e70:	e0bffd0b 	ldhu	r2,-12(fp)
80219e74:	e0fffe03 	ldbu	r3,-8(fp)
80219e78:	e13fff0b 	ldhu	r4,-4(fp)
80219e7c:	d9000815 	stw	r4,32(sp)
80219e80:	d8000715 	stw	zero,28(sp)
80219e84:	d8c00615 	stw	r3,24(sp)
80219e88:	d8000515 	stw	zero,20(sp)
80219e8c:	d8800415 	stw	r2,16(sp)
80219e90:	e0800317 	ldw	r2,12(fp)
80219e94:	d8800315 	stw	r2,12(sp)
80219e98:	e0800217 	ldw	r2,8(fp)
80219e9c:	d8800215 	stw	r2,8(sp)
80219ea0:	e0bffc17 	ldw	r2,-16(fp)
80219ea4:	d8800115 	stw	r2,4(sp)
80219ea8:	e0bffb17 	ldw	r2,-20(fp)
80219eac:	d8800015 	stw	r2,0(sp)
80219eb0:	000f883a 	mov	r7,zero
80219eb4:	000d883a 	mov	r6,zero
80219eb8:	e17ffa17 	ldw	r5,-24(fp)
80219ebc:	e13ff917 	ldw	r4,-28(fp)
80219ec0:	0219b9c0 	call	80219b9c <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
            sequence_number, 0, write_burst_count, 0, write_stride);
}
80219ec4:	e037883a 	mov	sp,fp
80219ec8:	dfc00117 	ldw	ra,4(sp)
80219ecc:	df000017 	ldw	fp,0(sp)
80219ed0:	dec00204 	addi	sp,sp,8
80219ed4:	f800283a 	ret

80219ed8 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
80219ed8:	deffee04 	addi	sp,sp,-72
80219edc:	dfc01115 	stw	ra,68(sp)
80219ee0:	df001015 	stw	fp,64(sp)
80219ee4:	df001004 	addi	fp,sp,64
80219ee8:	e13ff915 	stw	r4,-28(fp)
80219eec:	e17ffa15 	stw	r5,-24(fp)
80219ef0:	e1bffb15 	stw	r6,-20(fp)
80219ef4:	e1fffc15 	stw	r7,-16(fp)
80219ef8:	e1000417 	ldw	r4,16(fp)
80219efc:	e0c00517 	ldw	r3,20(fp)
80219f00:	e0800617 	ldw	r2,24(fp)
80219f04:	e13ffd0d 	sth	r4,-12(fp)
80219f08:	e0fffe05 	stb	r3,-8(fp)
80219f0c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
80219f10:	e0bffd0b 	ldhu	r2,-12(fp)
80219f14:	e0fffe03 	ldbu	r3,-8(fp)
80219f18:	e13fff0b 	ldhu	r4,-4(fp)
80219f1c:	d8000815 	stw	zero,32(sp)
80219f20:	d9000715 	stw	r4,28(sp)
80219f24:	d8000615 	stw	zero,24(sp)
80219f28:	d8c00515 	stw	r3,20(sp)
80219f2c:	d8800415 	stw	r2,16(sp)
80219f30:	e0800317 	ldw	r2,12(fp)
80219f34:	d8800315 	stw	r2,12(sp)
80219f38:	e0800217 	ldw	r2,8(fp)
80219f3c:	d8800215 	stw	r2,8(sp)
80219f40:	d8000115 	stw	zero,4(sp)
80219f44:	d8000015 	stw	zero,0(sp)
80219f48:	e1fffc17 	ldw	r7,-16(fp)
80219f4c:	e1bffb17 	ldw	r6,-20(fp)
80219f50:	e17ffa17 	ldw	r5,-24(fp)
80219f54:	e13ff917 	ldw	r4,-28(fp)
80219f58:	0219b9c0 	call	80219b9c <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, 0, 0, length, control, 
            sequence_number, read_burst_count, 0, read_stride, 0);
}
80219f5c:	e037883a 	mov	sp,fp
80219f60:	dfc00117 	ldw	ra,4(sp)
80219f64:	df000017 	ldw	fp,0(sp)
80219f68:	dec00204 	addi	sp,sp,8
80219f6c:	f800283a 	ret

80219f70 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number,
    alt_u8 read_burst_count,
    alt_u8 write_burst_count, 
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80219f70:	deffec04 	addi	sp,sp,-80
80219f74:	dfc01315 	stw	ra,76(sp)
80219f78:	df001215 	stw	fp,72(sp)
80219f7c:	df001204 	addi	fp,sp,72
80219f80:	e13ff715 	stw	r4,-36(fp)
80219f84:	e17ff815 	stw	r5,-32(fp)
80219f88:	e1bff915 	stw	r6,-28(fp)
80219f8c:	e1fffa15 	stw	r7,-24(fp)
80219f90:	e1800617 	ldw	r6,24(fp)
80219f94:	e1400717 	ldw	r5,28(fp)
80219f98:	e1000817 	ldw	r4,32(fp)
80219f9c:	e0c00917 	ldw	r3,36(fp)
80219fa0:	e0800a17 	ldw	r2,40(fp)
80219fa4:	e1bffb0d 	sth	r6,-20(fp)
80219fa8:	e17ffc05 	stb	r5,-16(fp)
80219fac:	e13ffd05 	stb	r4,-12(fp)
80219fb0:	e0fffe0d 	sth	r3,-8(fp)
80219fb4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
80219fb8:	e0bffb0b 	ldhu	r2,-20(fp)
80219fbc:	e0fffc03 	ldbu	r3,-16(fp)
80219fc0:	e13ffd03 	ldbu	r4,-12(fp)
80219fc4:	e17ffe0b 	ldhu	r5,-8(fp)
80219fc8:	e1bfff0b 	ldhu	r6,-4(fp)
80219fcc:	d9800815 	stw	r6,32(sp)
80219fd0:	d9400715 	stw	r5,28(sp)
80219fd4:	d9000615 	stw	r4,24(sp)
80219fd8:	d8c00515 	stw	r3,20(sp)
80219fdc:	d8800415 	stw	r2,16(sp)
80219fe0:	e0800517 	ldw	r2,20(fp)
80219fe4:	d8800315 	stw	r2,12(sp)
80219fe8:	e0800417 	ldw	r2,16(fp)
80219fec:	d8800215 	stw	r2,8(sp)
80219ff0:	e0800317 	ldw	r2,12(fp)
80219ff4:	d8800115 	stw	r2,4(sp)
80219ff8:	e0800217 	ldw	r2,8(fp)
80219ffc:	d8800015 	stw	r2,0(sp)
8021a000:	e1fffa17 	ldw	r7,-24(fp)
8021a004:	e1bff917 	ldw	r6,-28(fp)
8021a008:	e17ff817 	ldw	r5,-32(fp)
8021a00c:	e13ff717 	ldw	r4,-36(fp)
8021a010:	0219b9c0 	call	80219b9c <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
            write_address_low, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
8021a014:	e037883a 	mov	sp,fp
8021a018:	dfc00117 	ldw	ra,4(sp)
8021a01c:	df000017 	ldw	fp,0(sp)
8021a020:	dec00204 	addi	sp,sp,8
8021a024:	f800283a 	ret

8021a028 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
    alt_msgdma_prefetcher_standard_descriptor** list,
    alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
8021a028:	defffc04 	addi	sp,sp,-16
8021a02c:	df000315 	stw	fp,12(sp)
8021a030:	df000304 	addi	fp,sp,12
8021a034:	e13ffe15 	stw	r4,-8(fp)
8021a038:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    
    if (descriptor == NULL)
8021a03c:	e0bfff17 	ldw	r2,-4(fp)
8021a040:	1000021e 	bne	r2,zero,8021a04c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
8021a044:	00bffa84 	movi	r2,-22
8021a048:	00002f06 	br	8021a108 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (descriptor->next_desc_ptr != (alt_u32)descriptor)
8021a04c:	e0bfff17 	ldw	r2,-4(fp)
8021a050:	10c00317 	ldw	r3,12(r2)
8021a054:	e0bfff17 	ldw	r2,-4(fp)
8021a058:	18800226 	beq	r3,r2,8021a064 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
8021a05c:	00bffa84 	movi	r2,-22
8021a060:	00002906 	br	8021a108 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == NULL)
8021a064:	e0bffe17 	ldw	r2,-8(fp)
8021a068:	10800017 	ldw	r2,0(r2)
8021a06c:	1000051e 	bne	r2,zero,8021a084 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
    {
        *list = descriptor;  /* make this root-node if list is empty */
8021a070:	e0bffe17 	ldw	r2,-8(fp)
8021a074:	e0ffff17 	ldw	r3,-4(fp)
8021a078:	10c00015 	stw	r3,0(r2)
        return 0;  /* successfully added */
8021a07c:	0005883a 	mov	r2,zero
8021a080:	00002106 	br	8021a108 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == descriptor)
8021a084:	e0bffe17 	ldw	r2,-8(fp)
8021a088:	10c00017 	ldw	r3,0(r2)
8021a08c:	e0bfff17 	ldw	r2,-4(fp)
8021a090:	1880021e 	bne	r3,r2,8021a09c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
8021a094:	00bffa84 	movi	r2,-22
8021a098:	00001b06 	br	8021a108 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
8021a09c:	e0bffe17 	ldw	r2,-8(fp)
8021a0a0:	10800017 	ldw	r2,0(r2)
8021a0a4:	e0bffd15 	stw	r2,-12(fp)
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8021a0a8:	00000906 	br	8021a0d0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
8021a0ac:	e0bffd17 	ldw	r2,-12(fp)
8021a0b0:	10c00317 	ldw	r3,12(r2)
8021a0b4:	e0bfff17 	ldw	r2,-4(fp)
8021a0b8:	1880021e 	bne	r3,r2,8021a0c4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
8021a0bc:	00bffa84 	movi	r2,-22
8021a0c0:	00001106 	br	8021a108 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8021a0c4:	e0bffd17 	ldw	r2,-12(fp)
8021a0c8:	10800317 	ldw	r2,12(r2)
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        last_descr_ptr = 
8021a0cc:	e0bffd15 	stw	r2,-12(fp)
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8021a0d0:	e0bffd17 	ldw	r2,-12(fp)
8021a0d4:	10800317 	ldw	r2,12(r2)
8021a0d8:	e0fffe17 	ldw	r3,-8(fp)
8021a0dc:	18c00017 	ldw	r3,0(r3)
8021a0e0:	10fff21e 	bne	r2,r3,8021a0ac <__reset+0xfa1fa0ac>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
    }
    /* add this descriptor to end of list */
    last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
8021a0e4:	e0ffff17 	ldw	r3,-4(fp)
8021a0e8:	e0bffd17 	ldw	r2,-12(fp)
8021a0ec:	10c00315 	stw	r3,12(r2)
    /* ensure new last pointer points the start of the list */
    descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
8021a0f0:	e0bffe17 	ldw	r2,-8(fp)
8021a0f4:	10800017 	ldw	r2,0(r2)
8021a0f8:	1007883a 	mov	r3,r2
8021a0fc:	e0bfff17 	ldw	r2,-4(fp)
8021a100:	10c00315 	stw	r3,12(r2)
    return 0; /* successfully added */
8021a104:	0005883a 	mov	r2,zero
}
8021a108:	e037883a 	mov	sp,fp
8021a10c:	df000017 	ldw	fp,0(sp)
8021a110:	dec00104 	addi	sp,sp,4
8021a114:	f800283a 	ret

8021a118 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
    alt_msgdma_prefetcher_extended_descriptor** list,
    alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
8021a118:	defff804 	addi	sp,sp,-32
8021a11c:	df000715 	stw	fp,28(sp)
8021a120:	df000704 	addi	fp,sp,28
8021a124:	e13ffe15 	stw	r4,-8(fp)
8021a128:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    msgdma_addr64 root_node_addr, next_node_addr;
    
    if (descriptor == NULL)
8021a12c:	e13fff17 	ldw	r4,-4(fp)
8021a130:	2000021e 	bne	r4,zero,8021a13c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
8021a134:	00bffa84 	movi	r2,-22
8021a138:	00005906 	br	8021a2a0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
8021a13c:	e13fff17 	ldw	r4,-4(fp)
8021a140:	2015883a 	mov	r10,r4
8021a144:	0017883a 	mov	r11,zero
8021a148:	e2bffc15 	stw	r10,-16(fp)
8021a14c:	e2fffd15 	stw	r11,-12(fp)
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
8021a150:	e13fff17 	ldw	r4,-4(fp)
8021a154:	21400317 	ldw	r5,12(r4)
8021a158:	e13ffc17 	ldw	r4,-16(fp)
8021a15c:	2900041e 	bne	r5,r4,8021a170 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
8021a160:	e13fff17 	ldw	r4,-4(fp)
8021a164:	21400b17 	ldw	r5,44(r4)
8021a168:	e13ffd17 	ldw	r4,-12(fp)
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
8021a16c:	29000226 	beq	r5,r4,8021a178 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
8021a170:	00bffa84 	movi	r2,-22
8021a174:	00004a06 	br	8021a2a0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    if (*list == NULL)
8021a178:	e13ffe17 	ldw	r4,-8(fp)
8021a17c:	21000017 	ldw	r4,0(r4)
8021a180:	2000051e 	bne	r4,zero,8021a198 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
    {
        *list = descriptor;  /* make this the root-node if list is empty */
8021a184:	e0bffe17 	ldw	r2,-8(fp)
8021a188:	e0ffff17 	ldw	r3,-4(fp)
8021a18c:	10c00015 	stw	r3,0(r2)
        return 0;
8021a190:	0005883a 	mov	r2,zero
8021a194:	00004206 	br	8021a2a0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    if (*list == descriptor)
8021a198:	e13ffe17 	ldw	r4,-8(fp)
8021a19c:	21400017 	ldw	r5,0(r4)
8021a1a0:	e13fff17 	ldw	r4,-4(fp)
8021a1a4:	2900021e 	bne	r5,r4,8021a1b0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
8021a1a8:	00bffa84 	movi	r2,-22
8021a1ac:	00003c06 	br	8021a2a0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
8021a1b0:	e13ffe17 	ldw	r4,-8(fp)
8021a1b4:	21000017 	ldw	r4,0(r4)
8021a1b8:	e13ff915 	stw	r4,-28(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
8021a1bc:	e13ffe17 	ldw	r4,-8(fp)
8021a1c0:	21000017 	ldw	r4,0(r4)
8021a1c4:	2011883a 	mov	r8,r4
8021a1c8:	0013883a 	mov	r9,zero
8021a1cc:	e23ffa15 	stw	r8,-24(fp)
8021a1d0:	e27ffb15 	stw	r9,-20(fp)
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8021a1d4:	00001806 	br	8021a238 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* first check if descriptor already in the list */
        next_node_addr.u64 = (uintptr_t)descriptor;
8021a1d8:	e13fff17 	ldw	r4,-4(fp)
8021a1dc:	200d883a 	mov	r6,r4
8021a1e0:	000f883a 	mov	r7,zero
8021a1e4:	e1bffc15 	stw	r6,-16(fp)
8021a1e8:	e1fffd15 	stw	r7,-12(fp)
        if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
8021a1ec:	e13ff917 	ldw	r4,-28(fp)
8021a1f0:	21400317 	ldw	r5,12(r4)
8021a1f4:	e13ffc17 	ldw	r4,-16(fp)
8021a1f8:	2900061e 	bne	r5,r4,8021a214 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
            && (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
8021a1fc:	e13ff917 	ldw	r4,-28(fp)
8021a200:	21400b17 	ldw	r5,44(r4)
8021a204:	e13ffd17 	ldw	r4,-12(fp)
8021a208:	2900021e 	bne	r5,r4,8021a214 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
8021a20c:	00bffa84 	movi	r2,-22
8021a210:	00002306 	br	8021a2a0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8021a214:	e13ff917 	ldw	r4,-28(fp)
8021a218:	21000317 	ldw	r4,12(r4)
8021a21c:	e13ffc15 	stw	r4,-16(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8021a220:	e13ff917 	ldw	r4,-28(fp)
8021a224:	21000b17 	ldw	r4,44(r4)
8021a228:	e13ffd15 	stw	r4,-12(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8021a22c:	e13ffc17 	ldw	r4,-16(fp)
8021a230:	e17ffd17 	ldw	r5,-12(fp)
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
8021a234:	e13ff915 	stw	r4,-28(fp)
    last_descr_ptr = *list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8021a238:	e13ff917 	ldw	r4,-28(fp)
8021a23c:	21400317 	ldw	r5,12(r4)
8021a240:	e13ffa17 	ldw	r4,-24(fp)
8021a244:	293fe41e 	bne	r5,r4,8021a1d8 <__reset+0xfa1fa1d8>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8021a248:	e13ff917 	ldw	r4,-28(fp)
8021a24c:	21400b17 	ldw	r5,44(r4)
8021a250:	e13ffb17 	ldw	r4,-20(fp)
8021a254:	293fe01e 	bne	r5,r4,8021a1d8 <__reset+0xfa1fa1d8>
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
    }
    /* add this descriptor to end of list */
    next_node_addr.u64 = (uintptr_t)descriptor;
8021a258:	e13fff17 	ldw	r4,-4(fp)
8021a25c:	2005883a 	mov	r2,r4
8021a260:	0007883a 	mov	r3,zero
8021a264:	e0bffc15 	stw	r2,-16(fp)
8021a268:	e0fffd15 	stw	r3,-12(fp)
    last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
8021a26c:	e0fffc17 	ldw	r3,-16(fp)
8021a270:	e0bff917 	ldw	r2,-28(fp)
8021a274:	10c00315 	stw	r3,12(r2)
    last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
8021a278:	e0fffd17 	ldw	r3,-12(fp)
8021a27c:	e0bff917 	ldw	r2,-28(fp)
8021a280:	10c00b15 	stw	r3,44(r2)
    /* ensure new last pointer points the beginning of the list */
    descriptor->next_desc_ptr_low = root_node_addr.u32[0];
8021a284:	e0fffa17 	ldw	r3,-24(fp)
8021a288:	e0bfff17 	ldw	r2,-4(fp)
8021a28c:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = root_node_addr.u32[1];
8021a290:	e0fffb17 	ldw	r3,-20(fp)
8021a294:	e0bfff17 	ldw	r2,-4(fp)
8021a298:	10c00b15 	stw	r3,44(r2)
    return 0;
8021a29c:	0005883a 	mov	r2,zero
}
8021a2a0:	e037883a 	mov	sp,fp
8021a2a4:	df000017 	ldw	fp,0(sp)
8021a2a8:	dec00104 	addi	sp,sp,4
8021a2ac:	f800283a 	ret

8021a2b0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 */ 
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)    
{
8021a2b0:	defff804 	addi	sp,sp,-32
8021a2b4:	dfc00715 	stw	ra,28(sp)
8021a2b8:	df000615 	stw	fp,24(sp)
8021a2bc:	df000604 	addi	fp,sp,24
8021a2c0:	e13ffd15 	stw	r4,-12(fp)
8021a2c4:	2807883a 	mov	r3,r5
8021a2c8:	3005883a 	mov	r2,r6
8021a2cc:	e0fffe05 	stb	r3,-8(fp)
8021a2d0:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 descriptor_control_field = 0;
8021a2d4:	e03ffc15 	stw	zero,-16(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
8021a2d8:	e03ffb15 	stw	zero,-20(fp)
    
    if (list == NULL)
8021a2dc:	e0bffd17 	ldw	r2,-12(fp)
8021a2e0:	1000021e 	bne	r2,zero,8021a2ec <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x3c>
    {
        return -EINVAL;  /* this list cannot be empty */
8021a2e4:	00bffa84 	movi	r2,-22
8021a2e8:	00002f06 	br	8021a3a8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf8>
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
8021a2ec:	e0bffd17 	ldw	r2,-12(fp)
8021a2f0:	e0bffa15 	stw	r2,-24(fp)
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8021a2f4:	00000d06 	br	8021a32c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x7c>
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
8021a2f8:	e0bffa17 	ldw	r2,-24(fp)
8021a2fc:	10800717 	ldw	r2,28(r2)
8021a300:	e0bffc15 	stw	r2,-16(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8021a304:	e0bffc17 	ldw	r2,-16(fp)
8021a308:	10d00034 	orhi	r3,r2,16384
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
8021a30c:	e0bffa17 	ldw	r2,-24(fp)
8021a310:	10c00715 	stw	r3,28(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8021a314:	e0bffa17 	ldw	r2,-24(fp)
8021a318:	10800317 	ldw	r2,12(r2)
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
8021a31c:	e0bffa15 	stw	r2,-24(fp)
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
8021a320:	e0bffb17 	ldw	r2,-20(fp)
8021a324:	10800044 	addi	r2,r2,1
8021a328:	e0bffb15 	stw	r2,-20(fp)
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8021a32c:	e0bffa17 	ldw	r2,-24(fp)
8021a330:	10c00317 	ldw	r3,12(r2)
8021a334:	e0bffd17 	ldw	r2,-12(fp)
8021a338:	18bfef1e 	bne	r3,r2,8021a2f8 <__reset+0xfa1fa2f8>
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
8021a33c:	e0bffa17 	ldw	r2,-24(fp)
8021a340:	10800717 	ldw	r2,28(r2)
8021a344:	e0bffc15 	stw	r2,-16(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
8021a348:	e0bffe03 	ldbu	r2,-8(fp)
8021a34c:	10000726 	beq	r2,zero,8021a36c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xbc>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
8021a350:	e0fffc17 	ldw	r3,-16(fp)
8021a354:	00b00034 	movhi	r2,49152
8021a358:	10bfffc4 	addi	r2,r2,-1
8021a35c:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
8021a360:	e0bffa17 	ldw	r2,-24(fp)
8021a364:	10c00715 	stw	r3,28(r2)
8021a368:	00000406 	br	8021a37c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xcc>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
8021a36c:	e0bffc17 	ldw	r2,-16(fp)
8021a370:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
8021a374:	e0bffa17 	ldw	r2,-24(fp)
8021a378:	10c00715 	stw	r3,28(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
8021a37c:	e0bffb17 	ldw	r2,-20(fp)
8021a380:	10800044 	addi	r2,r2,1
8021a384:	e0bffb15 	stw	r2,-20(fp)
    
    if (dcache_flush_desc_list)
8021a388:	e0bfff03 	ldbu	r2,-4(fp)
8021a38c:	10000526 	beq	r2,zero,8021a3a4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf4>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_standard_descriptor) * descriptor_count);
8021a390:	e0bffb17 	ldw	r2,-20(fp)
8021a394:	1004917a 	slli	r2,r2,5
8021a398:	100b883a 	mov	r5,r2
8021a39c:	e13ffd17 	ldw	r4,-12(fp)
8021a3a0:	021ad4c0 	call	8021ad4c <alt_dcache_flush>
    }
    
    return 0;
8021a3a4:	0005883a 	mov	r2,zero
}
8021a3a8:	e037883a 	mov	sp,fp
8021a3ac:	dfc00117 	ldw	ra,4(sp)
8021a3b0:	df000017 	ldw	fp,0(sp)
8021a3b4:	dec00204 	addi	sp,sp,8
8021a3b8:	f800283a 	ret

8021a3bc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 */    
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list) 
{    
8021a3bc:	defff404 	addi	sp,sp,-48
8021a3c0:	dfc00b15 	stw	ra,44(sp)
8021a3c4:	df000a15 	stw	fp,40(sp)
8021a3c8:	df000a04 	addi	fp,sp,40
8021a3cc:	e13ffd15 	stw	r4,-12(fp)
8021a3d0:	3009883a 	mov	r4,r6
8021a3d4:	e17ffe05 	stb	r5,-8(fp)
8021a3d8:	e13fff05 	stb	r4,-4(fp)
    alt_u32 descriptor_control_field = 0;
8021a3dc:	e03ff815 	stw	zero,-32(fp)
    msgdma_addr64 root_node_addr, next_node_addr;
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
8021a3e0:	e03ff715 	stw	zero,-36(fp)
    
    if (list == NULL)
8021a3e4:	e13ffd17 	ldw	r4,-12(fp)
8021a3e8:	2000021e 	bne	r4,zero,8021a3f4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x38>
    {
        return -EINVAL;  /* this list cannot be empty */
8021a3ec:	00bffa84 	movi	r2,-22
8021a3f0:	00003e06 	br	8021a4ec <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x130>
    }
    
    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
8021a3f4:	e13ffd17 	ldw	r4,-12(fp)
8021a3f8:	e13ff615 	stw	r4,-40(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;
8021a3fc:	e13ffd17 	ldw	r4,-12(fp)
8021a400:	2005883a 	mov	r2,r4
8021a404:	0007883a 	mov	r3,zero
8021a408:	e0bff915 	stw	r2,-28(fp)
8021a40c:	e0fffa15 	stw	r3,-24(fp)

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8021a410:	00001306 	br	8021a460 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
8021a414:	e0bff617 	ldw	r2,-40(fp)
8021a418:	10800f17 	ldw	r2,60(r2)
8021a41c:	e0bff815 	stw	r2,-32(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8021a420:	e0bff817 	ldw	r2,-32(fp)
8021a424:	10d00034 	orhi	r3,r2,16384
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
8021a428:	e0bff617 	ldw	r2,-40(fp)
8021a42c:	10c00f15 	stw	r3,60(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8021a430:	e0bff617 	ldw	r2,-40(fp)
8021a434:	10800317 	ldw	r2,12(r2)
8021a438:	e0bffb15 	stw	r2,-20(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8021a43c:	e0bff617 	ldw	r2,-40(fp)
8021a440:	10800b17 	ldw	r2,44(r2)
8021a444:	e0bffc15 	stw	r2,-16(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8021a448:	e0bffb17 	ldw	r2,-20(fp)
8021a44c:	e0fffc17 	ldw	r3,-16(fp)
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
8021a450:	e0bff615 	stw	r2,-40(fp)
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
8021a454:	e0bff717 	ldw	r2,-36(fp)
8021a458:	10800044 	addi	r2,r2,1
8021a45c:	e0bff715 	stw	r2,-36(fp)
    last_descr_ptr = list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8021a460:	e0bff617 	ldw	r2,-40(fp)
8021a464:	10c00317 	ldw	r3,12(r2)
8021a468:	e0bff917 	ldw	r2,-28(fp)
8021a46c:	18bfe91e 	bne	r3,r2,8021a414 <__reset+0xfa1fa414>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8021a470:	e0bff617 	ldw	r2,-40(fp)
8021a474:	10c00b17 	ldw	r3,44(r2)
8021a478:	e0bffa17 	ldw	r2,-24(fp)
8021a47c:	18bfe51e 	bne	r3,r2,8021a414 <__reset+0xfa1fa414>
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
8021a480:	e0bff617 	ldw	r2,-40(fp)
8021a484:	10800f17 	ldw	r2,60(r2)
8021a488:	e0bff815 	stw	r2,-32(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
8021a48c:	e0bffe03 	ldbu	r2,-8(fp)
8021a490:	10000726 	beq	r2,zero,8021a4b0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xf4>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
8021a494:	e0fff817 	ldw	r3,-32(fp)
8021a498:	00b00034 	movhi	r2,49152
8021a49c:	10bfffc4 	addi	r2,r2,-1
8021a4a0:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
8021a4a4:	e0bff617 	ldw	r2,-40(fp)
8021a4a8:	10c00f15 	stw	r3,60(r2)
8021a4ac:	00000406 	br	8021a4c0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x104>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
8021a4b0:	e0bff817 	ldw	r2,-32(fp)
8021a4b4:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
8021a4b8:	e0bff617 	ldw	r2,-40(fp)
8021a4bc:	10c00f15 	stw	r3,60(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
8021a4c0:	e0bff717 	ldw	r2,-36(fp)
8021a4c4:	10800044 	addi	r2,r2,1
8021a4c8:	e0bff715 	stw	r2,-36(fp)
    
    if (dcache_flush_desc_list)
8021a4cc:	e0bfff03 	ldbu	r2,-4(fp)
8021a4d0:	10000526 	beq	r2,zero,8021a4e8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x12c>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_extended_descriptor) * descriptor_count);        
8021a4d4:	e0bff717 	ldw	r2,-36(fp)
8021a4d8:	100491ba 	slli	r2,r2,6
8021a4dc:	100b883a 	mov	r5,r2
8021a4e0:	e13ffd17 	ldw	r4,-12(fp)
8021a4e4:	021ad4c0 	call	8021ad4c <alt_dcache_flush>
    }
    
    return 0;
8021a4e8:	0005883a 	mov	r2,zero
}
8021a4ec:	e037883a 	mov	sp,fp
8021a4f0:	dfc00117 	ldw	ra,4(sp)
8021a4f4:	df000017 	ldw	fp,0(sp)
8021a4f8:	dec00204 	addi	sp,sp,8
8021a4fc:	f800283a 	ret

8021a500 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
    alt_msgdma_dev *dev,
    alt_u64  list_addr,
    alt_u8 park_mode_en,
    alt_u8 poll_en)
{
8021a500:	deffef04 	addi	sp,sp,-68
8021a504:	df001015 	stw	fp,64(sp)
8021a508:	df001004 	addi	fp,sp,64
8021a50c:	e13ffb15 	stw	r4,-20(fp)
8021a510:	e17ffc15 	stw	r5,-16(fp)
8021a514:	e1bffd15 	stw	r6,-12(fp)
8021a518:	3807883a 	mov	r3,r7
8021a51c:	e0800117 	ldw	r2,4(fp)
8021a520:	e0fffe05 	stb	r3,-8(fp)
8021a524:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 prefetcher_ctl = 0;
8021a528:	e03ff015 	stw	zero,-64(fp)
    alt_u32 dispatcher_ctl = 0;
8021a52c:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
8021a530:	e03ff215 	stw	zero,-56(fp)
    
    /* use helper struct to get easy access to hi/low address */
    msgdma_addr64 root_node_addr;
    root_node_addr.u64 = list_addr;  
8021a534:	e0bffc17 	ldw	r2,-16(fp)
8021a538:	e0bff915 	stw	r2,-28(fp)
8021a53c:	e0bffd17 	ldw	r2,-12(fp)
8021a540:	e0bffa15 	stw	r2,-24(fp)
     * semaphore. This ensures that accessing registers is thread-safe.
     */
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* case where prefetcher already started, return busy error */ 
    prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
8021a544:	e0bffb17 	ldw	r2,-20(fp)
8021a548:	10800617 	ldw	r2,24(r2)
8021a54c:	10800037 	ldwio	r2,0(r2)
8021a550:	e0bff015 	stw	r2,-64(fp)
    if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
8021a554:	e0bff017 	ldw	r2,-64(fp)
8021a558:	1080004c 	andi	r2,r2,1
8021a55c:	10000226 	beq	r2,zero,8021a568 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
        /* release the registers semaphore */
        ALT_SEM_POST (dev->regs_lock);
        return -EBUSY;
8021a560:	00bffc04 	movi	r2,-16
8021a564:	00009206 	br	8021a7b0 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
    }
        
    /* Stop the msgdma dispatcher from issuing more descriptors to the
       read or write masters  */
    /* stop issuing more descriptors */
    dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8021a568:	00800804 	movi	r2,32
8021a56c:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021a570:	0005303a 	rdctl	r2,status
8021a574:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021a578:	e0fff517 	ldw	r3,-44(fp)
8021a57c:	00bfff84 	movi	r2,-2
8021a580:	1884703a 	and	r2,r3,r2
8021a584:	1001703a 	wrctl	status,r2
  
  return context;
8021a588:	e0bff517 	ldw	r2,-44(fp)
    
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8021a58c:	e0bff215 	stw	r2,-56(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8021a590:	e0bffb17 	ldw	r2,-20(fp)
8021a594:	10800317 	ldw	r2,12(r2)
8021a598:	10800104 	addi	r2,r2,4
8021a59c:	e0fff117 	ldw	r3,-60(fp)
8021a5a0:	10c00035 	stwio	r3,0(r2)
    /*
     * Clear any (previous) status register information
     * that might occlude our error checking later.
     */
    IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
8021a5a4:	e0bffb17 	ldw	r2,-20(fp)
8021a5a8:	10800317 	ldw	r2,12(r2)
8021a5ac:	e0fffb17 	ldw	r3,-20(fp)
8021a5b0:	18c00317 	ldw	r3,12(r3)
8021a5b4:	18c00037 	ldwio	r3,0(r3)
8021a5b8:	10c00035 	stwio	r3,0(r2)
8021a5bc:	e0bff217 	ldw	r2,-56(fp)
8021a5c0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021a5c4:	e0bff317 	ldw	r2,-52(fp)
8021a5c8:	1001703a 	wrctl	status,r2
     * If a callback routine has been previously registered which will be
     * called from the msgdma ISR. Set up dispatcher to:
     *  - Run
     *  - Stop on an error with any particular descriptor
     */
    if(dev->callback)
8021a5cc:	e0bffb17 	ldw	r2,-20(fp)
8021a5d0:	10800b17 	ldw	r2,44(r2)
8021a5d4:	10002326 	beq	r2,zero,8021a664 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
    {
        dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
8021a5d8:	e0bffb17 	ldw	r2,-20(fp)
8021a5dc:	10c00d17 	ldw	r3,52(r2)
8021a5e0:	e0bff117 	ldw	r2,-60(fp)
8021a5e4:	1884b03a 	or	r2,r3,r2
8021a5e8:	10800514 	ori	r2,r2,20
8021a5ec:	e0bff115 	stw	r2,-60(fp)
                | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8021a5f0:	e0fff117 	ldw	r3,-60(fp)
8021a5f4:	00bff7c4 	movi	r2,-33
8021a5f8:	1884703a 	and	r2,r3,r2
8021a5fc:	e0bff115 	stw	r2,-60(fp)
        
        prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8021a600:	e0bff017 	ldw	r2,-64(fp)
8021a604:	10800214 	ori	r2,r2,8
8021a608:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021a60c:	0005303a 	rdctl	r2,status
8021a610:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021a614:	e0fff717 	ldw	r3,-36(fp)
8021a618:	00bfff84 	movi	r2,-2
8021a61c:	1884703a 	and	r2,r3,r2
8021a620:	1001703a 	wrctl	status,r2
  
  return context;
8021a624:	e0bff717 	ldw	r2,-36(fp)
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
8021a628:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8021a62c:	e0bffb17 	ldw	r2,-20(fp)
8021a630:	10800317 	ldw	r2,12(r2)
8021a634:	10800104 	addi	r2,r2,4
8021a638:	e0fff117 	ldw	r3,-60(fp)
8021a63c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8021a640:	e0bffb17 	ldw	r2,-20(fp)
8021a644:	10800617 	ldw	r2,24(r2)
8021a648:	e0fff017 	ldw	r3,-64(fp)
8021a64c:	10c00035 	stwio	r3,0(r2)
8021a650:	e0bff217 	ldw	r2,-56(fp)
8021a654:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021a658:	e0bff417 	ldw	r2,-48(fp)
8021a65c:	1001703a 	wrctl	status,r2
8021a660:	00002306 	br	8021a6f0 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
      *   - Stop on an error with any particular descriptor
      *   - Disable interrupt generation
      */
     else
     {
         dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
8021a664:	e0bffb17 	ldw	r2,-20(fp)
8021a668:	10c00d17 	ldw	r3,52(r2)
8021a66c:	e0bff117 	ldw	r2,-60(fp)
8021a670:	1884b03a 	or	r2,r3,r2
8021a674:	10800114 	ori	r2,r2,4
8021a678:	e0bff115 	stw	r2,-60(fp)
         dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
8021a67c:	e0fff117 	ldw	r3,-60(fp)
8021a680:	00bff3c4 	movi	r2,-49
8021a684:	1884703a 	and	r2,r3,r2
8021a688:	e0bff115 	stw	r2,-60(fp)
                 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
8021a68c:	e0fff017 	ldw	r3,-64(fp)
8021a690:	00bffdc4 	movi	r2,-9
8021a694:	1884703a 	and	r2,r3,r2
8021a698:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021a69c:	0005303a 	rdctl	r2,status
8021a6a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021a6a4:	e0fff817 	ldw	r3,-32(fp)
8021a6a8:	00bfff84 	movi	r2,-2
8021a6ac:	1884703a 	and	r2,r3,r2
8021a6b0:	1001703a 	wrctl	status,r2
  
  return context;
8021a6b4:	e0bff817 	ldw	r2,-32(fp)
         /* making sure the read-modify-write below can't be pre-empted */
         context = alt_irq_disable_all();
8021a6b8:	e0bff215 	stw	r2,-56(fp)
         IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8021a6bc:	e0bffb17 	ldw	r2,-20(fp)
8021a6c0:	10800317 	ldw	r2,12(r2)
8021a6c4:	10800104 	addi	r2,r2,4
8021a6c8:	e0fff117 	ldw	r3,-60(fp)
8021a6cc:	10c00035 	stwio	r3,0(r2)
         IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8021a6d0:	e0bffb17 	ldw	r2,-20(fp)
8021a6d4:	10800617 	ldw	r2,24(r2)
8021a6d8:	e0fff017 	ldw	r3,-64(fp)
8021a6dc:	10c00035 	stwio	r3,0(r2)
8021a6e0:	e0bff217 	ldw	r2,-56(fp)
8021a6e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021a6e8:	e0bff617 	ldw	r2,-40(fp)
8021a6ec:	1001703a 	wrctl	status,r2
         alt_irq_enable_all(context);
     }   
    
     /* set next descriptor registers to point to the list root-node */
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
8021a6f0:	e0bffb17 	ldw	r2,-20(fp)
8021a6f4:	10800617 	ldw	r2,24(r2)
8021a6f8:	10800104 	addi	r2,r2,4
8021a6fc:	e0fff917 	ldw	r3,-28(fp)
8021a700:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[0]);
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
8021a704:	e0bffb17 	ldw	r2,-20(fp)
8021a708:	10800617 	ldw	r2,24(r2)
8021a70c:	10800204 	addi	r2,r2,8
8021a710:	e0fffa17 	ldw	r3,-24(fp)
8021a714:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[1]);
        
     /* set park-mode */
     if (park_mode_en){
8021a718:	e0bffe03 	ldbu	r2,-8(fp)
8021a71c:	10000426 	beq	r2,zero,8021a730 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
8021a720:	e0bff017 	ldw	r2,-64(fp)
8021a724:	10800414 	ori	r2,r2,16
8021a728:	e0bff015 	stw	r2,-64(fp)
8021a72c:	00000406 	br	8021a740 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
8021a730:	e0fff017 	ldw	r3,-64(fp)
8021a734:	00bffbc4 	movi	r2,-17
8021a738:	1884703a 	and	r2,r3,r2
8021a73c:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set poll-en */
     if (poll_en){
8021a740:	e0bfff03 	ldbu	r2,-4(fp)
8021a744:	10000e26 	beq	r2,zero,8021a780 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
8021a748:	e0bff017 	ldw	r2,-64(fp)
8021a74c:	10800094 	ori	r2,r2,2
8021a750:	e0bff015 	stw	r2,-64(fp)
         if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8021a754:	e0bffb17 	ldw	r2,-20(fp)
8021a758:	10800617 	ldw	r2,24(r2)
8021a75c:	10800304 	addi	r2,r2,12
8021a760:	10800037 	ldwio	r2,0(r2)
8021a764:	10000a1e 	bne	r2,zero,8021a790 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                 dev->prefetcher_base) == 0){
             /* set poll frequency to some non-zero default value */
             IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8021a768:	e0bffb17 	ldw	r2,-20(fp)
8021a76c:	10800617 	ldw	r2,24(r2)
8021a770:	10800304 	addi	r2,r2,12
8021a774:	00c03fc4 	movi	r3,255
8021a778:	10c00035 	stwio	r3,0(r2)
8021a77c:	00000406 	br	8021a790 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                     dev->prefetcher_base, 0xFF);
         }
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
8021a780:	e0fff017 	ldw	r3,-64(fp)
8021a784:	00bfff44 	movi	r2,-3
8021a788:	1884703a 	and	r2,r3,r2
8021a78c:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set the prefetcher run bit */
     prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
8021a790:	e0bff017 	ldw	r2,-64(fp)
8021a794:	10800054 	ori	r2,r2,1
8021a798:	e0bff015 	stw	r2,-64(fp)
     /* start the dma since run bit is set */
     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8021a79c:	e0bffb17 	ldw	r2,-20(fp)
8021a7a0:	10800617 	ldw	r2,24(r2)
8021a7a4:	e0fff017 	ldw	r3,-64(fp)
8021a7a8:	10c00035 	stwio	r3,0(r2)
      * Now that access to the registers is complete, release the registers
      * semaphore so that other threads can access the registers.
      */
     ALT_SEM_POST (dev->regs_lock);
     
     return 0;
8021a7ac:	0005883a 	mov	r2,zero
}
8021a7b0:	e037883a 	mov	sp,fp
8021a7b4:	df000017 	ldw	fp,0(sp)
8021a7b8:	dec00104 	addi	sp,sp,4
8021a7bc:	f800283a 	ret

8021a7c0 <alt_msgdma_start_prefetcher_with_std_desc_list>:
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{    
8021a7c0:	defff504 	addi	sp,sp,-44
8021a7c4:	dfc00a15 	stw	ra,40(sp)
8021a7c8:	df000915 	stw	fp,36(sp)
8021a7cc:	dc400815 	stw	r17,32(sp)
8021a7d0:	dc000715 	stw	r16,28(sp)
8021a7d4:	df000904 	addi	fp,sp,36
8021a7d8:	e13ff815 	stw	r4,-32(fp)
8021a7dc:	e17ff915 	stw	r5,-28(fp)
8021a7e0:	300b883a 	mov	r5,r6
8021a7e4:	3809883a 	mov	r4,r7
8021a7e8:	e0c00217 	ldw	r3,8(fp)
8021a7ec:	e0800317 	ldw	r2,12(fp)
8021a7f0:	e17ffa05 	stb	r5,-24(fp)
8021a7f4:	e13ffb05 	stb	r4,-20(fp)
8021a7f8:	e0fffc05 	stb	r3,-16(fp)
8021a7fc:	e0bffd05 	stb	r2,-12(fp)
    if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
8021a800:	e0bffc03 	ldbu	r2,-16(fp)
8021a804:	e0fffd03 	ldbu	r3,-12(fp)
8021a808:	180d883a 	mov	r6,r3
8021a80c:	100b883a 	mov	r5,r2
8021a810:	e13ff917 	ldw	r4,-28(fp)
8021a814:	021a2b00 	call	8021a2b0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
8021a818:	10000226 	beq	r2,zero,8021a824 <alt_msgdma_start_prefetcher_with_std_desc_list+0x64>
    {
        return -EINVAL;
8021a81c:	00bffa84 	movi	r2,-22
8021a820:	00000b06 	br	8021a850 <alt_msgdma_start_prefetcher_with_std_desc_list+0x90>
    }

    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
8021a824:	e0bff917 	ldw	r2,-28(fp)
8021a828:	1021883a 	mov	r16,r2
8021a82c:	0023883a 	mov	r17,zero
8021a830:	e0fffa03 	ldbu	r3,-24(fp)
8021a834:	e0bffb03 	ldbu	r2,-20(fp)
8021a838:	d8800015 	stw	r2,0(sp)
8021a83c:	180f883a 	mov	r7,r3
8021a840:	800b883a 	mov	r5,r16
8021a844:	880d883a 	mov	r6,r17
8021a848:	e13ff817 	ldw	r4,-32(fp)
8021a84c:	021a5000 	call	8021a500 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
8021a850:	e6fffe04 	addi	sp,fp,-8
8021a854:	dfc00317 	ldw	ra,12(sp)
8021a858:	df000217 	ldw	fp,8(sp)
8021a85c:	dc400117 	ldw	r17,4(sp)
8021a860:	dc000017 	ldw	r16,0(sp)
8021a864:	dec00404 	addi	sp,sp,16
8021a868:	f800283a 	ret

8021a86c <alt_msgdma_start_prefetcher_with_extd_desc_list>:
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{
8021a86c:	defff504 	addi	sp,sp,-44
8021a870:	dfc00a15 	stw	ra,40(sp)
8021a874:	df000915 	stw	fp,36(sp)
8021a878:	dc400815 	stw	r17,32(sp)
8021a87c:	dc000715 	stw	r16,28(sp)
8021a880:	df000904 	addi	fp,sp,36
8021a884:	e13ff815 	stw	r4,-32(fp)
8021a888:	e17ff915 	stw	r5,-28(fp)
8021a88c:	300b883a 	mov	r5,r6
8021a890:	3809883a 	mov	r4,r7
8021a894:	e0c00217 	ldw	r3,8(fp)
8021a898:	e0800317 	ldw	r2,12(fp)
8021a89c:	e17ffa05 	stb	r5,-24(fp)
8021a8a0:	e13ffb05 	stb	r4,-20(fp)
8021a8a4:	e0fffc05 	stb	r3,-16(fp)
8021a8a8:	e0bffd05 	stb	r2,-12(fp)
    
     if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
8021a8ac:	e0bffc03 	ldbu	r2,-16(fp)
8021a8b0:	e0fffd03 	ldbu	r3,-12(fp)
8021a8b4:	180d883a 	mov	r6,r3
8021a8b8:	100b883a 	mov	r5,r2
8021a8bc:	e13ff917 	ldw	r4,-28(fp)
8021a8c0:	021a3bc0 	call	8021a3bc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
8021a8c4:	10000226 	beq	r2,zero,8021a8d0 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x64>
    {
        return -EINVAL;
8021a8c8:	00bffa84 	movi	r2,-22
8021a8cc:	00000b06 	br	8021a8fc <alt_msgdma_start_prefetcher_with_extd_desc_list+0x90>
    }
        
    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
8021a8d0:	e0bff917 	ldw	r2,-28(fp)
8021a8d4:	1021883a 	mov	r16,r2
8021a8d8:	0023883a 	mov	r17,zero
8021a8dc:	e0fffa03 	ldbu	r3,-24(fp)
8021a8e0:	e0bffb03 	ldbu	r2,-20(fp)
8021a8e4:	d8800015 	stw	r2,0(sp)
8021a8e8:	180f883a 	mov	r7,r3
8021a8ec:	800b883a 	mov	r5,r16
8021a8f0:	880d883a 	mov	r6,r17
8021a8f4:	e13ff817 	ldw	r4,-32(fp)
8021a8f8:	021a5000 	call	8021a500 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
8021a8fc:	e6fffe04 	addi	sp,fp,-8
8021a900:	dfc00317 	ldw	ra,12(sp)
8021a904:	df000217 	ldw	fp,8(sp)
8021a908:	dc400117 	ldw	r17,4(sp)
8021a90c:	dc000017 	ldw	r16,0(sp)
8021a910:	dec00404 	addi	sp,sp,16
8021a914:	f800283a 	ret

8021a918 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
8021a918:	defffc04 	addi	sp,sp,-16
8021a91c:	dfc00315 	stw	ra,12(sp)
8021a920:	df000215 	stw	fp,8(sp)
8021a924:	df000204 	addi	fp,sp,8
8021a928:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
8021a92c:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
8021a930:	d1601104 	addi	r5,gp,-32700
8021a934:	e13fff17 	ldw	r4,-4(fp)
8021a938:	021af140 	call	8021af14 <alt_find_dev>
8021a93c:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
8021a940:	e0bffe17 	ldw	r2,-8(fp)
8021a944:	1000041e 	bne	r2,zero,8021a958 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
8021a948:	0218c800 	call	80218c80 <alt_get_errno>
8021a94c:	1007883a 	mov	r3,r2
8021a950:	008004c4 	movi	r2,19
8021a954:	18800015 	stw	r2,0(r3)
    }

    return dev;
8021a958:	e0bffe17 	ldw	r2,-8(fp)
}
8021a95c:	e037883a 	mov	sp,fp
8021a960:	dfc00117 	ldw	ra,4(sp)
8021a964:	df000017 	ldw	fp,0(sp)
8021a968:	dec00204 	addi	sp,sp,8
8021a96c:	f800283a 	ret

8021a970 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
8021a970:	defff804 	addi	sp,sp,-32
8021a974:	dfc00715 	stw	ra,28(sp)
8021a978:	df000615 	stw	fp,24(sp)
8021a97c:	df000604 	addi	fp,sp,24
8021a980:	e13ffd15 	stw	r4,-12(fp)
8021a984:	e17ffe15 	stw	r5,-8(fp)
8021a988:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
8021a98c:	e0bffd17 	ldw	r2,-12(fp)
8021a990:	10801783 	ldbu	r2,94(r2)
8021a994:	10803fcc 	andi	r2,r2,255
8021a998:	10000b26 	beq	r2,zero,8021a9c8 <alt_msgdma_init+0x58>
    {
        /* start prefetcher reset sequence */
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
8021a99c:	e0bffd17 	ldw	r2,-12(fp)
8021a9a0:	10800617 	ldw	r2,24(r2)
8021a9a4:	00c00104 	movi	r3,4
8021a9a8:	10c00035 	stwio	r3,0(r2)
                ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
        /* wait until hw clears the bit */
        while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
8021a9ac:	0001883a 	nop
8021a9b0:	e0bffd17 	ldw	r2,-12(fp)
8021a9b4:	10800617 	ldw	r2,24(r2)
8021a9b8:	10800037 	ldwio	r2,0(r2)
8021a9bc:	1080010c 	andi	r2,r2,4
8021a9c0:	1005d0ba 	srai	r2,r2,2
8021a9c4:	103ffa1e 	bne	r2,zero,8021a9b0 <__reset+0xfa1fa9b0>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
8021a9c8:	e0bffd17 	ldw	r2,-12(fp)
8021a9cc:	10800317 	ldw	r2,12(r2)
8021a9d0:	10800104 	addi	r2,r2,4
8021a9d4:	00c00084 	movi	r3,2
8021a9d8:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8021a9dc:	0001883a 	nop
8021a9e0:	e0bffd17 	ldw	r2,-12(fp)
8021a9e4:	10800317 	ldw	r2,12(r2)
8021a9e8:	10800037 	ldwio	r2,0(r2)
            & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
8021a9ec:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8021a9f0:	103ffb1e 	bne	r2,zero,8021a9e0 <__reset+0xfa1fa9e0>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8021a9f4:	e0bffd17 	ldw	r2,-12(fp)
8021a9f8:	10800317 	ldw	r2,12(r2)
8021a9fc:	10800104 	addi	r2,r2,4
8021aa00:	10800037 	ldwio	r2,0(r2)
8021aa04:	1007883a 	mov	r3,r2
8021aa08:	00bffbc4 	movi	r2,-17
8021aa0c:	1884703a 	and	r2,r3,r2
8021aa10:	e0bffb15 	stw	r2,-20(fp)
            & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8021aa14:	e0bffb17 	ldw	r2,-20(fp)
8021aa18:	10800814 	ori	r2,r2,32
8021aa1c:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8021aa20:	e0bffd17 	ldw	r2,-12(fp)
8021aa24:	10800317 	ldw	r2,12(r2)
8021aa28:	10800104 	addi	r2,r2,4
8021aa2c:	e0fffb17 	ldw	r3,-20(fp)
8021aa30:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
8021aa34:	e0bffd17 	ldw	r2,-12(fp)
8021aa38:	10800317 	ldw	r2,12(r2)
8021aa3c:	e0fffd17 	ldw	r3,-12(fp)
8021aa40:	18c00317 	ldw	r3,12(r3)
8021aa44:	18c00037 	ldwio	r3,0(r3)
8021aa48:	10c00035 	stwio	r3,0(r2)
            IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
8021aa4c:	e0bffd17 	ldw	r2,-12(fp)
8021aa50:	10801783 	ldbu	r2,94(r2)
8021aa54:	10803fcc 	andi	r2,r2,255
8021aa58:	10000826 	beq	r2,zero,8021aa7c <alt_msgdma_init+0x10c>
    {
        /* clear all status bits that are set, since theyre W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
8021aa5c:	e0bffd17 	ldw	r2,-12(fp)
8021aa60:	10800617 	ldw	r2,24(r2)
8021aa64:	10800404 	addi	r2,r2,16
8021aa68:	e0fffd17 	ldw	r3,-12(fp)
8021aa6c:	18c00617 	ldw	r3,24(r3)
8021aa70:	18c00404 	addi	r3,r3,16
8021aa74:	18c00037 	ldwio	r3,0(r3)
8021aa78:	10c00035 	stwio	r3,0(r2)
                IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
8021aa7c:	d1601104 	addi	r5,gp,-32700
8021aa80:	e13ffd17 	ldw	r4,-12(fp)
8021aa84:	021adb00 	call	8021adb0 <alt_dev_llist_insert>
8021aa88:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
8021aa8c:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
8021aa90:	e0bffc17 	ldw	r2,-16(fp)
8021aa94:	1000081e 	bne	r2,zero,8021aab8 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
8021aa98:	d8000015 	stw	zero,0(sp)
8021aa9c:	e1fffd17 	ldw	r7,-12(fp)
8021aaa0:	01a008b4 	movhi	r6,32802
8021aaa4:	31a39f04 	addi	r6,r6,-29060
8021aaa8:	e17fff17 	ldw	r5,-4(fp)
8021aaac:	e13ffe17 	ldw	r4,-8(fp)
8021aab0:	021afa40 	call	8021afa4 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
8021aab4:	00000406 	br	8021aac8 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
8021aab8:	012008b4 	movhi	r4,32802
8021aabc:	21375804 	addi	r4,r4,-8864
8021aac0:	021b5d80 	call	8021b5d8 <alt_printf>
    }
    
    return;
8021aac4:	0001883a 	nop

}
8021aac8:	e037883a 	mov	sp,fp
8021aacc:	dfc00117 	ldw	ra,4(sp)
8021aad0:	df000017 	ldw	fp,0(sp)
8021aad4:	dec00204 	addi	sp,sp,8
8021aad8:	f800283a 	ret

8021aadc <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
    alt_msgdma_dev *dev,
    alt_msgdma_callback callback,
    alt_u32 control,
    void *context)
{
8021aadc:	defffb04 	addi	sp,sp,-20
8021aae0:	df000415 	stw	fp,16(sp)
8021aae4:	df000404 	addi	fp,sp,16
8021aae8:	e13ffc15 	stw	r4,-16(fp)
8021aaec:	e17ffd15 	stw	r5,-12(fp)
8021aaf0:	e1bffe15 	stw	r6,-8(fp)
8021aaf4:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
8021aaf8:	e0bffc17 	ldw	r2,-16(fp)
8021aafc:	e0fffd17 	ldw	r3,-12(fp)
8021ab00:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
8021ab04:	e0bffc17 	ldw	r2,-16(fp)
8021ab08:	e0ffff17 	ldw	r3,-4(fp)
8021ab0c:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
8021ab10:	e0bffc17 	ldw	r2,-16(fp)
8021ab14:	e0fffe17 	ldw	r3,-8(fp)
8021ab18:	10c00d15 	stw	r3,52(r2)

    return ;
8021ab1c:	0001883a 	nop
}
8021ab20:	e037883a 	mov	sp,fp
8021ab24:	df000017 	ldw	fp,0(sp)
8021ab28:	dec00104 	addi	sp,sp,4
8021ab2c:	f800283a 	ret

8021ab30 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
8021ab30:	defffc04 	addi	sp,sp,-16
8021ab34:	dfc00315 	stw	ra,12(sp)
8021ab38:	df000215 	stw	fp,8(sp)
8021ab3c:	df000204 	addi	fp,sp,8
8021ab40:	e13ffe15 	stw	r4,-8(fp)
8021ab44:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
8021ab48:	000d883a 	mov	r6,zero
8021ab4c:	e17fff17 	ldw	r5,-4(fp)
8021ab50:	e13ffe17 	ldw	r4,-8(fp)
8021ab54:	02191e00 	call	802191e0 <alt_msgdma_descriptor_async_transfer>

}
8021ab58:	e037883a 	mov	sp,fp
8021ab5c:	dfc00117 	ldw	ra,4(sp)
8021ab60:	df000017 	ldw	fp,0(sp)
8021ab64:	dec00204 	addi	sp,sp,8
8021ab68:	f800283a 	ret

8021ab6c <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
8021ab6c:	defffc04 	addi	sp,sp,-16
8021ab70:	dfc00315 	stw	ra,12(sp)
8021ab74:	df000215 	stw	fp,8(sp)
8021ab78:	df000204 	addi	fp,sp,8
8021ab7c:	e13ffe15 	stw	r4,-8(fp)
8021ab80:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
8021ab84:	e1bfff17 	ldw	r6,-4(fp)
8021ab88:	000b883a 	mov	r5,zero
8021ab8c:	e13ffe17 	ldw	r4,-8(fp)
8021ab90:	02191e00 	call	802191e0 <alt_msgdma_descriptor_async_transfer>
}
8021ab94:	e037883a 	mov	sp,fp
8021ab98:	dfc00117 	ldw	ra,4(sp)
8021ab9c:	df000017 	ldw	fp,0(sp)
8021aba0:	dec00204 	addi	sp,sp,8
8021aba4:	f800283a 	ret

8021aba8 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
8021aba8:	defffc04 	addi	sp,sp,-16
8021abac:	dfc00315 	stw	ra,12(sp)
8021abb0:	df000215 	stw	fp,8(sp)
8021abb4:	df000204 	addi	fp,sp,8
8021abb8:	e13ffe15 	stw	r4,-8(fp)
8021abbc:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
8021abc0:	000d883a 	mov	r6,zero
8021abc4:	e17fff17 	ldw	r5,-4(fp)
8021abc8:	e13ffe17 	ldw	r4,-8(fp)
8021abcc:	02194b00 	call	802194b0 <alt_msgdma_descriptor_sync_transfer>
}
8021abd0:	e037883a 	mov	sp,fp
8021abd4:	dfc00117 	ldw	ra,4(sp)
8021abd8:	df000017 	ldw	fp,0(sp)
8021abdc:	dec00204 	addi	sp,sp,8
8021abe0:	f800283a 	ret

8021abe4 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
8021abe4:	defffc04 	addi	sp,sp,-16
8021abe8:	dfc00315 	stw	ra,12(sp)
8021abec:	df000215 	stw	fp,8(sp)
8021abf0:	df000204 	addi	fp,sp,8
8021abf4:	e13ffe15 	stw	r4,-8(fp)
8021abf8:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
8021abfc:	e1bfff17 	ldw	r6,-4(fp)
8021ac00:	000b883a 	mov	r5,zero
8021ac04:	e13ffe17 	ldw	r4,-8(fp)
8021ac08:	02194b00 	call	802194b0 <alt_msgdma_descriptor_sync_transfer>
}
8021ac0c:	e037883a 	mov	sp,fp
8021ac10:	dfc00117 	ldw	ra,4(sp)
8021ac14:	df000017 	ldw	fp,0(sp)
8021ac18:	dec00204 	addi	sp,sp,8
8021ac1c:	f800283a 	ret

8021ac20 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
8021ac20:	defff504 	addi	sp,sp,-44
8021ac24:	df000a15 	stw	fp,40(sp)
8021ac28:	df000a04 	addi	fp,sp,40
8021ac2c:	e13ffc15 	stw	r4,-16(fp)
8021ac30:	e17ffd15 	stw	r5,-12(fp)
8021ac34:	e1bffe15 	stw	r6,-8(fp)
8021ac38:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
8021ac3c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8021ac40:	d0a02c17 	ldw	r2,-32592(gp)
  
  if (alt_ticks_per_second ())
8021ac44:	10003c26 	beq	r2,zero,8021ad38 <alt_alarm_start+0x118>
  {
    if (alarm)
8021ac48:	e0bffc17 	ldw	r2,-16(fp)
8021ac4c:	10003826 	beq	r2,zero,8021ad30 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
8021ac50:	e0bffc17 	ldw	r2,-16(fp)
8021ac54:	e0fffe17 	ldw	r3,-8(fp)
8021ac58:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
8021ac5c:	e0bffc17 	ldw	r2,-16(fp)
8021ac60:	e0ffff17 	ldw	r3,-4(fp)
8021ac64:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021ac68:	0005303a 	rdctl	r2,status
8021ac6c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021ac70:	e0fff917 	ldw	r3,-28(fp)
8021ac74:	00bfff84 	movi	r2,-2
8021ac78:	1884703a 	and	r2,r3,r2
8021ac7c:	1001703a 	wrctl	status,r2
  
  return context;
8021ac80:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
8021ac84:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8021ac88:	d0a02d17 	ldw	r2,-32588(gp)
      
      current_nticks = alt_nticks();
8021ac8c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
8021ac90:	e0fffd17 	ldw	r3,-12(fp)
8021ac94:	e0bff617 	ldw	r2,-40(fp)
8021ac98:	1885883a 	add	r2,r3,r2
8021ac9c:	10c00044 	addi	r3,r2,1
8021aca0:	e0bffc17 	ldw	r2,-16(fp)
8021aca4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
8021aca8:	e0bffc17 	ldw	r2,-16(fp)
8021acac:	10c00217 	ldw	r3,8(r2)
8021acb0:	e0bff617 	ldw	r2,-40(fp)
8021acb4:	1880042e 	bgeu	r3,r2,8021acc8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
8021acb8:	e0bffc17 	ldw	r2,-16(fp)
8021acbc:	00c00044 	movi	r3,1
8021acc0:	10c00405 	stb	r3,16(r2)
8021acc4:	00000206 	br	8021acd0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
8021acc8:	e0bffc17 	ldw	r2,-16(fp)
8021accc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
8021acd0:	e0bffc17 	ldw	r2,-16(fp)
8021acd4:	d0e00f04 	addi	r3,gp,-32708
8021acd8:	e0fffa15 	stw	r3,-24(fp)
8021acdc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8021ace0:	e0bffb17 	ldw	r2,-20(fp)
8021ace4:	e0fffa17 	ldw	r3,-24(fp)
8021ace8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8021acec:	e0bffa17 	ldw	r2,-24(fp)
8021acf0:	10c00017 	ldw	r3,0(r2)
8021acf4:	e0bffb17 	ldw	r2,-20(fp)
8021acf8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8021acfc:	e0bffa17 	ldw	r2,-24(fp)
8021ad00:	10800017 	ldw	r2,0(r2)
8021ad04:	e0fffb17 	ldw	r3,-20(fp)
8021ad08:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8021ad0c:	e0bffa17 	ldw	r2,-24(fp)
8021ad10:	e0fffb17 	ldw	r3,-20(fp)
8021ad14:	10c00015 	stw	r3,0(r2)
8021ad18:	e0bff817 	ldw	r2,-32(fp)
8021ad1c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021ad20:	e0bff717 	ldw	r2,-36(fp)
8021ad24:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
8021ad28:	0005883a 	mov	r2,zero
8021ad2c:	00000306 	br	8021ad3c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
8021ad30:	00bffa84 	movi	r2,-22
8021ad34:	00000106 	br	8021ad3c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
8021ad38:	00bfde84 	movi	r2,-134
  }
}
8021ad3c:	e037883a 	mov	sp,fp
8021ad40:	df000017 	ldw	fp,0(sp)
8021ad44:	dec00104 	addi	sp,sp,4
8021ad48:	f800283a 	ret

8021ad4c <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
8021ad4c:	defffd04 	addi	sp,sp,-12
8021ad50:	df000215 	stw	fp,8(sp)
8021ad54:	df000204 	addi	fp,sp,8
8021ad58:	e13ffe15 	stw	r4,-8(fp)
8021ad5c:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
8021ad60:	0001883a 	nop
8021ad64:	e037883a 	mov	sp,fp
8021ad68:	df000017 	ldw	fp,0(sp)
8021ad6c:	dec00104 	addi	sp,sp,4
8021ad70:	f800283a 	ret

8021ad74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8021ad74:	defffe04 	addi	sp,sp,-8
8021ad78:	dfc00115 	stw	ra,4(sp)
8021ad7c:	df000015 	stw	fp,0(sp)
8021ad80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8021ad84:	d0a00c17 	ldw	r2,-32720(gp)
8021ad88:	10000326 	beq	r2,zero,8021ad98 <alt_get_errno+0x24>
8021ad8c:	d0a00c17 	ldw	r2,-32720(gp)
8021ad90:	103ee83a 	callr	r2
8021ad94:	00000106 	br	8021ad9c <alt_get_errno+0x28>
8021ad98:	d0a02704 	addi	r2,gp,-32612
}
8021ad9c:	e037883a 	mov	sp,fp
8021ada0:	dfc00117 	ldw	ra,4(sp)
8021ada4:	df000017 	ldw	fp,0(sp)
8021ada8:	dec00204 	addi	sp,sp,8
8021adac:	f800283a 	ret

8021adb0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8021adb0:	defffa04 	addi	sp,sp,-24
8021adb4:	dfc00515 	stw	ra,20(sp)
8021adb8:	df000415 	stw	fp,16(sp)
8021adbc:	df000404 	addi	fp,sp,16
8021adc0:	e13ffe15 	stw	r4,-8(fp)
8021adc4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
8021adc8:	e0bffe17 	ldw	r2,-8(fp)
8021adcc:	10000326 	beq	r2,zero,8021addc <alt_dev_llist_insert+0x2c>
8021add0:	e0bffe17 	ldw	r2,-8(fp)
8021add4:	10800217 	ldw	r2,8(r2)
8021add8:	1000061e 	bne	r2,zero,8021adf4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
8021addc:	021ad740 	call	8021ad74 <alt_get_errno>
8021ade0:	1007883a 	mov	r3,r2
8021ade4:	00800584 	movi	r2,22
8021ade8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
8021adec:	00bffa84 	movi	r2,-22
8021adf0:	00001306 	br	8021ae40 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
8021adf4:	e0bffe17 	ldw	r2,-8(fp)
8021adf8:	e0ffff17 	ldw	r3,-4(fp)
8021adfc:	e0fffc15 	stw	r3,-16(fp)
8021ae00:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8021ae04:	e0bffd17 	ldw	r2,-12(fp)
8021ae08:	e0fffc17 	ldw	r3,-16(fp)
8021ae0c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8021ae10:	e0bffc17 	ldw	r2,-16(fp)
8021ae14:	10c00017 	ldw	r3,0(r2)
8021ae18:	e0bffd17 	ldw	r2,-12(fp)
8021ae1c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8021ae20:	e0bffc17 	ldw	r2,-16(fp)
8021ae24:	10800017 	ldw	r2,0(r2)
8021ae28:	e0fffd17 	ldw	r3,-12(fp)
8021ae2c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8021ae30:	e0bffc17 	ldw	r2,-16(fp)
8021ae34:	e0fffd17 	ldw	r3,-12(fp)
8021ae38:	10c00015 	stw	r3,0(r2)

  return 0;  
8021ae3c:	0005883a 	mov	r2,zero
}
8021ae40:	e037883a 	mov	sp,fp
8021ae44:	dfc00117 	ldw	ra,4(sp)
8021ae48:	df000017 	ldw	fp,0(sp)
8021ae4c:	dec00204 	addi	sp,sp,8
8021ae50:	f800283a 	ret

8021ae54 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8021ae54:	defffd04 	addi	sp,sp,-12
8021ae58:	dfc00215 	stw	ra,8(sp)
8021ae5c:	df000115 	stw	fp,4(sp)
8021ae60:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8021ae64:	00a008b4 	movhi	r2,32802
8021ae68:	10afe904 	addi	r2,r2,-16476
8021ae6c:	e0bfff15 	stw	r2,-4(fp)
8021ae70:	00000606 	br	8021ae8c <_do_ctors+0x38>
        (*ctor) (); 
8021ae74:	e0bfff17 	ldw	r2,-4(fp)
8021ae78:	10800017 	ldw	r2,0(r2)
8021ae7c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8021ae80:	e0bfff17 	ldw	r2,-4(fp)
8021ae84:	10bfff04 	addi	r2,r2,-4
8021ae88:	e0bfff15 	stw	r2,-4(fp)
8021ae8c:	e0ffff17 	ldw	r3,-4(fp)
8021ae90:	00a008b4 	movhi	r2,32802
8021ae94:	10afea04 	addi	r2,r2,-16472
8021ae98:	18bff62e 	bgeu	r3,r2,8021ae74 <__reset+0xfa1fae74>
        (*ctor) (); 
}
8021ae9c:	0001883a 	nop
8021aea0:	e037883a 	mov	sp,fp
8021aea4:	dfc00117 	ldw	ra,4(sp)
8021aea8:	df000017 	ldw	fp,0(sp)
8021aeac:	dec00204 	addi	sp,sp,8
8021aeb0:	f800283a 	ret

8021aeb4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
8021aeb4:	defffd04 	addi	sp,sp,-12
8021aeb8:	dfc00215 	stw	ra,8(sp)
8021aebc:	df000115 	stw	fp,4(sp)
8021aec0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8021aec4:	00a008b4 	movhi	r2,32802
8021aec8:	10afe904 	addi	r2,r2,-16476
8021aecc:	e0bfff15 	stw	r2,-4(fp)
8021aed0:	00000606 	br	8021aeec <_do_dtors+0x38>
        (*dtor) (); 
8021aed4:	e0bfff17 	ldw	r2,-4(fp)
8021aed8:	10800017 	ldw	r2,0(r2)
8021aedc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8021aee0:	e0bfff17 	ldw	r2,-4(fp)
8021aee4:	10bfff04 	addi	r2,r2,-4
8021aee8:	e0bfff15 	stw	r2,-4(fp)
8021aeec:	e0ffff17 	ldw	r3,-4(fp)
8021aef0:	00a008b4 	movhi	r2,32802
8021aef4:	10afea04 	addi	r2,r2,-16472
8021aef8:	18bff62e 	bgeu	r3,r2,8021aed4 <__reset+0xfa1faed4>
        (*dtor) (); 
}
8021aefc:	0001883a 	nop
8021af00:	e037883a 	mov	sp,fp
8021af04:	dfc00117 	ldw	ra,4(sp)
8021af08:	df000017 	ldw	fp,0(sp)
8021af0c:	dec00204 	addi	sp,sp,8
8021af10:	f800283a 	ret

8021af14 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
8021af14:	defffa04 	addi	sp,sp,-24
8021af18:	dfc00515 	stw	ra,20(sp)
8021af1c:	df000415 	stw	fp,16(sp)
8021af20:	df000404 	addi	fp,sp,16
8021af24:	e13ffe15 	stw	r4,-8(fp)
8021af28:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
8021af2c:	e0bfff17 	ldw	r2,-4(fp)
8021af30:	10800017 	ldw	r2,0(r2)
8021af34:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
8021af38:	e13ffe17 	ldw	r4,-8(fp)
8021af3c:	0206dec0 	call	80206dec <strlen>
8021af40:	10800044 	addi	r2,r2,1
8021af44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8021af48:	00000d06 	br	8021af80 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
8021af4c:	e0bffc17 	ldw	r2,-16(fp)
8021af50:	10800217 	ldw	r2,8(r2)
8021af54:	e0fffd17 	ldw	r3,-12(fp)
8021af58:	180d883a 	mov	r6,r3
8021af5c:	e17ffe17 	ldw	r5,-8(fp)
8021af60:	1009883a 	mov	r4,r2
8021af64:	021baf80 	call	8021baf8 <memcmp>
8021af68:	1000021e 	bne	r2,zero,8021af74 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
8021af6c:	e0bffc17 	ldw	r2,-16(fp)
8021af70:	00000706 	br	8021af90 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
8021af74:	e0bffc17 	ldw	r2,-16(fp)
8021af78:	10800017 	ldw	r2,0(r2)
8021af7c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8021af80:	e0fffc17 	ldw	r3,-16(fp)
8021af84:	e0bfff17 	ldw	r2,-4(fp)
8021af88:	18bff01e 	bne	r3,r2,8021af4c <__reset+0xfa1faf4c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
8021af8c:	0005883a 	mov	r2,zero
}
8021af90:	e037883a 	mov	sp,fp
8021af94:	dfc00117 	ldw	ra,4(sp)
8021af98:	df000017 	ldw	fp,0(sp)
8021af9c:	dec00204 	addi	sp,sp,8
8021afa0:	f800283a 	ret

8021afa4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8021afa4:	defff904 	addi	sp,sp,-28
8021afa8:	dfc00615 	stw	ra,24(sp)
8021afac:	df000515 	stw	fp,20(sp)
8021afb0:	df000504 	addi	fp,sp,20
8021afb4:	e13ffc15 	stw	r4,-16(fp)
8021afb8:	e17ffd15 	stw	r5,-12(fp)
8021afbc:	e1bffe15 	stw	r6,-8(fp)
8021afc0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
8021afc4:	e0800217 	ldw	r2,8(fp)
8021afc8:	d8800015 	stw	r2,0(sp)
8021afcc:	e1ffff17 	ldw	r7,-4(fp)
8021afd0:	e1bffe17 	ldw	r6,-8(fp)
8021afd4:	e17ffd17 	ldw	r5,-12(fp)
8021afd8:	e13ffc17 	ldw	r4,-16(fp)
8021afdc:	021b1540 	call	8021b154 <alt_iic_isr_register>
}  
8021afe0:	e037883a 	mov	sp,fp
8021afe4:	dfc00117 	ldw	ra,4(sp)
8021afe8:	df000017 	ldw	fp,0(sp)
8021afec:	dec00204 	addi	sp,sp,8
8021aff0:	f800283a 	ret

8021aff4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
8021aff4:	defff904 	addi	sp,sp,-28
8021aff8:	df000615 	stw	fp,24(sp)
8021affc:	df000604 	addi	fp,sp,24
8021b000:	e13ffe15 	stw	r4,-8(fp)
8021b004:	e17fff15 	stw	r5,-4(fp)
8021b008:	e0bfff17 	ldw	r2,-4(fp)
8021b00c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021b010:	0005303a 	rdctl	r2,status
8021b014:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021b018:	e0fffb17 	ldw	r3,-20(fp)
8021b01c:	00bfff84 	movi	r2,-2
8021b020:	1884703a 	and	r2,r3,r2
8021b024:	1001703a 	wrctl	status,r2
  
  return context;
8021b028:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8021b02c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
8021b030:	00c00044 	movi	r3,1
8021b034:	e0bffa17 	ldw	r2,-24(fp)
8021b038:	1884983a 	sll	r2,r3,r2
8021b03c:	1007883a 	mov	r3,r2
8021b040:	d0a02817 	ldw	r2,-32608(gp)
8021b044:	1884b03a 	or	r2,r3,r2
8021b048:	d0a02815 	stw	r2,-32608(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8021b04c:	d0a02817 	ldw	r2,-32608(gp)
8021b050:	100170fa 	wrctl	ienable,r2
8021b054:	e0bffc17 	ldw	r2,-16(fp)
8021b058:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021b05c:	e0bffd17 	ldw	r2,-12(fp)
8021b060:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8021b064:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
8021b068:	0001883a 	nop
}
8021b06c:	e037883a 	mov	sp,fp
8021b070:	df000017 	ldw	fp,0(sp)
8021b074:	dec00104 	addi	sp,sp,4
8021b078:	f800283a 	ret

8021b07c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
8021b07c:	defff904 	addi	sp,sp,-28
8021b080:	df000615 	stw	fp,24(sp)
8021b084:	df000604 	addi	fp,sp,24
8021b088:	e13ffe15 	stw	r4,-8(fp)
8021b08c:	e17fff15 	stw	r5,-4(fp)
8021b090:	e0bfff17 	ldw	r2,-4(fp)
8021b094:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021b098:	0005303a 	rdctl	r2,status
8021b09c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021b0a0:	e0fffb17 	ldw	r3,-20(fp)
8021b0a4:	00bfff84 	movi	r2,-2
8021b0a8:	1884703a 	and	r2,r3,r2
8021b0ac:	1001703a 	wrctl	status,r2
  
  return context;
8021b0b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8021b0b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
8021b0b8:	00c00044 	movi	r3,1
8021b0bc:	e0bffa17 	ldw	r2,-24(fp)
8021b0c0:	1884983a 	sll	r2,r3,r2
8021b0c4:	0084303a 	nor	r2,zero,r2
8021b0c8:	1007883a 	mov	r3,r2
8021b0cc:	d0a02817 	ldw	r2,-32608(gp)
8021b0d0:	1884703a 	and	r2,r3,r2
8021b0d4:	d0a02815 	stw	r2,-32608(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8021b0d8:	d0a02817 	ldw	r2,-32608(gp)
8021b0dc:	100170fa 	wrctl	ienable,r2
8021b0e0:	e0bffc17 	ldw	r2,-16(fp)
8021b0e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021b0e8:	e0bffd17 	ldw	r2,-12(fp)
8021b0ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8021b0f0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
8021b0f4:	0001883a 	nop
}
8021b0f8:	e037883a 	mov	sp,fp
8021b0fc:	df000017 	ldw	fp,0(sp)
8021b100:	dec00104 	addi	sp,sp,4
8021b104:	f800283a 	ret

8021b108 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
8021b108:	defffc04 	addi	sp,sp,-16
8021b10c:	df000315 	stw	fp,12(sp)
8021b110:	df000304 	addi	fp,sp,12
8021b114:	e13ffe15 	stw	r4,-8(fp)
8021b118:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
8021b11c:	000530fa 	rdctl	r2,ienable
8021b120:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
8021b124:	00c00044 	movi	r3,1
8021b128:	e0bfff17 	ldw	r2,-4(fp)
8021b12c:	1884983a 	sll	r2,r3,r2
8021b130:	1007883a 	mov	r3,r2
8021b134:	e0bffd17 	ldw	r2,-12(fp)
8021b138:	1884703a 	and	r2,r3,r2
8021b13c:	1004c03a 	cmpne	r2,r2,zero
8021b140:	10803fcc 	andi	r2,r2,255
}
8021b144:	e037883a 	mov	sp,fp
8021b148:	df000017 	ldw	fp,0(sp)
8021b14c:	dec00104 	addi	sp,sp,4
8021b150:	f800283a 	ret

8021b154 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8021b154:	defff504 	addi	sp,sp,-44
8021b158:	dfc00a15 	stw	ra,40(sp)
8021b15c:	df000915 	stw	fp,36(sp)
8021b160:	df000904 	addi	fp,sp,36
8021b164:	e13ffc15 	stw	r4,-16(fp)
8021b168:	e17ffd15 	stw	r5,-12(fp)
8021b16c:	e1bffe15 	stw	r6,-8(fp)
8021b170:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
8021b174:	00bffa84 	movi	r2,-22
8021b178:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
8021b17c:	e0bffd17 	ldw	r2,-12(fp)
8021b180:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
8021b184:	e0bff817 	ldw	r2,-32(fp)
8021b188:	10800808 	cmpgei	r2,r2,32
8021b18c:	1000271e 	bne	r2,zero,8021b22c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021b190:	0005303a 	rdctl	r2,status
8021b194:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021b198:	e0fffb17 	ldw	r3,-20(fp)
8021b19c:	00bfff84 	movi	r2,-2
8021b1a0:	1884703a 	and	r2,r3,r2
8021b1a4:	1001703a 	wrctl	status,r2
  
  return context;
8021b1a8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
8021b1ac:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
8021b1b0:	00a008b4 	movhi	r2,32802
8021b1b4:	10bff404 	addi	r2,r2,-48
8021b1b8:	e0fff817 	ldw	r3,-32(fp)
8021b1bc:	180690fa 	slli	r3,r3,3
8021b1c0:	10c5883a 	add	r2,r2,r3
8021b1c4:	e0fffe17 	ldw	r3,-8(fp)
8021b1c8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
8021b1cc:	00a008b4 	movhi	r2,32802
8021b1d0:	10bff404 	addi	r2,r2,-48
8021b1d4:	e0fff817 	ldw	r3,-32(fp)
8021b1d8:	180690fa 	slli	r3,r3,3
8021b1dc:	10c5883a 	add	r2,r2,r3
8021b1e0:	10800104 	addi	r2,r2,4
8021b1e4:	e0ffff17 	ldw	r3,-4(fp)
8021b1e8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
8021b1ec:	e0bffe17 	ldw	r2,-8(fp)
8021b1f0:	10000526 	beq	r2,zero,8021b208 <alt_iic_isr_register+0xb4>
8021b1f4:	e0bff817 	ldw	r2,-32(fp)
8021b1f8:	100b883a 	mov	r5,r2
8021b1fc:	e13ffc17 	ldw	r4,-16(fp)
8021b200:	021aff40 	call	8021aff4 <alt_ic_irq_enable>
8021b204:	00000406 	br	8021b218 <alt_iic_isr_register+0xc4>
8021b208:	e0bff817 	ldw	r2,-32(fp)
8021b20c:	100b883a 	mov	r5,r2
8021b210:	e13ffc17 	ldw	r4,-16(fp)
8021b214:	021b07c0 	call	8021b07c <alt_ic_irq_disable>
8021b218:	e0bff715 	stw	r2,-36(fp)
8021b21c:	e0bffa17 	ldw	r2,-24(fp)
8021b220:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021b224:	e0bff917 	ldw	r2,-28(fp)
8021b228:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
8021b22c:	e0bff717 	ldw	r2,-36(fp)
}
8021b230:	e037883a 	mov	sp,fp
8021b234:	dfc00117 	ldw	ra,4(sp)
8021b238:	df000017 	ldw	fp,0(sp)
8021b23c:	dec00204 	addi	sp,sp,8
8021b240:	f800283a 	ret

8021b244 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
8021b244:	defff904 	addi	sp,sp,-28
8021b248:	dfc00615 	stw	ra,24(sp)
8021b24c:	df000515 	stw	fp,20(sp)
8021b250:	df000504 	addi	fp,sp,20
8021b254:	e13ffc15 	stw	r4,-16(fp)
8021b258:	e17ffd15 	stw	r5,-12(fp)
8021b25c:	e1bffe15 	stw	r6,-8(fp)
8021b260:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
8021b264:	e1bfff17 	ldw	r6,-4(fp)
8021b268:	e17ffe17 	ldw	r5,-8(fp)
8021b26c:	e13ffd17 	ldw	r4,-12(fp)
8021b270:	021b4840 	call	8021b484 <open>
8021b274:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
8021b278:	e0bffb17 	ldw	r2,-20(fp)
8021b27c:	10001c16 	blt	r2,zero,8021b2f0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
8021b280:	00a008b4 	movhi	r2,32802
8021b284:	10b99304 	addi	r2,r2,-6580
8021b288:	e0fffb17 	ldw	r3,-20(fp)
8021b28c:	18c00324 	muli	r3,r3,12
8021b290:	10c5883a 	add	r2,r2,r3
8021b294:	10c00017 	ldw	r3,0(r2)
8021b298:	e0bffc17 	ldw	r2,-16(fp)
8021b29c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
8021b2a0:	00a008b4 	movhi	r2,32802
8021b2a4:	10b99304 	addi	r2,r2,-6580
8021b2a8:	e0fffb17 	ldw	r3,-20(fp)
8021b2ac:	18c00324 	muli	r3,r3,12
8021b2b0:	10c5883a 	add	r2,r2,r3
8021b2b4:	10800104 	addi	r2,r2,4
8021b2b8:	10c00017 	ldw	r3,0(r2)
8021b2bc:	e0bffc17 	ldw	r2,-16(fp)
8021b2c0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8021b2c4:	00a008b4 	movhi	r2,32802
8021b2c8:	10b99304 	addi	r2,r2,-6580
8021b2cc:	e0fffb17 	ldw	r3,-20(fp)
8021b2d0:	18c00324 	muli	r3,r3,12
8021b2d4:	10c5883a 	add	r2,r2,r3
8021b2d8:	10800204 	addi	r2,r2,8
8021b2dc:	10c00017 	ldw	r3,0(r2)
8021b2e0:	e0bffc17 	ldw	r2,-16(fp)
8021b2e4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
8021b2e8:	e13ffb17 	ldw	r4,-20(fp)
8021b2ec:	02172dc0 	call	802172dc <alt_release_fd>
  }
} 
8021b2f0:	0001883a 	nop
8021b2f4:	e037883a 	mov	sp,fp
8021b2f8:	dfc00117 	ldw	ra,4(sp)
8021b2fc:	df000017 	ldw	fp,0(sp)
8021b300:	dec00204 	addi	sp,sp,8
8021b304:	f800283a 	ret

8021b308 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8021b308:	defffb04 	addi	sp,sp,-20
8021b30c:	dfc00415 	stw	ra,16(sp)
8021b310:	df000315 	stw	fp,12(sp)
8021b314:	df000304 	addi	fp,sp,12
8021b318:	e13ffd15 	stw	r4,-12(fp)
8021b31c:	e17ffe15 	stw	r5,-8(fp)
8021b320:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
8021b324:	01c07fc4 	movi	r7,511
8021b328:	01800044 	movi	r6,1
8021b32c:	e17ffd17 	ldw	r5,-12(fp)
8021b330:	012008b4 	movhi	r4,32802
8021b334:	21399604 	addi	r4,r4,-6568
8021b338:	021b2440 	call	8021b244 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
8021b33c:	01c07fc4 	movi	r7,511
8021b340:	000d883a 	mov	r6,zero
8021b344:	e17ffe17 	ldw	r5,-8(fp)
8021b348:	012008b4 	movhi	r4,32802
8021b34c:	21399304 	addi	r4,r4,-6580
8021b350:	021b2440 	call	8021b244 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
8021b354:	01c07fc4 	movi	r7,511
8021b358:	01800044 	movi	r6,1
8021b35c:	e17fff17 	ldw	r5,-4(fp)
8021b360:	012008b4 	movhi	r4,32802
8021b364:	21399904 	addi	r4,r4,-6556
8021b368:	021b2440 	call	8021b244 <alt_open_fd>
}  
8021b36c:	0001883a 	nop
8021b370:	e037883a 	mov	sp,fp
8021b374:	dfc00117 	ldw	ra,4(sp)
8021b378:	df000017 	ldw	fp,0(sp)
8021b37c:	dec00204 	addi	sp,sp,8
8021b380:	f800283a 	ret

8021b384 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8021b384:	defffe04 	addi	sp,sp,-8
8021b388:	dfc00115 	stw	ra,4(sp)
8021b38c:	df000015 	stw	fp,0(sp)
8021b390:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8021b394:	d0a00c17 	ldw	r2,-32720(gp)
8021b398:	10000326 	beq	r2,zero,8021b3a8 <alt_get_errno+0x24>
8021b39c:	d0a00c17 	ldw	r2,-32720(gp)
8021b3a0:	103ee83a 	callr	r2
8021b3a4:	00000106 	br	8021b3ac <alt_get_errno+0x28>
8021b3a8:	d0a02704 	addi	r2,gp,-32612
}
8021b3ac:	e037883a 	mov	sp,fp
8021b3b0:	dfc00117 	ldw	ra,4(sp)
8021b3b4:	df000017 	ldw	fp,0(sp)
8021b3b8:	dec00204 	addi	sp,sp,8
8021b3bc:	f800283a 	ret

8021b3c0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
8021b3c0:	defffd04 	addi	sp,sp,-12
8021b3c4:	df000215 	stw	fp,8(sp)
8021b3c8:	df000204 	addi	fp,sp,8
8021b3cc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
8021b3d0:	e0bfff17 	ldw	r2,-4(fp)
8021b3d4:	10800217 	ldw	r2,8(r2)
8021b3d8:	10d00034 	orhi	r3,r2,16384
8021b3dc:	e0bfff17 	ldw	r2,-4(fp)
8021b3e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8021b3e4:	e03ffe15 	stw	zero,-8(fp)
8021b3e8:	00001d06 	br	8021b460 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8021b3ec:	00a008b4 	movhi	r2,32802
8021b3f0:	10b99304 	addi	r2,r2,-6580
8021b3f4:	e0fffe17 	ldw	r3,-8(fp)
8021b3f8:	18c00324 	muli	r3,r3,12
8021b3fc:	10c5883a 	add	r2,r2,r3
8021b400:	10c00017 	ldw	r3,0(r2)
8021b404:	e0bfff17 	ldw	r2,-4(fp)
8021b408:	10800017 	ldw	r2,0(r2)
8021b40c:	1880111e 	bne	r3,r2,8021b454 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8021b410:	00a008b4 	movhi	r2,32802
8021b414:	10b99304 	addi	r2,r2,-6580
8021b418:	e0fffe17 	ldw	r3,-8(fp)
8021b41c:	18c00324 	muli	r3,r3,12
8021b420:	10c5883a 	add	r2,r2,r3
8021b424:	10800204 	addi	r2,r2,8
8021b428:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8021b42c:	1000090e 	bge	r2,zero,8021b454 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
8021b430:	e0bffe17 	ldw	r2,-8(fp)
8021b434:	10c00324 	muli	r3,r2,12
8021b438:	00a008b4 	movhi	r2,32802
8021b43c:	10b99304 	addi	r2,r2,-6580
8021b440:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8021b444:	e0bfff17 	ldw	r2,-4(fp)
8021b448:	18800226 	beq	r3,r2,8021b454 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
8021b44c:	00bffcc4 	movi	r2,-13
8021b450:	00000806 	br	8021b474 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8021b454:	e0bffe17 	ldw	r2,-8(fp)
8021b458:	10800044 	addi	r2,r2,1
8021b45c:	e0bffe15 	stw	r2,-8(fp)
8021b460:	d0a00b17 	ldw	r2,-32724(gp)
8021b464:	1007883a 	mov	r3,r2
8021b468:	e0bffe17 	ldw	r2,-8(fp)
8021b46c:	18bfdf2e 	bgeu	r3,r2,8021b3ec <__reset+0xfa1fb3ec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
8021b470:	0005883a 	mov	r2,zero
}
8021b474:	e037883a 	mov	sp,fp
8021b478:	df000017 	ldw	fp,0(sp)
8021b47c:	dec00104 	addi	sp,sp,4
8021b480:	f800283a 	ret

8021b484 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
8021b484:	defff604 	addi	sp,sp,-40
8021b488:	dfc00915 	stw	ra,36(sp)
8021b48c:	df000815 	stw	fp,32(sp)
8021b490:	df000804 	addi	fp,sp,32
8021b494:	e13ffd15 	stw	r4,-12(fp)
8021b498:	e17ffe15 	stw	r5,-8(fp)
8021b49c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
8021b4a0:	00bfffc4 	movi	r2,-1
8021b4a4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
8021b4a8:	00bffb44 	movi	r2,-19
8021b4ac:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
8021b4b0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
8021b4b4:	d1600904 	addi	r5,gp,-32732
8021b4b8:	e13ffd17 	ldw	r4,-12(fp)
8021b4bc:	021af140 	call	8021af14 <alt_find_dev>
8021b4c0:	e0bff815 	stw	r2,-32(fp)
8021b4c4:	e0bff817 	ldw	r2,-32(fp)
8021b4c8:	1000051e 	bne	r2,zero,8021b4e0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
8021b4cc:	e13ffd17 	ldw	r4,-12(fp)
8021b4d0:	021b8640 	call	8021b864 <alt_find_file>
8021b4d4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
8021b4d8:	00800044 	movi	r2,1
8021b4dc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
8021b4e0:	e0bff817 	ldw	r2,-32(fp)
8021b4e4:	10002926 	beq	r2,zero,8021b58c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
8021b4e8:	e13ff817 	ldw	r4,-32(fp)
8021b4ec:	021b96c0 	call	8021b96c <alt_get_fd>
8021b4f0:	e0bff915 	stw	r2,-28(fp)
8021b4f4:	e0bff917 	ldw	r2,-28(fp)
8021b4f8:	1000030e 	bge	r2,zero,8021b508 <open+0x84>
    {
      status = index;
8021b4fc:	e0bff917 	ldw	r2,-28(fp)
8021b500:	e0bffa15 	stw	r2,-24(fp)
8021b504:	00002306 	br	8021b594 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
8021b508:	e0bff917 	ldw	r2,-28(fp)
8021b50c:	10c00324 	muli	r3,r2,12
8021b510:	00a008b4 	movhi	r2,32802
8021b514:	10b99304 	addi	r2,r2,-6580
8021b518:	1885883a 	add	r2,r3,r2
8021b51c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
8021b520:	e0fffe17 	ldw	r3,-8(fp)
8021b524:	00900034 	movhi	r2,16384
8021b528:	10bfffc4 	addi	r2,r2,-1
8021b52c:	1886703a 	and	r3,r3,r2
8021b530:	e0bffc17 	ldw	r2,-16(fp)
8021b534:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
8021b538:	e0bffb17 	ldw	r2,-20(fp)
8021b53c:	1000051e 	bne	r2,zero,8021b554 <open+0xd0>
8021b540:	e13ffc17 	ldw	r4,-16(fp)
8021b544:	021b3c00 	call	8021b3c0 <alt_file_locked>
8021b548:	e0bffa15 	stw	r2,-24(fp)
8021b54c:	e0bffa17 	ldw	r2,-24(fp)
8021b550:	10001016 	blt	r2,zero,8021b594 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
8021b554:	e0bff817 	ldw	r2,-32(fp)
8021b558:	10800317 	ldw	r2,12(r2)
8021b55c:	10000826 	beq	r2,zero,8021b580 <open+0xfc>
8021b560:	e0bff817 	ldw	r2,-32(fp)
8021b564:	10800317 	ldw	r2,12(r2)
8021b568:	e1ffff17 	ldw	r7,-4(fp)
8021b56c:	e1bffe17 	ldw	r6,-8(fp)
8021b570:	e17ffd17 	ldw	r5,-12(fp)
8021b574:	e13ffc17 	ldw	r4,-16(fp)
8021b578:	103ee83a 	callr	r2
8021b57c:	00000106 	br	8021b584 <open+0x100>
8021b580:	0005883a 	mov	r2,zero
8021b584:	e0bffa15 	stw	r2,-24(fp)
8021b588:	00000206 	br	8021b594 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
8021b58c:	00bffb44 	movi	r2,-19
8021b590:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
8021b594:	e0bffa17 	ldw	r2,-24(fp)
8021b598:	1000090e 	bge	r2,zero,8021b5c0 <open+0x13c>
  {
    alt_release_fd (index);  
8021b59c:	e13ff917 	ldw	r4,-28(fp)
8021b5a0:	02172dc0 	call	802172dc <alt_release_fd>
    ALT_ERRNO = -status;
8021b5a4:	021b3840 	call	8021b384 <alt_get_errno>
8021b5a8:	1007883a 	mov	r3,r2
8021b5ac:	e0bffa17 	ldw	r2,-24(fp)
8021b5b0:	0085c83a 	sub	r2,zero,r2
8021b5b4:	18800015 	stw	r2,0(r3)
    return -1;
8021b5b8:	00bfffc4 	movi	r2,-1
8021b5bc:	00000106 	br	8021b5c4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
8021b5c0:	e0bff917 	ldw	r2,-28(fp)
}
8021b5c4:	e037883a 	mov	sp,fp
8021b5c8:	dfc00117 	ldw	ra,4(sp)
8021b5cc:	df000017 	ldw	fp,0(sp)
8021b5d0:	dec00204 	addi	sp,sp,8
8021b5d4:	f800283a 	ret

8021b5d8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
8021b5d8:	defff204 	addi	sp,sp,-56
8021b5dc:	dfc00a15 	stw	ra,40(sp)
8021b5e0:	df000915 	stw	fp,36(sp)
8021b5e4:	df000904 	addi	fp,sp,36
8021b5e8:	e13fff15 	stw	r4,-4(fp)
8021b5ec:	e1400215 	stw	r5,8(fp)
8021b5f0:	e1800315 	stw	r6,12(fp)
8021b5f4:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
8021b5f8:	e0800204 	addi	r2,fp,8
8021b5fc:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
8021b600:	e0bfff17 	ldw	r2,-4(fp)
8021b604:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
8021b608:	00006f06 	br	8021b7c8 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
8021b60c:	e0bff807 	ldb	r2,-32(fp)
8021b610:	10800960 	cmpeqi	r2,r2,37
8021b614:	1000041e 	bne	r2,zero,8021b628 <alt_printf+0x50>
        {
            alt_putchar(c);
8021b618:	e0bff807 	ldb	r2,-32(fp)
8021b61c:	1009883a 	mov	r4,r2
8021b620:	021b8040 	call	8021b804 <alt_putchar>
8021b624:	00006806 	br	8021b7c8 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
8021b628:	e0bff717 	ldw	r2,-36(fp)
8021b62c:	10c00044 	addi	r3,r2,1
8021b630:	e0fff715 	stw	r3,-36(fp)
8021b634:	10800003 	ldbu	r2,0(r2)
8021b638:	e0bff805 	stb	r2,-32(fp)
8021b63c:	e0bff807 	ldb	r2,-32(fp)
8021b640:	10006926 	beq	r2,zero,8021b7e8 <alt_printf+0x210>
            {
                if (c == '%')
8021b644:	e0bff807 	ldb	r2,-32(fp)
8021b648:	10800958 	cmpnei	r2,r2,37
8021b64c:	1000041e 	bne	r2,zero,8021b660 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
8021b650:	e0bff807 	ldb	r2,-32(fp)
8021b654:	1009883a 	mov	r4,r2
8021b658:	021b8040 	call	8021b804 <alt_putchar>
8021b65c:	00005a06 	br	8021b7c8 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
8021b660:	e0bff807 	ldb	r2,-32(fp)
8021b664:	108018d8 	cmpnei	r2,r2,99
8021b668:	1000081e 	bne	r2,zero,8021b68c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
8021b66c:	e0bffe17 	ldw	r2,-8(fp)
8021b670:	10c00104 	addi	r3,r2,4
8021b674:	e0fffe15 	stw	r3,-8(fp)
8021b678:	10800017 	ldw	r2,0(r2)
8021b67c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
8021b680:	e13ffd17 	ldw	r4,-12(fp)
8021b684:	021b8040 	call	8021b804 <alt_putchar>
8021b688:	00004f06 	br	8021b7c8 <alt_printf+0x1f0>
                }
                else if (c == 'x')
8021b68c:	e0bff807 	ldb	r2,-32(fp)
8021b690:	10801e18 	cmpnei	r2,r2,120
8021b694:	1000341e 	bne	r2,zero,8021b768 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
8021b698:	e0bffe17 	ldw	r2,-8(fp)
8021b69c:	10c00104 	addi	r3,r2,4
8021b6a0:	e0fffe15 	stw	r3,-8(fp)
8021b6a4:	10800017 	ldw	r2,0(r2)
8021b6a8:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
8021b6ac:	e0bffb17 	ldw	r2,-20(fp)
8021b6b0:	1000031e 	bne	r2,zero,8021b6c0 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
8021b6b4:	01000c04 	movi	r4,48
8021b6b8:	021b8040 	call	8021b804 <alt_putchar>
                        continue;
8021b6bc:	00004206 	br	8021b7c8 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
8021b6c0:	00800704 	movi	r2,28
8021b6c4:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
8021b6c8:	00000306 	br	8021b6d8 <alt_printf+0x100>
                        digit_shift -= 4;
8021b6cc:	e0bff917 	ldw	r2,-28(fp)
8021b6d0:	10bfff04 	addi	r2,r2,-4
8021b6d4:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
8021b6d8:	00c003c4 	movi	r3,15
8021b6dc:	e0bff917 	ldw	r2,-28(fp)
8021b6e0:	1884983a 	sll	r2,r3,r2
8021b6e4:	1007883a 	mov	r3,r2
8021b6e8:	e0bffb17 	ldw	r2,-20(fp)
8021b6ec:	1884703a 	and	r2,r3,r2
8021b6f0:	103ff626 	beq	r2,zero,8021b6cc <__reset+0xfa1fb6cc>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8021b6f4:	00001906 	br	8021b75c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
8021b6f8:	00c003c4 	movi	r3,15
8021b6fc:	e0bff917 	ldw	r2,-28(fp)
8021b700:	1884983a 	sll	r2,r3,r2
8021b704:	1007883a 	mov	r3,r2
8021b708:	e0bffb17 	ldw	r2,-20(fp)
8021b70c:	1886703a 	and	r3,r3,r2
8021b710:	e0bff917 	ldw	r2,-28(fp)
8021b714:	1884d83a 	srl	r2,r3,r2
8021b718:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
8021b71c:	e0bffc17 	ldw	r2,-16(fp)
8021b720:	108002a8 	cmpgeui	r2,r2,10
8021b724:	1000041e 	bne	r2,zero,8021b738 <alt_printf+0x160>
                            c = '0' + digit;
8021b728:	e0bffc17 	ldw	r2,-16(fp)
8021b72c:	10800c04 	addi	r2,r2,48
8021b730:	e0bff805 	stb	r2,-32(fp)
8021b734:	00000306 	br	8021b744 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
8021b738:	e0bffc17 	ldw	r2,-16(fp)
8021b73c:	108015c4 	addi	r2,r2,87
8021b740:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
8021b744:	e0bff807 	ldb	r2,-32(fp)
8021b748:	1009883a 	mov	r4,r2
8021b74c:	021b8040 	call	8021b804 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8021b750:	e0bff917 	ldw	r2,-28(fp)
8021b754:	10bfff04 	addi	r2,r2,-4
8021b758:	e0bff915 	stw	r2,-28(fp)
8021b75c:	e0bff917 	ldw	r2,-28(fp)
8021b760:	103fe50e 	bge	r2,zero,8021b6f8 <__reset+0xfa1fb6f8>
8021b764:	00001806 	br	8021b7c8 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
8021b768:	e0bff807 	ldb	r2,-32(fp)
8021b76c:	10801cd8 	cmpnei	r2,r2,115
8021b770:	1000151e 	bne	r2,zero,8021b7c8 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
8021b774:	e0bffe17 	ldw	r2,-8(fp)
8021b778:	10c00104 	addi	r3,r2,4
8021b77c:	e0fffe15 	stw	r3,-8(fp)
8021b780:	10800017 	ldw	r2,0(r2)
8021b784:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
8021b788:	00000906 	br	8021b7b0 <alt_printf+0x1d8>
                      alt_putchar(*s++);
8021b78c:	e0bffa17 	ldw	r2,-24(fp)
8021b790:	10c00044 	addi	r3,r2,1
8021b794:	e0fffa15 	stw	r3,-24(fp)
8021b798:	10800003 	ldbu	r2,0(r2)
8021b79c:	10803fcc 	andi	r2,r2,255
8021b7a0:	1080201c 	xori	r2,r2,128
8021b7a4:	10bfe004 	addi	r2,r2,-128
8021b7a8:	1009883a 	mov	r4,r2
8021b7ac:	021b8040 	call	8021b804 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
8021b7b0:	e0bffa17 	ldw	r2,-24(fp)
8021b7b4:	10800003 	ldbu	r2,0(r2)
8021b7b8:	10803fcc 	andi	r2,r2,255
8021b7bc:	1080201c 	xori	r2,r2,128
8021b7c0:	10bfe004 	addi	r2,r2,-128
8021b7c4:	103ff11e 	bne	r2,zero,8021b78c <__reset+0xfa1fb78c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
8021b7c8:	e0bff717 	ldw	r2,-36(fp)
8021b7cc:	10c00044 	addi	r3,r2,1
8021b7d0:	e0fff715 	stw	r3,-36(fp)
8021b7d4:	10800003 	ldbu	r2,0(r2)
8021b7d8:	e0bff805 	stb	r2,-32(fp)
8021b7dc:	e0bff807 	ldb	r2,-32(fp)
8021b7e0:	103f8a1e 	bne	r2,zero,8021b60c <__reset+0xfa1fb60c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8021b7e4:	00000106 	br	8021b7ec <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
8021b7e8:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8021b7ec:	0001883a 	nop
8021b7f0:	e037883a 	mov	sp,fp
8021b7f4:	dfc00117 	ldw	ra,4(sp)
8021b7f8:	df000017 	ldw	fp,0(sp)
8021b7fc:	dec00504 	addi	sp,sp,20
8021b800:	f800283a 	ret

8021b804 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
8021b804:	defffd04 	addi	sp,sp,-12
8021b808:	dfc00215 	stw	ra,8(sp)
8021b80c:	df000115 	stw	fp,4(sp)
8021b810:	df000104 	addi	fp,sp,4
8021b814:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
8021b818:	d0a00217 	ldw	r2,-32760(gp)
8021b81c:	10800217 	ldw	r2,8(r2)
8021b820:	100b883a 	mov	r5,r2
8021b824:	e13fff17 	ldw	r4,-4(fp)
8021b828:	021bc140 	call	8021bc14 <putc>
#endif
#endif
}
8021b82c:	e037883a 	mov	sp,fp
8021b830:	dfc00117 	ldw	ra,4(sp)
8021b834:	df000017 	ldw	fp,0(sp)
8021b838:	dec00204 	addi	sp,sp,8
8021b83c:	f800283a 	ret

8021b840 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
8021b840:	deffff04 	addi	sp,sp,-4
8021b844:	df000015 	stw	fp,0(sp)
8021b848:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
8021b84c:	000170fa 	wrctl	ienable,zero
}
8021b850:	0001883a 	nop
8021b854:	e037883a 	mov	sp,fp
8021b858:	df000017 	ldw	fp,0(sp)
8021b85c:	dec00104 	addi	sp,sp,4
8021b860:	f800283a 	ret

8021b864 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8021b864:	defffb04 	addi	sp,sp,-20
8021b868:	dfc00415 	stw	ra,16(sp)
8021b86c:	df000315 	stw	fp,12(sp)
8021b870:	df000304 	addi	fp,sp,12
8021b874:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
8021b878:	d0a00717 	ldw	r2,-32740(gp)
8021b87c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8021b880:	00003106 	br	8021b948 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
8021b884:	e0bffd17 	ldw	r2,-12(fp)
8021b888:	10800217 	ldw	r2,8(r2)
8021b88c:	1009883a 	mov	r4,r2
8021b890:	0206dec0 	call	80206dec <strlen>
8021b894:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
8021b898:	e0bffd17 	ldw	r2,-12(fp)
8021b89c:	10c00217 	ldw	r3,8(r2)
8021b8a0:	e0bffe17 	ldw	r2,-8(fp)
8021b8a4:	10bfffc4 	addi	r2,r2,-1
8021b8a8:	1885883a 	add	r2,r3,r2
8021b8ac:	10800003 	ldbu	r2,0(r2)
8021b8b0:	10803fcc 	andi	r2,r2,255
8021b8b4:	1080201c 	xori	r2,r2,128
8021b8b8:	10bfe004 	addi	r2,r2,-128
8021b8bc:	10800bd8 	cmpnei	r2,r2,47
8021b8c0:	1000031e 	bne	r2,zero,8021b8d0 <alt_find_file+0x6c>
    {
      len -= 1;
8021b8c4:	e0bffe17 	ldw	r2,-8(fp)
8021b8c8:	10bfffc4 	addi	r2,r2,-1
8021b8cc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8021b8d0:	e0bffe17 	ldw	r2,-8(fp)
8021b8d4:	e0ffff17 	ldw	r3,-4(fp)
8021b8d8:	1885883a 	add	r2,r3,r2
8021b8dc:	10800003 	ldbu	r2,0(r2)
8021b8e0:	10803fcc 	andi	r2,r2,255
8021b8e4:	1080201c 	xori	r2,r2,128
8021b8e8:	10bfe004 	addi	r2,r2,-128
8021b8ec:	10800be0 	cmpeqi	r2,r2,47
8021b8f0:	1000081e 	bne	r2,zero,8021b914 <alt_find_file+0xb0>
8021b8f4:	e0bffe17 	ldw	r2,-8(fp)
8021b8f8:	e0ffff17 	ldw	r3,-4(fp)
8021b8fc:	1885883a 	add	r2,r3,r2
8021b900:	10800003 	ldbu	r2,0(r2)
8021b904:	10803fcc 	andi	r2,r2,255
8021b908:	1080201c 	xori	r2,r2,128
8021b90c:	10bfe004 	addi	r2,r2,-128
8021b910:	10000a1e 	bne	r2,zero,8021b93c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
8021b914:	e0bffd17 	ldw	r2,-12(fp)
8021b918:	10800217 	ldw	r2,8(r2)
8021b91c:	e0fffe17 	ldw	r3,-8(fp)
8021b920:	180d883a 	mov	r6,r3
8021b924:	e17fff17 	ldw	r5,-4(fp)
8021b928:	1009883a 	mov	r4,r2
8021b92c:	021baf80 	call	8021baf8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8021b930:	1000021e 	bne	r2,zero,8021b93c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
8021b934:	e0bffd17 	ldw	r2,-12(fp)
8021b938:	00000706 	br	8021b958 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
8021b93c:	e0bffd17 	ldw	r2,-12(fp)
8021b940:	10800017 	ldw	r2,0(r2)
8021b944:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8021b948:	e0fffd17 	ldw	r3,-12(fp)
8021b94c:	d0a00704 	addi	r2,gp,-32740
8021b950:	18bfcc1e 	bne	r3,r2,8021b884 <__reset+0xfa1fb884>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
8021b954:	0005883a 	mov	r2,zero
}
8021b958:	e037883a 	mov	sp,fp
8021b95c:	dfc00117 	ldw	ra,4(sp)
8021b960:	df000017 	ldw	fp,0(sp)
8021b964:	dec00204 	addi	sp,sp,8
8021b968:	f800283a 	ret

8021b96c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
8021b96c:	defffc04 	addi	sp,sp,-16
8021b970:	df000315 	stw	fp,12(sp)
8021b974:	df000304 	addi	fp,sp,12
8021b978:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
8021b97c:	00bffa04 	movi	r2,-24
8021b980:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8021b984:	e03ffd15 	stw	zero,-12(fp)
8021b988:	00001906 	br	8021b9f0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
8021b98c:	00a008b4 	movhi	r2,32802
8021b990:	10b99304 	addi	r2,r2,-6580
8021b994:	e0fffd17 	ldw	r3,-12(fp)
8021b998:	18c00324 	muli	r3,r3,12
8021b99c:	10c5883a 	add	r2,r2,r3
8021b9a0:	10800017 	ldw	r2,0(r2)
8021b9a4:	10000f1e 	bne	r2,zero,8021b9e4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
8021b9a8:	00a008b4 	movhi	r2,32802
8021b9ac:	10b99304 	addi	r2,r2,-6580
8021b9b0:	e0fffd17 	ldw	r3,-12(fp)
8021b9b4:	18c00324 	muli	r3,r3,12
8021b9b8:	10c5883a 	add	r2,r2,r3
8021b9bc:	e0ffff17 	ldw	r3,-4(fp)
8021b9c0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
8021b9c4:	d0e00b17 	ldw	r3,-32724(gp)
8021b9c8:	e0bffd17 	ldw	r2,-12(fp)
8021b9cc:	1880020e 	bge	r3,r2,8021b9d8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
8021b9d0:	e0bffd17 	ldw	r2,-12(fp)
8021b9d4:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
8021b9d8:	e0bffd17 	ldw	r2,-12(fp)
8021b9dc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
8021b9e0:	00000606 	br	8021b9fc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8021b9e4:	e0bffd17 	ldw	r2,-12(fp)
8021b9e8:	10800044 	addi	r2,r2,1
8021b9ec:	e0bffd15 	stw	r2,-12(fp)
8021b9f0:	e0bffd17 	ldw	r2,-12(fp)
8021b9f4:	10800810 	cmplti	r2,r2,32
8021b9f8:	103fe41e 	bne	r2,zero,8021b98c <__reset+0xfa1fb98c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
8021b9fc:	e0bffe17 	ldw	r2,-8(fp)
}
8021ba00:	e037883a 	mov	sp,fp
8021ba04:	df000017 	ldw	fp,0(sp)
8021ba08:	dec00104 	addi	sp,sp,4
8021ba0c:	f800283a 	ret

8021ba10 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
8021ba10:	defffe04 	addi	sp,sp,-8
8021ba14:	df000115 	stw	fp,4(sp)
8021ba18:	df000104 	addi	fp,sp,4
8021ba1c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
8021ba20:	e0bfff17 	ldw	r2,-4(fp)
8021ba24:	10bffe84 	addi	r2,r2,-6
8021ba28:	10c00428 	cmpgeui	r3,r2,16
8021ba2c:	18001a1e 	bne	r3,zero,8021ba98 <alt_exception_cause_generated_bad_addr+0x88>
8021ba30:	100690ba 	slli	r3,r2,2
8021ba34:	00a008b4 	movhi	r2,32802
8021ba38:	10ae9204 	addi	r2,r2,-17848
8021ba3c:	1885883a 	add	r2,r3,r2
8021ba40:	10800017 	ldw	r2,0(r2)
8021ba44:	1000683a 	jmp	r2
8021ba48:	8021ba88 	cmpgei	zero,r16,-30998
8021ba4c:	8021ba88 	cmpgei	zero,r16,-30998
8021ba50:	8021ba98 	cmpnei	zero,r16,-30998
8021ba54:	8021ba98 	cmpnei	zero,r16,-30998
8021ba58:	8021ba98 	cmpnei	zero,r16,-30998
8021ba5c:	8021ba88 	cmpgei	zero,r16,-30998
8021ba60:	8021ba90 	cmplti	zero,r16,-30998
8021ba64:	8021ba98 	cmpnei	zero,r16,-30998
8021ba68:	8021ba88 	cmpgei	zero,r16,-30998
8021ba6c:	8021ba88 	cmpgei	zero,r16,-30998
8021ba70:	8021ba98 	cmpnei	zero,r16,-30998
8021ba74:	8021ba88 	cmpgei	zero,r16,-30998
8021ba78:	8021ba90 	cmplti	zero,r16,-30998
8021ba7c:	8021ba98 	cmpnei	zero,r16,-30998
8021ba80:	8021ba98 	cmpnei	zero,r16,-30998
8021ba84:	8021ba88 	cmpgei	zero,r16,-30998
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
8021ba88:	00800044 	movi	r2,1
8021ba8c:	00000306 	br	8021ba9c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
8021ba90:	0005883a 	mov	r2,zero
8021ba94:	00000106 	br	8021ba9c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
8021ba98:	0005883a 	mov	r2,zero
  }
}
8021ba9c:	e037883a 	mov	sp,fp
8021baa0:	df000017 	ldw	fp,0(sp)
8021baa4:	dec00104 	addi	sp,sp,4
8021baa8:	f800283a 	ret

8021baac <atexit>:
8021baac:	200b883a 	mov	r5,r4
8021bab0:	000f883a 	mov	r7,zero
8021bab4:	000d883a 	mov	r6,zero
8021bab8:	0009883a 	mov	r4,zero
8021babc:	021bcdc1 	jmpi	8021bcdc <__register_exitproc>

8021bac0 <exit>:
8021bac0:	defffe04 	addi	sp,sp,-8
8021bac4:	000b883a 	mov	r5,zero
8021bac8:	dc000015 	stw	r16,0(sp)
8021bacc:	dfc00115 	stw	ra,4(sp)
8021bad0:	2021883a 	mov	r16,r4
8021bad4:	021bdf40 	call	8021bdf4 <__call_exitprocs>
8021bad8:	00a008b4 	movhi	r2,32802
8021badc:	10be7c04 	addi	r2,r2,-1552
8021bae0:	11000017 	ldw	r4,0(r2)
8021bae4:	20800f17 	ldw	r2,60(r4)
8021bae8:	10000126 	beq	r2,zero,8021baf0 <exit+0x30>
8021baec:	103ee83a 	callr	r2
8021baf0:	8009883a 	mov	r4,r16
8021baf4:	021bf740 	call	8021bf74 <_exit>

8021baf8 <memcmp>:
8021baf8:	01c000c4 	movi	r7,3
8021bafc:	3980192e 	bgeu	r7,r6,8021bb64 <memcmp+0x6c>
8021bb00:	2144b03a 	or	r2,r4,r5
8021bb04:	11c4703a 	and	r2,r2,r7
8021bb08:	10000f26 	beq	r2,zero,8021bb48 <memcmp+0x50>
8021bb0c:	20800003 	ldbu	r2,0(r4)
8021bb10:	28c00003 	ldbu	r3,0(r5)
8021bb14:	10c0151e 	bne	r2,r3,8021bb6c <memcmp+0x74>
8021bb18:	31bfff84 	addi	r6,r6,-2
8021bb1c:	01ffffc4 	movi	r7,-1
8021bb20:	00000406 	br	8021bb34 <memcmp+0x3c>
8021bb24:	20800003 	ldbu	r2,0(r4)
8021bb28:	28c00003 	ldbu	r3,0(r5)
8021bb2c:	31bfffc4 	addi	r6,r6,-1
8021bb30:	10c00e1e 	bne	r2,r3,8021bb6c <memcmp+0x74>
8021bb34:	21000044 	addi	r4,r4,1
8021bb38:	29400044 	addi	r5,r5,1
8021bb3c:	31fff91e 	bne	r6,r7,8021bb24 <__reset+0xfa1fbb24>
8021bb40:	0005883a 	mov	r2,zero
8021bb44:	f800283a 	ret
8021bb48:	20c00017 	ldw	r3,0(r4)
8021bb4c:	28800017 	ldw	r2,0(r5)
8021bb50:	18bfee1e 	bne	r3,r2,8021bb0c <__reset+0xfa1fbb0c>
8021bb54:	31bfff04 	addi	r6,r6,-4
8021bb58:	21000104 	addi	r4,r4,4
8021bb5c:	29400104 	addi	r5,r5,4
8021bb60:	39bff936 	bltu	r7,r6,8021bb48 <__reset+0xfa1fbb48>
8021bb64:	303fe91e 	bne	r6,zero,8021bb0c <__reset+0xfa1fbb0c>
8021bb68:	003ff506 	br	8021bb40 <__reset+0xfa1fbb40>
8021bb6c:	10c5c83a 	sub	r2,r2,r3
8021bb70:	f800283a 	ret

8021bb74 <_putc_r>:
8021bb74:	defffc04 	addi	sp,sp,-16
8021bb78:	dc000215 	stw	r16,8(sp)
8021bb7c:	dfc00315 	stw	ra,12(sp)
8021bb80:	2021883a 	mov	r16,r4
8021bb84:	20000226 	beq	r4,zero,8021bb90 <_putc_r+0x1c>
8021bb88:	20800e17 	ldw	r2,56(r4)
8021bb8c:	10001b26 	beq	r2,zero,8021bbfc <_putc_r+0x88>
8021bb90:	30800217 	ldw	r2,8(r6)
8021bb94:	10bfffc4 	addi	r2,r2,-1
8021bb98:	30800215 	stw	r2,8(r6)
8021bb9c:	10000a16 	blt	r2,zero,8021bbc8 <_putc_r+0x54>
8021bba0:	30800017 	ldw	r2,0(r6)
8021bba4:	11400005 	stb	r5,0(r2)
8021bba8:	30800017 	ldw	r2,0(r6)
8021bbac:	10c00044 	addi	r3,r2,1
8021bbb0:	30c00015 	stw	r3,0(r6)
8021bbb4:	10800003 	ldbu	r2,0(r2)
8021bbb8:	dfc00317 	ldw	ra,12(sp)
8021bbbc:	dc000217 	ldw	r16,8(sp)
8021bbc0:	dec00404 	addi	sp,sp,16
8021bbc4:	f800283a 	ret
8021bbc8:	30c00617 	ldw	r3,24(r6)
8021bbcc:	10c00616 	blt	r2,r3,8021bbe8 <_putc_r+0x74>
8021bbd0:	30800017 	ldw	r2,0(r6)
8021bbd4:	00c00284 	movi	r3,10
8021bbd8:	11400005 	stb	r5,0(r2)
8021bbdc:	30800017 	ldw	r2,0(r6)
8021bbe0:	11400003 	ldbu	r5,0(r2)
8021bbe4:	28fff11e 	bne	r5,r3,8021bbac <__reset+0xfa1fbbac>
8021bbe8:	8009883a 	mov	r4,r16
8021bbec:	dfc00317 	ldw	ra,12(sp)
8021bbf0:	dc000217 	ldw	r16,8(sp)
8021bbf4:	dec00404 	addi	sp,sp,16
8021bbf8:	021345c1 	jmpi	8021345c <__swbuf_r>
8021bbfc:	d9400015 	stw	r5,0(sp)
8021bc00:	d9800115 	stw	r6,4(sp)
8021bc04:	020d3000 	call	8020d300 <__sinit>
8021bc08:	d9800117 	ldw	r6,4(sp)
8021bc0c:	d9400017 	ldw	r5,0(sp)
8021bc10:	003fdf06 	br	8021bb90 <__reset+0xfa1fbb90>

8021bc14 <putc>:
8021bc14:	00a008b4 	movhi	r2,32802
8021bc18:	defffc04 	addi	sp,sp,-16
8021bc1c:	10be7d04 	addi	r2,r2,-1548
8021bc20:	dc000115 	stw	r16,4(sp)
8021bc24:	14000017 	ldw	r16,0(r2)
8021bc28:	dc400215 	stw	r17,8(sp)
8021bc2c:	dfc00315 	stw	ra,12(sp)
8021bc30:	2023883a 	mov	r17,r4
8021bc34:	80000226 	beq	r16,zero,8021bc40 <putc+0x2c>
8021bc38:	80800e17 	ldw	r2,56(r16)
8021bc3c:	10001a26 	beq	r2,zero,8021bca8 <putc+0x94>
8021bc40:	28800217 	ldw	r2,8(r5)
8021bc44:	10bfffc4 	addi	r2,r2,-1
8021bc48:	28800215 	stw	r2,8(r5)
8021bc4c:	10000b16 	blt	r2,zero,8021bc7c <putc+0x68>
8021bc50:	28800017 	ldw	r2,0(r5)
8021bc54:	14400005 	stb	r17,0(r2)
8021bc58:	28800017 	ldw	r2,0(r5)
8021bc5c:	10c00044 	addi	r3,r2,1
8021bc60:	28c00015 	stw	r3,0(r5)
8021bc64:	10800003 	ldbu	r2,0(r2)
8021bc68:	dfc00317 	ldw	ra,12(sp)
8021bc6c:	dc400217 	ldw	r17,8(sp)
8021bc70:	dc000117 	ldw	r16,4(sp)
8021bc74:	dec00404 	addi	sp,sp,16
8021bc78:	f800283a 	ret
8021bc7c:	28c00617 	ldw	r3,24(r5)
8021bc80:	10c00e16 	blt	r2,r3,8021bcbc <putc+0xa8>
8021bc84:	28800017 	ldw	r2,0(r5)
8021bc88:	01000284 	movi	r4,10
8021bc8c:	14400005 	stb	r17,0(r2)
8021bc90:	28800017 	ldw	r2,0(r5)
8021bc94:	10c00003 	ldbu	r3,0(r2)
8021bc98:	193ff01e 	bne	r3,r4,8021bc5c <__reset+0xfa1fbc5c>
8021bc9c:	280d883a 	mov	r6,r5
8021bca0:	180b883a 	mov	r5,r3
8021bca4:	00000706 	br	8021bcc4 <putc+0xb0>
8021bca8:	8009883a 	mov	r4,r16
8021bcac:	d9400015 	stw	r5,0(sp)
8021bcb0:	020d3000 	call	8020d300 <__sinit>
8021bcb4:	d9400017 	ldw	r5,0(sp)
8021bcb8:	003fe106 	br	8021bc40 <__reset+0xfa1fbc40>
8021bcbc:	280d883a 	mov	r6,r5
8021bcc0:	880b883a 	mov	r5,r17
8021bcc4:	8009883a 	mov	r4,r16
8021bcc8:	dfc00317 	ldw	ra,12(sp)
8021bccc:	dc400217 	ldw	r17,8(sp)
8021bcd0:	dc000117 	ldw	r16,4(sp)
8021bcd4:	dec00404 	addi	sp,sp,16
8021bcd8:	021345c1 	jmpi	8021345c <__swbuf_r>

8021bcdc <__register_exitproc>:
8021bcdc:	defffa04 	addi	sp,sp,-24
8021bce0:	dc000315 	stw	r16,12(sp)
8021bce4:	042008b4 	movhi	r16,32802
8021bce8:	843e7c04 	addi	r16,r16,-1552
8021bcec:	80c00017 	ldw	r3,0(r16)
8021bcf0:	dc400415 	stw	r17,16(sp)
8021bcf4:	dfc00515 	stw	ra,20(sp)
8021bcf8:	18805217 	ldw	r2,328(r3)
8021bcfc:	2023883a 	mov	r17,r4
8021bd00:	10003726 	beq	r2,zero,8021bde0 <__register_exitproc+0x104>
8021bd04:	10c00117 	ldw	r3,4(r2)
8021bd08:	010007c4 	movi	r4,31
8021bd0c:	20c00e16 	blt	r4,r3,8021bd48 <__register_exitproc+0x6c>
8021bd10:	1a000044 	addi	r8,r3,1
8021bd14:	8800221e 	bne	r17,zero,8021bda0 <__register_exitproc+0xc4>
8021bd18:	18c00084 	addi	r3,r3,2
8021bd1c:	18c7883a 	add	r3,r3,r3
8021bd20:	18c7883a 	add	r3,r3,r3
8021bd24:	12000115 	stw	r8,4(r2)
8021bd28:	10c7883a 	add	r3,r2,r3
8021bd2c:	19400015 	stw	r5,0(r3)
8021bd30:	0005883a 	mov	r2,zero
8021bd34:	dfc00517 	ldw	ra,20(sp)
8021bd38:	dc400417 	ldw	r17,16(sp)
8021bd3c:	dc000317 	ldw	r16,12(sp)
8021bd40:	dec00604 	addi	sp,sp,24
8021bd44:	f800283a 	ret
8021bd48:	00800034 	movhi	r2,0
8021bd4c:	10800004 	addi	r2,r2,0
8021bd50:	10002626 	beq	r2,zero,8021bdec <__register_exitproc+0x110>
8021bd54:	01006404 	movi	r4,400
8021bd58:	d9400015 	stw	r5,0(sp)
8021bd5c:	d9800115 	stw	r6,4(sp)
8021bd60:	d9c00215 	stw	r7,8(sp)
8021bd64:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
8021bd68:	d9400017 	ldw	r5,0(sp)
8021bd6c:	d9800117 	ldw	r6,4(sp)
8021bd70:	d9c00217 	ldw	r7,8(sp)
8021bd74:	10001d26 	beq	r2,zero,8021bdec <__register_exitproc+0x110>
8021bd78:	81000017 	ldw	r4,0(r16)
8021bd7c:	10000115 	stw	zero,4(r2)
8021bd80:	02000044 	movi	r8,1
8021bd84:	22405217 	ldw	r9,328(r4)
8021bd88:	0007883a 	mov	r3,zero
8021bd8c:	12400015 	stw	r9,0(r2)
8021bd90:	20805215 	stw	r2,328(r4)
8021bd94:	10006215 	stw	zero,392(r2)
8021bd98:	10006315 	stw	zero,396(r2)
8021bd9c:	883fde26 	beq	r17,zero,8021bd18 <__reset+0xfa1fbd18>
8021bda0:	18c9883a 	add	r4,r3,r3
8021bda4:	2109883a 	add	r4,r4,r4
8021bda8:	1109883a 	add	r4,r2,r4
8021bdac:	21802215 	stw	r6,136(r4)
8021bdb0:	01800044 	movi	r6,1
8021bdb4:	12406217 	ldw	r9,392(r2)
8021bdb8:	30cc983a 	sll	r6,r6,r3
8021bdbc:	4992b03a 	or	r9,r9,r6
8021bdc0:	12406215 	stw	r9,392(r2)
8021bdc4:	21c04215 	stw	r7,264(r4)
8021bdc8:	01000084 	movi	r4,2
8021bdcc:	893fd21e 	bne	r17,r4,8021bd18 <__reset+0xfa1fbd18>
8021bdd0:	11006317 	ldw	r4,396(r2)
8021bdd4:	218cb03a 	or	r6,r4,r6
8021bdd8:	11806315 	stw	r6,396(r2)
8021bddc:	003fce06 	br	8021bd18 <__reset+0xfa1fbd18>
8021bde0:	18805304 	addi	r2,r3,332
8021bde4:	18805215 	stw	r2,328(r3)
8021bde8:	003fc606 	br	8021bd04 <__reset+0xfa1fbd04>
8021bdec:	00bfffc4 	movi	r2,-1
8021bdf0:	003fd006 	br	8021bd34 <__reset+0xfa1fbd34>

8021bdf4 <__call_exitprocs>:
8021bdf4:	defff504 	addi	sp,sp,-44
8021bdf8:	df000915 	stw	fp,36(sp)
8021bdfc:	dd400615 	stw	r21,24(sp)
8021be00:	dc800315 	stw	r18,12(sp)
8021be04:	dfc00a15 	stw	ra,40(sp)
8021be08:	ddc00815 	stw	r23,32(sp)
8021be0c:	dd800715 	stw	r22,28(sp)
8021be10:	dd000515 	stw	r20,20(sp)
8021be14:	dcc00415 	stw	r19,16(sp)
8021be18:	dc400215 	stw	r17,8(sp)
8021be1c:	dc000115 	stw	r16,4(sp)
8021be20:	d9000015 	stw	r4,0(sp)
8021be24:	2839883a 	mov	fp,r5
8021be28:	04800044 	movi	r18,1
8021be2c:	057fffc4 	movi	r21,-1
8021be30:	00a008b4 	movhi	r2,32802
8021be34:	10be7c04 	addi	r2,r2,-1552
8021be38:	12000017 	ldw	r8,0(r2)
8021be3c:	45005217 	ldw	r20,328(r8)
8021be40:	44c05204 	addi	r19,r8,328
8021be44:	a0001c26 	beq	r20,zero,8021beb8 <__call_exitprocs+0xc4>
8021be48:	a0800117 	ldw	r2,4(r20)
8021be4c:	15ffffc4 	addi	r23,r2,-1
8021be50:	b8000d16 	blt	r23,zero,8021be88 <__call_exitprocs+0x94>
8021be54:	14000044 	addi	r16,r2,1
8021be58:	8421883a 	add	r16,r16,r16
8021be5c:	8421883a 	add	r16,r16,r16
8021be60:	84402004 	addi	r17,r16,128
8021be64:	a463883a 	add	r17,r20,r17
8021be68:	a421883a 	add	r16,r20,r16
8021be6c:	e0001e26 	beq	fp,zero,8021bee8 <__call_exitprocs+0xf4>
8021be70:	80804017 	ldw	r2,256(r16)
8021be74:	e0801c26 	beq	fp,r2,8021bee8 <__call_exitprocs+0xf4>
8021be78:	bdffffc4 	addi	r23,r23,-1
8021be7c:	843fff04 	addi	r16,r16,-4
8021be80:	8c7fff04 	addi	r17,r17,-4
8021be84:	bd7ff91e 	bne	r23,r21,8021be6c <__reset+0xfa1fbe6c>
8021be88:	00800034 	movhi	r2,0
8021be8c:	10800004 	addi	r2,r2,0
8021be90:	10000926 	beq	r2,zero,8021beb8 <__call_exitprocs+0xc4>
8021be94:	a0800117 	ldw	r2,4(r20)
8021be98:	1000301e 	bne	r2,zero,8021bf5c <__call_exitprocs+0x168>
8021be9c:	a0800017 	ldw	r2,0(r20)
8021bea0:	10003226 	beq	r2,zero,8021bf6c <__call_exitprocs+0x178>
8021bea4:	a009883a 	mov	r4,r20
8021bea8:	98800015 	stw	r2,0(r19)
8021beac:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
8021beb0:	9d000017 	ldw	r20,0(r19)
8021beb4:	a03fe41e 	bne	r20,zero,8021be48 <__reset+0xfa1fbe48>
8021beb8:	dfc00a17 	ldw	ra,40(sp)
8021bebc:	df000917 	ldw	fp,36(sp)
8021bec0:	ddc00817 	ldw	r23,32(sp)
8021bec4:	dd800717 	ldw	r22,28(sp)
8021bec8:	dd400617 	ldw	r21,24(sp)
8021becc:	dd000517 	ldw	r20,20(sp)
8021bed0:	dcc00417 	ldw	r19,16(sp)
8021bed4:	dc800317 	ldw	r18,12(sp)
8021bed8:	dc400217 	ldw	r17,8(sp)
8021bedc:	dc000117 	ldw	r16,4(sp)
8021bee0:	dec00b04 	addi	sp,sp,44
8021bee4:	f800283a 	ret
8021bee8:	a0800117 	ldw	r2,4(r20)
8021beec:	80c00017 	ldw	r3,0(r16)
8021bef0:	10bfffc4 	addi	r2,r2,-1
8021bef4:	15c01426 	beq	r2,r23,8021bf48 <__call_exitprocs+0x154>
8021bef8:	80000015 	stw	zero,0(r16)
8021befc:	183fde26 	beq	r3,zero,8021be78 <__reset+0xfa1fbe78>
8021bf00:	95c8983a 	sll	r4,r18,r23
8021bf04:	a0806217 	ldw	r2,392(r20)
8021bf08:	a5800117 	ldw	r22,4(r20)
8021bf0c:	2084703a 	and	r2,r4,r2
8021bf10:	10000b26 	beq	r2,zero,8021bf40 <__call_exitprocs+0x14c>
8021bf14:	a0806317 	ldw	r2,396(r20)
8021bf18:	2088703a 	and	r4,r4,r2
8021bf1c:	20000c1e 	bne	r4,zero,8021bf50 <__call_exitprocs+0x15c>
8021bf20:	89400017 	ldw	r5,0(r17)
8021bf24:	d9000017 	ldw	r4,0(sp)
8021bf28:	183ee83a 	callr	r3
8021bf2c:	a0800117 	ldw	r2,4(r20)
8021bf30:	15bfbf1e 	bne	r2,r22,8021be30 <__reset+0xfa1fbe30>
8021bf34:	98800017 	ldw	r2,0(r19)
8021bf38:	153fcf26 	beq	r2,r20,8021be78 <__reset+0xfa1fbe78>
8021bf3c:	003fbc06 	br	8021be30 <__reset+0xfa1fbe30>
8021bf40:	183ee83a 	callr	r3
8021bf44:	003ff906 	br	8021bf2c <__reset+0xfa1fbf2c>
8021bf48:	a5c00115 	stw	r23,4(r20)
8021bf4c:	003feb06 	br	8021befc <__reset+0xfa1fbefc>
8021bf50:	89000017 	ldw	r4,0(r17)
8021bf54:	183ee83a 	callr	r3
8021bf58:	003ff406 	br	8021bf2c <__reset+0xfa1fbf2c>
8021bf5c:	a0800017 	ldw	r2,0(r20)
8021bf60:	a027883a 	mov	r19,r20
8021bf64:	1029883a 	mov	r20,r2
8021bf68:	003fb606 	br	8021be44 <__reset+0xfa1fbe44>
8021bf6c:	0005883a 	mov	r2,zero
8021bf70:	003ffb06 	br	8021bf60 <__reset+0xfa1fbf60>

8021bf74 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
8021bf74:	defffd04 	addi	sp,sp,-12
8021bf78:	df000215 	stw	fp,8(sp)
8021bf7c:	df000204 	addi	fp,sp,8
8021bf80:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
8021bf84:	0001883a 	nop
8021bf88:	e0bfff17 	ldw	r2,-4(fp)
8021bf8c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8021bf90:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
8021bf94:	10000226 	beq	r2,zero,8021bfa0 <_exit+0x2c>
    ALT_SIM_FAIL();
8021bf98:	002af070 	cmpltui	zero,zero,43969
8021bf9c:	00000106 	br	8021bfa4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
8021bfa0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
8021bfa4:	003fff06 	br	8021bfa4 <__reset+0xfa1fbfa4>
